[{"strategy": "generate", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class PseudoTcpSocketImpl_getPTCPOptionTest {\n\n    private PseudoTcpSocketImpl pseudoTcpSocket;\n    private PseudoTCPBase mockPseudoTcp;\n\n    @BeforeEach\n    public void setUp() throws SocketException {\n        mockPseudoTcp = mock(PseudoTCPBase.class);\n        pseudoTcpSocket = new PseudoTcpSocketImpl(12345, new DatagramSocket()) {\n            @Override\n            public PseudoTCPBase getPseudoTcp() {\n                return mockPseudoTcp;\n            }\n        };\n    }\n\n    @Test\n    public void testGetPTCPOption_ReadTimeout() {\n        pseudoTcpSocket.setPTCPOption(Option.OPT_READ_TIMEOUT, 1000);\n        assertEquals(1000, pseudoTcpSocket.getPTCPOption(Option.OPT_READ_TIMEOUT));\n    }\n\n    @Test\n    public void testGetPTCPOption_WriteTimeout() {\n        pseudoTcpSocket.setPTCPOption(Option.OPT_WRITE_TIMEOUT, 2000);\n        assertEquals(2000, pseudoTcpSocket.getPTCPOption(Option.OPT_WRITE_TIMEOUT));\n    }\n\n    @Test\n    public void testGetPTCPOption_OtherOption() {\n        when(mockPseudoTcp.getOption(Option.OPT_OTHER)).thenReturn(3000L);\n        assertEquals(3000, pseudoTcpSocket.getPTCPOption(Option.OPT_OTHER));\n    }\n}\n"}]