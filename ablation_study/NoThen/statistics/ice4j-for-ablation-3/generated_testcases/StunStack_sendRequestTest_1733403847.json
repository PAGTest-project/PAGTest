[{"strategy": "generate", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.ice4j.message.*;\nimport org.ice4j.security.*;\nimport org.ice4j.socket.*;\nimport org.jitsi.utils.concurrent.*;\nimport javax.crypto.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StunStack_sendRequestTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private Request bindingRequest;\n    private Response bindingResponse;\n    private PlainRequestCollector requestCollector;\n    private PlainResponseCollector responseCollector;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n\n        IceUdpSocketWrapper clientSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(clientAddress));\n        IceUdpSocketWrapper serverSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(serverAddress));\n\n        stunStack.addSocket(clientSock);\n        stunStack.addSocket(serverSock);\n\n        bindingRequest = MessageFactory.createBindingRequest();\n        bindingResponse = MessageFactory.create3489BindingResponse(\n            clientAddress, clientAddress, serverAddress);\n\n        requestCollector = new PlainRequestCollector();\n        responseCollector = new PlainResponseCollector();\n    }\n\n    @Test\n    public void testSendRequestSuccess() throws Exception {\n        stunStack.addRequestListener(serverAddress, requestCollector);\n        TransactionID transactionID = stunStack.sendRequest(\n            bindingRequest, serverAddress, clientAddress, responseCollector);\n\n        assertNotNull(transactionID, \"TransactionID should not be null\");\n\n        requestCollector.waitForRequest();\n\n        StunMessageEvent evt = requestCollector.receivedRequests.get(0);\n        byte[] tid = evt.getMessage().getTransactionID();\n        stunStack.sendResponse(tid, bindingResponse, serverAddress, clientAddress);\n\n        responseCollector.waitForResponse();\n\n        assertEquals(1, responseCollector.receivedResponses.size(),\n            \"There should be one response received\");\n    }\n\n    @Test\n    public void testSendRequestIOException() {\n        // Simulate an IOException by providing an invalid address\n        TransportAddress invalidAddress = new TransportAddress(\"invalid.address\", 0, Transport.UDP);\n\n        assertThrows(IOException.class, () -> {\n            stunStack.sendRequest(bindingRequest, invalidAddress, clientAddress, responseCollector);\n        }, \"IOException should be thrown for invalid address\");\n    }\n\n    @Test\n    public void testSendRequestIllegalArgumentException() {\n        // Simulate an IllegalArgumentException by providing a null request\n        assertThrows(IllegalArgumentException.class, () -> {\n            stunStack.sendRequest(null, serverAddress, clientAddress, responseCollector);\n        }, \"IllegalArgumentException should be thrown for null request\");\n    }\n}\n"}]