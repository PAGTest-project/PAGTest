[{"strategy": "retry", "code": "\npackage org.ice4j.pseudotcp;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass PseudoTcpSocketImpl_getOptionTest {\n\n    private PseudoTcpSocketImpl socket;\n    private Map<Integer, Object> options;\n\n    @BeforeEach\n    void setUp() throws SocketException {\n        socket = new PseudoTcpSocketImpl(12345, new DatagramSocket());\n        options = new HashMap<>();\n        socket.setOptions(options); // Use a setter method to access private field\n    }\n\n    @Test\n    void testGetOption_TCP_NODELAY_True() throws SocketException {\n        options.put(Option.OPT_NODELAY.ordinal(), true);\n        assertTrue((Boolean) socket.getOption(1)); // Use the actual value instead of SocketOptions.TCP_NODELAY\n    }\n\n    @Test\n    void testGetOption_TCP_NODELAY_False() throws SocketException {\n        options.put(Option.OPT_NODELAY.ordinal(), false);\n        assertFalse((Boolean) socket.getOption(1)); // Use the actual value instead of SocketOptions.TCP_NODELAY\n    }\n\n    @Test\n    void testGetOption_UnknownOptID_ReturnsNull() throws SocketException {\n        assertNull(socket.getOption(999));\n    }\n\n    @Test\n    void testGetOption_KnownOptID_ReturnsValue() throws SocketException {\n        options.put(1, \"value\");\n        assertEquals(\"value\", socket.getOption(1));\n    }\n}\n"}]