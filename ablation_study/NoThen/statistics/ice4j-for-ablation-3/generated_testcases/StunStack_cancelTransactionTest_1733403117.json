[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StunStack_cancelTransactionTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private Request bindingRequest;\n    private Response bindingResponse;\n    private RequestCollector requestCollector;\n    private ResponseCollector responseCollector;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        stunStack = new StunStack();\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", 0, Transport.UDP);\n\n        bindingRequest = MessageFactory.createBindingRequest();\n        bindingResponse = MessageFactory.create3489BindingResponse(\n            clientAddress, clientAddress, serverAddress);\n\n        requestCollector = new RequestCollector();\n        responseCollector = new ResponseCollector();\n    }\n\n    @Test\n    public void testCancelTransaction() throws Exception {\n        // Given\n        stunStack.addRequestListener(serverAddress, requestCollector);\n        stunStack.sendRequest(bindingRequest, serverAddress, clientAddress, responseCollector);\n        requestCollector.waitForRequest();\n        StunMessageEvent evt = requestCollector.receivedRequests.get(0);\n        TransactionID tid = evt.getTransactionID();\n\n        // When\n        stunStack.cancelTransaction(tid);\n\n        // Then\n        assertNull(stunStack.getClientTransaction(tid.getBytes()), \"Transaction was not canceled\");\n    }\n\n    @Test\n    public void testCancelNonExistentTransaction() {\n        // Given\n        TransactionID nonExistentTid = TransactionID.createNewTransactionID();\n\n        // When\n        stunStack.cancelTransaction(nonExistentTid);\n\n        // Then\n        assertNull(stunStack.getClientTransaction(nonExistentTid.getBytes()), \"Non-existent transaction was canceled\");\n    }\n}\n"}]