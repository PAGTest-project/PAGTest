
package org.ice4j.pseudotcp;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.logging.Level;

import static org.mockito.Mockito.*;

public class PseudoTcpSocketImpl_onTcpOpenTest {

    @Test
    public void testOnTcpOpen() throws IOException {
        // Given
        PseudoTcpSocketImpl socketImpl = new PseudoTcpSocketImpl(12345);
        PseudoTCPBase tcp = Mockito.mock(PseudoTCPBase.class);
        InetSocketAddress remoteAddress = new InetSocketAddress("localhost", 12345);
        socketImpl.doConnect(remoteAddress, 0);

        // When
        socketImpl.onTcpOpen(tcp);

        // Then
        verify(tcp, times(1)).connect();
        verify(tcp, times(1)).notifyClock(anyLong());
        verify(tcp, times(1)).getAvailable();
        verify(tcp, times(1)).getAvailableSendBuffer();
        verify(tcp, times(1)).getBytesBufferedNotSent();
        verify(tcp, times(1)).getAckNotify();
        verify(tcp, times(1)).getConversationID();
        verify(tcp, times(1)).setConversationID(anyLong());
        verify(tcp, times(1)).getSendBufferSize();
        verify(tcp, times(1)).getRecvBufferSize();
        verify(tcp, times(1)).getM_rwnd_scale();
        verify(tcp, times(1)).getM_swnd_scale();
        verify(tcp, times(1)).getCongestionWindow();
        verify(tcp, times(1)).getBytesInFlight();
        verify(tcp, times(1)).getRoundTripTimeEstimateMs();
        verify(tcp, times(1)).getMTU();
        verify(tcp, times(1)).notifyMTU(anyInt());
        verify(tcp, times(1)).getOption(any());
        verify(tcp, times(1)).setOption(any(), anyLong());
        verify(tcp, times(1)).close(anyBoolean());
        verify(tcp, times(1)).queue(any(), anyInt(), anyInt(), anyBoolean());
        verify(tcp, times(1)).packet(anyLong(), anyShort(), anyLong(), anyLong());
        verify(tcp, times(1)).parseSeg(any(), anyInt());
        verify(tcp, times(1)).segToStr(any());
        verify(tcp, times(1)).parse(any(), anyInt());
        verify(tcp, times(1)).clock_check(anyLong());
        verify(tcp, times(1)).process(any());
        verify(tcp, times(1)).transmit(any(), anyLong());
        verify(tcp, times(1)).attemptSend(any());
        verify(tcp, times(1)).closedown(any());
        verify(tcp, times(1)).adjustMTU();
        verify(tcp, times(1)).isReceiveBufferFull();
        verify(tcp, times(1)).disableWindowScale();
        verify(tcp, times(1)).queueConnectMessage();
        verify(tcp, times(1)).parseOptions(any(), anyInt(), anyInt());
        verify(tcp, times(1)).applyOption(anyShort(), any(), anyLong());
        verify(tcp, times(1)).applyWindowScaleOption(anyShort());
        verify(tcp, times(1)).resizeSendBuffer(anyInt());
        verify(tcp, times(1)).resizeReceiveBuffer(anyInt());
        verify(tcp, times(1)).getM_snd_wnd();
        verify(tcp, times(1)).getState();
    }
}
