[{"strategy": "generate", "code": "\npackage org.ice4j.attribute;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.ice4j.*;\nimport org.junit.jupiter.api.*;\n\npublic class RequestedAddressFamilyAttribute_getDataLengthTest {\n    private RequestedAddressFamilyAttribute requestedAddressFamilyAttribute;\n    private MsgFixture msgFixture;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        this.requestedAddressFamilyAttribute = new RequestedAddressFamilyAttribute();\n        this.msgFixture = new MsgFixture();\n    }\n\n    @Test\n    public void testGetDataLength() {\n        assertEquals(RequestedAddressFamilyAttribute.DATA_LENGTH, requestedAddressFamilyAttribute.getDataLength(), \"getDataLength() should return the constant DATA_LENGTH\");\n    }\n\n    @Test\n    public void testSetFamilyValidIPv4() {\n        assertTrue(requestedAddressFamilyAttribute.setFamily(RequestedAddressFamilyAttribute.IPv4), \"setFamily() should return true for valid IPv4 family\");\n        assertEquals(RequestedAddressFamilyAttribute.IPv4, requestedAddressFamilyAttribute.getFamily(), \"getFamily() should return IPv4 after setting it\");\n    }\n\n    @Test\n    public void testSetFamilyValidIPv6() {\n        assertTrue(requestedAddressFamilyAttribute.setFamily(RequestedAddressFamilyAttribute.IPv6), \"setFamily() should return true for valid IPv6 family\");\n        assertEquals(RequestedAddressFamilyAttribute.IPv6, requestedAddressFamilyAttribute.getFamily(), \"getFamily() should return IPv6 after setting it\");\n    }\n\n    @Test\n    public void testSetFamilyInvalid() {\n        assertFalse(requestedAddressFamilyAttribute.setFamily((char) 0x03), \"setFamily() should return false for invalid family\");\n    }\n\n    @Test\n    public void testDecodeAttributeBodyValidIPv4() throws StunException {\n        byte[] attributeValue = new byte[]{(byte) RequestedAddressFamilyAttribute.IPv4};\n        requestedAddressFamilyAttribute.decodeAttributeBody(attributeValue, (char) 0, (char) 1);\n        assertEquals(RequestedAddressFamilyAttribute.IPv4, requestedAddressFamilyAttribute.getFamily(), \"decodeAttributeBody() should set family to IPv4 for valid input\");\n    }\n\n    @Test\n    public void testDecodeAttributeBodyValidIPv6() throws StunException {\n        byte[] attributeValue = new byte[]{(byte) RequestedAddressFamilyAttribute.IPv6};\n        requestedAddressFamilyAttribute.decodeAttributeBody(attributeValue, (char) 0, (char) 1);\n        assertEquals(RequestedAddressFamilyAttribute.IPv6, requestedAddressFamilyAttribute.getFamily(), \"decodeAttributeBody() should set family to IPv6 for valid input\");\n    }\n\n    @Test\n    public void testDecodeAttributeBodyInvalidLength() {\n        byte[] attributeValue = new byte[]{(byte) RequestedAddressFamilyAttribute.IPv4};\n        assertThrows(StunException.class, () -> requestedAddressFamilyAttribute.decodeAttributeBody(attributeValue, (char) 0, (char) 2), \"decodeAttributeBody() should throw StunException for invalid length\");\n    }\n\n    @Test\n    public void testDecodeAttributeBodyInvalidFamily() {\n        byte[] attributeValue = new byte[]{(byte) 0x03};\n        assertThrows(StunException.class, () -> requestedAddressFamilyAttribute.decodeAttributeBody(attributeValue, (char) 0, (char) 1), \"decodeAttributeBody() should throw StunException for invalid family\");\n    }\n}\n"}]