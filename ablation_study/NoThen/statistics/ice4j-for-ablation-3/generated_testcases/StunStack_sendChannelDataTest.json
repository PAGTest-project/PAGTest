[{"strategy": "retry", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.attribute.*;\nimport org.ice4j.message.*;\nimport org.ice4j.security.*;\nimport org.ice4j.socket.*;\nimport org.jitsi.utils.concurrent.*;\nimport javax.crypto.*;\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.logging.*;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class StunStack_sendChannelDataTest {\n\n    @Test\n    public void testSendChannelData_Success() throws StunException, IOException {\n        // Given\n        StunStack stunStack = new StunStack();\n        ChannelData channelData = mock(ChannelData.class);\n        TransportAddress sendTo = mock(TransportAddress.class);\n        TransportAddress sendThrough = mock(TransportAddress.class);\n        NetAccessManager netAccessManager = mock(NetAccessManager.class);\n        when(stunStack.getNetAccessManager()).thenReturn(netAccessManager);\n\n        // When\n        stunStack.sendChannelData(channelData, sendTo, sendThrough);\n\n        // Then\n        verify(netAccessManager).sendMessage(channelData, sendThrough, sendTo);\n    }\n\n    @Test\n    public void testSendChannelData_IllegalArgumentException() throws IOException {\n        // Given\n        StunStack stunStack = new StunStack();\n        ChannelData channelData = mock(ChannelData.class);\n        TransportAddress sendTo = mock(TransportAddress.class);\n        TransportAddress sendThrough = mock(TransportAddress.class);\n        NetAccessManager netAccessManager = mock(NetAccessManager.class);\n        when(stunStack.getNetAccessManager()).thenReturn(netAccessManager);\n        doThrow(new IllegalArgumentException()).when(netAccessManager).sendMessage(channelData, sendThrough, sendTo);\n\n        // When\n        StunException exception = assertThrows(StunException.class, () -> {\n            stunStack.sendChannelData(channelData, sendTo, sendThrough);\n        });\n\n        // Then\n        assertEquals(StunException.ILLEGAL_ARGUMENT, exception.getID());\n        assertTrue(exception.getMessage().contains(\"Failed to send STUN indication: \" + channelData));\n    }\n\n    @Test\n    public void testSendChannelData_IOException() throws IOException {\n        // Given\n        StunStack stunStack = new StunStack();\n        ChannelData channelData = mock(ChannelData.class);\n        TransportAddress sendTo = mock(TransportAddress.class);\n        TransportAddress sendThrough = mock(TransportAddress.class);\n        NetAccessManager netAccessManager = mock(NetAccessManager.class);\n        when(stunStack.getNetAccessManager()).thenReturn(netAccessManager);\n        doThrow(new IOException()).when(netAccessManager).sendMessage(channelData, sendThrough, sendTo);\n\n        // When\n        StunException exception = assertThrows(StunException.class, () -> {\n            stunStack.sendChannelData(channelData, sendTo, sendThrough);\n        });\n\n        // Then\n        assertEquals(StunException.NETWORK_ERROR, exception.getID());\n        assertTrue(exception.getMessage().contains(\"Failed to send STUN indication: \" + channelData));\n    }\n}\n"}]