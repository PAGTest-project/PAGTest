[{"strategy": "generate", "code": "\npackage org.ice4j.attribute;\n\nimport org.ice4j.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class ConnectionIdAttribute_getDataLengthTest {\n    private ConnectionIdAttribute connectionIdAttribute;\n    private MsgFixture msgFixture;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        this.connectionIdAttribute = new ConnectionIdAttribute();\n        this.msgFixture = new MsgFixture();\n    }\n\n    @Test\n    public void testGetDataLength() {\n        assertEquals(4, connectionIdAttribute.getDataLength(), \"Data length should be 4\");\n    }\n\n    @Test\n    public void testEncode() {\n        byte[] expectedReturn = msgFixture.connectionId;\n        connectionIdAttribute.setConnectionIdValue(MsgFixture.CONNECTION_ID);\n        byte[] actualReturn = connectionIdAttribute.encode();\n\n        assertArrayEquals(expectedReturn, actualReturn,\n            \"ConnectionIdAttribute.encode() did not properly encode a sample attribute\");\n    }\n\n    @Test\n    public void testEquals() {\n        ConnectionIdAttribute otherAttribute = new ConnectionIdAttribute();\n        otherAttribute.setConnectionIdValue(MsgFixture.CONNECTION_ID);\n\n        assertTrue(connectionIdAttribute.equals(otherAttribute), \"Attributes should be equal\");\n    }\n\n    @Test\n    public void testDecodeAttributeBody() throws StunException {\n        byte[] attributeValue = msgFixture.connectionId;\n        connectionIdAttribute.decodeAttributeBody(attributeValue, (char) 0, (char) 4);\n\n        assertEquals(MsgFixture.CONNECTION_ID, connectionIdAttribute.getConnectionIdValue(),\n            \"Connection ID value should be decoded correctly\");\n    }\n}\n"}]