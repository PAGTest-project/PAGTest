[{"strategy": "generate", "code": "\npackage org.ice4j.attribute;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class ErrorCodeAttribute_getDefaultReasonPhraseTest {\n    private ErrorCodeAttribute errorCodeAttribute;\n\n    @BeforeEach\n    public void setUp() {\n        errorCodeAttribute = new ErrorCodeAttribute();\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_TryAlternate() {\n        String expected = \"(Try Alternate): The server would like the client to use the server specified in the ALTERNATE-SERVER attribute instead.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.TRY_ALTERNATE);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_BadRequest() {\n        String expected = \"(Bad Request): The request was malformed. The client should not retry the request without modification from the previous attempt.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.BAD_REQUEST);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_Unauthorized() {\n        String expected = \"(Unauthorized): The Binding Request did not contain a MESSAGE-INTEGRITY attribute.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.UNAUTHORIZED);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_Forbidden() {\n        String expected = \"(Forbidden): The request was valid but cannot be performed due to administrative or similar restrictions.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.FORBIDDEN);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UnknownAttribute() {\n        String expected = \"(Unknown Attribute): The server did not understand a mandatory attribute in the request.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.UNKNOWN_ATTRIBUTE);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_StaleCredentials() {\n        String expected = \"(Stale Credentials): The Binding Request did contain a MESSAGE-INTEGRITY attribute, but it used a shared secret that has expired.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.STALE_CREDENTIALS);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_IntegrityCheckFailure() {\n        String expected = \"(Integrity Check Failure): The Binding Request contained a MESSAGE-INTEGRITY attribute, but the HMAC failed verification.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.INTEGRITY_CHECK_FAILURE);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_MissingUsername() {\n        String expected = \"(Missing Username): The Binding Request contained a MESSAGE-INTEGRITY attribute, but not a USERNAME attribute.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.MISSING_USERNAME);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UseTLS() {\n        String expected = \"(Use TLS): The Shared Secret request has to be sent over TLS, but was not received over TLS.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.USE_TLS);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_AllocationMismatch() {\n        String expected = \"(Allocation Mismatch): A request was received by the server that requires an allocation to be in place, but no allocation exists, or a request was received that requires no allocation, but an allocation exists.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.ALLOCATION_MISMATCH);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_StaleNonce() {\n        String expected = \"(Stale Nonce): See the procedures for the long-term credential mechanism.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.STALE_NONCE);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_AddressFamilyNotSupported() {\n        String expected = \"(Address Family not Supported): The server does not support the address family requested by the client.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.ADDRESS_FAMILY_NOT_SUPPORTED);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_WrongCredentials() {\n        String expected = \"(Wrong Credentials): The credentials in the (non-Allocate) request do not match those used to create the allocation.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.WRONG_CREDENTIALS);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UnsupportedTransportProtocol() {\n        String expected = \"(Unsupported Transport Protocol): The Allocate request asked the server to use a transport protocol between the server and the peer that the server does not support.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.UNSUPPORTED_TRANSPORT_PROTOCOL);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_PeerAddressFamilyMismatch() {\n        String expected = \"Peer Address Family Mismatch): A peer address was of a different address family than that of the relayed transport address of the allocation.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.PEER_ADDRESS_FAMILY_MISMATCH);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_ConnectionAlreadyExists() {\n        String expected = \"Connection Already Exists\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.CONNECTION_ALREADY_EXISTS);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_ConnectionTimeoutOrFailure() {\n        String expected = \"Connection Timeout or Failure\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.CONNECTION_TIMEOUT_OR_FAILURE);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_AllocationQuotaReached() {\n        String expected = \"(Allocation Quota Reached): No more allocations using this username can be created at the present time.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.ALLOCATION_QUOTA_REACHED);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_ServerError() {\n        String expected = \"(Server Error): The server has suffered a temporary error. The client should try again.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.SERVER_ERROR);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_InsufficientCapacity() {\n        String expected = \"(Insufficient Capacity): The server is unable to carry out the request due to some capacity limit being reached.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.INSUFFICIENT_CAPACITY);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_GlobalFailure() {\n        String expected = \"(Global Failure:) The server is refusing to fulfill the request. The client should not retry.\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase(ErrorCodeAttribute.GLOBAL_FAILURE);\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetDefaultReasonPhrase_UnknownError() {\n        String expected = \"Unknown Error\";\n        String actual = ErrorCodeAttribute.getDefaultReasonPhrase((char) 999);\n        assertEquals(expected, actual);\n    }\n}\n"}]