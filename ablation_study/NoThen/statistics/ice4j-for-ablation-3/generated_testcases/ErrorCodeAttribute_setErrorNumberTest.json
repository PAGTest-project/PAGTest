[{"strategy": "retry", "code": "\npackage org.ice4j.attribute;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.*;\n\npublic class ErrorCodeAttribute_setErrorNumberTest {\n    private ErrorCodeAttribute errorCodeAttribute;\n\n    @BeforeEach\n    public void setUp() {\n        errorCodeAttribute = new ErrorCodeAttribute();\n    }\n\n    @Test\n    public void testSetErrorNumberValid() {\n        byte validErrorNumber = 50;\n        assertDoesNotThrow(() -> errorCodeAttribute.setErrorNumber(validErrorNumber));\n        assertEquals(validErrorNumber, errorCodeAttribute.getErrorNumber());\n    }\n\n    @Test\n    public void testSetErrorNumberInvalid() {\n        byte invalidErrorNumber = 100;\n        assertThrows(IllegalArgumentException.class, () -> errorCodeAttribute.setErrorNumber(invalidErrorNumber));\n    }\n\n    @Test\n    public void testSetErrorNumberWithReasonPhrase() {\n        byte validErrorNumber = 50;\n        String reasonPhrase = \"Test Reason Phrase\";\n        errorCodeAttribute.setErrorNumber(validErrorNumber);\n        errorCodeAttribute.setReasonPhrase(reasonPhrase);\n        assertEquals(validErrorNumber, errorCodeAttribute.getErrorNumber());\n        assertEquals(reasonPhrase, errorCodeAttribute.getReasonPhrase());\n    }\n\n    @Test\n    public void testSetErrorNumberWithErrorCode() {\n        byte validErrorNumber = 50;\n        byte validErrorClass = 4;\n        errorCodeAttribute.setErrorNumber(validErrorNumber);\n        errorCodeAttribute.setErrorClass(validErrorClass);\n        assertEquals(validErrorNumber, errorCodeAttribute.getErrorNumber());\n        assertEquals(validErrorClass, errorCodeAttribute.getErrorClass());\n        assertEquals((char)(validErrorClass * 100 + validErrorNumber), errorCodeAttribute.getErrorCode());\n    }\n\n    @Test\n    public void testSetErrorNumberWithEncode() {\n        byte validErrorNumber = 50;\n        byte validErrorClass = 4;\n        errorCodeAttribute.setErrorNumber(validErrorNumber);\n        errorCodeAttribute.setErrorClass(validErrorClass);\n        byte[] encoded = errorCodeAttribute.encode();\n        assertNotNull(encoded);\n        assertEquals(validErrorClass, encoded[6]);\n        assertEquals(validErrorNumber, encoded[7]);\n    }\n}\n"}]