[{"strategy": "generate", "code": "\npackage org.ice4j.stack;\n\nimport org.ice4j.*;\nimport org.ice4j.message.*;\nimport org.ice4j.socket.*;\nimport org.junit.jupiter.api.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StunStack_sendUdpMessageTest {\n    private StunStack stunStack;\n    private TransportAddress clientAddress;\n    private TransportAddress serverAddress;\n    private IceSocketWrapper clientSock;\n    private IceSocketWrapper serverSock;\n    private RawMessage udpMessage;\n\n    @BeforeEach\n    public void setUp() throws Exception {\n        clientSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n        serverSock = new IceUdpSocketWrapper(\n            new SafeCloseDatagramSocket(new InetSocketAddress(\"127.0.0.1\", 0)));\n\n        clientAddress = new TransportAddress(\"127.0.0.1\", clientSock.getLocalPort(), Transport.UDP);\n        serverAddress = new TransportAddress(\"127.0.0.1\", serverSock.getLocalPort(), Transport.UDP);\n\n        stunStack = new StunStack();\n        stunStack.addSocket(clientSock);\n        stunStack.addSocket(serverSock);\n\n        udpMessage = RawMessage.build(new byte[]{0x00, 0x01, 0x00, 0x08, 0x21, 0x12, 0xa4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 16, clientAddress, serverAddress);\n    }\n\n    @Test\n    public void testSendUdpMessageSuccess() throws StunException {\n        assertDoesNotThrow(() -> stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress));\n    }\n\n    @Test\n    public void testSendUdpMessageIllegalArgumentException() {\n        udpMessage = RawMessage.build(new byte[]{}, 0, clientAddress, serverAddress);\n        StunException exception = assertThrows(StunException.class, () -> stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress));\n        assertEquals(StunException.ILLEGAL_ARGUMENT, exception.getID());\n        assertTrue(exception.getMessage().contains(\"Failed to send STUN indication\"));\n    }\n\n    @Test\n    public void testSendUdpMessageIOException() {\n        udpMessage = RawMessage.build(new byte[]{0x00, 0x01, 0x00, 0x08, 0x21, 0x12, 0xa4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, 16, clientAddress, serverAddress);\n        // Simulate IOException by setting an invalid address\n        serverAddress = new TransportAddress(\"invalid.address\", 12345, Transport.UDP);\n        StunException exception = assertThrows(StunException.class, () -> stunStack.sendUdpMessage(udpMessage, serverAddress, clientAddress));\n        assertEquals(StunException.NETWORK_ERROR, exception.getID());\n        assertTrue(exception.getMessage().contains(\"Failed to send STUN indication\"));\n    }\n}\n"}]