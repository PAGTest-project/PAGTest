[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PermutationIterator_nextTest {\n\n    private PermutationIterator<Character> permutationIterator;\n\n    @BeforeEach\n    public void setUp() {\n        List<Character> collection = Arrays.asList('A', 'B', 'C');\n        permutationIterator = new PermutationIterator<>(collection);\n    }\n\n    @Test\n    public void testNextPermutation() {\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> firstPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('A', 'B', 'C'), firstPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> secondPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('A', 'C', 'B'), secondPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> thirdPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('C', 'A', 'B'), thirdPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> fourthPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('C', 'B', 'A'), fourthPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> fifthPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('B', 'C', 'A'), fifthPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> sixthPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('B', 'A', 'C'), sixthPermutation);\n\n        assertFalse(permutationIterator.hasNext());\n    }\n\n    @Test\n    public void testNextPermutationThrowsNoSuchElementException() {\n        List<Character> collection = new ArrayList<>();\n        PermutationIterator<Character> emptyIterator = new PermutationIterator<>(collection);\n\n        assertTrue(emptyIterator.hasNext());\n        assertEquals(0, emptyIterator.next().size());\n\n        assertThrows(NoSuchElementException.class, () -> {\n            emptyIterator.next();\n        });\n    }\n\n    @Test\n    public void testRemoveNotSupported() {\n        assertThrows(UnsupportedOperationException.class, () -> {\n            permutationIterator.remove();\n        });\n    }\n}\n"}]