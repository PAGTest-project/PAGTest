[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static java.util.Arrays.asList;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.map.MultiValueMap;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class IndexedCollection_getTest {\n\n    private IndexedCollection<Integer, String> indexedCollection;\n    private Transformer<String, Integer> keyTransformer;\n\n    @BeforeEach\n    public void setUp() {\n        keyTransformer = new Transformer<String, Integer>() {\n            @Override\n            public Integer transform(String input) {\n                return Integer.parseInt(input);\n            }\n        };\n        indexedCollection = new IndexedCollection<>(new ArrayList<>(), keyTransformer,\n                MultiValueMap.<Integer, String>multiValueMap(new HashMap<>()), false);\n    }\n\n    @Test\n    public void testGetWithExistingKey() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n    }\n\n    @Test\n    public void testGetWithNonExistingKey() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertNull(indexedCollection.get(4));\n    }\n\n    @Test\n    public void testGetAfterReindex() {\n        Collection<String> original = new ArrayList<>();\n        original.add(\"1\");\n        original.add(\"2\");\n        original.add(\"3\");\n\n        indexedCollection = new IndexedCollection<>(original, keyTransformer,\n                MultiValueMap.<Integer, String>multiValueMap(new HashMap<>()), false);\n\n        assertNull(indexedCollection.get(1));\n        assertNull(indexedCollection.get(2));\n        assertNull(indexedCollection.get(3));\n\n        indexedCollection.reindex();\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n    }\n\n    @Test\n    public void testGetAfterAddToIndex() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n\n        indexedCollection.add(\"4\");\n\n        assertEquals(\"4\", indexedCollection.get(4));\n    }\n\n    @Test\n    public void testGetAfterRemoveFromIndex() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n\n        indexedCollection.remove(\"2\");\n\n        assertNull(indexedCollection.get(2));\n    }\n}\n"}]