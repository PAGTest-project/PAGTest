[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.queue;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.NoSuchElementException;\n\npublic class CircularFifoQueue_addTest {\n\n    private CircularFifoQueue<String> queue;\n\n    @BeforeEach\n    public void setUp() {\n        queue = new CircularFifoQueue<>(3);\n    }\n\n    @Test\n    public void testAddElementSuccess() {\n        assertTrue(queue.add(\"Element1\"));\n        assertEquals(1, queue.size());\n        assertEquals(\"Element1\", queue.peek());\n    }\n\n    @Test\n    public void testAddElementNull() {\n        assertThrows(NullPointerException.class, () -> queue.add(null));\n    }\n\n    @Test\n    public void testAddElementAtFullCapacity() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.add(\"Element3\");\n        assertTrue(queue.isAtFullCapacity());\n        assertTrue(queue.add(\"Element4\"));\n        assertEquals(3, queue.size());\n        assertEquals(\"Element2\", queue.peek());\n    }\n\n    @Test\n    public void testAddElementWrapAround() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.add(\"Element3\");\n        queue.add(\"Element4\");\n        assertEquals(3, queue.size());\n        assertEquals(\"Element2\", queue.peek());\n        assertEquals(\"Element2\", queue.get(0));\n        assertEquals(\"Element3\", queue.get(1));\n        assertEquals(\"Element4\", queue.get(2));\n    }\n\n    @Test\n    public void testAddElementAfterClear() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.clear();\n        assertTrue(queue.add(\"Element3\"));\n        assertEquals(1, queue.size());\n        assertEquals(\"Element3\", queue.peek());\n    }\n\n    @Test\n    public void testAddElementAfterRemove() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.remove();\n        assertTrue(queue.add(\"Element3\"));\n        assertEquals(2, queue.size());\n        assertEquals(\"Element2\", queue.peek());\n    }\n}\n"}]