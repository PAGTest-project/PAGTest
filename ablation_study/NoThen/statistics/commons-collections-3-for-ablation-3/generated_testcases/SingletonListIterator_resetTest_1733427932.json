[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class SingletonListIterator_resetTest {\n    private static final Object testValue = new Object();\n    private SingletonListIterator<Object> iterator;\n\n    @BeforeEach\n    public void setUp() {\n        iterator = new SingletonListIterator<>(testValue);\n    }\n\n    @Test\n    public void testResetAfterInitialization() {\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }\n\n    @Test\n    public void testResetAfterNextCall() {\n        iterator.next();\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }\n\n    @Test\n    public void testResetAfterRemove() {\n        iterator.next();\n        iterator.remove();\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }\n\n    @Test\n    public void testResetAfterSet() {\n        iterator.next();\n        iterator.set(new Object());\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }\n}\n"}]