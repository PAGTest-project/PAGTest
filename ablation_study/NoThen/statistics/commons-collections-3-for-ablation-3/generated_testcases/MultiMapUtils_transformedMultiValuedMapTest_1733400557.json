[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.apache.commons.collections4.multimap.ArrayListValuedHashMap;\nimport org.apache.commons.collections4.multimap.TransformedMultiValuedMap;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiMapUtils_transformedMultiValuedMapTest {\n\n    private MultiValuedMap<String, String> originalMap;\n    private Transformer<String, String> keyTransformer;\n    private Transformer<String, String> valueTransformer;\n\n    @BeforeEach\n    public void setUp() {\n        originalMap = new ArrayListValuedHashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        originalMap.put(\"key2\", \"value2\");\n\n        keyTransformer = new Transformer<String, String>() {\n            @Override\n            public String transform(String input) {\n                return input.toUpperCase();\n            }\n        };\n\n        valueTransformer = new Transformer<String, String>() {\n            @Override\n            public String transform(String input) {\n                return input.toLowerCase();\n            }\n        };\n    }\n\n    @Test\n    public void testTransformedMultiValuedMap() {\n        MultiValuedMap<String, String> transformedMap = MultiMapUtils.transformedMultiValuedMap(originalMap, keyTransformer, valueTransformer);\n\n        assertEquals(\"value1\", transformedMap.get(\"KEY1\").iterator().next());\n        assertEquals(\"value2\", transformedMap.get(\"KEY2\").iterator().next());\n    }\n\n    @Test\n    public void testTransformedMultiValuedMapWithEmptyMap() {\n        originalMap.clear();\n        MultiValuedMap<String, String> transformedMap = MultiMapUtils.transformedMultiValuedMap(originalMap, keyTransformer, valueTransformer);\n\n        assertTrue(transformedMap.isEmpty());\n    }\n\n    @Test\n    public void testTransformedMultiValuedMapWithNullTransformers() {\n        MultiValuedMap<String, String> transformedMap = MultiMapUtils.transformedMultiValuedMap(originalMap, null, null);\n\n        assertEquals(\"value1\", transformedMap.get(\"key1\").iterator().next());\n        assertEquals(\"value2\", transformedMap.get(\"key2\").iterator().next());\n    }\n\n    @Test\n    public void testTransformedMultiValuedMapWithNullMap() {\n        assertThrows(NullPointerException.class, () -> {\n            MultiMapUtils.transformedMultiValuedMap(null, keyTransformer, valueTransformer);\n        });\n    }\n}\n"}]