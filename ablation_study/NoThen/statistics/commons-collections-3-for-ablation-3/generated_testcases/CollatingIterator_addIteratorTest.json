[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CollatingIterator_addIteratorTest {\n\n    private CollatingIterator<Integer> collatingIterator;\n\n    @BeforeEach\n    void setUp() {\n        collatingIterator = new CollatingIterator<>(Comparator.naturalOrder());\n    }\n\n    @Test\n    void testAddIterator_Success() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        collatingIterator.addIterator(iterator);\n        assertEquals(1, collatingIterator.getIterators().size());\n    }\n\n    @Test\n    void testAddIterator_NullIterator() {\n        assertThrows(NullPointerException.class, () -> collatingIterator.addIterator(null));\n    }\n\n    @Test\n    void testAddIterator_AfterStart() {\n        collatingIterator.hasNext(); // This will call start() internally\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        assertThrows(IllegalStateException.class, () -> collatingIterator.addIterator(iterator));\n    }\n}\n"}]