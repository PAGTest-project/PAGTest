[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.EmptyStackException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ArrayStack_peekTest {\n\n    private ArrayStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new ArrayStack<>();\n    }\n\n    @Test\n    public void testPeekWithNonEmptyStack() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(\"Second Item\", stack.peek(), \"Top item should be 'Second Item'\");\n    }\n\n    @Test\n    public void testPeekWithEmptyStack() {\n        assertThrows(EmptyStackException.class, () -> stack.peek(), \"Peeking an empty stack should throw EmptyStackException\");\n    }\n\n    @Test\n    public void testPeekAfterPop() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.pop();\n        assertEquals(\"First Item\", stack.peek(), \"Top item should be 'First Item' after pop\");\n    }\n\n    @Test\n    public void testPeekWithSingleItemStack() {\n        stack.push(\"Single Item\");\n        assertEquals(\"Single Item\", stack.peek(), \"Top item should be 'Single Item'\");\n    }\n\n    @Test\n    public void testPeekWithMultiplePushesAndPops() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        stack.pop();\n        stack.pop();\n        assertEquals(\"First Item\", stack.peek(), \"Top item should be 'First Item' after multiple pushes and pops\");\n    }\n}\n"}]