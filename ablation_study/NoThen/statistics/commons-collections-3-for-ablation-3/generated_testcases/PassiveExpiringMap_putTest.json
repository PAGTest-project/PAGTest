[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\npublic class PassiveExpiringMap_putTest {\n\n    @Test\n    public void testPut_EntryNeverExpires() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(-1L);\n        String key = \"key\";\n        String value = \"value\";\n\n        // When\n        String result = map.put(key, value);\n\n        // Then\n        assertNull(result);\n        assertEquals(value, map.get(key));\n    }\n\n    @Test\n    public void testPut_EntryAlwaysExpires() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(0L);\n        String key = \"key\";\n        String value = \"value\";\n\n        // When\n        String result = map.put(key, value);\n\n        // Then\n        assertNull(result);\n        assertNull(map.get(key));\n    }\n\n    @Test\n    public void testPut_EntryExpiresAfterTime() throws InterruptedException {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(1, TimeUnit.SECONDS);\n        String key = \"key\";\n        String value = \"value\";\n\n        // When\n        String result = map.put(key, value);\n\n        // Then\n        assertNull(result);\n        assertEquals(value, map.get(key));\n\n        // Wait for the entry to expire\n        Thread.sleep(1100);\n        assertNull(map.get(key));\n    }\n}\n"}]