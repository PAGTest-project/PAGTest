[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bag;\n\nimport org.apache.commons.collections4.SortedBag;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\npublic class CollectionSortedBag_retainAllTest {\n\n    private CollectionSortedBag<String> bag;\n    private SortedBag<String> mockBag;\n\n    @BeforeEach\n    public void setUp() {\n        mockBag = Mockito.mock(SortedBag.class);\n        bag = new CollectionSortedBag<>(mockBag);\n    }\n\n    @Test\n    public void testRetainAll_NonEmptyCollection() {\n        // Given\n        Collection<String> collection = Arrays.asList(\"A\", \"B\");\n        when(mockBag.iterator()).thenReturn(Arrays.asList(\"A\", \"B\", \"C\").iterator());\n        when(mockBag.contains(\"A\")).thenReturn(true);\n        when(mockBag.contains(\"B\")).thenReturn(true);\n        when(mockBag.contains(\"C\")).thenReturn(false);\n\n        // When\n        boolean result = bag.retainAll(collection);\n\n        // Then\n        assertTrue(result);\n        verify(mockBag, times(1)).iterator();\n        verify(mockBag, times(1)).contains(\"A\");\n        verify(mockBag, times(1)).contains(\"B\");\n        verify(mockBag, times(1)).contains(\"C\");\n        verify(mockBag, times(1)).remove(any());\n    }\n\n    @Test\n    public void testRetainAll_NullCollection() {\n        // Given\n        Collection<String> collection = null;\n\n        // When\n        boolean result = bag.retainAll(collection);\n\n        // Then\n        assertFalse(result);\n        verify(mockBag, times(1)).retainAll(null);\n    }\n}\n"}]