[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_keySetTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n\n        map2 = new HashMap<>();\n        map2.put(\"key3\", \"value3\");\n        map2.put(\"key4\", \"value4\");\n\n        compositeMap = new CompositeMap<>(map1, map2);\n    }\n\n    @Test\n    public void testKeySetWithMultipleMaps() {\n        Set<String> keySet = compositeMap.keySet();\n        assertEquals(4, keySet.size());\n        assertTrue(keySet.contains(\"key1\"));\n        assertTrue(keySet.contains(\"key2\"));\n        assertTrue(keySet.contains(\"key3\"));\n        assertTrue(keySet.contains(\"key4\"));\n    }\n\n    @Test\n    public void testKeySetAfterAddingMap() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"key5\", \"value5\");\n        compositeMap.addComposited(map3);\n\n        Set<String> keySet = compositeMap.keySet();\n        assertEquals(5, keySet.size());\n        assertTrue(keySet.contains(\"key5\"));\n    }\n\n    @Test\n    public void testKeySetAfterRemovingMap() {\n        compositeMap.removeComposited(map2);\n\n        Set<String> keySet = compositeMap.keySet();\n        assertEquals(2, keySet.size());\n        assertTrue(keySet.contains(\"key1\"));\n        assertTrue(keySet.contains(\"key2\"));\n        assertFalse(keySet.contains(\"key3\"));\n        assertFalse(keySet.contains(\"key4\"));\n    }\n\n    @Test\n    public void testKeySetAfterClearingMap() {\n        map1.clear();\n        map2.clear();\n\n        Set<String> keySet = compositeMap.keySet();\n        assertTrue(keySet.isEmpty());\n    }\n\n    @Test\n    public void testKeySetAfterPuttingNewEntry() {\n        map1.put(\"key5\", \"value5\");\n\n        Set<String> keySet = compositeMap.keySet();\n        assertEquals(5, keySet.size());\n        assertTrue(keySet.contains(\"key5\"));\n    }\n\n    @Test\n    public void testKeySetWithEmptyCompositeMap() {\n        CompositeMap<String, String> emptyMap = new CompositeMap<>();\n\n        Set<String> keySet = emptyMap.keySet();\n        assertTrue(keySet.isEmpty());\n    }\n\n    @Test\n    public void testKeySetWithNullMap() {\n        assertThrows(NullPointerException.class, () -> {\n            compositeMap.addComposited(null);\n        });\n    }\n}\n"}]