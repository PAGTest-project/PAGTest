[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.functors;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.apache.commons.collections4.Predicate;\nimport org.junit.jupiter.api.Test;\n\npublic class AllPredicate_allPredicateTest {\n\n    @Test\n    public void testAllPredicate_EmptyCollection() {\n        Collection<Predicate<Object>> predicates = Arrays.asList();\n        Predicate<Object> result = AllPredicate.allPredicate(predicates);\n        assertTrue(result.test(new Object()));\n    }\n\n    @Test\n    public void testAllPredicate_SinglePredicate() {\n        Predicate<Object> mockPredicate = mock(Predicate.class);\n        Object testObject = new Object();\n        when(mockPredicate.test(testObject)).thenReturn(true);\n\n        Collection<Predicate<Object>> predicates = Arrays.asList(mockPredicate);\n        Predicate<Object> result = AllPredicate.allPredicate(predicates);\n        assertTrue(result.test(testObject));\n    }\n\n    @Test\n    public void testAllPredicate_MultiplePredicates() {\n        Predicate<Object> mockPredicate1 = mock(Predicate.class);\n        Predicate<Object> mockPredicate2 = mock(Predicate.class);\n        Object testObject = new Object();\n        when(mockPredicate1.test(testObject)).thenReturn(true);\n        when(mockPredicate2.test(testObject)).thenReturn(true);\n\n        Collection<Predicate<Object>> predicates = Arrays.asList(mockPredicate1, mockPredicate2);\n        Predicate<Object> result = AllPredicate.allPredicate(predicates);\n        assertTrue(result.test(testObject));\n    }\n}\n"}]