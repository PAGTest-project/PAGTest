[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.TransformerUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class TransformedSortedMap_headMapTest {\n\n    private SortedMap<String, String> baseMap;\n    private Transformer<String, String> keyTransformer;\n    private Transformer<String, String> valueTransformer;\n\n    @BeforeEach\n    public void setUp() {\n        baseMap = new TreeMap<>();\n        baseMap.put(\"A\", \"1\");\n        baseMap.put(\"B\", \"2\");\n        baseMap.put(\"C\", \"3\");\n\n        keyTransformer = TransformerUtils.nopTransformer();\n        valueTransformer = TransformerUtils.nopTransformer();\n    }\n\n    @Test\n    public void testHeadMap() {\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> headMap = transformedMap.headMap(\"B\");\n\n        assertEquals(1, headMap.size());\n        assertEquals(\"1\", headMap.get(\"A\"));\n    }\n\n    @Test\n    public void testHeadMapWithEmptyMap() {\n        baseMap.clear();\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> headMap = transformedMap.headMap(\"B\");\n\n        assertEquals(0, headMap.size());\n    }\n\n    @Test\n    public void testHeadMapWithNullKey() {\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        assertThrows(NullPointerException.class, () -> {\n            transformedMap.headMap(null);\n        });\n    }\n\n    @Test\n    public void testHeadMapWithNonExistentKey() {\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> headMap = transformedMap.headMap(\"Z\");\n\n        assertEquals(3, headMap.size());\n        assertEquals(\"1\", headMap.get(\"A\"));\n        assertEquals(\"2\", headMap.get(\"B\"));\n        assertEquals(\"3\", headMap.get(\"C\"));\n    }\n}\n"}]