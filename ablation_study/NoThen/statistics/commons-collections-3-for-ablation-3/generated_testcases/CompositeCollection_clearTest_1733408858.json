[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_clearTest {\n    private CompositeCollection<String> c;\n    private Collection<String> one;\n    private Collection<String> two;\n\n    @BeforeEach\n    public void setUp() {\n        c = new CompositeCollection<>();\n        one = new HashSet<>();\n        two = new HashSet<>();\n        one.add(\"element1\");\n        one.add(\"element2\");\n        two.add(\"element3\");\n        c.addComposited(one, two);\n    }\n\n    @Test\n    public void testClear() {\n        // Given\n        assertEquals(3, c.size());\n        assertFalse(c.isEmpty());\n\n        // When\n        c.clear();\n\n        // Then\n        assertEquals(0, c.size());\n        assertTrue(c.isEmpty());\n    }\n\n    @Test\n    public void testClearWithEmptyComposite() {\n        // Given\n        CompositeCollection<String> emptyComposite = new CompositeCollection<>();\n\n        // When\n        emptyComposite.clear();\n\n        // Then\n        assertEquals(0, emptyComposite.size());\n        assertTrue(emptyComposite.isEmpty());\n    }\n\n    @Test\n    public void testClearWithSingleCollection() {\n        // Given\n        CompositeCollection<String> singleComposite = new CompositeCollection<>(one);\n        assertEquals(2, singleComposite.size());\n        assertFalse(singleComposite.isEmpty());\n\n        // When\n        singleComposite.clear();\n\n        // Then\n        assertEquals(0, singleComposite.size());\n        assertTrue(singleComposite.isEmpty());\n    }\n\n    @Test\n    public void testClearWithMultipleCollections() {\n        // Given\n        Collection<String> three = new HashSet<>();\n        three.add(\"element4\");\n        c.addComposited(three);\n        assertEquals(4, c.size());\n        assertFalse(c.isEmpty());\n\n        // When\n        c.clear();\n\n        // Then\n        assertEquals(0, c.size());\n        assertTrue(c.isEmpty());\n    }\n}\n"}]