[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.util.EmptyStackException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ArrayStack_searchTest {\n\n    private ArrayStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new ArrayStack<>(3);\n    }\n\n    @Test\n    public void testSearchTopItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(1, stack.search(\"Second Item\"), \"Top item is 'Second Item'\");\n    }\n\n    @Test\n    public void testSearchMiddleItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        assertEquals(2, stack.search(\"Second Item\"), \"Middle item is 'Second Item'\");\n    }\n\n    @Test\n    public void testSearchBottomItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        assertEquals(3, stack.search(\"First Item\"), \"Bottom item is 'First Item'\");\n    }\n\n    @Test\n    public void testSearchMissingItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(-1, stack.search(\"Missing Item\"), \"Cannot find 'Missing Item'\");\n    }\n\n    @Test\n    public void testSearchEmptyStack() {\n        assertEquals(-1, stack.search(\"Any Item\"), \"Stack is empty, cannot find any item\");\n    }\n\n    @Test\n    public void testSearchNullItem() {\n        stack.push(\"First Item\");\n        stack.push(null);\n        assertEquals(1, stack.search(null), \"Top item is null\");\n    }\n\n    @Test\n    public void testSearchNullInEmptyStack() {\n        assertEquals(-1, stack.search(null), \"Stack is empty, cannot find null\");\n    }\n\n    @Test\n    public void testSearchAfterPop() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.pop();\n        assertEquals(1, stack.search(\"First Item\"), \"Top item is 'First Item' after pop\");\n    }\n\n    @Test\n    public void testSearchAfterMultiplePops() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        stack.pop();\n        stack.pop();\n        assertEquals(1, stack.search(\"First Item\"), \"Top item is 'First Item' after multiple pops\");\n    }\n\n    @Test\n    public void testSearchAfterPushAndPop() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.pop();\n        stack.push(\"Third Item\");\n        assertEquals(2, stack.search(\"First Item\"), \"Middle item is 'First Item' after push and pop\");\n    }\n}\n"}]