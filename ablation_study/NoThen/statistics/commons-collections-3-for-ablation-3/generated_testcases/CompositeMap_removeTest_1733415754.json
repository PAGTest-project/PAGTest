[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_removeTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"1\", \"one\");\n        map1.put(\"2\", \"two\");\n\n        map2 = new HashMap<>();\n        map2.put(\"3\", \"three\");\n        map2.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(map1, map2, new CompositeMap.MapMutator<String, String>() {\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n                // No-op\n            }\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                return map1.put(key, value);\n            }\n\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> t) {\n                map1.putAll(t);\n            }\n        });\n    }\n\n    @Test\n    public void testRemoveExistingKey() {\n        assertTrue(compositeMap.containsKey(\"1\"));\n        assertEquals(\"one\", compositeMap.remove(\"1\"));\n        assertFalse(compositeMap.containsKey(\"1\"));\n    }\n\n    @Test\n    public void testRemoveNonExistingKey() {\n        assertFalse(compositeMap.containsKey(\"5\"));\n        assertNull(compositeMap.remove(\"5\"));\n    }\n\n    @Test\n    public void testRemoveFromSecondMap() {\n        assertTrue(compositeMap.containsKey(\"3\"));\n        assertEquals(\"three\", compositeMap.remove(\"3\"));\n        assertFalse(compositeMap.containsKey(\"3\"));\n    }\n\n    @Test\n    public void testRemoveAfterAddComposited() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"5\", \"five\");\n        compositeMap.addComposited(map3);\n\n        assertTrue(compositeMap.containsKey(\"5\"));\n        assertEquals(\"five\", compositeMap.remove(\"5\"));\n        assertFalse(compositeMap.containsKey(\"5\"));\n    }\n\n    @Test\n    public void testRemoveAfterPut() {\n        compositeMap.put(\"6\", \"six\");\n        assertTrue(compositeMap.containsKey(\"6\"));\n        assertEquals(\"six\", compositeMap.remove(\"6\"));\n        assertFalse(compositeMap.containsKey(\"6\"));\n    }\n}\n"}]