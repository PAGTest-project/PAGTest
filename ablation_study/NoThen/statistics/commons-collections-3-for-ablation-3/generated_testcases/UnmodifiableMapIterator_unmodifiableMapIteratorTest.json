[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.Unmodifiable;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass UnmodifiableMapIterator_unmodifiableMapIteratorTest {\n\n    @Test\n    void testUnmodifiableMapIteratorWithUnmodifiableIterator() {\n        // Given\n        MapIterator<String, String> mockIterator = new MockUnmodifiableMapIterator<>();\n\n        // When\n        MapIterator<String, String> result = UnmodifiableMapIterator.unmodifiableMapIterator(mockIterator);\n\n        // Then\n        assertSame(mockIterator, result);\n    }\n\n    @Test\n    void testUnmodifiableMapIteratorWithModifiableIterator() {\n        // Given\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        MapIterator<String, String> modifiableIterator = new HashMapIterator<>(map);\n\n        // When\n        MapIterator<String, String> result = UnmodifiableMapIterator.unmodifiableMapIterator(modifiableIterator);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableMapIterator);\n    }\n\n    @Test\n    void testUnmodifiableMapIteratorWithNullIterator() {\n        // Given\n        MapIterator<String, String> nullIterator = null;\n\n        // When / Then\n        assertThrows(NullPointerException.class, () -> {\n            UnmodifiableMapIterator.unmodifiableMapIterator(nullIterator);\n        });\n    }\n\n    // Mock implementation of UnmodifiableMapIterator for testing\n    private static class MockUnmodifiableMapIterator<K, V> implements MapIterator<K, V>, Unmodifiable {\n        @Override\n        public K getKey() {\n            return null;\n        }\n\n        @Override\n        public V getValue() {\n            return null;\n        }\n\n        @Override\n        public boolean hasNext() {\n            return false;\n        }\n\n        @Override\n        public K next() {\n            return null;\n        }\n\n        @Override\n        public void remove() {\n        }\n\n        @Override\n        public V setValue(V value) {\n            return null;\n        }\n    }\n\n    // Mock implementation of MapIterator for testing\n    private static class HashMapIterator<K, V> implements MapIterator<K, V> {\n        private final Map<K, V> map;\n        private java.util.Iterator<Map.Entry<K, V>> iterator;\n        private Map.Entry<K, V> currentEntry;\n\n        public HashMapIterator(Map<K, V> map) {\n            this.map = map;\n            this.iterator = map.entrySet().iterator();\n        }\n\n        @Override\n        public K getKey() {\n            return currentEntry.getKey();\n        }\n\n        @Override\n        public V getValue() {\n            return currentEntry.getValue();\n        }\n\n        @Override\n        public boolean hasNext() {\n            return iterator.hasNext();\n        }\n\n        @Override\n        public K next() {\n            currentEntry = iterator.next();\n            return currentEntry.getKey();\n        }\n\n        @Override\n        public void remove() {\n            iterator.remove();\n        }\n\n        @Override\n        public V setValue(V value) {\n            return currentEntry.setValue(value);\n        }\n    }\n}\n"}]