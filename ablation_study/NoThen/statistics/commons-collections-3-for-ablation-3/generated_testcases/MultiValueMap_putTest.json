[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiValueMap_putTest {\n\n    private MultiValueMap<String, String> multiValueMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiValueMap = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testPut_NewKey() {\n        String key = \"A\";\n        String value = \"AA\";\n        Object result = multiValueMap.put(key, value);\n        assertEquals(value, result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertTrue(collection.contains(value));\n    }\n\n    @Test\n    public void testPut_ExistingKey() {\n        String key = \"A\";\n        String value1 = \"AA\";\n        String value2 = \"AB\";\n        multiValueMap.put(key, value1);\n        Object result = multiValueMap.put(key, value2);\n        assertEquals(value2, result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertTrue(collection.contains(value1));\n        assertTrue(collection.contains(value2));\n    }\n\n    @Test\n    public void testPut_NullValue() {\n        String key = \"A\";\n        String value = null;\n        Object result = multiValueMap.put(key, value);\n        assertNull(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertFalse(collection != null && collection.contains(value));\n    }\n\n    @Test\n    public void testPut_EmptyCollection() {\n        String key = \"A\";\n        String value = \"AA\";\n        multiValueMap.put(key, value);\n        multiValueMap.removeMapping(key, value);\n        Object result = multiValueMap.put(key, value);\n        assertEquals(value, result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertTrue(collection.contains(value));\n    }\n\n    @Test\n    public void testPutAll_NewKey() {\n        String key = \"A\";\n        Collection<String> values = new ArrayList<>();\n        values.add(\"AA\");\n        values.add(\"AB\");\n        boolean result = multiValueMap.putAll(key, values);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertEquals(values, collection);\n    }\n\n    @Test\n    public void testPutAll_ExistingKey() {\n        String key = \"A\";\n        Collection<String> values1 = new ArrayList<>();\n        values1.add(\"AA\");\n        values1.add(\"AB\");\n        Collection<String> values2 = new ArrayList<>();\n        values2.add(\"AC\");\n        values2.add(\"AD\");\n        multiValueMap.putAll(key, values1);\n        boolean result = multiValueMap.putAll(key, values2);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertTrue(collection.containsAll(values1));\n        assertTrue(collection.containsAll(values2));\n    }\n\n    @Test\n    public void testPutAll_NullValues() {\n        String key = \"A\";\n        Collection<String> values = null;\n        boolean result = multiValueMap.putAll(key, values);\n        assertFalse(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertNull(collection);\n    }\n\n    @Test\n    public void testRemoveMapping_ExistingKey() {\n        String key = \"A\";\n        String value1 = \"AA\";\n        String value2 = \"AB\";\n        multiValueMap.put(key, value1);\n        multiValueMap.put(key, value2);\n        boolean result = multiValueMap.removeMapping(key, value1);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertFalse(collection.contains(value1));\n        assertTrue(collection.contains(value2));\n    }\n\n    @Test\n    public void testRemoveMapping_NonExistingKey() {\n        String key = \"A\";\n        String value = \"AA\";\n        boolean result = multiValueMap.removeMapping(key, value);\n        assertFalse(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertNull(collection);\n    }\n\n    @Test\n    public void testRemoveMapping_LastValue() {\n        String key = \"A\";\n        String value = \"AA\";\n        multiValueMap.put(key, value);\n        boolean result = multiValueMap.removeMapping(key, value);\n        assertTrue(result);\n        Collection<String> collection = multiValueMap.getCollection(key);\n        assertNull(collection);\n    }\n}\n"}]