[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bag;\n\nimport org.apache.commons.collections4.Bag;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class TransformedBag_transformedBagTest {\n\n    @Test\n    public void testTransformedBagWithNonEmptyBag() {\n        // Given\n        Bag<String> mockBag = mock(Bag.class);\n        Transformer<String, String> mockTransformer = mock(Transformer.class);\n        when(mockBag.isEmpty()).thenReturn(false);\n        when(mockBag.toArray()).thenReturn(new String[]{\"a\", \"b\"});\n        when(mockTransformer.apply(\"a\")).thenReturn(\"A\");\n        when(mockTransformer.apply(\"b\")).thenReturn(\"B\");\n\n        // When\n        Bag<String> resultBag = TransformedBag.transformedBag(mockBag, mockTransformer);\n\n        // Then\n        verify(mockBag).clear();\n        verify(mockBag).add(\"A\");\n        verify(mockBag).add(\"B\");\n        assertNotNull(resultBag);\n    }\n\n    @Test\n    public void testTransformedBagWithEmptyBag() {\n        // Given\n        Bag<String> mockBag = mock(Bag.class);\n        Transformer<String, String> mockTransformer = mock(Transformer.class);\n        when(mockBag.isEmpty()).thenReturn(true);\n\n        // When\n        Bag<String> resultBag = TransformedBag.transformedBag(mockBag, mockTransformer);\n\n        // Then\n        verify(mockBag, never()).clear();\n        verify(mockBag, never()).add(anyString());\n        assertNotNull(resultBag);\n    }\n}\n"}]