[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_addCompositedTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n    private Map<String, String> map3;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n\n        map2 = new HashMap<>();\n        map2.put(\"key3\", \"value3\");\n        map2.put(\"key4\", \"value4\");\n\n        map3 = new HashMap<>();\n        map3.put(\"key5\", \"value5\"); // No key collision\n\n        compositeMap = new CompositeMap<>(map1, map2);\n    }\n\n    @Test\n    public void testAddCompositedSuccess() {\n        compositeMap.addComposited(map3);\n        assertEquals(5, compositeMap.size());\n    }\n\n    @Test\n    public void testAddCompositedKeyCollisionWithoutMutator() {\n        Map<String, String> mapWithCollision = new HashMap<>();\n        mapWithCollision.put(\"key2\", \"value5\"); // Key collision with map1\n        assertThrows(IllegalArgumentException.class, () -> {\n            compositeMap.addComposited(mapWithCollision);\n        });\n    }\n\n    @Test\n    public void testAddCompositedKeyCollisionWithMutator() {\n        compositeMap.setMutator(new CompositeMap.MapMutator<String, String>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> t) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n                // Handle collision\n            }\n        });\n\n        Map<String, String> mapWithCollision = new HashMap<>();\n        mapWithCollision.put(\"key2\", \"value5\"); // Key collision with map1\n        compositeMap.addComposited(mapWithCollision);\n        assertEquals(5, compositeMap.size());\n    }\n}\n"}]