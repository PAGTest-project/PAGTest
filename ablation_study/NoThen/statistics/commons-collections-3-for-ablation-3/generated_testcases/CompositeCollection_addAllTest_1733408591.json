[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_addAllTest {\n\n    private CompositeCollection<String> c;\n    private Collection<String> one;\n    private Collection<String> two;\n\n    @BeforeEach\n    public void setUp() {\n        c = new CompositeCollection<>();\n        one = new ArrayList<>(Arrays.asList(\"1\", \"2\"));\n        two = new HashSet<>(Arrays.asList(\"3\", \"4\"));\n    }\n\n    @Test\n    public void testAddAllWithMutator() {\n        CompositeCollection.CollectionMutator<String> mutator = new CompositeCollection.CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                for (Collection<String> coll : collections) {\n                    coll.add(obj);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                for (Collection<String> collection : collections) {\n                    collection.addAll(coll);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                for (Collection<String> coll : collections) {\n                    coll.remove(obj);\n                }\n                return true;\n            }\n        };\n\n        c.setMutator(mutator);\n        c.addComposited(one, two);\n\n        Collection<String> newElements = Arrays.asList(\"5\", \"6\");\n        assertTrue(c.addAll(newElements));\n        assertTrue(one.containsAll(newElements));\n        assertTrue(two.containsAll(newElements));\n    }\n\n    @Test\n    public void testAddAllWithoutMutator() {\n        assertThrows(UnsupportedOperationException.class, () -> {\n            c.addAll(Arrays.asList(\"5\", \"6\"));\n        });\n    }\n\n    @Test\n    public void testAddAllWithEmptyCollection() {\n        CompositeCollection.CollectionMutator<String> mutator = new CompositeCollection.CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                for (Collection<String> coll : collections) {\n                    coll.add(obj);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                for (Collection<String> collection : collections) {\n                    collection.addAll(coll);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                for (Collection<String> coll : collections) {\n                    coll.remove(obj);\n                }\n                return true;\n            }\n        };\n\n        c.setMutator(mutator);\n        c.addComposited(one, two);\n\n        Collection<String> emptyCollection = new ArrayList<>();\n        assertFalse(c.addAll(emptyCollection));\n        assertEquals(4, c.size());\n    }\n}\n"}]