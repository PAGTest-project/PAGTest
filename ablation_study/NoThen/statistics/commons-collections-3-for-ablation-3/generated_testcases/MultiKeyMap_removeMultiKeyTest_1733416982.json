[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\npublic class MultiKeyMap_removeMultiKeyTest {\n\n    private MultiKeyMap<Integer, String> map;\n    private static final Integer I1 = 1;\n    private static final Integer I2 = 2;\n    private static final Integer I3 = 3;\n\n    @BeforeEach\n    public void setUp() {\n        map = new MultiKeyMap<>();\n    }\n\n    @Test\n    public void testRemoveMultiKey_ExistingKey() {\n        map.put(I1, I2, \"1-2\");\n        assertEquals(\"1-2\", map.removeMultiKey(I1, I2));\n        assertFalse(map.containsKey(I1, I2));\n    }\n\n    @Test\n    public void testRemoveMultiKey_NonExistingKey() {\n        map.put(I1, I2, \"1-2\");\n        assertNull(map.removeMultiKey(I3, I2));\n        assertTrue(map.containsKey(I1, I2));\n    }\n\n    @Test\n    public void testRemoveMultiKey_AfterPut() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n        assertEquals(\"1-2\", map.removeMultiKey(I1, I2));\n        assertTrue(map.containsKey(I1, I3));\n        assertFalse(map.containsKey(I1, I2));\n    }\n\n    @Test\n    public void testRemoveMultiKey_MultipleRemoves() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n        assertEquals(\"1-2\", map.removeMultiKey(I1, I2));\n        assertEquals(\"1-3\", map.removeMultiKey(I1, I3));\n        assertFalse(map.containsKey(I1, I2));\n        assertFalse(map.containsKey(I1, I3));\n    }\n\n    @Test\n    public void testRemoveMultiKey_NullKey() {\n        assertThrows(NullPointerException.class, () -> map.removeMultiKey(null, I2));\n        assertThrows(NullPointerException.class, () -> map.removeMultiKey(I1, null));\n    }\n}\n"}]