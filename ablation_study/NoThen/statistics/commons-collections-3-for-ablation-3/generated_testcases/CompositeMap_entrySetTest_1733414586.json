[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.AbstractMap;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_entrySetTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"1\", \"one\");\n        map1.put(\"2\", \"two\");\n\n        map2 = new HashMap<>();\n        map2.put(\"3\", \"three\");\n        map2.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(map1, map2);\n    }\n\n    @Test\n    public void testEntrySet() {\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(4, entrySet.size());\n        assertTrue(entrySet.containsAll(map1.entrySet()));\n        assertTrue(entrySet.containsAll(map2.entrySet()));\n    }\n\n    @Test\n    public void testEntrySetAfterAddComposited() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"5\", \"five\");\n        compositeMap.addComposited(map3);\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(5, entrySet.size());\n        assertTrue(entrySet.containsAll(map1.entrySet()));\n        assertTrue(entrySet.containsAll(map2.entrySet()));\n        assertTrue(entrySet.containsAll(map3.entrySet()));\n    }\n\n    @Test\n    public void testEntrySetAfterRemoveComposited() {\n        compositeMap.removeComposited(map2);\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(2, entrySet.size());\n        assertTrue(entrySet.containsAll(map1.entrySet()));\n        assertFalse(entrySet.containsAll(map2.entrySet()));\n    }\n\n    @Test\n    public void testEntrySetAfterClear() {\n        compositeMap.clear();\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(0, entrySet.size());\n    }\n\n    @Test\n    public void testEntrySetAfterPut() {\n        compositeMap.put(\"6\", \"six\");\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(5, entrySet.size());\n        assertTrue(entrySet.contains(new AbstractMap.SimpleEntry<>(\"6\", \"six\")));\n    }\n\n    @Test\n    public void testEntrySetAfterRemove() {\n        compositeMap.remove(\"3\");\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(3, entrySet.size());\n        assertFalse(entrySet.contains(new AbstractMap.SimpleEntry<>(\"3\", \"three\")));\n    }\n}\n"}]