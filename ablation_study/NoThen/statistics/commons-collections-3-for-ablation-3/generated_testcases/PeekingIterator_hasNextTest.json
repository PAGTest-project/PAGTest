[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Collections;\n\npublic class PeekingIterator_hasNextTest {\n\n    private List<String> testList;\n    private static final String[] testArray = {\"a\", \"b\", \"c\"};\n\n    @SuppressWarnings(\"unchecked\")\n    @BeforeEach\n    protected void setUp() throws Exception {\n        testList = new ArrayList<>(Arrays.asList((String[]) testArray));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private PeekingIterator<String> makeObject() {\n        return new PeekingIterator<>(testList.iterator());\n    }\n\n    private void validate(Iterator<String> iter, String... items) {\n        for (String item : items) {\n            assertTrue(iter.hasNext());\n            assertEquals(item, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithElements() {\n        PeekingIterator<String> it = makeObject();\n        assertTrue(it.hasNext());\n        it.next();\n        assertTrue(it.hasNext());\n        it.next();\n        assertTrue(it.hasNext());\n        it.next();\n        assertFalse(it.hasNext());\n    }\n\n    @Test\n    public void testHasNextWithNoElements() {\n        PeekingIterator<String> it = new PeekingIterator<>(Collections.emptyIterator());\n        assertFalse(it.hasNext());\n    }\n\n    @Test\n    public void testHasNextAfterPeek() {\n        PeekingIterator<String> it = makeObject();\n        it.peek();\n        assertTrue(it.hasNext());\n        it.next();\n        it.peek();\n        assertTrue(it.hasNext());\n        it.next();\n        it.peek();\n        assertTrue(it.hasNext());\n        it.next();\n        it.peek();\n        assertFalse(it.hasNext());\n    }\n\n    @Test\n    public void testHasNextAfterElement() {\n        PeekingIterator<String> it = makeObject();\n        it.element();\n        assertTrue(it.hasNext());\n        it.next();\n        it.element();\n        assertTrue(it.hasNext());\n        it.next();\n        it.element();\n        assertTrue(it.hasNext());\n        it.next();\n        assertThrows(NoSuchElementException.class, it::element);\n        assertFalse(it.hasNext());\n    }\n}\n"}]