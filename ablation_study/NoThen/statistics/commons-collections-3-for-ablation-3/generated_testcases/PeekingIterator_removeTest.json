[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class PeekingIterator_removeTest {\n\n    private List<String> testList;\n    private static final String[] testArray = {\"a\", \"b\", \"c\"};\n\n    @SuppressWarnings(\"unchecked\")\n    @BeforeEach\n    protected void setUp() throws Exception {\n        testList = new ArrayList<>(Arrays.asList((String[]) testArray));\n    }\n\n    @Test\n    public void testRemoveAfterNext() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertEquals(\"a\", it.next());\n        it.remove();\n        assertEquals(Arrays.asList(\"b\", \"c\"), testList);\n    }\n\n    @Test\n    public void testRemoveWithoutPeekOrElement() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n\n    @Test\n    public void testRemoveAfterPeek() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertEquals(\"a\", it.peek());\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n\n    @Test\n    public void testRemoveAfterElement() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertEquals(\"a\", it.element());\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }\n}\n"}]