[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_iteratorTest {\n\n    private CompositeCollection<String> c;\n    private Collection<String> one;\n    private Collection<String> two;\n\n    @BeforeEach\n    protected void setUpTest() {\n        c = new CompositeCollection<>();\n        one = new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        two = new HashSet<>(Arrays.asList(\"d\", \"e\", \"f\"));\n    }\n\n    @Test\n    public void testIteratorWithEmptyComposite() {\n        Iterator<String> iterator = c.iterator();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorWithSingleCollection() {\n        c.addComposited(one);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(one, new HashSet<>(result));\n    }\n\n    @Test\n    public void testIteratorWithMultipleCollections() {\n        c.addComposited(one, two);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")), new HashSet<>(result));\n    }\n\n    @Test\n    public void testIteratorAfterClear() {\n        c.addComposited(one);\n        c.clear();\n        Iterator<String> iterator = c.iterator();\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testIteratorAfterRemoveComposited() {\n        c.addComposited(one, two);\n        c.removeComposited(one);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(two, new HashSet<>(result));\n    }\n\n    @Test\n    public void testIteratorAfterAddElement() {\n        c.setMutator(new CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                for (Collection<String> collection : collections) {\n                    if (collection.add(obj)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                boolean changed = false;\n                for (String collItem : coll) {\n                    changed |= add(composite, collections, collItem);\n                }\n                return changed;\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                for (Collection<String> collection : collections) {\n                    if (collection.remove(obj)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        });\n        c.addComposited(one);\n        c.add(\"g\");\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertTrue(result.contains(\"g\"));\n    }\n}\n"}]