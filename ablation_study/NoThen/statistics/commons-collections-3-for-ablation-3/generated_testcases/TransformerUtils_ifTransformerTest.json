[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TransformerUtils_ifTransformerTest {\n\n    private static final Object CONSTANT_VALUE = new Object();\n\n    @Test\n    public void testIfTransformerWithTruePredicate() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(CONSTANT_VALUE);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertSame(CONSTANT_VALUE, ifTransformer.transform(new Object()));\n    }\n\n    @Test\n    public void testIfTransformerWithFalsePredicate() {\n        Predicate<Object> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(CONSTANT_VALUE);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertNull(ifTransformer.transform(new Object()));\n    }\n\n    @Test\n    public void testIfTransformerWithEqualPredicate() {\n        Object input = new Object();\n        Predicate<Object> equalPredicate = EqualPredicate.equalPredicate(input);\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(CONSTANT_VALUE);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(equalPredicate, trueTransformer, falseTransformer);\n\n        assertSame(CONSTANT_VALUE, ifTransformer.transform(input));\n        assertNull(ifTransformer.transform(new Object()));\n    }\n\n    @Test\n    public void testIfTransformerWithExceptionTransformer() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> trueTransformer = ExceptionTransformer.exceptionTransformer();\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertThrows(FunctorException.class, () -> ifTransformer.transform(new Object()));\n    }\n}\n"}]