[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.commons.collections4.collection.CompositeCollection;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeMap_valuesTest {\n\n    private CompositeMap<String, String> compositeMap;\n    private Map<String, String> map1;\n    private Map<String, String> map2;\n\n    @BeforeEach\n    public void setUp() {\n        map1 = new HashMap<>();\n        map1.put(\"1\", \"one\");\n        map1.put(\"2\", \"two\");\n\n        map2 = new HashMap<>();\n        map2.put(\"3\", \"three\");\n        map2.put(\"4\", \"four\");\n\n        compositeMap = new CompositeMap<>(map1, map2);\n    }\n\n    @Test\n    public void testValuesWithNoChanges() {\n        Collection<String> values = compositeMap.values();\n        assertEquals(4, values.size());\n        assertTrue(values.contains(\"one\"));\n        assertTrue(values.contains(\"two\"));\n        assertTrue(values.contains(\"three\"));\n        assertTrue(values.contains(\"four\"));\n    }\n\n    @Test\n    public void testValuesAfterAddingMap() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"5\", \"five\");\n        compositeMap.addComposited(map3);\n\n        Collection<String> values = compositeMap.values();\n        assertEquals(5, values.size());\n        assertTrue(values.contains(\"one\"));\n        assertTrue(values.contains(\"two\"));\n        assertTrue(values.contains(\"three\"));\n        assertTrue(values.contains(\"four\"));\n        assertTrue(values.contains(\"five\"));\n    }\n\n    @Test\n    public void testValuesAfterRemovingMap() {\n        compositeMap.removeComposited(map2);\n\n        Collection<String> values = compositeMap.values();\n        assertEquals(2, values.size());\n        assertTrue(values.contains(\"one\"));\n        assertTrue(values.contains(\"two\"));\n        assertFalse(values.contains(\"three\"));\n        assertFalse(values.contains(\"four\"));\n    }\n\n    @Test\n    public void testValuesAfterAddingKeyValue() {\n        assertThrows(UnsupportedOperationException.class, () -> compositeMap.put(\"5\", \"five\"));\n    }\n\n    @Test\n    public void testValuesAfterRemovingKeyValue() {\n        compositeMap.remove(\"3\");\n\n        Collection<String> values = compositeMap.values();\n        assertEquals(3, values.size());\n        assertTrue(values.contains(\"one\"));\n        assertTrue(values.contains(\"two\"));\n        assertFalse(values.contains(\"three\"));\n        assertTrue(values.contains(\"four\"));\n    }\n\n    @Test\n    public void testValuesWithEmptyCompositeMap() {\n        compositeMap = new CompositeMap<>();\n\n        Collection<String> values = compositeMap.values();\n        assertTrue(values.isEmpty());\n    }\n\n    @Test\n    public void testValuesWithNullMap() {\n        assertThrows(IllegalArgumentException.class, () -> compositeMap.addComposited(null));\n    }\n}\n"}]