[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\n\npublic class MultiKeyMap_getTest {\n\n    private MultiKeyMap<Integer, String> multiKeyMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiKeyMap = new MultiKeyMap<>();\n    }\n\n    @Test\n    public void testGetExistingKey() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        assertEquals(\"1-2\", multiKeyMap.get(1, 2));\n    }\n\n    @Test\n    public void testGetNonExistingKey() {\n        assertNull(multiKeyMap.get(1, 2));\n    }\n\n    @Test\n    public void testGetAfterRemove() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        multiKeyMap.removeMultiKey(1, 2);\n        assertNull(multiKeyMap.get(1, 2));\n    }\n\n    @Test\n    public void testGetWithNullKeys() {\n        multiKeyMap.put(null, null, \"null-null\");\n        assertEquals(\"null-null\", multiKeyMap.get(null, null));\n    }\n\n    @Test\n    public void testGetWithMixedKeys() {\n        multiKeyMap.put(1, null, \"1-null\");\n        multiKeyMap.put(null, 2, \"null-2\");\n        assertEquals(\"1-null\", multiKeyMap.get(1, null));\n        assertEquals(\"null-2\", multiKeyMap.get(null, 2));\n    }\n\n    @Test\n    public void testGetWithMultipleEntries() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        multiKeyMap.put(1, 3, \"1-3\");\n        multiKeyMap.put(2, 2, \"2-2\");\n        assertEquals(\"1-2\", multiKeyMap.get(1, 2));\n        assertEquals(\"1-3\", multiKeyMap.get(1, 3));\n        assertEquals(\"2-2\", multiKeyMap.get(2, 2));\n    }\n\n    @Test\n    public void testGetWithOverwrittenEntry() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        multiKeyMap.put(1, 2, \"new-1-2\");\n        assertEquals(\"new-1-2\", multiKeyMap.get(1, 2));\n    }\n}\n"}]