[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class PassiveExpiringMap_removeTest {\n\n    private PassiveExpiringMap<String, String> map;\n    private ExpirationPolicy<String, String> mockPolicy;\n\n    @BeforeEach\n    public void setUp() {\n        mockPolicy = mock(ExpirationPolicy.class);\n        map = new PassiveExpiringMap<>(mockPolicy, new HashMap<>());\n    }\n\n    @Test\n    public void testRemove_KeyExists() {\n        // Given\n        String key = \"testKey\";\n        String value = \"testValue\";\n        map.put(key, value);\n\n        // When\n        String result = map.remove(key);\n\n        // Then\n        assertEquals(value, result);\n        assertNull(map.get(key));\n    }\n\n    @Test\n    public void testRemove_KeyDoesNotExist() {\n        // Given\n        String key = \"nonExistentKey\";\n\n        // When\n        String result = map.remove(key);\n\n        // Then\n        assertNull(result);\n    }\n\n    @Test\n    public void testRemove_ExpiredKey() {\n        // Given\n        String key = \"expiredKey\";\n        String value = \"expiredValue\";\n        map.put(key, value);\n        when(mockPolicy.expirationTime(key, value)).thenReturn(System.currentTimeMillis() - 1000L);\n\n        // When\n        map.removeIfExpired(key, System.currentTimeMillis());\n        String result = map.remove(key);\n\n        // Then\n        assertNull(result);\n    }\n}\n"}]