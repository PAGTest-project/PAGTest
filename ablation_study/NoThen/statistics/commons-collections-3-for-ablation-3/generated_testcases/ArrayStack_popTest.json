[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.EmptyStackException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ArrayStack_popTest {\n\n    private ArrayStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new ArrayStack<>();\n    }\n\n    @Test\n    public void testPopWithItems() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(\"Second Item\", stack.pop(), \"Top item should be 'Second Item'\");\n        assertEquals(\"First Item\", stack.pop(), \"Next item should be 'First Item'\");\n    }\n\n    @Test\n    public void testPopOnEmptyStack() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.pop();\n        }, \"Pop on empty stack should throw EmptyStackException\");\n    }\n\n    @Test\n    public void testPopAfterPeek() {\n        stack.push(\"Item\");\n        assertEquals(\"Item\", stack.peek(), \"Peek should return 'Item'\");\n        assertEquals(\"Item\", stack.pop(), \"Pop should return 'Item'\");\n        assertTrue(stack.empty(), \"Stack should be empty after pop\");\n    }\n\n    @Test\n    public void testPopAndSearch() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(1, stack.search(\"Second Item\"), \"Top item is 'Second Item'\");\n        assertEquals(\"Second Item\", stack.pop(), \"Pop should return 'Second Item'\");\n        assertEquals(1, stack.search(\"First Item\"), \"Top item is 'First Item'\");\n    }\n\n    @Test\n    public void testPopAndEmpty() {\n        stack.push(\"Item\");\n        assertFalse(stack.empty(), \"Stack should not be empty after push\");\n        stack.pop();\n        assertTrue(stack.empty(), \"Stack should be empty after pop\");\n    }\n}\n"}]