[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport org.apache.commons.collections4.BoundedCollection;\nimport org.apache.commons.collections4.Unmodifiable;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertInstanceOf;\n\nclass UnmodifiableBoundedCollection_unmodifiableBoundedCollectionTest {\n\n    @Test\n    void testUnmodifiableBoundedCollectionWithUnmodifiableCollection() {\n        // Given\n        BoundedCollection<String> coll = new UnmodifiableBoundedCollection<>(new MyBoundedCollection<>());\n\n        // When\n        BoundedCollection<String> result = UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n\n        // Then\n        assertSame(coll, result);\n    }\n\n    @Test\n    void testUnmodifiableBoundedCollectionWithModifiableCollection() {\n        // Given\n        BoundedCollection<String> coll = new MyBoundedCollection<>();\n\n        // When\n        BoundedCollection<String> result = UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll);\n\n        // Then\n        assertInstanceOf(UnmodifiableBoundedCollection.class, result);\n    }\n\n    private static class MyBoundedCollection<E> implements BoundedCollection<E> {\n        @Override\n        public boolean isFull() {\n            return false;\n        }\n\n        @Override\n        public int maxSize() {\n            return 0;\n        }\n\n        @Override\n        public Iterator<E> iterator() {\n            return null;\n        }\n\n        @Override\n        public int size() {\n            return 0;\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return false;\n        }\n\n        @Override\n        public boolean contains(Object o) {\n            return false;\n        }\n\n        @Override\n        public Object[] toArray() {\n            return new Object[0];\n        }\n\n        @Override\n        public <T> T[] toArray(T[] a) {\n            return null;\n        }\n\n        @Override\n        public boolean add(E e) {\n            return false;\n        }\n\n        @Override\n        public boolean remove(Object o) {\n            return false;\n        }\n\n        @Override\n        public boolean containsAll(Collection<?> c) {\n            return false;\n        }\n\n        @Override\n        public boolean addAll(Collection<? extends E> c) {\n            return false;\n        }\n\n        @Override\n        public boolean removeAll(Collection<?> c) {\n            return false;\n        }\n\n        @Override\n        public boolean retainAll(Collection<?> c) {\n            return false;\n        }\n\n        @Override\n        public void clear() {\n        }\n    }\n}\n"}]