[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiValueMap_putAllTest {\n\n    private MultiValueMap<String, String> multiValueMap;\n\n    @BeforeEach\n    public void setUp() {\n        multiValueMap = new MultiValueMap<>();\n    }\n\n    @Test\n    public void testPutAll_NewKey() {\n        Collection<String> values = new ArrayList<>(Arrays.asList(\"A\", \"B\", \"C\"));\n        assertTrue(multiValueMap.putAll(\"key1\", values));\n        assertEquals(3, multiValueMap.size(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_ExistingKey() {\n        Collection<String> initialValues = new ArrayList<>(Arrays.asList(\"A\", \"B\"));\n        multiValueMap.putAll(\"key1\", initialValues);\n        Collection<String> additionalValues = new ArrayList<>(Arrays.asList(\"C\", \"D\"));\n        assertTrue(multiValueMap.putAll(\"key1\", additionalValues));\n        assertEquals(4, multiValueMap.size(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_NullValues() {\n        assertFalse(multiValueMap.putAll(\"key1\", null));\n        assertNull(multiValueMap.getCollection(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_EmptyValues() {\n        Collection<String> values = new ArrayList<>();\n        assertFalse(multiValueMap.putAll(\"key1\", values));\n        assertNull(multiValueMap.getCollection(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_AfterRemoveMapping() {\n        Collection<String> initialValues = new ArrayList<>(Arrays.asList(\"A\", \"B\"));\n        multiValueMap.putAll(\"key1\", initialValues);\n        assertTrue(multiValueMap.removeMapping(\"key1\", \"A\"));\n        Collection<String> additionalValues = new ArrayList<>(Arrays.asList(\"C\", \"D\"));\n        assertTrue(multiValueMap.putAll(\"key1\", additionalValues));\n        assertEquals(3, multiValueMap.size(\"key1\"));\n    }\n\n    @Test\n    public void testPutAll_WithPut() {\n        multiValueMap.put(\"key1\", \"A\");\n        Collection<String> additionalValues = new ArrayList<>(Arrays.asList(\"B\", \"C\"));\n        assertTrue(multiValueMap.putAll(\"key1\", additionalValues));\n        assertEquals(3, multiValueMap.size(\"key1\"));\n    }\n}\n"}]