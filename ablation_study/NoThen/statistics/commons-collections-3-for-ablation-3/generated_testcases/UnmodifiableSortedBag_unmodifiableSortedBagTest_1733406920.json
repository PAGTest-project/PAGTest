[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.bag;\n\nimport org.apache.commons.collections4.SortedBag;\nimport org.apache.commons.collections4.Unmodifiable;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass UnmodifiableSortedBag_unmodifiableSortedBagTest {\n\n    @Test\n    void testUnmodifiableSortedBag_ReturnsSameInstanceIfAlreadyUnmodifiable() {\n        // Given\n        SortedBag<String> mockBag = mock(SortedBag.class);\n        when(mockBag.isUnmodifiable()).thenReturn(true);\n\n        // When\n        SortedBag<String> result = UnmodifiableSortedBag.unmodifiableSortedBag(mockBag);\n\n        // Then\n        assertSame(mockBag, result);\n    }\n\n    @Test\n    void testUnmodifiableSortedBag_ReturnsNewUnmodifiableSortedBagIfNotAlreadyUnmodifiable() {\n        // Given\n        SortedBag<String> mockBag = mock(SortedBag.class);\n        when(mockBag.isUnmodifiable()).thenReturn(false);\n\n        // When\n        SortedBag<String> result = UnmodifiableSortedBag.unmodifiableSortedBag(mockBag);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableSortedBag);\n        assertNotSame(mockBag, result);\n    }\n}\n"}]