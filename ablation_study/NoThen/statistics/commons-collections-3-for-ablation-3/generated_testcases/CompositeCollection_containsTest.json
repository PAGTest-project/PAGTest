[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_containsTest {\n\n    private CompositeCollection<String> c;\n    private Collection<String> one;\n    private Collection<String> two;\n\n    @BeforeEach\n    public void setUp() {\n        c = new CompositeCollection<>();\n        one = new ArrayList<>();\n        two = new ArrayList<>();\n    }\n\n    @Test\n    public void testContainsWithSingleCollection() {\n        one.add(\"1\");\n        c.addComposited(one);\n        assertTrue(c.contains(\"1\"));\n        assertFalse(c.contains(\"2\"));\n    }\n\n    @Test\n    public void testContainsWithMultipleCollections() {\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertTrue(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n        assertFalse(c.contains(\"3\"));\n    }\n\n    @Test\n    public void testContainsAfterAdd() {\n        one.add(\"1\");\n        c.addComposited(one);\n        c.setMutator(new CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                return one.add(obj);\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                return one.addAll(coll);\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                return one.remove(obj);\n            }\n        });\n        c.add(\"2\");\n        assertTrue(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n    }\n\n    @Test\n    public void testContainsAfterRemove() {\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        c.setMutator(new CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                return one.add(obj);\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                return one.addAll(coll);\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                return one.remove(obj) || two.remove(obj);\n            }\n        });\n        c.remove(\"1\");\n        assertFalse(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n    }\n\n    @Test\n    public void testContainsAfterClear() {\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        c.clear();\n        assertFalse(c.contains(\"1\"));\n        assertFalse(c.contains(\"2\"));\n    }\n}\n"}]