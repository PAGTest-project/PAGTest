[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.map;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.apache.commons.collections4.MapIterator;\nimport org.apache.commons.collections4.keyvalue.MultiKey;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class MultiKeyMap_removeAllTest {\n\n    private static final Integer I1 = 1;\n    private static final Integer I2 = 2;\n    private static final Integer I3 = 3;\n    private static final Integer I4 = 4;\n    private static final Integer I5 = 5;\n\n    private MultiKeyMap<Integer, String> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new MultiKeyMap<>();\n    }\n\n    @Test\n    public void testRemoveAllWithExistingKey() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n        map.put(I2, I3, \"2-3\");\n\n        assertTrue(map.removeAll(I1));\n        assertEquals(1, map.size());\n        assertFalse(map.containsKey(I1, I2));\n        assertFalse(map.containsKey(I1, I3));\n        assertTrue(map.containsKey(I2, I3));\n    }\n\n    @Test\n    public void testRemoveAllWithNonExistingKey() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n\n        assertFalse(map.removeAll(I4));\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(I1, I2));\n        assertTrue(map.containsKey(I1, I3));\n    }\n\n    @Test\n    public void testRemoveAllWithNullKey() {\n        map.put(null, I2, \"null-2\");\n        map.put(I1, I3, \"1-3\");\n\n        assertTrue(map.removeAll(null));\n        assertEquals(1, map.size());\n        assertFalse(map.containsKey(null, I2));\n        assertTrue(map.containsKey(I1, I3));\n    }\n\n    @Test\n    public void testRemoveAllWithEmptyMap() {\n        assertFalse(map.removeAll(I1));\n        assertEquals(0, map.size());\n    }\n\n    @Test\n    public void testRemoveAllWithMultipleKeys() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n        map.put(I2, I3, \"2-3\");\n        map.put(I2, I4, \"2-4\");\n\n        assertTrue(map.removeAll(I1));\n        assertEquals(2, map.size());\n        assertFalse(map.containsKey(I1, I2));\n        assertFalse(map.containsKey(I1, I3));\n        assertTrue(map.containsKey(I2, I3));\n        assertTrue(map.containsKey(I2, I4));\n    }\n}\n"}]