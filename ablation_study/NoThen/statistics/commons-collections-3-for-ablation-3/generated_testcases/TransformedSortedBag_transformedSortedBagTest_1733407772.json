[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.bag;\n\nimport org.apache.commons.collections4.SortedBag;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class TransformedSortedBag_transformedSortedBagTest {\n\n    @Test\n    public void testTransformedSortedBagWithNonEmptyBag() {\n        // Given\n        SortedBag<Integer> bag = mock(SortedBag.class);\n        Transformer<Integer, Integer> transformer = mock(Transformer.class);\n        when(bag.isEmpty()).thenReturn(false);\n        Integer[] values = {1, 2, 3};\n        when(bag.toArray()).thenReturn(values);\n        when(transformer.apply(anyInt())).thenAnswer(i -> (int) i.getArguments()[0] * 2);\n\n        // When\n        TransformedSortedBag<Integer> result = TransformedSortedBag.transformedSortedBag(bag, transformer);\n\n        // Then\n        verify(bag).clear();\n        verify(bag, times(3)).toArray();\n        verify(transformer).apply(1);\n        verify(transformer).apply(2);\n        verify(transformer).apply(3);\n        assertEquals(6, result.size()); // Assuming the decorated bag's add method adds transformed values\n    }\n\n    @Test\n    public void testTransformedSortedBagWithEmptyBag() {\n        // Given\n        SortedBag<Integer> bag = mock(SortedBag.class);\n        Transformer<Integer, Integer> transformer = mock(Transformer.class);\n        when(bag.isEmpty()).thenReturn(true);\n\n        // When\n        TransformedSortedBag<Integer> result = TransformedSortedBag.transformedSortedBag(bag, transformer);\n\n        // Then\n        verify(bag, never()).toArray();\n        verify(bag, never()).clear();\n        verify(transformer, never()).apply(anyInt());\n        assertEquals(0, result.size()); // Assuming the decorated bag is empty\n    }\n}\n"}]