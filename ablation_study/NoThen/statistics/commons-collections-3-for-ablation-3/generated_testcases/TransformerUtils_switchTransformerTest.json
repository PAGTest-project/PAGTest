[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.EqualPredicate;\nimport org.apache.commons.collections4.functors.ExceptionTransformer;\nimport org.apache.commons.collections4.functors.FalsePredicate;\nimport org.apache.commons.collections4.functors.NOPTransformer;\nimport org.apache.commons.collections4.functors.StringValueTransformer;\nimport org.apache.commons.collections4.functors.TruePredicate;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TransformerUtils_switchTransformerTest {\n\n    @Test\n    public void testSwitchTransformerWithTruePredicate() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(1, transformer.transform(\"anyInput\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithFalsePredicate() {\n        Predicate<String> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(0, transformer.transform(\"anyInput\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithEqualPredicate() {\n        Predicate<String> equalPredicate = EqualPredicate.equalPredicate(\"match\");\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(equalPredicate, trueTransformer, falseTransformer);\n\n        assertEquals(1, transformer.transform(\"match\"));\n        assertEquals(0, transformer.transform(\"noMatch\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithExceptionTransformer() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, Integer> trueTransformer = ExceptionTransformer.exceptionTransformer();\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertThrows(FunctorException.class, () -> transformer.transform(\"anyInput\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithNullDefaultTransformer() {\n        Predicate<String> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = null;\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertNull(transformer.transform(\"anyInput\"));\n    }\n\n    @Test\n    public void testSwitchTransformerWithNOPTransformer() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, String> trueTransformer = NOPTransformer.nopTransformer();\n        Transformer<String, String> falseTransformer = StringValueTransformer.stringValueTransformer();\n\n        Transformer<String, String> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(\"anyInput\", transformer.transform(\"anyInput\"));\n    }\n}\n"}]