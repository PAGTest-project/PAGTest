[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.comparators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class FixedOrderComparator_compareTest {\n\n    private FixedOrderComparator<String> comparator;\n    private String[] topCities = {\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"};\n\n    @BeforeEach\n    public void setUp() {\n        comparator = new FixedOrderComparator<>(topCities);\n    }\n\n    @Test\n    public void testCompareKnownObjects() {\n        assertEquals(-1, comparator.compare(\"New York\", \"Los Angeles\"));\n        assertEquals(1, comparator.compare(\"Los Angeles\", \"New York\"));\n        assertEquals(0, comparator.compare(\"New York\", \"New York\"));\n    }\n\n    @Test\n    public void testCompareUnknownObjectBehaviorException() {\n        assertThrows(IllegalArgumentException.class, () -> comparator.compare(\"Minneapolis\", \"New York\"));\n        assertThrows(IllegalArgumentException.class, () -> comparator.compare(\"New York\", \"Minneapolis\"));\n    }\n\n    @Test\n    public void testCompareUnknownObjectBehaviorBefore() {\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);\n        assertEquals(-1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(1, comparator.compare(\"New York\", \"Minneapolis\"));\n        assertEquals(0, comparator.compare(\"Minneapolis\", \"St Paul\"));\n    }\n\n    @Test\n    public void testCompareUnknownObjectBehaviorAfter() {\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);\n        assertEquals(1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(-1, comparator.compare(\"New York\", \"Minneapolis\"));\n        assertEquals(0, comparator.compare(\"Minneapolis\", \"St Paul\"));\n    }\n\n    @Test\n    public void testAddAndCompare() {\n        comparator.add(\"Minneapolis\");\n        assertEquals(1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(-1, comparator.compare(\"New York\", \"Minneapolis\"));\n    }\n\n    @Test\n    public void testAddAsEqualAndCompare() {\n        comparator.addAsEqual(\"New York\", \"Minneapolis\");\n        assertEquals(0, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(0, comparator.compare(\"New York\", \"Minneapolis\"));\n    }\n\n    @Test\n    public void testIsLocked() {\n        assertFalse(comparator.isLocked());\n        comparator.compare(\"New York\", \"Los Angeles\");\n        assertTrue(comparator.isLocked());\n    }\n\n    @Test\n    public void testSetUnknownObjectBehaviorLocked() {\n        comparator.compare(\"New York\", \"Los Angeles\");\n        assertThrows(UnsupportedOperationException.class, () -> comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE));\n    }\n}\n"}]