[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CompositeCollection_retainAllTest {\n    private CompositeCollection<String> c;\n    private Collection<String> one;\n    private Collection<String> two;\n\n    @BeforeEach\n    public void setUp() {\n        c = new CompositeCollection<>();\n        one = new HashSet<>();\n        two = new HashSet<>();\n    }\n\n    @Test\n    public void testRetainAllWithNullCollection() {\n        setUp();\n        assertFalse(c.retainAll(null));\n    }\n\n    @Test\n    public void testRetainAllWithEmptyCollection() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertFalse(c.retainAll(new ArrayList<>()));\n    }\n\n    @Test\n    public void testRetainAllWithMatchingElements() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        Collection<String> retain = new HashSet<>(Arrays.asList(\"1\", \"2\"));\n        assertFalse(c.retainAll(retain));\n    }\n\n    @Test\n    public void testRetainAllWithNonMatchingElements() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        Collection<String> retain = new HashSet<>(Arrays.asList(\"3\", \"4\"));\n        assertTrue(c.retainAll(retain));\n    }\n\n    @Test\n    public void testRetainAllWithPartialMatchingElements() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        Collection<String> retain = new HashSet<>(Arrays.asList(\"1\", \"3\"));\n        assertTrue(c.retainAll(retain));\n    }\n}\n"}]