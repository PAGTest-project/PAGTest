[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.NoSuchElementException;\n\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ObjectGraphIterator_nextTest {\n\n    private ObjectGraphIterator<String> iterator;\n    private List<String> list;\n\n    @BeforeEach\n    public void setUp() {\n        list = new ArrayList<>();\n        list.add(\"A\");\n        list.add(\"B\");\n        list.add(\"C\");\n        iterator = new ObjectGraphIterator<>(list.iterator());\n    }\n\n    @Test\n    public void testNext_withElements() {\n        assertTrue(iterator.hasNext());\n        assertEquals(\"A\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"B\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"C\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testNext_noElements() {\n        iterator = new ObjectGraphIterator<>(new ArrayList<String>().iterator());\n        assertFalse(iterator.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n    }\n\n    @Test\n    public void testNext_withTransformer() {\n        Transformer<String, String> transformer = input -> input + \" transformed\";\n        iterator = new ObjectGraphIterator<>(list.iterator(), transformer);\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"A transformed\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"B transformed\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"C transformed\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }\n\n    @Test\n    public void testNext_withNestedIterators() {\n        List<Iterator<String>> nestedList = new ArrayList<>();\n        nestedList.add(list.iterator());\n        nestedList.add(new ArrayList<String>().iterator());\n        nestedList.add(list.iterator());\n\n        iterator = new ObjectGraphIterator<>(nestedList.iterator());\n\n        assertTrue(iterator.hasNext());\n        assertEquals(\"A\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"B\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"C\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"A\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"B\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"C\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }\n}\n"}]