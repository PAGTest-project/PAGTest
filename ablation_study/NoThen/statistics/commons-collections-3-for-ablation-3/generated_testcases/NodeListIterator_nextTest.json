[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.iterators;\n\nimport static org.easymock.EasyMock.createMock;\nimport static org.easymock.EasyMock.expect;\nimport static org.easymock.EasyMock.replay;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.util.NoSuchElementException;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.Text;\n\npublic class NodeListIterator_nextTest {\n\n    private NodeListIterator nodeListIterator;\n    private Node[] nodes;\n    private boolean createIteratorWithStandardConstr;\n\n    @BeforeEach\n    protected void setUp() throws Exception {\n        // Default: use standard constr.\n        createIteratorWithStandardConstr = true;\n\n        // create mocked Node Instances and fill Node[] to be used by test cases\n        final Node node1 = createMock(Element.class);\n        final Node node2 = createMock(Element.class);\n        final Node node3 = createMock(Text.class);\n        final Node node4 = createMock(Element.class);\n        nodes = new Node[] { node1, node2, node3, node4 };\n\n        replay(node1);\n        replay(node2);\n        replay(node3);\n        replay(node4);\n    }\n\n    @Test\n    public void testNextWithElements() {\n        NodeList nodeList = createMock(NodeList.class);\n        expect(nodeList.getLength()).andReturn(nodes.length).anyTimes();\n        for (int i = 0; i < nodes.length; i++) {\n            expect(nodeList.item(i)).andReturn(nodes[i]).anyTimes();\n        }\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(nodeList);\n\n        for (Node node : nodes) {\n            assertEquals(node, nodeListIterator.next());\n        }\n    }\n\n    @Test\n    public void testNextWithNoElements() {\n        NodeList nodeList = createMock(NodeList.class);\n        expect(nodeList.getLength()).andReturn(0).anyTimes();\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(nodeList);\n\n        assertThrows(NoSuchElementException.class, () -> {\n            nodeListIterator.next();\n        });\n    }\n\n    @Test\n    public void testNextWithNodeConstructor() {\n        Node node = createMock(Element.class);\n        NodeList nodeList = createMock(NodeList.class);\n        expect(node.getChildNodes()).andReturn(nodeList).anyTimes();\n        expect(nodeList.getLength()).andReturn(nodes.length).anyTimes();\n        for (int i = 0; i < nodes.length; i++) {\n            expect(nodeList.item(i)).andReturn(nodes[i]).anyTimes();\n        }\n        replay(node);\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(node);\n\n        for (Node childNode : nodes) {\n            assertEquals(childNode, nodeListIterator.next());\n        }\n    }\n\n    @Test\n    public void testNextWithNodeConstructorNoElements() {\n        Node node = createMock(Element.class);\n        NodeList nodeList = createMock(NodeList.class);\n        expect(node.getChildNodes()).andReturn(nodeList).anyTimes();\n        expect(nodeList.getLength()).andReturn(0).anyTimes();\n        replay(node);\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(node);\n\n        assertThrows(NoSuchElementException.class, () -> {\n            nodeListIterator.next();\n        });\n    }\n}\n"}]