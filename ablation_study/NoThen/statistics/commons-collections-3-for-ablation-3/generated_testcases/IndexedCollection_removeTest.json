[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4.collection;\n\nimport static java.util.Arrays.asList;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport org.apache.commons.collections4.Transformer;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class IndexedCollection_removeTest {\n\n    private IndexedCollection<Integer, String> indexedCollection;\n    private Collection<String> originalCollection;\n\n    @BeforeEach\n    public void setUp() {\n        originalCollection = new ArrayList<>();\n        indexedCollection = decorateUniqueCollection(originalCollection);\n    }\n\n    @Test\n    public void testRemoveElementFromCollection() {\n        originalCollection.add(\"1\");\n        originalCollection.add(\"2\");\n        originalCollection.add(\"3\");\n\n        indexedCollection.reindex();\n\n        assertTrue(indexedCollection.remove(\"2\"));\n        assertFalse(indexedCollection.contains(\"2\"));\n        assertEquals(2, indexedCollection.size());\n    }\n\n    @Test\n    public void testRemoveNonExistentElementFromCollection() {\n        originalCollection.add(\"1\");\n        originalCollection.add(\"2\");\n        originalCollection.add(\"3\");\n\n        indexedCollection.reindex();\n\n        assertFalse(indexedCollection.remove(\"4\"));\n        assertEquals(3, indexedCollection.size());\n    }\n\n    @Test\n    public void testRemoveElementAndReindex() {\n        originalCollection.add(\"1\");\n        originalCollection.add(\"2\");\n        originalCollection.add(\"3\");\n\n        indexedCollection.reindex();\n\n        assertTrue(indexedCollection.remove(\"2\"));\n        indexedCollection.reindex();\n\n        assertFalse(indexedCollection.contains(\"2\"));\n        assertEquals(2, indexedCollection.size());\n    }\n\n    private IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original) {\n        Transformer<String, Integer> keyTransformer = s -> Integer.valueOf(s);\n        return IndexedCollection.uniqueIndexedCollection(original, keyTransformer);\n    }\n}\n"}]