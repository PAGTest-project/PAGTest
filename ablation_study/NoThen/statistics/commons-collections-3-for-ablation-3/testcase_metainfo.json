[{"uris": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java.ArrayUtilsTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContains()", "original_string": "    @Test\n    public void testContains() {\n        final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertFalse(ArrayUtils.contains(null, null));\n        assertFalse(ArrayUtils.contains(null, \"1\"));\n        assertTrue(ArrayUtils.contains(array, \"0\"));\n        assertTrue(ArrayUtils.contains(array, \"1\"));\n        assertTrue(ArrayUtils.contains(array, \"2\"));\n        assertTrue(ArrayUtils.contains(array, \"3\"));\n        assertTrue(ArrayUtils.contains(array, null));\n        assertFalse(ArrayUtils.contains(array, \"notInArray\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java", "class_name": "ArrayUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java.ArrayUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java.ArrayUtilsTest.[void]testContains_LANG_1261()", "name": "testContains_LANG_1261", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContains_LANG_1261()", "original_string": "    @Test\n    public void testContains_LANG_1261() {\n        class LANG1261ParentObject {\n            @Override\n            public boolean equals(final Object o) {\n                return true;\n            }\n        }\n        class LANG1261ChildObject extends LANG1261ParentObject {\n        }\n        final Object[] array = new LANG1261ChildObject[] { new LANG1261ChildObject() };\n        assertTrue(ArrayUtils.contains(array, new LANG1261ParentObject()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java", "class_name": "ArrayUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java.ArrayUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": [{"original_string": "        class LANG1261ParentObject {\n            @Override\n            public boolean equals(final Object o) {\n                return true;\n            }\n        }", "definition": "        class LANG1261ParentObject", "class_docstring": "", "name": "LANG1261ParentObject", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "            @Override\n            public boolean equals(final Object o) {\n                return true;\n            }", "docstring": "", "attributes": {"modifiers": "@Override\n            public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "name": "equals", "params": [{"name": "o", "type": "Object"}], "body": "                                                  {\n                return true;\n            }", "signature": "@Override\n            public boolean equals(final Object o)"}]}, {"original_string": "        class LANG1261ChildObject extends LANG1261ParentObject {\n        }", "definition": "        class LANG1261ChildObject extends LANG1261ParentObject", "class_docstring": "", "name": "LANG1261ChildObject", "super_interfaces": [], "superclasses": "LANG1261ParentObject", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "fields": [], "classes": []}, "syntax_pass": true, "methods": []}]}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java.ArrayUtilsTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf()", "original_string": "    @Test\n    public void testIndexOf() {\n        final Object[] array = { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n        assertEquals(-1, ArrayUtils.indexOf(null, null));\n        assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\n        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\"));\n        assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\n        assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\n        assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\n        assertEquals(3, ArrayUtils.indexOf(array, \"3\"));\n        assertEquals(4, ArrayUtils.indexOf(array, null));\n        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java", "class_name": "ArrayUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayUtilsTest.java.ArrayUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java.SetUtils_hashSetTest.[void]testHashSetWithItems()", "name": "testHashSetWithItems", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashSetWithItems()", "original_string": "    @Test\n    public void testHashSetWithItems() {\n        // Given\n        String[] items = {\"item1\", \"item2\"};\n\n        // When\n        HashSet<String> result = SetUtils.hashSet(items);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"item1\"));\n        assertTrue(result.contains(\"item2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java", "class_name": "SetUtils_hashSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java.SetUtils_hashSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java.SetUtils_hashSetTest.[void]testHashSetWithNull()", "name": "testHashSetWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashSetWithNull()", "original_string": "    @Test\n    public void testHashSetWithNull() {\n        // Given\n        String[] items = null;\n\n        // When\n        HashSet<String> result = SetUtils.hashSet(items);\n\n        // Then\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java", "class_name": "SetUtils_hashSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java.SetUtils_hashSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest.[void]testGetValuesAsSet_WithNullMap()", "name": "testGetValuesAsSet_WithNullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsSet_WithNullMap()", "original_string": "    @Test\n    public void testGetValuesAsSet_WithNullMap() {\n        MultiValuedMap<String, String> map = null;\n        Set<String> result = MultiMapUtils.getValuesAsSet(map, \"key\");\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "class_name": "MultiMapUtils_getValuesAsSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest.[void]testGetValuesAsSet_WithEmptyMap()", "name": "testGetValuesAsSet_WithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsSet_WithEmptyMap()", "original_string": "    @Test\n    public void testGetValuesAsSet_WithEmptyMap() {\n        MultiValuedMap<String, String> map = MultiMapUtils.emptyMultiValuedMap();\n        Set<String> result = MultiMapUtils.getValuesAsSet(map, \"key\");\n        assertTrue(result.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "class_name": "MultiMapUtils_getValuesAsSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest.[void]testGetValuesAsSet_WithArrayListValuedHashMap()", "name": "testGetValuesAsSet_WithArrayListValuedHashMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsSet_WithArrayListValuedHashMap()", "original_string": "    @Test\n    public void testGetValuesAsSet_WithArrayListValuedHashMap() {\n        MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        map.put(\"key\", \"value1\");\n        map.put(\"key\", \"value2\");\n        Set<String> result = MultiMapUtils.getValuesAsSet(map, \"key\");\n        assertEquals(new HashSet<>(Arrays.asList(\"value1\", \"value2\")), result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "class_name": "MultiMapUtils_getValuesAsSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest.[void]testGetValuesAsSet_WithHashSetValuedHashMap()", "name": "testGetValuesAsSet_WithHashSetValuedHashMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsSet_WithHashSetValuedHashMap()", "original_string": "    @Test\n    public void testGetValuesAsSet_WithHashSetValuedHashMap() {\n        MultiValuedMap<String, String> map = new HashSetValuedHashMap<>();\n        map.put(\"key\", \"value1\");\n        map.put(\"key\", \"value2\");\n        Set<String> result = MultiMapUtils.getValuesAsSet(map, \"key\");\n        assertEquals(new HashSet<>(Arrays.asList(\"value1\", \"value2\")), result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "class_name": "MultiMapUtils_getValuesAsSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest.[void]testGetValuesAsSet_WithNonExistentKey()", "name": "testGetValuesAsSet_WithNonExistentKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsSet_WithNonExistentKey()", "original_string": "    @Test\n    public void testGetValuesAsSet_WithNonExistentKey() {\n        MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        map.put(\"key1\", \"value1\");\n        Set<String> result = MultiMapUtils.getValuesAsSet(map, \"key2\");\n        assertTrue(result.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "class_name": "MultiMapUtils_getValuesAsSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java.MultiMapUtils_getValuesAsSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest.[void]testForEach_NullIterator()", "name": "testForEach_NullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach_NullIterator()", "original_string": "    @Test\n    public void testForEach_NullIterator() {\n        Closure<Object> closure = NOPClosure.nopClosure();\n        IteratorUtils.forEach(null, closure);\n        // No exception should be thrown\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "class_name": "IteratorUtils_forEachTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest.[void]testForEach_NonNullIterator()", "name": "testForEach_NonNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach_NonNullIterator()", "original_string": "    @Test\n    public void testForEach_NonNullIterator() {\n        Iterator<String> iterator = mock(Iterator.class);\n        Closure<String> closure = mock(Closure.class);\n\n        when(iterator.hasNext()).thenReturn(true, false);\n        when(iterator.next()).thenReturn(\"test\");\n\n        IteratorUtils.forEach(iterator, closure);\n\n        verify(closure, times(1)).accept(\"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "class_name": "IteratorUtils_forEachTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest.[void]testForEach_NullClosure()", "name": "testForEach_NullClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach_NullClosure()", "original_string": "    @Test\n    public void testForEach_NullClosure() {\n        Iterator<String> iterator = mock(Iterator.class);\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.forEach(iterator, null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "class_name": "IteratorUtils_forEachTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest.[void]testForEach_IteratorThrowsException()", "name": "testForEach_IteratorThrowsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach_IteratorThrowsException()", "original_string": "    @Test\n    public void testForEach_IteratorThrowsException() {\n        Iterator<String> iterator = mock(Iterator.class);\n        Closure<String> closure = mock(Closure.class);\n\n        when(iterator.hasNext()).thenReturn(true);\n        when(iterator.next()).thenThrow(new NoSuchElementException());\n\n        assertThrows(NoSuchElementException.class, () -> {\n            IteratorUtils.forEach(iterator, closure);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "class_name": "IteratorUtils_forEachTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java.IteratorUtils_forEachTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest.[void]testHashCodeForSet_NullSet()", "name": "testHashCodeForSet_NullSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeForSet_NullSet()", "original_string": "    @Test\n    public void testHashCodeForSet_NullSet() {\n        // Given\n        Collection<Object> set = null;\n\n        // When\n        int result = SetUtils.hashCodeForSet(set);\n\n        // Then\n        assertEquals(0, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "class_name": "SetUtils_hashCodeForSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest.[void]testHashCodeForSet_EmptySet()", "name": "testHashCodeForSet_EmptySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeForSet_EmptySet()", "original_string": "    @Test\n    public void testHashCodeForSet_EmptySet() {\n        // Given\n        Collection<Object> set = Collections.emptySet();\n\n        // When\n        int result = SetUtils.hashCodeForSet(set);\n\n        // Then\n        assertEquals(0, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "class_name": "SetUtils_hashCodeForSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest.[void]testHashCodeForSet_NonEmptySet()", "name": "testHashCodeForSet_NonEmptySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeForSet_NonEmptySet()", "original_string": "    @Test\n    public void testHashCodeForSet_NonEmptySet() {\n        // Given\n        Collection<Object> set = Arrays.asList(\"a\", \"b\", \"c\");\n\n        // When\n        int result = SetUtils.hashCodeForSet(set);\n\n        // Then\n        assertEquals(\"a\".hashCode() + \"b\".hashCode() + \"c\".hashCode(), result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "class_name": "SetUtils_hashCodeForSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest.[void]testHashCodeForSet_SetWithNullElements()", "name": "testHashCodeForSet_SetWithNullElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeForSet_SetWithNullElements()", "original_string": "    @Test\n    public void testHashCodeForSet_SetWithNullElements() {\n        // Given\n        Collection<Object> set = Arrays.asList(\"a\", null, \"b\");\n\n        // When\n        int result = SetUtils.hashCodeForSet(set);\n\n        // Then\n        assertEquals(\"a\".hashCode() + \"b\".hashCode(), result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "class_name": "SetUtils_hashCodeForSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java.SetUtils_hashCodeForSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testLinkedListAddFirst()", "name": "testLinkedListAddFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLinkedListAddFirst()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLinkedListAddFirst() {\n        if (!isAddSupported()) {\n            return;\n        }\n        final T o = (T) \"hello\";\n\n        resetEmpty();\n        getCollection().addFirst(o);\n        getConfirmedLinkedList().addFirst(o);\n        verify();\n\n        resetFull();\n        getCollection().addFirst(o);\n        getConfirmedLinkedList().addFirst(o);\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link LinkedList#addFirst(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testLinkedListAddLast()", "name": "testLinkedListAddLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLinkedListAddLast()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLinkedListAddLast() {\n        if (!isAddSupported()) {\n            return;\n        }\n        final T o = (T) \"hello\";\n\n        resetEmpty();\n        getCollection().addLast(o);\n        getConfirmedLinkedList().addLast(o);\n        verify();\n\n        resetFull();\n        getCollection().addLast(o);\n        getConfirmedLinkedList().addLast(o);\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link LinkedList#addLast(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testLinkedListGetFirst()", "name": "testLinkedListGetFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinkedListGetFirst()", "original_string": "    @Test\n    public void testLinkedListGetFirst() {\n        resetEmpty();\n        assertThrows(NoSuchElementException.class, () -> getCollection().getFirst(), \"getFirst() should throw a NoSuchElementException for an empty list.\");\n        verify();\n\n        resetFull();\n        final Object first = getCollection().getFirst();\n        final Object confirmedFirst = getConfirmedLinkedList().getFirst();\n        assertEquals(confirmedFirst, first, \"Result returned by getFirst() was wrong.\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link LinkedList#getFirst()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testLinkedListGetLast()", "name": "testLinkedListGetLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinkedListGetLast()", "original_string": "    @Test\n    public void testLinkedListGetLast() {\n        resetEmpty();\n        assertThrows(NoSuchElementException.class, () -> getCollection().getLast(), \"getLast() should throw a NoSuchElementException for an empty list.\");\n        verify();\n\n        resetFull();\n        final Object last = getCollection().getLast();\n        final Object confirmedLast = getConfirmedLinkedList().getLast();\n        assertEquals(confirmedLast, last, \"Result returned by getLast() was wrong.\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link LinkedList#getLast()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testLinkedListRemoveFirst()", "name": "testLinkedListRemoveFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinkedListRemoveFirst()", "original_string": "    @Test\n    public void testLinkedListRemoveFirst() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        assertThrows(NoSuchElementException.class, () -> getCollection().removeFirst(),\n                \"removeFirst() should throw a NoSuchElementException for an empty list.\");\n        verify();\n\n        resetFull();\n        final Object first = getCollection().removeFirst();\n        final Object confirmedFirst = getConfirmedLinkedList().removeFirst();\n        assertEquals(confirmedFirst, first, \"Result returned by removeFirst() was wrong.\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link LinkedList#removeFirst()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testLinkedListRemoveLast()", "name": "testLinkedListRemoveLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLinkedListRemoveLast()", "original_string": "    @Test\n    public void testLinkedListRemoveLast() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        assertThrows(NoSuchElementException.class, () -> getCollection().removeLast(), \"removeLast() should throw a NoSuchElementException for an empty list.\");\n        verify();\n\n        resetFull();\n        final Object last = getCollection().removeLast();\n        final Object confirmedLast = getConfirmedLinkedList().removeLast();\n        assertEquals(confirmedLast, last, \"Result returned by removeLast() was wrong.\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link LinkedList#removeLast()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testChainedTransformer()", "name": "testChainedTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testChainedTransformer()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testChainedTransformer() {\n        final Transformer<Object, Object> a = TransformerUtils.<Object, Object>constantTransformer(\"A\");\n        final Transformer<Object, Object> b = TransformerUtils.constantTransformer((Object) \"B\");\n        assertEquals(\"A\", TransformerUtils.chainedTransformer(b, a).apply(null));\n        assertEquals(\"B\", TransformerUtils.chainedTransformer(a, b).apply(null));\n        assertEquals(\"A\", TransformerUtils.chainedTransformer(b, a).apply(null));\n        assertEquals(\"A\", TransformerUtils.chainedTransformer(b, a).transform(null));\n        assertEquals(\"B\", TransformerUtils.chainedTransformer(a, b).transform(null));\n        assertEquals(\"A\", TransformerUtils.chainedTransformer(b, a).transform(null));\n        final Collection<Transformer<Object, Object>> coll = new ArrayList<>();\n        coll.add(b);\n        coll.add(a);\n        assertEquals(\"A\", TransformerUtils.chainedTransformer(coll).transform(null));\n\n        assertSame(NOPTransformer.INSTANCE, TransformerUtils.chainedTransformer());\n        assertSame(NOPTransformer.INSTANCE, TransformerUtils.chainedTransformer(Collections.<Transformer<Object, Object>>emptyList()));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.chainedTransformer(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.chainedTransformer((Transformer[]) null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.chainedTransformer((Collection<Transformer<Object, Object>>) null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.chainedTransformer(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> {\n                    final Collection<Transformer<Object, Object>> coll1 = new ArrayList<>();\n                    coll1.add(null);\n                    coll1.add(null);\n                    TransformerUtils.chainedTransformer(coll1);\n                })\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testCloneTransformer()", "name": "testCloneTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloneTransformer()", "original_string": "    @Test\n    public void testCloneTransformer() {\n        assertNull(TransformerUtils.cloneTransformer().transform(null));\n        assertEquals(cString, TransformerUtils.cloneTransformer().transform(cString));\n        assertEquals(cInteger, TransformerUtils.cloneTransformer().transform(cInteger));\n\n        assertThrows(IllegalArgumentException.class, () -> assertEquals(cObject, TransformerUtils.cloneTransformer().transform(cObject)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testConstantTransformer()", "name": "testConstantTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstantTransformer()", "original_string": "    @Test\n    public void testConstantTransformer() {\n        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(null));\n        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cObject));\n        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cString));\n        assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cInteger));\n        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.constantTransformer(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testExceptionTransformer()", "name": "testExceptionTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExceptionTransformer()", "original_string": "    @Test\n    public void testExceptionTransformer() {\n        assertAll(\n                () -> assertNotNull(TransformerUtils.exceptionTransformer()),\n                () -> assertSame(TransformerUtils.exceptionTransformer(), TransformerUtils.exceptionTransformer()),\n                () -> assertThrows(FunctorException.class, () -> TransformerUtils.exceptionTransformer().transform(null)),\n                () -> assertThrows(FunctorException.class, () -> TransformerUtils.exceptionTransformer().transform(cString))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testExecutorTransformer()", "name": "testExecutorTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecutorTransformer()", "original_string": "    @Test\n    public void testExecutorTransformer() {\n        assertNull(TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(null));\n        assertEquals(cObject, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cObject));\n        assertEquals(cString, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cString));\n        assertEquals(cInteger, TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cInteger));\n\n        assertThrows(NullPointerException.class, () -> TransformerUtils.asTransformer((Closure<Object>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testFactoryTransformer()", "name": "testFactoryTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFactoryTransformer()", "original_string": "    @Test\n    public void testFactoryTransformer() {\n        assertNull(TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(null));\n        assertNull(TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cObject));\n        assertNull(TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cString));\n        assertNull(TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cInteger));\n\n        assertThrows(NullPointerException.class, () -> TransformerUtils.asTransformer((Factory<Object>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testIfTransformer()", "name": "testIfTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIfTransformer()", "original_string": "    @Test\n    public void testIfTransformer() {\n        final Transformer<Object, String> a = TransformerUtils.constantTransformer(\"A\");\n        final Transformer<Object, String> b = TransformerUtils.constantTransformer(\"B\");\n        final Transformer<Object, String> c = TransformerUtils.constantTransformer(\"C\");\n\n        assertEquals(\"A\", TransformerUtils.ifTransformer(TruePredicate.truePredicate(), a, b).transform(null));\n        assertEquals(\"B\", TransformerUtils.ifTransformer(FalsePredicate.falsePredicate(), a, b).transform(null));\n\n        final Predicate<Integer> lessThanFivePredicate = value -> value < 5;\n        // if/else tests\n        assertEquals(\"A\", TransformerUtils.ifTransformer(lessThanFivePredicate, a, b).transform(1));\n        assertEquals(\"B\", TransformerUtils.ifTransformer(lessThanFivePredicate, a, b).transform(5));\n\n        // if tests\n        final Predicate<String> equalsAPredicate = EqualPredicate.equalPredicate(\"A\");\n        assertEquals(\"C\", TransformerUtils.ifTransformer(equalsAPredicate, c).transform(\"A\"));\n        assertEquals(\"B\", TransformerUtils.ifTransformer(equalsAPredicate, c).transform(\"B\"));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.ifTransformer(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.ifTransformer(TruePredicate.truePredicate(), null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.ifTransformer(null, ConstantTransformer.constantTransformer(\"A\"))),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.ifTransformer(null, null, null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testInstantiateTransformerNull()", "name": "testInstantiateTransformerNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstantiateTransformerNull()", "original_string": "    @Test\n    public void testInstantiateTransformerNull() {\n        assertAll(\n                () -> assertThrows(IllegalArgumentException.class, () -> TransformerUtils.instantiateTransformer(null, new Object[]{\"str\"})),\n                () -> assertThrows(IllegalArgumentException.class, () -> TransformerUtils.instantiateTransformer(new Class[]{}, new Object[]{\"str\"}))\n        );\n\n        Transformer<Class<?>, Object> trans = TransformerUtils.instantiateTransformer(new Class[] { Long.class }, new Object[] { null });\n\n        final Transformer<Class<?>, Object> finalTrans = trans;\n        assertThrows(FunctorException.class, () -> finalTrans.transform(String.class));\n\n        trans = TransformerUtils.instantiateTransformer();\n        assertEquals(StringUtils.EMPTY, trans.transform(String.class));\n\n        trans = TransformerUtils.instantiateTransformer(new Class[] { Long.TYPE }, new Object[] {1000L});\n        assertEquals(new Date(1000L), trans.transform(Date.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testInvokerTransformer()", "name": "testInvokerTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerTransformer()", "original_string": "    @Test\n    public void testInvokerTransformer() {\n        final List<Object> list = new ArrayList<>();\n        assertEquals(0, TransformerUtils.invokerTransformer(\"size\").transform(list));\n        list.add(new Object());\n        assertEquals(1, TransformerUtils.invokerTransformer(\"size\").transform(list));\n        assertNull(TransformerUtils.invokerTransformer(\"size\").transform(null));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.invokerTransformer(null)),\n                () -> assertThrows(FunctorException.class, () -> TransformerUtils.invokerTransformer(\"noSuchMethod\").transform(new Object()))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testInvokerTransformer2()", "name": "testInvokerTransformer2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerTransformer2()", "original_string": "    @Test\n    public void testInvokerTransformer2() {\n        final List<Object> list = new ArrayList<>();\n        assertEquals(Boolean.FALSE, TransformerUtils.invokerTransformer(\"contains\",\n                new Class[] { Object.class }, new Object[] { cString }).transform(list));\n        list.add(cString);\n        assertEquals(Boolean.TRUE, TransformerUtils.invokerTransformer(\"contains\",\n                new Class[] { Object.class }, new Object[] { cString }).transform(list));\n        assertNull(TransformerUtils.invokerTransformer(\"contains\",\n                new Class[]{Object.class}, new Object[]{cString}).transform(null));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.invokerTransformer(null, null, null)),\n                () -> assertThrows(FunctorException.class, () -> TransformerUtils.invokerTransformer(\"noSuchMethod\", new Class[]{Object.class},\n                        new Object[]{cString}).transform(new Object())),\n                () -> assertThrows(IllegalArgumentException.class, () -> TransformerUtils.invokerTransformer(\"badArgs\", null, new Object[]{cString})),\n                () -> assertThrows(IllegalArgumentException.class, () -> TransformerUtils.invokerTransformer(\"badArgs\", new Class[]{Object.class}, null)),\n                () -> assertThrows(IllegalArgumentException.class, () -> TransformerUtils.invokerTransformer(\"badArgs\", new Class[]{}, new Object[]{cString}))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testMapTransformer()", "name": "testMapTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testMapTransformer()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testMapTransformer() {\n        final Map<Object, Integer> map = new HashMap<>();\n        map.put(null, 0);\n        map.put(cObject, 1);\n        map.put(cString, 2);\n        assertEquals(Integer.valueOf(0), TransformerUtils.mapTransformer(map).transform(null));\n        assertEquals(Integer.valueOf(1), TransformerUtils.mapTransformer(map).transform(cObject));\n        assertEquals(Integer.valueOf(2), TransformerUtils.mapTransformer(map).transform(cString));\n        assertNull(TransformerUtils.mapTransformer(map).transform(cInteger));\n        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.mapTransformer(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testNopTransformer()", "name": "testNopTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNopTransformer()", "original_string": "    @Test\n    public void testNopTransformer() {\n        assertNotNull(TransformerUtils.nullTransformer());\n        assertSame(TransformerUtils.nullTransformer(), TransformerUtils.nullTransformer());\n        assertNull(TransformerUtils.nopTransformer().transform(null));\n        assertEquals(cObject, TransformerUtils.nopTransformer().transform(cObject));\n        assertEquals(cString, TransformerUtils.nopTransformer().transform(cString));\n        assertEquals(cInteger, TransformerUtils.nopTransformer().transform(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testNullTransformer()", "name": "testNullTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullTransformer()", "original_string": "    @Test\n    public void testNullTransformer() {\n        assertNotNull(TransformerUtils.nullTransformer());\n        assertSame(TransformerUtils.nullTransformer(), TransformerUtils.nullTransformer());\n        assertNull(TransformerUtils.nullTransformer().transform(null));\n        assertNull(TransformerUtils.nullTransformer().transform(cObject));\n        assertNull(TransformerUtils.nullTransformer().transform(cString));\n        assertNull(TransformerUtils.nullTransformer().transform(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testPredicateTransformer()", "name": "testPredicateTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicateTransformer()", "original_string": "    @Test\n    public void testPredicateTransformer() {\n        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(null));\n        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cObject));\n        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cString));\n        assertEquals(Boolean.TRUE, TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cInteger));\n\n        assertThrows(IllegalArgumentException.class, () -> TransformerUtils.asTransformer((Predicate<Object>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testSingletonPatternInSerialization()", "name": "testSingletonPatternInSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingletonPatternInSerialization()", "original_string": "    @Test\n    public void testSingletonPatternInSerialization() {\n        final Object[] singletons = {\n            ExceptionTransformer.INSTANCE,\n            NOPTransformer.INSTANCE,\n            StringValueTransformer.stringValueTransformer(),\n        };\n\n        for (final Object original : singletons) {\n            TestUtils.assertSameAfterSerialization(\"Singleton pattern broken for \" + original.getClass(), original);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that all Transformer singletons hold singleton pattern in\nserialization/deserialization process.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testStringValueTransformer()", "name": "testStringValueTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringValueTransformer()", "original_string": "    @Test\n    public void testStringValueTransformer() {\n        assertNotNull( \"StringValueTransformer should NEVER return a null value.\",\n            TransformerUtils.stringValueTransformer().transform(null));\n        assertEquals( \"null\",\n            TransformerUtils.stringValueTransformer().transform(null), \"StringValueTransformer should return \\\"null\\\" when given a null argument.\");\n        assertEquals( \"6\",\n            TransformerUtils.stringValueTransformer().transform(6), \"StringValueTransformer should return toString value\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testSwitchMapTransformer()", "name": "testSwitchMapTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchMapTransformer()", "original_string": "    @Test\n    public void testSwitchMapTransformer() {\n        final Transformer<String, String> a = TransformerUtils.constantTransformer(\"A\");\n        final Transformer<String, String> b = TransformerUtils.constantTransformer(\"B\");\n        final Transformer<String, String> c = TransformerUtils.constantTransformer(\"C\");\n\n        Map<String, Transformer<String, String>> map = new HashMap<>();\n        map.put(\"HELLO\", a);\n        map.put(\"THERE\", b);\n        assertNull(TransformerUtils.switchMapTransformer(map).transform(\"WELL\"));\n        assertEquals(\"A\", TransformerUtils.switchMapTransformer(map).transform(\"HELLO\"));\n        assertEquals(\"B\", TransformerUtils.switchMapTransformer(map).transform(\"THERE\"));\n        map.put(null, c);\n        assertEquals(\"C\", TransformerUtils.switchMapTransformer(map).transform(\"WELL\"));\n\n        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchMapTransformer(new HashMap<>()));\n        map = new HashMap<>();\n        map.put(null, null);\n        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchMapTransformer(map));\n\n        assertThrows(NullPointerException.class, () -> TransformerUtils.switchMapTransformer(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest.[void]testSwitchTransformer()", "name": "testSwitchTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSwitchTransformer()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSwitchTransformer() {\n        final Transformer<String, String> a = TransformerUtils.constantTransformer(\"A\");\n        final Transformer<String, String> b = TransformerUtils.constantTransformer(\"B\");\n        final Transformer<String, String> c = TransformerUtils.constantTransformer(\"C\");\n\n        assertEquals(\"A\", TransformerUtils.switchTransformer(TruePredicate.truePredicate(), a, b).transform(null));\n        assertEquals(\"B\", TransformerUtils.switchTransformer(FalsePredicate.falsePredicate(), a, b).transform(null));\n\n        assertNull(TransformerUtils.<Object, String>switchTransformer(\n                new Predicate[]{EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\")},\n                new Transformer[]{a, b}).transform(\"WELL\"));\n        assertEquals(\"A\", TransformerUtils.switchTransformer(\n            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n            new Transformer[] { a, b }).transform(\"HELLO\"));\n        assertEquals(\"B\", TransformerUtils.switchTransformer(\n            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n            new Transformer[] { a, b }).transform(\"THERE\"));\n\n        assertEquals(\"C\", TransformerUtils.switchTransformer(\n            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n            new Transformer[] { a, b }, c).transform(\"WELL\"));\n\n        Map<Predicate<String>, Transformer<String, String>> map = new HashMap<>();\n        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n        assertNull(TransformerUtils.switchTransformer(map).transform(\"WELL\"));\n        assertEquals(\"A\", TransformerUtils.switchTransformer(map).transform(\"HELLO\"));\n        assertEquals(\"B\", TransformerUtils.switchTransformer(map).transform(\"THERE\"));\n        map.put(null, c);\n        assertEquals(\"C\", TransformerUtils.switchTransformer(map).transform(\"WELL\"));\n\n        assertEquals(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(new Predicate[0], new Transformer[0]));\n        assertEquals(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(new HashMap<>()));\n        map = new HashMap<>();\n        map.put(null, null);\n        assertEquals(ConstantTransformer.NULL_INSTANCE, TransformerUtils.switchTransformer(map));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.switchTransformer(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.switchTransformer(null, (Transformer[]) null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.switchTransformer(null)),\n                () -> assertThrows(NullPointerException.class, () -> TransformerUtils.switchTransformer(new Predicate[2], new Transformer[2])),\n                () -> assertThrows(IllegalArgumentException.class, () -> TransformerUtils.switchTransformer(\n                        new Predicate[]{TruePredicate.truePredicate()},\n                        new Transformer[]{a, b}))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java", "class_name": "TransformerUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java.TransformerUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java.IteratorUtils_toListTest.[void]testToList_SuccessfulConversion()", "name": "testToList_SuccessfulConversion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToList_SuccessfulConversion()", "original_string": "    @Test\n    public void testToList_SuccessfulConversion() {\n        // Given\n        List<String> inputList = new ArrayList<>();\n        inputList.add(\"A\");\n        inputList.add(\"B\");\n        Iterator<String> iterator = inputList.iterator();\n\n        // When\n        List<String> result = IteratorUtils.toList(iterator, 2);\n\n        // Then\n        assertEquals(inputList, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "class_name": "IteratorUtils_toListTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java.IteratorUtils_toListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java.IteratorUtils_toListTest.[void]testToList_NullIterator()", "name": "testToList_NullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToList_NullIterator()", "original_string": "    @Test\n    public void testToList_NullIterator() {\n        // Given\n        Iterator<String> iterator = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.toList(iterator, 2);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "class_name": "IteratorUtils_toListTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java.IteratorUtils_toListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java.IteratorUtils_toListTest.[void]testToList_InvalidEstimatedSize()", "name": "testToList_InvalidEstimatedSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToList_InvalidEstimatedSize()", "original_string": "    @Test\n    public void testToList_InvalidEstimatedSize() {\n        // Given\n        List<String> inputList = new ArrayList<>();\n        inputList.add(\"A\");\n        Iterator<String> iterator = inputList.iterator();\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            IteratorUtils.toList(iterator, 0);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "class_name": "IteratorUtils_toListTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java.IteratorUtils_toListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java.IteratorUtils_filteredListIteratorTest.[void]testFilteredListIterator_Success()", "name": "testFilteredListIterator_Success", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilteredListIterator_Success()", "original_string": "    @Test\n    public void testFilteredListIterator_Success() {\n        List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n        ListIterator<String> listIterator = list.listIterator();\n        Predicate<String> predicate = TruePredicate.truePredicate();\n\n        ListIterator<String> filteredIterator = IteratorUtils.filteredListIterator(listIterator, predicate);\n\n        assertNotNull(filteredIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java", "class_name": "IteratorUtils_filteredListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java.IteratorUtils_filteredListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java.IteratorUtils_filteredListIteratorTest.[void]testFilteredListIterator_NullListIterator()", "name": "testFilteredListIterator_NullListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilteredListIterator_NullListIterator()", "original_string": "    @Test\n    public void testFilteredListIterator_NullListIterator() {\n        Predicate<String> predicate = TruePredicate.truePredicate();\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.filteredListIterator(null, predicate);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java", "class_name": "IteratorUtils_filteredListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java.IteratorUtils_filteredListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java.IteratorUtils_filteredListIteratorTest.[void]testFilteredListIterator_NullPredicate()", "name": "testFilteredListIterator_NullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilteredListIterator_NullPredicate()", "original_string": "    @Test\n    public void testFilteredListIterator_NullPredicate() {\n        List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n        ListIterator<String> listIterator = list.listIterator();\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.filteredListIterator(listIterator, null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java", "class_name": "IteratorUtils_filteredListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java.IteratorUtils_filteredListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java.ComparatorUtils_transformedComparatorTest.[void]testTransformedComparatorWithNullComparator()", "name": "testTransformedComparatorWithNullComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedComparatorWithNullComparator()", "original_string": "    @Test\n    public void testTransformedComparatorWithNullComparator() {\n        // Given\n        Transformer<String, Integer> transformer = new ConstantTransformer<>(1);\n\n        // When\n        Comparator<String> comparator = ComparatorUtils.transformedComparator(null, transformer);\n\n        // Then\n        assertNotNull(comparator);\n        assertEquals(TransformingComparator.class, comparator.getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java", "class_name": "ComparatorUtils_transformedComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java.ComparatorUtils_transformedComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java.ComparatorUtils_transformedComparatorTest.[void]testTransformedComparatorWithNonNullComparator()", "name": "testTransformedComparatorWithNonNullComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedComparatorWithNonNullComparator()", "original_string": "    @Test\n    public void testTransformedComparatorWithNonNullComparator() {\n        // Given\n        Comparator<Integer> integerComparator = Comparator.naturalOrder();\n        Transformer<String, Integer> transformer = new ConstantTransformer<>(1);\n\n        // When\n        Comparator<String> comparator = ComparatorUtils.transformedComparator(integerComparator, transformer);\n\n        // Then\n        assertNotNull(comparator);\n        assertEquals(TransformingComparator.class, comparator.getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java", "class_name": "ComparatorUtils_transformedComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java.ComparatorUtils_transformedComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java.EnumerationUtils_getTest.[void]testGet_ValidIndex()", "name": "testGet_ValidIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGet_ValidIndex()", "original_string": "    @Test\n    void testGet_ValidIndex() {\n        Vector<String> vector = new Vector<>();\n        vector.add(\"A\");\n        vector.add(\"B\");\n        vector.add(\"C\");\n        Enumeration<String> enumeration = vector.elements();\n\n        assertEquals(\"B\", EnumerationUtils.get(enumeration, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java", "class_name": "EnumerationUtils_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java.EnumerationUtils_getTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java.EnumerationUtils_getTest.[void]testGet_InvalidIndex()", "name": "testGet_InvalidIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGet_InvalidIndex()", "original_string": "    @Test\n    void testGet_InvalidIndex() {\n        Vector<String> vector = new Vector<>();\n        vector.add(\"A\");\n        Enumeration<String> enumeration = vector.elements();\n\n        assertThrows(IndexOutOfBoundsException.class, () -> EnumerationUtils.get(enumeration, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java", "class_name": "EnumerationUtils_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java.EnumerationUtils_getTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testConvertResourceBundle()", "name": "testConvertResourceBundle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConvertResourceBundle()", "original_string": "    @Test\n    public void testConvertResourceBundle() {\n        final Map<String, String> in = new HashMap<>(5, 1);\n        in.put(\"1\", \"A\");\n        in.put(\"2\", \"B\");\n        in.put(\"3\", \"C\");\n        in.put(\"4\", \"D\");\n        in.put(\"5\", \"E\");\n\n        final ResourceBundle b = new ListResourceBundle() {\n            @Override\n            public Object[][] getContents() {\n                final Object[][] contents = new Object[in.size()][2];\n                int n = 0;\n                for (final Object key : in.keySet()) {\n                    final Object val = in.get(key);\n                    contents[n][0] = key;\n                    contents[n][1] = val;\n                    ++n;\n                }\n                return contents;\n            }\n        };\n\n        final Map<String, Object> out = MapUtils.toMap(b);\n\n        assertEquals(in, out);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugAndVerbosePrintCasting()", "name": "testDebugAndVerbosePrintCasting", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugAndVerbosePrintCasting()", "original_string": "    @Test\n    public void testDebugAndVerbosePrintCasting() {\n        final Map<Integer, String> inner = new HashMap<>(2, 1);\n        inner.put(2, \"B\");\n        inner.put(3, \"C\");\n\n        final Map<Integer, Object> outer = new HashMap<>(2, 1);\n        outer.put(0, inner);\n        outer.put(1, \"A\");\n\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        try {\n            MapUtils.debugPrint(outPrint, \"Print Map\", outer);\n        } catch (final ClassCastException e) {\n            fail(\"No Casting should be occurring!\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugAndVerbosePrintNullMap()", "name": "testDebugAndVerbosePrintNullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugAndVerbosePrintNullMap()", "original_string": "    @Test\n    public void testDebugAndVerbosePrintNullMap() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String LABEL = \"Print Map\";\n        outPrint.println(LABEL + \" = \" + String.valueOf((Object) null));\n        final String EXPECTED_OUT = out.toString();\n\n        out.reset();\n\n        MapUtils.debugPrint(outPrint, LABEL, null);\n        assertEquals(EXPECTED_OUT, out.toString());\n\n        out.reset();\n\n        MapUtils.verbosePrint(outPrint, LABEL, null);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrint()", "name": "testDebugPrint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrint()", "original_string": "    @Test\n    public void testDebugPrint() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String LABEL = \"Print Map\";\n        final String INDENT = \"    \";\n\n        outPrint.println(LABEL + \" = \");\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"0 = A \" + String.class.getName());\n        outPrint.println(INDENT + \"1 = \");\n        outPrint.println(INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + \"2 = B \" + String.class.getName());\n        outPrint.println(INDENT + INDENT + \"3 = C \" + String.class.getName());\n        outPrint.println(INDENT + \"} \" + TreeMap.class.getName());\n        outPrint.println(INDENT + \"7 = (this Map) \" + TreeMap.class.getName());\n        outPrint.println(\"} \" + TreeMap.class.getName());\n\n        final String EXPECTED_OUT = out.toString();\n\n        out.reset();\n\n        final Map<Integer, String> inner = new TreeMap<>(); // treeMap guarantees order across JDKs for test\n        inner.put(2, \"B\");\n        inner.put(3, \"C\");\n\n        final Map<Integer, Object> outer = new TreeMap<>();\n        outer.put(1, inner);\n        outer.put(0, \"A\");\n        outer.put(7, outer);\n\n        MapUtils.debugPrint(outPrint, \"Print Map\", outer);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrintNullKey()", "name": "testDebugPrintNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrintNullKey()", "original_string": "    @Test\n    public void testDebugPrintNullKey() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Object, String> map = new HashMap<>();\n        map.put(null, \"A\");\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"null = A \" + String.class.getName());\n        outPrint.println(\"} \" + HashMap.class.getName());\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.debugPrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrintNullKeyToMap1()", "name": "testDebugPrintNullKeyToMap1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrintNullKeyToMap1()", "original_string": "    @Test\n    public void testDebugPrintNullKeyToMap1() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Object, Map<?, ?>> map = new HashMap<>();\n        map.put(null, map);\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"null = (this Map) \" + HashMap.class.getName());\n        outPrint.println(\"} \" + HashMap.class.getName());\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.debugPrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrintNullKeyToMap2()", "name": "testDebugPrintNullKeyToMap2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrintNullKeyToMap2()", "original_string": "    @Test\n    public void testDebugPrintNullKeyToMap2() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Object, Object> map = new HashMap<>();\n        final Map<Object, Object> map2 = new HashMap<>();\n        map.put(null, map2);\n        map2.put(\"2\", \"B\");\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"null = \");\n        outPrint.println(INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + \"2 = B \" + String.class.getName());\n        outPrint.println(INDENT + \"} \" + HashMap.class.getName());\n        outPrint.println(\"} \" + HashMap.class.getName());\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.debugPrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrintNullLabel()", "name": "testDebugPrintNullLabel", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrintNullLabel()", "original_string": "    @Test\n    public void testDebugPrintNullLabel() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Integer, String> map = new TreeMap<>(); // treeMap guarantees order across JDKs for test\n        map.put(2, \"B\");\n        map.put(3, \"C\");\n        map.put(4, null);\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"2 = B \" + String.class.getName());\n        outPrint.println(INDENT + \"3 = C \" + String.class.getName());\n        outPrint.println(INDENT + \"4 = null\");\n        outPrint.println(\"} \" + TreeMap.class.getName());\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.debugPrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrintNullLabelAndMap()", "name": "testDebugPrintNullLabelAndMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrintNullLabelAndMap()", "original_string": "    @Test\n    public void testDebugPrintNullLabelAndMap() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        outPrint.println(\"null\");\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.debugPrint(outPrint, null, null);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrintNullStream()", "name": "testDebugPrintNullStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrintNullStream()", "original_string": "    @Test\n    public void testDebugPrintNullStream() {\n        assertThrows(NullPointerException.class, () -> MapUtils.debugPrint(null, \"Map\", new HashMap<>()),\n                \"Should generate NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testDebugPrintSelfReference()", "name": "testDebugPrintSelfReference", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDebugPrintSelfReference()", "original_string": "    @Test\n    public void testDebugPrintSelfReference() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String LABEL = \"Print Map\";\n        final String INDENT = \"    \";\n\n        final Map<Integer, Object> grandfather = new TreeMap<>(); // treeMap guarantees order across JDKs for test\n        final Map<Integer, Object> father = new TreeMap<>();\n        final Map<Integer, Object> son    = new TreeMap<>();\n\n        grandfather.put(0, \"A\");\n        grandfather.put(1, father);\n\n        father.put(2, \"B\");\n        father.put(3, grandfather);\n        father.put(4, son);\n\n        son.put(5, \"C\");\n        son.put(6, grandfather);\n        son.put(7, father);\n\n        outPrint.println(LABEL + \" = \");\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"0 = A \" + String.class.getName());\n        outPrint.println(INDENT + \"1 = \");\n        outPrint.println(INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + \"2 = B \" + String.class.getName());\n        outPrint.println(INDENT + INDENT + \"3 = (ancestor[0] Map) \" + TreeMap.class.getName());\n        outPrint.println(INDENT + INDENT + \"4 = \");\n        outPrint.println(INDENT + INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + INDENT + \"5 = C \" + String.class.getName());\n        outPrint.println(INDENT + INDENT + INDENT + \"6 = (ancestor[1] Map) \" + TreeMap.class.getName());\n        outPrint.println(INDENT + INDENT + INDENT + \"7 = (ancestor[0] Map) \" + TreeMap.class.getName());\n        outPrint.println(INDENT + INDENT + \"} \" + TreeMap.class.getName());\n        outPrint.println(INDENT + \"} \" + TreeMap.class.getName());\n        outPrint.println(\"} \" + TreeMap.class.getName());\n\n        final String EXPECTED_OUT = out.toString();\n\n        out.reset();\n        MapUtils.debugPrint(outPrint, \"Print Map\", grandfather);\n\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testEmptyIfNull()", "name": "testEmptyIfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIfNull()", "original_string": "    @Test\n    public void testEmptyIfNull() {\n        assertTrue(MapUtils.emptyIfNull(null).isEmpty());\n\n        final Map<Long, Long> map = new HashMap<>();\n        assertSame(map, MapUtils.emptyIfNull(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testFixedSizeMap()", "name": "testFixedSizeMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFixedSizeMap()", "original_string": "    @Test\n    public void testFixedSizeMap() {\n        final Exception exception = assertThrows(IllegalArgumentException.class, () -> MapUtils.fixedSizeMap(new HashMap<>()).put(new Object(), new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testFixedSizeSortedMap()", "name": "testFixedSizeSortedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFixedSizeSortedMap()", "original_string": "    @Test\n    public void testFixedSizeSortedMap() {\n        final Exception exception = assertThrows(IllegalArgumentException.class, () -> MapUtils.fixedSizeSortedMap(new TreeMap<>()).put(1L, 1L));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetBooleanValue()", "name": "testGetBooleanValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetBooleanValue()", "original_string": "    @Test\n    public void testGetBooleanValue() {\n        final Map<String, Object> in = new HashMap<>();\n        in.put(\"key\", true);\n        in.put(\"keyNumberTrue\", 1);\n        in.put(\"keyNumberFalse\", 0);\n        in.put(\"keyUnmapped\", new Object());\n\n        assertFalse(MapUtils.getBooleanValue(null, \"keyString\", null));\n        assertFalse(MapUtils.getBooleanValue(in, null, null));\n        assertFalse(MapUtils.getBooleanValue(null, null, null));\n        assertTrue(MapUtils.getBooleanValue(in, \"key\", true));\n        assertTrue(MapUtils.getBooleanValue(in, \"key\"));\n        assertTrue(MapUtils.getBooleanValue(in, \"noKey\", true));\n        assertTrue(MapUtils.getBooleanValue(in, \"noKey\", key -> true));\n        assertFalse(MapUtils.getBooleanValue(in, \"noKey\"));\n        assertTrue(MapUtils.getBoolean(in, \"key\", true));\n        assertTrue(MapUtils.getBoolean(in, \"noKey\", true));\n        assertTrue(MapUtils.getBoolean(in, \"noKey\", key -> {\n            if (System.currentTimeMillis() > 0) {\n                return true;\n            }\n            return false;\n        }));\n        assertNull(MapUtils.getBoolean(in, \"noKey\", key -> null));\n        assertFalse(MapUtils.getBooleanValue(in, \"noKey\", key -> null));\n        assertNull(MapUtils.getBoolean(null, \"noKey\"));\n        // Values are Numbers\n        assertFalse(MapUtils.getBoolean(in, \"keyNumberFalse\"));\n        assertTrue(MapUtils.getBoolean(in, \"keyNumberTrue\"));\n        assertNull(MapUtils.getBoolean(in, \"keyString\"));\n        assertNull(MapUtils.getBoolean(null, \"keyString\"));\n        assertNull(MapUtils.getBoolean(in, null));\n        assertNull(MapUtils.getBoolean(null, null));\n\n        final Map<String, String> inStr = new HashMap<>();\n        inStr.put(\"str1\", \"true\");\n\n        assertTrue(MapUtils.getBooleanValue(inStr, \"str1\", true));\n        assertTrue(MapUtils.getBoolean(inStr, \"str1\", true));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetByteValue()", "name": "testGetByteValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetByteValue()", "original_string": "    @Test\n    public void testGetByteValue() {\n        final Map<String, Byte> in = new HashMap<>();\n        final byte val = 100;\n        in.put(\"key\", val);\n\n        assertEquals(val, MapUtils.getByteValue(in, \"key\", val), 0);\n        assertEquals(val, MapUtils.getByteValue(in, \"key\"), 0);\n        assertEquals(val, MapUtils.getByteValue(in, \"noKey\", val), 0);\n        assertEquals(val, MapUtils.getByteValue(in, \"noKey\", key -> ((byte) 100)), 0);\n        assertEquals(0, MapUtils.getByteValue(in, \"noKey\"), 0);\n        assertEquals(val, MapUtils.getByte(in, \"key\", val), 0);\n        assertEquals(val, MapUtils.getByte(in, \"noKey\", val), 0);\n        assertEquals(val, MapUtils.getByte(in, \"noKey\", key -> val), 0);\n\n        final Map<String, String> inStr = new HashMap<>();\n        inStr.put(\"str1\", \"100\");\n\n        assertEquals(MapUtils.getByteValue(inStr, \"str1\", val), val, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetDoubleValue()", "name": "testGetDoubleValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetDoubleValue()", "original_string": "    @Test\n    public void testGetDoubleValue() {\n        final Map<String, Double> in = new HashMap<>();\n        in.put(\"key\", 2.0);\n\n        assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\", 0.0), 0);\n        assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\"), 0);\n        assertEquals(1.0, MapUtils.getDoubleValue(in, \"noKey\", 1.0), 0);\n        assertEquals(5.0, MapUtils.getDoubleValue(in, \"noKey\", key -> 5.0D), 0);\n\n        assertEquals(0, MapUtils.getDoubleValue(in, \"noKey\"), 0);\n        assertEquals(2.0, MapUtils.getDouble(in, \"key\", 0.0), 0);\n        assertEquals(1.0, MapUtils.getDouble(in, \"noKey\", 1.0), 0);\n        assertEquals(1.0, MapUtils.getDouble(in, \"noKey\", key -> 1.0), 0);\n\n        final Map<String, String> inStr = new HashMap<>();\n        final char decimalSeparator = getDecimalSeparator();\n        inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");\n\n        assertEquals(MapUtils.getDoubleValue(inStr, \"str1\", 0.0), 2.0, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetFloatValue()", "name": "testGetFloatValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFloatValue()", "original_string": "    @Test\n    public void testGetFloatValue() {\n        final Map<String, Float> in = new HashMap<>();\n        in.put(\"key\", 2.0f);\n\n        assertEquals(2.0, MapUtils.getFloatValue(in, \"key\", 0.0f), 0);\n        assertEquals(2.0, MapUtils.getFloatValue(in, \"key\"), 0);\n        assertEquals(1.0, MapUtils.getFloatValue(in, \"noKey\", 1.0f), 0);\n        assertEquals(1.0, MapUtils.getFloatValue(in, \"noKey\", key -> 1.0F), 0);\n        assertEquals(0, MapUtils.getFloatValue(in, \"noKey\"), 0);\n        assertEquals(2.0, MapUtils.getFloat(in, \"key\", 0.0f), 0);\n        assertEquals(1.0, MapUtils.getFloat(in, \"noKey\", 1.0f), 0);\n        assertEquals(1.0, MapUtils.getFloat(in, \"noKey\", key -> 1.0F), 0);\n\n        final Map<String, String> inStr = new HashMap<>();\n        final char decimalSeparator = getDecimalSeparator();\n        inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");\n\n        assertEquals(MapUtils.getFloatValue(inStr, \"str1\", 0.0f), 2.0, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetIntValue()", "name": "testGetIntValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIntValue()", "original_string": "    @Test\n    public void testGetIntValue() {\n        final Map<String, Integer> in = new HashMap<>();\n        in.put(\"key\", 2);\n\n        assertEquals(2, MapUtils.getIntValue(in, \"key\", 0), 0);\n        assertEquals(2, MapUtils.getIntValue(in, \"key\"), 0);\n        assertEquals(0, MapUtils.getIntValue(in, \"noKey\", 0), 0);\n        assertEquals(0, MapUtils.getIntValue(in, \"noKey\", key -> 0), 0);\n        assertEquals(0, MapUtils.getIntValue(in, \"noKey\"), 0);\n        assertEquals(2, MapUtils.getInteger(in, \"key\", 0), 0);\n        assertEquals(0, MapUtils.getInteger(in, \"noKey\", 0), 0);\n        assertEquals(0, MapUtils.getInteger(in, \"noKey\", key -> 0), 0);\n\n        final Map<String, String> inStr = new HashMap<>();\n        inStr.put(\"str1\", \"2\");\n\n        assertEquals(MapUtils.getIntValue(inStr, \"str1\", 0), 2, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetLongValue()", "name": "testGetLongValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetLongValue()", "original_string": "    @Test\n    public void testGetLongValue() {\n        final Map<String, Long> in = new HashMap<>();\n        in.put(\"key\", 2L);\n\n        assertEquals(2.0, MapUtils.getLongValue(in, \"key\", 0L), 0);\n        assertEquals(2.0, MapUtils.getLongValue(in, \"key\"), 0);\n        assertEquals(1, MapUtils.getLongValue(in, \"noKey\", 1L), 0);\n        assertEquals(1, MapUtils.getLongValue(in, \"noKey\", key -> 1L), 0);\n        assertEquals(0, MapUtils.getLongValue(in, \"noKey\"), 0);\n        assertEquals(2.0, MapUtils.getLong(in, \"key\", 0L), 0);\n        assertEquals(1, MapUtils.getLong(in, \"noKey\", 1L), 0);\n        assertEquals(1, MapUtils.getLong(in, \"noKey\", key -> 1L), 0);\n\n        final Map<String, Number> in1 = new HashMap<>();\n        in1.put(\"key\", 2);\n\n        assertEquals(Long.valueOf(2), MapUtils.getLong(in1, \"key\"));\n\n        final Map<String, String> inStr = new HashMap<>();\n        inStr.put(\"str1\", \"2\");\n\n        assertEquals(MapUtils.getLongValue(inStr, \"str1\", 0L), 2, 0);\n        assertEquals(MapUtils.getLong(inStr, \"str1\", 1L), 2, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetMap()", "name": "testGetMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetMap()", "original_string": "    @Test\n    public void testGetMap() {\n        final Map<String, Map<String, String>> in = new HashMap<>();\n        final Map<String, String> valMap = new HashMap<>();\n        valMap.put(\"key1\", \"value1\");\n        in.put(\"key1\", valMap);\n        final Map<?, ?> outValue =  MapUtils.getMap(in, \"key1\", (Map<?, ?>) null);\n\n        assertEquals(\"value1\", outValue.get(\"key1\"));\n        assertNull(outValue.get(\"key2\"));\n        assertNull(MapUtils.getMap(in, \"key2\", (Map<?, ?>) null));\n        assertNull(MapUtils.getMap(null, \"key2\", (Map<?, ?>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetNumber()", "name": "testGetNumber", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNumber()", "original_string": "    @Test\n    public void testGetNumber() {\n        final Map<String, Number> in = new HashMap<>();\n        final Number val = 1000;\n        in.put(\"key\", val);\n\n        assertEquals(val.intValue(), MapUtils.getNumber(in, \"key\", val).intValue(), 0);\n        assertEquals(val.intValue(), MapUtils.getNumber(in, \"noKey\", val).intValue(), 0);\n        assertEquals(val.intValue(), MapUtils.getNumber(in, \"noKey\", key -> {\n            if (true) {\n                return val;\n            }\n            return null;\n        }).intValue(), 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetNumberValueWithInvalidString()", "name": "testGetNumberValueWithInvalidString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNumberValueWithInvalidString()", "original_string": "    @Test\n    public void testGetNumberValueWithInvalidString() {\n        final Map<String, String> map = new HashMap<>();\n        map.put(\"key\", \"one\");\n\n        assertNull(MapUtils.getNumber(map, \"key\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetObject()", "name": "testGetObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetObject()", "original_string": "    @Test\n    public void testGetObject() {\n        final Map<String, Object> in = new HashMap<>();\n        in.put(\"key\", \"str\");\n\n        assertEquals(\"str\", MapUtils.getObject(in, \"key\", \"default\"));\n        assertEquals(\"str\", MapUtils.getObject(in, \"key\"));\n        assertNull(MapUtils.getObject(null, \"key\"));\n        assertEquals(\"default\", MapUtils.getObject(in, \"noKey\", \"default\"));\n        assertEquals(\"default\", MapUtils.getObject(null, \"noKey\", \"default\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetShortValue()", "name": "testGetShortValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetShortValue()", "original_string": "    @Test\n    public void testGetShortValue() {\n        final Map<String, Short> in = new HashMap<>();\n        final short val = 10;\n        in.put(\"key\", val);\n\n        assertEquals(val, MapUtils.getShortValue(in, \"key\", val), 0);\n        assertEquals(val, MapUtils.getShortValue(in, \"key\"), 0);\n        assertEquals(val, MapUtils.getShortValue(in, \"noKey\", val), 0);\n        assertEquals(val, MapUtils.getShortValue(in, \"noKey\", key -> val), 0);\n        assertEquals(0, MapUtils.getShortValue(in, \"noKey\"), 0);\n        assertEquals(val, MapUtils.getShort(in, \"key\", val), 0);\n        assertEquals(val, MapUtils.getShort(in, \"noKey\", val), 0);\n        assertEquals(val, MapUtils.getShort(in, \"noKey\", key -> val), 0);\n\n        final Map<String, String> inStr = new HashMap<>();\n        inStr.put(\"str1\", \"10\");\n\n        assertEquals(MapUtils.getShortValue(inStr, \"str1\", val), val, 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testGetString()", "name": "testGetString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetString()", "original_string": "    @Test\n    public void testGetString() {\n        final Map<String, String> in = new HashMap<>();\n        in.put(\"key\", \"str\");\n\n        assertEquals(\"str\", MapUtils.getString(in, \"key\", \"default\"));\n        assertEquals(\"str\", MapUtils.getString(in, \"key\"));\n        assertNull(MapUtils.getString(null, \"key\"));\n        assertEquals(\"default\", MapUtils.getString(in, \"noKey\", \"default\"));\n        assertEquals(\"default\", MapUtils.getString(in, \"noKey\", key -> {\n            if (\"noKey\".equals(key)) {\n                return \"default\";\n            }\n            return StringUtils.EMPTY;\n        }));\n        assertEquals(\"default\", MapUtils.getString(null, \"noKey\", \"default\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testInvertEmptyMap()", "name": "testInvertEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvertEmptyMap()", "original_string": "    @Test\n    public void testInvertEmptyMap() {\n        final Map<String, String> emptyMap = new HashMap<>();\n        final Map<String, String> resultMap = MapUtils.invertMap(emptyMap);\n        assertEquals(emptyMap, resultMap);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testInvertMap()", "name": "testInvertMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvertMap()", "original_string": "    @Test\n    public void testInvertMap() {\n        final Map<String, String> in = new HashMap<>(5, 1);\n        in.put(\"1\", \"A\");\n        in.put(\"2\", \"B\");\n        in.put(\"3\", \"C\");\n        in.put(\"4\", \"D\");\n        in.put(\"5\", \"E\");\n\n        final Set<String> inKeySet = new HashSet<>(in.keySet());\n        final Set<String> inValSet = new HashSet<>(in.values());\n\n        final Map<String, String> out = MapUtils.invertMap(in);\n\n        final Set<String> outKeySet = new HashSet<>(out.keySet());\n        final Set<String> outValSet = new HashSet<>(out.values());\n\n        assertEquals(inKeySet, outValSet);\n        assertEquals(inValSet, outKeySet);\n\n        assertEquals(\"1\", out.get(\"A\"));\n        assertEquals(\"2\", out.get(\"B\"));\n        assertEquals(\"3\", out.get(\"C\"));\n        assertEquals(\"4\", out.get(\"D\"));\n        assertEquals(\"5\", out.get(\"E\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testInvertMapNull()", "name": "testInvertMapNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvertMapNull()", "original_string": "    @Test\n    public void testInvertMapNull() {\n        final Map<String, String> nullMap = null;\n        final Exception exception = assertThrows(NullPointerException.class, () -> MapUtils.invertMap(nullMap));\n        final String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(\"map\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIsEmptyWithEmptyMap()", "name": "testIsEmptyWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithEmptyMap()", "original_string": "    @Test\n    public void testIsEmptyWithEmptyMap() {\n        final Map<Object, Object> map = new HashMap<>();\n        assertTrue(MapUtils.isEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIsEmptyWithNonEmptyMap()", "name": "testIsEmptyWithNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithNonEmptyMap()", "original_string": "    @Test\n    public void testIsEmptyWithNonEmptyMap() {\n        final Map<String, String> map = new HashMap<>();\n        map.put(\"item\", \"value\");\n        assertFalse(MapUtils.isEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIsEmptyWithNull()", "name": "testIsEmptyWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithNull()", "original_string": "    @Test\n    public void testIsEmptyWithNull() {\n        final Map<Object, Object> map = null;\n        assertTrue(MapUtils.isEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIsNotEmptyWithEmptyMap()", "name": "testIsNotEmptyWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsNotEmptyWithEmptyMap()", "original_string": "    @Test\n    public void testIsNotEmptyWithEmptyMap() {\n        final Map<Object, Object> map = new HashMap<>();\n        assertFalse(MapUtils.isNotEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIsNotEmptyWithNonEmptyMap()", "name": "testIsNotEmptyWithNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsNotEmptyWithNonEmptyMap()", "original_string": "    @Test\n    public void testIsNotEmptyWithNonEmptyMap() {\n        final Map<String, String> map = new HashMap<>();\n        map.put(\"item\", \"value\");\n        assertTrue(MapUtils.isNotEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIsNotEmptyWithNull()", "name": "testIsNotEmptyWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsNotEmptyWithNull()", "original_string": "    @Test\n    public void testIsNotEmptyWithNull() {\n        final Map<Object, Object> map = null;\n        assertFalse(MapUtils.isNotEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIterableMap()", "name": "testIterableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterableMap()", "original_string": "    @Test\n    public void testIterableMap() {\n        assertThrows(NullPointerException.class, () -> MapUtils.iterableMap(null),\n                \"Should throw NullPointerException\");\n\n        final HashMap<String, String> map = new HashMap<>();\n        map.put(\"foo\", \"foov\");\n        map.put(\"bar\", \"barv\");\n        map.put(\"baz\", \"bazv\");\n        final IterableMap<String, String> iMap = MapUtils.iterableMap(map);\n        assertEquals(map, iMap);\n        assertNotSame(map, iMap);\n        final HashedMap<String, String> hMap = new HashedMap<>(map);\n        assertSame(hMap, MapUtils.iterableMap(hMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testIterableSortedMap()", "name": "testIterableSortedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterableSortedMap()", "original_string": "    @Test\n    public void testIterableSortedMap() {\n        assertThrows(NullPointerException.class, () -> MapUtils.iterableSortedMap(null),\n                \"Should throw NullPointerException\");\n\n        final TreeMap<String, String> map = new TreeMap<>();\n        map.put(\"foo\", \"foov\");\n        map.put(\"bar\", \"barv\");\n        map.put(\"baz\", \"bazv\");\n        final IterableSortedMap<String, String> iMap = MapUtils.iterableSortedMap(map);\n        assertEquals(map, iMap);\n        assertNotSame(map, iMap);\n        assertSame(iMap, MapUtils.iterableMap(iMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testLazyMap()", "name": "testLazyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLazyMap()", "original_string": "    @Test\n    public void testLazyMap() {\n        final Map<String, Integer> lazyMap = MapUtils.lazyMap(new HashMap<>(), () -> 1);\n        lazyMap.put(TWO, 2);\n\n        assertEquals(Integer.valueOf(2), lazyMap.get(TWO));\n        assertEquals(Integer.valueOf(1), lazyMap.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testLazyMapFactory()", "name": "testLazyMapFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLazyMapFactory()", "original_string": "    @Test\n    public void testLazyMapFactory() {\n        final Factory<Integer> factory = FactoryUtils.constantFactory(Integer.valueOf(5));\n        Map<Object, Object> map = MapUtils.lazyMap(new HashMap<>(), factory);\n        assertInstanceOf(LazyMap.class, map);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> MapUtils.lazyMap(new HashMap<>(), (Factory<Object>) null),\n                        \"Expecting NullPointerException for null factory\"),\n                () -> assertThrows(NullPointerException.class, () -> MapUtils.lazyMap((Map<Object, Object>) null, factory),\n                        \"Expecting NullPointerException for null map\")\n        );\n\n        final Transformer<Object, Integer> transformer = TransformerUtils.asTransformer(factory);\n        map = MapUtils.lazyMap(new HashMap<>(), transformer);\n        assertInstanceOf(LazyMap.class, map);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> MapUtils.lazyMap(new HashMap<>(), (Transformer<Object, Object>) null),\n                        \"Expecting NullPointerException for null transformer\"),\n                () -> assertThrows(NullPointerException.class, () -> MapUtils.lazyMap((Map<Object, Object>) null, transformer),\n                        \"Expecting NullPointerException for null map\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testLazyMapTransformer()", "name": "testLazyMapTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLazyMapTransformer()", "original_string": "    @Test\n    public void testLazyMapTransformer() {\n        final Map<Object, Object> map = MapUtils.lazyMap(new HashMap<>(), (Transformer<Object, Object>) mapKey -> {\n            if (mapKey instanceof String) {\n                return Integer.valueOf((String) mapKey);\n            }\n            return null;\n        });\n\n        assertEquals(0, map.size());\n        final Integer i1 = (Integer) map.get(\"5\");\n        assertEquals(Integer.valueOf(5), i1);\n        assertEquals(1, map.size());\n        final Integer i2 = (Integer) map.get(new String(new char[] {'5'}));\n        assertEquals(Integer.valueOf(5), i2);\n        assertEquals(1, map.size());\n        assertSame(i1, i2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testLazySortedMapFactory()", "name": "testLazySortedMapFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLazySortedMapFactory()", "original_string": "    @Test\n    public void testLazySortedMapFactory() {\n        final SortedMap<String, Integer> lazySortedMap = MapUtils.lazySortedMap(new TreeMap<>(), () -> 1);\n        lazySortedMap.put(TWO, 2);\n\n        assertEquals(Integer.valueOf(2), lazySortedMap.get(TWO));\n        assertEquals(Integer.valueOf(1), lazySortedMap.get(THREE));\n\n        final Set<Map.Entry<String, Integer>> entrySet = new HashSet<>();\n        entrySet.add(new AbstractMap.SimpleEntry<>(THREE, 1));\n        entrySet.add(new AbstractMap.SimpleEntry<>(TWO, 2));\n\n        assertEquals(entrySet, lazySortedMap.entrySet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testLazySortedMapTransformer()", "name": "testLazySortedMapTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLazySortedMapTransformer()", "original_string": "    @Test\n    public void testLazySortedMapTransformer() {\n        final SortedMap<String, Integer> lazySortedMap = MapUtils.lazySortedMap(new TreeMap<>(), s -> 1);\n        lazySortedMap.put(TWO, 2);\n\n        assertEquals(Integer.valueOf(2), lazySortedMap.get(TWO));\n        assertEquals(Integer.valueOf(1), lazySortedMap.get(THREE));\n\n        final Set<Map.Entry<String, Integer>> entrySet = new HashSet<>();\n        entrySet.add(new AbstractMap.SimpleEntry<>(THREE, 1));\n        entrySet.add(new AbstractMap.SimpleEntry<>(TWO, 2));\n\n        assertEquals(entrySet, lazySortedMap.entrySet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testOrderedMap()", "name": "testOrderedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrderedMap()", "original_string": "    @Test\n    public void testOrderedMap() {\n        final Map<String, String> inMap = new HashMap<>();\n        inMap.put(\"key1\", \"value1\");\n        inMap.put(\"key2\", \"value2\");\n        final Map<String, String> map = MapUtils.orderedMap(inMap);\n        assertInstanceOf(OrderedMap.class, map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testPopulateMap()", "name": "testPopulateMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopulateMap()", "original_string": "    @Test\n    public void testPopulateMap() {\n        // Setup Test Data\n        final List<String> list = new ArrayList<>();\n        list.add(\"1\");\n        list.add(\"3\");\n        list.add(\"5\");\n        list.add(\"7\");\n        list.add(\"2\");\n        list.add(\"4\");\n        list.add(\"6\");\n\n        // Now test key transform population\n        Map<Object, Object> map = new HashMap<>();\n        MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(list.size(), map.size());\n\n        for (final String element : list) {\n            assertTrue(map.containsKey(Integer.valueOf(element)));\n            assertFalse(map.containsKey(element));\n            assertTrue(map.containsValue(element));\n            assertEquals(element, map.get(Integer.valueOf(element)));\n        }\n\n        // Now test both Key-Value transform population\n        map = new HashMap<>();\n        MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n\n        assertEquals(list.size(), map.size());\n        for (final String element : list) {\n            assertTrue(map.containsKey(Integer.valueOf(element)));\n            assertFalse(map.containsKey(element));\n            assertTrue(map.containsValue(Integer.valueOf(element)));\n            assertEquals(Integer.valueOf(element), map.get(Integer.valueOf(element)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testPopulateMultiMap()", "name": "testPopulateMultiMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopulateMultiMap()", "original_string": "    @Test\n    public void testPopulateMultiMap() {\n        // Setup Test Data\n        final List<X> list = new ArrayList<>();\n        list.add(new X(1, \"x1\"));\n        list.add(new X(2, \"x2\"));\n        list.add(new X(2, \"x3\"));\n        list.add(new X(5, \"x4\"));\n        list.add(new X(5, \"x5\"));\n\n        // Now test key transform population\n        final MultiValueMap<Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<>());\n        MapUtils.populateMap(map, list, (Transformer<X, Integer>) input -> input.key, TransformerUtils.<X>nopTransformer());\n        assertEquals(list.size(), map.totalSize());\n\n        for (final X element : list) {\n            assertTrue(map.containsKey(element.key));\n            assertTrue(map.containsValue(element));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testPredicatedMap()", "name": "testPredicatedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedMap()", "original_string": "    @Test\n    public void testPredicatedMap() {\n        final Predicate<Object> p = getPredicate();\n        final Map<Object, Object> map = MapUtils.predicatedMap(new HashMap<>(), p, p);\n        assertInstanceOf(PredicatedMap.class, map);\n\n        assertThrows(NullPointerException.class, () -> MapUtils.predicatedMap(null, p, p),\n                \"Expecting NullPointerException for null map.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testPutAll_Map_array()", "name": "testPutAll_Map_array", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_Map_array()", "original_string": "    @Test\n    public void testPutAll_Map_array() {\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> MapUtils.putAll(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> MapUtils.putAll(null, new Object[0]))\n        );\n\n        Map<String, String> test = MapUtils.putAll(new HashMap<>(), org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY);\n        assertEquals(0, test.size());\n\n        // sub array\n        test = MapUtils.putAll(new HashMap<>(), new String[][] {\n                {\"RED\", \"#FF0000\"},\n                {\"GREEN\", \"#00FF00\"},\n                {\"BLUE\", \"#0000FF\"}\n        });\n        assertTrue(test.containsKey(\"RED\"));\n        assertEquals(\"#FF0000\", test.get(\"RED\"));\n        assertTrue(test.containsKey(\"GREEN\"));\n        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n        assertTrue(test.containsKey(\"BLUE\"));\n        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n        assertEquals(3, test.size());\n        assertAll(\n                () -> assertThrows(IllegalArgumentException.class, () -> MapUtils.putAll(new HashMap<>(), new String[][]{\n                        {\"RED\", \"#FF0000\"},\n                    null,\n                        {\"BLUE\", \"#0000FF\"}\n                })),\n                () -> assertThrows(IllegalArgumentException.class, () -> MapUtils.putAll(new HashMap<>(), new String[][]{\n                        {\"RED\", \"#FF0000\"},\n                        {\"GREEN\"},\n                        {\"BLUE\", \"#0000FF\"}\n                })),\n                () -> assertThrows(IllegalArgumentException.class, () -> MapUtils.putAll(new HashMap<>(), new String[][]{\n                        {\"RED\", \"#FF0000\"},\n                        {},\n                        {\"BLUE\", \"#0000FF\"}\n                }))\n        );\n\n        // flat array\n        test = MapUtils.putAll(new HashMap<>(), new String[] {\n            \"RED\", \"#FF0000\",\n            \"GREEN\", \"#00FF00\",\n            \"BLUE\", \"#0000FF\"\n        });\n        assertTrue(test.containsKey(\"RED\"));\n        assertEquals(\"#FF0000\", test.get(\"RED\"));\n        assertTrue(test.containsKey(\"GREEN\"));\n        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n        assertTrue(test.containsKey(\"BLUE\"));\n        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n        assertEquals(3, test.size());\n\n        test = MapUtils.putAll(new HashMap<>(), new String[] {\n            \"RED\", \"#FF0000\",\n            \"GREEN\", \"#00FF00\",\n            \"BLUE\", \"#0000FF\",\n            \"PURPLE\" // ignored\n        });\n        assertTrue(test.containsKey(\"RED\"));\n        assertEquals(\"#FF0000\", test.get(\"RED\"));\n        assertTrue(test.containsKey(\"GREEN\"));\n        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n        assertTrue(test.containsKey(\"BLUE\"));\n        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n        assertEquals(3, test.size());\n\n        test = MapUtils.putAll(new HashMap<>(), null);\n        assertEquals(0, test.size());\n\n        // map entry\n        test = MapUtils.putAll(new HashMap<>(), new Object[] {\n            new DefaultMapEntry<>(\"RED\", \"#FF0000\"),\n            new DefaultMapEntry<>(\"GREEN\", \"#00FF00\"),\n            new DefaultMapEntry<>(\"BLUE\", \"#0000FF\")\n        });\n        assertTrue(test.containsKey(\"RED\"));\n        assertEquals(\"#FF0000\", test.get(\"RED\"));\n        assertTrue(test.containsKey(\"GREEN\"));\n        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n        assertTrue(test.containsKey(\"BLUE\"));\n        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n        assertEquals(3, test.size());\n\n        // key value\n        test = MapUtils.putAll(new HashMap<>(), new Object[] {\n            new DefaultKeyValue<>(\"RED\", \"#FF0000\"),\n            new DefaultKeyValue<>(\"GREEN\", \"#00FF00\"),\n            new DefaultKeyValue<>(\"BLUE\", \"#0000FF\")\n        });\n        assertTrue(test.containsKey(\"RED\"));\n        assertEquals(\"#FF0000\", test.get(\"RED\"));\n        assertTrue(test.containsKey(\"GREEN\"));\n        assertEquals(\"#00FF00\", test.get(\"GREEN\"));\n        assertTrue(test.containsKey(\"BLUE\"));\n        assertEquals(\"#0000FF\", test.get(\"BLUE\"));\n        assertEquals(3, test.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testSafeAddToMap()", "name": "testSafeAddToMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSafeAddToMap()", "original_string": "    @Test\n    public void testSafeAddToMap() {\n\n        final Map<String, Object> inMap = new HashMap<>();\n\n        MapUtils.safeAddToMap(inMap, \"key1\", \"value1\");\n        MapUtils.safeAddToMap(inMap, \"key2\", null);\n        assertEquals(\"value1\", inMap.get(\"key1\"));\n        assertEquals(StringUtils.EMPTY, inMap.get(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        final HashMap<Object, Object> map = new HashMap<>();\n        map.put(\"A\", \"1\");\n        map.put(\"B\", \"2\");\n        assertEquals(2, MapUtils.size(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testSize0()", "name": "testSize0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize0()", "original_string": "    @Test\n    public void testSize0() {\n        assertEquals(0, MapUtils.size(new HashMap<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testSizeNull()", "name": "testSizeNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeNull()", "original_string": "    @Test\n    public void testSizeNull() {\n        assertEquals(0, MapUtils.size(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testToProperties()", "name": "testToProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToProperties()", "original_string": "    @Test\n    public void testToProperties() {\n        final Map<String, String> in = new HashMap<>();\n        in.put(\"key1\", \"A\");\n        in.put(\"key2\", \"B\");\n        in.put(\"key3\", \"C\");\n\n        final Properties out =  MapUtils.toProperties(in);\n\n        assertEquals(in.get(\"key1\"), out.get(\"key1\"));\n        assertEquals(in.get(\"key2\"), out.get(\"key2\"));\n        assertEquals(in.get(\"key3\"), out.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testToPropertiesEmpty()", "name": "testToPropertiesEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToPropertiesEmpty()", "original_string": "    @Test\n    public void testToPropertiesEmpty() {\n        final Map<String, String> in = null;\n        final Properties out =  MapUtils.toProperties(in);\n\n        assertEquals(out.size(), 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testTransformedMap()", "name": "testTransformedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedMap()", "original_string": "    @Test\n    public void testTransformedMap() {\n        final Map<Long, Long> map = new HashMap<>();\n\n        final Map<Long, Long> transformedMap = MapUtils.transformedMap(map, i -> i + 1, i -> i + 10);\n        transformedMap.put(1L, 100L);\n\n        final Set<Map.Entry<Long, Long>> entrySet = new HashSet<>();\n        entrySet.add(new AbstractMap.SimpleEntry<>(2L, 110L));\n\n        assertEquals(entrySet, transformedMap.entrySet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testTransformedSortedMap()", "name": "testTransformedSortedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedSortedMap()", "original_string": "    @Test\n    public void testTransformedSortedMap() {\n        final SortedMap<Long, Long> sortedMap = new TreeMap<>();\n\n        final SortedMap<Long, Long> transformedSortedMap = MapUtils.transformedSortedMap(sortedMap, i -> i + 1, i -> i + 10);\n        transformedSortedMap.put(2L, 200L);\n        transformedSortedMap.put(1L, 100L);\n\n        final Set<Map.Entry<Long, Long>> entrySet = new HashSet<>();\n        entrySet.add(new AbstractMap.SimpleEntry<>(2L, 110L));\n        entrySet.add(new AbstractMap.SimpleEntry<>(3L, 210L));\n\n        assertEquals(entrySet, transformedSortedMap.entrySet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testUnmodifiableMap()", "name": "testUnmodifiableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableMap()", "original_string": "    @Test\n    public void testUnmodifiableMap() {\n        final Exception exception = assertThrows(UnsupportedOperationException.class, () -> MapUtils.unmodifiableMap(new HashMap<>()).clear());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testUnmodifiableSortedMap()", "name": "testUnmodifiableSortedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableSortedMap()", "original_string": "    @Test\n    public void testUnmodifiableSortedMap() {\n        final Exception exception = assertThrows(UnsupportedOperationException.class, () -> MapUtils.unmodifiableSortedMap(new TreeMap<>()).clear());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrint()", "name": "testVerbosePrint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrint()", "original_string": "    @Test\n    public void testVerbosePrint() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String LABEL = \"Print Map\";\n        final String INDENT = \"    \";\n\n        outPrint.println(LABEL + \" = \");\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"0 = A\");\n        outPrint.println(INDENT + \"1 = \");\n        outPrint.println(INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + \"2 = B\");\n        outPrint.println(INDENT + INDENT + \"3 = C\");\n        outPrint.println(INDENT + \"}\");\n        outPrint.println(INDENT + \"7 = (this Map)\");\n        outPrint.println(\"}\");\n\n        final String EXPECTED_OUT = out.toString();\n\n        out.reset();\n\n        final Map<Integer, String> inner = new TreeMap<>(); // treeMap guarantees order across JDKs for test\n        inner.put(2, \"B\");\n        inner.put(3, \"C\");\n\n        final Map<Integer, Object> outer = new TreeMap<>();\n        outer.put(1, inner);\n        outer.put(0, \"A\");\n        outer.put(7, outer);\n\n        MapUtils.verbosePrint(outPrint, \"Print Map\", outer);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrintNullKey()", "name": "testVerbosePrintNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrintNullKey()", "original_string": "    @Test\n    public void testVerbosePrintNullKey() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Object, String> map = new HashMap<>();\n        map.put(null, \"A\");\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"null = A\");\n        outPrint.println(\"}\");\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.verbosePrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrintNullKeyToMap1()", "name": "testVerbosePrintNullKeyToMap1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrintNullKeyToMap1()", "original_string": "    @Test\n    public void testVerbosePrintNullKeyToMap1() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Object, Map<?, ?>> map = new HashMap<>();\n        map.put(null, map);\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"null = (this Map)\");\n        outPrint.println(\"}\");\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.verbosePrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrintNullKeyToMap2()", "name": "testVerbosePrintNullKeyToMap2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrintNullKeyToMap2()", "original_string": "    @Test\n    public void testVerbosePrintNullKeyToMap2() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Object, Object> map = new HashMap<>();\n        final Map<Object, Object> map2 = new HashMap<>();\n        map.put(null, map2);\n        map2.put(\"2\", \"B\");\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"null = \");\n        outPrint.println(INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + \"2 = B\");\n        outPrint.println(INDENT + \"}\");\n        outPrint.println(\"}\");\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.verbosePrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrintNullLabel()", "name": "testVerbosePrintNullLabel", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrintNullLabel()", "original_string": "    @Test\n    public void testVerbosePrintNullLabel() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String INDENT = \"    \";\n\n        final Map<Integer, String> map = new TreeMap<>(); // treeMap guarantees order across JDKs for test\n        map.put(2, \"B\");\n        map.put(3, \"C\");\n        map.put(4, null);\n\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"2 = B\");\n        outPrint.println(INDENT + \"3 = C\");\n        outPrint.println(INDENT + \"4 = null\");\n        outPrint.println(\"}\");\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.verbosePrint(outPrint, null, map);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrintNullLabelAndMap()", "name": "testVerbosePrintNullLabelAndMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrintNullLabelAndMap()", "original_string": "    @Test\n    public void testVerbosePrintNullLabelAndMap() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        outPrint.println(\"null\");\n        final String EXPECTED_OUT = out.toString();\n        out.reset();\n\n        MapUtils.verbosePrint(outPrint, null, null);\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrintNullStream()", "name": "testVerbosePrintNullStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrintNullStream()", "original_string": "    @Test\n    public void testVerbosePrintNullStream() {\n        assertThrows(NullPointerException.class, () -> MapUtils.verbosePrint(null, \"Map\", new HashMap<>()),\n                \"Should generate NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest.[void]testVerbosePrintSelfReference()", "name": "testVerbosePrintSelfReference", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerbosePrintSelfReference()", "original_string": "    @Test\n    public void testVerbosePrintSelfReference() {\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final PrintStream outPrint = new PrintStream(out);\n\n        final String LABEL = \"Print Map\";\n        final String INDENT = \"    \";\n\n        final Map<Integer, Object> grandfather = new TreeMap<>(); // treeMap guarantees order across JDKs for test\n        final Map<Integer, Object> father = new TreeMap<>();\n        final Map<Integer, Object> son    = new TreeMap<>();\n\n        grandfather.put(0, \"A\");\n        grandfather.put(1, father);\n\n        father.put(2, \"B\");\n        father.put(3, grandfather);\n        father.put(4, son);\n\n        son.put(5, \"C\");\n        son.put(6, grandfather);\n        son.put(7, father);\n\n        outPrint.println(LABEL + \" = \");\n        outPrint.println(\"{\");\n        outPrint.println(INDENT + \"0 = A\");\n        outPrint.println(INDENT + \"1 = \");\n        outPrint.println(INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + \"2 = B\");\n        outPrint.println(INDENT + INDENT + \"3 = (ancestor[0] Map)\");\n        outPrint.println(INDENT + INDENT + \"4 = \");\n        outPrint.println(INDENT + INDENT + \"{\");\n        outPrint.println(INDENT + INDENT + INDENT + \"5 = C\");\n        outPrint.println(INDENT + INDENT + INDENT + \"6 = (ancestor[1] Map)\");\n        outPrint.println(INDENT + INDENT + INDENT + \"7 = (ancestor[0] Map)\");\n        outPrint.println(INDENT + INDENT + \"}\");\n        outPrint.println(INDENT + \"}\");\n        outPrint.println(\"}\");\n\n        final String EXPECTED_OUT = out.toString();\n\n        out.reset();\n        MapUtils.verbosePrint(outPrint, \"Print Map\", grandfather);\n\n        assertEquals(EXPECTED_OUT, out.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java", "class_name": "MapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MapUtilsTest.java.MapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest.[void]testAlreadyReadableMap()", "name": "testAlreadyReadableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAlreadyReadableMap()", "original_string": "    @Test\n    public void testAlreadyReadableMap() {\n        final HashedMap<String, Integer> hashedMap = new HashedMap<>();\n        assertSame(hashedMap, SplitMapUtils.readableMap(hashedMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java", "class_name": "SplitMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest.[void]testAlreadyWritableMap()", "name": "testAlreadyWritableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAlreadyWritableMap()", "original_string": "    @Test\n    public void testAlreadyWritableMap() {\n        final HashedMap<String, String> hashedMap = new HashedMap<>();\n        assertSame(hashedMap, SplitMapUtils.writableMap(hashedMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java", "class_name": "SplitMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest.[void]testReadableMap()", "name": "testReadableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReadableMap()", "original_string": "    @Test\n    public void testReadableMap() {\n        final IterableMap<String, Integer> map = SplitMapUtils.readableMap(transformedMap);\n\n        // basic\n        for (int i = 0; i < 10; i++) {\n            assertFalse(map.containsValue(String.valueOf(i)));\n            assertEquals(i, map.get(String.valueOf(i)).intValue());\n        }\n\n        // mapIterator\n        final MapIterator<String, Integer> it = map.mapIterator();\n        while (it.hasNext()) {\n            final String k = it.next();\n            assertEquals(k, it.getKey());\n            assertEquals(Integer.valueOf(k), it.getValue());\n        }\n\n        // unmodifiable\n        assertInstanceOf(Unmodifiable.class, map);\n\n        // check individual operations\n        int sz = map.size();\n\n        attemptPutOperation(map::clear);\n\n        assertEquals(sz, map.size());\n\n        attemptPutOperation(() -> map.put(\"foo\", 100));\n\n        final HashMap<String, Integer> m = new HashMap<>();\n        m.put(\"foo\", 100);\n        m.put(\"bar\", 200);\n        m.put(\"baz\", 300);\n        attemptPutOperation(() -> map.putAll(m));\n\n        // equals, hashCode\n        final IterableMap<String, Integer> other = SplitMapUtils.readableMap(transformedMap);\n        assertEquals(other, map);\n        assertEquals(other.hashCode(), map.hashCode());\n\n        // remove\n        for (int i = 0; i < 10; i++) {\n            assertEquals(i, map.remove(String.valueOf(i)).intValue());\n            assertEquals(--sz, map.size());\n        }\n        assertTrue(map.isEmpty());\n        assertSame(map, SplitMapUtils.readableMap(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java", "class_name": "SplitMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest.[void]testWritableMap()", "name": "testWritableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testWritableMap()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testWritableMap() {\n        final Map<String, String> map = SplitMapUtils.writableMap(transformedMap);\n        attemptGetOperation(() -> map.get(null));\n        attemptGetOperation(map::entrySet);\n        attemptGetOperation(map::keySet);\n        attemptGetOperation(map::values);\n        attemptGetOperation(map::size);\n        attemptGetOperation(map::isEmpty);\n        attemptGetOperation(() -> map.containsKey(null));\n        attemptGetOperation(() -> map.containsValue(null));\n        attemptGetOperation(() -> map.remove(null));\n\n        // equals, hashCode\n        final Map<String, String> other = SplitMapUtils.writableMap(transformedMap);\n        assertEquals(other, map);\n        assertEquals(other.hashCode(), map.hashCode());\n\n        // put\n        int sz = backingMap.size();\n        assertFalse(backingMap.containsKey(\"foo\"));\n        map.put(\"new\", \"66\");\n        assertEquals(++sz, backingMap.size());\n\n        // putAll\n        final Map<String, String> more = new HashMap<>();\n        more.put(\"foo\", \"77\");\n        more.put(\"bar\", \"88\");\n        more.put(\"baz\", \"99\");\n        map.putAll(more);\n        assertEquals(sz + more.size(), backingMap.size());\n\n        // clear\n        map.clear();\n        assertTrue(backingMap.isEmpty());\n        assertSame(map, SplitMapUtils.writableMap((Put<String, String>) map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java", "class_name": "SplitMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java.SplitMapUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java.MultiMapUtils_getCollectionTest.[void]testGetCollection_WithNonNullMap()", "name": "testGetCollection_WithNonNullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetCollection_WithNonNullMap()", "original_string": "    @Test\n    void testGetCollection_WithNonNullMap() {\n        MultiValuedMap<String, String> mockMap = mock(MultiValuedMap.class);\n        Collection<String> mockCollection = mock(Collection.class);\n        when(mockMap.get(\"key\")).thenReturn(mockCollection);\n\n        Collection<String> result = MultiMapUtils.getCollection(mockMap, \"key\");\n\n        assertNotNull(result);\n        assertEquals(mockCollection, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java", "class_name": "MultiMapUtils_getCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java.MultiMapUtils_getCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java.MultiMapUtils_getCollectionTest.[void]testGetCollection_WithNullMap()", "name": "testGetCollection_WithNullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetCollection_WithNullMap()", "original_string": "    @Test\n    void testGetCollection_WithNullMap() {\n        Collection<String> result = MultiMapUtils.getCollection(null, \"key\");\n\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java", "class_name": "MultiMapUtils_getCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java.MultiMapUtils_getCollectionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest.[void]testIsEqualSet_SameReference()", "name": "testIsEqualSet_SameReference", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualSet_SameReference()", "original_string": "    @Test\n    public void testIsEqualSet_SameReference() {\n        Collection<?> set1 = new HashSet<>(Arrays.asList(1, 2, 3));\n        assertTrue(SetUtils.isEqualSet(set1, set1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "class_name": "SetUtils_isEqualSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest.[void]testIsEqualSet_NullAndNonNull()", "name": "testIsEqualSet_NullAndNonNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualSet_NullAndNonNull()", "original_string": "    @Test\n    public void testIsEqualSet_NullAndNonNull() {\n        Collection<?> set1 = null;\n        Collection<?> set2 = new HashSet<>(Arrays.asList(1, 2, 3));\n        assertFalse(SetUtils.isEqualSet(set1, set2));\n        assertFalse(SetUtils.isEqualSet(set2, set1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "class_name": "SetUtils_isEqualSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest.[void]testIsEqualSet_DifferentSizes()", "name": "testIsEqualSet_DifferentSizes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualSet_DifferentSizes()", "original_string": "    @Test\n    public void testIsEqualSet_DifferentSizes() {\n        Collection<?> set1 = new HashSet<>(Arrays.asList(1, 2, 3));\n        Collection<?> set2 = new HashSet<>(Arrays.asList(1, 2));\n        assertFalse(SetUtils.isEqualSet(set1, set2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "class_name": "SetUtils_isEqualSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest.[void]testIsEqualSet_EqualSets()", "name": "testIsEqualSet_EqualSets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualSet_EqualSets()", "original_string": "    @Test\n    public void testIsEqualSet_EqualSets() {\n        Collection<?> set1 = new HashSet<>(Arrays.asList(1, 2, 3));\n        Collection<?> set2 = new HashSet<>(Arrays.asList(3, 2, 1));\n        assertTrue(SetUtils.isEqualSet(set1, set2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "class_name": "SetUtils_isEqualSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest.[void]testIsEqualSet_DifferentSets()", "name": "testIsEqualSet_DifferentSets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualSet_DifferentSets()", "original_string": "    @Test\n    public void testIsEqualSet_DifferentSets() {\n        Collection<?> set1 = new HashSet<>(Arrays.asList(1, 2, 3));\n        Collection<?> set2 = new HashSet<>(Arrays.asList(1, 2, 4));\n        assertFalse(SetUtils.isEqualSet(set1, set2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "class_name": "SetUtils_isEqualSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java.SetUtils_isEqualSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testArrayIterator()", "name": "testArrayIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testArrayIterator()", "original_string": "    @Test\n    public void testArrayIterator() {\n        final Object[] objArray = { \"a\", \"b\", \"c\" };\n        ResettableIterator<Object> iterator = IteratorUtils.arrayIterator(objArray);\n        assertEquals(\"a\", iterator.next());\n        assertEquals(\"b\", iterator.next());\n        iterator.reset();\n        assertEquals(\"a\", iterator.next());\n        assertAll(\n                () -> assertThrows(IllegalArgumentException.class, () -> IteratorUtils.arrayIterator(Integer.valueOf(0)),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.arrayIterator((Object[]) null),\n                        \"Expecting NullPointerException\")\n        );\n\n        iterator = IteratorUtils.arrayIterator(objArray, 1);\n        assertEquals(\"b\", iterator.next());\n\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(objArray, -1),\n                \"Expecting IndexOutOfBoundsException\");\n\n        iterator = IteratorUtils.arrayIterator(objArray, 3);\n        assertFalse(iterator.hasNext());\n        iterator.reset();\n\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(objArray, 4),\n                \"Expecting IndexOutOfBoundsException\");\n\n        iterator = IteratorUtils.arrayIterator(objArray, 2, 3);\n        assertEquals(\"c\", iterator.next());\n        assertAll(\n                () -> assertThrows(ArrayIndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(objArray, 2, 4),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(ArrayIndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(objArray, -1, 1),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> IteratorUtils.arrayIterator(objArray, 2, 1),\n                        \"Expecting IllegalArgumentException\")\n        );\n\n        final int[] intArray = { 0, 1, 2 };\n        iterator = IteratorUtils.arrayIterator(intArray);\n        assertEquals(0, iterator.next());\n        assertEquals(1, iterator.next());\n        iterator.reset();\n        assertEquals(0, iterator.next());\n\n        iterator = IteratorUtils.arrayIterator(intArray, 1);\n        assertEquals(1, iterator.next());\n\n        assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(intArray, -1),\n                \"Expecting IndexOutOfBoundsException\");\n\n        iterator = IteratorUtils.arrayIterator(intArray, 3);\n        assertFalse(iterator.hasNext());\n        iterator.reset();\n\n        assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(intArray, 4),\n                \"Expecting IndexOutOfBoundsException\");\n\n        iterator = IteratorUtils.arrayIterator(intArray, 2, 3);\n        assertEquals(2, iterator.next());\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(intArray, 2, 4),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayIterator(intArray, -1, 1),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> IteratorUtils.arrayIterator(intArray, 2, 1),\n                        \"Expecting IllegalArgumentException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testArrayListIterator()", "name": "testArrayListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testArrayListIterator()", "original_string": "    @Test\n    public void testArrayListIterator() {\n        final Object[] objArray = { \"a\", \"b\", \"c\", \"d\" };\n        ResettableListIterator<Object> iterator = IteratorUtils.arrayListIterator(objArray);\n        assertFalse(iterator.hasPrevious());\n        assertEquals(-1, iterator.previousIndex());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(\"a\", iterator.next());\n        assertEquals(\"a\", iterator.previous());\n        assertEquals(\"a\", iterator.next());\n        assertEquals(0, iterator.previousIndex());\n        assertEquals(1, iterator.nextIndex());\n        assertEquals(\"b\", iterator.next());\n        assertEquals(\"c\", iterator.next());\n        assertEquals(\"d\", iterator.next());\n        assertEquals(4, iterator.nextIndex()); // size of list\n        assertEquals(3, iterator.previousIndex());\n        assertAll(\n                () -> assertThrows(IllegalArgumentException.class, () -> IteratorUtils.arrayListIterator(Integer.valueOf(0)),\n                        \"Expecting IllegalArgumentException\"),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.arrayListIterator((Object[]) null),\n                        \"Expecting NullPointerException\")\n        );\n\n        iterator = IteratorUtils.arrayListIterator(objArray, 1);\n        assertEquals(-1, iterator.previousIndex());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(\"b\", iterator.next());\n        assertEquals(0, iterator.previousIndex());\n        assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(objArray, -1),\n                \"Expecting IndexOutOfBoundsException.\");\n\n        iterator = IteratorUtils.arrayListIterator(objArray, 3);\n        assertTrue(iterator.hasNext());\n\n        final ResettableListIterator<Object> finalIterator = iterator;\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> finalIterator.previous(),\n                        \"Expecting NoSuchElementException.\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(objArray, 5),\n                        \"Expecting IndexOutOfBoundsException.\")\n        );\n\n        iterator = IteratorUtils.arrayListIterator(objArray, 2, 3);\n        assertEquals(\"c\", iterator.next());\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(objArray, 2, 5),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(objArray, -1, 1),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> IteratorUtils.arrayListIterator(objArray, 2, 1),\n                        \"Expecting IllegalArgumentException\")\n        );\n\n        final int[] intArray = { 0, 1, 2 };\n        iterator = IteratorUtils.arrayListIterator(intArray);\n        assertEquals(iterator.previousIndex(), -1);\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(0, iterator.next());\n        assertEquals(0, iterator.previousIndex());\n        assertEquals(1, iterator.nextIndex());\n        assertEquals(1, iterator.next());\n        assertEquals(1, iterator.previousIndex());\n        assertEquals(2, iterator.nextIndex());\n        assertEquals(1, iterator.previous());\n        assertEquals(1, iterator.next());\n\n        iterator = IteratorUtils.arrayListIterator(intArray, 1);\n        assertEquals(-1, iterator.previousIndex());\n        assertFalse(iterator.hasPrevious());\n        assertEquals(0, iterator.nextIndex());\n        assertEquals(1, iterator.next());\n        assertEquals(1, iterator.previous());\n        assertEquals(1, iterator.next());\n        assertEquals(0, iterator.previousIndex());\n        assertEquals(1, iterator.nextIndex());\n        assertEquals(2, iterator.next());\n        assertEquals(1, iterator.previousIndex());\n        assertEquals(2, iterator.nextIndex());\n        assertEquals(2, iterator.previous());\n        assertEquals(0, iterator.previousIndex());\n        assertEquals(1, iterator.nextIndex());\n\n        assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(intArray, -1),\n                \"Expecting IndexOutOfBoundsException\");\n\n        iterator = IteratorUtils.arrayListIterator(intArray, 3);\n        assertFalse(iterator.hasNext());\n\n        assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(intArray, 4),\n                \"Expecting IndexOutOfBoundsException\");\n\n        iterator = IteratorUtils.arrayListIterator(intArray, 2, 3);\n        assertFalse(iterator.hasPrevious());\n        assertEquals(-1, iterator.previousIndex());\n        assertEquals(2, iterator.next());\n        assertTrue(iterator.hasPrevious());\n        assertFalse(iterator.hasNext());\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(intArray, 2, 4),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.arrayListIterator(intArray, -1, 1),\n                        \"Expecting IndexOutOfBoundsException\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> IteratorUtils.arrayListIterator(intArray, 2, 1),\n                        \"Expecting IllegalArgumentException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testAsEnumerationNull()", "name": "testAsEnumerationNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsEnumerationNull()", "original_string": "    @Test\n    public void testAsEnumerationNull() {\n        assertThrows(NullPointerException.class, () -> IteratorUtils.asEnumeration(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testAsIterable()", "name": "testAsIterable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsIterable()", "original_string": "    @Test\n    public void testAsIterable() {\n        final List<Integer> list = new ArrayList<>();\n        list.add(Integer.valueOf(0));\n        list.add(Integer.valueOf(1));\n        list.add(Integer.valueOf(2));\n        final Iterator<Integer> iterator = list.iterator();\n\n        final Iterable<Integer> iterable = IteratorUtils.asIterable(iterator);\n        int expected = 0;\n        for (final Integer actual : iterable) {\n            assertEquals(expected, actual.intValue());\n            ++expected;\n        }\n        // insure iteration occurred\n        assertTrue(expected > 0);\n\n        // single use iterator\n        assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(), \"should not be able to iterate twice\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testAsIterableNull()", "name": "testAsIterableNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsIterableNull()", "original_string": "    @Test\n    public void testAsIterableNull() {\n        assertThrows(NullPointerException.class, () -> IteratorUtils.asIterable(null),\n                \"Expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testAsIterator()", "name": "testAsIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsIterator()", "original_string": "    @Test\n    public void testAsIterator() {\n        final Vector<String> vector = new Vector<>();\n        vector.addElement(\"zero\");\n        vector.addElement(\"one\");\n        final Enumeration<String> en = vector.elements();\n        assertTrue(IteratorUtils.asIterator(en) instanceof Iterator, \"create instance fail\");\n        assertThrows(NullPointerException.class, () -> IteratorUtils.asIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testAsIteratorNull()", "name": "testAsIteratorNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsIteratorNull()", "original_string": "    @Test\n    public void testAsIteratorNull() {\n        final Collection coll = new ArrayList();\n        coll.add(\"test\");\n        final Vector<String> vector = new Vector<>();\n        vector.addElement(\"test\");\n        vector.addElement(\"one\");\n        final Enumeration<String> en = vector.elements();\n        assertTrue(IteratorUtils.asIterator(en, coll) instanceof Iterator, \"create instance fail\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.asIterator(null, coll)),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.asIterator(en, null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testAsMultipleIterable()", "name": "testAsMultipleIterable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsMultipleIterable()", "original_string": "    @Test\n    public void testAsMultipleIterable() {\n        final List<Integer> list = new ArrayList<>();\n        list.add(Integer.valueOf(0));\n        list.add(Integer.valueOf(1));\n        list.add(Integer.valueOf(2));\n        final Iterator<Integer> iterator = list.iterator();\n\n        final Iterable<Integer> iterable = IteratorUtils.asMultipleUseIterable(iterator);\n        int expected = 0;\n        for (final Integer actual : iterable) {\n            assertEquals(expected, actual.intValue());\n            ++expected;\n        }\n        // insure iteration occurred\n        assertTrue(expected > 0);\n\n        // multiple use iterator\n        expected = 0;\n        for (final Integer actual : iterable) {\n            assertEquals(expected, actual.intValue());\n            ++expected;\n        }\n        // insure iteration occurred\n        assertTrue(expected > 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testAsMultipleIterableNull()", "name": "testAsMultipleIterableNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsMultipleIterableNull()", "original_string": "    @Test\n    public void testAsMultipleIterableNull() {\n        assertThrows(NullPointerException.class, () -> IteratorUtils.asMultipleUseIterable(null),\n                \"Expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testChainedIterator()", "name": "testChainedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChainedIterator()", "original_string": "    @Test\n    public void testChainedIterator() {\n        final ArrayList arrayList = new ArrayList();\n        final Iterator iterator = arrayList.iterator();\n        assertTrue(IteratorUtils.chainedIterator(iterator) instanceof Iterator, \"create instance fail\");\n        final Collection<Iterator<?>> coll = new ArrayList();\n        assertTrue(IteratorUtils.chainedIterator(coll) instanceof Iterator, \"create instance fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testCollatedIterator()", "name": "testCollatedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollatedIterator()", "original_string": "    @Test\n    public void testCollatedIterator() {\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.collatedIterator(null, collectionOdd.iterator(), null),\n                        \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.collatedIterator(null, null, collectionEven.iterator()),\n                        \"expecting NullPointerException\")\n        );\n\n        // natural ordering\n        Iterator<Integer> it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(),\n                collectionEven.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        assertEquals(12, result.size());\n\n        final List<Integer> combinedList = new ArrayList<>(collectionOdd);\n        combinedList.addAll(collectionEven);\n        Collections.sort(combinedList);\n\n        assertEquals(combinedList, result);\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), emptyCollection.iterator());\n        result = IteratorUtils.toList(it);\n        assertEquals(collectionOdd, result);\n\n        final Comparator<Integer> reverseComparator = ComparatorUtils\n                .reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse(collectionOdd);\n        Collections.reverse(collectionEven);\n        Collections.reverse(combinedList);\n\n        it = IteratorUtils.collatedIterator(reverseComparator, collectionOdd.iterator(), collectionEven.iterator());\n        result = IteratorUtils.toList(it);\n        assertEquals(combinedList, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests methods collatedIterator(...)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testCollatedIteratorCollectionNull()", "name": "testCollatedIteratorCollectionNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollatedIteratorCollectionNull()", "original_string": "    @Test\n    public void testCollatedIteratorCollectionNull() {\n        final Collection<Iterator<?>> coll = new ArrayList<>();\n        coll.add(collectionOdd.iterator());\n        // natural ordering\n        final Iterator<?> it = IteratorUtils.collatedIterator(null, coll);\n        final List<?> result = IteratorUtils.toList(it);\n        assertEquals(6, result.size());\n        assertThrows(NullPointerException.class, () -> IteratorUtils.collatedIterator(null, (Collection<Iterator<?>>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testCollatedIteratorNull()", "name": "testCollatedIteratorNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollatedIteratorNull()", "original_string": "    @Test\n    public void testCollatedIteratorNull() {\n        final ArrayList arrayList = new ArrayList();\n        // natural ordering\n        Iterator<Integer> it = IteratorUtils.collatedIterator(null, collectionOdd.iterator(), collectionOdd.iterator(),\n                collectionOdd.iterator());\n\n        List<Integer> result = IteratorUtils.toList(it);\n        assertEquals(18, result.size());\n\n        it = IteratorUtils.collatedIterator(null, collectionOdd.iterator());\n        result = IteratorUtils.toList(it);\n        assertEquals(collectionOdd, result);\n\n        final Comparator<Integer> reverseComparator = ComparatorUtils\n                .reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        Collections.reverse(collectionOdd);\n\n        it = IteratorUtils.collatedIterator(reverseComparator, collectionOdd.iterator());\n        result = IteratorUtils.toList(it);\n        assertEquals(collectionOdd, result);\n        assertThrows(NullPointerException.class, () -> IteratorUtils.collatedIterator(null, arrayList.iterator(), arrayList.listIterator(), null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testEmptyIterator()", "name": "testEmptyIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIterator()", "original_string": "    @Test\n    public void testEmptyIterator() {\n        assertSame(EmptyIterator.INSTANCE, IteratorUtils.EMPTY_ITERATOR);\n        assertSame(EmptyIterator.RESETTABLE_INSTANCE, IteratorUtils.EMPTY_ITERATOR);\n        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof Iterator);\n        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof ResettableIterator);\n        assertFalse(IteratorUtils.EMPTY_ITERATOR instanceof OrderedIterator);\n        assertFalse(IteratorUtils.EMPTY_ITERATOR instanceof ListIterator);\n        assertFalse(IteratorUtils.EMPTY_ITERATOR instanceof MapIterator);\n        assertFalse(IteratorUtils.EMPTY_ITERATOR.hasNext());\n        IteratorUtils.EMPTY_ITERATOR.reset();\n        assertSame(IteratorUtils.EMPTY_ITERATOR, IteratorUtils.EMPTY_ITERATOR);\n        assertSame(IteratorUtils.EMPTY_ITERATOR, IteratorUtils.emptyIterator());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_ITERATOR.next()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_ITERATOR.remove())\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest empty iterator\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testEmptyListIterator()", "name": "testEmptyListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyListIterator()", "original_string": "    @Test\n    public void testEmptyListIterator() {\n        assertSame(EmptyListIterator.INSTANCE, IteratorUtils.EMPTY_LIST_ITERATOR);\n        assertSame(EmptyListIterator.RESETTABLE_INSTANCE, IteratorUtils.EMPTY_LIST_ITERATOR);\n        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);\n        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);\n        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);\n        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);\n        assertFalse(IteratorUtils.EMPTY_LIST_ITERATOR instanceof MapIterator);\n        assertFalse(IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());\n        assertEquals(0, IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());\n        assertEquals(-1, IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());\n        IteratorUtils.EMPTY_LIST_ITERATOR.reset();\n        assertSame(IteratorUtils.EMPTY_LIST_ITERATOR, IteratorUtils.EMPTY_LIST_ITERATOR);\n        assertSame(IteratorUtils.EMPTY_LIST_ITERATOR, IteratorUtils.emptyListIterator());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_LIST_ITERATOR.next()),\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_LIST_ITERATOR.previous()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_LIST_ITERATOR.remove()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.emptyListIterator().set(null)),\n                () -> assertThrows(UnsupportedOperationException.class, () -> IteratorUtils.emptyListIterator().add(null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest empty list iterator\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testEmptyMapIterator()", "name": "testEmptyMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyMapIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyMapIterator() {\n        assertSame(EmptyMapIterator.INSTANCE, IteratorUtils.EMPTY_MAP_ITERATOR);\n        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof Iterator);\n        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof MapIterator);\n        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResettableIterator);\n        assertFalse(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ListIterator);\n        assertFalse(IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedIterator);\n        assertFalse(IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedMapIterator);\n        assertFalse(IteratorUtils.EMPTY_MAP_ITERATOR.hasNext());\n        ((ResettableIterator<Object>) IteratorUtils.EMPTY_MAP_ITERATOR).reset();\n        assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.EMPTY_MAP_ITERATOR);\n        assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.emptyMapIterator());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_MAP_ITERATOR.next()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_MAP_ITERATOR.remove()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_MAP_ITERATOR.getKey()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_MAP_ITERATOR.getValue()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_MAP_ITERATOR.setValue(null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest empty map iterator\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testEmptyOrderedIterator()", "name": "testEmptyOrderedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyOrderedIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyOrderedIterator() {\n        assertSame(EmptyOrderedIterator.INSTANCE, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);\n        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);\n        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResettableIterator);\n        assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ListIterator);\n        assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof MapIterator);\n        assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());\n        assertFalse(IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());\n        ((ResettableIterator<Object>) IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();\n        assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n        assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.emptyOrderedIterator());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_ORDERED_ITERATOR.next()),\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_ORDERED_ITERATOR.previous()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_ORDERED_ITERATOR.remove())\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest empty map iterator\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testEmptyOrderedMapIterator()", "name": "testEmptyOrderedMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyOrderedMapIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyOrderedMapIterator() {\n        assertSame(EmptyOrderedMapIterator.INSTANCE, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);\n        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);\n        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);\n        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResettableIterator);\n        assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ListIterator);\n        assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());\n        assertFalse(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());\n        ((ResettableIterator<Object>) IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();\n        assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n        assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.emptyOrderedMapIterator());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.next()),\n                () -> assertThrows(NoSuchElementException.class, () -> IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.previous()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.remove()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getKey()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getValue()),\n                () -> assertThrows(IllegalStateException.class, () -> IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.setValue(null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest empty map iterator\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testFilteredIterator()", "name": "testFilteredIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilteredIterator()", "original_string": "    @Test\n    public void testFilteredIterator() {\n        final ArrayList arrayList = new ArrayList();\n        final Iterator iterator = arrayList.iterator();\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.filteredIterator(iterator, null)),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.filteredIterator(null, null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testFilteredListIterator()", "name": "testFilteredListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilteredListIterator()", "original_string": "    @Test\n    public void testFilteredListIterator() {\n        final List arrayList = new ArrayList();\n        arrayList.add(\"test\");\n        final Predicate predicate = INSTANCE;\n        assertTrue(IteratorUtils.filteredListIterator(arrayList.listIterator(), predicate) instanceof ListIterator,\n                \"create instance fail\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.filteredListIterator(null, predicate)),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.filteredListIterator(arrayList.listIterator(), null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testFind()", "name": "testFind", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFind()", "original_string": "    @Test\n    public void testFind() {\n        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n        Integer test = IteratorUtils.find(iterableA.iterator(), testPredicate);\n        assertEquals(4, (int) test);\n        testPredicate = equalPredicate((Number) 45);\n        test = IteratorUtils.find(iterableA.iterator(), testPredicate);\n        assertNull(test);\n        assertNull(IteratorUtils.find(null, testPredicate));\n\n        assertThrows(NullPointerException.class, () -> IteratorUtils.find(iterableA.iterator(), null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testFirstFromIterator()", "name": "testFirstFromIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFirstFromIterator()", "original_string": "    @Test\n    public void testFirstFromIterator() throws Exception {\n        // Iterator, entry exists\n        final Iterator<Integer> iterator = iterableA.iterator();\n        assertEquals(1, (int) IteratorUtils.first(iterator));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testForEach()", "name": "testForEach", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach()", "original_string": "    @Test\n    public void testForEach() {\n        final List<Integer> listA = new ArrayList<>();\n        listA.add(1);\n\n        final List<Integer> listB = new ArrayList<>();\n        listB.add(2);\n\n        final Closure<List<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<List<Integer>> col = new ArrayList<>();\n        col.add(listA);\n        col.add(listB);\n        IteratorUtils.forEach(col.iterator(), testClosure);\n        assertTrue(listA.isEmpty() && listB.isEmpty());\n\n        assertThrows(NullPointerException.class, () -> IteratorUtils.forEach(col.iterator(), null),\n                \"expecting NullPointerException\");\n\n        IteratorUtils.forEach(null, testClosure);\n\n        // null should be OK\n        col.add(null);\n        IteratorUtils.forEach(col.iterator(), testClosure);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testForEachButLast()", "name": "testForEachButLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachButLast()", "original_string": "    @Test\n    public void testForEachButLast() {\n        final List<Integer> listA = new ArrayList<>();\n        listA.add(1);\n\n        final List<Integer> listB = new ArrayList<>();\n        listB.add(2);\n\n        final Closure<List<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<List<Integer>> col = new ArrayList<>();\n        col.add(listA);\n        col.add(listB);\n        List<Integer> last = IteratorUtils.forEachButLast(col.iterator(), testClosure);\n        assertTrue(listA.isEmpty() && !listB.isEmpty());\n        assertSame(listB, last);\n\n        assertThrows(NullPointerException.class, () -> IteratorUtils.forEachButLast(col.iterator(), null),\n                \"expecting NullPointerException\");\n\n        IteratorUtils.forEachButLast(null, testClosure);\n\n        // null should be OK\n        col.add(null);\n        col.add(null);\n        last = IteratorUtils.forEachButLast(col.iterator(), testClosure);\n        assertNull(last);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testGetAtIndexFromIterator()", "name": "testGetAtIndexFromIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAtIndexFromIterator()", "original_string": "    @Test\n    public void testGetAtIndexFromIterator() throws Exception {\n        // Iterator, entry exists\n        Iterator<Integer> iterator = iterableA.iterator();\n        assertEquals(1, (int) IteratorUtils.get(iterator, 0));\n        iterator = iterableA.iterator();\n        assertEquals(2, (int) IteratorUtils.get(iterator, 1));\n\n        // Iterator, non-existent entry\n        final Iterator<Integer> finalIterator = iterator;\n        assertThrows(IndexOutOfBoundsException.class, () -> IteratorUtils.get(finalIterator, 10),\n                \"Expecting IndexOutOfBoundsException.\");\n\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testGetIterator()", "name": "testGetIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator()", "original_string": "    @Test\n    public void testGetIterator() {\n        final Object[] objArray = { \"a\", \"b\", \"c\" };\n        final Map<String, String> inMap = new HashMap<>();\n        final Node[] nodes = createNodes();\n        final NodeList nodeList = createNodeList(nodes);\n\n        assertTrue(IteratorUtils.getIterator(null) instanceof EmptyIterator, \"returns empty iterator when null passed\");\n        assertTrue(IteratorUtils.getIterator(iterableA.iterator()) instanceof Iterator, \"returns Iterator when Iterator directly \");\n        assertTrue(IteratorUtils.getIterator(iterableA) instanceof Iterator, \"returns Iterator when iterable passed\");\n        assertTrue(IteratorUtils.getIterator(objArray) instanceof ObjectArrayIterator,\n                \"returns ObjectArrayIterator when Object array passed\");\n        assertTrue(IteratorUtils.getIterator(inMap) instanceof Iterator, \"returns Iterator when Map passed\");\n        assertTrue(IteratorUtils.getIterator(nodeList) instanceof NodeListIterator, \"returns NodeListIterator when nodeList passed\");\n        assertTrue(IteratorUtils.getIterator(new Vector().elements()) instanceof EnumerationIterator,\n                \"returns EnumerationIterator when Enumeration passed\");\n        final Node node1 = createMock(Node.class);\n        assertTrue(IteratorUtils.getIterator(node1) instanceof NodeListIterator,\n                \"returns NodeListIterator when nodeList passed\");\n        final Dictionary dic = createMock(Dictionary.class);\n        assertTrue(IteratorUtils.getIterator(dic) instanceof EnumerationIterator,\n                \"returns EnumerationIterator when Dictionary passed\");\n        final int[] arr = new int[8];\n        assertTrue(IteratorUtils.getIterator(arr) instanceof ArrayIterator, \"returns ArrayIterator when array passed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf()", "original_string": "    @Test\n    public void testIndexOf() {\n        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n        int index = IteratorUtils.indexOf(iterableA.iterator(), testPredicate);\n        assertEquals(6, index);\n        testPredicate = equalPredicate((Number) 45);\n        index = IteratorUtils.indexOf(iterableA.iterator(), testPredicate);\n        assertEquals(-1, index);\n        assertEquals(-1, IteratorUtils.indexOf(null, testPredicate));\n\n        assertThrows(NullPointerException.class, () -> IteratorUtils.indexOf(iterableA.iterator(), null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testLoopingIterator()", "name": "testLoopingIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoopingIterator()", "original_string": "    @Test\n    public void testLoopingIterator() {\n        final ArrayList arrayList = new ArrayList();\n        arrayList.add(\"test\");\n        final Collection coll = new ArrayList();\n        coll.add(\"test\");\n        final Iterator iterator = arrayList.iterator();\n        assertTrue(IteratorUtils.loopingIterator(coll) instanceof ResettableIterator, \"create instance fail\");\n        assertThrows(NullPointerException.class, () -> IteratorUtils.loopingIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testLoopingListIterator()", "name": "testLoopingListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoopingListIterator()", "original_string": "    @Test\n    public void testLoopingListIterator() {\n        final ArrayList arrayList = new ArrayList();\n        arrayList.add(\"test\");\n        final Iterator iterator = arrayList.iterator();\n        assertTrue(IteratorUtils.loopingListIterator(arrayList) instanceof ResettableIterator, \"create instance fail\");\n        assertThrows(NullPointerException.class, () -> IteratorUtils.loopingListIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testNodeIterator()", "name": "testNodeIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNodeIterator()", "original_string": "    @Test\n    public void testNodeIterator() {\n        final Node[] nodes = createNodes();\n        final NodeList nodeList = createNodeList(nodes);\n        final Node parentNode = createMock(Node.class);\n        expect(parentNode.getChildNodes()).andStubReturn(nodeList);\n        replay(parentNode);\n\n        final Iterator<Node> iterator = IteratorUtils.nodeListIterator(parentNode);\n        int expectedNodeIndex = 0;\n        for (final Node actual : IteratorUtils.asIterable(iterator)) {\n            assertEquals(nodes[expectedNodeIndex], actual);\n            ++expectedNodeIndex;\n        }\n\n        // insure iteration occurred\n        assertTrue(expectedNodeIndex > 0);\n\n        // single use iterator\n        assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(), \"should not be able to iterate twice\");\n\n        assertThrows(NullPointerException.class, () -> IteratorUtils.nodeListIterator((Node) null),\n                \"Expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests method nodeListIterator(Node)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testNodeListIterator()", "name": "testNodeListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNodeListIterator()", "original_string": "    @Test\n    public void testNodeListIterator() {\n        final Node[] nodes = createNodes();\n        final NodeList nodeList = createNodeList(nodes);\n\n        final Iterator<Node> iterator = IteratorUtils.nodeListIterator(nodeList);\n        int expectedNodeIndex = 0;\n        for (final Node actual : IteratorUtils.asIterable(iterator)) {\n            assertEquals(nodes[expectedNodeIndex], actual);\n            ++expectedNodeIndex;\n        }\n\n        // insure iteration occurred\n        assertTrue(expectedNodeIndex > 0);\n\n        // single use iterator\n        assertFalse(IteratorUtils.asIterable(iterator).iterator().hasNext(), \"should not be able to iterate twice\");\n\n        assertThrows(NullPointerException.class, () -> IteratorUtils.nodeListIterator((NodeList) null),\n                \"Expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests method nodeListIterator(NodeList)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testObjectGraphIterator()", "name": "testObjectGraphIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testObjectGraphIterator()", "original_string": "    @Test\n    public void testObjectGraphIterator() {\n        assertTrue(IteratorUtils.objectGraphIterator(null, null) instanceof Iterator, \"create instance fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testPeekingIterator()", "name": "testPeekingIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekingIterator()", "original_string": "    @Test\n    public void testPeekingIterator() {\n        final ArrayList arrayList = new ArrayList();\n        final Iterator iterator = arrayList.iterator();\n        assertTrue(IteratorUtils.peekingIterator(iterator) instanceof Iterator, \"create instance fail\");\n        assertThrows(NullPointerException.class, () -> IteratorUtils.peekingIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testPushBackIterator()", "name": "testPushBackIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPushBackIterator()", "original_string": "    @Test\n    public void testPushBackIterator() {\n        final ArrayList arrayList = new ArrayList();\n        final Iterator iterator = arrayList.iterator();\n        assertTrue(IteratorUtils.pushbackIterator(iterator) instanceof Iterator, \"create instance fail\");\n        assertThrows(NullPointerException.class, () -> IteratorUtils.pushbackIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testSingletonIterator()", "name": "testSingletonIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingletonIterator()", "original_string": "    @Test\n    public void testSingletonIterator() {\n        assertTrue(IteratorUtils.singletonIterator(new Object()) instanceof ResettableIterator, \"create instance fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testSingletonListIterator()", "name": "testSingletonListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingletonListIterator()", "original_string": "    @Test\n    public void testSingletonListIterator() {\n        assertTrue(IteratorUtils.singletonListIterator(new Object()) instanceof Iterator, \"create instance fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testToArray()", "name": "testToArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToArray()", "original_string": "    @Test\n    public void testToArray() {\n        final List<Object> list = new ArrayList<>();\n        list.add(Integer.valueOf(1));\n        list.add(\"Two\");\n        list.add(null);\n        final Object[] result = IteratorUtils.toArray(list.iterator());\n        assertEquals(list, Arrays.asList(result));\n\n        assertThrows(NullPointerException.class, () -> IteratorUtils.toArray(null),\n                \"Expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testToArray2()", "name": "testToArray2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToArray2()", "original_string": "    @Test\n    public void testToArray2() {\n        final List<String> list = new ArrayList<>();\n        list.add(\"One\");\n        list.add(\"Two\");\n        list.add(null);\n        final String[] result = IteratorUtils.toArray(list.iterator(), String.class);\n        assertEquals(list, Arrays.asList(result));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.toArray(list.iterator(), null),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.toArray(null, String.class),\n                        \"Expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testToList()", "name": "testToList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToList()", "original_string": "    @Test\n    public void testToList() {\n        final List<Object> list = new ArrayList<>();\n        list.add(Integer.valueOf(1));\n        list.add(\"Two\");\n        list.add(null);\n        final List<Object> result = IteratorUtils.toList(list.iterator());\n        assertEquals(list, result);\n        // add\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.toList(null, 10),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> IteratorUtils.toList(list.iterator(), -1),\n                        \"Expecting IllegalArgumentException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testToListIterator()", "name": "testToListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToListIterator()", "original_string": "    @Test\n    public void testToListIterator() {\n        final List<Integer> list = new ArrayList<>();\n        list.add(Integer.valueOf(0));\n        list.add(Integer.valueOf(1));\n        list.add(Integer.valueOf(2));\n        final Iterator<Integer> iterator = list.iterator();\n\n        final ListIterator<Integer> liItr = IteratorUtils.toListIterator(iterator);\n        int expected = 0;\n        while (liItr.hasNext()) {\n            assertEquals(expected, liItr.next().intValue());\n            ++expected;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testToListIteratorNull()", "name": "testToListIteratorNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToListIteratorNull()", "original_string": "    @Test\n    public void testToListIteratorNull() {\n        assertThrows(NullPointerException.class, () -> IteratorUtils.toListIterator(null),\n                \"Expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testTransformedIterator()", "name": "testTransformedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedIterator()", "original_string": "    @Test\n    public void testTransformedIterator() {\n        final ArrayList arrayList = new ArrayList();\n        final Iterator iterator = arrayList.iterator();\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.transformedIterator(iterator, null)),\n                () -> assertThrows(NullPointerException.class, () -> IteratorUtils.transformedIterator(null, null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testUnmodifiableIteratorImmutability()", "name": "testUnmodifiableIteratorImmutability", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableIteratorImmutability()", "original_string": "    @Test\n    public void testUnmodifiableIteratorImmutability() {\n        final Iterator<String> iterator = getImmutableIterator();\n\n        assertThrows(UnsupportedOperationException.class, () -> iterator.remove(),\n                \"remove() should throw an UnsupportedOperationException\");\n\n        iterator.next();\n\n        assertThrows(UnsupportedOperationException.class, () -> iterator.remove(),\n                \"remove() should throw an UnsupportedOperationException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest remove() for an immutable Iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testUnmodifiableIteratorIteration()", "name": "testUnmodifiableIteratorIteration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableIteratorIteration()", "original_string": "    @Test\n    public void testUnmodifiableIteratorIteration() {\n        final Iterator<String> iterator = getImmutableIterator();\n\n        assertTrue(iterator.hasNext());\n\n        assertEquals(\"a\", iterator.next());\n\n        assertTrue(iterator.hasNext());\n\n        assertEquals(\"b\", iterator.next());\n\n        assertTrue(iterator.hasNext());\n\n        assertEquals(\"c\", iterator.next());\n\n        assertTrue(iterator.hasNext());\n\n        assertEquals(\"d\", iterator.next());\n\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest next() and hasNext() for an immutable Iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testUnmodifiableListIteratorImmutability()", "name": "testUnmodifiableListIteratorImmutability", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableListIteratorImmutability()", "original_string": "    @Test\n    public void testUnmodifiableListIteratorImmutability() {\n        final ListIterator<String> listIterator = getImmutableListIterator();\n        assertAll(\n                () -> assertThrows(UnsupportedOperationException.class, () -> listIterator.remove(),\n                        \"remove() should throw an UnsupportedOperationException\"),\n                () -> assertThrows(UnsupportedOperationException.class, () -> listIterator.set(\"a\"),\n                        \"set(Object) should throw an UnsupportedOperationException\"),\n                () -> assertThrows(UnsupportedOperationException.class, () -> listIterator.add(\"a\"),\n                        \"add(Object) should throw an UnsupportedOperationException\")\n        );\n\n        listIterator.next();\n        assertAll(\n                () -> assertThrows(UnsupportedOperationException.class, () -> listIterator.remove(),\n                        \"remove() should throw an UnsupportedOperationException\"),\n                () -> assertThrows(UnsupportedOperationException.class, () -> listIterator.set(\"a\"),\n                        \"set(Object) should throw an UnsupportedOperationException\"),\n                () -> assertThrows(UnsupportedOperationException.class, () -> listIterator.add(\"a\"),\n                        \"add(Object) should throw an UnsupportedOperationException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest remove() for an immutable ListIterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testUnmodifiableListIteratorIteration()", "name": "testUnmodifiableListIteratorIteration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableListIteratorIteration()", "original_string": "    @Test\n    public void testUnmodifiableListIteratorIteration() {\n        final ListIterator<String> listIterator = getImmutableListIterator();\n\n        assertFalse(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n\n        assertEquals(\"a\", listIterator.next());\n\n        assertTrue(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n\n        assertEquals(\"b\", listIterator.next());\n\n        assertTrue(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n\n        assertEquals(\"c\", listIterator.next());\n\n        assertTrue(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n\n        assertEquals(\"d\", listIterator.next());\n\n        assertTrue(listIterator.hasPrevious());\n        assertFalse(listIterator.hasNext());\n\n        assertEquals(\"d\", listIterator.previous());\n\n        assertTrue(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n\n        assertEquals(\"c\", listIterator.previous());\n\n        assertTrue(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n\n        assertEquals(\"b\", listIterator.previous());\n\n        assertTrue(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n\n        assertEquals(\"a\", listIterator.previous());\n\n        assertFalse(listIterator.hasPrevious());\n        assertTrue(listIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest next(), hasNext(), previous() and hasPrevious() for an immutable ListIterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testUnmodifiableMapIterator()", "name": "testUnmodifiableMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableMapIterator()", "original_string": "    @Test\n    public void testUnmodifiableMapIterator() {\n        final Set<?> set = new LinkedHashSet<>();\n        final MapIterator iterator = new EntrySetToMapIteratorAdapter(set);\n        assertTrue(IteratorUtils.unmodifiableMapIterator(iterator) instanceof MapIterator, \"create instance fail\");\n        assertThrows(NullPointerException.class, () -> IteratorUtils.unmodifiableMapIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest.[void]testZippingIterator()", "name": "testZippingIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testZippingIterator()", "original_string": "    @Test\n    public void testZippingIterator() {\n        final ArrayList arrayList = new ArrayList();\n        final Iterator iterator = arrayList.iterator();\n        assertTrue(IteratorUtils.zippingIterator(iterator, iterator, iterator) instanceof ZippingIterator, \"create instance fail\");\n        assertTrue(IteratorUtils.zippingIterator(iterator, iterator) instanceof ZippingIterator, \"create instance fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java", "class_name": "IteratorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java.IteratorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest.[void]testSwitchMapTransformer_WithDefaultTransformer()", "name": "testSwitchMapTransformer_WithDefaultTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchMapTransformer_WithDefaultTransformer()", "original_string": "    @Test\n    public void testSwitchMapTransformer_WithDefaultTransformer() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = new HashMap<>();\n        map.put(1, ConstantTransformer.constantTransformer(\"One\"));\n        map.put(2, ConstantTransformer.constantTransformer(\"Two\"));\n        map.put(null, ConstantTransformer.constantTransformer(\"Default\"));\n\n        // When\n        Transformer<Integer, String> transformer = TransformerUtils.switchMapTransformer(map);\n\n        // Then\n        assertEquals(\"One\", transformer.transform(1));\n        assertEquals(\"Two\", transformer.transform(2));\n        assertEquals(\"Default\", transformer.transform(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "class_name": "TransformerUtils_switchMapTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest.[void]testSwitchMapTransformer_WithoutDefaultTransformer()", "name": "testSwitchMapTransformer_WithoutDefaultTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchMapTransformer_WithoutDefaultTransformer()", "original_string": "    @Test\n    public void testSwitchMapTransformer_WithoutDefaultTransformer() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = new HashMap<>();\n        map.put(1, ConstantTransformer.constantTransformer(\"One\"));\n        map.put(2, ConstantTransformer.constantTransformer(\"Two\"));\n\n        // When\n        Transformer<Integer, String> transformer = TransformerUtils.switchMapTransformer(map);\n\n        // Then\n        assertEquals(\"One\", transformer.transform(1));\n        assertEquals(\"Two\", transformer.transform(2));\n        assertNull(transformer.transform(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "class_name": "TransformerUtils_switchMapTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest.[void]testSwitchMapTransformer_WithNullInput()", "name": "testSwitchMapTransformer_WithNullInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchMapTransformer_WithNullInput()", "original_string": "    @Test\n    public void testSwitchMapTransformer_WithNullInput() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = new HashMap<>();\n        map.put(1, ConstantTransformer.constantTransformer(\"One\"));\n        map.put(null, ConstantTransformer.constantTransformer(\"Default\"));\n\n        // When\n        Transformer<Integer, String> transformer = TransformerUtils.switchMapTransformer(map);\n\n        // Then\n        assertEquals(\"Default\", transformer.transform(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "class_name": "TransformerUtils_switchMapTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest.[void]testSwitchMapTransformer_WithEmptyMap()", "name": "testSwitchMapTransformer_WithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchMapTransformer_WithEmptyMap()", "original_string": "    @Test\n    public void testSwitchMapTransformer_WithEmptyMap() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = new HashMap<>();\n\n        // When\n        Transformer<Integer, String> transformer = TransformerUtils.switchMapTransformer(map);\n\n        // Then\n        assertNull(transformer.transform(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "class_name": "TransformerUtils_switchMapTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest.[void]testSwitchMapTransformer_WithNullMap()", "name": "testSwitchMapTransformer_WithNullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchMapTransformer_WithNullMap()", "original_string": "    @Test\n    public void testSwitchMapTransformer_WithNullMap() {\n        // Given\n        Map<Integer, Transformer<Integer, String>> map = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> TransformerUtils.switchMapTransformer(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "class_name": "TransformerUtils_switchMapTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java.TransformerUtils_switchMapTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testPredicatedBag()", "name": "testPredicatedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedBag()", "original_string": "    @Test\n    public void testPredicatedBag() {\n        final Bag<Object> bag = BagUtils.predicatedBag(new HashBag<>(), truePredicate);\n        assertInstanceOf(PredicatedBag.class, bag, \"Returned object should be a PredicatedBag.\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.predicatedBag(null, truePredicate),\n                        \"Expecting NullPointerException for null bag.\"),\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.predicatedBag(new HashBag<>(), null),\n                        \"Expecting NullPointerException for null predicate.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testPredicatedSortedBag()", "name": "testPredicatedSortedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedSortedBag()", "original_string": "    @Test\n    public void testPredicatedSortedBag() {\n        final Bag<Object> bag = BagUtils.predicatedSortedBag(new TreeBag<>(), truePredicate);\n        assertInstanceOf(PredicatedSortedBag.class, bag, \"Returned object should be a PredicatedSortedBag.\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.predicatedSortedBag(null, truePredicate),\n                        \"Expecting NullPointerException for null bag.\"),\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.predicatedSortedBag(new TreeBag<>(), null),\n                        \"Expecting NullPointerException for null predicate.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testSynchronizedBag()", "name": "testSynchronizedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedBag()", "original_string": "    @Test\n    public void testSynchronizedBag() {\n        final Bag<Object> bag = BagUtils.synchronizedBag(new HashBag<>());\n        assertInstanceOf(SynchronizedBag.class, bag, \"Returned object should be a SynchronizedBag.\");\n        assertThrows(NullPointerException.class, () -> BagUtils.synchronizedBag(null),\n                \"Expecting NullPointerException for null bag.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testSynchronizedSortedBag()", "name": "testSynchronizedSortedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedSortedBag()", "original_string": "    @Test\n    public void testSynchronizedSortedBag() {\n        final Bag<Object> bag = BagUtils.synchronizedSortedBag(new TreeBag<>());\n        assertInstanceOf(SynchronizedSortedBag.class, bag, \"Returned object should be a SynchronizedSortedBag.\");\n        assertThrows(NullPointerException.class, () -> BagUtils.synchronizedSortedBag(null),\n                \"Expecting NullPointerException for null bag.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testTransformedBag()", "name": "testTransformedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedBag()", "original_string": "    @Test\n    public void testTransformedBag() {\n        final Bag<Object> bag = BagUtils.transformingBag(new HashBag<>(), nopTransformer);\n        assertInstanceOf(TransformedBag.class, bag, \"Returned object should be an TransformedBag.\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.transformingBag(null, nopTransformer),\n                        \"Expecting NullPointerException for null bag.\"),\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.transformingBag(new HashBag<>(), null),\n                        \"Expecting NullPointerException for null transformer.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testTransformedSortedBag()", "name": "testTransformedSortedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedSortedBag()", "original_string": "    @Test\n    public void testTransformedSortedBag() {\n        final Bag<Object> bag = BagUtils.transformingSortedBag(new TreeBag<>(), nopTransformer);\n        assertInstanceOf(TransformedSortedBag.class, bag, \"Returned object should be an TransformedSortedBag\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.transformingSortedBag(null, nopTransformer),\n                        \"Expecting NullPointerException for null bag.\"),\n                () -> assertThrows(NullPointerException.class, () -> BagUtils.transformingSortedBag(new TreeBag<>(), null),\n                        \"Expecting NullPointerException for null transformer.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testUnmodifiableBag()", "name": "testUnmodifiableBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableBag()", "original_string": "    @Test\n    public void testUnmodifiableBag() {\n        final Bag<Object> bag = BagUtils.unmodifiableBag(new HashBag<>());\n        assertInstanceOf(UnmodifiableBag.class, bag, \"Returned object should be an UnmodifiableBag.\");\n        assertThrows(NullPointerException.class, () -> BagUtils.unmodifiableBag(null),\n                \"Expecting NullPointerException for null bag.\");\n        assertSame(bag, BagUtils.unmodifiableBag(bag), \"UnmodifiableBag shall not be decorated\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest.[void]testUnmodifiableSortedBag()", "name": "testUnmodifiableSortedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableSortedBag()", "original_string": "    @Test\n    public void testUnmodifiableSortedBag() {\n        final SortedBag<Object> bag = BagUtils.unmodifiableSortedBag(new TreeBag<>());\n        assertInstanceOf(UnmodifiableSortedBag.class, bag, \"Returned object should be an UnmodifiableSortedBag.\");\n        assertThrows(NullPointerException.class, () -> BagUtils.unmodifiableSortedBag(null),\n                \"Expecting NullPointerException for null bag.\");\n        assertSame(bag, BagUtils.unmodifiableSortedBag(bag), \"UnmodifiableSortedBag shall not be decorated\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java", "class_name": "BagUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/BagUtilsTest.java.BagUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest.[void]testIndexOf_ElementFound()", "name": "testIndexOf_ElementFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf_ElementFound()", "original_string": "    @Test\n    public void testIndexOf_ElementFound() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4, 5).iterator();\n        Predicate<Integer> predicate = i -> i == 3;\n\n        int result = IteratorUtils.indexOf(iterator, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer object) {\n                return predicate.test(object);\n            }\n        });\n\n        assertEquals(2, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "class_name": "IteratorUtils_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest.[void]testIndexOf_ElementNotFound()", "name": "testIndexOf_ElementNotFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf_ElementNotFound()", "original_string": "    @Test\n    public void testIndexOf_ElementNotFound() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4, 5).iterator();\n        Predicate<Integer> predicate = i -> i == 6;\n\n        int result = IteratorUtils.indexOf(iterator, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer object) {\n                return predicate.test(object);\n            }\n        });\n\n        assertEquals(CollectionUtils.INDEX_NOT_FOUND, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "class_name": "IteratorUtils_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest.[void]testIndexOf_NullIterator()", "name": "testIndexOf_NullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf_NullIterator()", "original_string": "    @Test\n    public void testIndexOf_NullIterator() {\n        Predicate<Integer> predicate = i -> i == 3;\n\n        int result = IteratorUtils.indexOf(null, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer object) {\n                return predicate.test(object);\n            }\n        });\n\n        assertEquals(CollectionUtils.INDEX_NOT_FOUND, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "class_name": "IteratorUtils_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest.[void]testIndexOf_NullPredicate()", "name": "testIndexOf_NullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf_NullPredicate()", "original_string": "    @Test\n    public void testIndexOf_NullPredicate() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4, 5).iterator();\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.indexOf(iterator, null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "class_name": "IteratorUtils_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java.IteratorUtils_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java.ComparatorUtils_maxTest.[void]testMaxWithDefaultComparator()", "name": "testMaxWithDefaultComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxWithDefaultComparator()", "original_string": "    @Test\n    public void testMaxWithDefaultComparator() {\n        // Given\n        Integer o1 = 5;\n        Integer o2 = 10;\n\n        // When\n        Integer result = ComparatorUtils.max(o1, o2, null);\n\n        // Then\n        assertEquals(o2, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java", "class_name": "ComparatorUtils_maxTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java.ComparatorUtils_maxTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java.ComparatorUtils_maxTest.[void]testMaxWithCustomComparator()", "name": "testMaxWithCustomComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxWithCustomComparator()", "original_string": "    @Test\n    public void testMaxWithCustomComparator() {\n        // Given\n        Integer o1 = 5;\n        Integer o2 = 10;\n        Comparator<Integer> reverseComparator = Comparator.reverseOrder();\n\n        // When\n        Integer result = ComparatorUtils.max(o1, o2, reverseComparator);\n\n        // Then\n        assertEquals(o1, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java", "class_name": "ComparatorUtils_maxTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java.ComparatorUtils_maxTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testCanonicalEmptyCollectionExists()", "name": "testCanonicalEmptyCollectionExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCanonicalEmptyCollectionExists()", "original_string": "    @Test\n    public void testCanonicalEmptyCollectionExists() {\n        if (supportsEmptyCollections() && isTestSerialization() && !skipSerializedCanonicalTests()) {\n            final Object object = makeObject();\n            if (object instanceof Serializable) {\n                final String name = getCanonicalEmptyCollectionName(object);\n                assertTrue(\n                        new File(name).exists(),\n                        \"Canonical empty collection (\" + name + \") is not in SCM\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests serialization by comparing against a previously stored version in SCM.\nIf the test object is serializable, confirm that a canonical form exists.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testCanonicalFullCollectionExists()", "name": "testCanonicalFullCollectionExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCanonicalFullCollectionExists()", "original_string": "    @Test\n    public void testCanonicalFullCollectionExists() {\n        if (supportsFullCollections() && isTestSerialization() && !skipSerializedCanonicalTests()) {\n            final Object object = makeObject();\n            if (object instanceof Serializable) {\n                final String name = getCanonicalFullCollectionName(object);\n                assertTrue(\n                        new File(name).exists(),\n                        \"Canonical full collection (\" + name + \") is not in SCM\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests serialization by comparing against a previously stored version in SCM.\nIf the test object is serializable, confirm that a canonical form exists.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testEqualsNull()", "name": "testEqualsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsNull()", "original_string": "    @Test\n    public void testEqualsNull() {\n        final Object obj = makeObject();\n        assertFalse(obj.equals(null)); // make sure this doesn't throw NPE either\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testObjectEqualsSelf()", "name": "testObjectEqualsSelf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testObjectEqualsSelf()", "original_string": "    @Test\n    public void testObjectEqualsSelf() {\n        final Object obj = makeObject();\n        assertEquals(obj, obj, \"A Object should equal itself\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testObjectHashCodeEqualsContract()", "name": "testObjectHashCodeEqualsContract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testObjectHashCodeEqualsContract()", "original_string": "    @Test\n    public void testObjectHashCodeEqualsContract() {\n        final Object obj1 = makeObject();\n        if (obj1.equals(obj1)) {\n            assertEquals(\n                    obj1.hashCode(), obj1.hashCode(),\n                    \"[1] When two objects are equal, their hashCodes should be also.\");\n        }\n        final Object obj2 = makeObject();\n        if (obj1.equals(obj2)) {\n            assertEquals(\n                    obj1.hashCode(), obj2.hashCode(),\n                    \"[2] When two objects are equal, their hashCodes should be also.\");\n            assertEquals(obj2, obj1, \"When obj1.equals(obj2) is true, then obj2.equals(obj1) should also be true\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testObjectHashCodeEqualsSelfHashCode()", "name": "testObjectHashCodeEqualsSelfHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testObjectHashCodeEqualsSelfHashCode()", "original_string": "    @Test\n    public void testObjectHashCodeEqualsSelfHashCode() {\n        final Object obj = makeObject();\n        assertEquals(obj.hashCode(), obj.hashCode(), \"hashCode should be repeatable\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testSerializeDeserializeThenCompare()", "name": "testSerializeDeserializeThenCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerializeDeserializeThenCompare()", "original_string": "    @Test\n    public void testSerializeDeserializeThenCompare() throws Exception {\n        final Object obj = makeObject();\n        if (obj instanceof Serializable && isTestSerialization()) {\n            final Object dest = serializeDeserialize(obj);\n            if (isEqualsCheckable()) {\n                assertEquals(obj, dest, \"obj != deserialize(serialize(obj))\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest.[void]testSimpleSerialization()", "name": "testSimpleSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleSerialization()", "original_string": "    @Test\n    public void testSimpleSerialization() throws Exception {\n        final Object o = makeObject();\n        if (o instanceof Serializable && isTestSerialization()) {\n            final byte[] object = writeExternalFormToBytes((Serializable) o);\n            readExternalFormFromBytes(object);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java", "class_name": "AbstractObjectTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractObjectTest.java.AbstractObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSanity check method, makes sure that any Serializable\nclass can be serialized and de-serialized in memory,\nusing the handy makeObject() method\n\n@throws IOException\n@throws ClassNotFoundException\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java.ArrayStackTest.[void]testNewStack()", "name": "testNewStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewStack()", "original_string": "    @Test\n    public void testNewStack() {\n        final ArrayStack<E> stack = makeObject();\n        assertTrue(stack.empty(), \"New stack is empty\");\n        assertEquals(0, stack.size(), \"New stack has size zero\");\n\n        assertThrows(EmptyStackException.class, () -> stack.peek());\n\n        assertThrows(EmptyStackException.class, () -> stack.pop());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java", "class_name": "ArrayStackTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java.ArrayStackTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java.ArrayStackTest.[void]testPushPeekPop()", "name": "testPushPeekPop", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPushPeekPop()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPushPeekPop() {\n        final ArrayStack<E> stack = makeObject();\n\n        stack.push((E) \"First Item\");\n        assertFalse(stack.empty(), \"Stack is not empty\");\n        assertEquals(1, stack.size(), \"Stack size is one\");\n        assertEquals(\"First Item\", (String) stack.peek(),\n                \"Top item is 'First Item'\");\n        assertEquals(1, stack.size(), \"Stack size is one\");\n\n        stack.push((E) \"Second Item\");\n        assertEquals(2, stack.size(), \"Stack size is two\");\n        assertEquals(\"Second Item\", (String) stack.peek(),\n                \"Top item is 'Second Item'\");\n        assertEquals(2, stack.size(), \"Stack size is two\");\n\n        assertEquals(\"Second Item\", (String) stack.pop(),\n                \"Popped item is 'Second Item'\");\n        assertEquals(\"First Item\", (String) stack.peek(),\n                \"Top item is 'First Item'\");\n        assertEquals(1, stack.size(), \"Stack size is one\");\n\n        assertEquals(\"First Item\", (String) stack.pop(),\n                \"Popped item is 'First Item'\");\n        assertEquals(0, stack.size(), \"Stack size is zero\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java", "class_name": "ArrayStackTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java.ArrayStackTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java.ArrayStackTest.[void]testSearch()", "name": "testSearch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testSearch()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testSearch() {\n        final ArrayStack<E> stack = makeObject();\n\n        stack.push((E) \"First Item\");\n        stack.push((E) \"Second Item\");\n        assertEquals(1, stack.search(\"Second Item\"),\n                \"Top item is 'Second Item'\");\n        assertEquals(2, stack.search(\"First Item\"),\n                \"Next Item is 'First Item'\");\n        assertEquals(-1, stack.search(\"Missing Item\"),\n                \"Cannot find 'Missing Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java", "class_name": "ArrayStackTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStackTest.java.ArrayStackTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest.[void]testSizeWithNullIterator()", "name": "testSizeWithNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithNullIterator()", "original_string": "    @Test\n    public void testSizeWithNullIterator() {\n        // Given\n        Iterator<?> iterator = null;\n\n        // When\n        int size = IteratorUtils.size(iterator);\n\n        // Then\n        assertEquals(0, size);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "class_name": "IteratorUtils_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest.[void]testSizeWithEmptyIterator()", "name": "testSizeWithEmptyIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithEmptyIterator()", "original_string": "    @Test\n    public void testSizeWithEmptyIterator() {\n        // Given\n        Iterator<?> iterator = IteratorUtils.emptyIterator();\n\n        // When\n        int size = IteratorUtils.size(iterator);\n\n        // Then\n        assertEquals(0, size);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "class_name": "IteratorUtils_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest.[void]testSizeWithSingletonIterator()", "name": "testSizeWithSingletonIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithSingletonIterator()", "original_string": "    @Test\n    public void testSizeWithSingletonIterator() {\n        // Given\n        Iterator<?> iterator = IteratorUtils.singletonIterator(\"element\");\n\n        // When\n        int size = IteratorUtils.size(iterator);\n\n        // Then\n        assertEquals(1, size);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "class_name": "IteratorUtils_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest.[void]testSizeWithArrayIterator()", "name": "testSizeWithArrayIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithArrayIterator()", "original_string": "    @Test\n    public void testSizeWithArrayIterator() {\n        // Given\n        Iterator<?> iterator = IteratorUtils.arrayIterator(new String[]{\"a\", \"b\", \"c\"});\n\n        // When\n        int size = IteratorUtils.size(iterator);\n\n        // Then\n        assertEquals(3, size);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "class_name": "IteratorUtils_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java.IteratorUtils_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest.[void]testToStringWithDefaultDelimiter()", "name": "testToStringWithDefaultDelimiter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithDefaultDelimiter()", "original_string": "    @Test\n    public void testToStringWithDefaultDelimiter() {\n        String result = IteratorUtils.toString(iterator);\n        assertEquals(\"[a, b, c]\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "class_name": "IteratorUtils_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest.[void]testToStringWithEmptyIterator()", "name": "testToStringWithEmptyIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithEmptyIterator()", "original_string": "    @Test\n    public void testToStringWithEmptyIterator() {\n        iterator = new ArrayIterator<>(new String[]{});\n        String result = IteratorUtils.toString(iterator);\n        assertEquals(\"[]\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "class_name": "IteratorUtils_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest.[void]testToStringWithSingleElement()", "name": "testToStringWithSingleElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithSingleElement()", "original_string": "    @Test\n    public void testToStringWithSingleElement() {\n        iterator = new ArrayIterator<>(new String[]{\"a\"});\n        String result = IteratorUtils.toString(iterator);\n        assertEquals(\"[a]\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "class_name": "IteratorUtils_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest.[void]testToStringWithNullElement()", "name": "testToStringWithNullElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithNullElement()", "original_string": "    @Test\n    public void testToStringWithNullElement() {\n        iterator = new ArrayIterator<>(new String[]{\"a\", null, \"c\"});\n        String result = IteratorUtils.toString(iterator);\n        assertEquals(\"[a, null, c]\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "class_name": "IteratorUtils_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest.[void]testToStringWithCustomDelimiter()", "name": "testToStringWithCustomDelimiter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithCustomDelimiter()", "original_string": "    @Test\n    public void testToStringWithCustomDelimiter() {\n        String result = IteratorUtils.toString(iterator, TransformerUtils.stringValueTransformer(), \"|\", \"{\", \"}\");\n        assertEquals(\"{a|b|c}\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "class_name": "IteratorUtils_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java.IteratorUtils_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest.[void]testBooleanComparator()", "name": "testBooleanComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBooleanComparator()", "original_string": "    @Test\n    public void testBooleanComparator() {\n        Comparator<Boolean> comp = ComparatorUtils.booleanComparator(true);\n        assertTrue(comp.compare(Boolean.TRUE, Boolean.FALSE) < 0);\n        assertEquals(0, comp.compare(Boolean.TRUE, Boolean.TRUE));\n        assertTrue(comp.compare(Boolean.FALSE, Boolean.TRUE) > 0);\n\n        comp = ComparatorUtils.booleanComparator(false);\n        assertTrue(comp.compare(Boolean.TRUE, Boolean.FALSE) > 0);\n        assertEquals(0, comp.compare(Boolean.TRUE, Boolean.TRUE));\n        assertTrue(comp.compare(Boolean.FALSE, Boolean.TRUE) < 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "class_name": "ComparatorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest.[void]testChainedComparator()", "name": "testChainedComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChainedComparator()", "original_string": "    @Test\n    public void testChainedComparator() {\n        // simple test: chain 2 natural comparators\n        final Comparator<Integer> comp = ComparatorUtils.chainedComparator(ComparatorUtils.<Integer>naturalComparator(),\n                ComparatorUtils.naturalComparator());\n        assertTrue(comp.compare(1, 2) < 0);\n        assertEquals(0, comp.compare(1, 1));\n        assertTrue(comp.compare(2, 1) > 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "class_name": "ComparatorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest.[void]testMax()", "name": "testMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMax()", "original_string": "    @Test\n    public void testMax() {\n        final Comparator<Integer> reversed =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        assertEquals(Integer.valueOf(10), ComparatorUtils.max(1, 10, null));\n        assertEquals(Integer.valueOf(10), ComparatorUtils.max(10, -10, null));\n\n        assertEquals(Integer.valueOf(1), ComparatorUtils.max(1, 10, reversed));\n        assertEquals(Integer.valueOf(-10), ComparatorUtils.max(10, -10, reversed));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ComparatorUtils.max(1, null, null),\n                        \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> ComparatorUtils.max(null, 10, null),\n                        \"expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "class_name": "ComparatorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest.[void]testMin()", "name": "testMin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMin()", "original_string": "    @Test\n    public void testMin() {\n        final Comparator<Integer> reversed =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        assertEquals(Integer.valueOf(1), ComparatorUtils.min(1, 10, null));\n        assertEquals(Integer.valueOf(-10), ComparatorUtils.min(10, -10, null));\n\n        assertEquals(Integer.valueOf(10), ComparatorUtils.min(1, 10, reversed));\n        assertEquals(Integer.valueOf(10), ComparatorUtils.min(10, -10, reversed));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ComparatorUtils.min(1, null, null),\n                        \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> ComparatorUtils.min(null, 10, null),\n                        \"expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "class_name": "ComparatorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest.[void]testNullHighComparator()", "name": "testNullHighComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullHighComparator()", "original_string": "    @Test\n    public void testNullHighComparator() {\n        final Comparator<Integer> comp = ComparatorUtils.nullHighComparator(null);\n        assertTrue(comp.compare(null, 10) > 0);\n        assertEquals(0, comp.compare(null, null));\n        assertTrue(comp.compare(10, null) < 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "class_name": "ComparatorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest.[void]testNullLowComparator()", "name": "testNullLowComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullLowComparator()", "original_string": "    @Test\n    public void testNullLowComparator() {\n        final Comparator<Integer> comp = ComparatorUtils.nullLowComparator(null);\n        assertTrue(comp.compare(null, 10) < 0);\n        assertEquals(0, comp.compare(null, null));\n        assertTrue(comp.compare(10, null) > 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java", "class_name": "ComparatorUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtilsTest.java.ComparatorUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest.[void]testEmptyQueue()", "name": "testEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyQueue()", "original_string": "    @Test\n    public void testEmptyQueue() {\n        final Queue<Object> queue = QueueUtils.emptyQueue();\n        assertInstanceOf(UnmodifiableQueue.class, queue, \"Returned object should be an UnmodifiableQueue.\");\n        assertTrue(queue.isEmpty(), \"Returned queue is not empty.\");\n\n        assertThrows(UnsupportedOperationException.class, () -> queue.add(new Object()),\n                \"Expecting UnsupportedOperationException for empty queue.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "class_name": "QueueUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest.[void]testPredicatedQueue()", "name": "testPredicatedQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedQueue()", "original_string": "    @Test\n    public void testPredicatedQueue() {\n        final Queue<Object> queue = QueueUtils.predicatedQueue(new LinkedList<>(), truePredicate);\n        assertInstanceOf(PredicatedQueue.class, queue, \"Returned object should be a PredicatedQueue.\");\n\n        assertThrows(NullPointerException.class, () -> QueueUtils.predicatedQueue(null, truePredicate),\n                \"Expecting NullPointerException for null queue.\");\n\n        assertThrows(NullPointerException.class, () -> QueueUtils.predicatedQueue(new LinkedList<>(), null),\n                \"Expecting NullPointerException for null predicate.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "class_name": "QueueUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest.[void]testSynchronizedQueue()", "name": "testSynchronizedQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedQueue()", "original_string": "    @Test\n    public void testSynchronizedQueue() {\n        final Queue<Object> queue = QueueUtils.synchronizedQueue(new LinkedList<>());\n        assertInstanceOf(SynchronizedQueue.class, queue, \"Returned object should be a SynchronizedQueue.\");\n\n        assertThrows(NullPointerException.class, () -> QueueUtils.synchronizedQueue(null),\n                \"Expecting NullPointerException for null queue.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "class_name": "QueueUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest.[void]testTransformedQueue()", "name": "testTransformedQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedQueue()", "original_string": "    @Test\n    public void testTransformedQueue() {\n        final Queue<Object> queue = QueueUtils.transformingQueue(new LinkedList<>(), nopTransformer);\n        assertInstanceOf(TransformedQueue.class, queue, \"Returned object should be an TransformedQueue.\");\n\n        assertThrows(NullPointerException.class, () -> QueueUtils.transformingQueue(null, nopTransformer),\n                \"Expecting NullPointerException for null queue.\");\n\n        assertThrows(NullPointerException.class, () -> QueueUtils.transformingQueue(new LinkedList<>(), null),\n                \"Expecting NullPointerException for null transformer.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "class_name": "QueueUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest.[void]testUnmodifiableQueue()", "name": "testUnmodifiableQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableQueue()", "original_string": "    @Test\n    public void testUnmodifiableQueue() {\n        final Queue<Object> queue = QueueUtils.unmodifiableQueue(new LinkedList<>());\n        assertInstanceOf(UnmodifiableQueue.class, queue, \"Returned object should be an UnmodifiableQueue.\");\n\n        assertThrows(NullPointerException.class, () -> QueueUtils.unmodifiableQueue(null),\n                \"Expecting NullPointerException for null queue.\");\n\n        assertSame(queue, QueueUtils.unmodifiableQueue(queue), \"UnmodifiableQueue shall not be decorated\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java", "class_name": "QueueUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/QueueUtilsTest.java.QueueUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testChainedClosure()", "name": "testChainedClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testChainedClosure()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testChainedClosure() {\n        MockClosure<Object> a = new MockClosure<>();\n        MockClosure<Object> b = new MockClosure<>();\n        ClosureUtils.chainedClosure(a, b).accept(null);\n        assertEquals(1, a.count);\n        assertEquals(1, b.count);\n\n        a = new MockClosure<>();\n        b = new MockClosure<>();\n        ClosureUtils.<Object>chainedClosure(a, b, a).execute(null);\n        assertEquals(2, a.count);\n        assertEquals(1, b.count);\n\n        a = new MockClosure<>();\n        b = new MockClosure<>();\n        final Collection<Closure<Object>> coll = new ArrayList<>();\n        coll.add(b);\n        coll.add(a);\n        coll.add(b);\n        ClosureUtils.<Object>chainedClosure(coll).execute(null);\n        assertEquals(1, a.count);\n        assertEquals(2, b.count);\n\n        assertSame(NOPClosure.INSTANCE, ClosureUtils.<Object>chainedClosure());\n        assertSame(NOPClosure.INSTANCE, ClosureUtils.<Object>chainedClosure(Collections.<Closure<Object>>emptyList()));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.chainedClosure(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.<Object>chainedClosure((Closure[]) null)),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.<Object>chainedClosure((Collection<Closure<Object>>) null)),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.<Object>chainedClosure(null, null)),\n                () -> {\n                    final Collection<Closure<Object>> finalColl = new ArrayList<>();\n                    finalColl.add(null);\n                    finalColl.add(null);\n                    assertThrows(NullPointerException.class, () -> ClosureUtils.chainedClosure(finalColl));\n                }\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testDoWhileClosure()", "name": "testDoWhileClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDoWhileClosure()", "original_string": "    @Test\n    public void testDoWhileClosure() {\n        MockClosure<Object> cmd = new MockClosure<>();\n        ClosureUtils.doWhileClosure(cmd, FalsePredicate.falsePredicate()).execute(null);\n        assertEquals(1, cmd.count);\n\n        cmd = new MockClosure<>();\n        ClosureUtils.doWhileClosure(cmd, PredicateUtils.uniquePredicate()).execute(null);\n        assertEquals(2, cmd.count);\n\n        assertThrows(NullPointerException.class, () -> ClosureUtils.doWhileClosure(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testExceptionClosure()", "name": "testExceptionClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExceptionClosure()", "original_string": "    @Test\n    public void testExceptionClosure() {\n        assertNotNull(ClosureUtils.exceptionClosure());\n        assertSame(ClosureUtils.exceptionClosure(), ClosureUtils.exceptionClosure());\n        assertAll(\n                () -> assertThrows(FunctorException.class, () -> ClosureUtils.exceptionClosure().execute(null)),\n                () -> assertThrows(FunctorException.class, () -> ClosureUtils.exceptionClosure().execute(cString))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testForClosure()", "name": "testForClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForClosure()", "original_string": "    @Test\n    public void testForClosure() {\n        final MockClosure<Object> cmd = new MockClosure<>();\n        ClosureUtils.forClosure(5, cmd).execute(null);\n        assertEquals(5, cmd.count);\n        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(0, new MockClosure<>()));\n        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(-1, new MockClosure<>()));\n        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(1, null));\n        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(3, null));\n        assertSame(cmd, ClosureUtils.forClosure(1, cmd));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testIfClosure()", "name": "testIfClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIfClosure()", "original_string": "    @Test\n    public void testIfClosure() {\n        MockClosure<Object> a = new MockClosure<>();\n        MockClosure<Object> b;\n        ClosureUtils.ifClosure(TruePredicate.truePredicate(), a).execute(null);\n        assertEquals(1, a.count);\n\n        a = new MockClosure<>();\n        ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(), a).execute(null);\n        assertEquals(0, a.count);\n\n        a = new MockClosure<>();\n        b = new MockClosure<>();\n        ClosureUtils.ifClosure(TruePredicate.<Object>truePredicate(), a, b).execute(null);\n        assertEquals(1, a.count);\n        assertEquals(0, b.count);\n\n        a = new MockClosure<>();\n        b = new MockClosure<>();\n        ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(), a, b).execute(null);\n        assertEquals(0, a.count);\n        assertEquals(1, b.count);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testInvokeClosure()", "name": "testInvokeClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokeClosure()", "original_string": "    @Test\n    public void testInvokeClosure() {\n        StringBuilder buf = new StringBuilder(\"Hello\"); // Only StringBuffer has setLength() method\n        ClosureUtils.invokerClosure(\"reverse\").execute(buf);\n        assertEquals(\"olleH\", buf.toString());\n        buf = new StringBuilder(\"Hello\");\n        ClosureUtils.invokerClosure(\"setLength\", new Class[] {Integer.TYPE}, new Object[] {Integer.valueOf(2)}).execute(buf);\n        assertEquals(\"He\", buf.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testNopClosure()", "name": "testNopClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNopClosure()", "original_string": "    @Test\n    public void testNopClosure() {\n        final StringBuilder buf = new StringBuilder(\"Hello\");\n        ClosureUtils.nopClosure().execute(null);\n        assertEquals(\"Hello\", buf.toString());\n        ClosureUtils.nopClosure().execute(\"Hello\");\n        assertEquals(\"Hello\", buf.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testSingletonPatternInSerialization()", "name": "testSingletonPatternInSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingletonPatternInSerialization()", "original_string": "    @Test\n    public void testSingletonPatternInSerialization() {\n        final Object[] singletons = {\n            ExceptionClosure.INSTANCE,\n            NOPClosure.INSTANCE,\n        };\n\n        for (final Object original : singletons) {\n            TestUtils.assertSameAfterSerialization(\n                    \"Singleton pattern broken for \" + original.getClass(),\n                    original\n            );\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that all Closure singletons hold singleton pattern in\nserialization/deserialization process.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testSwitchClosure()", "name": "testSwitchClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSwitchClosure()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSwitchClosure() {\n        final MockClosure<String> a = new MockClosure<>();\n        final MockClosure<String> b = new MockClosure<>();\n        ClosureUtils.<String>switchClosure(\n            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n            new Closure[] { a, b }).execute(\"WELL\");\n        assertEquals(0, a.count);\n        assertEquals(0, b.count);\n\n        a.reset();\n        b.reset();\n        ClosureUtils.<String>switchClosure(\n            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n            new Closure[] { a, b }).execute(\"HELLO\");\n        assertEquals(1, a.count);\n        assertEquals(0, b.count);\n\n        a.reset();\n        b.reset();\n        final MockClosure<String> c = new MockClosure<>();\n        ClosureUtils.<String>switchClosure(\n            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n            new Closure[] { a, b }, c).execute(\"WELL\");\n        assertEquals(0, a.count);\n        assertEquals(0, b.count);\n        assertEquals(1, c.count);\n\n        a.reset();\n        b.reset();\n        final Map<Predicate<String>, Closure<String>> map = new HashMap<>();\n        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n        ClosureUtils.<String>switchClosure(map).execute(null);\n        assertEquals(0, a.count);\n        assertEquals(0, b.count);\n\n        a.reset();\n        b.reset();\n        map.clear();\n        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n        ClosureUtils.switchClosure(map).execute(\"THERE\");\n        assertEquals(0, a.count);\n        assertEquals(1, b.count);\n\n        a.reset();\n        b.reset();\n        c.reset();\n        map.clear();\n        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n        map.put(null, c);\n        ClosureUtils.switchClosure(map).execute(\"WELL\");\n        assertEquals(0, a.count);\n        assertEquals(0, b.count);\n        assertEquals(1, c.count);\n\n        assertEquals(NOPClosure.INSTANCE, ClosureUtils.<String>switchClosure(new Predicate[0], new Closure[0]));\n        assertEquals(NOPClosure.INSTANCE, ClosureUtils.<String>switchClosure(new HashMap<>()));\n        map.clear();\n        map.put(null, null);\n        assertEquals(NOPClosure.INSTANCE, ClosureUtils.switchClosure(map));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.switchClosure(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.<String>switchClosure((Predicate<String>[]) null, (Closure<String>[]) null)),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.<String>switchClosure((Map<Predicate<String>, Closure<String>>) null)),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.<String>switchClosure(new Predicate[2], new Closure[2])),\n                () -> assertThrows(IllegalArgumentException.class, () -> ClosureUtils.<String>switchClosure(\n                        new Predicate[]{TruePredicate.<String>truePredicate()},\n                        new Closure[]{a, b}))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testSwitchMapClosure()", "name": "testSwitchMapClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchMapClosure()", "original_string": "    @Test\n    public void testSwitchMapClosure() {\n        final MockClosure<String> a = new MockClosure<>();\n        final MockClosure<String> b = new MockClosure<>();\n        final Map<String, Closure<String>> map = new HashMap<>();\n        map.put(\"HELLO\", a);\n        map.put(\"THERE\", b);\n        ClosureUtils.switchMapClosure(map).execute(null);\n        assertEquals(0, a.count);\n        assertEquals(0, b.count);\n\n        a.reset();\n        b.reset();\n        map.clear();\n        map.put(\"HELLO\", a);\n        map.put(\"THERE\", b);\n        ClosureUtils.switchMapClosure(map).execute(\"THERE\");\n        assertEquals(0, a.count);\n        assertEquals(1, b.count);\n\n        a.reset();\n        b.reset();\n        map.clear();\n        final MockClosure<String> c = new MockClosure<>();\n        map.put(\"HELLO\", a);\n        map.put(\"THERE\", b);\n        map.put(null, c);\n        ClosureUtils.switchMapClosure(map).execute(\"WELL\");\n        assertEquals(0, a.count);\n        assertEquals(0, b.count);\n        assertEquals(1, c.count);\n\n        assertEquals(NOPClosure.INSTANCE, ClosureUtils.switchMapClosure(new HashMap<>()));\n\n        assertThrows(NullPointerException.class, () -> ClosureUtils.switchMapClosure(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testTransformerClosure()", "name": "testTransformerClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformerClosure()", "original_string": "    @Test\n    public void testTransformerClosure() {\n        final MockTransformer<Object> mock = new MockTransformer<>();\n        final Closure<Object> closure = ClosureUtils.asClosure(mock);\n        closure.execute(null);\n        assertEquals(1, mock.count);\n        closure.execute(null);\n        assertEquals(2, mock.count);\n\n        assertEquals(ClosureUtils.nopClosure(), ClosureUtils.asClosure(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest.[void]testWhileClosure()", "name": "testWhileClosure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWhileClosure()", "original_string": "    @Test\n    public void testWhileClosure() {\n        MockClosure<Object> cmd = new MockClosure<>();\n        ClosureUtils.whileClosure(FalsePredicate.falsePredicate(), cmd).execute(null);\n        assertEquals(0, cmd.count);\n\n        cmd = new MockClosure<>();\n        ClosureUtils.whileClosure(PredicateUtils.uniquePredicate(), cmd).execute(null);\n        assertEquals(1, cmd.count);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.whileClosure(null, ClosureUtils.nopClosure())),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.whileClosure(FalsePredicate.falsePredicate(), null)),\n                () -> assertThrows(NullPointerException.class, () -> ClosureUtils.whileClosure(null, null))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java", "class_name": "ClosureUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java.ClosureUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest.[void]testGetValidIndex()", "name": "testGetValidIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValidIndex()", "original_string": "    @Test\n    public void testGetValidIndex() {\n        assertEquals(\"B\", IteratorUtils.get(iterator, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "class_name": "IteratorUtils_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest.[void]testGetInvalidIndex()", "name": "testGetInvalidIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetInvalidIndex()", "original_string": "    @Test\n    public void testGetInvalidIndex() {\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            IteratorUtils.get(iterator, 3);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "class_name": "IteratorUtils_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest.[void]testGetFromEmptyIterator()", "name": "testGetFromEmptyIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromEmptyIterator()", "original_string": "    @Test\n    public void testGetFromEmptyIterator() {\n        Iterator<String> emptyIterator = new ArrayList<String>().iterator();\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            IteratorUtils.get(emptyIterator, 0);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "class_name": "IteratorUtils_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest.[void]testGetNegativeIndex()", "name": "testGetNegativeIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNegativeIndex()", "original_string": "    @Test\n    public void testGetNegativeIndex() {\n        assertThrows(IndexOutOfBoundsException.class, () -> {\n            IteratorUtils.get(iterator, -1);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "class_name": "IteratorUtils_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java.IteratorUtils_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java.IteratorUtils_zippingIteratorTest.[void]testZippingIterator()", "name": "testZippingIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testZippingIterator()", "original_string": "    @Test\n    public void testZippingIterator() {\n        Iterator<Integer> iterator1 = Arrays.asList(1, 2, 3).iterator();\n        Iterator<Integer> iterator2 = Arrays.asList(4, 5, 6).iterator();\n        Iterator<Integer> iterator3 = Arrays.asList(7, 8, 9).iterator();\n\n        ZippingIterator<Integer> zippingIterator = IteratorUtils.zippingIterator(iterator1, iterator2, iterator3);\n\n        assertNotNull(zippingIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java", "class_name": "IteratorUtils_zippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java.IteratorUtils_zippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest.[void]testIfTransformerWithTruePredicate()", "name": "testIfTransformerWithTruePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIfTransformerWithTruePredicate()", "original_string": "    @Test\n    public void testIfTransformerWithTruePredicate() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(CONSTANT_VALUE);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertSame(CONSTANT_VALUE, ifTransformer.transform(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "class_name": "TransformerUtils_ifTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest.[void]testIfTransformerWithFalsePredicate()", "name": "testIfTransformerWithFalsePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIfTransformerWithFalsePredicate()", "original_string": "    @Test\n    public void testIfTransformerWithFalsePredicate() {\n        Predicate<Object> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(CONSTANT_VALUE);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertNull(ifTransformer.transform(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "class_name": "TransformerUtils_ifTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest.[void]testIfTransformerWithEqualPredicate()", "name": "testIfTransformerWithEqualPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIfTransformerWithEqualPredicate()", "original_string": "    @Test\n    public void testIfTransformerWithEqualPredicate() {\n        Object input = new Object();\n        Predicate<Object> equalPredicate = EqualPredicate.equalPredicate(input);\n        Transformer<Object, Object> trueTransformer = ConstantTransformer.constantTransformer(CONSTANT_VALUE);\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(equalPredicate, trueTransformer, falseTransformer);\n\n        assertSame(CONSTANT_VALUE, ifTransformer.transform(input));\n        assertNull(ifTransformer.transform(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "class_name": "TransformerUtils_ifTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest.[void]testIfTransformerWithExceptionTransformer()", "name": "testIfTransformerWithExceptionTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIfTransformerWithExceptionTransformer()", "original_string": "    @Test\n    public void testIfTransformerWithExceptionTransformer() {\n        Predicate<Object> truePredicate = TruePredicate.truePredicate();\n        Transformer<Object, Object> trueTransformer = ExceptionTransformer.exceptionTransformer();\n        Transformer<Object, Object> falseTransformer = ConstantTransformer.constantTransformer(null);\n\n        Transformer<Object, Object> ifTransformer = TransformerUtils.ifTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertThrows(FunctorException.class, () -> ifTransformer.transform(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "class_name": "TransformerUtils_ifTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java.TransformerUtils_ifTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testEmptyIfNull()", "name": "testEmptyIfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIfNull()", "original_string": "    @Test\n    public void testEmptyIfNull() {\n        assertTrue(MultiMapUtils.emptyIfNull(null).isEmpty());\n\n        final MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        map.put(\"item\", \"value\");\n        assertFalse(MultiMapUtils.emptyIfNull(map).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testEmptyUnmodifiableMultiValuedMap()", "name": "testEmptyUnmodifiableMultiValuedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public void testEmptyUnmodifiableMultiValuedMap()", "original_string": "    @Test\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public void testEmptyUnmodifiableMultiValuedMap() {\n        final MultiValuedMap map = MultiMapUtils.EMPTY_MULTI_VALUED_MAP;\n        assertTrue(map.isEmpty());\n\n        assertThrows(UnsupportedOperationException.class, () -> map.put(\"key\", \"value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"rawtypes\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testGetCollection()", "name": "testGetCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetCollection()", "original_string": "    @Test\n    public void testGetCollection() {\n        assertNull(MultiMapUtils.getCollection(null, \"key1\"));\n\n        final String[] values = { \"v1\", \"v2\", \"v3\" };\n        final MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        for (final String val : values) {\n            map.put(\"key1\", val);\n        }\n\n        final Collection<String> col = MultiMapUtils.getCollection(map, \"key1\");\n        assertEquals(Arrays.asList(values), col);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testGetValuesAsBag()", "name": "testGetValuesAsBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsBag()", "original_string": "    @Test\n    public void testGetValuesAsBag() {\n        assertNull(MultiMapUtils.getValuesAsBag(null, \"key1\"));\n\n        final String[] values = { \"v1\", \"v2\", \"v3\" };\n        final MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        for (final String val : values) {\n            map.put(\"key1\", val);\n            map.put(\"key1\", val);\n        }\n\n        final Bag<String> bag = MultiMapUtils.getValuesAsBag(map, \"key1\");\n        assertEquals(6, bag.size());\n        for (final String val : values) {\n            assertTrue(bag.contains(val));\n            assertEquals(2, bag.getCount(val));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testGetValuesAsList()", "name": "testGetValuesAsList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsList()", "original_string": "    @Test\n    public void testGetValuesAsList() {\n        assertNull(MultiMapUtils.getValuesAsList(null, \"key1\"));\n\n        final String[] values = { \"v1\", \"v2\", \"v3\" };\n        final MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        for (final String val : values) {\n            map.put(\"key1\", val);\n        }\n\n        final List<String> list = MultiMapUtils.getValuesAsList(map, \"key1\");\n        assertEquals(Arrays.asList(values), list);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testGetValuesAsSet()", "name": "testGetValuesAsSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValuesAsSet()", "original_string": "    @Test\n    public void testGetValuesAsSet() {\n        assertNull(MultiMapUtils.getValuesAsList(null, \"key1\"));\n\n        final String[] values = { \"v1\", \"v2\", \"v3\" };\n        final MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        for (final String val : values) {\n            map.put(\"key1\", val);\n            map.put(\"key1\", val);\n        }\n\n        final Set<String> set = MultiMapUtils.getValuesAsSet(map, \"key1\");\n        assertEquals(new HashSet<>(Arrays.asList(values)), set);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testIsEmptyWithEmptyMap()", "name": "testIsEmptyWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithEmptyMap()", "original_string": "    @Test\n    public void testIsEmptyWithEmptyMap() {\n        assertTrue(MultiMapUtils.isEmpty(new ArrayListValuedHashMap<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testIsEmptyWithNonEmptyMap()", "name": "testIsEmptyWithNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithNonEmptyMap()", "original_string": "    @Test\n    public void testIsEmptyWithNonEmptyMap() {\n        final MultiValuedMap<String, String> map = new ArrayListValuedHashMap<>();\n        map.put(\"item\", \"value\");\n        assertFalse(MultiMapUtils.isEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testIsEmptyWithNull()", "name": "testIsEmptyWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithNull()", "original_string": "    @Test\n    public void testIsEmptyWithNull() {\n        assertTrue(MultiMapUtils.isEmpty(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest.[void]testTypeSafeEmptyMultiValuedMap()", "name": "testTypeSafeEmptyMultiValuedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTypeSafeEmptyMultiValuedMap()", "original_string": "    @Test\n    public void testTypeSafeEmptyMultiValuedMap() {\n        final MultiValuedMap<String, String> map = MultiMapUtils.<String, String>emptyMultiValuedMap();\n        assertTrue(map.isEmpty());\n\n        assertThrows(UnsupportedOperationException.class, () -> map.put(\"key\", \"value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java", "class_name": "MultiMapUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiMapUtilsTest.java.MultiMapUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest.[void]testPeekWithNonEmptyStack()", "name": "testPeekWithNonEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekWithNonEmptyStack()", "original_string": "    @Test\n    public void testPeekWithNonEmptyStack() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(\"Second Item\", stack.peek(), \"Top item should be 'Second Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "class_name": "ArrayStack_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest.[void]testPeekWithEmptyStack()", "name": "testPeekWithEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekWithEmptyStack()", "original_string": "    @Test\n    public void testPeekWithEmptyStack() {\n        assertThrows(EmptyStackException.class, () -> stack.peek(), \"Peeking an empty stack should throw EmptyStackException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "class_name": "ArrayStack_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest.[void]testPeekAfterPop()", "name": "testPeekAfterPop", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekAfterPop()", "original_string": "    @Test\n    public void testPeekAfterPop() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.pop();\n        assertEquals(\"First Item\", stack.peek(), \"Top item should be 'First Item' after pop\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "class_name": "ArrayStack_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest.[void]testPeekWithSingleItemStack()", "name": "testPeekWithSingleItemStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekWithSingleItemStack()", "original_string": "    @Test\n    public void testPeekWithSingleItemStack() {\n        stack.push(\"Single Item\");\n        assertEquals(\"Single Item\", stack.peek(), \"Top item should be 'Single Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "class_name": "ArrayStack_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest.[void]testPeekWithMultiplePushesAndPops()", "name": "testPeekWithMultiplePushesAndPops", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekWithMultiplePushesAndPops()", "original_string": "    @Test\n    public void testPeekWithMultiplePushesAndPops() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        stack.pop();\n        stack.pop();\n        assertEquals(\"First Item\", stack.peek(), \"Top item should be 'First Item' after multiple pushes and pops\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "class_name": "ArrayStack_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java.ArrayStack_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]cardinality()", "name": "cardinality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void cardinality()", "original_string": "    @Test\n    @Deprecated\n    public void cardinality() {\n        assertEquals(1, CollectionUtils.cardinality(1, iterableA));\n        assertEquals(2, CollectionUtils.cardinality(2, iterableA));\n        assertEquals(3, CollectionUtils.cardinality(3, iterableA));\n        assertEquals(4, CollectionUtils.cardinality(4, iterableA));\n        assertEquals(0, CollectionUtils.cardinality(5, iterableA));\n\n        assertEquals(0, CollectionUtils.cardinality(1L, iterableB));\n        assertEquals(4, CollectionUtils.cardinality(2L, iterableB));\n        assertEquals(3, CollectionUtils.cardinality(3L, iterableB));\n        assertEquals(2, CollectionUtils.cardinality(4L, iterableB));\n        assertEquals(1, CollectionUtils.cardinality(5L, iterableB));\n\n        // Ensure that generic bounds accept valid parameters, but return\n        // expected results\n        // e.g. no longs in the \"int\" Iterable<Number>, and vice versa.\n        assertEquals(0, CollectionUtils.cardinality(2L, iterableA2));\n        assertEquals(0, CollectionUtils.cardinality(2, iterableB2));\n\n        final Set<String> set = new HashSet<>();\n        set.add(\"A\");\n        set.add(\"C\");\n        set.add(\"E\");\n        set.add(\"E\");\n        assertEquals(1, CollectionUtils.cardinality(\"A\", set));\n        assertEquals(0, CollectionUtils.cardinality(\"B\", set));\n        assertEquals(1, CollectionUtils.cardinality(\"C\", set));\n        assertEquals(0, CollectionUtils.cardinality(\"D\", set));\n        assertEquals(1, CollectionUtils.cardinality(\"E\", set));\n\n        final Bag<String> bag = new HashBag<>();\n        bag.add(\"A\", 3);\n        bag.add(\"C\");\n        bag.add(\"E\");\n        bag.add(\"E\");\n        assertEquals(3, CollectionUtils.cardinality(\"A\", bag));\n        assertEquals(0, CollectionUtils.cardinality(\"B\", bag));\n        assertEquals(1, CollectionUtils.cardinality(\"C\", bag));\n        assertEquals(0, CollectionUtils.cardinality(\"D\", bag));\n        assertEquals(2, CollectionUtils.cardinality(\"E\", bag));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]cardinalityOfNull()", "name": "cardinalityOfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void cardinalityOfNull()", "original_string": "    @Test\n    @Deprecated\n    public void cardinalityOfNull() {\n        final List<String> list = new ArrayList<>();\n        assertEquals(0, CollectionUtils.cardinality(null, list));\n        {\n            final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n            assertNull(freq.get(null));\n        }\n        list.add(\"A\");\n        assertEquals(0, CollectionUtils.cardinality(null, list));\n        {\n            final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n            assertNull(freq.get(null));\n        }\n        list.add(null);\n        assertEquals(1, CollectionUtils.cardinality(null, list));\n        {\n            final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n            assertEquals(Integer.valueOf(1), freq.get(null));\n        }\n        list.add(\"B\");\n        assertEquals(1, CollectionUtils.cardinality(null, list));\n        {\n            final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n            assertEquals(Integer.valueOf(1), freq.get(null));\n        }\n        list.add(null);\n        assertEquals(2, CollectionUtils.cardinality(null, list));\n        {\n            final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n            assertEquals(Integer.valueOf(2), freq.get(null));\n        }\n        list.add(\"B\");\n        assertEquals(2, CollectionUtils.cardinality(null, list));\n        {\n            final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n            assertEquals(Integer.valueOf(2), freq.get(null));\n        }\n        list.add(null);\n        assertEquals(3, CollectionUtils.cardinality(null, list));\n        {\n            final Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n            assertEquals(Integer.valueOf(3), freq.get(null));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]countMatches()", "name": "countMatches", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void countMatches()", "original_string": "    @Test\n    @Deprecated\n    public void countMatches() {\n        assertEquals(4, CollectionUtils.countMatches(iterableB, EQUALS_TWO));\n        assertEquals(0, CollectionUtils.countMatches(iterableA, null));\n        assertEquals(0, CollectionUtils.countMatches(null, EQUALS_TWO));\n        assertEquals(0, CollectionUtils.countMatches(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]exists()", "name": "exists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void exists()", "original_string": "    @Test\n    @Deprecated\n    public void exists() {\n        final List<Integer> list = new ArrayList<>();\n        assertFalse(CollectionUtils.exists(null, null));\n        assertFalse(CollectionUtils.exists(list, null));\n        assertFalse(CollectionUtils.exists(null, EQUALS_TWO));\n        assertFalse(CollectionUtils.exists(list, EQUALS_TWO));\n        list.add(1);\n        list.add(3);\n        list.add(4);\n        assertFalse(CollectionUtils.exists(list, EQUALS_TWO));\n\n        list.add(2);\n        assertTrue(CollectionUtils.exists(list, EQUALS_TWO));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]find()", "name": "find", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void find()", "original_string": "    @Test\n    @Deprecated\n    public void find() {\n        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n        Integer test = CollectionUtils.find(collectionA, testPredicate);\n        assertEquals(4, (int) test);\n        testPredicate = equalPredicate((Number) 45);\n        test = CollectionUtils.find(collectionA, testPredicate);\n        assertNull(test);\n        assertNull(CollectionUtils.find(null, testPredicate));\n        assertNull(CollectionUtils.find(collectionA, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]forAllButLastDoCollection()", "name": "forAllButLastDoCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void forAllButLastDoCollection()", "original_string": "    @Test\n    @Deprecated\n    public void forAllButLastDoCollection() {\n        final Closure<List<? extends Number>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<List<? extends Number>> col = new ArrayList<>();\n        col.add(collectionA);\n        col.add(collectionB);\n        List<? extends Number> lastElement = CollectionUtils.forAllButLastDo(col, testClosure);\n        assertSame(lastElement, collectionB);\n        assertTrue(collectionA.isEmpty() && !collectionB.isEmpty());\n\n        col.clear();\n        col.add(collectionB);\n        lastElement = CollectionUtils.forAllButLastDo(col, testClosure);\n        assertSame(lastElement, collectionB);\n        assertFalse(collectionB.isEmpty());\n\n        col.clear();\n        lastElement = CollectionUtils.forAllButLastDo(col, testClosure);\n        assertNull(lastElement);\n\n        final Collection<String> strings = Arrays.asList(\"a\", \"b\", \"c\");\n        final StringBuilder result = new StringBuilder();\n        result.append(CollectionUtils.forAllButLastDo(strings, (Closure<String>) input -> result.append(input + \";\")));\n        assertEquals(\"a;b;c\", result.toString());\n\n        final Collection<String> oneString = Arrays.asList(\"a\");\n        final StringBuilder resultOne = new StringBuilder();\n        resultOne.append(CollectionUtils.forAllButLastDo(oneString, (Closure<String>) input -> resultOne.append(input + \";\")));\n        assertEquals(\"a\", resultOne.toString());\n        assertNull(CollectionUtils.forAllButLastDo(strings, (Closure<String>) null)); // do not remove cast\n        assertNull(CollectionUtils.forAllButLastDo((Collection<String>) null, (Closure<String>) null)); // do not remove cast\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]forAllButLastDoIterator()", "name": "forAllButLastDoIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void forAllButLastDoIterator()", "original_string": "    @Test\n    @Deprecated\n    public void forAllButLastDoIterator() {\n        final Closure<List<? extends Number>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<List<? extends Number>> col = new ArrayList<>();\n        col.add(collectionA);\n        col.add(collectionB);\n        final List<? extends Number> lastElement = CollectionUtils.forAllButLastDo(col.iterator(), testClosure);\n        assertSame(lastElement, collectionB);\n        assertTrue(collectionA.isEmpty() && !collectionB.isEmpty());\n\n        assertNull(CollectionUtils.forAllButLastDo(col.iterator(), (Closure<List<? extends Number>>) null));\n        assertNull(CollectionUtils.forAllButLastDo((Iterator<String>) null, (Closure<String>) null)); // do not remove cast\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]forAllDoCollection()", "name": "forAllDoCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void forAllDoCollection()", "original_string": "    @Test\n    @Deprecated\n    public void forAllDoCollection() {\n        final Closure<Collection<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<Collection<Integer>> col = new ArrayList<>();\n        col.add(collectionA);\n        col.add(collectionC);\n        Closure<Collection<Integer>> resultClosure = CollectionUtils.forAllDo(col, testClosure);\n        assertSame(testClosure, resultClosure);\n        assertTrue(collectionA.isEmpty() && collectionC.isEmpty());\n        // fix for various java 1.6 versions: keep the cast\n        resultClosure = CollectionUtils.forAllDo(col, (Closure<Collection<Integer>>) null);\n        assertNull(resultClosure);\n        assertTrue(collectionA.isEmpty() && collectionC.isEmpty());\n        resultClosure = CollectionUtils.forAllDo((Collection<Collection<Integer>>) null, testClosure);\n        col.add(null);\n        // null should be OK\n        CollectionUtils.forAllDo(col, testClosure);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]forAllDoFailure()", "name": "forAllDoFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void forAllDoFailure()", "original_string": "    @Test\n    @Deprecated\n    public void forAllDoFailure() {\n        final Closure<String> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<String> col = new ArrayList<>();\n        col.add(\"x\");\n        assertThrows(FunctorException.class, () -> CollectionUtils.forAllDo(col, testClosure));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]forAllDoIterator()", "name": "forAllDoIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void forAllDoIterator()", "original_string": "    @Test\n    @Deprecated\n    public void forAllDoIterator() {\n        final Closure<Collection<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<Collection<Integer>> col = new ArrayList<>();\n        col.add(collectionA);\n        col.add(collectionC);\n        Closure<Collection<Integer>> resultClosure = CollectionUtils.forAllDo(col.iterator(), testClosure);\n        assertSame(testClosure, resultClosure);\n        assertTrue(collectionA.isEmpty() && collectionC.isEmpty());\n        // fix for various java 1.6 versions: keep the cast\n        resultClosure = CollectionUtils.forAllDo(col.iterator(), (Closure<Collection<Integer>>) null);\n        assertNull(resultClosure);\n        assertTrue(collectionA.isEmpty() && collectionC.isEmpty());\n        resultClosure = CollectionUtils.forAllDo((Iterator<Collection<Integer>>) null, testClosure);\n        col.add(null);\n        // null should be OK\n        CollectionUtils.forAllDo(col.iterator(), testClosure);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]getFromEnumeration()", "name": "getFromEnumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void getFromEnumeration()", "original_string": "    @Test\n    @Deprecated\n    public void getFromEnumeration() throws Exception {\n        // Enumeration, entry exists\n        final Vector<String> vector = new Vector<>();\n        vector.addElement(\"zero\");\n        vector.addElement(\"one\");\n        Enumeration<String> en = vector.elements();\n        assertEquals(\"zero\", CollectionUtils.get(en, 0));\n        en = vector.elements();\n        assertEquals(\"one\", CollectionUtils.get(en, 1));\n\n        // Enumerator, non-existent entry\n        final Enumeration<String> finalEn = en;\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(finalEn, 3),\n                \"Expecting IndexOutOfBoundsException.\");\n\n        assertFalse(en.hasMoreElements());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]getFromIterable()", "name": "getFromIterable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void getFromIterable()", "original_string": "    @Test\n    @Deprecated\n    public void getFromIterable() throws Exception {\n        // Collection, entry exists\n        final Bag<String> bag = new HashBag<>();\n        bag.add(\"element\", 1);\n        assertEquals(\"element\", CollectionUtils.get(bag, 0));\n\n        // Collection, non-existent entry\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(bag, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]getFromIterator()", "name": "getFromIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void getFromIterator()", "original_string": "    @Test\n    @Deprecated\n    public void getFromIterator() throws Exception {\n        // Iterator, entry exists\n        Iterator<Integer> iterator = iterableA.iterator();\n        assertEquals(1, (int) CollectionUtils.get(iterator, 0));\n        iterator = iterableA.iterator();\n        assertEquals(2, (int) CollectionUtils.get(iterator, 1));\n\n        // Iterator, non-existent entry\n        final Iterator<Integer> finalIterator = iterator;\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(finalIterator, 10),\n                \"Expecting IndexOutOfBoundsException.\");\n\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddAllForElements()", "name": "testAddAllForElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllForElements()", "original_string": "    @Test\n    public void testAddAllForElements() {\n        CollectionUtils.addAll(collectionA, 5);\n        assertTrue(collectionA.contains(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddAllForEnumeration()", "name": "testAddAllForEnumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllForEnumeration()", "original_string": "    @Test\n    public void testAddAllForEnumeration() {\n        final Hashtable<Integer, Integer> h = new Hashtable<>();\n        h.put(5, 5);\n        final Enumeration<? extends Integer> enumeration = h.keys();\n        CollectionUtils.addAll(collectionA, enumeration);\n        assertTrue(collectionA.contains(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddAllForIterable()", "name": "testAddAllForIterable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllForIterable()", "original_string": "    @Test\n    public void testAddAllForIterable() {\n        final Collection<Integer> inputCollection = createMock(Collection.class);\n        final Iterable<Integer> inputIterable = inputCollection;\n        final Iterable<Long> iterable = createMock(Iterable.class);\n        final Iterator<Long> iterator = createMock(Iterator.class);\n        final Collection<Number> c = createMock(Collection.class);\n\n        expect(iterable.iterator()).andReturn(iterator);\n        next(iterator, 1L);\n        next(iterator, 2L);\n        next(iterator, 3L);\n        expect(iterator.hasNext()).andReturn(false);\n        expect(c.add(1L)).andReturn(true);\n        expect(c.add(2L)).andReturn(true);\n        expect(c.add(3L)).andReturn(true);\n        // Check that the collection is added using\n        // Collection.addAll(Collection)\n        expect(c.addAll(inputCollection)).andReturn(true);\n\n        // Ensure the method returns false if nothing is added\n        expect(iterable.iterator()).andReturn(iterator);\n        next(iterator, 1L);\n        expect(iterator.hasNext()).andReturn(false);\n        expect(c.add(1L)).andReturn(false);\n        expect(c.addAll(inputCollection)).andReturn(false);\n\n        replay();\n        assertTrue(CollectionUtils.addAll(c, iterable));\n        assertTrue(CollectionUtils.addAll(c, inputIterable));\n\n        assertFalse(CollectionUtils.addAll(c, iterable));\n        assertFalse(CollectionUtils.addAll(c, inputIterable));\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nThis test ensures that {@link Iterable}s are supported by {@link CollectionUtils}.\nSpecifically, it uses mocks to ensure that if the passed in\n{@link Iterable} is a {@link Collection} then\n{@link Collection#addAll(Collection)} is called instead of iterating.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testaddAllNullColl1()", "name": "testaddAllNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testaddAllNullColl1()", "original_string": "    @Test\n    public void testaddAllNullColl1() {\n        final List<Integer> list = new ArrayList<>();\n        assertThrows(NullPointerException.class, () -> CollectionUtils.addAll(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddAllNullColl2()", "name": "testAddAllNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllNullColl2()", "original_string": "    @Test\n    public void testAddAllNullColl2() {\n        final List<Integer> list = new ArrayList<>();\n        final Iterable<Integer> list2 = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.addAll(list, list2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddAllNullColl3()", "name": "testAddAllNullColl3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllNullColl3()", "original_string": "    @Test\n    public void testAddAllNullColl3() {\n        final List<Integer> list = new ArrayList<>();\n        final Iterator<Integer> list2 = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.addAll(list, list2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddAllNullColl4()", "name": "testAddAllNullColl4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllNullColl4()", "original_string": "    @Test\n    public void testAddAllNullColl4() {\n        final List<Integer> list = new ArrayList<>();\n        final Enumeration<Integer> enumArray = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.addAll(list, enumArray));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddAllNullColl5()", "name": "testAddAllNullColl5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllNullColl5()", "original_string": "    @Test\n    public void testAddAllNullColl5() {\n        final List<Integer> list = new ArrayList<>();\n        final Integer[] array = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.addAll(list, array));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddIgnoreNull()", "name": "testAddIgnoreNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddIgnoreNull()", "original_string": "    @Test\n    public void testAddIgnoreNull() {\n        final Set<String> set = new HashSet<>();\n        set.add(\"1\");\n        set.add(\"2\");\n        set.add(\"3\");\n        assertFalse(CollectionUtils.addIgnoreNull(set, null));\n        assertEquals(3, set.size());\n        assertFalse(CollectionUtils.addIgnoreNull(set, \"1\"));\n        assertEquals(3, set.size());\n        assertTrue(CollectionUtils.addIgnoreNull(set, \"4\"));\n        assertEquals(4, set.size());\n        assertTrue(set.contains(\"4\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testAddIgnoreNullNullColl()", "name": "testAddIgnoreNullNullColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddIgnoreNullNullColl()", "original_string": "    @Test\n    public void testAddIgnoreNullNullColl() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.addIgnoreNull(null, \"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testCollate()", "name": "testCollate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollate()", "original_string": "    @Test\n    public void testCollate() {\n        List<Integer> result = CollectionUtils.collate(emptyCollection, emptyCollection);\n        assertEquals(0, result.size(), \"Merge empty with empty\");\n\n        result = CollectionUtils.collate(collectionA, emptyCollection);\n        assertEquals(collectionA, result, \"Merge empty with non-empty\");\n\n        List<Integer> result1 = CollectionUtils.collate(collectionD, collectionE);\n        List<Integer> result2 = CollectionUtils.collate(collectionE, collectionD);\n        assertEquals(result1, result2, \"Merge two lists 1\");\n\n        final List<Integer> combinedList = new ArrayList<>(collectionD);\n        combinedList.addAll(collectionE);\n        Collections.sort(combinedList);\n\n        assertEquals(combinedList, result2, \"Merge two lists 2\");\n\n        final Comparator<Integer> reverseComparator =\n                ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());\n\n        result = CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);\n        assertEquals(0, result.size(), \"Comparator Merge empty with empty\");\n\n        Collections.reverse((List<Integer>) collectionD);\n        Collections.reverse((List<Integer>) collectionE);\n        Collections.reverse(combinedList);\n\n        result1 = CollectionUtils.collate(collectionD, collectionE, reverseComparator);\n        result2 = CollectionUtils.collate(collectionE, collectionD, reverseComparator);\n        assertEquals(result1, result2, \"Comparator Merge two lists 1\");\n        assertEquals(combinedList, result2, \"Comparator Merge two lists 2\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testCollateException0()", "name": "testCollateException0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateException0()", "original_string": "    @Test\n    public void testCollateException0() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.collate(null, collectionC));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testCollateException1()", "name": "testCollateException1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateException1()", "original_string": "    @Test\n    public void testCollateException1() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.collate(collectionA, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testCollateException2()", "name": "testCollateException2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateException2()", "original_string": "    @Test\n    public void testCollateException2() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.collate(collectionA, collectionC, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testCollateIgnoreDuplicates()", "name": "testCollateIgnoreDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateIgnoreDuplicates()", "original_string": "    @Test\n    public void testCollateIgnoreDuplicates() {\n        final List<Integer> result1 = CollectionUtils.collate(collectionD, collectionE, false);\n        final List<Integer> result2 = CollectionUtils.collate(collectionE, collectionD, false);\n        assertEquals(result1, result2, \"Merge two lists 1 - ignore duplicates\");\n\n        final Set<Integer> combinedSet = new HashSet<>(collectionD);\n        combinedSet.addAll(collectionE);\n        final List<Integer> combinedList = new ArrayList<>(combinedSet);\n        Collections.sort(combinedList);\n\n        assertEquals(combinedList, result2, \"Merge two lists 2 - ignore duplicates\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testCollect()", "name": "testCollect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollect()", "original_string": "    @Test\n    public void testCollect() {\n        final Transformer<Number, Long> transformer = TransformerUtils.constantTransformer(2L);\n        Collection<Number> collection = CollectionUtils.<Integer, Number>collect(iterableA, transformer);\n        assertEquals(collection.size(), collectionA.size());\n        assertCollectResult(collection);\n\n        ArrayList<Number> list;\n        list = CollectionUtils.collect(collectionA, transformer, new ArrayList<>());\n        assertEquals(list.size(), collectionA.size());\n        assertCollectResult(list);\n\n        Iterator<Integer> iterator = null;\n        list = CollectionUtils.collect(iterator, transformer, new ArrayList<>());\n\n        iterator = iterableA.iterator();\n        list = CollectionUtils.collect(iterator, transformer, list);\n        assertEquals(collection.size(), collectionA.size());\n        assertCollectResult(collection);\n\n        iterator = collectionA.iterator();\n        collection = CollectionUtils.<Integer, Number>collect(iterator, transformer);\n        assertEquals(collection.size(), collectionA.size());\n        assertTrue(collection.contains(2L) && !collection.contains(1));\n        collection = CollectionUtils.collect((Iterator<Integer>) null, (Transformer<Integer, Number>) null);\n        assertTrue(collection.isEmpty());\n\n        final int size = collectionA.size();\n        collectionB = CollectionUtils.collect((Collection<Integer>) null, transformer, collectionB);\n        assertTrue(collectionA.size() == size && collectionA.contains(1));\n        CollectionUtils.collect(collectionB, null, collectionA);\n        assertTrue(collectionA.size() == size && collectionA.contains(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAll()", "name": "testContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAll()", "original_string": "    @Test\n    public void testContainsAll() {\n        final Collection<String> empty = new ArrayList<>(0);\n        final Collection<String> one = new ArrayList<>(1);\n        one.add(\"1\");\n        final Collection<String> two = new ArrayList<>(1);\n        two.add(\"2\");\n        final Collection<String> three = new ArrayList<>(1);\n        three.add(\"3\");\n        final Collection<String> odds = new ArrayList<>(2);\n        odds.add(\"1\");\n        odds.add(\"3\");\n        final Collection<String> multiples = new ArrayList<>(3);\n        multiples.add(\"1\");\n        multiples.add(\"3\");\n        multiples.add(\"1\");\n\n        assertFalse(CollectionUtils.containsAll(one, odds), \"containsAll({1},{1,3}) should return false.\");\n        assertTrue(CollectionUtils.containsAll(odds, one), \"containsAll({1,3},{1}) should return true.\");\n        assertFalse(CollectionUtils.containsAll(three, odds), \"containsAll({3},{1,3}) should return false.\");\n        assertTrue(CollectionUtils.containsAll(odds, three), \"containsAll({1,3},{3}) should return true.\");\n        assertTrue(CollectionUtils.containsAll(two, two), \"containsAll({2},{2}) should return true.\");\n        assertTrue(CollectionUtils.containsAll(odds, odds), \"containsAll({1,3},{1,3}) should return true.\");\n\n        assertFalse(CollectionUtils.containsAll(two, odds), \"containsAll({2},{1,3}) should return false.\");\n        assertFalse(CollectionUtils.containsAll(odds, two), \"containsAll({1,3},{2}) should return false.\");\n        assertFalse(CollectionUtils.containsAll(one, three), \"containsAll({1},{3}) should return false.\");\n        assertFalse(CollectionUtils.containsAll(three, one), \"containsAll({3},{1}) should return false.\");\n        assertTrue(CollectionUtils.containsAll(odds, empty), \"containsAll({1,3},{}) should return true.\");\n        assertFalse(CollectionUtils.containsAll(empty, odds), \"containsAll({},{1,3}) should return false.\");\n        assertTrue(CollectionUtils.containsAll(empty, empty), \"containsAll({},{}) should return true.\");\n\n        assertTrue(CollectionUtils.containsAll(odds, multiples), \"containsAll({1,3},{1,3,1}) should return true.\");\n        assertTrue(CollectionUtils.containsAll(odds, odds), \"containsAll({1,3,1},{1,3,1}) should return true.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyInArray()", "name": "testContainsAnyInArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyInArray()", "original_string": "    @Test\n    public void testContainsAnyInArray() {\n        final Collection<String> empty = new ArrayList<>(0);\n        final String[] emptyArr = {};\n        final Collection<String> one = new ArrayList<>(1);\n        one.add(\"1\");\n        final String[] oneArr = {\"1\"};\n        final Collection<String> two = new ArrayList<>(1);\n        two.add(\"2\");\n        final String[] twoArr = {\"2\"};\n        final Collection<String> three = new ArrayList<>(1);\n        three.add(\"3\");\n        final String[] threeArr = {\"3\"};\n        final Collection<String> odds = new ArrayList<>(2);\n        odds.add(\"1\");\n        odds.add(\"3\");\n        final String[] oddsArr = {\"1\", \"3\"};\n\n        assertTrue(CollectionUtils.containsAny(one, oddsArr), \"containsAny({1},{1,3}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(odds, oneArr), \"containsAny({1,3},{1}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(three, oddsArr), \"containsAny({3},{1,3}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(odds, threeArr), \"containsAny({1,3},{3}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(two, twoArr), \"containsAny({2},{2}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(odds, oddsArr), \"containsAny({1,3},{1,3}) should return true.\");\n\n        assertFalse(CollectionUtils.containsAny(two, oddsArr), \"containsAny({2},{1,3}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(odds, twoArr), \"containsAny({1,3},{2}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(one, threeArr), \"containsAny({1},{3}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(three, oneArr), \"containsAny({3},{1}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(odds, emptyArr), \"containsAny({1,3},{}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(empty, oddsArr), \"containsAny({},{1,3}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(empty, emptyArr), \"containsAny({},{}) should return false.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyInArrayNullArray()", "name": "testContainsAnyInArrayNullArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyInArrayNullArray()", "original_string": "    @Test\n    public void testContainsAnyInArrayNullArray() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        final String[] array = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.containsAny(list, array));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyInArrayNullColl1()", "name": "testContainsAnyInArrayNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyInArrayNullColl1()", "original_string": "    @Test\n    public void testContainsAnyInArrayNullColl1() {\n        final String[] oneArr = {\"1\"};\n        assertThrows(NullPointerException.class, () -> CollectionUtils.containsAny(null, oneArr));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyInArrayNullColl2()", "name": "testContainsAnyInArrayNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyInArrayNullColl2()", "original_string": "    @Test\n    public void testContainsAnyInArrayNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        final Collection<String> list2 = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.containsAny(list, list2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyInCollection()", "name": "testContainsAnyInCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyInCollection()", "original_string": "    @Test\n    public void testContainsAnyInCollection() {\n        final Collection<String> empty = new ArrayList<>(0);\n        final Collection<String> one = new ArrayList<>(1);\n        one.add(\"1\");\n        final Collection<String> two = new ArrayList<>(1);\n        two.add(\"2\");\n        final Collection<String> three = new ArrayList<>(1);\n        three.add(\"3\");\n        final Collection<String> odds = new ArrayList<>(2);\n        odds.add(\"1\");\n        odds.add(\"3\");\n\n        assertTrue(CollectionUtils.containsAny(one, odds), \"containsAny({1},{1,3}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(odds, one), \"containsAny({1,3},{1}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(three, odds), \"containsAny({3},{1,3}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(odds, three), \"containsAny({1,3},{3}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(two, two), \"containsAny({2},{2}) should return true.\");\n        assertTrue(CollectionUtils.containsAny(odds, odds), \"containsAny({1,3},{1,3}) should return true.\");\n\n        assertFalse(CollectionUtils.containsAny(two, odds), \"containsAny({2},{1,3}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(odds, two), \"containsAny({1,3},{2}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(one, three), \"containsAny({1},{3}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(three, one), \"containsAny({3},{1}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(odds, empty), \"containsAny({1,3},{}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(empty, odds), \"containsAny({},{1,3}) should return false.\");\n        assertFalse(CollectionUtils.containsAny(empty, empty), \"containsAny({},{}) should return false.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyNullColl1()", "name": "testContainsAnyNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyNullColl1()", "original_string": "    @Test\n    public void testContainsAnyNullColl1() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.containsAny(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyNullColl2()", "name": "testContainsAnyNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyNullColl2()", "original_string": "    @Test\n    public void testContainsAnyNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        final Collection<String> list2 = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.containsAny(list, list2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testContainsAnyNullColl3()", "name": "testContainsAnyNullColl3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAnyNullColl3()", "original_string": "    @Test\n    public void testContainsAnyNullColl3() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        final String[] array = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.containsAny(list, array));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testDisjunction()", "name": "testDisjunction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisjunction()", "original_string": "    @Test\n    public void testDisjunction() {\n        final Collection<Integer> col = CollectionUtils.disjunction(iterableA, iterableC);\n        final Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n        assertEquals(Integer.valueOf(1), freq.get(1));\n        assertEquals(Integer.valueOf(2), freq.get(2));\n        assertNull(freq.get(3));\n        assertEquals(Integer.valueOf(2), freq.get(4));\n        assertEquals(Integer.valueOf(1), freq.get(5));\n\n        final Collection<Number> col2 = CollectionUtils.disjunction(collectionC2, collectionA);\n        final Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);\n        assertEquals(Integer.valueOf(1), freq2.get(1));\n        assertEquals(Integer.valueOf(2), freq2.get(2));\n        assertNull(freq2.get(3));\n        assertEquals(Integer.valueOf(2), freq2.get(4));\n        assertEquals(Integer.valueOf(1), freq2.get(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testDisjunctionAsSymmetricDifference()", "name": "testDisjunctionAsSymmetricDifference", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisjunctionAsSymmetricDifference()", "original_string": "    @Test\n    public void testDisjunctionAsSymmetricDifference() {\n        final Collection<Number> dis = CollectionUtils.<Number>disjunction(collectionA, collectionC);\n        final Collection<Number> amb = CollectionUtils.<Number>subtract(collectionA, collectionC);\n        final Collection<Number> bma = CollectionUtils.<Number>subtract(collectionC, collectionA);\n        assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.union(amb, bma)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testDisjunctionAsUnionMinusIntersection()", "name": "testDisjunctionAsUnionMinusIntersection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisjunctionAsUnionMinusIntersection()", "original_string": "    @Test\n    public void testDisjunctionAsUnionMinusIntersection() {\n        final Collection<Number> dis = CollectionUtils.<Number>disjunction(collectionA, collectionC);\n        final Collection<Number> un = CollectionUtils.<Number>union(collectionA, collectionC);\n        final Collection<Number> inter = CollectionUtils.<Number>intersection(collectionA, collectionC);\n        assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.subtract(un, inter)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testDisjunctionNullColl1()", "name": "testDisjunctionNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisjunctionNullColl1()", "original_string": "    @Test\n    public void testDisjunctionNullColl1() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.disjunction(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testDisjunctionNullColl2()", "name": "testDisjunctionNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisjunctionNullColl2()", "original_string": "    @Test\n    public void testDisjunctionNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.disjunction(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testEmptyCollection()", "name": "testEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyCollection()", "original_string": "    @Test\n    public void testEmptyCollection() throws Exception {\n        final Collection<Number> coll = CollectionUtils.emptyCollection();\n        assertEquals(CollectionUtils.EMPTY_COLLECTION, coll);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testEmptyIfNull()", "name": "testEmptyIfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIfNull()", "original_string": "    @Test\n    public void testEmptyIfNull() {\n        assertTrue(CollectionUtils.emptyIfNull(null).isEmpty());\n        final Collection<Object> collection = new ArrayList<>();\n        assertSame(collection, CollectionUtils.emptyIfNull(collection));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testExtractSingleton()", "name": "testExtractSingleton", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtractSingleton()", "original_string": "    @Test\n    public void testExtractSingleton() {\n        assertAll(\n                () -> {\n                    final ArrayList<String> collNull = null;\n                    assertThrows(NullPointerException.class, () -> CollectionUtils.extractSingleton(collNull),\n                            \"expected NullPointerException from extractSingleton(null)\");\n                },\n                () -> {\n                    final ArrayList<String> collEmpty = new ArrayList<>();\n                    assertThrows(IllegalArgumentException.class, () -> CollectionUtils.extractSingleton(collEmpty),\n                            \"expected IllegalArgumentException from extractSingleton(empty)\");\n                },\n                () -> {\n                    final ArrayList<String> coll = new ArrayList<>();\n                    coll.add(\"foo\");\n                    assertEquals(\"foo\", CollectionUtils.extractSingleton(coll));\n                    coll.add(\"bar\");\n\n                    assertThrows(IllegalArgumentException.class, () -> CollectionUtils.extractSingleton(coll),\n                            \"expected IllegalArgumentException from extractSingleton(size == 2)\");\n                }\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testFilter()", "name": "testFilter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilter()", "original_string": "    @Test\n    public void testFilter() {\n        final List<Integer> ints = new ArrayList<>();\n        ints.add(1);\n        ints.add(2);\n        ints.add(3);\n        ints.add(3);\n        final Iterable<Integer> iterable = ints;\n        assertTrue(CollectionUtils.filter(iterable, EQUALS_TWO));\n        assertEquals(1, ints.size());\n        assertEquals(2, (int) ints.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "Up to here"}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testFilterInverse()", "name": "testFilterInverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilterInverse()", "original_string": "    @Test\n    public void testFilterInverse() {\n        final List<Integer> ints = new ArrayList<>();\n        ints.add(1);\n        ints.add(2);\n        ints.add(3);\n        ints.add(3);\n        final Iterable<Integer> iterable = ints;\n        assertTrue(CollectionUtils.filterInverse(iterable, EQUALS_TWO));\n        assertEquals(3, ints.size());\n        assertEquals(1, (int) ints.get(0));\n        assertEquals(3, (int) ints.get(1));\n        assertEquals(3, (int) ints.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testFilterInverseNullParameters()", "name": "testFilterInverseNullParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilterInverseNullParameters()", "original_string": "    @Test\n    public void testFilterInverseNullParameters() throws Exception {\n        final List<Long> longs = Collections.nCopies(4, 10L);\n        assertFalse(CollectionUtils.filterInverse(longs, null));\n        assertEquals(4, longs.size());\n        assertFalse(CollectionUtils.filterInverse(null, EQUALS_TWO));\n        assertEquals(4, longs.size());\n        assertFalse(CollectionUtils.filterInverse(null, null));\n        assertEquals(4, longs.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testFilterNullParameters()", "name": "testFilterNullParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilterNullParameters()", "original_string": "    @Test\n    public void testFilterNullParameters() throws Exception {\n        final List<Long> longs = Collections.nCopies(4, 10L);\n        assertFalse(CollectionUtils.filter(longs, null));\n        assertEquals(4, longs.size());\n        assertFalse(CollectionUtils.filter(null, EQUALS_TWO));\n        assertEquals(4, longs.size());\n        assertFalse(CollectionUtils.filter(null, null));\n        assertEquals(4, longs.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet()", "original_string": "    @Test\n    public void testGet() {\n        assertEquals(2, CollectionUtils.get((Object) collectionA, 2));\n        assertEquals(2, CollectionUtils.get((Object) collectionA.iterator(), 2));\n        final Map<Integer, Integer> map = CollectionUtils.getCardinalityMap(collectionA);\n        // Test assumes a defined iteration order so convert to a LinkedHashMap\n        final Map<Integer, Integer> linkedMap = new LinkedHashMap<>(map);\n        assertEquals(linkedMap.entrySet().iterator().next(), CollectionUtils.get((Object) linkedMap, 0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGet1()", "name": "testGet1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet1()", "original_string": "    @Test\n    public void testGet1() {\n        assertThrows(IllegalArgumentException.class, () -> CollectionUtils.get((Object) null, 0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetCardinalityMap()", "name": "testGetCardinalityMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetCardinalityMap()", "original_string": "    @Test\n    public void testGetCardinalityMap() {\n        final Map<Number, Integer> freqA = CollectionUtils.<Number>getCardinalityMap(iterableA);\n        assertEquals(1, (int) freqA.get(1));\n        assertEquals(2, (int) freqA.get(2));\n        assertEquals(3, (int) freqA.get(3));\n        assertEquals(4, (int) freqA.get(4));\n        assertNull(freqA.get(5));\n\n        final Map<Long, Integer> freqB = CollectionUtils.getCardinalityMap(iterableB);\n        assertNull(freqB.get(1L));\n        assertEquals(4, (int) freqB.get(2L));\n        assertEquals(3, (int) freqB.get(3L));\n        assertEquals(2, (int) freqB.get(4L));\n        assertEquals(1, (int) freqB.get(5L));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetCardinalityMapNull()", "name": "testGetCardinalityMapNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetCardinalityMapNull()", "original_string": "    @Test\n    public void testGetCardinalityMapNull() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.getCardinalityMap(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetEnumeration()", "name": "testGetEnumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetEnumeration()", "original_string": "    @Test\n    public void testGetEnumeration() {\n        final Vector<Integer> vectorA = new Vector<>(collectionA);\n        final Enumeration<Integer> e = vectorA.elements();\n        assertEquals(Integer.valueOf(2), CollectionUtils.get(e, 2));\n        assertTrue(e.hasMoreElements());\n        assertEquals(Integer.valueOf(4), CollectionUtils.get(e, 6));\n        assertFalse(e.hasMoreElements());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromHashMap()", "name": "testGetFromHashMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromHashMap()", "original_string": "    @Test\n    public void testGetFromHashMap() {\n        // Unordered map, entries exist\n        final Map<String, String> expected = new HashMap<>();\n        expected.put(\"zeroKey\", \"zero\");\n        expected.put(\"oneKey\", \"one\");\n\n        Map.Entry<String, String> entry = CollectionUtils.get(expected, 0);\n        assertTrue(entry.toString().equals(\"zeroKey=zero\") || entry.toString().equals(\"oneKey=one\"));\n        entry = CollectionUtils.get(expected, 1);\n        assertTrue(entry.toString().equals(\"zeroKey=zero\") || entry.toString().equals(\"oneKey=one\"));\n\n        // Map index out of range\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(expected, 2),\n                        \"Expecting IndexOutOfBoundsException.\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(expected, -2),\n                        \"Expecting IndexOutOfBoundsException.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromLinkedHashMap()", "name": "testGetFromLinkedHashMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromLinkedHashMap()", "original_string": "    @Test\n    public void testGetFromLinkedHashMap() {\n        // Ordered map, entries exist\n        final Map<String, String> expected = new LinkedHashMap<>();\n        expected.put(\"zeroKey\", \"zero\");\n        expected.put(\"oneKey\", \"one\");\n\n        final Map<String, String> found = new LinkedHashMap<>();\n        Map.Entry<String, String> entry = CollectionUtils.get(expected, 0);\n        found.put(entry.getKey(), entry.getValue());\n        entry = CollectionUtils.get(expected, 1);\n        found.put(entry.getKey(), entry.getValue());\n        assertEquals(expected, found);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromList()", "name": "testGetFromList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromList()", "original_string": "    @Test\n    public void testGetFromList() throws Exception {\n        // List, entry exists\n        final List<String> list = createMock(List.class);\n        expect(list.get(0)).andReturn(\"zero\");\n        expect(list.get(1)).andReturn(\"one\");\n        replay();\n        final String string = CollectionUtils.get(list, 0);\n        assertEquals(\"zero\", string);\n        assertEquals(\"one\", CollectionUtils.get(list, 1));\n        // list, non-existent entry -- IndexOutOfBoundsException\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(new ArrayList<>(), 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that {@link List}s are handled correctly - e.g. using\n{@link List#get(int)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromMapIndexOutOfRange()", "name": "testGetFromMapIndexOutOfRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromMapIndexOutOfRange()", "original_string": "    @Test\n    public void testGetFromMapIndexOutOfRange() {\n        // Ordered map, entries exist\n        final Map<String, String> expected = new LinkedHashMap<>();\n        expected.put(\"zeroKey\", \"zero\");\n        expected.put(\"oneKey\", \"one\");\n\n        // Map index out of range\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(expected, 2),\n                        \"Expecting IndexOutOfBoundsException.\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(expected, -2),\n                        \"Expecting IndexOutOfBoundsException.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromObject()", "name": "testGetFromObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromObject()", "original_string": "    @Test\n    public void testGetFromObject() throws Exception {\n        // Invalid object\n        final Object obj = new Object();\n        assertThrows(IllegalArgumentException.class, () -> CollectionUtils.get(obj, 0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromObjectArray()", "name": "testGetFromObjectArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromObjectArray()", "original_string": "    @Test\n    public void testGetFromObjectArray() throws Exception {\n        // Object array, entry exists\n        final Object[] objArray = new Object[2];\n        objArray[0] = \"zero\";\n        objArray[1] = \"one\";\n        assertEquals(\"zero\", CollectionUtils.get(objArray, 0));\n        assertEquals(\"one\", CollectionUtils.get(objArray, 1));\n\n        // Object array, non-existent entry --\n        // ArrayIndexOutOfBoundsException\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(objArray, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromPrimitiveArray()", "name": "testGetFromPrimitiveArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromPrimitiveArray()", "original_string": "    @Test\n    public void testGetFromPrimitiveArray() throws Exception {\n        // Primitive array, entry exists\n        final int[] array = new int[2];\n        array[0] = 10;\n        array[1] = 20;\n        assertEquals(10, CollectionUtils.get(array, 0));\n        assertEquals(20, CollectionUtils.get(array, 1));\n\n        // Object array, non-existent entry --\n        // ArrayIndexOutOfBoundsException\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get(array, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetFromTreeMap()", "name": "testGetFromTreeMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromTreeMap()", "original_string": "    @Test\n    public void testGetFromTreeMap() {\n        // Ordered map, entries exist\n        final Map<String, String> expected = new LinkedHashMap<>();\n        expected.put(\"zeroKey\", \"zero\");\n        expected.put(\"oneKey\", \"one\");\n\n        // Sorted map, entries exist, should respect order\n        final SortedMap<String, String> map = new TreeMap<>();\n        map.put(\"zeroKey\", \"zero\");\n        map.put(\"oneKey\", \"one\");\n        Map.Entry<String, String> test = CollectionUtils.get(map, 1);\n        assertEquals(\"zeroKey\", test.getKey());\n        assertEquals(\"zero\", test.getValue());\n        test = CollectionUtils.get(map, 0);\n        assertEquals(\"oneKey\", test.getKey());\n        assertEquals(\"one\", test.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetIterator()", "name": "testGetIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator()", "original_string": "    @Test\n    public void testGetIterator() {\n        final Iterator<Integer> it = collectionA.iterator();\n        assertEquals(Integer.valueOf(2), CollectionUtils.get((Object) it, 2));\n        assertTrue(it.hasNext());\n        assertEquals(Integer.valueOf(4), CollectionUtils.get((Object) it, 6));\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetNegative()", "name": "testGetNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNegative()", "original_string": "    @Test\n    public void testGetNegative() {\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get((Object) collectionA, -3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testGetPositiveOutOfBounds()", "name": "testGetPositiveOutOfBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetPositiveOutOfBounds()", "original_string": "    @Test\n    public void testGetPositiveOutOfBounds() {\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.get((Object) collectionA.iterator(), 30));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        final Equator<Integer> e = new Equator<Integer>() {\n            @Override\n            public boolean equate(final Integer o1, final Integer o2) {\n                if (o1 % 2 == 0 ^ o2 % 2 == 0) {\n                    return false;\n                }\n                return true;\n            }\n\n            @Override\n            public int hash(final Integer o) {\n                return o == null ? 0 : Objects.hashCode(o);\n            }\n        };\n\n        assertEquals(collectionA.hashCode(), CollectionUtils.hashCode(collectionA, e));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testHashCodeNullCollection()", "name": "testHashCodeNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeNullCollection()", "original_string": "    @Test\n    public void testHashCodeNullCollection() {\n        final Equator<Integer> e = new Equator<Integer>() {\n            @Override\n            public boolean equate(final Integer o1, final Integer o2) {\n                if (o1 % 2 == 0 ^ o2 % 2 == 0) {\n                    return false;\n                }\n                return true;\n            }\n\n            @Override\n            public int hash(final Integer o) {\n                return o == null ? 0 : Objects.hashCode(o);\n            }\n        };\n\n        final Collection<Integer> collection = null;\n        assertEquals(0, CollectionUtils.hashCode(collection, e));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testHashCodeNullEquator()", "name": "testHashCodeNullEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeNullEquator()", "original_string": "    @Test\n    public void testHashCodeNullEquator() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.hashCode(collectionB, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIntersection()", "name": "testIntersection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersection()", "original_string": "    @Test\n    public void testIntersection() {\n        final Collection<Integer> col = CollectionUtils.intersection(iterableA, iterableC);\n        final Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n        assertNull(freq.get(1));\n        assertEquals(Integer.valueOf(2), freq.get(2));\n        assertEquals(Integer.valueOf(3), freq.get(3));\n        assertEquals(Integer.valueOf(2), freq.get(4));\n        assertNull(freq.get(5));\n\n        final Collection<Number> col2 = CollectionUtils.intersection(collectionC2, collectionA);\n        final Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);\n        assertNull(freq2.get(1));\n        assertEquals(Integer.valueOf(2), freq2.get(2));\n        assertEquals(Integer.valueOf(3), freq2.get(3));\n        assertEquals(Integer.valueOf(2), freq2.get(4));\n        assertNull(freq2.get(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIntersectionNullColl1()", "name": "testIntersectionNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionNullColl1()", "original_string": "    @Test\n    public void testIntersectionNullColl1() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.intersection(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIntersectionNullColl2()", "name": "testIntersectionNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionNullColl2()", "original_string": "    @Test\n    public void testIntersectionNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.intersection(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIntersectionUsesMethodEquals()", "name": "testIntersectionUsesMethodEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionUsesMethodEquals()", "original_string": "    @Test\n    public void testIntersectionUsesMethodEquals() {\n        // Let elta and eltb be objects...\n        final Integer elta = 17;\n        final Integer eltb = 17;\n\n        // ...which are the same (==)\n        assertSame(elta, eltb);\n\n        // Let cola and colb be collections...\n        final Collection<Number> cola = new ArrayList<>();\n        final Collection<Integer> colb = new ArrayList<>();\n\n        // ...which contain elta and eltb,\n        // respectively.\n        cola.add(elta);\n        colb.add(eltb);\n\n        // Then the intersection of the two\n        // should contain one element.\n        final Collection<Number> intersection = CollectionUtils.intersection(cola, colb);\n        assertEquals(1, intersection.size());\n\n        // In practice, this element will be the same (==) as elta\n        // or eltb, although this isn't strictly part of the\n        // contract.\n        final Object eltc = intersection.iterator().next();\n        assertTrue(eltc == elta && eltc == eltb);\n\n        // In any event, this element remains equal,\n        // to both elta and eltb.\n        assertEquals(elta, eltc);\n        assertEquals(eltc, elta);\n        assertEquals(eltb, eltc);\n        assertEquals(eltc, eltb);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEmpty()", "name": "testIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmpty()", "original_string": "    @Test\n    public void testIsEmpty() {\n        assertFalse(CollectionUtils.isNotEmpty(null));\n        assertTrue(CollectionUtils.isNotEmpty(collectionA));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEmptyWithEmptyCollection()", "name": "testIsEmptyWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithEmptyCollection()", "original_string": "    @Test\n    public void testIsEmptyWithEmptyCollection() {\n        assertTrue(CollectionUtils.isEmpty(new ArrayList<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEmptyWithNonEmptyCollection()", "name": "testIsEmptyWithNonEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithNonEmptyCollection()", "original_string": "    @Test\n    public void testIsEmptyWithNonEmptyCollection() {\n        assertFalse(CollectionUtils.isEmpty(Collections.singletonList(\"item\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEmptyWithNull()", "name": "testIsEmptyWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithNull()", "original_string": "    @Test\n    public void testIsEmptyWithNull() {\n        assertTrue(CollectionUtils.isEmpty(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollection()", "name": "testIsEqualCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollection()", "original_string": "    @Test\n    public void testIsEqualCollection() {\n        assertFalse(CollectionUtils.isEqualCollection(collectionA, collectionC));\n        assertFalse(CollectionUtils.isEqualCollection(collectionC, collectionA));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollection2()", "name": "testIsEqualCollection2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollection2()", "original_string": "    @Test\n    public void testIsEqualCollection2() {\n        final Collection<String> a = new ArrayList<>();\n        final Collection<String> b = new ArrayList<>();\n        assertTrue(CollectionUtils.isEqualCollection(a, b));\n        assertTrue(CollectionUtils.isEqualCollection(b, a));\n        a.add(\"1\");\n        assertFalse(CollectionUtils.isEqualCollection(a, b));\n        assertFalse(CollectionUtils.isEqualCollection(b, a));\n        b.add(\"1\");\n        assertTrue(CollectionUtils.isEqualCollection(a, b));\n        assertTrue(CollectionUtils.isEqualCollection(b, a));\n        a.add(\"2\");\n        assertFalse(CollectionUtils.isEqualCollection(a, b));\n        assertFalse(CollectionUtils.isEqualCollection(b, a));\n        b.add(\"2\");\n        assertTrue(CollectionUtils.isEqualCollection(a, b));\n        assertTrue(CollectionUtils.isEqualCollection(b, a));\n        a.add(\"1\");\n        assertFalse(CollectionUtils.isEqualCollection(a, b));\n        assertFalse(CollectionUtils.isEqualCollection(b, a));\n        b.add(\"1\");\n        assertTrue(CollectionUtils.isEqualCollection(a, b));\n        assertTrue(CollectionUtils.isEqualCollection(b, a));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollectionEquator()", "name": "testIsEqualCollectionEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollectionEquator()", "original_string": "    @Test\n    public void testIsEqualCollectionEquator() {\n        final Collection<Integer> collB = CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);\n\n        // odd / even equator\n        final Equator<Integer> e = new Equator<Integer>() {\n            @Override\n            public boolean equate(final Integer o1, final Integer o2) {\n                if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) {\n                    return false;\n                }\n                return true;\n            }\n\n            @Override\n            public int hash(final Integer o) {\n                return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n            }\n        };\n\n        assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA, e));\n        assertTrue(CollectionUtils.isEqualCollection(collectionA, collB, e));\n        assertTrue(CollectionUtils.isEqualCollection(collB, collectionA, e));\n\n        final Equator<Number> defaultEquator = DefaultEquator.defaultEquator();\n        assertFalse(CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));\n        assertFalse(CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollectionNullColl1()", "name": "testIsEqualCollectionNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollectionNullColl1()", "original_string": "    @Test\n    public void testIsEqualCollectionNullColl1() {\n        final Collection<Integer> list = new ArrayList<>(1);\n        list.add(1);\n\n        final Equator<Integer> e = new Equator<Integer>() {\n            @Override\n            public boolean equate(final Integer o1, final Integer o2) {\n                if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) {\n                    return false;\n                }\n                return true;\n            }\n\n            @Override\n            public int hash(final Integer o) {\n                return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n            }\n        };\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isEqualCollection(null, list, e));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollectionNullColl2()", "name": "testIsEqualCollectionNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollectionNullColl2()", "original_string": "    @Test\n    public void testIsEqualCollectionNullColl2() {\n        final Collection<Integer> list = new ArrayList<>(1);\n        list.add(1);\n\n        final Equator<Integer> e = new Equator<Integer>() {\n            @Override\n            public boolean equate(final Integer o1, final Integer o2) {\n                if (o1.intValue() % 2 == 0 ^ o2.intValue() % 2 == 0) {\n                    return false;\n                }\n                return true;\n            }\n\n            @Override\n            public int hash(final Integer o) {\n                return o.intValue() % 2 == 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n            }\n        };\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isEqualCollection(list, null, e));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollectionNullEquator()", "name": "testIsEqualCollectionNullEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollectionNullEquator()", "original_string": "    @Test\n    public void testIsEqualCollectionNullEquator() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isEqualCollection(collectionA, collectionA, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollectionReturnsFalse()", "name": "testIsEqualCollectionReturnsFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollectionReturnsFalse()", "original_string": "    @Test\n    public void testIsEqualCollectionReturnsFalse() {\n        final List<Integer> b = new ArrayList<>(collectionA);\n        // remove an extra '2', and add a 5.  This will increase the size of the cardinality\n        b.remove(1);\n        b.add(5);\n        assertFalse(CollectionUtils.isEqualCollection(collectionA, b));\n        assertFalse(CollectionUtils.isEqualCollection(b, collectionA));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsEqualCollectionToSelf()", "name": "testIsEqualCollectionToSelf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEqualCollectionToSelf()", "original_string": "    @Test\n    public void testIsEqualCollectionToSelf() {\n        assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA));\n        assertTrue(CollectionUtils.isEqualCollection(collectionB, collectionB));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsFull()", "name": "testIsFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsFull()", "original_string": "    @Test\n    public void testIsFull() {\n        final Set<String> set = new HashSet<>();\n        set.add(\"1\");\n        set.add(\"2\");\n        set.add(\"3\");\n        assertFalse(CollectionUtils.isFull(set));\n\n        final CircularFifoQueue<String> buf = new CircularFifoQueue<>(set);\n        assertFalse(CollectionUtils.isFull(buf));\n        buf.remove(\"2\");\n        assertFalse(CollectionUtils.isFull(buf));\n        buf.add(\"2\");\n        assertFalse(CollectionUtils.isFull(buf));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsFullNullColl()", "name": "testIsFullNullColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsFullNullColl()", "original_string": "    @Test\n    public void testIsFullNullColl() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isFull(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsNotEmptyWithEmptyCollection()", "name": "testIsNotEmptyWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsNotEmptyWithEmptyCollection()", "original_string": "    @Test\n    public void testIsNotEmptyWithEmptyCollection() {\n        assertFalse(CollectionUtils.isNotEmpty(new ArrayList<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsNotEmptyWithNonEmptyCollection()", "name": "testIsNotEmptyWithNonEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsNotEmptyWithNonEmptyCollection()", "original_string": "    @Test\n    public void testIsNotEmptyWithNonEmptyCollection() {\n        assertTrue(CollectionUtils.isNotEmpty(Collections.singletonList(\"item\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsNotEmptyWithNull()", "name": "testIsNotEmptyWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsNotEmptyWithNull()", "original_string": "    @Test\n    public void testIsNotEmptyWithNull() {\n        assertFalse(CollectionUtils.isNotEmpty(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsProperSubCollection()", "name": "testIsProperSubCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsProperSubCollection()", "original_string": "    @Test\n    public void testIsProperSubCollection() {\n        final Collection<String> a = new ArrayList<>();\n        final Collection<String> b = new ArrayList<>();\n        assertFalse(CollectionUtils.isProperSubCollection(a, b));\n        b.add(\"1\");\n        assertTrue(CollectionUtils.isProperSubCollection(a, b));\n        assertFalse(CollectionUtils.isProperSubCollection(b, a));\n        assertFalse(CollectionUtils.isProperSubCollection(b, b));\n        assertFalse(CollectionUtils.isProperSubCollection(a, a));\n        a.add(\"1\");\n        a.add(\"2\");\n        b.add(\"2\");\n        assertFalse(CollectionUtils.isProperSubCollection(b, a));\n        assertFalse(CollectionUtils.isProperSubCollection(a, b));\n        a.add(\"1\");\n        assertTrue(CollectionUtils.isProperSubCollection(b, a));\n        assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.intersection(collectionA, collectionC), collectionA));\n        assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.subtract(a, b), a));\n        assertFalse(CollectionUtils.isProperSubCollection(a, CollectionUtils.subtract(a, b)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsProperSubCollectionNullColl1()", "name": "testIsProperSubCollectionNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsProperSubCollectionNullColl1()", "original_string": "    @Test\n    public void testIsProperSubCollectionNullColl1() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isProperSubCollection(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsProperSubCollectionNullColl2()", "name": "testIsProperSubCollectionNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsProperSubCollectionNullColl2()", "original_string": "    @Test\n    public void testIsProperSubCollectionNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isProperSubCollection(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsSubCollection()", "name": "testIsSubCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsSubCollection()", "original_string": "    @Test\n    public void testIsSubCollection() {\n        assertFalse(CollectionUtils.isSubCollection(collectionA, collectionC));\n        assertFalse(CollectionUtils.isSubCollection(collectionC, collectionA));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsSubCollection2()", "name": "testIsSubCollection2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsSubCollection2()", "original_string": "    @Test\n    public void testIsSubCollection2() {\n        final Collection<Integer> c = new ArrayList<>();\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(1);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(2);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(2);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(3);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(3);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(3);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(4);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(4);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(4);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertFalse(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(4);\n        assertTrue(CollectionUtils.isSubCollection(c, collectionA));\n        assertTrue(CollectionUtils.isSubCollection(collectionA, c));\n        c.add(5);\n        assertFalse(CollectionUtils.isSubCollection(c, collectionA));\n        assertTrue(CollectionUtils.isSubCollection(collectionA, c));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsSubCollectionNullColl1()", "name": "testIsSubCollectionNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsSubCollectionNullColl1()", "original_string": "    @Test\n    public void testIsSubCollectionNullColl1() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isSubCollection(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsSubCollectionNullColl2()", "name": "testIsSubCollectionNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsSubCollectionNullColl2()", "original_string": "    @Test\n    public void testIsSubCollectionNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.isSubCollection(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testIsSubCollectionOfSelf()", "name": "testIsSubCollectionOfSelf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsSubCollectionOfSelf()", "original_string": "    @Test\n    public void testIsSubCollectionOfSelf() {\n        assertTrue(CollectionUtils.isSubCollection(collectionA, collectionA));\n        assertTrue(CollectionUtils.isSubCollection(collectionB, collectionB));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testMatchesAll()", "name": "testMatchesAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void testMatchesAll()", "original_string": "    @Test\n    @Deprecated\n    public void testMatchesAll() {\n        assertFalse(CollectionUtils.matchesAll(null, null));\n        assertFalse(CollectionUtils.matchesAll(collectionA, null));\n\n        final Predicate<Integer> lessThanFive = object -> object < 5;\n        assertTrue(CollectionUtils.matchesAll(collectionA, lessThanFive));\n\n        final Predicate<Integer> lessThanFour = object -> object < 4;\n        assertFalse(CollectionUtils.matchesAll(collectionA, lessThanFour));\n\n        assertTrue(CollectionUtils.matchesAll(null, lessThanFour));\n        assertTrue(CollectionUtils.matchesAll(emptyCollection, lessThanFour));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testMaxSize()", "name": "testMaxSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxSize()", "original_string": "    @Test\n    public void testMaxSize() {\n        final Set<String> set = new HashSet<>();\n        set.add(\"1\");\n        set.add(\"2\");\n        set.add(\"3\");\n        assertEquals(-1, CollectionUtils.maxSize(set));\n\n        final Queue<String> buf = new CircularFifoQueue<>(set);\n        assertEquals(3, CollectionUtils.maxSize(buf));\n        buf.remove(\"2\");\n        assertEquals(3, CollectionUtils.maxSize(buf));\n        buf.add(\"2\");\n        assertEquals(3, CollectionUtils.maxSize(buf));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testMaxSizeNullColl()", "name": "testMaxSizeNullColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxSizeNullColl()", "original_string": "    @Test\n    public void testMaxSizeNullColl() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.maxSize(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testPermutations()", "name": "testPermutations", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPermutations()", "original_string": "    @Test\n    public void testPermutations() {\n        final List<Integer> sample = collectionA.subList(0, 5);\n        final Collection<List<Integer>> permutations = CollectionUtils.permutations(sample);\n\n        // result size = n!\n        final int collSize = sample.size();\n        int factorial = 1;\n        for (int i = 1; i <= collSize; i++) {\n            factorial *= i;\n        }\n        assertEquals(factorial, permutations.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testPermutationsWithNullCollection()", "name": "testPermutationsWithNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPermutationsWithNullCollection()", "original_string": "    @Test\n    public void testPermutationsWithNullCollection() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.permutations(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testPredicatedCollection()", "name": "testPredicatedCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedCollection()", "original_string": "    @Test\n    public void testPredicatedCollection() {\n        final Predicate<Object> predicate = PredicateUtils.instanceofPredicate(Integer.class);\n        final Collection<Number> collection = CollectionUtils.predicatedCollection(new ArrayList<>(), predicate);\n        assertInstanceOf(PredicatedCollection.class, collection, \"returned object should be a PredicatedCollection\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testPredicatedCollectionNullColl()", "name": "testPredicatedCollectionNullColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedCollectionNullColl()", "original_string": "    @Test\n    public void testPredicatedCollectionNullColl() {\n        final Predicate<Object> predicate = PredicateUtils.instanceofPredicate(Integer.class);\n        assertThrows(NullPointerException.class, () -> CollectionUtils.predicatedCollection(null, predicate));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testPredicatedCollectionNullPredicate()", "name": "testPredicatedCollectionNullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedCollectionNullPredicate()", "original_string": "    @Test\n    public void testPredicatedCollectionNullPredicate() {\n        final Collection<Integer> list = new ArrayList<>();\n        assertThrows(NullPointerException.class, () -> CollectionUtils.predicatedCollection(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveAll()", "name": "testRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAll()", "original_string": "    @Test\n    public void testRemoveAll() {\n        final List<String> base = new ArrayList<>();\n        base.add(\"A\");\n        base.add(\"B\");\n        base.add(\"C\");\n        final List<String> sub = new ArrayList<>();\n        sub.add(\"A\");\n        sub.add(\"C\");\n        sub.add(\"X\");\n\n        final Collection<String> result = CollectionUtils.removeAll(base, sub);\n        assertEquals(1, result.size());\n        assertFalse(result.contains(\"A\"));\n        assertTrue(result.contains(\"B\"));\n        assertFalse(result.contains(\"C\"));\n        assertEquals(3, base.size());\n        assertTrue(base.contains(\"A\"));\n        assertTrue(base.contains(\"B\"));\n        assertTrue(base.contains(\"C\"));\n        assertEquals(3, sub.size());\n        assertTrue(sub.contains(\"A\"));\n        assertTrue(sub.contains(\"C\"));\n        assertTrue(sub.contains(\"X\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveAllNullBaseColl()", "name": "testRemoveAllNullBaseColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllNullBaseColl()", "original_string": "    @Test\n    public void testRemoveAllNullBaseColl() {\n        final List<String> sub = new ArrayList<>();\n        sub.add(\"A\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.removeAll(null, sub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveAllNullSubColl()", "name": "testRemoveAllNullSubColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllNullSubColl()", "original_string": "    @Test\n    public void testRemoveAllNullSubColl() {\n        final List<String> base = new ArrayList<>();\n        base.add(\"A\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.removeAll(base, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveAllWithEquator()", "name": "testRemoveAllWithEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithEquator()", "original_string": "    @Test\n    public void testRemoveAllWithEquator() {\n        final List<String> base = new ArrayList<>();\n        base.add(\"AC\");\n        base.add(\"BB\");\n        base.add(\"CA\");\n\n        final List<String> remove = new ArrayList<>();\n        remove.add(\"AA\");\n        remove.add(\"CX\");\n        remove.add(\"XZ\");\n\n        // use an equator which compares the second letter only\n        final Collection<String> result = CollectionUtils.removeAll(base, remove, new Equator<String>() {\n\n            @Override\n            public boolean equate(final String o1, final String o2) {\n                return o1.charAt(1) == o2.charAt(1);\n            }\n\n            @Override\n            public int hash(final String o) {\n                return o.charAt(1);\n            }\n        });\n\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"AC\"));\n        assertTrue(result.contains(\"BB\"));\n        assertFalse(result.contains(\"CA\"));\n        assertEquals(3, base.size());\n        assertTrue(base.contains(\"AC\"));\n        assertTrue(base.contains(\"BB\"));\n        assertTrue(base.contains(\"CA\"));\n        assertEquals(3, remove.size());\n        assertTrue(remove.contains(\"AA\"));\n        assertTrue(remove.contains(\"CX\"));\n        assertTrue(remove.contains(\"XZ\"));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> CollectionUtils.removeAll(null, null, DefaultEquator.defaultEquator()),\n                        \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> CollectionUtils.removeAll(base, remove, null),\n                        \"expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveCount()", "name": "testRemoveCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveCount()", "original_string": "    @Test\n    public void testRemoveCount() {\n        final List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n\n        Collection<Integer> result = CollectionUtils.removeCount(list, 0, 0);\n        assertEquals(4, list.size());\n        assertEquals(0, result.size());\n\n        result = CollectionUtils.removeCount(list, 0, 1);\n        assertEquals(3, list.size());\n        assertEquals(2, (int) list.get(0));\n        assertEquals(1, result.size());\n        assertTrue(result.contains(1));\n\n        list.add(5);\n        list.add(6);\n        result = CollectionUtils.removeCount(list, 1, 3);\n\n        assertEquals(2, list.size());\n        assertEquals(2, (int) list.get(0));\n        assertEquals(6, (int) list.get(1));\n        assertEquals(3, result.size());\n        assertTrue(result.contains(3));\n        assertTrue(result.contains(4));\n        assertTrue(result.contains(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveCountNegative()", "name": "testRemoveCountNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveCountNegative()", "original_string": "    @Test\n    public void testRemoveCountNegative() {\n        final Collection<Integer> list = new ArrayList<>();\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.removeCount(list, 0, -1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveCountStartNegative()", "name": "testRemoveCountStartNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveCountStartNegative()", "original_string": "    @Test\n    public void testRemoveCountStartNegative() {\n        final Collection<Integer> list = new ArrayList<>();\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.removeCount(list, -1, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveCountWithNull()", "name": "testRemoveCountWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveCountWithNull()", "original_string": "    @Test\n    public void testRemoveCountWithNull() {\n        final Collection<Integer> list = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.removeCount(list, 0, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveCountWrongCount()", "name": "testRemoveCountWrongCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveCountWrongCount()", "original_string": "    @Test\n    public void testRemoveCountWrongCount() {\n        final Collection<Integer> list = new ArrayList<>();\n        list.add(1);\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.removeCount(list, 0, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveRange()", "name": "testRemoveRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveRange()", "original_string": "    @Test\n    public void testRemoveRange() {\n        final List<Integer> list = new ArrayList<>();\n        list.add(1);\n        Collection<Integer> result = CollectionUtils.removeRange(list, 0, 0);\n        assertEquals(1, list.size());\n        assertEquals(0, result.size());\n\n        list.add(2);\n        list.add(3);\n        result = CollectionUtils.removeRange(list, 1, 3);\n        assertEquals(1, list.size());\n        assertEquals(1, (int) list.get(0));\n        assertEquals(2, result.size());\n        assertTrue(result.contains(2));\n        assertTrue(result.contains(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveRangeEndIndexNegative()", "name": "testRemoveRangeEndIndexNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveRangeEndIndexNegative()", "original_string": "    @Test\n    public void testRemoveRangeEndIndexNegative() {\n        final Collection<Integer> list = new ArrayList<>();\n        list.add(1);\n        assertThrows(IllegalArgumentException.class, () -> CollectionUtils.removeRange(list, 0, -1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveRangeEndLowStart()", "name": "testRemoveRangeEndLowStart", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveRangeEndLowStart()", "original_string": "    @Test\n    public void testRemoveRangeEndLowStart() {\n        final Collection<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        assertThrows(IllegalArgumentException.class, () -> CollectionUtils.removeRange(list, 1, 0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveRangeNull()", "name": "testRemoveRangeNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveRangeNull()", "original_string": "    @Test\n    public void testRemoveRangeNull() {\n        final Collection<Integer> list = null;\n        assertThrows(NullPointerException.class, () -> CollectionUtils.removeRange(list, 0, 0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveRangeStartIndexNegative()", "name": "testRemoveRangeStartIndexNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveRangeStartIndexNegative()", "original_string": "    @Test\n    public void testRemoveRangeStartIndexNegative() {\n        final Collection<Integer> list = new ArrayList<>();\n        list.add(1);\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.removeRange(list, -1, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRemoveRangeWrongEndIndex()", "name": "testRemoveRangeWrongEndIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveRangeWrongEndIndex()", "original_string": "    @Test\n    public void testRemoveRangeWrongEndIndex() {\n        final Collection<Integer> list = new ArrayList<>();\n        list.add(1);\n        assertThrows(IndexOutOfBoundsException.class, () -> CollectionUtils.removeRange(list, 0, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRetainAll()", "name": "testRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAll()", "original_string": "    @Test\n    public void testRetainAll() {\n        final List<String> base = new ArrayList<>();\n        base.add(\"A\");\n        base.add(\"B\");\n        base.add(\"C\");\n        final List<Object> sub = new ArrayList<>();\n        sub.add(\"A\");\n        sub.add(\"C\");\n        sub.add(\"X\");\n\n        final Collection<String> result = CollectionUtils.retainAll(base, sub);\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"A\"));\n        assertFalse(result.contains(\"B\"));\n        assertTrue(result.contains(\"C\"));\n        assertEquals(3, base.size());\n        assertTrue(base.contains(\"A\"));\n        assertTrue(base.contains(\"B\"));\n        assertTrue(base.contains(\"C\"));\n        assertEquals(3, sub.size());\n        assertTrue(sub.contains(\"A\"));\n        assertTrue(sub.contains(\"C\"));\n        assertTrue(sub.contains(\"X\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRetainAllNullBaseColl()", "name": "testRetainAllNullBaseColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllNullBaseColl()", "original_string": "    @Test\n    public void testRetainAllNullBaseColl() {\n        final List<Object> sub = new ArrayList<>();\n        sub.add(\"A\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.retainAll(null, sub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRetainAllNullSubColl()", "name": "testRetainAllNullSubColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllNullSubColl()", "original_string": "    @Test\n    public void testRetainAllNullSubColl() {\n        final List<String> base = new ArrayList<>();\n        base.add(\"A\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.retainAll(base, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testRetainAllWithEquator()", "name": "testRetainAllWithEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithEquator()", "original_string": "    @Test\n    public void testRetainAllWithEquator() {\n        final List<String> base = new ArrayList<>();\n        base.add(\"AC\");\n        base.add(\"BB\");\n        base.add(\"CA\");\n\n        final List<String> retain = new ArrayList<>();\n        retain.add(\"AA\");\n        retain.add(\"CX\");\n        retain.add(\"XZ\");\n\n        // use an equator which compares the second letter only\n        final Collection<String> result = CollectionUtils.retainAll(base, retain, new Equator<String>() {\n\n            @Override\n            public boolean equate(final String o1, final String o2) {\n                return o1.charAt(1) == o2.charAt(1);\n            }\n\n            @Override\n            public int hash(final String o) {\n                return o.charAt(1);\n            }\n        });\n        assertEquals(1, result.size());\n        assertTrue(result.contains(\"CA\"));\n        assertFalse(result.contains(\"BB\"));\n        assertFalse(result.contains(\"AC\"));\n\n        assertEquals(3, base.size());\n        assertTrue(base.contains(\"AC\"));\n        assertTrue(base.contains(\"BB\"));\n        assertTrue(base.contains(\"CA\"));\n\n        assertEquals(3, retain.size());\n        assertTrue(retain.contains(\"AA\"));\n        assertTrue(retain.contains(\"CX\"));\n        assertTrue(retain.contains(\"XZ\"));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> CollectionUtils.retainAll(null, null, null),\n                        \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> CollectionUtils.retainAll(base, retain, null),\n                        \"expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testReverse()", "name": "testReverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReverse()", "original_string": "    @Test\n    public void testReverse() {\n        CollectionUtils.reverseArray(new Object[] {});\n        final Integer[] a = collectionA.toArray(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY);\n        CollectionUtils.reverseArray(a);\n        // assume our implementation is correct if it returns the same order as the Java function\n        Collections.reverse(collectionA);\n        assertEquals(collectionA, Arrays.asList(a));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testReverseArrayNull()", "name": "testReverseArrayNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReverseArrayNull()", "original_string": "    @Test\n    public void testReverseArrayNull() {\n        assertThrows(NullPointerException.class, () -> CollectionUtils.reverseArray(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSelect()", "name": "testSelect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSelect()", "original_string": "    @Test\n    public void testSelect() {\n        final List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        // Ensure that the collection is the input type or a super type\n        final Collection<Integer> output1 = CollectionUtils.select(list, EQUALS_TWO);\n        final Collection<Number> output2 = CollectionUtils.<Number>select(list, EQUALS_TWO);\n        final HashSet<Number> output3 = CollectionUtils.select(list, EQUALS_TWO, new HashSet<>());\n        assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n        assertEquals(4, list.size());\n        assertEquals(1, output1.size());\n        assertEquals(2, output2.iterator().next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSelectRejected()", "name": "testSelectRejected", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSelectRejected()", "original_string": "    @Test\n    public void testSelectRejected() {\n        final List<Long> list = new ArrayList<>();\n        list.add(1L);\n        list.add(2L);\n        list.add(3L);\n        list.add(4L);\n        final Collection<Long> output1 = CollectionUtils.selectRejected(list, EQUALS_TWO);\n        final Collection<? extends Number> output2 = CollectionUtils.selectRejected(list, EQUALS_TWO);\n        final HashSet<Number> output3 = CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet<>());\n        assertTrue(CollectionUtils.isEqualCollection(output1, output2));\n        assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n        assertEquals(4, list.size());\n        assertEquals(3, output1.size());\n        assertTrue(output1.contains(1L));\n        assertTrue(output1.contains(3L));\n        assertTrue(output1.contains(4L));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSelectWithOutputCollections()", "name": "testSelectWithOutputCollections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSelectWithOutputCollections()", "original_string": "    @Test\n    public void testSelectWithOutputCollections() {\n        final List<Integer> input = new ArrayList<>();\n        input.add(1);\n        input.add(2);\n        input.add(3);\n        input.add(4);\n\n        final List<Integer> output = new ArrayList<>();\n        final List<Integer> rejected = new ArrayList<>();\n\n        CollectionUtils.select(input, EQUALS_TWO, output, rejected);\n\n        // output contains 2\n        assertEquals(1, output.size());\n        assertEquals(2, CollectionUtils.extractSingleton(output).intValue());\n\n        // rejected contains 1, 3, and 4\n        final Integer[] expected = {1, 3, 4};\n        assertArrayEquals(expected, rejected.toArray());\n\n        output.clear();\n        rejected.clear();\n        CollectionUtils.select((List<Integer>) null, EQUALS_TWO, output, rejected);\n        assertTrue(output.isEmpty());\n        assertTrue(rejected.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSize_Array()", "name": "testSize_Array", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize_Array()", "original_string": "    @Test\n    public void testSize_Array() {\n        final Object[] objectArray = {};\n        assertEquals(0, CollectionUtils.size(objectArray));\n\n        final String[] stringArray = new String[3];\n        assertEquals(3, CollectionUtils.size(stringArray));\n        stringArray[0] = \"a\";\n        stringArray[1] = \"b\";\n        stringArray[2] = \"c\";\n        assertEquals(3, CollectionUtils.size(stringArray));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSize_Enumeration()", "name": "testSize_Enumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize_Enumeration()", "original_string": "    @Test\n    public void testSize_Enumeration() {\n        final Vector<String> list = new Vector<>();\n        assertEquals(0, CollectionUtils.size(list.elements()));\n        list.add(\"a\");\n        assertEquals(1, CollectionUtils.size(list.elements()));\n        list.add(\"b\");\n        assertEquals(2, CollectionUtils.size(list.elements()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSize_Iterator()", "name": "testSize_Iterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize_Iterator()", "original_string": "    @Test\n    public void testSize_Iterator() {\n        final List<String> list = new ArrayList<>();\n        assertEquals(0, CollectionUtils.size(list.iterator()));\n        list.add(\"a\");\n        assertEquals(1, CollectionUtils.size(list.iterator()));\n        list.add(\"b\");\n        assertEquals(2, CollectionUtils.size(list.iterator()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSize_List()", "name": "testSize_List", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize_List()", "original_string": "    @Test\n    public void testSize_List() {\n        List<String> list = null;\n        assertEquals(0, CollectionUtils.size(list));\n        list = new ArrayList<>();\n        assertEquals(0, CollectionUtils.size(list));\n        list.add(\"a\");\n        assertEquals(1, CollectionUtils.size(list));\n        list.add(\"b\");\n        assertEquals(2, CollectionUtils.size(list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSize_Map()", "name": "testSize_Map", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize_Map()", "original_string": "    @Test\n    public void testSize_Map() {\n        final Map<String, String> map = new HashMap<>();\n        assertEquals(0, CollectionUtils.size(map));\n        map.put(\"1\", \"a\");\n        assertEquals(1, CollectionUtils.size(map));\n        map.put(\"2\", \"b\");\n        assertEquals(2, CollectionUtils.size(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSize_Other()", "name": "testSize_Other", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize_Other()", "original_string": "    @Test\n    public void testSize_Other() {\n        assertThrows(IllegalArgumentException.class, () -> CollectionUtils.size(\"not a list\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSize_PrimitiveArray()", "name": "testSize_PrimitiveArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize_PrimitiveArray()", "original_string": "    @Test\n    public void testSize_PrimitiveArray() {\n        final int[] intArray = {};\n        assertEquals(0, CollectionUtils.size(intArray));\n\n        final double[] doubleArray = new double[3];\n        assertEquals(3, CollectionUtils.size(doubleArray));\n        doubleArray[0] = 0.0d;\n        doubleArray[1] = 1.0d;\n        doubleArray[2] = 2.5d;\n        assertEquals(3, CollectionUtils.size(doubleArray));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_Array()", "name": "testSizeIsEmpty_Array", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_Array()", "original_string": "    @Test\n    public void testSizeIsEmpty_Array() {\n        final Object[] objectArray = {};\n        assertTrue(CollectionUtils.sizeIsEmpty(objectArray));\n\n        final String[] stringArray = new String[3];\n        assertFalse(CollectionUtils.sizeIsEmpty(stringArray));\n        stringArray[0] = \"a\";\n        stringArray[1] = \"b\";\n        stringArray[2] = \"c\";\n        assertFalse(CollectionUtils.sizeIsEmpty(stringArray));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_Enumeration()", "name": "testSizeIsEmpty_Enumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_Enumeration()", "original_string": "    @Test\n    public void testSizeIsEmpty_Enumeration() {\n        final Vector<String> list = new Vector<>();\n        assertTrue(CollectionUtils.sizeIsEmpty(list.elements()));\n        list.add(\"a\");\n        assertFalse(CollectionUtils.sizeIsEmpty(list.elements()));\n        final Enumeration<String> en = list.elements();\n        en.nextElement();\n        assertTrue(CollectionUtils.sizeIsEmpty(en));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_Iterator()", "name": "testSizeIsEmpty_Iterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_Iterator()", "original_string": "    @Test\n    public void testSizeIsEmpty_Iterator() {\n        final List<String> list = new ArrayList<>();\n        assertTrue(CollectionUtils.sizeIsEmpty(list.iterator()));\n        list.add(\"a\");\n        assertFalse(CollectionUtils.sizeIsEmpty(list.iterator()));\n        final Iterator<String> it = list.iterator();\n        it.next();\n        assertTrue(CollectionUtils.sizeIsEmpty(it));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_List()", "name": "testSizeIsEmpty_List", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_List()", "original_string": "    @Test\n    public void testSizeIsEmpty_List() {\n        final List<String> list = new ArrayList<>();\n        assertTrue(CollectionUtils.sizeIsEmpty(list));\n        list.add(\"a\");\n        assertFalse(CollectionUtils.sizeIsEmpty(list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_Map()", "name": "testSizeIsEmpty_Map", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_Map()", "original_string": "    @Test\n    public void testSizeIsEmpty_Map() {\n        final Map<String, String> map = new HashMap<>();\n        assertTrue(CollectionUtils.sizeIsEmpty(map));\n        map.put(\"1\", \"a\");\n        assertFalse(CollectionUtils.sizeIsEmpty(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_Null()", "name": "testSizeIsEmpty_Null", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_Null()", "original_string": "    @Test\n    public void testSizeIsEmpty_Null() {\n        assertTrue(CollectionUtils.sizeIsEmpty(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_Other()", "name": "testSizeIsEmpty_Other", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_Other()", "original_string": "    @Test\n    public void testSizeIsEmpty_Other() {\n        assertThrows(IllegalArgumentException.class, () -> CollectionUtils.sizeIsEmpty(\"not a list\"),\n                \"Expecting IllegalArgumentException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSizeIsEmpty_PrimitiveArray()", "name": "testSizeIsEmpty_PrimitiveArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeIsEmpty_PrimitiveArray()", "original_string": "    @Test\n    public void testSizeIsEmpty_PrimitiveArray() {\n        final int[] intArray = {};\n        assertTrue(CollectionUtils.sizeIsEmpty(intArray));\n\n        final double[] doubleArray = new double[3];\n        assertFalse(CollectionUtils.sizeIsEmpty(doubleArray));\n        doubleArray[0] = 0.0d;\n        doubleArray[1] = 1.0d;\n        doubleArray[2] = 2.5d;\n        assertFalse(CollectionUtils.sizeIsEmpty(doubleArray));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSubtract()", "name": "testSubtract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubtract()", "original_string": "    @Test\n    public void testSubtract() {\n        final Collection<Integer> col = CollectionUtils.subtract(iterableA, iterableC);\n        final Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n        assertEquals(Integer.valueOf(1), freq.get(1));\n        assertNull(freq.get(2));\n        assertNull(freq.get(3));\n        assertEquals(Integer.valueOf(2), freq.get(4));\n        assertNull(freq.get(5));\n\n        final Collection<Number> col2 = CollectionUtils.subtract(collectionC2, collectionA);\n        final Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);\n        assertEquals(Integer.valueOf(1), freq2.get(5));\n        assertNull(freq2.get(4));\n        assertNull(freq2.get(3));\n        assertEquals(Integer.valueOf(2), freq2.get(2));\n        assertNull(freq2.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSubtractNullColl1()", "name": "testSubtractNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubtractNullColl1()", "original_string": "    @Test\n    public void testSubtractNullColl1() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.subtract(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSubtractNullColl2()", "name": "testSubtractNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubtractNullColl2()", "original_string": "    @Test\n    public void testSubtractNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.subtract(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSubtractWithPredicate()", "name": "testSubtractWithPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubtractWithPredicate()", "original_string": "    @Test\n    public void testSubtractWithPredicate() {\n        // greater than 3\n        final Predicate<Number> predicate = n -> n.longValue() > 3L;\n\n        final Collection<Number> col = CollectionUtils.subtract(iterableA, collectionC, predicate);\n        final Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col);\n        assertEquals(Integer.valueOf(1), freq2.get(1));\n        assertEquals(Integer.valueOf(2), freq2.get(2));\n        assertEquals(Integer.valueOf(3), freq2.get(3));\n        assertEquals(Integer.valueOf(2), freq2.get(4));\n        assertNull(freq2.get(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testSynchronizedCollection()", "name": "testSynchronizedCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void testSynchronizedCollection()", "original_string": "    @Test\n    @Deprecated\n    public void testSynchronizedCollection() {\n        final Collection<Object> col = CollectionUtils.synchronizedCollection(new ArrayList<>());\n        assertInstanceOf(SynchronizedCollection.class, col, \"Returned object should be a SynchronizedCollection.\");\n\n        assertThrows(NullPointerException.class, () -> CollectionUtils.synchronizedCollection(null),\n                \"Expecting NullPointerException for null collection.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testTransform1()", "name": "testTransform1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransform1()", "original_string": "    @Test\n    public void testTransform1() {\n        List<Number> list = new ArrayList<>();\n        list.add(1L);\n        list.add(2L);\n        list.add(3L);\n        CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);\n        assertEquals(3, list.size());\n        assertEquals(1, list.get(0));\n        assertEquals(2, list.get(1));\n        assertEquals(3, list.get(2));\n\n        list = new ArrayList<>();\n        list.add(1L);\n        list.add(2L);\n        list.add(3L);\n        CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);\n        assertEquals(3, list.size());\n        CollectionUtils.transform(list, null);\n        assertEquals(3, list.size());\n        CollectionUtils.transform(null, null);\n        assertEquals(3, list.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testTransform2()", "name": "testTransform2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransform2()", "original_string": "    @Test\n    public void testTransform2() {\n        final Set<Number> set = new HashSet<>();\n        set.add(1L);\n        set.add(2L);\n        set.add(3L);\n        CollectionUtils.transform(set, input -> 4);\n        assertEquals(1, set.size());\n        assertEquals(4, set.iterator().next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testTransformedCollection()", "name": "testTransformedCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedCollection()", "original_string": "    @Test\n    public void testTransformedCollection() {\n        final Transformer<Object, Object> transformer = TransformerUtils.nopTransformer();\n        final Collection<Object> collection = CollectionUtils.transformingCollection(new ArrayList<>(), transformer);\n        assertInstanceOf(TransformedCollection.class, collection, \"returned object should be a TransformedCollection\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testTransformedCollection_2()", "name": "testTransformedCollection_2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedCollection_2()", "original_string": "    @Test\n    public void testTransformedCollection_2() {\n        final List<Object> list = new ArrayList<>();\n        list.add(\"1\");\n        list.add(\"2\");\n        list.add(\"3\");\n        final Collection<Object> result = CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);\n        assertTrue(result.contains(\"1\")); // untransformed\n        assertTrue(result.contains(\"2\")); // untransformed\n        assertTrue(result.contains(\"3\")); // untransformed\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testTransformingCollectionNullColl()", "name": "testTransformingCollectionNullColl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformingCollectionNullColl()", "original_string": "    @Test\n    public void testTransformingCollectionNullColl() {\n        final Transformer<Object, Object> transformer = TransformerUtils.nopTransformer();\n        assertThrows(NullPointerException.class, () -> CollectionUtils.transformingCollection(null, transformer));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testTransformingCollectionNullTransformer()", "name": "testTransformingCollectionNullTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformingCollectionNullTransformer()", "original_string": "    @Test\n    public void testTransformingCollectionNullTransformer() {\n        final List<String> list = new ArrayList<>();\n        assertThrows(NullPointerException.class, () -> CollectionUtils.transformingCollection(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testUnion()", "name": "testUnion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnion()", "original_string": "    @Test\n    public void testUnion() {\n        final Collection<Integer> col = CollectionUtils.union(iterableA, iterableC);\n        final Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n        assertEquals(Integer.valueOf(1), freq.get(1));\n        assertEquals(Integer.valueOf(4), freq.get(2));\n        assertEquals(Integer.valueOf(3), freq.get(3));\n        assertEquals(Integer.valueOf(4), freq.get(4));\n        assertEquals(Integer.valueOf(1), freq.get(5));\n\n        final Collection<Number> col2 = CollectionUtils.union(collectionC2, iterableA);\n        final Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);\n        assertEquals(Integer.valueOf(1), freq2.get(1));\n        assertEquals(Integer.valueOf(4), freq2.get(2));\n        assertEquals(Integer.valueOf(3), freq2.get(3));\n        assertEquals(Integer.valueOf(4), freq2.get(4));\n        assertEquals(Integer.valueOf(1), freq2.get(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testUnionNullColl1()", "name": "testUnionNullColl1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnionNullColl1()", "original_string": "    @Test\n    public void testUnionNullColl1() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.union(null, list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testUnionNullColl2()", "name": "testUnionNullColl2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnionNullColl2()", "original_string": "    @Test\n    public void testUnionNullColl2() {\n        final Collection<String> list = new ArrayList<>(1);\n        list.add(\"1\");\n        assertThrows(NullPointerException.class, () -> CollectionUtils.union(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest.[void]testUnmodifiableCollection()", "name": "testUnmodifiableCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Deprecated\n    public void testUnmodifiableCollection()", "original_string": "    @Test\n    @Deprecated\n    public void testUnmodifiableCollection() {\n        final Collection<Object> col = CollectionUtils.unmodifiableCollection(new ArrayList<>());\n        assertInstanceOf(UnmodifiableCollection.class, col, \"Returned object should be a UnmodifiableCollection.\");\n\n        assertThrows(NullPointerException.class, () -> CollectionUtils.unmodifiableCollection(null),\n                \"Expecting NullPointerException for null collection.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java", "class_name": "CollectionUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java.CollectionUtilsTest", "attributes": {"modifiers": "@Test\n    @Deprecated\n    public", "marker_annotations": ["@Test", "@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java.EnumerationUtils_toListTest.[void]testToListWithStringTokenizer()", "name": "testToListWithStringTokenizer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToListWithStringTokenizer()", "original_string": "    @Test\n    public void testToListWithStringTokenizer() {\n        StringTokenizer tokenizer = new StringTokenizer(\"a b c\");\n        List<String> result = EnumerationUtils.toList(tokenizer);\n        assertEquals(3, result.size());\n        assertEquals(\"a\", result.get(0));\n        assertEquals(\"b\", result.get(1));\n        assertEquals(\"c\", result.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java", "class_name": "EnumerationUtils_toListTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java.EnumerationUtils_toListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testAllMatch()", "name": "testAllMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllMatch()", "original_string": "    @Test\n    public void testAllMatch() {\n        assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));\n        assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));\n        assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableEven).allMatch(null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testAnyMatch()", "name": "testAnyMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAnyMatch()", "original_string": "    @Test\n    public void testAnyMatch() {\n        assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));\n        assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));\n        assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableEven).anyMatch(null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testAppendElements()", "name": "testAppendElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAppendElements()", "original_string": "    @Test\n    public void testAppendElements() {\n        final FluentIterable<Integer> it = FluentIterable.of(iterableA).append(10, 20, 30);\n        assertEquals(IterableUtils.size(iterableA) + 3, IterableUtils.size(it));\n        assertTrue(IterableUtils.contains(it, 1));\n        assertTrue(IterableUtils.contains(it, 10));\n        assertTrue(IterableUtils.contains(it, 20));\n        assertTrue(IterableUtils.contains(it, 30));\n        assertFalse(IterableUtils.contains(it, 40));\n\n        final FluentIterable<Integer> empty = FluentIterable.of(emptyIterable).append();\n        assertTrue(IterableUtils.isEmpty(empty));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testAppendIterable()", "name": "testAppendIterable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAppendIterable()", "original_string": "    @Test\n    public void testAppendIterable() {\n        final List<Integer> listB = Arrays.asList(10, 20, 30);\n        final FluentIterable<Integer> it = FluentIterable.of(iterableA).append(listB);\n        assertEquals(IterableUtils.size(iterableA) + listB.size(), IterableUtils.size(it));\n        assertTrue(IterableUtils.contains(it, 1));\n        assertTrue(IterableUtils.contains(it, 10));\n        assertTrue(IterableUtils.contains(it, 20));\n        assertTrue(IterableUtils.contains(it, 30));\n        assertFalse(IterableUtils.contains(it, 40));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testAsEnumeration()", "name": "testAsEnumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsEnumeration()", "original_string": "    @Test\n    public void testAsEnumeration() {\n        Enumeration<Long> enumeration = FluentIterable.of(iterableB).asEnumeration();\n        final List<Long> result = EnumerationUtils.toList(enumeration);\n        assertEquals(iterableB, result);\n\n        enumeration = FluentIterable.<Long>empty().asEnumeration();\n        assertFalse(enumeration.hasMoreElements());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testCollate()", "name": "testCollate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollate()", "original_string": "    @Test\n    public void testCollate() {\n        final List<Integer> result = FluentIterable.of(iterableOdd).collate(iterableEven).toList();\n        final List<Integer> combinedList = new ArrayList<>();\n        CollectionUtils.addAll(combinedList, iterableOdd);\n        CollectionUtils.addAll(combinedList, iterableEven);\n        Collections.sort(combinedList);\n        assertEquals(combinedList, result);\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableOdd).collate(null).toList(),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testCollateWithComparator()", "name": "testCollateWithComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateWithComparator()", "original_string": "    @Test\n    public void testCollateWithComparator() {\n        List<Integer> result =\n                FluentIterable\n                    .of(iterableOdd)\n                    .collate(iterableEven, ComparatorUtils.<Integer>naturalComparator())\n                    .toList();\n\n        final List<Integer> combinedList = new ArrayList<>();\n        CollectionUtils.addAll(combinedList, iterableOdd);\n        CollectionUtils.addAll(combinedList, iterableEven);\n        Collections.sort(combinedList);\n        assertEquals(combinedList, result);\n\n        // null comparator is equivalent to natural ordering\n        result = FluentIterable.of(iterableOdd).collate(iterableEven, null).toList();\n        assertEquals(combinedList, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContains()", "original_string": "    @Test\n    public void testContains() {\n        assertTrue(FluentIterable.of(iterableEven).contains(2));\n        assertFalse(FluentIterable.of(iterableEven).contains(1));\n        assertFalse(FluentIterable.of(iterableEven).contains(null));\n        assertTrue(FluentIterable.of(iterableEven).append((Integer) null).contains(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testCopyInto()", "name": "testCopyInto", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCopyInto()", "original_string": "    @Test\n    public void testCopyInto() {\n        List<Integer> result = new ArrayList<>();\n        FluentIterable.of(iterableA).copyInto(result);\n\n        List<Integer> expected = IterableUtils.toList(iterableA);\n        assertEquals(expected.size(), result.size());\n        assertEquals(expected, result);\n\n        result = new ArrayList<>();\n        result.add(10);\n        result.add(9);\n        result.add(8);\n        FluentIterable.of(iterableA).copyInto(result);\n\n        expected = new ArrayList<>(Arrays.asList(10, 9, 8));\n        expected.addAll(IterableUtils.toList(iterableA));\n        assertEquals(expected.size(), result.size());\n        assertEquals(expected, result);\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableA).copyInto(null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testEval()", "name": "testEval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEval()", "original_string": "    @Test\n    public void testEval() {\n        final List<Integer> listNumbers = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        final FluentIterable<Integer> iterable = FluentIterable.of(listNumbers).filter(EVEN);\n        final FluentIterable<Integer> materialized = iterable.eval();\n\n        listNumbers.addAll(Arrays.asList(11, 12, 13, 14, 15, 16, 17, 18, 19, 20));\n        assertEquals(5, materialized.size());\n        assertEquals(10, iterable.size());\n\n        assertEquals(Arrays.asList(2, 4, 6, 8, 10), materialized.toList());\n        assertEquals(Arrays.asList(2, 4, 6, 8, 10, 12, 14, 16, 18, 20), iterable.toList());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testFactoryMethodOf()", "name": "testFactoryMethodOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFactoryMethodOf()", "original_string": "    @Test\n    public void testFactoryMethodOf() {\n        FluentIterable<Integer> iterable = FluentIterable.of(1, 2, 3, 4, 5);\n        List<Integer> result = iterable.toList();\n        assertEquals(Arrays.asList(1, 2, 3, 4, 5), result);\n\n        iterable = FluentIterable.of(1);\n        assertEquals(1, iterable.size());\n        assertFalse(iterable.isEmpty());\n        assertEquals(Arrays.asList(1), iterable.toList());\n\n        result = FluentIterable.of(new Integer[0]).toList();\n        assertTrue(result.isEmpty());\n\n        final Iterable<Integer> it = null;\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(it).toList(),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testFilter()", "name": "testFilter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFilter()", "original_string": "    @Test\n    public void testFilter() {\n        final Predicate<Integer> smallerThan3 = object -> object.intValue() < 3;\n        List<Integer> result = FluentIterable.of(iterableA).filter(smallerThan3).toList();\n        assertEquals(3, result.size());\n        assertEquals(Arrays.asList(1, 2, 2), result);\n\n        // empty iterable\n        result = FluentIterable.of(emptyIterable).filter(smallerThan3).toList();\n        assertEquals(0, result.size());\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableA).filter(null).toList(),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testForEach()", "name": "testForEach", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach()", "original_string": "    @Test\n    public void testForEach() {\n        final AtomicInteger sum = new AtomicInteger();\n        final Closure<Integer> closure = sum::addAndGet;\n\n        FluentIterable.of(iterableA).forEach(closure);\n        int expectedSum = 0;\n        for (final Integer i : iterableA) {\n            expectedSum += i;\n        }\n        assertEquals(expectedSum, sum.get());\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableA).forEach((Closure<Integer>) null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet()", "original_string": "    @Test\n    public void testGet() {\n        assertEquals(2, FluentIterable.of(iterableEven).get(0).intValue());\n\n        assertThrows(IndexOutOfBoundsException.class, () -> FluentIterable.of(iterableEven).get(-1),\n                \"expecting IndexOutOfBoundsException\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> FluentIterable.of(iterableEven).get(IterableUtils.size(iterableEven)),\n                \"expecting IndexOutOfBoundsException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testIsEmpty()", "name": "testIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmpty()", "original_string": "    @Test\n    public void testIsEmpty() {\n        assertTrue(FluentIterable.of(emptyIterable).isEmpty());\n        assertFalse(FluentIterable.of(iterableOdd).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        Iterator<Integer> iterator = FluentIterable.of(iterableA).iterator();\n        assertTrue(iterator.hasNext());\n\n        iterator = FluentIterable.<Integer>empty().iterator();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testLimit()", "name": "testLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLimit()", "original_string": "    @Test\n    public void testLimit() {\n        List<Integer> result = FluentIterable.of(iterableA).limit(3).toList();\n        assertEquals(3, result.size());\n        assertEquals(Arrays.asList(1, 2, 2), result);\n\n        // limit larger than input\n        result = FluentIterable.of(iterableA).limit(100).toList();\n        final List<Integer> expected = IterableUtils.toList(iterableA);\n        assertEquals(expected.size(), result.size());\n        assertEquals(expected, result);\n\n        // limit is 0\n        result = FluentIterable.of(iterableA).limit(0).toList();\n        assertEquals(0, result.size());\n\n        // empty iterable\n        result = FluentIterable.of(emptyIterable).limit(3).toList();\n        assertEquals(0, result.size());\n\n        assertThrows(IllegalArgumentException.class, () -> FluentIterable.of(iterableA).limit(-2).toList(),\n                \"expecting IllegalArgumentException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testReverse()", "name": "testReverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReverse()", "original_string": "    @Test\n    public void testReverse() {\n        List<Integer> result = FluentIterable.of(iterableA).reverse().toList();\n        final List<Integer> expected = IterableUtils.toList(iterableA);\n        Collections.reverse(expected);\n        assertEquals(expected, result);\n\n        // empty iterable\n        result = FluentIterable.of(emptyIterable).reverse().toList();\n        assertEquals(0, result.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        assertEquals(0, FluentIterable.of(emptyIterable).size());\n        assertEquals(IterableUtils.toList(iterableOdd).size(), FluentIterable.of(iterableOdd).size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testSkip()", "name": "testSkip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSkip()", "original_string": "    @Test\n    public void testSkip() {\n        List<Integer> result = FluentIterable.of(iterableA).skip(4).toList();\n        assertEquals(6, result.size());\n        assertEquals(Arrays.asList(3, 3, 4, 4, 4, 4), result);\n\n        // skip larger than input\n        result = FluentIterable.of(iterableA).skip(100).toList();\n        assertEquals(0, result.size());\n\n        // skip 0 elements\n        result = FluentIterable.of(iterableA).skip(0).toList();\n        final List<Integer> expected = IterableUtils.toList(iterableA);\n        assertEquals(expected.size(), result.size());\n        assertEquals(expected, result);\n\n        // empty iterable\n        result = FluentIterable.of(emptyIterable).skip(3).toList();\n        assertEquals(0, result.size());\n\n        assertThrows(IllegalArgumentException.class, () -> FluentIterable.of(iterableA).skip(-4).toList(),\n                \"expecting IllegalArgumentException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testToArray()", "name": "testToArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    public void testToArray()", "original_string": "    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    public void testToArray() {\n        final Long[] arr = {1L, 2L, 3L, 4L, 5L};\n        final Long[] result = FluentIterable.of(arr).toArray(Long.class);\n        assertNotNull(result);\n        assertArrayEquals(arr, result);\n\n        assertThrows(ArrayStoreException.class, () -> FluentIterable.of(arr).toArray((Class) String.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"rawtypes\", \"unchecked\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        String result = FluentIterable.of(iterableA).toString();\n        assertEquals(iterableA.toString(), result);\n\n        result = FluentIterable.empty().toString();\n        assertEquals(\"[]\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testTransform()", "name": "testTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransform()", "original_string": "    @Test\n    public void testTransform() {\n        final Transformer<Integer, Integer> squared = object -> object * object;\n        List<Integer> result = FluentIterable.of(iterableA).transform(squared).toList();\n        assertEquals(10, result.size());\n        assertEquals(Arrays.asList(1, 4, 4, 9, 9, 9, 16, 16, 16, 16), result);\n\n        // empty iterable\n        result = FluentIterable.of(emptyIterable).transform(squared).toList();\n        assertEquals(0, result.size());\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableA).transform(null).toList(),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testUnique()", "name": "testUnique", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnique()", "original_string": "    @Test\n    public void testUnique() {\n        List<Integer> result = FluentIterable.of(iterableA).unique().toList();\n        assertEquals(4, result.size());\n        assertEquals(Arrays.asList(1, 2, 3, 4), result);\n\n        // empty iterable\n        result = FluentIterable.of(emptyIterable).unique().toList();\n        assertEquals(0, result.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        final FluentIterable<Integer> iterable1 = FluentIterable.of(iterableA).unmodifiable();\n        final Iterator<Integer> it = iterable1.iterator();\n        assertEquals(1, it.next().intValue());\n\n        assertThrows(UnsupportedOperationException.class, () -> it.remove(),\n                \"expecting UnsupportedOperationException\");\n\n        // calling unmodifiable on an already unmodifiable iterable shall return the same instance\n        final FluentIterable<Integer> iterable2 = iterable1.unmodifiable();\n        assertSame(iterable1, iterable2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest.[void]testZip()", "name": "testZip", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testZip()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testZip() {\n        List<Integer> result = FluentIterable.of(iterableOdd).zip(iterableEven).toList();\n        List<Integer> combinedList = new ArrayList<>();\n        CollectionUtils.addAll(combinedList, iterableOdd);\n        CollectionUtils.addAll(combinedList, iterableEven);\n        Collections.sort(combinedList);\n        assertEquals(combinedList, result);\n\n        assertThrows(NullPointerException.class, () -> FluentIterable.of(iterableOdd).zip((Iterable<Integer>) null).toList(),\n                \"expecting NullPointerException\");\n\n        result = FluentIterable\n                    .of(Arrays.asList(1, 4, 7))\n                    .zip(Arrays.asList(2, 5, 8), Arrays.asList(3, 6, 9))\n                    .toList();\n        combinedList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n        assertEquals(combinedList, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java", "class_name": "FluentIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/FluentIterableTest.java.FluentIterableTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractTreeMapTest.java.AbstractTreeMapTest.[void]testNewMap()", "name": "testNewMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewMap()", "original_string": "    @Test\n    public void testNewMap() {\n        final TreeMap<K, V> map = makeObject();\n        assertTrue(map.isEmpty(), \"New map is empty\");\n        assertEquals(0, map.size(), \"New map has size zero\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractTreeMapTest.java", "class_name": "AbstractTreeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractTreeMapTest.java.AbstractTreeMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractTreeMapTest.java.AbstractTreeMapTest.[void]testSearch()", "name": "testSearch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSearch()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSearch() {\n        final TreeMap<K, V> map = makeObject();\n        map.put((K) \"first\", (V) \"First Item\");\n        map.put((K) \"second\", (V) \"Second Item\");\n        assertEquals(\"First Item\", map.get(\"first\"),\n                \"Top item is 'Second Item'\");\n        assertEquals(\"Second Item\", map.get(\"second\"),\n                \"Next Item is 'First Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractTreeMapTest.java", "class_name": "AbstractTreeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractTreeMapTest.java.AbstractTreeMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_nullInput()", "name": "testGetIterator_nullInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_nullInput()", "original_string": "    @Test\n    public void testGetIterator_nullInput() {\n        Iterator<?> iterator = IteratorUtils.getIterator(null);\n        assertTrue(!iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_iteratorInput()", "name": "testGetIterator_iteratorInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_iteratorInput()", "original_string": "    @Test\n    public void testGetIterator_iteratorInput() {\n        Iterator<String> inputIterator = Arrays.asList(\"a\", \"b\", \"c\").iterator();\n        Iterator<?> iterator = IteratorUtils.getIterator(inputIterator);\n        assertTrue(iterator == inputIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_iterableInput()", "name": "testGetIterator_iterableInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_iterableInput()", "original_string": "    @Test\n    public void testGetIterator_iterableInput() {\n        Iterable<String> iterable = Arrays.asList(\"a\", \"b\", \"c\");\n        Iterator<?> iterator = IteratorUtils.getIterator(iterable);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_objectArrayInput()", "name": "testGetIterator_objectArrayInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_objectArrayInput()", "original_string": "    @Test\n    public void testGetIterator_objectArrayInput() {\n        Object[] array = {\"a\", \"b\", \"c\"};\n        Iterator<?> iterator = IteratorUtils.getIterator(array);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_enumerationInput()", "name": "testGetIterator_enumerationInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_enumerationInput()", "original_string": "    @Test\n    public void testGetIterator_enumerationInput() {\n        Vector<String> vector = new Vector<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        Enumeration<String> enumeration = vector.elements();\n        Iterator<?> iterator = IteratorUtils.getIterator(enumeration);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_mapInput()", "name": "testGetIterator_mapInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_mapInput()", "original_string": "    @Test\n    public void testGetIterator_mapInput() {\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        Iterator<?> iterator = IteratorUtils.getIterator(map);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_nodeListInput()", "name": "testGetIterator_nodeListInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_nodeListInput()", "original_string": "    @Test\n    public void testGetIterator_nodeListInput() {\n        NodeList nodeList = new NodeList() {\n            @Override\n            public Node item(int index) {\n                return index < 3 ? new Node() {\n                    @Override\n                    public short getNodeType() {\n                        return 0;\n                    }\n\n                    @Override\n                    public String getNodeName() {\n                        return null;\n                    }\n\n                    @Override\n                    public String getNodeValue() throws DOMException {\n                        return null;\n                    }\n\n                    @Override\n                    public void setNodeValue(String nodeValue) throws DOMException {\n\n                    }\n\n                    @Override\n                    public Node getParentNode() {\n                        return null;\n                    }\n\n                    @Override\n                    public NodeList getChildNodes() {\n                        return null;\n                    }\n\n                    @Override\n                    public Node getFirstChild() {\n                        return null;\n                    }\n\n                    @Override\n                    public Node getLastChild() {\n                        return null;\n                    }\n\n                    @Override\n                    public Node getPreviousSibling() {\n                        return null;\n                    }\n\n                    @Override\n                    public Node getNextSibling() {\n                        return null;\n                    }\n\n                    @Override\n                    public NamedNodeMap getAttributes() {\n                        return null;\n                    }\n\n                    @Override\n                    public Document getOwnerDocument() {\n                        return null;\n                    }\n\n                    @Override\n                    public Node insertBefore(Node newChild, Node refChild) throws DOMException {\n                        return null;\n                    }\n\n                    @Override\n                    public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                        return null;\n                    }\n\n                    @Override\n                    public Node removeChild(Node oldChild) throws DOMException {\n                        return null;\n                    }\n\n                    @Override\n                    public Node appendChild(Node newChild) throws DOMException {\n                        return null;\n                    }\n\n                    @Override\n                    public boolean hasChildNodes() {\n                        return false;\n                    }\n\n                    @Override\n                    public Node cloneNode(boolean deep) {\n                        return null;\n                    }\n\n                    @Override\n                    public void normalize() {\n\n                    }\n\n                    @Override\n                    public boolean isSupported(String feature, String version) {\n                        return false;\n                    }\n\n                    @Override\n                    public String getNamespaceURI() {\n                        return null;\n                    }\n\n                    @Override\n                    public String getPrefix() {\n                        return null;\n                    }\n\n                    @Override\n                    public void setPrefix(String prefix) throws DOMException {\n\n                    }\n\n                    @Override\n                    public String getLocalName() {\n                        return null;\n                    }\n\n                    @Override\n                    public boolean hasAttributes() {\n                        return false;\n                    }\n\n                    @Override\n                    public String getBaseURI() {\n                        return null;\n                    }\n\n                    @Override\n                    public short compareDocumentPosition(Node other) throws DOMException {\n                        return 0;\n                    }\n\n                    @Override\n                    public String getTextContent() throws DOMException {\n                        return null;\n                    }\n\n                    @Override\n                    public void setTextContent(String textContent) throws DOMException {\n\n                    }\n\n                    @Override\n                    public boolean isSameNode(Node other) {\n                        return false;\n                    }\n\n                    @Override\n                    public String lookupPrefix(String namespaceURI) {\n                        return null;\n                    }\n\n                    @Override\n                    public boolean isDefaultNamespace(String namespaceURI) {\n                        return false;\n                    }\n\n                    @Override\n                    public String lookupNamespaceURI(String prefix) {\n                        return null;\n                    }\n\n                    @Override\n                    public boolean isEqualNode(Node arg) {\n                        return false;\n                    }\n\n                    @Override\n                    public Object getFeature(String feature, String version) {\n                        return null;\n                    }\n\n                    @Override\n                    public Object setUserData(String key, Object data, UserDataHandler handler) {\n                        return null;\n                    }\n\n                    @Override\n                    public Object getUserData(String key) {\n                        return null;\n                    }\n                } : null;\n            }\n\n            @Override\n            public int getLength() {\n                return 3;\n            }\n        };\n        Iterator<?> iterator = IteratorUtils.getIterator(nodeList);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_nodeInput()", "name": "testGetIterator_nodeInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_nodeInput()", "original_string": "    @Test\n    public void testGetIterator_nodeInput() {\n        Node node = new Node() {\n            @Override\n            public short getNodeType() {\n                return 0;\n            }\n\n            @Override\n            public String getNodeName() {\n                return null;\n            }\n\n            @Override\n            public String getNodeValue() throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void setNodeValue(String nodeValue) throws DOMException {\n\n            }\n\n            @Override\n            public Node getParentNode() {\n                return null;\n            }\n\n            @Override\n            public NodeList getChildNodes() {\n                return new NodeList() {\n                    @Override\n                    public Node item(int index) {\n                        return index < 3 ? new Node() {\n                            @Override\n                            public short getNodeType() {\n                                return 0;\n                            }\n\n                            @Override\n                            public String getNodeName() {\n                                return null;\n                            }\n\n                            @Override\n                            public String getNodeValue() throws DOMException {\n                                return null;\n                            }\n\n                            @Override\n                            public void setNodeValue(String nodeValue) throws DOMException {\n\n                            }\n\n                            @Override\n                            public Node getParentNode() {\n                                return null;\n                            }\n\n                            @Override\n                            public NodeList getChildNodes() {\n                                return null;\n                            }\n\n                            @Override\n                            public Node getFirstChild() {\n                                return null;\n                            }\n\n                            @Override\n                            public Node getLastChild() {\n                                return null;\n                            }\n\n                            @Override\n                            public Node getPreviousSibling() {\n                                return null;\n                            }\n\n                            @Override\n                            public Node getNextSibling() {\n                                return null;\n                            }\n\n                            @Override\n                            public NamedNodeMap getAttributes() {\n                                return null;\n                            }\n\n                            @Override\n                            public Document getOwnerDocument() {\n                                return null;\n                            }\n\n                            @Override\n                            public Node insertBefore(Node newChild, Node refChild) throws DOMException {\n                                return null;\n                            }\n\n                            @Override\n                            public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                                return null;\n                            }\n\n                            @Override\n                            public Node removeChild(Node oldChild) throws DOMException {\n                                return null;\n                            }\n\n                            @Override\n                            public Node appendChild(Node newChild) throws DOMException {\n                                return null;\n                            }\n\n                            @Override\n                            public boolean hasChildNodes() {\n                                return false;\n                            }\n\n                            @Override\n                            public Node cloneNode(boolean deep) {\n                                return null;\n                            }\n\n                            @Override\n                            public void normalize() {\n\n                            }\n\n                            @Override\n                            public boolean isSupported(String feature, String version) {\n                                return false;\n                            }\n\n                            @Override\n                            public String getNamespaceURI() {\n                                return null;\n                            }\n\n                            @Override\n                            public String getPrefix() {\n                                return null;\n                            }\n\n                            @Override\n                            public void setPrefix(String prefix) throws DOMException {\n\n                            }\n\n                            @Override\n                            public String getLocalName() {\n                                return null;\n                            }\n\n                            @Override\n                            public boolean hasAttributes() {\n                                return false;\n                            }\n\n                            @Override\n                            public String getBaseURI() {\n                                return null;\n                            }\n\n                            @Override\n                            public short compareDocumentPosition(Node other) throws DOMException {\n                                return 0;\n                            }\n\n                            @Override\n                            public String getTextContent() throws DOMException {\n                                return null;\n                            }\n\n                            @Override\n                            public void setTextContent(String textContent) throws DOMException {\n\n                            }\n\n                            @Override\n                            public boolean isSameNode(Node other) {\n                                return false;\n                            }\n\n                            @Override\n                            public String lookupPrefix(String namespaceURI) {\n                                return null;\n                            }\n\n                            @Override\n                            public boolean isDefaultNamespace(String namespaceURI) {\n                                return false;\n                            }\n\n                            @Override\n                            public String lookupNamespaceURI(String prefix) {\n                                return null;\n                            }\n\n                            @Override\n                            public boolean isEqualNode(Node arg) {\n                                return false;\n                            }\n\n                            @Override\n                            public Object getFeature(String feature, String version) {\n                                return null;\n                            }\n\n                            @Override\n                            public Object setUserData(String key, Object data, UserDataHandler handler) {\n                                return null;\n                            }\n\n                            @Override\n                            public Object getUserData(String key) {\n                                return null;\n                            }\n                        } : null;\n                    }\n\n                    @Override\n                    public int getLength() {\n                        return 3;\n                    }\n                };\n            }\n\n            @Override\n            public Node getFirstChild() {\n                return null;\n            }\n\n            @Override\n            public Node getLastChild() {\n                return null;\n            }\n\n            @Override\n            public Node getPreviousSibling() {\n                return null;\n            }\n\n            @Override\n            public Node getNextSibling() {\n                return null;\n            }\n\n            @Override\n            public NamedNodeMap getAttributes() {\n                return null;\n            }\n\n            @Override\n            public Document getOwnerDocument() {\n                return null;\n            }\n\n            @Override\n            public Node insertBefore(Node newChild, Node refChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Node removeChild(Node oldChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Node appendChild(Node newChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public boolean hasChildNodes() {\n                return false;\n            }\n\n            @Override\n            public Node cloneNode(boolean deep) {\n                return null;\n            }\n\n            @Override\n            public void normalize() {\n\n            }\n\n            @Override\n            public boolean isSupported(String feature, String version) {\n                return false;\n            }\n\n            @Override\n            public String getNamespaceURI() {\n                return null;\n            }\n\n            @Override\n            public String getPrefix() {\n                return null;\n            }\n\n            @Override\n            public void setPrefix(String prefix) throws DOMException {\n\n            }\n\n            @Override\n            public String getLocalName() {\n                return null;\n            }\n\n            @Override\n            public boolean hasAttributes() {\n                return false;\n            }\n\n            @Override\n            public String getBaseURI() {\n                return null;\n            }\n\n            @Override\n            public short compareDocumentPosition(Node other) throws DOMException {\n                return 0;\n            }\n\n            @Override\n            public String getTextContent() throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void setTextContent(String textContent) throws DOMException {\n\n            }\n\n            @Override\n            public boolean isSameNode(Node other) {\n                return false;\n            }\n\n            @Override\n            public String lookupPrefix(String namespaceURI) {\n                return null;\n            }\n\n            @Override\n            public boolean isDefaultNamespace(String namespaceURI) {\n                return false;\n            }\n\n            @Override\n            public String lookupNamespaceURI(String prefix) {\n                return null;\n            }\n\n            @Override\n            public boolean isEqualNode(Node arg) {\n                return false;\n            }\n\n            @Override\n            public Object getFeature(String feature, String version) {\n                return null;\n            }\n\n            @Override\n            public Object setUserData(String key, Object data, UserDataHandler handler) {\n                return null;\n            }\n\n            @Override\n            public Object getUserData(String key) {\n                return null;\n            }\n        };\n        Iterator<?> iterator = IteratorUtils.getIterator(node);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_dictionaryInput()", "name": "testGetIterator_dictionaryInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_dictionaryInput()", "original_string": "    @Test\n    public void testGetIterator_dictionaryInput() {\n        Dictionary<String, String> dictionary = new Hashtable<>();\n        dictionary.put(\"key1\", \"value1\");\n        dictionary.put(\"key2\", \"value2\");\n        Iterator<?> iterator = IteratorUtils.getIterator(dictionary);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_arrayInput()", "name": "testGetIterator_arrayInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_arrayInput()", "original_string": "    @Test\n    public void testGetIterator_arrayInput() {\n        int[] array = {1, 2, 3};\n        Iterator<?> iterator = IteratorUtils.getIterator(array);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_objectWithIteratorMethodInput()", "name": "testGetIterator_objectWithIteratorMethodInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_objectWithIteratorMethodInput()", "original_string": "    @Test\n    public void testGetIterator_objectWithIteratorMethodInput() {\n        Object obj = new Object() {\n            public Iterator<String> iterator() {\n                return Arrays.asList(\"a\", \"b\", \"c\").iterator();\n            }\n        };\n        Iterator<?> iterator = IteratorUtils.getIterator(obj);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest.[void]testGetIterator_singletonIteratorInput()", "name": "testGetIterator_singletonIteratorInput", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIterator_singletonIteratorInput()", "original_string": "    @Test\n    public void testGetIterator_singletonIteratorInput() {\n        Object obj = new Object();\n        Iterator<?> iterator = IteratorUtils.getIterator(obj);\n        assertTrue(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "class_name": "IteratorUtils_getIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java.IteratorUtils_getIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest.[void]testEmptyMultiSet()", "name": "testEmptyMultiSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyMultiSet()", "original_string": "    @Test\n    public void testEmptyMultiSet() {\n        final MultiSet<Integer> empty = MultiSetUtils.emptyMultiSet();\n        assertEquals(0, empty.size());\n\n        assertThrows(UnsupportedOperationException.class, () -> empty.add(55),\n                \"Empty multi set must be read-only\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java", "class_name": "MultiSetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link MultiSetUtils#emptyMultiSet()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest.[void]testPredicatedMultiSet()", "name": "testPredicatedMultiSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedMultiSet()", "original_string": "    @Test\n    public void testPredicatedMultiSet() {\n        final Predicate<String> predicate = object -> object.length() == 1;\n        final MultiSet<String> predicated = MultiSetUtils.predicatedMultiSet(multiSet, predicate);\n        assertEquals(multiSet.size(), predicated.size());\n        assertEquals(multiSet.getCount(\"a\"), predicated.getCount(\"a\"));\n\n        assertThrows(NullPointerException.class, () -> MultiSetUtils.predicatedMultiSet(null, predicate),\n                \"Expecting NPE\");\n\n        assertThrows(NullPointerException.class, () -> MultiSetUtils.predicatedMultiSet(multiSet, null),\n                \"Expecting NPE\");\n\n        assertThrows(IllegalArgumentException.class, () -> MultiSetUtils.predicatedMultiSet(multiSet, object -> object.equals(\"a\")),\n                \"Predicate is violated for all elements not being 'a'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java", "class_name": "MultiSetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link MultiSetUtils#predicatedMultiSet(org.apache.commons.collections4.MultiSet, org.apache.commons.collections4.Predicate)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest.[void]testSynchronizedMultiSet()", "name": "testSynchronizedMultiSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedMultiSet()", "original_string": "    @Test\n    public void testSynchronizedMultiSet() {\n        final MultiSet<String> synced = MultiSetUtils.synchronizedMultiSet(multiSet);\n        assertEquals(multiSet, synced);\n        synced.add(\"a\"); // ensure adding works\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java", "class_name": "MultiSetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link MultiSetUtils#unmodifiableMultiSet(org.apache.commons.collections4.MultiSet) ()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest.[void]testUnmodifiableMultiSet()", "name": "testUnmodifiableMultiSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableMultiSet()", "original_string": "    @Test\n    public void testUnmodifiableMultiSet() {\n        final MultiSet<String> unmodifiable = MultiSetUtils.unmodifiableMultiSet(multiSet);\n        assertEquals(multiSet, unmodifiable);\n\n        assertThrows(UnsupportedOperationException.class, () -> unmodifiable.add(\"a\"),\n                \"Empty multi set must be read-only\");\n\n        assertThrows(NullPointerException.class, () -> MultiSetUtils.unmodifiableMultiSet(null),\n                \"Expecting NPE\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java", "class_name": "MultiSetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/MultiSetUtilsTest.java.MultiSetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link MultiSetUtils#unmodifiableMultiSet(org.apache.commons.collections4.MultiSet) ()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java.IteratorUtils_chainedIteratorTest.[void]testChainedIterator()", "name": "testChainedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChainedIterator()", "original_string": "    @Test\n    public void testChainedIterator() {\n        // Given\n        List<Integer> list1 = Arrays.asList(1, 2, 3);\n        List<Integer> list2 = Arrays.asList(4, 5, 6);\n        Iterator<Integer> iterator1 = list1.iterator();\n        Iterator<Integer> iterator2 = list2.iterator();\n\n        // When\n        Iterator<Integer> chainedIterator = IteratorUtils.chainedIterator(iterator1, iterator2);\n\n        // Then\n        assertTrue(chainedIterator.hasNext());\n        assertEquals(1, chainedIterator.next());\n        assertEquals(2, chainedIterator.next());\n        assertEquals(3, chainedIterator.next());\n        assertEquals(4, chainedIterator.next());\n        assertEquals(5, chainedIterator.next());\n        assertEquals(6, chainedIterator.next());\n        assertTrue(!chainedIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java", "class_name": "IteratorUtils_chainedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java.IteratorUtils_chainedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testDifference()", "name": "testDifference", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDifference()", "original_string": "    @Test\n    public void testDifference() {\n        final SetView<Integer> set = SetUtils.difference(setA, setB);\n        assertEquals(2, set.size());\n        assertTrue(set.contains(1));\n        assertTrue(set.contains(2));\n        for (final Integer i : setB) {\n            assertFalse(set.contains(i));\n        }\n\n        final Set<Integer> set2 = SetUtils.difference(setA, SetUtils.<Integer>emptySet());\n        assertEquals(setA, set2);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.difference(setA, null),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.difference(null, setA),\n                        \"Expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testDisjunction()", "name": "testDisjunction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisjunction()", "original_string": "    @Test\n    public void testDisjunction() {\n        final SetView<Integer> set = SetUtils.disjunction(setA, setB);\n        assertEquals(4, set.size());\n        assertTrue(set.contains(1));\n        assertTrue(set.contains(2));\n        assertTrue(set.contains(6));\n        assertTrue(set.contains(7));\n        assertFalse(set.contains(3));\n        assertFalse(set.contains(4));\n        assertFalse(set.contains(5));\n\n        final Set<Integer> set2 = SetUtils.disjunction(setA, SetUtils.<Integer>emptySet());\n        assertEquals(setA, set2);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.disjunction(setA, null),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.disjunction(null, setA),\n                        \"Expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testEmptyIfNull()", "name": "testEmptyIfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIfNull()", "original_string": "    @Test\n    public void testEmptyIfNull() {\n        assertTrue(SetUtils.emptyIfNull(null).isEmpty());\n\n        final Set<Long> set = new HashSet<>();\n        assertSame(set, SetUtils.emptyIfNull(set));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testEquals()", "name": "testEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals()", "original_string": "    @Test\n    public void testEquals() {\n        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n\n        final Set<String> a = new HashSet<>(data);\n        final Set<String> b = new HashSet<>(data);\n\n        assertEquals(a, b);\n        assertTrue(SetUtils.isEqualSet(a, b));\n        a.clear();\n        assertFalse(SetUtils.isEqualSet(a, b));\n        assertFalse(SetUtils.isEqualSet(a, null));\n        assertFalse(SetUtils.isEqualSet(null, b));\n        assertTrue(SetUtils.isEqualSet(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n\n        final Set<String> a = new HashSet<>(data);\n        final Set<String> b = new HashSet<>(data);\n\n        assertEquals(a.hashCode(), b.hashCode());\n        assertEquals(a.hashCode(), SetUtils.hashCodeForSet(a));\n        assertEquals(b.hashCode(), SetUtils.hashCodeForSet(b));\n        assertEquals(SetUtils.hashCodeForSet(a), SetUtils.hashCodeForSet(b));\n        a.clear();\n        assertNotEquals(SetUtils.hashCodeForSet(a), SetUtils.hashCodeForSet(b));\n        assertEquals(0, SetUtils.hashCodeForSet(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testHashSet()", "name": "testHashSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashSet()", "original_string": "    @Test\n    public void testHashSet() {\n        final Set<?> set1 = SetUtils.unmodifiableSet();\n        assertTrue(set1.isEmpty(), \"set is empty\");\n\n        final Set<Integer> set2 = SetUtils.hashSet(1, 2, 2, 3);\n        assertEquals(3, set2.size(), \"set has 3 elements\");\n        assertTrue(set2.contains(1), \"set contains 1\");\n        assertTrue(set2.contains(2), \"set contains 2\");\n        assertTrue(set2.contains(3), \"set contains 3\");\n\n        final Set<String> set3 = SetUtils.hashSet(\"1\", \"2\", \"2\", \"3\");\n        assertEquals(3, set3.size(), \"set has 3 elements\");\n        assertTrue(set3.contains(\"1\"), \"set contains 1\");\n        assertTrue(set3.contains(\"2\"), \"set contains 2\");\n        assertTrue(set3.contains(\"3\"), \"set contains 3\");\n\n        final Set<?> set4 = SetUtils.hashSet(null, null);\n        assertEquals(1, set4.size(), \"set has 1 element\");\n        assertTrue(set4.contains(null), \"set contains null\");\n\n        final Set<?> set5 = SetUtils.hashSet((Object[]) null);\n        assertNull(set5, \"set is null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testIntersection()", "name": "testIntersection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersection()", "original_string": "    @Test\n    public void testIntersection() {\n        final SetView<Integer> set = SetUtils.intersection(setA, setB);\n        assertEquals(3, set.size());\n        assertTrue(set.contains(3));\n        assertTrue(set.contains(4));\n        assertTrue(set.contains(5));\n        assertFalse(set.contains(1));\n        assertFalse(set.contains(2));\n        assertFalse(set.contains(6));\n        assertFalse(set.contains(7));\n\n        final Set<Integer> set2 = SetUtils.intersection(setA, SetUtils.<Integer>emptySet());\n        assertEquals(SetUtils.<Integer>emptySet(), set2);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.intersection(setA, null),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.intersection(null, setA),\n                        \"Expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testNewIdentityHashSet()", "name": "testNewIdentityHashSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewIdentityHashSet()", "original_string": "    @Test\n    public void testNewIdentityHashSet() {\n        final Set<String> set = SetUtils.newIdentityHashSet();\n        final String a = new String(\"a\");\n        set.add(a);\n        set.add(new String(\"b\"));\n        set.add(a);\n\n        assertEquals(2, set.size());\n\n        set.add(new String(\"a\"));\n        assertEquals(3, set.size());\n\n        set.remove(a);\n        assertEquals(2, set.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testpredicatedSet()", "name": "testpredicatedSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testpredicatedSet()", "original_string": "    @Test\n    public void testpredicatedSet() {\n        final Predicate<Object> predicate = String.class::isInstance;\n        final Set<Object> set = SetUtils.predicatedSet(new HashSet<>(), predicate);\n        assertInstanceOf(PredicatedSet.class, set, \"returned object should be a PredicatedSet\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.predicatedSet(new HashSet<>(), null),\n                        \"Expecting NullPointerException for null predicate.\"),\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.predicatedSet(null, predicate),\n                        \"Expecting NullPointerException for null set.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testUnion()", "name": "testUnion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnion()", "original_string": "    @Test\n    public void testUnion() {\n        final SetView<Integer> set = SetUtils.union(setA, setB);\n        assertEquals(7, set.size());\n        assertTrue(set.containsAll(setA));\n        assertTrue(set.containsAll(setB));\n\n        final Set<Integer> set2 = SetUtils.union(setA, SetUtils.<Integer>emptySet());\n        assertEquals(setA, set2);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.union(setA, null),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> SetUtils.union(null, setA),\n                        \"Expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testUnmodifiableSet()", "name": "testUnmodifiableSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableSet()", "original_string": "    @Test\n    public void testUnmodifiableSet() {\n        final Set<?> set1 = SetUtils.unmodifiableSet();\n        assertTrue(set1.isEmpty(), \"set is empty\");\n\n        final Set<Integer> set2 = SetUtils.unmodifiableSet(1, 2, 2, 3);\n        assertEquals(3, set2.size(), \"set has 3 elements\");\n        assertTrue(set2.contains(1), \"set contains 1\");\n        assertTrue(set2.contains(2), \"set contains 2\");\n        assertTrue(set2.contains(3), \"set contains 3\");\n\n        final Set<String> set3 = SetUtils.unmodifiableSet(\"1\", \"2\", \"2\", \"3\");\n        assertEquals(3, set3.size(), \"set has 3 elements\");\n        assertTrue(set3.contains(\"1\"), \"set contains 1\");\n        assertTrue(set3.contains(\"2\"), \"set contains 2\");\n        assertTrue(set3.contains(\"3\"), \"set contains 3\");\n\n        final Set<?> set4 = SetUtils.unmodifiableSet(null, null);\n        assertEquals(1, set4.size(), \"set has 1 element\");\n        assertTrue(set4.contains(null), \"set contains null\");\n\n        final Set<?> set5 = SetUtils.unmodifiableSet((Object[]) null);\n        assertNull(set5, \"set is null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest.[void]testUnmodifiableSetWrap()", "name": "testUnmodifiableSetWrap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableSetWrap()", "original_string": "    @Test\n    public void testUnmodifiableSetWrap() {\n        final Set<Integer> set1 = SetUtils.unmodifiableSet(1, 2, 2, 3);\n        final Set<Integer> set2 = SetUtils.unmodifiableSet(set1);\n        assertSame(set1, set2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java", "class_name": "SetUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/SetUtilsTest.java.SetUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest.[void]testSwitchTransformerWithTruePredicate()", "name": "testSwitchTransformerWithTruePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchTransformerWithTruePredicate()", "original_string": "    @Test\n    public void testSwitchTransformerWithTruePredicate() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(1, transformer.transform(\"anyInput\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "class_name": "TransformerUtils_switchTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest.[void]testSwitchTransformerWithFalsePredicate()", "name": "testSwitchTransformerWithFalsePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchTransformerWithFalsePredicate()", "original_string": "    @Test\n    public void testSwitchTransformerWithFalsePredicate() {\n        Predicate<String> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(0, transformer.transform(\"anyInput\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "class_name": "TransformerUtils_switchTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest.[void]testSwitchTransformerWithEqualPredicate()", "name": "testSwitchTransformerWithEqualPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchTransformerWithEqualPredicate()", "original_string": "    @Test\n    public void testSwitchTransformerWithEqualPredicate() {\n        Predicate<String> equalPredicate = EqualPredicate.equalPredicate(\"match\");\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(equalPredicate, trueTransformer, falseTransformer);\n\n        assertEquals(1, transformer.transform(\"match\"));\n        assertEquals(0, transformer.transform(\"noMatch\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "class_name": "TransformerUtils_switchTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest.[void]testSwitchTransformerWithExceptionTransformer()", "name": "testSwitchTransformerWithExceptionTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchTransformerWithExceptionTransformer()", "original_string": "    @Test\n    public void testSwitchTransformerWithExceptionTransformer() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, Integer> trueTransformer = ExceptionTransformer.exceptionTransformer();\n        Transformer<String, Integer> falseTransformer = ConstantTransformer.constantTransformer(0);\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertThrows(FunctorException.class, () -> transformer.transform(\"anyInput\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "class_name": "TransformerUtils_switchTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest.[void]testSwitchTransformerWithNullDefaultTransformer()", "name": "testSwitchTransformerWithNullDefaultTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchTransformerWithNullDefaultTransformer()", "original_string": "    @Test\n    public void testSwitchTransformerWithNullDefaultTransformer() {\n        Predicate<String> falsePredicate = FalsePredicate.falsePredicate();\n        Transformer<String, Integer> trueTransformer = ConstantTransformer.constantTransformer(1);\n        Transformer<String, Integer> falseTransformer = null;\n\n        Transformer<String, Integer> transformer = TransformerUtils.switchTransformer(falsePredicate, trueTransformer, falseTransformer);\n\n        assertNull(transformer.transform(\"anyInput\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "class_name": "TransformerUtils_switchTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest.[void]testSwitchTransformerWithNOPTransformer()", "name": "testSwitchTransformerWithNOPTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchTransformerWithNOPTransformer()", "original_string": "    @Test\n    public void testSwitchTransformerWithNOPTransformer() {\n        Predicate<String> truePredicate = TruePredicate.truePredicate();\n        Transformer<String, String> trueTransformer = NOPTransformer.nopTransformer();\n        Transformer<String, String> falseTransformer = StringValueTransformer.stringValueTransformer();\n\n        Transformer<String, String> transformer = TransformerUtils.switchTransformer(truePredicate, trueTransformer, falseTransformer);\n\n        assertEquals(\"anyInput\", transformer.transform(\"anyInput\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "class_name": "TransformerUtils_switchTransformerTest", "class_uri": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java.TransformerUtils_switchTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAllPredicate()", "name": "testAllPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAllPredicate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAllPredicate() {\n        assertPredicateTrue(AllPredicate.allPredicate(), null);\n        assertTrue(AllPredicate.allPredicate(truePredicate(), truePredicate(), truePredicate()).test(null));\n        assertFalse(AllPredicate.allPredicate(truePredicate(), FalsePredicate.falsePredicate(), truePredicate()).test(null));\n        assertFalse(AllPredicate.allPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), truePredicate()).test(null));\n        assertFalse(AllPredicate.allPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        final Collection<Predicate<Object>> coll = new ArrayList<>();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertTrue(AllPredicate.allPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertFalse(AllPredicate.allPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertFalse(AllPredicate.allPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        assertFalse(AllPredicate.allPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        assertPredicateFalse(AllPredicate.allPredicate(coll), null);\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        assertPredicateTrue(AllPredicate.allPredicate(coll), null);\n        coll.clear();\n        assertPredicateTrue(AllPredicate.allPredicate(coll), null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAllPredicateEx1()", "name": "testAllPredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicateEx1()", "original_string": "    @Test\n    public void testAllPredicateEx1() {\n        assertThrows(NullPointerException.class, () -> AllPredicate.allPredicate((Predicate<Object>[]) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAllPredicateEx2()", "name": "testAllPredicateEx2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAllPredicateEx2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAllPredicateEx2() {\n        assertThrows(NullPointerException.class, () -> AllPredicate.<Object>allPredicate(new Predicate[] { null }));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAllPredicateEx3()", "name": "testAllPredicateEx3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicateEx3()", "original_string": "    @Test\n    public void testAllPredicateEx3() {\n        assertThrows(NullPointerException.class, () -> AllPredicate.allPredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAllPredicateEx4()", "name": "testAllPredicateEx4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicateEx4()", "original_string": "    @Test\n    public void testAllPredicateEx4() {\n        assertThrows(NullPointerException.class, () -> AllPredicate.allPredicate((Collection<Predicate<Object>>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAllPredicateEx5()", "name": "testAllPredicateEx5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicateEx5()", "original_string": "    @Test\n    public void testAllPredicateEx5() {\n        AllPredicate.allPredicate(Collections.emptyList());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAllPredicateEx6()", "name": "testAllPredicateEx6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicateEx6()", "original_string": "    @Test\n    public void testAllPredicateEx6() {\n        final Collection<Predicate<Object>> coll = new ArrayList<>();\n        coll.add(null);\n        coll.add(null);\n        assertThrows(NullPointerException.class, () -> AllPredicate.allPredicate(coll));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAndPredicate()", "name": "testAndPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAndPredicate()", "original_string": "    @Test\n    public void testAndPredicate() {\n        assertTrue(PredicateUtils.andPredicate(truePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.andPredicate(truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.andPredicate(FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.andPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAndPredicateEx()", "name": "testAndPredicateEx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAndPredicateEx()", "original_string": "    @Test\n    public void testAndPredicateEx() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.andPredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAnyPredicate()", "name": "testAnyPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAnyPredicate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAnyPredicate() {\n        assertPredicateFalse(PredicateUtils.anyPredicate(), null);\n\n        assertTrue(PredicateUtils.anyPredicate(truePredicate(), truePredicate(), truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.anyPredicate(truePredicate(), FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.anyPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.anyPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        final Collection<Predicate<Object>> coll = new ArrayList<>();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        assertFalse(PredicateUtils.anyPredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        assertPredicateFalse(PredicateUtils.anyPredicate(coll), null);\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        assertPredicateTrue(PredicateUtils.anyPredicate(coll), null);\n        coll.clear();\n        assertPredicateFalse(PredicateUtils.anyPredicate(coll), null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAnyPredicateEx1()", "name": "testAnyPredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAnyPredicateEx1()", "original_string": "    @Test\n    public void testAnyPredicateEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.anyPredicate((Predicate<Object>[]) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAnyPredicateEx2()", "name": "testAnyPredicateEx2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAnyPredicateEx2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAnyPredicateEx2() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.anyPredicate(new Predicate[] {null}));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAnyPredicateEx3()", "name": "testAnyPredicateEx3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAnyPredicateEx3()", "original_string": "    @Test\n    public void testAnyPredicateEx3() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.anyPredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAnyPredicateEx4()", "name": "testAnyPredicateEx4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAnyPredicateEx4()", "original_string": "    @Test\n    public void testAnyPredicateEx4() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.anyPredicate((Collection<Predicate<Object>>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAnyPredicateEx5()", "name": "testAnyPredicateEx5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAnyPredicateEx5()", "original_string": "    @Test\n    public void testAnyPredicateEx5() {\n        PredicateUtils.anyPredicate(Collections.emptyList());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAnyPredicateEx6()", "name": "testAnyPredicateEx6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAnyPredicateEx6()", "original_string": "    @Test\n    public void testAnyPredicateEx6() {\n        final Collection<Predicate<Object>> coll = new ArrayList<>();\n        coll.add(null);\n        coll.add(null);\n        assertThrows(NullPointerException.class, () -> PredicateUtils.anyPredicate(coll));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAsPredicateTransformer()", "name": "testAsPredicateTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsPredicateTransformer()", "original_string": "    @Test\n    public void testAsPredicateTransformer() {\n        assertFalse(PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(false));\n        assertTrue(PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(true));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAsPredicateTransformerEx1()", "name": "testAsPredicateTransformerEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsPredicateTransformerEx1()", "original_string": "    @Test\n    public void testAsPredicateTransformerEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.asPredicate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testAsPredicateTransformerEx2()", "name": "testAsPredicateTransformerEx2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsPredicateTransformerEx2()", "original_string": "    @Test\n    public void testAsPredicateTransformerEx2() {\n        assertThrows(FunctorException.class, () -> PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testEitherPredicate()", "name": "testEitherPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEitherPredicate()", "original_string": "    @Test\n    public void testEitherPredicate() {\n        assertFalse(PredicateUtils.eitherPredicate(truePredicate(), truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.eitherPredicate(truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testEitherPredicateEx()", "name": "testEitherPredicateEx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEitherPredicateEx()", "original_string": "    @Test\n    public void testEitherPredicateEx() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.eitherPredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testExceptionPredicate()", "name": "testExceptionPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExceptionPredicate()", "original_string": "    @Test\n    public void testExceptionPredicate() {\n        assertNotNull(PredicateUtils.exceptionPredicate());\n        assertSame(PredicateUtils.exceptionPredicate(), PredicateUtils.exceptionPredicate());\n\n        assertThrows(FunctorException.class, () -> PredicateUtils.exceptionPredicate().evaluate(null));\n\n        assertThrows(FunctorException.class, () -> PredicateUtils.exceptionPredicate().evaluate(cString));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testFalsePredicate()", "name": "testFalsePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFalsePredicate()", "original_string": "    @Test\n    public void testFalsePredicate() {\n        assertNotNull(FalsePredicate.falsePredicate());\n        assertSame(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate());\n        assertFalse(FalsePredicate.falsePredicate().evaluate(null));\n        assertFalse(FalsePredicate.falsePredicate().evaluate(cObject));\n        assertFalse(FalsePredicate.falsePredicate().evaluate(cString));\n        assertFalse(FalsePredicate.falsePredicate().evaluate(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testIdentityPredicate()", "name": "testIdentityPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIdentityPredicate()", "original_string": "    @Test\n    public void testIdentityPredicate() {\n        assertSame(nullPredicate(), PredicateUtils.identityPredicate(null));\n        assertNotNull(PredicateUtils.identityPredicate(6));\n        assertFalse(PredicateUtils.identityPredicate(6).evaluate(null));\n        assertFalse(PredicateUtils.<Object>identityPredicate(6).evaluate(cObject));\n        assertFalse(PredicateUtils.<Object>identityPredicate(6).evaluate(cString));\n        assertTrue(PredicateUtils.identityPredicate(6).evaluate(cInteger)); // Cannot use valueOf here\n        assertTrue(PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInstanceOfPredicate()", "name": "testInstanceOfPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstanceOfPredicate()", "original_string": "    @Test\n    public void testInstanceOfPredicate() {\n        assertNotNull(PredicateUtils.instanceofPredicate(String.class));\n        assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(null));\n        assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(cObject));\n        assertTrue(PredicateUtils.instanceofPredicate(String.class).evaluate(cString));\n        assertFalse(PredicateUtils.instanceofPredicate(String.class).evaluate(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicate()", "name": "testInvokerPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicate()", "original_string": "    @Test\n    public void testInvokerPredicate() {\n        final List<Object> list = new ArrayList<>();\n        assertTrue(PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n        list.add(new Object());\n        assertFalse(PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicate2()", "name": "testInvokerPredicate2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicate2()", "original_string": "    @Test\n    public void testInvokerPredicate2() {\n        final List<String> list = new ArrayList<>();\n        assertFalse(PredicateUtils.invokerPredicate(\n                \"contains\", new Class[]{Object.class}, new Object[]{cString}).evaluate(list));\n        list.add(cString);\n        assertTrue(PredicateUtils.invokerPredicate(\n                \"contains\", new Class[]{Object.class}, new Object[]{cString}).evaluate(list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicate2Ex1()", "name": "testInvokerPredicate2Ex1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicate2Ex1()", "original_string": "    @Test\n    public void testInvokerPredicate2Ex1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.invokerPredicate(null, null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicate2Ex2()", "name": "testInvokerPredicate2Ex2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicate2Ex2()", "original_string": "    @Test\n    public void testInvokerPredicate2Ex2() {\n        assertThrows(FunctorException.class, () -> PredicateUtils.\n                invokerPredicate(\"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicate2Ex3()", "name": "testInvokerPredicate2Ex3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicate2Ex3()", "original_string": "    @Test\n    public void testInvokerPredicate2Ex3() {\n        assertThrows(FunctorException.class, () -> PredicateUtils.invokerPredicate(\n                \"noSuchMethod\", new Class[] {Object.class}, new Object[] {cString}).evaluate(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicateEx1()", "name": "testInvokerPredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicateEx1()", "original_string": "    @Test\n    public void testInvokerPredicateEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.invokerPredicate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicateEx2()", "name": "testInvokerPredicateEx2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicateEx2()", "original_string": "    @Test\n    public void testInvokerPredicateEx2() {\n        assertThrows(FunctorException.class, () -> PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testInvokerPredicateEx3()", "name": "testInvokerPredicateEx3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInvokerPredicateEx3()", "original_string": "    @Test\n    public void testInvokerPredicateEx3() {\n        assertThrows(FunctorException.class, () -> PredicateUtils.invokerPredicate(\"noSuchMethod\").evaluate(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testIsNotNullPredicate()", "name": "testIsNotNullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsNotNullPredicate()", "original_string": "    @Test\n    public void testIsNotNullPredicate() {\n        assertNotNull(PredicateUtils.notNullPredicate());\n        assertSame(PredicateUtils.notNullPredicate(), PredicateUtils.notNullPredicate());\n        assertFalse(PredicateUtils.notNullPredicate().evaluate(null));\n        assertTrue(PredicateUtils.notNullPredicate().evaluate(cObject));\n        assertTrue(PredicateUtils.notNullPredicate().evaluate(cString));\n        assertTrue(PredicateUtils.notNullPredicate().evaluate(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNeitherPredicate()", "name": "testNeitherPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNeitherPredicate()", "original_string": "    @Test\n    public void testNeitherPredicate() {\n        assertFalse(PredicateUtils.neitherPredicate(truePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.neitherPredicate(truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNeitherPredicateEx()", "name": "testNeitherPredicateEx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNeitherPredicateEx()", "original_string": "    @Test\n    public void testNeitherPredicateEx() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.neitherPredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNonePredicate()", "name": "testNonePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNonePredicate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNonePredicate() {\n        assertPredicateTrue(PredicateUtils.nonePredicate(), null);\n        assertFalse(PredicateUtils.nonePredicate(truePredicate(), truePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.nonePredicate(truePredicate(), FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.nonePredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.nonePredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        final Collection<Predicate<Object>> coll = new ArrayList<>();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        assertTrue(PredicateUtils.nonePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        assertPredicateTrue(PredicateUtils.nonePredicate(coll), null);\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        assertPredicateFalse(PredicateUtils.nonePredicate(coll), null);\n        coll.clear();\n        assertPredicateTrue(PredicateUtils.nonePredicate(coll), null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNonePredicateEx1()", "name": "testNonePredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNonePredicateEx1()", "original_string": "    @Test\n    public void testNonePredicateEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nonePredicate((Predicate<Object>[]) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNonePredicateEx2()", "name": "testNonePredicateEx2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNonePredicateEx2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNonePredicateEx2() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nonePredicate(new Predicate[] {null}));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNonePredicateEx3()", "name": "testNonePredicateEx3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNonePredicateEx3()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNonePredicateEx3() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nonePredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNonePredicateEx4()", "name": "testNonePredicateEx4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNonePredicateEx4()", "original_string": "    @Test\n    public void testNonePredicateEx4() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nonePredicate((Collection<Predicate<Object>>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNonePredicateEx5()", "name": "testNonePredicateEx5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNonePredicateEx5()", "original_string": "    @Test\n    public void testNonePredicateEx5() {\n        PredicateUtils.nonePredicate(Collections.emptyList());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNonePredicateEx6()", "name": "testNonePredicateEx6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNonePredicateEx6()", "original_string": "    @Test\n    public void testNonePredicateEx6() {\n        final Collection<Predicate<Object>> coll = new ArrayList<>();\n        coll.add(null);\n        coll.add(null);\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nonePredicate(coll));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNotPredicate()", "name": "testNotPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNotPredicate()", "original_string": "    @Test\n    public void testNotPredicate() {\n        assertNotNull(PredicateUtils.notPredicate(TruePredicate.truePredicate()));\n        assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cObject));\n        assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cString));\n        assertFalse(PredicateUtils.notPredicate(truePredicate()).evaluate(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNotPredicateEx()", "name": "testNotPredicateEx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNotPredicateEx()", "original_string": "    @Test\n    public void testNotPredicateEx() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.notPredicate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNullIsExceptionPredicate()", "name": "testNullIsExceptionPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullIsExceptionPredicate()", "original_string": "    @Test\n    public void testNullIsExceptionPredicate() {\n        assertTrue(PredicateUtils.nullIsExceptionPredicate(truePredicate()).evaluate(new Object()));\n        assertThrows(FunctorException.class, () -> PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNullIsExceptionPredicateEx1()", "name": "testNullIsExceptionPredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullIsExceptionPredicateEx1()", "original_string": "    @Test\n    public void testNullIsExceptionPredicateEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nullIsExceptionPredicate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNullIsFalsePredicate()", "name": "testNullIsFalsePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullIsFalsePredicate()", "original_string": "    @Test\n    public void testNullIsFalsePredicate() {\n        assertFalse(PredicateUtils.nullIsFalsePredicate(truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.nullIsFalsePredicate(truePredicate()).evaluate(new Object()));\n        assertFalse(PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNullIsFalsePredicateEx1()", "name": "testNullIsFalsePredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullIsFalsePredicateEx1()", "original_string": "    @Test\n    public void testNullIsFalsePredicateEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nullIsFalsePredicate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNullIsTruePredicate()", "name": "testNullIsTruePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullIsTruePredicate()", "original_string": "    @Test\n    public void testNullIsTruePredicate() {\n        assertTrue(PredicateUtils.nullIsTruePredicate(truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.nullIsTruePredicate(truePredicate()).evaluate(new Object()));\n        assertFalse(PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testNullIsTruePredicateEx1()", "name": "testNullIsTruePredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullIsTruePredicateEx1()", "original_string": "    @Test\n    public void testNullIsTruePredicateEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.nullIsTruePredicate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOnePredicate()", "name": "testOnePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOnePredicate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOnePredicate() {\n        assertPredicateFalse(PredicateUtils.onePredicate((Predicate<Object>[]) new Predicate[] {}), null);\n        assertFalse(PredicateUtils.onePredicate(truePredicate(), truePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.onePredicate(truePredicate(), FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.onePredicate(truePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(), truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.onePredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        final Collection<Predicate<Object>> coll = new ArrayList<>();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(TruePredicate.truePredicate());\n        assertTrue(PredicateUtils.onePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        coll.add(FalsePredicate.falsePredicate());\n        assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));\n        coll.clear();\n        coll.add(FalsePredicate.falsePredicate());\n        assertPredicateFalse(PredicateUtils.onePredicate(coll), null);\n        coll.clear();\n        coll.add(TruePredicate.truePredicate());\n        assertPredicateTrue(PredicateUtils.onePredicate(coll), null);\n        coll.clear();\n        assertPredicateFalse(PredicateUtils.onePredicate(coll), null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOnePredicateEx1()", "name": "testOnePredicateEx1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnePredicateEx1()", "original_string": "    @Test\n    public void testOnePredicateEx1() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.onePredicate((Predicate<Object>[]) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOnePredicateEx2()", "name": "testOnePredicateEx2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOnePredicateEx2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOnePredicateEx2() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.onePredicate(new Predicate[] {null}));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOnePredicateEx3()", "name": "testOnePredicateEx3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnePredicateEx3()", "original_string": "    @Test\n    public void testOnePredicateEx3() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.onePredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOnePredicateEx4()", "name": "testOnePredicateEx4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnePredicateEx4()", "original_string": "    @Test\n    public void testOnePredicateEx4() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.onePredicate((Collection<Predicate<Object>>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOnePredicateEx5()", "name": "testOnePredicateEx5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOnePredicateEx5()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOnePredicateEx5() {\n        PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOnePredicateEx6()", "name": "testOnePredicateEx6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnePredicateEx6()", "original_string": "    @Test\n    public void testOnePredicateEx6() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.onePredicate(Arrays.asList(null, null)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOrPredicate()", "name": "testOrPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrPredicate()", "original_string": "    @Test\n    public void testOrPredicate() {\n        assertTrue(PredicateUtils.orPredicate(truePredicate(), truePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.orPredicate(truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n        assertTrue(PredicateUtils.orPredicate(FalsePredicate.falsePredicate(), truePredicate()).evaluate(null));\n        assertFalse(PredicateUtils.orPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testOrPredicateEx()", "name": "testOrPredicateEx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrPredicateEx()", "original_string": "    @Test\n    public void testOrPredicateEx() {\n        assertThrows(NullPointerException.class, () -> PredicateUtils.orPredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testSingletonPatternInSerialization()", "name": "testSingletonPatternInSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingletonPatternInSerialization()", "original_string": "    @Test\n    public void testSingletonPatternInSerialization() {\n        final Object[] singletons = {\n            ExceptionPredicate.INSTANCE,\n            FalsePredicate.INSTANCE,\n            NotNullPredicate.INSTANCE,\n            NullPredicate.INSTANCE,\n            TruePredicate.INSTANCE\n        };\n\n        for (final Object original : singletons) {\n            TestUtils.assertSameAfterSerialization(\n                    \"Singleton pattern broken for \" + original.getClass(),\n                    original\n            );\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that all Predicate singletons hold singleton pattern in\nserialization/deserialization process.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testTransformedPredicate()", "name": "testTransformedPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedPredicate()", "original_string": "    @Test\n    public void testTransformedPredicate() {\n        assertTrue(PredicateUtils.transformedPredicate(\n                TransformerUtils.nopTransformer(),\n                truePredicate()).evaluate(new Object()));\n\n        final Map<Object, Object> map = new HashMap<>();\n        map.put(Boolean.TRUE, \"Hello\");\n        final Transformer<Object, Object> t = TransformerUtils.mapTransformer(map);\n        final Predicate<Object> p = EqualPredicate.<Object>equalPredicate(\"Hello\");\n        assertFalse(PredicateUtils.transformedPredicate(t, p).evaluate(null));\n        assertTrue(PredicateUtils.transformedPredicate(t, p).evaluate(Boolean.TRUE));\n\n        assertThrows(NullPointerException.class, () -> PredicateUtils.transformedPredicate(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testTruePredicate()", "name": "testTruePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTruePredicate()", "original_string": "    @Test\n    public void testTruePredicate() {\n        assertNotNull(TruePredicate.truePredicate());\n        assertSame(TruePredicate.truePredicate(), TruePredicate.truePredicate());\n        assertTrue(truePredicate().evaluate(null));\n        assertTrue(truePredicate().evaluate(cObject));\n        assertTrue(truePredicate().evaluate(cString));\n        assertTrue(truePredicate().evaluate(cInteger));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest.[void]testUniquePredicate()", "name": "testUniquePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniquePredicate()", "original_string": "    @Test\n    public void testUniquePredicate() {\n        final Predicate<Object> p = PredicateUtils.uniquePredicate();\n        assertTrue(p.evaluate(new Object()));\n        assertTrue(p.evaluate(new Object()));\n        assertTrue(p.evaluate(new Object()));\n        assertTrue(p.evaluate(cString));\n        assertFalse(p.evaluate(cString));\n        assertFalse(p.evaluate(cString));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java", "class_name": "PredicateUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java.PredicateUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest.[void]testAsIterableFor()", "name": "testAsIterableFor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsIterableFor()", "original_string": "    @Test\n    public void testAsIterableFor() {\n        final Vector<String> vector = new Vector<>();\n        vector.addElement(\"zero\");\n        vector.addElement(\"one\");\n        final Enumeration<String> en = vector.elements();\n        final Iterator<String> iterator = EnumerationUtils.asIterable(en).iterator();\n        assertTrue(iterator.hasNext());\n        assertEquals(\"zero\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"one\", iterator.next());\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "class_name": "EnumerationUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest.[void]testAsIterableForNull()", "name": "testAsIterableForNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsIterableForNull()", "original_string": "    @Test\n    public void testAsIterableForNull() {\n        assertThrows(NullPointerException.class, () -> EnumerationUtils.asIterable((Enumeration) null).iterator().next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "class_name": "EnumerationUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest.[void]testGetFromEnumeration()", "name": "testGetFromEnumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromEnumeration()", "original_string": "    @Test\n    public void testGetFromEnumeration() throws Exception {\n        // Enumeration, entry exists\n        final Vector<String> vector = new Vector<>();\n        vector.addElement(\"zero\");\n        vector.addElement(\"one\");\n        Enumeration<String> en = vector.elements();\n        assertEquals(\"zero\", EnumerationUtils.get(en, 0));\n        en = vector.elements();\n        assertEquals(\"one\", EnumerationUtils.get(en, 1));\n\n        // Enumerator, non-existent entry\n        final Enumeration<String> finalEn = en;\n        assertThrows(IndexOutOfBoundsException.class, () -> EnumerationUtils.get(finalEn, 3));\n\n        assertFalse(en.hasMoreElements());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "class_name": "EnumerationUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest.[void]testToListWithHashtable()", "name": "testToListWithHashtable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToListWithHashtable()", "original_string": "    @Test\n    public void testToListWithHashtable() {\n        final Hashtable<String, Integer> expected = new Hashtable<>();\n        expected.put(\"one\", Integer.valueOf(1));\n        expected.put(\"two\", Integer.valueOf(2));\n        expected.put(\"three\", Integer.valueOf(3));\n        // validate elements.\n        final List<Integer> actualEltList = EnumerationUtils.toList(expected.elements());\n        assertEquals(expected.size(), actualEltList.size());\n        assertTrue(actualEltList.contains(Integer.valueOf(1)));\n        assertTrue(actualEltList.contains(Integer.valueOf(2)));\n        assertTrue(actualEltList.contains(Integer.valueOf(3)));\n        final List<Integer> expectedEltList = new ArrayList<>();\n        expectedEltList.add(Integer.valueOf(1));\n        expectedEltList.add(Integer.valueOf(2));\n        expectedEltList.add(Integer.valueOf(3));\n        assertTrue(actualEltList.containsAll(expectedEltList));\n\n        // validate keys.\n        final List<String> actualKeyList = EnumerationUtils.toList(expected.keys());\n        assertEquals(expected.size(), actualEltList.size());\n        assertTrue(actualKeyList.contains(\"one\"));\n        assertTrue(actualKeyList.contains(\"two\"));\n        assertTrue(actualKeyList.contains(\"three\"));\n        final List<String> expectedKeyList = new ArrayList<>();\n        expectedKeyList.add(\"one\");\n        expectedKeyList.add(\"two\");\n        expectedKeyList.add(\"three\");\n        assertTrue(actualKeyList.containsAll(expectedKeyList));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "class_name": "EnumerationUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest.[void]testToListWithStringTokenizer()", "name": "testToListWithStringTokenizer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToListWithStringTokenizer()", "original_string": "    @Test\n    public void testToListWithStringTokenizer() {\n        final List<String> expectedList1 = new ArrayList<>();\n        final StringTokenizer st = new StringTokenizer(TO_LIST_FIXTURE);\n        while (st.hasMoreTokens()) {\n            expectedList1.add(st.nextToken());\n        }\n        final List<String> expectedList2 = new ArrayList<>();\n        expectedList2.add(\"this\");\n        expectedList2.add(\"is\");\n        expectedList2.add(\"a\");\n        expectedList2.add(\"test\");\n        final List<String> actualList = EnumerationUtils.toList(new StringTokenizer(TO_LIST_FIXTURE));\n        assertEquals(expectedList1, expectedList2);\n        assertEquals(expectedList1, actualList);\n        assertEquals(expectedList2, actualList);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java", "class_name": "EnumerationUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java.EnumerationUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java.IteratorUtils_transformedIteratorTest.[void]testTransformedIterator_Success()", "name": "testTransformedIterator_Success", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedIterator_Success()", "original_string": "    @Test\n    public void testTransformedIterator_Success() {\n        Iterator<String> inputIterator = Arrays.asList(\"1\", \"2\", \"3\").iterator();\n        Transformer<String, Integer> transformer = new ConstantTransformer<>(1);\n\n        Iterator<Integer> result = IteratorUtils.transformedIterator(inputIterator, transformer);\n\n        assertNotNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java", "class_name": "IteratorUtils_transformedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java.IteratorUtils_transformedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java.IteratorUtils_transformedIteratorTest.[void]testTransformedIterator_NullIterator()", "name": "testTransformedIterator_NullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedIterator_NullIterator()", "original_string": "    @Test\n    public void testTransformedIterator_NullIterator() {\n        Transformer<String, Integer> transformer = new ConstantTransformer<>(1);\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.transformedIterator(null, transformer);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java", "class_name": "IteratorUtils_transformedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java.IteratorUtils_transformedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java.IteratorUtils_transformedIteratorTest.[void]testTransformedIterator_NullTransformer()", "name": "testTransformedIterator_NullTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedIterator_NullTransformer()", "original_string": "    @Test\n    public void testTransformedIterator_NullTransformer() {\n        Iterator<String> inputIterator = Arrays.asList(\"1\", \"2\", \"3\").iterator();\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.transformedIterator(inputIterator, null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java", "class_name": "IteratorUtils_transformedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java.IteratorUtils_transformedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testDefaultIfNull()", "name": "testDefaultIfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultIfNull()", "original_string": "    @Test\n    public void testDefaultIfNull() {\n        assertTrue(ListUtils.defaultIfNull(null, Collections.emptyList()).isEmpty());\n\n        final List<Long> list = new ArrayList<>();\n        assertSame(list, ListUtils.defaultIfNull(list, Collections.<Long>emptyList()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testEmptyIfNull()", "name": "testEmptyIfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIfNull()", "original_string": "    @Test\n    public void testEmptyIfNull() {\n        assertTrue(ListUtils.emptyIfNull(null).isEmpty());\n\n        final List<Long> list = new ArrayList<>();\n        assertSame(list, ListUtils.emptyIfNull(list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testEquals()", "name": "testEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals()", "original_string": "    @Test\n    public void testEquals() {\n        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n\n        final List<String> list1 = new ArrayList<>( data );\n        final List<String> list2 = new ArrayList<>( data );\n\n        assertEquals(list1, list2);\n        assertTrue(ListUtils.isEqualList(list1, list2));\n        list1.clear();\n        assertFalse(ListUtils.isEqualList(list1, list2));\n        assertFalse(ListUtils.isEqualList(list1, null));\n        assertFalse(ListUtils.isEqualList(null, list2));\n        assertTrue(ListUtils.isEqualList(null, null));\n\n        list2.clear();\n        list1.add(\"a\");\n        list2.add(\"b\");\n        assertFalse(ListUtils.isEqualList(list1, list2));\n\n        list1.add(\"b\");\n        list2.add(\"a\");\n        assertFalse(ListUtils.isEqualList(list1, list2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testGetFirst()", "name": "testGetFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFirst()", "original_string": "    @Test\n    public void testGetFirst() {\n        assertEquals(a, ListUtils.getFirst(fullList));\n        assertThrows(NullPointerException.class, () -> ListUtils.getFirst(null));\n        assertThrows(IndexOutOfBoundsException.class, () -> ListUtils.getFirst(new ArrayList<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testGetLast()", "name": "testGetLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetLast()", "original_string": "    @Test\n    public void testGetLast() {\n        assertEquals(e, ListUtils.getLast(fullList));\n        assertThrows(NullPointerException.class, () -> ListUtils.getFirst(null));\n        assertThrows(IndexOutOfBoundsException.class, () -> ListUtils.getFirst(new ArrayList<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        final Collection<String> data = Arrays.asList(\"a\", \"b\", \"c\");\n\n        final List<String> list1 = new ArrayList<>(data);\n        final List<String> list2 = new ArrayList<>(data);\n\n        assertEquals(list1.hashCode(), list2.hashCode());\n        assertEquals(list1.hashCode(), ListUtils.hashCodeForList(list1));\n        assertEquals(list2.hashCode(), ListUtils.hashCodeForList(list2));\n        assertEquals(ListUtils.hashCodeForList(list1), ListUtils.hashCodeForList(list2));\n        list1.clear();\n        assertNotEquals(ListUtils.hashCodeForList(list1), ListUtils.hashCodeForList(list2));\n        assertEquals(0, ListUtils.hashCodeForList(null));\n\n        list1.add(null);\n        assertEquals(31, ListUtils.hashCodeForList(list1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf()", "original_string": "    @Test\n    public void testIndexOf() {\n        Predicate<String> testPredicate = EqualPredicate.equalPredicate(\"d\");\n        int index = ListUtils.indexOf(fullList, testPredicate);\n        assertEquals(d, fullList.get(index));\n\n        testPredicate = EqualPredicate.equalPredicate(\"de\");\n        index = ListUtils.indexOf(fullList, testPredicate);\n        assertEquals(index, -1);\n\n        assertEquals(ListUtils.indexOf(null, testPredicate), -1);\n        assertEquals(ListUtils.indexOf(fullList, null), -1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the {@code indexOf} method in {@code ListUtils} class.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testIntersectEmptyWithEmptyList()", "name": "testIntersectEmptyWithEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectEmptyWithEmptyList()", "original_string": "    @Test\n    public void testIntersectEmptyWithEmptyList() {\n        final List<?> empty = Collections.EMPTY_LIST;\n        assertTrue(ListUtils.intersection(empty, empty).isEmpty(), \"result not empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests intersecting a non-empty list with an empty list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testIntersectionOrderInsensitivity()", "name": "testIntersectionOrderInsensitivity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionOrderInsensitivity()", "original_string": "    @Test\n    public void testIntersectionOrderInsensitivity() {\n        final List<String> one = new ArrayList<>();\n        final List<String> two = new ArrayList<>();\n        one.add(\"a\");\n        one.add(\"b\");\n        two.add(\"a\");\n        two.add(\"a\");\n        two.add(\"b\");\n        two.add(\"b\");\n        assertEquals(ListUtils.intersection(one, two), ListUtils.intersection(two, one));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests intersecting two lists in different orders.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testIntersectListWithNoOverlapAndDifferentTypes()", "name": "testIntersectListWithNoOverlapAndDifferentTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectListWithNoOverlapAndDifferentTypes()", "original_string": "    @Test\n    public void testIntersectListWithNoOverlapAndDifferentTypes() {\n        @SuppressWarnings(\"boxing\")\n        final List<Integer> other = Arrays.asList(1, 23);\n        assertTrue(ListUtils.intersection(fullList, other).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests intersecting a non-empty list with a subset of itself.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testIntersectListWithSelf()", "name": "testIntersectListWithSelf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectListWithSelf()", "original_string": "    @Test\n    public void testIntersectListWithSelf() {\n        assertEquals(fullList, ListUtils.intersection(fullList, fullList));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests intersecting a non-empty list with itself.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testIntersectNonEmptySubset()", "name": "testIntersectNonEmptySubset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectNonEmptySubset()", "original_string": "    @Test\n    public void testIntersectNonEmptySubset() {\n        // create a copy\n        final List<String> other = new ArrayList<>(fullList);\n\n        // remove a few items\n        assertNotNull(other.remove(0));\n        assertNotNull(other.remove(1));\n\n        // make sure the intersection is equal to the copy\n        assertEquals(other, ListUtils.intersection(fullList, other));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests intersecting a non-empty list with a subset of itself.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testIntersectNonEmptyWithEmptyList()", "name": "testIntersectNonEmptyWithEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectNonEmptyWithEmptyList()", "original_string": "    @Test\n    public void testIntersectNonEmptyWithEmptyList() {\n        final List<String> empty = Collections.<String>emptyList();\n        assertTrue(ListUtils.intersection(empty, fullList).isEmpty(), \"result not empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests intersecting a non-empty list with an empty list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testLazyFactoryList()", "name": "testLazyFactoryList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLazyFactoryList()", "original_string": "    @Test\n    public void testLazyFactoryList() {\n        final List<Integer> list = ListUtils.lazyList(new ArrayList<>(), new Factory<Integer>() {\n\n            private int index;\n\n            @Override\n            public Integer create() {\n                index++;\n                return Integer.valueOf(index);\n            }\n        });\n\n        assertNotNull(list.get(5));\n        assertEquals(6, list.size());\n\n        assertNotNull(list.get(5));\n        assertEquals(6, list.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testLazyTransformerList()", "name": "testLazyTransformerList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLazyTransformerList()", "original_string": "    @Test\n    public void testLazyTransformerList() {\n        final List<Integer> offsets = Arrays.asList(3, 5, 1, 5, 3, 6);\n        final List<Integer> list = ListUtils.lazyList(new ArrayList<>(), new Transformer<Integer, Integer>() {\n\n            private int index;\n\n            @Override\n            public Integer transform(final Integer input) {\n                return offsets.get(input) + index++;\n            }\n\n        });\n\n        assertNotNull(list.get(5));\n        assertEquals(6, list.size());\n\n        assertNotNull(list.get(5));\n        assertEquals(6, list.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testLongestCommonSubsequence()", "name": "testLongestCommonSubsequence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testLongestCommonSubsequence()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testLongestCommonSubsequence() {\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.longestCommonSubsequence((List<?>) null, null),\n                        \"failed to check for null argument\"),\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.longestCommonSubsequence(Arrays.asList('A'), null),\n                        \"failed to check for null argument\"),\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.longestCommonSubsequence(null, Arrays.asList('A')),\n                        \"failed to check for null argument\")\n        );\n\n        @SuppressWarnings(\"unchecked\")\n        List<Character> lcs = ListUtils.longestCommonSubsequence(Collections.EMPTY_LIST, Collections.EMPTY_LIST);\n        assertEquals(0, lcs.size());\n\n        final List<Character> list1 = Arrays.asList('B', 'A', 'N', 'A', 'N', 'A');\n        final List<Character> list2 = Arrays.asList('A', 'N', 'A', 'N', 'A', 'S');\n        lcs = ListUtils.longestCommonSubsequence(list1, list2);\n\n        List<Character> expected = Arrays.asList('A', 'N', 'A', 'N', 'A');\n        assertEquals(expected, lcs);\n\n        final List<Character> list3 = Arrays.asList('A', 'T', 'A', 'N', 'A');\n        lcs = ListUtils.longestCommonSubsequence(list1, list3);\n\n        expected = Arrays.asList('A', 'A', 'N', 'A');\n        assertEquals(expected, lcs);\n\n        final List<Character> listZorro = Arrays.asList('Z', 'O', 'R', 'R', 'O');\n        lcs = ListUtils.longestCommonSubsequence(list1, listZorro);\n\n        assertTrue(lcs.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testLongestCommonSubsequenceWithString()", "name": "testLongestCommonSubsequenceWithString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLongestCommonSubsequenceWithString()", "original_string": "    @Test\n    public void testLongestCommonSubsequenceWithString() {\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.longestCommonSubsequence((String) null, null),\n                        \"failed to check for null argument\"),\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.longestCommonSubsequence(\"A\", null),\n                        \"failed to check for null argument\"),\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.longestCommonSubsequence(null, \"A\"),\n                        \"failed to check for null argument\")\n        );\n\n        String lcs = ListUtils.longestCommonSubsequence(StringUtils.EMPTY, StringUtils.EMPTY);\n        assertEquals(0, lcs.length());\n\n        final String banana = \"BANANA\";\n        final String ananas = \"ANANAS\";\n        lcs = ListUtils.longestCommonSubsequence(banana, ananas);\n\n        assertEquals(\"ANANA\", lcs);\n\n        final String atana = \"ATANA\";\n        lcs = ListUtils.longestCommonSubsequence(banana, atana);\n\n        assertEquals(\"AANA\", lcs);\n\n        final String zorro = \"ZORRO\";\n        lcs = ListUtils.longestCommonSubsequence(banana, zorro);\n\n        assertEquals(0, lcs.length());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testPartition()", "name": "testPartition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testPartition()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testPartition() {\n        final List<Integer> strings = new ArrayList<>();\n        for (int i = 0; i <= 6; i++) {\n            strings.add(i);\n        }\n\n        final List<List<Integer>> partition = ListUtils.partition(strings, 3);\n\n        assertNotNull(partition);\n        assertEquals(3, partition.size());\n        assertEquals(1, partition.get(2).size());\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> partition.get(-1),\n                        \"Index -1 must not be negative\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> partition.get(3),\n                        \"Index \" + 3 + \" must be less than size \" + partition.size())\n        );\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.partition(null, 3),\n                        \"failed to check for null argument\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> ListUtils.partition(strings, 0),\n                        \"failed to check for size argument\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> ListUtils.partition(strings, -10),\n                        \"failed to check for size argument\")\n        );\n\n        final List<List<Integer>> partitionMax = ListUtils.partition(strings, Integer.MAX_VALUE);\n        assertEquals(1, partitionMax.size());\n        assertEquals(strings.size(), partitionMax.get(0).size());\n        assertEquals(strings, partitionMax.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testPredicatedList()", "name": "testPredicatedList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicatedList()", "original_string": "    @Test\n    public void testPredicatedList() {\n        final Predicate<Object> predicate = String.class::isInstance;\n        final List<Object> list = ListUtils.predicatedList(new ArrayList<>(), predicate);\n        assertInstanceOf(PredicatedList.class, list, \"returned object should be a PredicatedList\");\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.predicatedList(new ArrayList<>(), null),\n                        \"Expecting IllegalArgumentException for null predicate.\"),\n                () -> assertThrows(NullPointerException.class, () -> ListUtils.predicatedList(null, predicate),\n                        \"Expecting IllegalArgumentException for null list.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testRemoveAll()", "name": "testRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAll()", "original_string": "    @Test\n    public void testRemoveAll() {\n        final List<String> sub = new ArrayList<>();\n        sub.add(a);\n        sub.add(b);\n        sub.add(x);\n\n        final List<String> remainder = ListUtils.removeAll(fullList, sub);\n        assertEquals(3, remainder.size());\n        fullList.removeAll(sub);\n        assertEquals(remainder, fullList);\n\n        assertThrows(NullPointerException.class, () -> ListUtils.removeAll(null, null),\n                \"expecting NullPointerException\");\n\n        assertThrows(NullPointerException.class, () -> ListUtils.removeAll(null, new ArrayList<>()),\n                \"expecting NullPointerException\");\n\n        assertThrows(NullPointerException.class, () -> ListUtils.removeAll(new ArrayList<>(), null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testRetainAll()", "name": "testRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAll()", "original_string": "    @Test\n    public void testRetainAll() {\n        final List<String> sub = new ArrayList<>();\n        sub.add(a);\n        sub.add(b);\n        sub.add(x);\n\n        final List<String> retained = ListUtils.retainAll(fullList, sub);\n        assertEquals(2, retained.size());\n        sub.remove(x);\n        assertEquals(retained, sub);\n        fullList.retainAll(sub);\n        assertEquals(retained, fullList);\n\n        assertThrows(NullPointerException.class, () -> ListUtils.retainAll(null, null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testSelect()", "name": "testSelect", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testSelect()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testSelect() {\n        final List<Integer> list = new ArrayList<>();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        // Ensure that the collection is the input type or a super type\n        final List<Integer> output1 = ListUtils.select(list, EQUALS_TWO);\n        final List<Number> output2 = ListUtils.<Number>select(list, EQUALS_TWO);\n        final HashSet<Number> output3 = CollectionUtils.select(list, EQUALS_TWO, new HashSet<>());\n        assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n        assertEquals(4, list.size());\n        assertEquals(1, output1.size());\n        assertEquals(2, output2.iterator().next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testSelectRejected()", "name": "testSelectRejected", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testSelectRejected()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testSelectRejected() {\n        final List<Long> list = new ArrayList<>();\n        list.add(1L);\n        list.add(2L);\n        list.add(3L);\n        list.add(4L);\n        final List<Long> output1 = ListUtils.selectRejected(list, EQUALS_TWO);\n        final List<? extends Number> output2 = ListUtils.selectRejected(list, EQUALS_TWO);\n        final HashSet<Number> output3 = CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet<>());\n        assertTrue(CollectionUtils.isEqualCollection(output1, output2));\n        assertTrue(CollectionUtils.isEqualCollection(output1, output3));\n        assertEquals(4, list.size());\n        assertEquals(3, output1.size());\n        assertTrue(output1.contains(1L));\n        assertTrue(output1.contains(3L));\n        assertTrue(output1.contains(4L));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testSubtract()", "name": "testSubtract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubtract()", "original_string": "    @Test\n    public void testSubtract() {\n        final List<String> list = new ArrayList<>();\n        list.add(a);\n        list.add(b);\n        list.add(a);\n        list.add(x);\n\n        final List<String> sub = new ArrayList<>();\n        sub.add(a);\n\n        final List<String> result = ListUtils.subtract(list, sub);\n        assertEquals(3, result.size());\n\n        final List<String> expected = new ArrayList<>();\n        expected.add(b);\n        expected.add(a);\n        expected.add(x);\n\n        assertEquals(expected, result);\n\n        assertThrows(NullPointerException.class, () -> ListUtils.subtract(list, null),\n                \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testSubtractNullElement()", "name": "testSubtractNullElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubtractNullElement()", "original_string": "    @Test\n    public void testSubtractNullElement() {\n        final List<String> list = new ArrayList<>();\n        list.add(a);\n        list.add(null);\n        list.add(null);\n        list.add(x);\n\n        final List<String> sub = new ArrayList<>();\n        sub.add(null);\n\n        final List<String> result = ListUtils.subtract(list, sub);\n        assertEquals(3, result.size());\n\n        final List<String> expected = new ArrayList<>();\n        expected.add(a);\n        expected.add(null);\n        expected.add(x);\n\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testSum()", "name": "testSum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSum()", "original_string": "    @Test\n    public void testSum() {\n        final List<String> list1 = new ArrayList<>();\n        list1.add(a);\n        final List<String> list2 = new ArrayList<>();\n        list2.add(b);\n        final List<String> expected1 = new ArrayList<>();\n        expected1.add(a);\n        expected1.add(b);\n        final List<String> result1 = ListUtils.sum(list1, list2);\n        assertEquals(2, result1.size());\n        assertEquals(expected1, result1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest.[void]testUnion()", "name": "testUnion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnion()", "original_string": "    @Test\n    public void testUnion() {\n        final List<String> list1 = new ArrayList<>();\n        list1.add(a);\n        final List<String> list2 = new ArrayList<>();\n        list2.add(b);\n        final List<String> result1 = ListUtils.union(list1, list2);\n        final List<String> expected1 = new ArrayList<>();\n        expected1.add(a);\n        expected1.add(b);\n        assertEquals(2, result1.size());\n        assertEquals(expected1, result1);\n\n        final List<String> list3 = new ArrayList<>();\n        list3.add(a);\n        final List<String> result2 = ListUtils.union(list1, list3);\n        final List<String> expected2 = new ArrayList<>();\n        expected2.add(a);\n        expected2.add(a);\n        assertEquals(2, result1.size());\n        assertEquals(expected2, result2);\n\n        list1.add(null);\n        final List<String> result3 = ListUtils.union(list1, list2);\n        final List<String> expected3 = new ArrayList<>();\n        expected3.add(a);\n        expected3.add(null);\n        expected3.add(b);\n        assertEquals(3, result3.size());\n        assertEquals(expected3, result3);\n\n        list2.add(null);\n        final List<String> result4 = ListUtils.union(list1, list2);\n        final List<String> expected4 = new ArrayList<>();\n        expected4.add(a);\n        expected4.add(null);\n        expected4.add(b);\n        expected4.add(null);\n        assertEquals(4, result4.size());\n        assertEquals(expected4, result4);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java", "class_name": "ListUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/ListUtilsTest.java.ListUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest.[void]testFind_ElementFound()", "name": "testFind_ElementFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFind_ElementFound()", "original_string": "    @Test\n    public void testFind_ElementFound() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4).iterator();\n        Predicate<Integer> predicate = e -> e == 3;\n\n        Integer result = IteratorUtils.find(iterator, predicate::test);\n\n        assertEquals(3, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "class_name": "IteratorUtils_findTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest.[void]testFind_ElementNotFound()", "name": "testFind_ElementNotFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFind_ElementNotFound()", "original_string": "    @Test\n    public void testFind_ElementNotFound() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4).iterator();\n        Predicate<Integer> predicate = e -> e == 5;\n\n        Integer result = IteratorUtils.find(iterator, predicate::test);\n\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "class_name": "IteratorUtils_findTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest.[void]testFind_NullIterator()", "name": "testFind_NullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFind_NullIterator()", "original_string": "    @Test\n    public void testFind_NullIterator() {\n        Predicate<Integer> predicate = e -> e == 3;\n\n        Integer result = IteratorUtils.find(null, predicate::test);\n\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "class_name": "IteratorUtils_findTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest.[void]testFind_NullPredicate()", "name": "testFind_NullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFind_NullPredicate()", "original_string": "    @Test\n    public void testFind_NullPredicate() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3, 4).iterator();\n\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.find(iterator, null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "class_name": "IteratorUtils_findTest", "class_uri": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java.IteratorUtils_findTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest.[void]testChainedComparatorWithValidComparators()", "name": "testChainedComparatorWithValidComparators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChainedComparatorWithValidComparators()", "original_string": "    @Test\n    public void testChainedComparatorWithValidComparators() {\n        Comparator<Integer> comparator1 = Comparator.naturalOrder();\n        Comparator<Integer> comparator2 = Comparator.reverseOrder();\n\n        Comparator<Integer> chainedComparator = ComparatorUtils.chainedComparator(comparator1, comparator2);\n\n        assertTrue(chainedComparator instanceof ComparatorChain);\n        assertEquals(-1, chainedComparator.compare(1, 2));\n        assertEquals(1, chainedComparator.compare(2, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "class_name": "ComparatorUtils_chainedComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest.[void]testChainedComparatorWithNullComparator()", "name": "testChainedComparatorWithNullComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChainedComparatorWithNullComparator()", "original_string": "    @Test\n    public void testChainedComparatorWithNullComparator() {\n        Comparator<Integer> comparator1 = Comparator.naturalOrder();\n        Comparator<Integer> nullComparator = null;\n\n        assertThrows(NullPointerException.class, () -> {\n            ComparatorUtils.chainedComparator(comparator1, nullComparator);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "class_name": "ComparatorUtils_chainedComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest.[void]testChainedComparatorWithEmptyComparators()", "name": "testChainedComparatorWithEmptyComparators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChainedComparatorWithEmptyComparators()", "original_string": "    @Test\n    public void testChainedComparatorWithEmptyComparators() {\n        Comparator<Integer>[] emptyComparators = new Comparator[0];\n\n        Comparator<Integer> chainedComparator = ComparatorUtils.chainedComparator(emptyComparators);\n\n        assertTrue(chainedComparator instanceof ComparatorChain);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "class_name": "ComparatorUtils_chainedComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest.[void]testChainedComparatorWithSingleComparator()", "name": "testChainedComparatorWithSingleComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChainedComparatorWithSingleComparator()", "original_string": "    @Test\n    public void testChainedComparatorWithSingleComparator() {\n        Comparator<Integer> comparator1 = Comparator.naturalOrder();\n\n        Comparator<Integer> chainedComparator = ComparatorUtils.chainedComparator(comparator1);\n\n        assertTrue(chainedComparator instanceof ComparatorChain);\n        assertEquals(-1, chainedComparator.compare(1, 2));\n        assertEquals(1, chainedComparator.compare(2, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "class_name": "ComparatorUtils_chainedComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java.ComparatorUtils_chainedComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchTopItem()", "name": "testSearchTopItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchTopItem()", "original_string": "    @Test\n    public void testSearchTopItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(1, stack.search(\"Second Item\"), \"Top item is 'Second Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchMiddleItem()", "name": "testSearchMiddleItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchMiddleItem()", "original_string": "    @Test\n    public void testSearchMiddleItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        assertEquals(2, stack.search(\"Second Item\"), \"Middle item is 'Second Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchBottomItem()", "name": "testSearchBottomItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchBottomItem()", "original_string": "    @Test\n    public void testSearchBottomItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        assertEquals(3, stack.search(\"First Item\"), \"Bottom item is 'First Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchMissingItem()", "name": "testSearchMissingItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchMissingItem()", "original_string": "    @Test\n    public void testSearchMissingItem() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(-1, stack.search(\"Missing Item\"), \"Cannot find 'Missing Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchEmptyStack()", "name": "testSearchEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchEmptyStack()", "original_string": "    @Test\n    public void testSearchEmptyStack() {\n        assertEquals(-1, stack.search(\"Any Item\"), \"Stack is empty, cannot find any item\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchNullItem()", "name": "testSearchNullItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchNullItem()", "original_string": "    @Test\n    public void testSearchNullItem() {\n        stack.push(\"First Item\");\n        stack.push(null);\n        assertEquals(1, stack.search(null), \"Top item is null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchNullInEmptyStack()", "name": "testSearchNullInEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchNullInEmptyStack()", "original_string": "    @Test\n    public void testSearchNullInEmptyStack() {\n        assertEquals(-1, stack.search(null), \"Stack is empty, cannot find null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchAfterPop()", "name": "testSearchAfterPop", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchAfterPop()", "original_string": "    @Test\n    public void testSearchAfterPop() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.pop();\n        assertEquals(1, stack.search(\"First Item\"), \"Top item is 'First Item' after pop\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchAfterMultiplePops()", "name": "testSearchAfterMultiplePops", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchAfterMultiplePops()", "original_string": "    @Test\n    public void testSearchAfterMultiplePops() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        stack.pop();\n        stack.pop();\n        assertEquals(1, stack.search(\"First Item\"), \"Top item is 'First Item' after multiple pops\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest.[void]testSearchAfterPushAndPop()", "name": "testSearchAfterPushAndPop", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSearchAfterPushAndPop()", "original_string": "    @Test\n    public void testSearchAfterPushAndPop() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.pop();\n        stack.push(\"Third Item\");\n        assertEquals(2, stack.search(\"First Item\"), \"Middle item is 'First Item' after push and pop\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "class_name": "ArrayStack_searchTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java.ArrayStack_searchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/TrieUtilsTest.java.TrieUtilsTest.[void]testUnmodifiableTrie()", "name": "testUnmodifiableTrie", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableTrie()", "original_string": "    @Test\n    public void testUnmodifiableTrie() {\n        final Trie<String, Object> trie = TrieUtils.unmodifiableTrie(new PatriciaTrie<>());\n        assertInstanceOf(UnmodifiableTrie.class, trie, \"Returned object should be an UnmodifiableTrie.\");\n\n        assertThrows(NullPointerException.class, () -> TrieUtils.unmodifiableTrie(null));\n\n        assertSame(trie, TrieUtils.unmodifiableTrie(trie), \"UnmodifiableTrie shall not be decorated\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/TrieUtilsTest.java", "class_name": "TrieUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/TrieUtilsTest.java.TrieUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java.ComparatorUtils_minTest.[void]testMinWithDefaultComparator()", "name": "testMinWithDefaultComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinWithDefaultComparator()", "original_string": "    @Test\n    public void testMinWithDefaultComparator() {\n        Integer o1 = 5;\n        Integer o2 = 10;\n        Integer result = ComparatorUtils.min(o1, o2, null);\n        assertEquals(o1, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "class_name": "ComparatorUtils_minTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java.ComparatorUtils_minTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java.ComparatorUtils_minTest.[void]testMinWithCustomComparator()", "name": "testMinWithCustomComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinWithCustomComparator()", "original_string": "    @Test\n    public void testMinWithCustomComparator() {\n        Integer o1 = 5;\n        Integer o2 = 10;\n        Comparator<Integer> customComparator = Comparator.reverseOrder();\n        Integer result = ComparatorUtils.min(o1, o2, customComparator);\n        assertEquals(o2, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "class_name": "ComparatorUtils_minTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java.ComparatorUtils_minTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java.ComparatorUtils_minTest.[void]testMinWithEqualObjects()", "name": "testMinWithEqualObjects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinWithEqualObjects()", "original_string": "    @Test\n    public void testMinWithEqualObjects() {\n        Integer o1 = 5;\n        Integer o2 = 5;\n        Integer result = ComparatorUtils.min(o1, o2, null);\n        assertEquals(o2, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "class_name": "ComparatorUtils_minTest", "class_uri": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java.ComparatorUtils_minTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testContainsWithEquator()", "name": "testContainsWithEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsWithEquator()", "original_string": "    @Test\n    public void testContainsWithEquator() {\n        final List<String> base = new ArrayList<>();\n        base.add(\"AC\");\n        base.add(\"BB\");\n        base.add(\"CA\");\n\n        final Equator<String> secondLetterEquator = new Equator<String>() {\n\n            @Override\n            public boolean equate(final String o1, final String o2) {\n                return o1.charAt(1) == o2.charAt(1);\n            }\n\n            @Override\n            public int hash(final String o) {\n                return o.charAt(1);\n            }\n\n        };\n\n        assertFalse(base.contains(\"CC\"));\n        assertTrue(IterableUtils.contains(base, \"AC\", secondLetterEquator));\n        assertTrue(IterableUtils.contains(base, \"CC\", secondLetterEquator));\n        assertFalse(IterableUtils.contains(base, \"CX\", secondLetterEquator));\n        assertFalse(IterableUtils.contains(null, null, secondLetterEquator));\n\n        assertThrows(NullPointerException.class, () -> IterableUtils.contains(base, \"AC\", null), \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testCountMatches()", "name": "testCountMatches", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCountMatches()", "original_string": "    @Test\n    public void testCountMatches() {\n        assertEquals(4, IterableUtils.countMatches(iterableB, EQUALS_TWO));\n        assertEquals(0, IterableUtils.countMatches(null, EQUALS_TWO));\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> assertEquals(0, IterableUtils.countMatches(iterableA, null)),\n                        \"predicate must not be null\"),\n                () -> assertThrows(NullPointerException.class, () -> assertEquals(0, IterableUtils.countMatches(null, null)), \"predicate must not be null\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListAllSameInList()", "name": "testDuplicateListAllSameInList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListAllSameInList()", "original_string": "    @Test\n    public void testDuplicateListAllSameInList() {\n        final List<Integer> input = Arrays.asList(5, 5, 5, 5);\n        assertEquals(Arrays.asList(5), IterableUtils.duplicateList(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListEmptyDeque()", "name": "testDuplicateListEmptyDeque", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListEmptyDeque()", "original_string": "    @Test\n    public void testDuplicateListEmptyDeque() {\n        assertTrue(IterableUtils.duplicateList(new ArrayDeque<>()).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListEmptyList()", "name": "testDuplicateListEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListEmptyList()", "original_string": "    @Test\n    public void testDuplicateListEmptyList() {\n        final List<Integer> input = Arrays.asList();\n        assertTrue(IterableUtils.duplicateList(input).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListEmptySet()", "name": "testDuplicateListEmptySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListEmptySet()", "original_string": "    @Test\n    public void testDuplicateListEmptySet() {\n        assertTrue(IterableUtils.duplicateList(new HashSet<>()).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListMultipleDuplicatesInDeque()", "name": "testDuplicateListMultipleDuplicatesInDeque", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListMultipleDuplicatesInDeque()", "original_string": "    @Test\n    public void testDuplicateListMultipleDuplicatesInDeque() {\n        final Deque<Integer> input = new ArrayDeque<>(Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4));\n        final List<Integer> expected = Arrays.asList(1, 2, 3, 4);\n        assertEquals(expected, IterableUtils.duplicateList(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListMultipleDuplicatesInDequeReverse()", "name": "testDuplicateListMultipleDuplicatesInDequeReverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListMultipleDuplicatesInDequeReverse()", "original_string": "    @Test\n    public void testDuplicateListMultipleDuplicatesInDequeReverse() {\n        // We want to make sure that the actual list is in the expected order\n        final Deque<Integer> input = new ArrayDeque<>(Arrays.asList(4, 4, 3, 3, 2, 2, 1, 1));\n        final List<Integer> expected = Arrays.asList(4, 3, 2, 1);\n        assertEquals(expected, IterableUtils.duplicateList(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListMultipleDuplicatesInList()", "name": "testDuplicateListMultipleDuplicatesInList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListMultipleDuplicatesInList()", "original_string": "    @Test\n    public void testDuplicateListMultipleDuplicatesInList() {\n        final List<Integer> input = Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4);\n        final List<Integer> expected = Arrays.asList(1, 2, 3, 4);\n        assertEquals(expected, IterableUtils.duplicateList(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListMultipleDuplicatesInListReverse()", "name": "testDuplicateListMultipleDuplicatesInListReverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListMultipleDuplicatesInListReverse()", "original_string": "    @Test\n    public void testDuplicateListMultipleDuplicatesInListReverse() {\n        // We want to make sure that the actual list is in the expected order\n        final List<Integer> input = Arrays.asList(4, 4, 3, 3, 2, 2, 1, 1);\n        final List<Integer> expected = Arrays.asList(4, 3, 2, 1);\n        assertEquals(expected, IterableUtils.duplicateList(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListNoDuplicates()", "name": "testDuplicateListNoDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListNoDuplicates()", "original_string": "    @Test\n    public void testDuplicateListNoDuplicates() {\n        final List<Integer> input = Arrays.asList(1, 2, 3, 4, 5);\n        assertTrue(IterableUtils.duplicateList(input).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListSingleElement()", "name": "testDuplicateListSingleElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListSingleElement()", "original_string": "    @Test\n    public void testDuplicateListSingleElement() {\n        final List<Integer> input = Arrays.asList(1);\n        assertTrue(IterableUtils.duplicateList(input).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateListWithDuplicates()", "name": "testDuplicateListWithDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateListWithDuplicates()", "original_string": "    @Test\n    public void testDuplicateListWithDuplicates() {\n        final List<Integer> input = Arrays.asList(1, 2, 3, 2, 4, 5, 3);\n        final List<Integer> expected = Arrays.asList(2, 3);\n        assertEquals(expected, IterableUtils.duplicateList(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSequencedSetMultipleDuplicates()", "name": "testDuplicateSequencedSetMultipleDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSequencedSetMultipleDuplicates()", "original_string": "    @Test\n    public void testDuplicateSequencedSetMultipleDuplicates() {\n        final List<Integer> input = Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4);\n        final List<Integer> list = Arrays.asList(1, 2, 3, 4);\n        assertEquals(list, new ArrayList<>(IterableUtils.duplicateSequencedSet(input)));\n        assertEquals(new LinkedHashSet<>(list), IterableUtils.duplicateSequencedSet(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetEmptyDeque()", "name": "testDuplicateSetEmptyDeque", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetEmptyDeque()", "original_string": "    @Test\n    public void testDuplicateSetEmptyDeque() {\n        assertTrue(IterableUtils.duplicateSet(new ArrayDeque<>()).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetEmptyList()", "name": "testDuplicateSetEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetEmptyList()", "original_string": "    @Test\n    public void testDuplicateSetEmptyList() {\n        final List<Integer> input = Arrays.asList();\n        assertTrue(IterableUtils.duplicateSet(input).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetEmptySet()", "name": "testDuplicateSetEmptySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetEmptySet()", "original_string": "    @Test\n    public void testDuplicateSetEmptySet() {\n        assertTrue(IterableUtils.duplicateSet(new HashSet<>()).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetInSet()", "name": "testDuplicateSetInSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetInSet()", "original_string": "    @Test\n    public void testDuplicateSetInSet() {\n        // Sets don't have duplicates, so the result is always an empty set.\n        final Set<Integer> input = new HashSet<>(Arrays.asList(5));\n        assertTrue(IterableUtils.duplicateSet(input).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetMultipleDuplicatesInDeque()", "name": "testDuplicateSetMultipleDuplicatesInDeque", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetMultipleDuplicatesInDeque()", "original_string": "    @Test\n    public void testDuplicateSetMultipleDuplicatesInDeque() {\n        final Deque<Integer> input = new ArrayDeque<>(Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4));\n        final Set<Integer> expected = new HashSet<>(Arrays.asList(1, 2, 3, 4));\n        assertEquals(expected, IterableUtils.duplicateSet(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetMultipleDuplicatesInList()", "name": "testDuplicateSetMultipleDuplicatesInList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetMultipleDuplicatesInList()", "original_string": "    @Test\n    public void testDuplicateSetMultipleDuplicatesInList() {\n        final List<Integer> input = Arrays.asList(1, 1, 2, 2, 3, 3, 4, 4);\n        final Set<Integer> expected = new HashSet<>(Arrays.asList(1, 2, 3, 4));\n        assertEquals(expected, IterableUtils.duplicateSet(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetNoDuplicates()", "name": "testDuplicateSetNoDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetNoDuplicates()", "original_string": "    @Test\n    public void testDuplicateSetNoDuplicates() {\n        final List<Integer> input = Arrays.asList(1, 2, 3, 4, 5);\n        assertTrue(IterableUtils.duplicateSet(input).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetSingleElement()", "name": "testDuplicateSetSingleElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetSingleElement()", "original_string": "    @Test\n    public void testDuplicateSetSingleElement() {\n        final List<Integer> input = Arrays.asList(1);\n        assertTrue(IterableUtils.duplicateSet(input).isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicateSetWithDuplicates()", "name": "testDuplicateSetWithDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicateSetWithDuplicates()", "original_string": "    @Test\n    public void testDuplicateSetWithDuplicates() {\n        final List<Integer> input = Arrays.asList(1, 2, 3, 2, 4, 5, 3);\n        final Set<Integer> expected = new HashSet<>(Arrays.asList(2, 3));\n        assertEquals(expected, IterableUtils.duplicateSet(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicatListAllSameInDeque()", "name": "testDuplicatListAllSameInDeque", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicatListAllSameInDeque()", "original_string": "    @Test\n    public void testDuplicatListAllSameInDeque() {\n        final Deque<Integer> input = new ArrayDeque<>(Arrays.asList(5, 5, 5, 5));\n        assertEquals(Arrays.asList(5), IterableUtils.duplicateList(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testDuplicatSetAllSameInDeque()", "name": "testDuplicatSetAllSameInDeque", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDuplicatSetAllSameInDeque()", "original_string": "    @Test\n    public void testDuplicatSetAllSameInDeque() {\n        final Deque<Integer> input = new ArrayDeque<>(Arrays.asList(5, 5, 5, 5));\n        assertEquals(new HashSet<>(Arrays.asList(5)), IterableUtils.duplicateSet(input));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testFind()", "name": "testFind", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFind()", "original_string": "    @Test\n    public void testFind() {\n        Predicate<Number> testPredicate = equalPredicate(4);\n        Integer test = IterableUtils.find(iterableA, testPredicate);\n        assertEquals(4, (int) test);\n        testPredicate = equalPredicate(45);\n        test = IterableUtils.find(iterableA, testPredicate);\n        assertNull(test);\n        assertNull(IterableUtils.find(null, testPredicate));\n\n        assertThrows(NullPointerException.class, () -> IterableUtils.find(iterableA, null), \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testFirstFromIterableIndexOutOfBoundsException()", "name": "testFirstFromIterableIndexOutOfBoundsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFirstFromIterableIndexOutOfBoundsException()", "original_string": "    @Test\n    public void testFirstFromIterableIndexOutOfBoundsException() throws Exception {\n        // Collection, entry exists\n        final Bag<String> bag = new HashBag<>();\n        // Collection, non-existent entry\n        assertThrows(IndexOutOfBoundsException.class, () -> IterableUtils.first(bag));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testForEach()", "name": "testForEach", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach()", "original_string": "    @Test\n    public void testForEach() {\n        final List<Integer> listA = new ArrayList<>();\n        listA.add(1);\n\n        final List<Integer> listB = new ArrayList<>();\n        listB.add(2);\n\n        final Closure<List<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<List<Integer>> col = new ArrayList<>();\n        col.add(listA);\n        col.add(listB);\n        IterableUtils.forEach(col, testClosure);\n        assertTrue(listA.isEmpty() && listB.isEmpty());\n\n        assertThrows(NullPointerException.class, () -> IterableUtils.forEach(col, null), \"expecting NullPointerException\");\n\n        IterableUtils.forEach(null, testClosure);\n\n        // null should be OK\n        col.add(null);\n        IterableUtils.forEach(col, testClosure);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testForEachButLast()", "name": "testForEachButLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachButLast()", "original_string": "    @Test\n    public void testForEachButLast() {\n        final List<Integer> listA = new ArrayList<>();\n        listA.add(1);\n\n        final List<Integer> listB = new ArrayList<>();\n        listB.add(2);\n\n        final Closure<List<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<List<Integer>> col = new ArrayList<>();\n        col.add(listA);\n        col.add(listB);\n        List<Integer> last = IterableUtils.forEachButLast(col, testClosure);\n        assertTrue(listA.isEmpty() && !listB.isEmpty());\n        assertSame(listB, last);\n\n        assertThrows(NullPointerException.class, () -> IterableUtils.forEachButLast(col, null), \"expecting NullPointerException\");\n\n        IterableUtils.forEachButLast(null, testClosure);\n\n        // null should be OK\n        col.add(null);\n        col.add(null);\n        last = IterableUtils.forEachButLast(col, testClosure);\n        assertNull(last);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testForEachFailure()", "name": "testForEachFailure", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachFailure()", "original_string": "    @Test\n    public void testForEachFailure() {\n        final Closure<String> testClosure = ClosureUtils.invokerClosure(\"clear\");\n        final Collection<String> col = new ArrayList<>();\n        col.add(\"x\");\n        assertThrows(FunctorException.class, () -> IterableUtils.forEach(col, testClosure));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testFrequency()", "name": "testFrequency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFrequency()", "original_string": "    @Test\n    public void testFrequency() {\n        // null iterable test\n        assertEquals(0, IterableUtils.frequency(null, 1));\n\n        assertEquals(1, IterableUtils.frequency(iterableA, 1));\n        assertEquals(2, IterableUtils.frequency(iterableA, 2));\n        assertEquals(3, IterableUtils.frequency(iterableA, 3));\n        assertEquals(4, IterableUtils.frequency(iterableA, 4));\n        assertEquals(0, IterableUtils.frequency(iterableA, 5));\n\n        assertEquals(0, IterableUtils.frequency(iterableB, 1L));\n        assertEquals(4, IterableUtils.frequency(iterableB, 2L));\n        assertEquals(3, IterableUtils.frequency(iterableB, 3L));\n        assertEquals(2, IterableUtils.frequency(iterableB, 4L));\n        assertEquals(1, IterableUtils.frequency(iterableB, 5L));\n\n        // Ensure that generic bounds accept valid parameters, but return\n        // expected results\n        // e.g. no longs in the \"int\" Iterable<Number>, and vice versa.\n        final Iterable<Number> iterableIntAsNumber = Arrays.<Number>asList(1, 2, 3, 4, 5);\n        final Iterable<Number> iterableLongAsNumber = Arrays.<Number>asList(1L, 2L, 3L, 4L, 5L);\n        assertEquals(0, IterableUtils.frequency(iterableIntAsNumber, 2L));\n        assertEquals(0, IterableUtils.frequency(iterableLongAsNumber, 2));\n\n        final Set<String> set = new HashSet<>();\n        set.add(\"A\");\n        set.add(\"C\");\n        set.add(\"E\");\n        set.add(\"E\");\n        assertEquals(1, IterableUtils.frequency(set, \"A\"));\n        assertEquals(0, IterableUtils.frequency(set, \"B\"));\n        assertEquals(1, IterableUtils.frequency(set, \"C\"));\n        assertEquals(0, IterableUtils.frequency(set, \"D\"));\n        assertEquals(1, IterableUtils.frequency(set, \"E\"));\n\n        final Bag<String> bag = new HashBag<>();\n        bag.add(\"A\", 3);\n        bag.add(\"C\");\n        bag.add(\"E\");\n        bag.add(\"E\");\n        assertEquals(3, IterableUtils.frequency(bag, \"A\"));\n        assertEquals(0, IterableUtils.frequency(bag, \"B\"));\n        assertEquals(1, IterableUtils.frequency(bag, \"C\"));\n        assertEquals(0, IterableUtils.frequency(bag, \"D\"));\n        assertEquals(2, IterableUtils.frequency(bag, \"E\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testFrequencyOfNull()", "name": "testFrequencyOfNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFrequencyOfNull()", "original_string": "    @Test\n    public void testFrequencyOfNull() {\n        final List<String> list = new ArrayList<>();\n        assertEquals(0, IterableUtils.frequency(list, null));\n        list.add(\"A\");\n        assertEquals(0, IterableUtils.frequency(list, null));\n        list.add(null);\n        assertEquals(1, IterableUtils.frequency(list, null));\n        list.add(\"B\");\n        assertEquals(1, IterableUtils.frequency(list, null));\n        list.add(null);\n        assertEquals(2, IterableUtils.frequency(list, null));\n        list.add(\"B\");\n        assertEquals(2, IterableUtils.frequency(list, null));\n        list.add(null);\n        assertEquals(3, IterableUtils.frequency(list, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testGetFromIterableIndexOutOfBoundsException()", "name": "testGetFromIterableIndexOutOfBoundsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFromIterableIndexOutOfBoundsException()", "original_string": "    @Test\n    public void testGetFromIterableIndexOutOfBoundsException() throws Exception {\n        // Collection, entry exists\n        final Bag<String> bag = new HashBag<>();\n        bag.add(\"element\", 1);\n        // Collection, non-existent entry\n        assertThrows(IndexOutOfBoundsException.class, () -> IterableUtils.get(bag, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf()", "original_string": "    @Test\n    public void testIndexOf() {\n        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n        int index = IterableUtils.indexOf(iterableA, testPredicate);\n        assertEquals(6, index);\n        testPredicate = equalPredicate((Number) 45);\n        index = IterableUtils.indexOf(iterableA, testPredicate);\n        assertEquals(-1, index);\n        assertEquals(-1, IterableUtils.indexOf(null, testPredicate));\n\n        assertThrows(NullPointerException.class, () -> IterableUtils.indexOf(iterableA, null), \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testMatchesAll()", "name": "testMatchesAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchesAll()", "original_string": "    @Test\n    public void testMatchesAll() {\n        assertThrows(NullPointerException.class, () -> assertFalse(IterableUtils.matchesAll(null, null)), \"predicate must not be null\");\n\n        assertThrows(NullPointerException.class, () -> assertFalse(IterableUtils.matchesAll(iterableA, null)), \"predicate must not be null\");\n\n        final Predicate<Integer> lessThanFive = object -> object < 5;\n        assertTrue(IterableUtils.matchesAll(iterableA, lessThanFive));\n\n        final Predicate<Integer> lessThanFour = object -> object < 4;\n        assertFalse(IterableUtils.matchesAll(iterableA, lessThanFour));\n\n        assertTrue(IterableUtils.matchesAll(null, lessThanFour));\n        assertTrue(IterableUtils.matchesAll(emptyIterable, lessThanFour));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testMatchesAny()", "name": "testMatchesAny", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchesAny()", "original_string": "    @Test\n    public void testMatchesAny() {\n        final List<Integer> list = new ArrayList<>();\n\n        assertThrows(NullPointerException.class, () -> assertFalse(IterableUtils.matchesAny(null, null)), \"predicate must not be null\");\n\n        assertThrows(NullPointerException.class, () -> assertFalse(IterableUtils.matchesAny(list, null)), \"predicate must not be null\");\n\n        assertFalse(IterableUtils.matchesAny(null, EQUALS_TWO));\n        assertFalse(IterableUtils.matchesAny(list, EQUALS_TWO));\n        list.add(1);\n        list.add(3);\n        list.add(4);\n        assertFalse(IterableUtils.matchesAny(list, EQUALS_TWO));\n\n        list.add(2);\n        assertTrue(IterableUtils.matchesAny(list, EQUALS_TWO));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testPartition()", "name": "testPartition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testPartition()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testPartition() {\n        final List<Integer> input = new ArrayList<>();\n        input.add(1);\n        input.add(2);\n        input.add(3);\n        input.add(4);\n        List<List<Integer>> partitions = IterableUtils.partition(input, EQUALS_TWO);\n        assertEquals(2, partitions.size());\n\n        // first partition contains 2\n        Collection<Integer> partition = partitions.get(0);\n        assertEquals(1, partition.size());\n        assertEquals(2, CollectionUtils.extractSingleton(partition).intValue());\n\n        // second partition contains 1, 3, and 4\n        final Integer[] expected = { 1, 3, 4 };\n        partition = partitions.get(1);\n        assertArrayEquals(expected, partition.toArray());\n\n        partitions = IterableUtils.partition((List<Integer>) null, EQUALS_TWO);\n        assertEquals(2, partitions.size());\n        assertTrue(partitions.get(0).isEmpty());\n        assertTrue(partitions.get(1).isEmpty());\n\n        partitions = IterableUtils.partition(input);\n        assertEquals(1, partitions.size());\n        assertEquals(input, partitions.get(0));\n\n        assertThrows(NullPointerException.class, () -> IterableUtils.partition(input, (Predicate<Integer>) null), \"expecting NullPointerException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testPartitionMultiplePredicates()", "name": "testPartitionMultiplePredicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testPartitionMultiplePredicates()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testPartitionMultiplePredicates() {\n        final List<Integer> input = new ArrayList<>();\n        input.add(1);\n        input.add(2);\n        input.add(3);\n        input.add(4);\n        final List<List<Integer>> partitions = IterableUtils.partition(input, EQUALS_TWO, EVEN);\n\n        // first partition contains 2\n        Collection<Integer> partition = partitions.get(0);\n        assertEquals(1, partition.size());\n        assertEquals(2, partition.iterator().next().intValue());\n\n        // second partition contains 4\n        partition = partitions.get(1);\n        assertEquals(1, partition.size());\n        assertEquals(4, partition.iterator().next().intValue());\n\n        // third partition contains 1 and 3\n        final Integer[] expected = { 1, 3 };\n        partition = partitions.get(2);\n        assertArrayEquals(expected, partition.toArray());\n\n        assertThrows(NullPointerException.class, () -> IterableUtils.partition(input, EQUALS_TWO, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        assertEquals(0, IterableUtils.size(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        String result = IterableUtils.toString(iterableA);\n        assertEquals(\"[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\", result);\n\n        result = IterableUtils.toString(new ArrayList<>());\n        assertEquals(\"[]\", result);\n\n        result = IterableUtils.toString(null);\n        assertEquals(\"[]\", result);\n\n        result = IterableUtils.toString(iterableA, input -> Integer.toString(input * 2));\n        assertEquals(\"[2, 4, 4, 6, 6, 6, 8, 8, 8, 8]\", result);\n\n        result = IterableUtils.toString(new ArrayList<>(), input -> {\n            fail(\"not supposed to reach here\");\n            return StringUtils.EMPTY;\n        });\n        assertEquals(\"[]\", result);\n\n        result = IterableUtils.toString(null, input -> {\n            fail(\"not supposed to reach here\");\n            return StringUtils.EMPTY;\n        });\n        assertEquals(\"[]\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testToStringDelimiter()", "name": "testToStringDelimiter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringDelimiter()", "original_string": "    @Test\n    public void testToStringDelimiter() {\n\n        final Transformer<Integer, String> transformer = input -> Integer.toString(input * 2);\n\n        String result = IterableUtils.toString(iterableA, transformer, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY);\n        assertEquals(\"2446668888\", result);\n\n        result = IterableUtils.toString(iterableA, transformer, \",\", StringUtils.EMPTY, StringUtils.EMPTY);\n        assertEquals(\"2,4,4,6,6,6,8,8,8,8\", result);\n\n        result = IterableUtils.toString(iterableA, transformer, StringUtils.EMPTY, \"[\", \"]\");\n        assertEquals(\"[2446668888]\", result);\n\n        result = IterableUtils.toString(iterableA, transformer, \",\", \"[\", \"]\");\n        assertEquals(\"[2,4,4,6,6,6,8,8,8,8]\", result);\n\n        result = IterableUtils.toString(iterableA, transformer, \",\", \"[[\", \"]]\");\n        assertEquals(\"[[2,4,4,6,6,6,8,8,8,8]]\", result);\n\n        result = IterableUtils.toString(iterableA, transformer, \",,\", \"[\", \"]\");\n        assertEquals(\"[2,,4,,4,,6,,6,,6,,8,,8,,8,,8]\", result);\n\n        result = IterableUtils.toString(iterableA, transformer, \",,\", \"((\", \"))\");\n        assertEquals(\"((2,,4,,4,,6,,6,,6,,8,,8,,8,,8))\", result);\n\n        result = IterableUtils.toString(new ArrayList<>(), transformer, StringUtils.EMPTY, \"(\", \")\");\n        assertEquals(\"()\", result);\n\n        result = IterableUtils.toString(new ArrayList<>(), transformer, StringUtils.EMPTY, StringUtils.EMPTY, StringUtils.EMPTY);\n        assertEquals(StringUtils.EMPTY, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest.[void]testToStringWithNullArguments()", "name": "testToStringWithNullArguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithNullArguments()", "original_string": "    @Test\n    public void testToStringWithNullArguments() {\n        final String result = IterableUtils.toString(null, input -> {\n            fail(\"not supposed to reach here\");\n            return StringUtils.EMPTY;\n        }, StringUtils.EMPTY, \"(\", \")\");\n        assertEquals(\"()\", result);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> IterableUtils.toString(new ArrayList<>(), null, StringUtils.EMPTY, \"(\", \")\"),\n                        \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> IterableUtils.toString(new ArrayList<>(), input -> {\n                    fail(\"not supposed to reach here\");\n                    return StringUtils.EMPTY;\n                }, null, \"(\", \")\"), \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> IterableUtils.toString(new ArrayList<>(), input -> {\n                    fail(\"not supposed to reach here\");\n                    return StringUtils.EMPTY;\n                }, StringUtils.EMPTY, null, \")\"), \"expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> IterableUtils.toString(new ArrayList<>(), input -> {\n                    fail(\"not supposed to reach here\");\n                    return StringUtils.EMPTY;\n                }, StringUtils.EMPTY, \"(\", null), \"expecting NullPointerException\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java", "class_name": "IterableUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/IterableUtilsTest.java.IterableUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest.[void]testPopWithItems()", "name": "testPopWithItems", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopWithItems()", "original_string": "    @Test\n    public void testPopWithItems() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(\"Second Item\", stack.pop(), \"Top item should be 'Second Item'\");\n        assertEquals(\"First Item\", stack.pop(), \"Next item should be 'First Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "class_name": "ArrayStack_popTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest.[void]testPopOnEmptyStack()", "name": "testPopOnEmptyStack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopOnEmptyStack()", "original_string": "    @Test\n    public void testPopOnEmptyStack() {\n        assertThrows(EmptyStackException.class, () -> {\n            stack.pop();\n        }, \"Pop on empty stack should throw EmptyStackException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "class_name": "ArrayStack_popTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest.[void]testPopAfterPeek()", "name": "testPopAfterPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopAfterPeek()", "original_string": "    @Test\n    public void testPopAfterPeek() {\n        stack.push(\"Item\");\n        assertEquals(\"Item\", stack.peek(), \"Peek should return 'Item'\");\n        assertEquals(\"Item\", stack.pop(), \"Pop should return 'Item'\");\n        assertTrue(stack.empty(), \"Stack should be empty after pop\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "class_name": "ArrayStack_popTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest.[void]testPopAndSearch()", "name": "testPopAndSearch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopAndSearch()", "original_string": "    @Test\n    public void testPopAndSearch() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(1, stack.search(\"Second Item\"), \"Top item is 'Second Item'\");\n        assertEquals(\"Second Item\", stack.pop(), \"Pop should return 'Second Item'\");\n        assertEquals(1, stack.search(\"First Item\"), \"Top item is 'First Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "class_name": "ArrayStack_popTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest.[void]testPopAndEmpty()", "name": "testPopAndEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPopAndEmpty()", "original_string": "    @Test\n    public void testPopAndEmpty() {\n        stack.push(\"Item\");\n        assertFalse(stack.empty(), \"Stack should not be empty after push\");\n        stack.pop();\n        assertTrue(stack.empty(), \"Stack should be empty after pop\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "class_name": "ArrayStack_popTest", "class_uri": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java.ArrayStack_popTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testConstantFactoryConstant()", "name": "testConstantFactoryConstant", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstantFactoryConstant()", "original_string": "    @Test\n    public void testConstantFactoryConstant() {\n        final Integer constant = Integer.valueOf(9);\n        final Factory<Integer> factory = FactoryUtils.constantFactory(constant);\n        assertNotNull(factory);\n        final Integer created = factory.create();\n        assertSame(constant, created);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testConstantFactoryNull()", "name": "testConstantFactoryNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstantFactoryNull()", "original_string": "    @Test\n    public void testConstantFactoryNull() {\n        final Factory<Object> factory = FactoryUtils.constantFactory(null);\n        assertNotNull(factory);\n        final Object created = factory.create();\n        assertNull(created);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testExceptionFactory()", "name": "testExceptionFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExceptionFactory()", "original_string": "    @Test\n    public void testExceptionFactory() {\n        assertNotNull(FactoryUtils.exceptionFactory());\n        assertSame(FactoryUtils.exceptionFactory(), FactoryUtils.exceptionFactory());\n\n        assertThrows(FunctorException.class, () -> FactoryUtils.exceptionFactory().create());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testInstantiateFactoryComplex()", "name": "testInstantiateFactoryComplex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstantiateFactoryComplex()", "original_string": "    @Test\n    public void testInstantiateFactoryComplex() {\n        TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n        // 2nd Jan 1970\n        final Factory<Date> factory = FactoryUtils.instantiateFactory(Date.class,\n            new Class[] {Integer.TYPE, Integer.TYPE, Integer.TYPE},\n            new Object[] {Integer.valueOf(70), Integer.valueOf(0), Integer.valueOf(2)});\n        assertNotNull(factory);\n        final Date created = factory.create();\n        // long time of 1 day (== 2nd Jan 1970)\n        assertEquals(new Date(1000 * 60 * 60 * 24), created);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testInstantiateFactoryMismatch()", "name": "testInstantiateFactoryMismatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstantiateFactoryMismatch()", "original_string": "    @Test\n    public void testInstantiateFactoryMismatch() {\n        assertThrows(IllegalArgumentException.class, () -> FactoryUtils.instantiateFactory(Date.class, null, new Object[] {null}));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testInstantiateFactoryNoConstructor()", "name": "testInstantiateFactoryNoConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstantiateFactoryNoConstructor()", "original_string": "    @Test\n    public void testInstantiateFactoryNoConstructor() {\n        assertThrows(IllegalArgumentException.class, () -> FactoryUtils.instantiateFactory(Date.class, new Class[] {Long.class}, new Object[] {null}));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testInstantiateFactoryNull()", "name": "testInstantiateFactoryNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstantiateFactoryNull()", "original_string": "    @Test\n    public void testInstantiateFactoryNull() {\n        assertThrows(NullPointerException.class, () -> FactoryUtils.instantiateFactory(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testInstantiateFactorySimple()", "name": "testInstantiateFactorySimple", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstantiateFactorySimple()", "original_string": "    @Test\n    public void testInstantiateFactorySimple() {\n        final Factory<Mock3> factory = FactoryUtils.instantiateFactory(Mock3.class);\n        assertNotNull(factory);\n        Mock3 created = factory.get();\n        assertEquals(0, created.getValue());\n        created = factory.create();\n        assertEquals(1, created.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testNullFactory()", "name": "testNullFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullFactory()", "original_string": "    @Test\n    public void testNullFactory() {\n        final Factory<Object> factory = FactoryUtils.nullFactory();\n        assertNotNull(factory);\n        final Object created = factory.create();\n        assertNull(created);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testPrototypeFactoryNull()", "name": "testPrototypeFactoryNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrototypeFactoryNull()", "original_string": "    @Test\n    public void testPrototypeFactoryNull() {\n        assertSame(ConstantFactory.NULL_INSTANCE, FactoryUtils.prototypeFactory(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testPrototypeFactoryPublicBad()", "name": "testPrototypeFactoryPublicBad", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrototypeFactoryPublicBad()", "original_string": "    @Test\n    public void testPrototypeFactoryPublicBad() {\n        final Object proto = new Object();\n        assertThrows(IllegalArgumentException.class, () -> FactoryUtils.prototypeFactory(proto));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testPrototypeFactoryPublicCloneMethod()", "name": "testPrototypeFactoryPublicCloneMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrototypeFactoryPublicCloneMethod()", "original_string": "    @Test\n    public void testPrototypeFactoryPublicCloneMethod() throws Exception {\n        final Date proto = new Date();\n        final Factory<Date> factory = FactoryUtils.prototypeFactory(proto);\n        assertNotNull(factory);\n        final Date created = factory.create();\n        assertNotSame(proto, created);\n        assertEquals(proto, created);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testPrototypeFactoryPublicCopyConstructor()", "name": "testPrototypeFactoryPublicCopyConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrototypeFactoryPublicCopyConstructor()", "original_string": "    @Test\n    public void testPrototypeFactoryPublicCopyConstructor() throws Exception {\n        final Mock1 proto = new Mock1(6);\n        final Factory<Object> factory = FactoryUtils.<Object>prototypeFactory(proto);\n        assertNotNull(factory);\n        final Object created = factory.create();\n        assertNotSame(proto, created);\n        assertEquals(proto, created);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testPrototypeFactoryPublicSerialization()", "name": "testPrototypeFactoryPublicSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrototypeFactoryPublicSerialization()", "original_string": "    @Test\n    public void testPrototypeFactoryPublicSerialization() throws Exception {\n        final Integer proto = 9;\n        final Factory<Integer> factory = FactoryUtils.prototypeFactory(proto);\n        assertNotNull(factory);\n        final Integer created = factory.create();\n        assertNotSame(proto, created);\n        assertEquals(proto, created);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testPrototypeFactoryPublicSerializationError()", "name": "testPrototypeFactoryPublicSerializationError", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrototypeFactoryPublicSerializationError()", "original_string": "    @Test\n    public void testPrototypeFactoryPublicSerializationError() {\n        final Mock2 proto = new Mock2(new Object());\n        final Factory<Object> factory = FactoryUtils.<Object>prototypeFactory(proto);\n        assertNotNull(factory);\n\n        final FunctorException thrown = assertThrows(FunctorException.class, () -> factory.create());\n        assertTrue(thrown.getCause() instanceof IOException);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest.[void]testSingletonPatternInSerialization()", "name": "testSingletonPatternInSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSingletonPatternInSerialization()", "original_string": "    @Test\n    public void testSingletonPatternInSerialization() {\n        final Object[] singletons = {\n            ExceptionFactory.INSTANCE,\n        };\n\n        for (final Object original : singletons) {\n            TestUtils.assertSameAfterSerialization(\n                    \"Singleton pattern broken for \" + original.getClass(),\n                    original\n            );\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java", "class_name": "FactoryUtilsTest", "class_uri": "src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java.FactoryUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that all Factory singletons hold singleton pattern in\nserialization/deserialization process.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractArrayListTest.java.AbstractArrayListTest.[void]testNewArrayList()", "name": "testNewArrayList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewArrayList()", "original_string": "    @Test\n    public void testNewArrayList() {\n        final ArrayList<E> list = makeObject();\n        assertTrue(list.isEmpty(), \"New list is empty\");\n        assertEquals(0, list.size(), \"New list has size zero\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractArrayListTest.java", "class_name": "AbstractArrayListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractArrayListTest.java.AbstractArrayListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/AbstractArrayListTest.java.AbstractArrayListTest.[void]testSearch()", "name": "testSearch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSearch()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSearch() {\n        final ArrayList<E> list = makeObject();\n        list.add((E) \"First Item\");\n        list.add((E) \"Last Item\");\n        assertEquals(\"First Item\", list.get(0), \"First item is 'First Item'\");\n        assertEquals(\"Last Item\", list.get(1), \"Last Item is 'Last Item'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/AbstractArrayListTest.java", "class_name": "AbstractArrayListTest", "class_uri": "src/test/java/org/apache/commons/collections4/AbstractArrayListTest.java.AbstractArrayListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest.[void]testPeekWithEmptyQueue()", "name": "testPeekWithEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekWithEmptyQueue()", "original_string": "    @Test\n    public void testPeekWithEmptyQueue() {\n        assertNull(queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "class_name": "CircularFifoQueue_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest.[void]testPeekWithNonEmptyQueue()", "name": "testPeekWithNonEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekWithNonEmptyQueue()", "original_string": "    @Test\n    public void testPeekWithNonEmptyQueue() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        assertEquals(\"1\", queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "class_name": "CircularFifoQueue_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest.[void]testPeekAfterAddingAndRemovingElements()", "name": "testPeekAfterAddingAndRemovingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekAfterAddingAndRemovingElements()", "original_string": "    @Test\n    public void testPeekAfterAddingAndRemovingElements() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.remove();\n        assertEquals(\"2\", queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "class_name": "CircularFifoQueue_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest.[void]testPeekAfterFullQueue()", "name": "testPeekAfterFullQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekAfterFullQueue()", "original_string": "    @Test\n    public void testPeekAfterFullQueue() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        assertEquals(\"2\", queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "class_name": "CircularFifoQueue_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest.[void]testPeekAfterClear()", "name": "testPeekAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeekAfterClear()", "original_string": "    @Test\n    public void testPeekAfterClear() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.clear();\n        assertNull(queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "class_name": "CircularFifoQueue_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java.CircularFifoQueue_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java.SynchronizedQueue_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_SameInstance()", "original_string": "    @Test\n    public void testEquals_SameInstance() {\n        Queue<String> queue = new LinkedList<>();\n        SynchronizedQueue<String> synchronizedQueue = SynchronizedQueue.synchronizedQueue(queue);\n\n        assertTrue(synchronizedQueue.equals(synchronizedQueue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java", "class_name": "SynchronizedQueue_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java.SynchronizedQueue_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java.SynchronizedQueue_equalsTest.[void]testEquals_DifferentInstancesWithSameElements()", "name": "testEquals_DifferentInstancesWithSameElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_DifferentInstancesWithSameElements()", "original_string": "    @Test\n    public void testEquals_DifferentInstancesWithSameElements() {\n        Queue<String> queue1 = new LinkedList<>();\n        queue1.offer(\"element1\");\n        queue1.offer(\"element2\");\n        SynchronizedQueue<String> synchronizedQueue1 = SynchronizedQueue.synchronizedQueue(queue1);\n\n        Queue<String> queue2 = new LinkedList<>();\n        queue2.offer(\"element1\");\n        queue2.offer(\"element2\");\n        SynchronizedQueue<String> synchronizedQueue2 = SynchronizedQueue.synchronizedQueue(queue2);\n\n        assertTrue(synchronizedQueue1.decorated().equals(synchronizedQueue2.decorated()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java", "class_name": "SynchronizedQueue_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java.SynchronizedQueue_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java.SynchronizedQueue_equalsTest.[void]testEquals_DifferentInstancesWithDifferentElements()", "name": "testEquals_DifferentInstancesWithDifferentElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_DifferentInstancesWithDifferentElements()", "original_string": "    @Test\n    public void testEquals_DifferentInstancesWithDifferentElements() {\n        Queue<String> queue1 = new LinkedList<>();\n        queue1.offer(\"element1\");\n        SynchronizedQueue<String> synchronizedQueue1 = SynchronizedQueue.synchronizedQueue(queue1);\n\n        Queue<String> queue2 = new LinkedList<>();\n        queue2.offer(\"element2\");\n        SynchronizedQueue<String> synchronizedQueue2 = SynchronizedQueue.synchronizedQueue(queue2);\n\n        assertFalse(synchronizedQueue1.decorated().equals(synchronizedQueue2.decorated()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java", "class_name": "SynchronizedQueue_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java.SynchronizedQueue_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest.[void]testAddElementSuccess()", "name": "testAddElementSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddElementSuccess()", "original_string": "    @Test\n    public void testAddElementSuccess() {\n        assertTrue(queue.add(\"Element1\"));\n        assertEquals(1, queue.size());\n        assertEquals(\"Element1\", queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "class_name": "CircularFifoQueue_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest.[void]testAddElementNull()", "name": "testAddElementNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddElementNull()", "original_string": "    @Test\n    public void testAddElementNull() {\n        assertThrows(NullPointerException.class, () -> queue.add(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "class_name": "CircularFifoQueue_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest.[void]testAddElementAtFullCapacity()", "name": "testAddElementAtFullCapacity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddElementAtFullCapacity()", "original_string": "    @Test\n    public void testAddElementAtFullCapacity() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.add(\"Element3\");\n        assertTrue(queue.isAtFullCapacity());\n        assertTrue(queue.add(\"Element4\"));\n        assertEquals(3, queue.size());\n        assertEquals(\"Element2\", queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "class_name": "CircularFifoQueue_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest.[void]testAddElementWrapAround()", "name": "testAddElementWrapAround", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddElementWrapAround()", "original_string": "    @Test\n    public void testAddElementWrapAround() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.add(\"Element3\");\n        queue.add(\"Element4\");\n        assertEquals(3, queue.size());\n        assertEquals(\"Element2\", queue.peek());\n        assertEquals(\"Element2\", queue.get(0));\n        assertEquals(\"Element3\", queue.get(1));\n        assertEquals(\"Element4\", queue.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "class_name": "CircularFifoQueue_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest.[void]testAddElementAfterClear()", "name": "testAddElementAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddElementAfterClear()", "original_string": "    @Test\n    public void testAddElementAfterClear() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.clear();\n        assertTrue(queue.add(\"Element3\"));\n        assertEquals(1, queue.size());\n        assertEquals(\"Element3\", queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "class_name": "CircularFifoQueue_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest.[void]testAddElementAfterRemove()", "name": "testAddElementAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddElementAfterRemove()", "original_string": "    @Test\n    public void testAddElementAfterRemove() {\n        queue.add(\"Element1\");\n        queue.add(\"Element2\");\n        queue.remove();\n        assertTrue(queue.add(\"Element3\"));\n        assertEquals(2, queue.size());\n        assertEquals(\"Element2\", queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "class_name": "CircularFifoQueue_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java.CircularFifoQueue_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java.SynchronizedQueue_pollTest.[void]testPoll()", "name": "testPoll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPoll()", "original_string": "    @Test\n    public void testPoll() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        queue.offer(\"element1\");\n        SynchronizedQueue<String> synchronizedQueue = SynchronizedQueue.synchronizedQueue(queue);\n\n        // When\n        String result = synchronizedQueue.poll();\n\n        // Then\n        assertEquals(\"element1\", result);\n        assertNull(synchronizedQueue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java", "class_name": "SynchronizedQueue_pollTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java.SynchronizedQueue_pollTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeWhenQueueIsEmpty()", "name": "testSizeWhenQueueIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWhenQueueIsEmpty()", "original_string": "    @Test\n    public void testSizeWhenQueueIsEmpty() {\n        assertEquals(0, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeWhenQueueIsFull()", "name": "testSizeWhenQueueIsFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWhenQueueIsFull()", "original_string": "    @Test\n    public void testSizeWhenQueueIsFull() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        assertEquals(3, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeWhenQueueHasElementsButNotFull()", "name": "testSizeWhenQueueHasElementsButNotFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWhenQueueHasElementsButNotFull()", "original_string": "    @Test\n    public void testSizeWhenQueueHasElementsButNotFull() {\n        queue.add(1);\n        queue.add(2);\n        assertEquals(2, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeAfterAddingAndRemovingElements()", "name": "testSizeAfterAddingAndRemovingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterAddingAndRemovingElements()", "original_string": "    @Test\n    public void testSizeAfterAddingAndRemovingElements() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        queue.remove();\n        assertEquals(2, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeAfterClearingQueue()", "name": "testSizeAfterClearingQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterClearingQueue()", "original_string": "    @Test\n    public void testSizeAfterClearingQueue() {\n        queue.add(1);\n        queue.add(2);\n        queue.clear();\n        assertEquals(0, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeWhenEndIsLessThanStart()", "name": "testSizeWhenEndIsLessThanStart", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWhenEndIsLessThanStart()", "original_string": "    @Test\n    public void testSizeWhenEndIsLessThanStart() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        queue.remove();\n        queue.add(4);\n        assertEquals(3, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeWhenEndEqualsStartAndQueueIsFull()", "name": "testSizeWhenEndEqualsStartAndQueueIsFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWhenEndEqualsStartAndQueueIsFull()", "original_string": "    @Test\n    public void testSizeWhenEndEqualsStartAndQueueIsFull() {\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        assertEquals(3, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest.[void]testSizeWhenEndEqualsStartAndQueueIsEmpty()", "name": "testSizeWhenEndEqualsStartAndQueueIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWhenEndEqualsStartAndQueueIsEmpty()", "original_string": "    @Test\n    public void testSizeWhenEndEqualsStartAndQueueIsEmpty() {\n        queue.add(1);\n        queue.remove();\n        assertEquals(0, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "class_name": "CircularFifoQueue_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java.CircularFifoQueue_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueueTest.java.SynchronizedQueueTest.[void]testCreate()", "name": "testCreate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Disabled(\"Run once\")\n    public void testCreate()", "original_string": "    @Test\n    @Disabled(\"Run once\")\n    public void testCreate() throws Exception {\n        Queue<T> queue = makeObject();\n        writeExternalFormToDisk((java.io.Serializable) queue,\n            BulkTest.TEST_DATA_PATH + \"SynchronizedQueue.emptyCollection.version4.2.obj\");\n        queue = makeFullCollection();\n        writeExternalFormToDisk((java.io.Serializable) queue,\n            BulkTest.TEST_DATA_PATH + \"SynchronizedQueue.fullCollection.version4.2.obj\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueueTest.java", "class_name": "SynchronizedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueueTest.java.SynchronizedQueueTest", "attributes": {"modifiers": "@Test\n    @Disabled(\"Run once\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@Disabled(\"Run once\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest.[void]testRemoveSuccess()", "name": "testRemoveSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveSuccess()", "original_string": "    @Test\n    public void testRemoveSuccess() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        assertEquals(\"1\", queue.remove());\n        assertEquals(2, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "class_name": "CircularFifoQueue_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest.[void]testRemoveFromEmptyQueue()", "name": "testRemoveFromEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromEmptyQueue()", "original_string": "    @Test\n    public void testRemoveFromEmptyQueue() {\n        assertThrows(NoSuchElementException.class, () -> queue.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "class_name": "CircularFifoQueue_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest.[void]testRemoveWithWrapAround()", "name": "testRemoveWithWrapAround", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithWrapAround()", "original_string": "    @Test\n    public void testRemoveWithWrapAround() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n        queue.add(\"6\"); // This will wrap around\n        assertEquals(\"2\", queue.remove());\n        assertEquals(4, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "class_name": "CircularFifoQueue_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest.[void]testRemoveAllElements()", "name": "testRemoveAllElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllElements()", "original_string": "    @Test\n    public void testRemoveAllElements() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.remove();\n        queue.remove();\n        queue.remove();\n        assertTrue(queue.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "class_name": "CircularFifoQueue_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest.[void]testRemoveAfterClear()", "name": "testRemoveAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterClear()", "original_string": "    @Test\n    public void testRemoveAfterClear() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.clear();\n        assertThrows(NoSuchElementException.class, () -> queue.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "class_name": "CircularFifoQueue_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java.CircularFifoQueue_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java.PredicatedQueueTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGet() {\n        final Queue<E> queue = makeTestQueue();\n\n        assertNull(queue.peek());\n\n        queue.add((E) \"one\");\n        queue.add((E) \"two\");\n        queue.add((E) \"three\");\n        assertEquals(\"one\", queue.peek(), \"Queue get\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java", "class_name": "PredicatedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java.PredicatedQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java.PredicatedQueueTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove() {\n        final Queue<E> queue = makeTestQueue();\n        queue.add((E) \"one\");\n        assertEquals(\"one\", queue.poll(), \"Queue get\");\n        assertNull(queue.peek());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java", "class_name": "PredicatedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java.PredicatedQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java.SynchronizedQueue_peekTest.[void]testPeek()", "name": "testPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPeek()", "original_string": "    @Test\n    public void testPeek() {\n        Queue<String> queue = new LinkedList<>();\n        queue.offer(\"element\");\n        SynchronizedQueue<String> synchronizedQueue = SynchronizedQueue.synchronizedQueue(queue);\n\n        String peekedElement = synchronizedQueue.peek();\n\n        assertEquals(\"element\", peekedElement);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java", "class_name": "SynchronizedQueue_peekTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java.SynchronizedQueue_peekTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testEmptyQueueCompatibility()", "name": "testEmptyQueueCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyQueueCompatibility()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyQueueCompatibility() throws IOException, ClassNotFoundException {\n        /*\n         * Create canonical objects with this code\n        Queue queue = makeEmptyQueue();\n        if (!(queue instanceof Serializable)) return;\n\n        writeExternalFormToDisk((Serializable) queue, getCanonicalEmptyCollectionName(queue));\n        */\n\n        // test to make sure the canonical form has been preserved\n        final Queue<E> queue = makeObject();\n        if (queue instanceof Serializable && !skipSerializedCanonicalTests()\n                && isTestSerialization()) {\n            final Queue<E> queue2 = (Queue<E>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(queue));\n            assertEquals(0, queue2.size(), \"Queue is empty\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Queue\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testEmptyQueueSerialization()", "name": "testEmptyQueueSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyQueueSerialization()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyQueueSerialization() throws IOException, ClassNotFoundException {\n        final Queue<E> queue = makeObject();\n        if (!(queue instanceof Serializable && isTestSerialization())) {\n            return;\n        }\n\n        final byte[] object = writeExternalFormToBytes((Serializable) queue);\n        final Queue<E> queue2 = (Queue<E>) readExternalFormFromBytes(object);\n\n        assertEquals(0, queue.size(), \"Both queues are empty\");\n        assertEquals(0, queue2.size(), \"Both queues are empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testFullQueueCompatibility()", "name": "testFullQueueCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullQueueCompatibility()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullQueueCompatibility() throws IOException, ClassNotFoundException {\n        /*\n         * Create canonical objects with this code\n        Queue queue = makeFullQueue();\n        if (!(queue instanceof Serializable)) return;\n\n        writeExternalFormToDisk((Serializable) queue, getCanonicalFullCollectionName(queue));\n        */\n\n        // test to make sure the canonical form has been preserved\n        final Queue<E> queue = makeFullCollection();\n        if (queue instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final Queue<E> queue2 = (Queue<E>) readExternalFormFromDisk(getCanonicalFullCollectionName(queue));\n            assertEquals(queue.size(), queue2.size(), \"Queues are not the right size\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Queue\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testFullQueueSerialization()", "name": "testFullQueueSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullQueueSerialization()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullQueueSerialization() throws IOException, ClassNotFoundException {\n        final Queue<E> queue = makeFullCollection();\n        final int size = getFullElements().length;\n        if (!(queue instanceof Serializable && isTestSerialization())) {\n            return;\n        }\n\n        final byte[] object = writeExternalFormToBytes((Serializable) queue);\n        final Queue<E> queue2 = (Queue<E>) readExternalFormFromBytes(object);\n\n        assertEquals(size, queue.size(), \"Both queues are same size\");\n        assertEquals(size, queue2.size(), \"Both queues are same size\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testQueueElement()", "name": "testQueueElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueueElement()", "original_string": "    @Test\n    public void testQueueElement() {\n        resetEmpty();\n\n        assertThrows(NoSuchElementException.class, () -> getCollection().element(),\n                \"Queue.element should throw NoSuchElementException\");\n\n        resetFull();\n\n        assertTrue(getConfirmed().contains(getCollection().element()));\n\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final int max = getFullElements().length;\n        for (int i = 0; i < max; i++) {\n            final E element = getCollection().element();\n\n            if (!isNullSupported()) {\n                assertNotNull(element);\n            }\n\n            assertTrue(getConfirmed().contains(element));\n\n            getCollection().remove(element);\n            getConfirmed().remove(element);\n\n            verify();\n        }\n\n        assertThrows(NoSuchElementException.class, () -> getCollection().element(),\n                \"Queue.element should throw NoSuchElementException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Queue#element()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testQueueOffer()", "name": "testQueueOffer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueueOffer()", "original_string": "    @Test\n    public void testQueueOffer() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final E[] elements = getFullElements();\n        for (final E element : elements) {\n            resetEmpty();\n            final boolean r = getCollection().offer(element);\n            getConfirmed().add(element);\n            verify();\n            assertTrue(r, \"Empty queue changed after add\");\n            assertEquals(1, getCollection().size(), \"Queue size is 1 after first add\");\n        }\n\n        resetEmpty();\n        int size = 0;\n        for (final E element : elements) {\n            final boolean r = getCollection().offer(element);\n            getConfirmed().add(element);\n            verify();\n            if (r) {\n                size++;\n            }\n            assertEquals(size, getCollection().size(), \"Queue size should grow after add\");\n            assertTrue(getCollection().contains(element), \"Queue should contain added element\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Queue#offer(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testQueuePeek()", "name": "testQueuePeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueuePeek()", "original_string": "    @Test\n    public void testQueuePeek() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n\n        E element = getCollection().peek();\n        assertNull(element);\n\n        resetFull();\n\n        final int max = getFullElements().length;\n        for (int i = 0; i < max; i++) {\n            element = getCollection().peek();\n\n            if (!isNullSupported()) {\n                assertNotNull(element);\n            }\n\n            assertTrue(getConfirmed().contains(element));\n\n            getCollection().remove(element);\n            getConfirmed().remove(element);\n\n            verify();\n        }\n\n        element = getCollection().peek();\n        assertNull(element);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Queue#peek()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testQueuePoll()", "name": "testQueuePoll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueuePoll()", "original_string": "    @Test\n    public void testQueuePoll() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n\n        E element = getCollection().poll();\n        assertNull(element);\n\n        resetFull();\n\n        final int max = getFullElements().length;\n        for (int i = 0; i < max; i++) {\n            element = getCollection().poll();\n            final boolean success = getConfirmed().remove(element);\n            assertTrue(success, \"poll should return correct element\");\n            verify();\n        }\n\n        element = getCollection().poll();\n        assertNull(element);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Queue#poll()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest.[void]testQueueRemove()", "name": "testQueueRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueueRemove()", "original_string": "    @Test\n    public void testQueueRemove() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n\n        assertThrows(NoSuchElementException.class, () -> getCollection().remove(),\n                \"Queue.remove should throw NoSuchElementException\");\n\n        resetFull();\n\n        final int max = getFullElements().length;\n        for (int i = 0; i < max; i++) {\n            final E element = getCollection().remove();\n            final boolean success = getConfirmed().remove(element);\n            assertTrue(success, \"remove should return correct element\");\n            verify();\n        }\n\n        assertThrows(NoSuchElementException.class, () -> getCollection().element(),\n                \"Queue.remove should throw NoSuchElementException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java", "class_name": "AbstractQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/AbstractQueueTest.java.AbstractQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Queue#remove()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java.SynchronizedQueue_elementTest.[void]testElement()", "name": "testElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElement()", "original_string": "    @Test\n    public void testElement() {\n        Queue<String> queue = new LinkedList<>();\n        queue.offer(\"element1\");\n        SynchronizedQueue<String> synchronizedQueue = SynchronizedQueue.synchronizedQueue(queue);\n\n        String result = synchronizedQueue.element();\n\n        assertEquals(\"element1\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java", "class_name": "SynchronizedQueue_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java.SynchronizedQueue_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_hashCodeTest.java.SynchronizedQueue_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        // Given\n        Queue<String> mockQueue = mock(Queue.class);\n        SynchronizedQueue<String> synchronizedQueue = new SynchronizedQueue<>(mockQueue, new Object());\n\n        // When\n        int result = synchronizedQueue.hashCode();\n\n        // Then\n        assertEquals(mockQueue.hashCode(), result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_hashCodeTest.java", "class_name": "SynchronizedQueue_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_hashCodeTest.java.SynchronizedQueue_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java.UnmodifiableQueue_unmodifiableQueueTest.[void]testUnmodifiableQueueWithModifiableQueue()", "name": "testUnmodifiableQueueWithModifiableQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableQueueWithModifiableQueue()", "original_string": "    @Test\n    public void testUnmodifiableQueueWithModifiableQueue() {\n        Queue<String> modifiableQueue = new LinkedList<>();\n        modifiableQueue.add(\"element\");\n\n        Queue<String> unmodifiableQueue = UnmodifiableQueue.unmodifiableQueue(modifiableQueue);\n\n        assertTrue(unmodifiableQueue instanceof UnmodifiableQueue);\n        assertEquals(1, unmodifiableQueue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java", "class_name": "UnmodifiableQueue_unmodifiableQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java.UnmodifiableQueue_unmodifiableQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java.UnmodifiableQueue_unmodifiableQueueTest.[void]testUnmodifiableQueueWithUnmodifiableQueue()", "name": "testUnmodifiableQueueWithUnmodifiableQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableQueueWithUnmodifiableQueue()", "original_string": "    @Test\n    public void testUnmodifiableQueueWithUnmodifiableQueue() {\n        Queue<String> modifiableQueue = new LinkedList<>();\n        modifiableQueue.add(\"element\");\n        Queue<String> alreadyUnmodifiableQueue = UnmodifiableQueue.unmodifiableQueue(modifiableQueue);\n\n        Queue<String> unmodifiableQueue = UnmodifiableQueue.unmodifiableQueue(alreadyUnmodifiableQueue);\n\n        assertSame(alreadyUnmodifiableQueue, unmodifiableQueue);\n        assertEquals(1, unmodifiableQueue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java", "class_name": "UnmodifiableQueue_unmodifiableQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java.UnmodifiableQueue_unmodifiableQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final Queue<E> queue = makeFullCollection();\n        assertSame(queue, UnmodifiableQueue.unmodifiableQueue(queue));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableQueue.unmodifiableQueue(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "class_name": "UnmodifiableQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest.[void]testOffer()", "name": "testOffer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOffer()", "original_string": "    @Test\n    public void testOffer() {\n        final Queue<E> queue = makeFullCollection();\n        final E e = null;\n        assertThrows(UnsupportedOperationException.class, () -> queue.offer(e));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "class_name": "UnmodifiableQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest.[void]testPoll()", "name": "testPoll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPoll()", "original_string": "    @Test\n    public void testPoll() {\n        final Queue<E> queue = makeFullCollection();\n        assertThrows(UnsupportedOperationException.class, () -> queue.poll());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "class_name": "UnmodifiableQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest.[void]testQueueRemove()", "name": "testQueueRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testQueueRemove()", "original_string": "    @Test\n    @Override\n    public void testQueueRemove() {\n        resetEmpty();\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "class_name": "UnmodifiableQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullCollection() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java", "class_name": "UnmodifiableQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java.UnmodifiableQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest.[void]testGetValidIndex()", "name": "testGetValidIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValidIndex()", "original_string": "    @Test\n    public void testGetValidIndex() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n\n        assertEquals(\"1\", queue.get(0));\n        assertEquals(\"3\", queue.get(2));\n        assertEquals(\"5\", queue.get(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "class_name": "CircularFifoQueue_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest.[void]testGetInvalidIndex()", "name": "testGetInvalidIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetInvalidIndex()", "original_string": "    @Test\n    public void testGetInvalidIndex() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n\n        assertThrows(NoSuchElementException.class, () -> queue.get(-1));\n        assertThrows(NoSuchElementException.class, () -> queue.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "class_name": "CircularFifoQueue_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest.[void]testGetAfterWrapAround()", "name": "testGetAfterWrapAround", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterWrapAround()", "original_string": "    @Test\n    public void testGetAfterWrapAround() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n        queue.add(\"6\");\n        queue.add(\"7\");\n\n        assertEquals(\"3\", queue.get(0));\n        assertEquals(\"5\", queue.get(2));\n        assertEquals(\"7\", queue.get(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "class_name": "CircularFifoQueue_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest.[void]testGetEmptyQueue()", "name": "testGetEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetEmptyQueue()", "original_string": "    @Test\n    public void testGetEmptyQueue() {\n        assertThrows(NoSuchElementException.class, () -> queue.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "class_name": "CircularFifoQueue_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest.[void]testGetAfterClear()", "name": "testGetAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterClear()", "original_string": "    @Test\n    public void testGetAfterClear() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.clear();\n\n        assertThrows(NoSuchElementException.class, () -> queue.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "class_name": "CircularFifoQueue_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java.CircularFifoQueue_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest.[void]testPollWhenQueueIsEmpty()", "name": "testPollWhenQueueIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPollWhenQueueIsEmpty()", "original_string": "    @Test\n    public void testPollWhenQueueIsEmpty() {\n        assertNull(queue.poll());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "class_name": "CircularFifoQueue_pollTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest.[void]testPollWhenQueueHasOneElement()", "name": "testPollWhenQueueHasOneElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPollWhenQueueHasOneElement()", "original_string": "    @Test\n    public void testPollWhenQueueHasOneElement() {\n        queue.add(\"1\");\n        assertEquals(\"1\", queue.poll());\n        assertTrue(queue.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "class_name": "CircularFifoQueue_pollTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest.[void]testPollWhenQueueIsFull()", "name": "testPollWhenQueueIsFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPollWhenQueueIsFull()", "original_string": "    @Test\n    public void testPollWhenQueueIsFull() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n        assertEquals(\"1\", queue.poll());\n        assertEquals(4, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "class_name": "CircularFifoQueue_pollTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest.[void]testPollAfterAddingAndRemovingMultipleElements()", "name": "testPollAfterAddingAndRemovingMultipleElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPollAfterAddingAndRemovingMultipleElements()", "original_string": "    @Test\n    public void testPollAfterAddingAndRemovingMultipleElements() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n        queue.add(\"6\");\n        queue.add(\"7\");\n        assertEquals(\"3\", queue.poll());\n        assertEquals(\"4\", queue.poll());\n        assertEquals(\"5\", queue.poll());\n        assertEquals(\"6\", queue.poll());\n        assertEquals(\"7\", queue.poll());\n        assertTrue(queue.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "class_name": "CircularFifoQueue_pollTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest.[void]testPollAfterClear()", "name": "testPollAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPollAfterClear()", "original_string": "    @Test\n    public void testPollAfterClear() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.clear();\n        assertNull(queue.poll());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "class_name": "CircularFifoQueue_pollTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java.CircularFifoQueue_pollTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java.SynchronizedQueue_removeTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove()", "original_string": "    @Test\n    public void testRemove() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        queue.offer(\"element1\");\n        SynchronizedQueue<String> synchronizedQueue = SynchronizedQueue.synchronizedQueue(queue);\n\n        // When\n        String removedElement = synchronizedQueue.remove();\n\n        // Then\n        assertEquals(\"element1\", removedElement);\n        assertTrue(synchronizedQueue.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java", "class_name": "SynchronizedQueue_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java.SynchronizedQueue_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testAddNull()", "name": "testAddNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddNull()", "original_string": "    @Test\n    public void testAddNull() {\n        final CircularFifoQueue<E> b = new CircularFifoQueue<>(2);\n        assertThrows(NullPointerException.class, () -> b.add(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testCircularFifoQueueCircular()", "name": "testCircularFifoQueueCircular", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCircularFifoQueueCircular()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCircularFifoQueueCircular() {\n        final List<E> list = new ArrayList<>();\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        final Queue<E> queue = new CircularFifoQueue<>(list);\n\n        assertTrue(queue.contains(\"A\"));\n        assertTrue(queue.contains(\"B\"));\n        assertTrue(queue.contains(\"C\"));\n\n        queue.add((E) \"D\");\n\n        assertFalse(queue.contains(\"A\"));\n        assertTrue(queue.contains(\"B\"));\n        assertTrue(queue.contains(\"C\"));\n        assertTrue(queue.contains(\"D\"));\n\n        assertEquals(\"B\", queue.peek());\n        assertEquals(\"B\", queue.remove());\n        assertEquals(\"C\", queue.remove());\n        assertEquals(\"D\", queue.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the removal operation actually removes the first element.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testCircularFifoQueueRemove()", "name": "testCircularFifoQueueRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCircularFifoQueueRemove()", "original_string": "    @Test\n    public void testCircularFifoQueueRemove() {\n        resetFull();\n        final int size = getConfirmed().size();\n        for (int i = 0; i < size; i++) {\n            final Object o1 = getCollection().remove();\n            final Object o2 = ((List<?>) getConfirmed()).remove(0);\n            assertEquals(o1, o2, \"Removed objects should be equal\");\n            verify();\n        }\n\n        assertThrows(NoSuchElementException.class, () -> getCollection().remove(),\n                \"Empty queue should raise Underflow.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the removal operation actually removes the first element.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testConstructorException1()", "name": "testConstructorException1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorException1()", "original_string": "    @Test\n    public void testConstructorException1() {\n        assertThrows(IllegalArgumentException.class, () -> new CircularFifoQueue<E>(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the constructor correctly throws an exception.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testConstructorException2()", "name": "testConstructorException2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorException2()", "original_string": "    @Test\n    public void testConstructorException2() {\n        assertThrows(IllegalArgumentException.class, () -> new CircularFifoQueue<E>(-20));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the constructor correctly throws an exception.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testConstructorException3()", "name": "testConstructorException3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorException3()", "original_string": "    @Test\n    public void testConstructorException3() {\n        assertThrows(NullPointerException.class, () -> new CircularFifoQueue<E>(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the constructor correctly throws an exception.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testDefaultSizeAndGetError1()", "name": "testDefaultSizeAndGetError1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultSizeAndGetError1()", "original_string": "    @Test\n    public void testDefaultSizeAndGetError1() {\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>();\n        assertEquals(32, fifo.maxSize());\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");\n        assertEquals(5, fifo.size());\n        assertThrows(NoSuchElementException.class, () -> fifo.get(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testDefaultSizeAndGetError2()", "name": "testDefaultSizeAndGetError2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultSizeAndGetError2()", "original_string": "    @Test\n    public void testDefaultSizeAndGetError2() {\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>();\n        assertEquals(32, fifo.maxSize());\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");\n        assertEquals(5, fifo.size());\n        assertThrows(NoSuchElementException.class, () -> fifo.get(-2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testGetIndex()", "name": "testGetIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIndex()", "original_string": "    @Test\n    public void testGetIndex() {\n        resetFull();\n\n        final CircularFifoQueue<E> queue = getCollection();\n        final List<E> confirmed = (List<E>) getConfirmed();\n        for (int i = 0; i < confirmed.size(); i++) {\n            assertEquals(confirmed.get(i), queue.get(i));\n        }\n\n        // remove the first two elements and check again\n        queue.remove();\n        queue.remove();\n\n        for (int i = 0; i < queue.size(); i++) {\n            assertEquals(confirmed.get(i + 2), queue.get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError1()", "name": "testRemoveError1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError1()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError1() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");\n\n        assertEquals(\"[1, 2, 3, 4, 5]\", fifo.toString());\n\n        fifo.remove(\"3\");\n        assertEquals(\"[1, 2, 4, 5]\", fifo.toString());\n\n        fifo.remove(\"4\");\n        assertEquals(\"[1, 2, 5]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError2()", "name": "testRemoveError2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError2() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");\n        fifo.add((E) \"6\");\n\n        assertEquals(5, fifo.size());\n        assertEquals(\"[2, 3, 4, 5, 6]\", fifo.toString());\n\n        fifo.remove(\"3\");\n        assertEquals(\"[2, 4, 5, 6]\", fifo.toString());\n\n        fifo.remove(\"4\");\n        assertEquals(\"[2, 5, 6]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError3()", "name": "testRemoveError3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError3()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError3() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");\n\n        assertEquals(\"[1, 2, 3, 4, 5]\", fifo.toString());\n\n        fifo.remove(\"3\");\n        assertEquals(\"[1, 2, 4, 5]\", fifo.toString());\n\n        fifo.add((E) \"6\");\n        fifo.add((E) \"7\");\n        assertEquals(\"[2, 4, 5, 6, 7]\", fifo.toString());\n\n        fifo.remove(\"4\");\n        assertEquals(\"[2, 5, 6, 7]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError4()", "name": "testRemoveError4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError4()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError4() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");  // end=0\n        fifo.add((E) \"6\");  // end=1\n        fifo.add((E) \"7\");  // end=2\n\n        assertEquals(\"[3, 4, 5, 6, 7]\", fifo.toString());\n\n        fifo.remove(\"4\");  // remove element in middle of array, after start\n        assertEquals(\"[3, 5, 6, 7]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError5()", "name": "testRemoveError5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError5()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError5() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");  // end=0\n        fifo.add((E) \"6\");  // end=1\n        fifo.add((E) \"7\");  // end=2\n\n        assertEquals(\"[3, 4, 5, 6, 7]\", fifo.toString());\n\n        fifo.remove(\"5\");  // remove element at last pos in array\n        assertEquals(\"[3, 4, 6, 7]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError6()", "name": "testRemoveError6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError6()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError6() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");  // end=0\n        fifo.add((E) \"6\");  // end=1\n        fifo.add((E) \"7\");  // end=2\n\n        assertEquals(\"[3, 4, 5, 6, 7]\", fifo.toString());\n\n        fifo.remove(\"6\");  // remove element at position zero in array\n        assertEquals(\"[3, 4, 5, 7]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError7()", "name": "testRemoveError7", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError7()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError7() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");  // end=0\n        fifo.add((E) \"6\");  // end=1\n        fifo.add((E) \"7\");  // end=2\n\n        assertEquals(\"[3, 4, 5, 6, 7]\", fifo.toString());\n\n        fifo.remove(\"7\");  // remove element at position one in array\n        assertEquals(\"[3, 4, 5, 6]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError8()", "name": "testRemoveError8", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError8()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError8() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");  // end=0\n        fifo.add((E) \"6\");  // end=1\n        fifo.add((E) \"7\");  // end=2\n        fifo.add((E) \"8\");  // end=3\n\n        assertEquals(\"[4, 5, 6, 7, 8]\", fifo.toString());\n\n        fifo.remove(\"7\");  // remove element at position one in array, need to shift 8\n        assertEquals(\"[4, 5, 6, 8]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRemoveError9()", "name": "testRemoveError9", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError9()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveError9() throws Exception {\n        // based on bug 33071\n        final CircularFifoQueue<E> fifo = new CircularFifoQueue<>(5);\n        fifo.add((E) \"1\");\n        fifo.add((E) \"2\");\n        fifo.add((E) \"3\");\n        fifo.add((E) \"4\");\n        fifo.add((E) \"5\");  // end=0\n        fifo.add((E) \"6\");  // end=1\n        fifo.add((E) \"7\");  // end=2\n        fifo.add((E) \"8\");  // end=3\n\n        assertEquals(\"[4, 5, 6, 7, 8]\", fifo.toString());\n\n        fifo.remove(\"8\");  // remove element at position two in array\n        assertEquals(\"[4, 5, 6, 7]\", fifo.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest.[void]testRepeatedSerialization()", "name": "testRepeatedSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRepeatedSerialization()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRepeatedSerialization() throws Exception {\n        // bug 31433\n        final CircularFifoQueue<E> b = new CircularFifoQueue<>(2);\n        b.add((E) \"a\");\n        assertEquals(1, b.size());\n        assertTrue(b.contains(\"a\"));\n\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        new ObjectOutputStream(bos).writeObject(b);\n\n        final CircularFifoQueue<E> b2 = (CircularFifoQueue<E>) new ObjectInputStream(\n            new ByteArrayInputStream(bos.toByteArray())).readObject();\n\n        assertEquals(1, b2.size());\n        assertTrue(b2.contains(\"a\"));\n        b2.add((E) \"b\");\n        assertEquals(2, b2.size());\n        assertTrue(b2.contains(\"a\"));\n        assertTrue(b2.contains(\"b\"));\n\n        bos = new ByteArrayOutputStream();\n        new ObjectOutputStream(bos).writeObject(b2);\n\n        final CircularFifoQueue<E> b3 = (CircularFifoQueue<E>) new ObjectInputStream(\n            new ByteArrayInputStream(bos.toByteArray())).readObject();\n\n        assertEquals(2, b3.size());\n        assertTrue(b3.contains(\"a\"));\n        assertTrue(b3.contains(\"b\"));\n        b3.add((E) \"c\");\n        assertEquals(2, b3.size());\n        assertTrue(b3.contains(\"b\"));\n        assertTrue(b3.contains(\"c\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java", "class_name": "CircularFifoQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueueTest.java.CircularFifoQueueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java.TransformedQueueTest.[void]testTransformedQueue()", "name": "testTransformedQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedQueue()", "original_string": "    @Test\n    public void testTransformedQueue() {\n        final Queue<Object> queue = TransformedQueue.transformingQueue(new LinkedList<>(),\n                TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, queue.size());\n        final Object[] elements = { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n        for (int i = 0; i < elements.length; i++) {\n            queue.add(elements[i]);\n            assertEquals(i + 1, queue.size());\n            assertTrue(queue.contains(Integer.valueOf((String) elements[i])));\n            assertFalse(queue.contains(elements[i]));\n        }\n\n        assertFalse(queue.remove(elements[0]));\n        assertTrue(queue.remove(Integer.valueOf((String) elements[0])));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java", "class_name": "TransformedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java.TransformedQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java.TransformedQueueTest.[void]testTransformedQueue_decorateTransform()", "name": "testTransformedQueue_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    public void testTransformedQueue_decorateTransform()", "original_string": "    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    public void testTransformedQueue_decorateTransform() {\n        final Queue originalQueue = new LinkedList();\n        final Object[] elements = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        Collections.addAll(originalQueue, elements);\n        final Queue<?> queue = TransformedQueue.transformedQueue(originalQueue,\n                TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(elements.length, queue.size());\n        for (final Object el : elements) {\n            assertTrue(queue.contains(Integer.valueOf((String) el)));\n            assertFalse(queue.contains(el));\n        }\n\n        assertFalse(queue.remove(elements[0]));\n        assertTrue(queue.remove(Integer.valueOf((String) elements[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java", "class_name": "TransformedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java.TransformedQueueTest", "attributes": {"modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"rawtypes\", \"unchecked\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest.[void]testTransformedQueueWithNonEmptyQueue()", "name": "testTransformedQueueWithNonEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedQueueWithNonEmptyQueue()", "original_string": "    @Test\n    public void testTransformedQueueWithNonEmptyQueue() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        queue.add(\"a\");\n        queue.add(\"b\");\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When\n        TransformedQueue<String> transformedQueue = TransformedQueue.transformedQueue(queue, transformer);\n\n        // Then\n        assertEquals(2, transformedQueue.size());\n        assertEquals(\"A\", transformedQueue.poll());\n        assertEquals(\"B\", transformedQueue.poll());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java", "class_name": "TransformedQueue_transformedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest.[void]testTransformedQueueWithEmptyQueue()", "name": "testTransformedQueueWithEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedQueueWithEmptyQueue()", "original_string": "    @Test\n    public void testTransformedQueueWithEmptyQueue() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When\n        TransformedQueue<String> transformedQueue = TransformedQueue.transformedQueue(queue, transformer);\n\n        // Then\n        assertEquals(0, transformedQueue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java", "class_name": "TransformedQueue_transformedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest.[void]testTransformedQueueWithNullQueue()", "name": "testTransformedQueueWithNullQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedQueueWithNullQueue()", "original_string": "    @Test\n    public void testTransformedQueueWithNullQueue() {\n        // Given\n        Queue<String> queue = null;\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> TransformedQueue.transformedQueue(queue, transformer));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java", "class_name": "TransformedQueue_transformedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest.[void]testTransformedQueueWithNullTransformer()", "name": "testTransformedQueueWithNullTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedQueueWithNullTransformer()", "original_string": "    @Test\n    public void testTransformedQueueWithNullTransformer() {\n        // Given\n        Queue<String> queue = new LinkedList<>();\n        queue.add(\"a\");\n        Transformer<String, String> transformer = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> TransformedQueue.transformedQueue(queue, transformer));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java", "class_name": "TransformedQueue_transformedQueueTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java.TransformedQueue_transformedQueueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java.CircularFifoQueue_clearTest.[void]testClearWithElements()", "name": "testClearWithElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearWithElements()", "original_string": "    @Test\n    public void testClearWithElements() {\n        // Given\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        assertFalse(queue.isEmpty());\n\n        // When\n        queue.clear();\n\n        // Then\n        assertTrue(queue.isEmpty());\n        assertEquals(0, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "class_name": "CircularFifoQueue_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java.CircularFifoQueue_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java.CircularFifoQueue_clearTest.[void]testClearEmptyQueue()", "name": "testClearEmptyQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearEmptyQueue()", "original_string": "    @Test\n    public void testClearEmptyQueue() {\n        // Given\n        assertTrue(queue.isEmpty());\n\n        // When\n        queue.clear();\n\n        // Then\n        assertTrue(queue.isEmpty());\n        assertEquals(0, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "class_name": "CircularFifoQueue_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java.CircularFifoQueue_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java.CircularFifoQueue_clearTest.[void]testClearFullQueue()", "name": "testClearFullQueue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearFullQueue()", "original_string": "    @Test\n    public void testClearFullQueue() {\n        // Given\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n        assertTrue(queue.isAtFullCapacity());\n\n        // When\n        queue.clear();\n\n        // Then\n        assertTrue(queue.isEmpty());\n        assertEquals(0, queue.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "class_name": "CircularFifoQueue_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java.CircularFifoQueue_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest.[void]testElementWhenQueueIsEmpty()", "name": "testElementWhenQueueIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementWhenQueueIsEmpty()", "original_string": "    @Test\n    public void testElementWhenQueueIsEmpty() {\n        assertThrows(NoSuchElementException.class, () -> queue.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "class_name": "CircularFifoQueue_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest.[void]testElementWhenQueueHasOneElement()", "name": "testElementWhenQueueHasOneElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementWhenQueueHasOneElement()", "original_string": "    @Test\n    public void testElementWhenQueueHasOneElement() {\n        queue.add(\"1\");\n        assertEquals(\"1\", queue.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "class_name": "CircularFifoQueue_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest.[void]testElementWhenQueueIsFull()", "name": "testElementWhenQueueIsFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementWhenQueueIsFull()", "original_string": "    @Test\n    public void testElementWhenQueueIsFull() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n        assertEquals(\"1\", queue.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "class_name": "CircularFifoQueue_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest.[void]testElementAfterRemovingElement()", "name": "testElementAfterRemovingElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementAfterRemovingElement()", "original_string": "    @Test\n    public void testElementAfterRemovingElement() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.remove();\n        assertEquals(\"2\", queue.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "class_name": "CircularFifoQueue_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest.[void]testElementAfterAddingAndRemovingElements()", "name": "testElementAfterAddingAndRemovingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementAfterAddingAndRemovingElements()", "original_string": "    @Test\n    public void testElementAfterAddingAndRemovingElements() {\n        queue.add(\"1\");\n        queue.add(\"2\");\n        queue.add(\"3\");\n        queue.add(\"4\");\n        queue.add(\"5\");\n        queue.remove();\n        queue.remove();\n        queue.add(\"6\");\n        queue.add(\"7\");\n        assertEquals(\"3\", queue.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "class_name": "CircularFifoQueue_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java.CircularFifoQueue_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java.SynchronizedQueue_offerTest.[void]testOffer()", "name": "testOffer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOffer()", "original_string": "    @Test\n    public void testOffer() {\n        // Given\n        Queue<String> mockQueue = mock(Queue.class);\n        SynchronizedQueue<String> synchronizedQueue = SynchronizedQueue.synchronizedQueue(mockQueue);\n        String element = \"testElement\";\n\n        // When\n        when(mockQueue.offer(element)).thenReturn(true);\n        boolean result = synchronizedQueue.offer(element);\n\n        // Then\n        assertTrue(result);\n        verify(mockQueue, times(1)).offer(element);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java", "class_name": "SynchronizedQueue_offerTest", "class_uri": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java.SynchronizedQueue_offerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java.CollectionBag_retainAllTest.[void]testRetainAll_NonEmptyCollection()", "name": "testRetainAll_NonEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAll_NonEmptyCollection()", "original_string": "    @Test\n    public void testRetainAll_NonEmptyCollection() {\n        // Given\n        Collection<String> coll = Arrays.asList(\"A\", \"B\");\n        Iterator<String> iterator = mock(Iterator.class);\n        when(decoratedBag.iterator()).thenReturn(iterator);\n        when(iterator.hasNext()).thenReturn(true, true, false);\n        when(iterator.next()).thenReturn(\"A\", \"C\");\n        when(decoratedBag.contains(\"A\")).thenReturn(true);\n        when(decoratedBag.contains(\"C\")).thenReturn(false);\n\n        // When\n        boolean result = bag.retainAll(coll);\n\n        // Then\n        assertTrue(result);\n        verify(iterator).remove();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java", "class_name": "CollectionBag_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java.CollectionBag_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java.CollectionBag_retainAllTest.[void]testRetainAll_NullCollection()", "name": "testRetainAll_NullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAll_NullCollection()", "original_string": "    @Test\n    public void testRetainAll_NullCollection() {\n        // When\n        boolean result = bag.retainAll(null);\n\n        // Then\n        assertFalse(result);\n        verify(decoratedBag).retainAll(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java", "class_name": "CollectionBag_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java.CollectionBag_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java.CollectionBag_removeAllTest.[void]testRemoveAll_WithNonNullCollection()", "name": "testRemoveAll_WithNonNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAll_WithNonNullCollection()", "original_string": "    @Test\n    public void testRemoveAll_WithNonNullCollection() {\n        Collection<String> coll = Arrays.asList(\"A\", \"B\", \"C\");\n        when(decoratedBag.remove(\"A\", 1)).thenReturn(true);\n        when(decoratedBag.remove(\"B\", 1)).thenReturn(false);\n        when(decoratedBag.remove(\"C\", 1)).thenReturn(true);\n        when(decoratedBag.getCount(\"A\")).thenReturn(1);\n        when(decoratedBag.getCount(\"B\")).thenReturn(1);\n        when(decoratedBag.getCount(\"C\")).thenReturn(1);\n\n        boolean result = bag.removeAll(coll);\n\n        assertTrue(result);\n        verify(decoratedBag, times(1)).remove(\"A\", 1);\n        verify(decoratedBag, times(1)).remove(\"B\", 1);\n        verify(decoratedBag, times(1)).remove(\"C\", 1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java", "class_name": "CollectionBag_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java.CollectionBag_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java.CollectionBag_removeAllTest.[void]testRemoveAll_WithNullCollection()", "name": "testRemoveAll_WithNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAll_WithNullCollection()", "original_string": "    @Test\n    public void testRemoveAll_WithNullCollection() {\n        when(decoratedBag.removeAll(null)).thenReturn(true);\n\n        boolean result = bag.removeAll(null);\n\n        assertTrue(result);\n        verify(decoratedBag, times(1)).removeAll(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java", "class_name": "CollectionBag_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java.CollectionBag_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java.CollectionBagTest.[void]testEmptyBagCompatibility()", "name": "testEmptyBagCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyBagCompatibility()", "original_string": "    @Test\n    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final Bag<T> bag = makeObject();\n        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n            assertTrue(bag2.isEmpty(), \"Bag is empty\");\n            assertEquals(bag, bag2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java", "class_name": "CollectionBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java.CollectionBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompares the current serialized form of the Bag\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java.CollectionBagTest.[void]testFullBagCompatibility()", "name": "testFullBagCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullBagCompatibility()", "original_string": "    @Test\n    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final Bag<T> bag = (Bag<T>) makeFullCollection();\n        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n            assertEquals(bag.size(), bag2.size(), \"Bag is the right size\");\n            assertEquals(bag, bag2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java", "class_name": "CollectionBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java.CollectionBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompares the current serialized form of the Bag\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java.UnmodifiableSortedBagTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final SortedBag<E> queue = makeFullCollection();\n        assertSame(queue, UnmodifiableSortedBag.unmodifiableSortedBag(queue));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableSortedBag.unmodifiableSortedBag(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java", "class_name": "UnmodifiableSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java.UnmodifiableSortedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java.UnmodifiableSortedBagTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullCollection() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java", "class_name": "UnmodifiableSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableSortedBagTest.java.UnmodifiableSortedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java.PredicatedBagTest.[void]testIllegalAdd()", "name": "testIllegalAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd() {\n        final Bag<T> bag = makeTestBag();\n        final Integer i = 3;\n\n        assertThrows(IllegalArgumentException.class, () -> bag.add((T) i));\n\n        assertFalse(bag.contains(i), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java", "class_name": "PredicatedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java.PredicatedBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java.PredicatedBagTest.[void]testIllegalDecorate()", "name": "testIllegalDecorate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalDecorate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalDecorate() {\n        final HashBag<Object> elements = new HashBag<>();\n        elements.add(\"one\");\n        elements.add(\"two\");\n        elements.add(3);\n        elements.add(\"four\");\n\n        assertThrows(IllegalArgumentException.class, () -> decorateBag((HashBag<T>) elements, stringPredicate()));\n\n        assertThrows(NullPointerException.class, () -> decorateBag(new HashBag<>(), null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java", "class_name": "PredicatedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java.PredicatedBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java.PredicatedBagTest.[void]testLegalAddRemove()", "name": "testLegalAddRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLegalAddRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLegalAddRemove() {\n        final Bag<T> bag = makeTestBag();\n        assertEquals(0, bag.size());\n        final T[] els = (T[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\" };\n        for (int i = 0; i < els.length; i++) {\n            bag.add(els[i]);\n            assertEquals(i + 1, bag.size());\n            assertTrue(bag.contains(els[i]));\n        }\n        Set<T> set = bag.uniqueSet();\n        assertTrue(set.contains(els[0]), \"Unique set contains the first element\");\n        assertTrue(bag.remove(els[0]));\n        set = bag.uniqueSet();\n        assertFalse(set.contains(els[0]), \"Unique set now does not contain the first element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java", "class_name": "PredicatedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java.PredicatedBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_uniqueSetTest.java.TransformedBag_uniqueSetTest.[void]testUniqueSet()", "name": "testUniqueSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniqueSet()", "original_string": "    @Test\n    public void testUniqueSet() {\n        // Given\n        Bag<String> mockBag = Mockito.mock(Bag.class);\n        Transformer<String, String> mockTransformer = Mockito.mock(Transformer.class);\n        Set<String> mockUniqueSet = new HashSet<>();\n        mockUniqueSet.add(\"element\");\n\n        when(mockBag.uniqueSet()).thenReturn(mockUniqueSet);\n\n        TransformedBag<String> transformedBag = new TransformedBag<>(mockBag, mockTransformer);\n\n        // When\n        Set<String> resultSet = transformedBag.uniqueSet();\n\n        // Then\n        assertEquals(TransformedSet.class, resultSet.getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_uniqueSetTest.java", "class_name": "TransformedBag_uniqueSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_uniqueSetTest.java.TransformedBag_uniqueSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java.CollectionBag_addAllTest.[void]testAddAll()", "name": "testAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAll()", "original_string": "    @Test\n    public void testAddAll() {\n        // Given\n        Bag<String> bag = new CollectionBag<>(new HashBag<>());\n        Collection<String> coll = Arrays.asList(\"A\", \"B\", \"C\");\n\n        // When\n        boolean changed = bag.addAll(coll);\n\n        // Then\n        assertTrue(changed);\n        assertTrue(bag.containsAll(coll));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java", "class_name": "CollectionBag_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java.CollectionBag_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBag_uniqueSetTest.java.UnmodifiableBag_uniqueSetTest.[void]testUniqueSet()", "name": "testUniqueSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniqueSet()", "original_string": "    @Test\n    public void testUniqueSet() {\n        // Given\n        Bag<String> bag = new HashBag<>();\n        bag.add(\"apple\");\n        bag.add(\"banana\");\n        bag.add(\"apple\");\n\n        Bag<String> unmodifiableBag = UnmodifiableBag.unmodifiableBag(bag);\n\n        // When\n        Set<String> uniqueSet = unmodifiableBag.uniqueSet();\n\n        // Then\n        assertTrue(uniqueSet instanceof UnmodifiableSet);\n        assertTrue(uniqueSet.contains(\"apple\"));\n        assertTrue(uniqueSet.contains(\"banana\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBag_uniqueSetTest.java", "class_name": "UnmodifiableBag_uniqueSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBag_uniqueSetTest.java.UnmodifiableBag_uniqueSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java.UnmodifiableBagTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final Bag<E> queue = makeFullCollection();\n        assertSame(queue, UnmodifiableBag.unmodifiableBag(queue));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableBag.unmodifiableBag(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java", "class_name": "UnmodifiableBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java.UnmodifiableBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java.UnmodifiableBagTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullCollection() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java", "class_name": "UnmodifiableBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBagTest.java.UnmodifiableBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java.PredicatedSortedBagTest.[void]testDecorate()", "name": "testDecorate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorate()", "original_string": "    @Test\n    public void testDecorate() {\n        final SortedBag<T> bag = decorateBag(new TreeBag<>(), stringPredicate());\n        ((PredicatedSortedBag<T>) bag).decorated();\n\n        assertThrows(NullPointerException.class, () -> decorateBag(new TreeBag<>(), null));\n\n        assertThrows(NullPointerException.class, () -> decorateBag(nullBag, stringPredicate()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java", "class_name": "PredicatedSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java.PredicatedSortedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java.PredicatedSortedBagTest.[void]testSortOrder()", "name": "testSortOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSortOrder()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSortOrder() {\n        final SortedBag<T> bag = decorateBag(new TreeBag<>(), stringPredicate());\n        final String one = \"one\";\n        final String two = \"two\";\n        final String three = \"three\";\n        bag.add((T) one);\n        bag.add((T) two);\n        bag.add((T) three);\n        assertEquals(bag.first(), one, \"first element\");\n        assertEquals(bag.last(), two, \"last element\");\n        final Comparator<? super T> c = bag.comparator();\n        assertNull(c, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java", "class_name": "PredicatedSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java.PredicatedSortedBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagAdd()", "name": "testBagAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagAdd() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        assertTrue(bag.contains(\"A\"), \"Should contain 'A'\");\n        assertEquals(1, bag.getCount(\"A\"), \"Should have count of 1\");\n        bag.add((T) \"A\");\n        assertTrue(bag.contains(\"A\"), \"Should contain 'A'\");\n        assertEquals(2, bag.getCount(\"A\"), \"Should have count of 2\");\n        bag.add((T) \"B\");\n        assertTrue(bag.contains(\"A\"));\n        assertTrue(bag.contains(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagContains()", "name": "testBagContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagContains()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagContains() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n\n        assertFalse(bag.contains(\"A\"), \"Bag does not have at least 1 'A'\");\n        assertFalse(bag.contains(\"B\"), \"Bag does not have at least 1 'B'\");\n\n        bag.add((T) \"A\");  // bag 1A\n        assertTrue(bag.contains(\"A\"), \"Bag has at least 1 'A'\");\n        assertFalse(bag.contains(\"B\"), \"Bag does not have at least 1 'B'\");\n\n        bag.add((T) \"A\");  // bag 2A\n        assertTrue(bag.contains(\"A\"), \"Bag has at least 1 'A'\");\n        assertFalse(bag.contains(\"B\"), \"Bag does not have at least 1 'B'\");\n\n        bag.add((T) \"B\");  // bag 2A,1B\n        assertTrue(bag.contains(\"A\"), \"Bag has at least 1 'A'\");\n        assertTrue(bag.contains(\"B\"), \"Bag has at least 1 'B'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagContainsAll()", "name": "testBagContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagContainsAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagContainsAll() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        final List<String> known = new ArrayList<>();\n        final List<String> known1A = new ArrayList<>();\n        known1A.add(\"A\");\n        final List<String> known2A = new ArrayList<>();\n        known2A.add(\"A\");\n        known2A.add(\"A\");\n        final List<String> known1B = new ArrayList<>();\n        known1B.add(\"B\");\n        final List<String> known1A1B = new ArrayList<>();\n        known1A1B.add(\"A\");\n        known1A1B.add(\"B\");\n\n        assertTrue(bag.containsAll(known), \"Bag containsAll of empty\");\n        assertFalse(bag.containsAll(known1A), \"Bag does not containsAll of 1 'A'\");\n        assertFalse(bag.containsAll(known2A), \"Bag does not containsAll of 2 'A'\");\n        assertFalse(bag.containsAll(known1B), \"Bag does not containsAll of 1 'B'\");\n        assertFalse(bag.containsAll(known1A1B), \"Bag does not containsAll of 1 'A' 1 'B'\");\n\n        bag.add((T) \"A\");  // bag 1A\n        assertTrue(bag.containsAll(known), \"Bag containsAll of empty\");\n        assertTrue(bag.containsAll(known1A), \"Bag containsAll of 1 'A'\");\n        assertFalse(bag.containsAll(known2A), \"Bag does not containsAll of 2 'A'\");\n        assertFalse(bag.containsAll(known1B), \"Bag does not containsAll of 1 'B'\");\n        assertFalse(bag.containsAll(known1A1B), \"Bag does not containsAll of 1 'A' 1 'B'\");\n\n        bag.add((T) \"A\");  // bag 2A\n        assertTrue(bag.containsAll(known), \"Bag containsAll of empty\");\n        assertTrue(bag.containsAll(known1A), \"Bag containsAll of 1 'A'\");\n        assertTrue(bag.containsAll(known2A), \"Bag containsAll of 2 'A'\");\n        assertFalse(bag.containsAll(known1B), \"Bag does not containsAll of 1 'B'\");\n        assertFalse(bag.containsAll(known1A1B), \"Bag does not containsAll of 1 'A' 1 'B'\");\n\n        bag.add((T) \"A\");  // bag 3A\n        assertTrue(bag.containsAll(known), \"Bag containsAll of empty\");\n        assertTrue(bag.containsAll(known1A), \"Bag containsAll of 1 'A'\");\n        assertTrue(bag.containsAll(known2A), \"Bag containsAll of 2 'A'\");\n        assertFalse(bag.containsAll(known1B), \"Bag does not containsAll of 1 'B'\");\n        assertFalse(bag.containsAll(known1A1B), \"Bag does not containsAll of 1 'A' 1 'B'\");\n\n        bag.add((T) \"B\");  // bag 3A1B\n        assertTrue(bag.containsAll(known), \"Bag containsAll of empty\");\n        assertTrue(bag.containsAll(known1A), \"Bag containsAll of 1 'A'\");\n        assertTrue(bag.containsAll(known2A), \"Bag containsAll of 2 'A'\");\n        assertTrue(bag.containsAll(known1B), \"Bag containsAll of 1 'B'\");\n        assertTrue(bag.containsAll(known1A1B), \"Bag containsAll of 1 'A' 1 'B'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagEquals()", "name": "testBagEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagEquals()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagEquals() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        final Bag<T> bag2 = makeObject();\n        assertEquals(bag, bag2);\n        bag.add((T) \"A\");\n        assertNotEquals(bag, bag2);\n        bag2.add((T) \"A\");\n        assertEquals(bag, bag2);\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        bag.add((T) \"B\");\n        bag.add((T) \"C\");\n        bag2.add((T) \"A\");\n        bag2.add((T) \"B\");\n        bag2.add((T) \"B\");\n        bag2.add((T) \"C\");\n        assertEquals(bag, bag2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagEqualsHashBag()", "name": "testBagEqualsHashBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagEqualsHashBag()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagEqualsHashBag() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        final Bag<T> bag2 = new HashBag<>();\n        assertEquals(bag, bag2);\n        bag.add((T) \"A\");\n        assertNotEquals(bag, bag2);\n        bag2.add((T) \"A\");\n        assertEquals(bag, bag2);\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        bag.add((T) \"B\");\n        bag.add((T) \"C\");\n        bag2.add((T) \"A\");\n        bag2.add((T) \"B\");\n        bag2.add((T) \"B\");\n        bag2.add((T) \"C\");\n        assertEquals(bag, bag2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagEqualsSelf()", "name": "testBagEqualsSelf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagEqualsSelf()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagEqualsSelf() {\n        final Bag<T> bag = makeObject();\n        assertEquals(bag, bag);\n\n        if (!isAddSupported()) {\n            return;\n        }\n\n        bag.add((T) \"elt\");\n        assertEquals(bag, bag);\n        bag.add((T) \"elt\"); // again\n        assertEquals(bag, bag);\n        bag.add((T) \"elt2\");\n        assertEquals(bag, bag);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagHashCode()", "name": "testBagHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagHashCode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagHashCode() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        final Bag<T> bag2 = makeObject();\n        assertEquals(0, bag.hashCode());\n        assertEquals(0, bag2.hashCode());\n        assertEquals(bag.hashCode(), bag2.hashCode());\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        bag.add((T) \"B\");\n        bag.add((T) \"C\");\n        bag2.add((T) \"A\");\n        bag2.add((T) \"A\");\n        bag2.add((T) \"B\");\n        bag2.add((T) \"B\");\n        bag2.add((T) \"C\");\n        assertEquals(bag.hashCode(), bag2.hashCode());\n\n        int total = 0;\n        total += \"A\".hashCode() ^ 2;\n        total += \"B\".hashCode() ^ 2;\n        total += \"C\".hashCode() ^ 1;\n        assertEquals(total, bag.hashCode());\n        assertEquals(total, bag2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagIterator()", "name": "testBagIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIterator() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        assertEquals(3, bag.size(), \"Bag should have 3 items\");\n        final Iterator<T> i = bag.iterator();\n\n        boolean foundA = false;\n        while (i.hasNext()) {\n            final String element = (String) i.next();\n            // ignore the first A, remove the second via Iterator.remove()\n            if (element.equals(\"A\")) {\n                if (!foundA) {\n                    foundA = true;\n                } else {\n                    i.remove();\n                }\n            }\n        }\n\n        assertTrue(bag.contains(\"A\"), \"Bag should still contain 'A'\");\n        assertEquals(2, bag.size(), \"Bag should have 2 items\");\n        assertEquals(1, bag.getCount(\"A\"), \"Bag should have 1 'A'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagIteratorFail()", "name": "testBagIteratorFail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorFail()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorFail() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        final Iterator<T> it = bag.iterator();\n        it.next();\n        bag.remove(\"A\");\n\n        assertThrows(ConcurrentModificationException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagIteratorFailDoubleRemove()", "name": "testBagIteratorFailDoubleRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorFailDoubleRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorFailDoubleRemove() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        final Iterator<T> it = bag.iterator();\n        it.next();\n        it.next();\n        assertEquals(3, bag.size());\n        it.remove();\n        assertEquals(2, bag.size());\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n\n        assertEquals(2, bag.size());\n        it.next();\n        it.remove();\n        assertEquals(1, bag.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagIteratorFailNoMore()", "name": "testBagIteratorFailNoMore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorFailNoMore()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorFailNoMore() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        final Iterator<T> it = bag.iterator();\n        it.next();\n        it.next();\n        it.next();\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagIteratorRemoveProtectsInvariants()", "name": "testBagIteratorRemoveProtectsInvariants", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorRemoveProtectsInvariants()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagIteratorRemoveProtectsInvariants() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        assertEquals(2, bag.size());\n        final Iterator<T> it = bag.iterator();\n        assertEquals(\"A\", it.next());\n        assertTrue(it.hasNext());\n        it.remove();\n        assertEquals(1, bag.size());\n        assertTrue(it.hasNext());\n        assertEquals(\"A\", it.next());\n        assertFalse(it.hasNext());\n        it.remove();\n        assertEquals(0, bag.size());\n        assertFalse(it.hasNext());\n\n        final Iterator<T> it2 = bag.iterator();\n        assertFalse(it2.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagRemove()", "name": "testBagRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagRemove() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        assertEquals(1, bag.getCount(\"A\"), \"Should have count of 1\");\n        bag.remove(\"A\");\n        assertEquals(0, bag.getCount(\"A\"), \"Should have count of 0\");\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        assertEquals(4, bag.getCount(\"A\"), \"Should have count of 4\");\n        bag.remove(\"A\", 0);\n        assertEquals(4, bag.getCount(\"A\"), \"Should have count of 4\");\n        bag.remove(\"A\", 2);\n        assertEquals(2, bag.getCount(\"A\"), \"Should have count of 2\");\n        bag.remove(\"A\");\n        assertEquals(0, bag.getCount(\"A\"), \"Should have count of 0\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagRemoveAll()", "name": "testBagRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagRemoveAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagRemoveAll() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\", 2);\n        assertEquals(2, bag.getCount(\"A\"), \"Should have count of 2\");\n        bag.add((T) \"B\");\n        bag.add((T) \"C\");\n        assertEquals(4, bag.size(), \"Should have count of 4\");\n        final List<String> delete = new ArrayList<>();\n        delete.add(\"A\");\n        delete.add(\"B\");\n        bag.removeAll(delete);\n        assertEquals(1, bag.getCount(\"A\"), \"Should have count of 1\");\n        assertEquals(0, bag.getCount(\"B\"), \"Should have count of 0\");\n        assertEquals(1, bag.getCount(\"C\"), \"Should have count of 1\");\n        assertEquals(2, bag.size(), \"Should have count of 2\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagRetainAll()", "name": "testBagRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagRetainAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagRetainAll() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        bag.add((T) \"B\");\n        bag.add((T) \"C\");\n        final List<String> retains = new ArrayList<>();\n        retains.add(\"B\");\n        retains.add(\"C\");\n        bag.retainAll(retains);\n        assertEquals(2, bag.size(), \"Should have 2 total items\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagSize()", "name": "testBagSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagSize()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagSize() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        assertEquals(0, bag.size(), \"Should have 0 total items\");\n        bag.add((T) \"A\");\n        assertEquals(1, bag.size(), \"Should have 1 total items\");\n        bag.add((T) \"A\");\n        assertEquals(2, bag.size(), \"Should have 2 total items\");\n        bag.add((T) \"A\");\n        assertEquals(3, bag.size(), \"Should have 3 total items\");\n        bag.add((T) \"B\");\n        assertEquals(4, bag.size(), \"Should have 4 total items\");\n        bag.add((T) \"B\");\n        assertEquals(5, bag.size(), \"Should have 5 total items\");\n        bag.remove(\"A\", 2);\n        assertEquals(1, bag.getCount(\"A\"), \"Should have 1 'A'\");\n        assertEquals(3, bag.size(), \"Should have 3 total items\");\n        bag.remove(\"B\");\n        assertEquals(1, bag.size(), \"Should have 1 total item\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagToArray()", "name": "testBagToArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagToArray()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagToArray() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        bag.add((T) \"B\");\n        bag.add((T) \"C\");\n        final Object[] array = bag.toArray();\n        int a = 0, b = 0, c = 0;\n        for (final Object element : array) {\n            a += element.equals(\"A\") ? 1 : 0;\n            b += element.equals(\"B\") ? 1 : 0;\n            c += element.equals(\"C\") ? 1 : 0;\n        }\n        assertEquals(2, a);\n        assertEquals(2, b);\n        assertEquals(1, c);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testBagToArrayPopulate()", "name": "testBagToArrayPopulate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagToArrayPopulate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBagToArrayPopulate() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final Bag<T> bag = makeObject();\n        bag.add((T) \"A\");\n        bag.add((T) \"A\");\n        bag.add((T) \"B\");\n        bag.add((T) \"B\");\n        bag.add((T) \"C\");\n        final String[] array = bag.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n        int a = 0, b = 0, c = 0;\n        for (final String element : array) {\n            a += element.equals(\"A\") ? 1 : 0;\n            b += element.equals(\"B\") ? 1 : 0;\n            c += element.equals(\"C\") ? 1 : 0;\n        }\n        assertEquals(2, a);\n        assertEquals(2, b);\n        assertEquals(1, c);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testEmptyBagCompatibility()", "name": "testEmptyBagCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyBagCompatibility()", "original_string": "    @Test\n    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final Bag<T> bag = makeObject();\n        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n            assertTrue(bag2.isEmpty(), \"Bag is empty\");\n            assertEquals(bag, bag2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Bag\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest.[void]testFullBagCompatibility()", "name": "testFullBagCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullBagCompatibility()", "original_string": "    @Test\n    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final Bag<T> bag = makeFullCollection();\n        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n            assertEquals(bag.size(), bag2.size(), \"Bag is the right size\");\n            assertEquals(bag, bag2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java", "class_name": "AbstractBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/AbstractBagTest.java.AbstractBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Bag\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java.TreeBagTest.[void]testCollections265()", "name": "testCollections265", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollections265()", "original_string": "    @Test\n    public void testCollections265() {\n        final Bag<Object> bag = new TreeBag<>();\n\n        assertThrows(IllegalArgumentException.class, () -> bag.add(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java", "class_name": "TreeBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java.TreeBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java.TreeBagTest.[void]testCollections555()", "name": "testCollections555", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollections555()", "original_string": "    @Test\n    public void testCollections555() {\n        final Bag<Object> bag = new TreeBag<>();\n\n        assertThrows(NullPointerException.class, () -> bag.add(null));\n\n        final Bag<String> bag2 = new TreeBag<>(String::compareTo);\n        // jdk bug: adding null to an empty TreeMap works\n        // thus ensure that the bag is not empty before adding null\n        bag2.add(\"a\");\n\n        assertThrows(NullPointerException.class, () -> bag2.add(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java", "class_name": "TreeBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java.TreeBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java.TreeBagTest.[void]testOrdering()", "name": "testOrdering", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrdering()", "original_string": "    @Test\n    public void testOrdering() {\n        final Bag<T> bag = setupBag();\n        assertEquals(\"A\", bag.toArray()[0], \"Should get elements in correct order\");\n        assertEquals(\"B\", bag.toArray()[1], \"Should get elements in correct order\");\n        assertEquals(\"C\", bag.toArray()[2], \"Should get elements in correct order\");\n        assertEquals(\"A\", ((SortedBag<T>) bag).first(), \"Should get first key\");\n        assertEquals(\"D\", ((SortedBag<T>) bag).last(), \"Should get last key\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java", "class_name": "TreeBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java.TreeBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java.TransformedBag_transformedBagTest.[void]testTransformedBagWithNonEmptyBag()", "name": "testTransformedBagWithNonEmptyBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedBagWithNonEmptyBag()", "original_string": "    @Test\n    public void testTransformedBagWithNonEmptyBag() {\n        // Given\n        Bag<String> mockBag = mock(Bag.class);\n        Transformer<String, String> mockTransformer = mock(Transformer.class);\n        when(mockBag.isEmpty()).thenReturn(false);\n        when(mockBag.toArray()).thenReturn(new String[]{\"a\", \"b\"});\n        when(mockTransformer.apply(\"a\")).thenReturn(\"A\");\n        when(mockTransformer.apply(\"b\")).thenReturn(\"B\");\n\n        // When\n        Bag<String> resultBag = TransformedBag.transformedBag(mockBag, mockTransformer);\n\n        // Then\n        verify(mockBag).clear();\n        verify(mockBag).add(\"A\");\n        verify(mockBag).add(\"B\");\n        assertNotNull(resultBag);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java", "class_name": "TransformedBag_transformedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java.TransformedBag_transformedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java.TransformedBag_transformedBagTest.[void]testTransformedBagWithEmptyBag()", "name": "testTransformedBagWithEmptyBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedBagWithEmptyBag()", "original_string": "    @Test\n    public void testTransformedBagWithEmptyBag() {\n        // Given\n        Bag<String> mockBag = mock(Bag.class);\n        Transformer<String, String> mockTransformer = mock(Transformer.class);\n        when(mockBag.isEmpty()).thenReturn(true);\n\n        // When\n        Bag<String> resultBag = TransformedBag.transformedBag(mockBag, mockTransformer);\n\n        // Then\n        verify(mockBag, never()).clear();\n        verify(mockBag, never()).add(anyString());\n        assertNotNull(resultBag);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java", "class_name": "TransformedBag_transformedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java.TransformedBag_transformedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java.CollectionBag_addTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAdd()", "original_string": "    @Test\n    void testAdd() {\n        String object = \"testObject\";\n        int count = 5;\n\n        boolean result = collectionBag.add(object, count);\n\n        verify(mockBag).add(object, count);\n        assertTrue(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java", "class_name": "CollectionBag_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java.CollectionBag_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java.CollectionSortedBag_addAllTest.[void]testAddAll_WithNonEmptyCollection()", "name": "testAddAll_WithNonEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAll_WithNonEmptyCollection()", "original_string": "    @Test\n    public void testAddAll_WithNonEmptyCollection() {\n        // Given\n        SortedBag<String> mockBag = mock(SortedBag.class);\n        CollectionSortedBag<String> bag = new CollectionSortedBag<>(mockBag);\n        when(mockBag.add(anyString(), eq(1))).thenReturn(true);\n\n        // When\n        boolean result = bag.addAll(Arrays.asList(\"a\", \"b\", \"c\"));\n\n        // Then\n        assertTrue(result);\n        verify(mockBag, times(3)).add(anyString(), eq(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java", "class_name": "CollectionSortedBag_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java.CollectionSortedBag_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java.CollectionSortedBag_addAllTest.[void]testAddAll_WithEmptyCollection()", "name": "testAddAll_WithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAll_WithEmptyCollection()", "original_string": "    @Test\n    public void testAddAll_WithEmptyCollection() {\n        // Given\n        SortedBag<String> mockBag = mock(SortedBag.class);\n        CollectionSortedBag<String> bag = new CollectionSortedBag<>(mockBag);\n\n        // When\n        boolean result = bag.addAll(Collections.emptyList());\n\n        // Then\n        assertFalse(result);\n        verify(mockBag, never()).add(anyString(), anyInt());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java", "class_name": "CollectionSortedBag_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java.CollectionSortedBag_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java.TransformedSortedBagTest.[void]testTransformedBag()", "name": "testTransformedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedBag()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedBag() {\n        final SortedBag<T> bag = TransformedSortedBag.transformingSortedBag(new TreeBag<>(), (Transformer<T, T>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, bag.size());\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        for (int i = 0; i < els.length; i++) {\n            bag.add((T) els[i]);\n            assertEquals(i + 1, bag.size());\n            assertTrue(bag.contains(Integer.valueOf((String) els[i])));\n        }\n\n        assertTrue(bag.remove(Integer.valueOf((String) els[0])));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java", "class_name": "TransformedSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java.TransformedSortedBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java.TransformedSortedBagTest.[void]testTransformedBag_decorateTransform()", "name": "testTransformedBag_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedBag_decorateTransform()", "original_string": "    @Test\n    public void testTransformedBag_decorateTransform() {\n        final TreeBag<T> originalBag = new TreeBag<>();\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        for (final Object el : els) {\n            originalBag.add((T) el);\n        }\n        final SortedBag<T> bag = TransformedSortedBag.transformedSortedBag(originalBag, (Transformer<T, T>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(els.length, bag.size());\n        for (final Object el : els) {\n            assertTrue(bag.contains(Integer.valueOf((String) el)));\n        }\n\n        assertTrue(bag.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java", "class_name": "TransformedSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java.TransformedSortedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java.TransformedBagTest.[void]testTransformedBag()", "name": "testTransformedBag", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedBag()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedBag() {\n        //T had better be Object!\n        final Bag<T> bag = TransformedBag.transformingBag(new HashBag<>(),\n                (Transformer<T, T>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertTrue(bag.isEmpty());\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        for (int i = 0; i < els.length; i++) {\n            bag.add((T) els[i]);\n            assertEquals(i + 1, bag.size());\n            assertTrue(bag.contains(Integer.valueOf((String) els[i])));\n            assertFalse(bag.contains(els[i]));\n        }\n\n        assertFalse(bag.remove(els[0]));\n        assertTrue(bag.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java", "class_name": "TransformedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java.TransformedBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java.TransformedBagTest.[void]testTransformedBag_decorateTransform()", "name": "testTransformedBag_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedBag_decorateTransform()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedBag_decorateTransform() {\n        final Bag<T> originalBag = new HashBag<>();\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        for (final Object el : els) {\n            originalBag.add((T) el);\n        }\n        final Bag<T> bag = TransformedBag.transformedBag(originalBag,\n                (Transformer<T, T>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(els.length, bag.size());\n        for (final Object el : els) {\n            assertTrue(bag.contains(Integer.valueOf((String) el)));\n            assertFalse(bag.contains(el));\n        }\n\n        assertFalse(bag.remove(els[0]));\n        assertTrue(bag.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java", "class_name": "TransformedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java.TransformedBagTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java.CollectionSortedBag_addTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAdd()", "original_string": "    @Test\n    void testAdd() {\n        String element = \"testElement\";\n        int count = 1;\n\n        boolean result = collectionSortedBag.add(element, count);\n\n        assertTrue(result);\n        verify(mockSortedBag).add(element, count);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java", "class_name": "CollectionSortedBag_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java.CollectionSortedBag_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java.CollectionSortedBagTest.[void]testEmptyBagCompatibility()", "name": "testEmptyBagCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyBagCompatibility()", "original_string": "    @Test\n    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final Bag<T> bag = makeObject();\n        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n            assertEquals(0, bag2.size(), \"Bag is empty\");\n            assertEquals(bag, bag2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java", "class_name": "CollectionSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java.CollectionSortedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Bag\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java.CollectionSortedBagTest.[void]testFullBagCompatibility()", "name": "testFullBagCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullBagCompatibility()", "original_string": "    @Test\n    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final SortedBag<T> bag = (SortedBag<T>) makeFullCollection();\n        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final SortedBag<?> bag2 = (SortedBag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n            assertEquals(bag.size(), bag2.size(), \"Bag is the right size\");\n            assertEquals(bag, bag2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java", "class_name": "CollectionSortedBagTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBagTest.java.CollectionSortedBagTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Bag\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java.TreeBag_addTest.[void]testAddWithComparableObject()", "name": "testAddWithComparableObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddWithComparableObject()", "original_string": "    @Test\n    void testAddWithComparableObject() {\n        TreeBag<String> bag = new TreeBag<>();\n        assertTrue(bag.add(\"test\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "class_name": "TreeBag_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java.TreeBag_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java.TreeBag_addTest.[void]testAddWithNonComparableObjectAndNoComparator()", "name": "testAddWithNonComparableObjectAndNoComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddWithNonComparableObjectAndNoComparator()", "original_string": "    @Test\n    void testAddWithNonComparableObjectAndNoComparator() {\n        TreeBag<Object> bag = new TreeBag<>();\n        assertThrows(IllegalArgumentException.class, () -> bag.add(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "class_name": "TreeBag_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java.TreeBag_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java.TreeBag_addTest.[void]testAddWithNonComparableObjectAndCustomComparator()", "name": "testAddWithNonComparableObjectAndCustomComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddWithNonComparableObjectAndCustomComparator()", "original_string": "    @Test\n    void testAddWithNonComparableObjectAndCustomComparator() {\n        Comparator<Object> customComparator = (o1, o2) -> 0;\n        TreeBag<Object> bag = new TreeBag<>(customComparator);\n        assertTrue(bag.add(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "class_name": "TreeBag_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java.TreeBag_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest.[void]testAddCompositedSingleCollection()", "name": "testAddCompositedSingleCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedSingleCollection()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedSingleCollection() {\n        setUpTest();\n        one.add(\"1\");\n        c.addComposited(one);\n        assertEquals(1, c.size());\n        assertTrue(c.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "class_name": "CompositeCollection_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest.[void]testAddCompositedNullCollection()", "name": "testAddCompositedNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedNullCollection()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedNullCollection() {\n        setUpTest();\n        c.addComposited((Collection<String>) null);\n        assertEquals(0, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "class_name": "CompositeCollection_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest.[void]testAddCompositedMultipleCollections()", "name": "testAddCompositedMultipleCollections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedMultipleCollections()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedMultipleCollections() {\n        setUpTest();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(new Collection[]{one, two});\n        assertEquals(2, c.size());\n        assertTrue(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "class_name": "CompositeCollection_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest.[void]testAddCompositedArrayOfCollections()", "name": "testAddCompositedArrayOfCollections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedArrayOfCollections()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedArrayOfCollections() {\n        setUpTest();\n        one.add(\"1\");\n        two.add(\"2\");\n        Collection<String> three = new HashSet<>();\n        three.add(\"3\");\n        c.addComposited(new Collection[]{one, two, three});\n        assertEquals(3, c.size());\n        assertTrue(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n        assertTrue(c.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "class_name": "CompositeCollection_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest.[void]testAddCompositedWithClear()", "name": "testAddCompositedWithClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedWithClear()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedWithClear() {\n        setUpTest();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(new Collection[]{one, two});\n        c.clear();\n        assertTrue(one.isEmpty());\n        assertTrue(two.isEmpty());\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "class_name": "CompositeCollection_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest.[void]testAddCompositedWithRemoveComposited()", "name": "testAddCompositedWithRemoveComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedWithRemoveComposited()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedWithRemoveComposited() {\n        setUpTest();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(new Collection[]{one, two});\n        c.removeComposited(one);\n        assertEquals(1, c.size());\n        assertFalse(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "class_name": "CompositeCollection_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java.CompositeCollection_addCompositedTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest.[void]testContainsWithSingleCollection()", "name": "testContainsWithSingleCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsWithSingleCollection()", "original_string": "    @Test\n    public void testContainsWithSingleCollection() {\n        one.add(\"1\");\n        c.addComposited(one);\n        assertTrue(c.contains(\"1\"));\n        assertFalse(c.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "class_name": "CompositeCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest.[void]testContainsWithMultipleCollections()", "name": "testContainsWithMultipleCollections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsWithMultipleCollections()", "original_string": "    @Test\n    public void testContainsWithMultipleCollections() {\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertTrue(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n        assertFalse(c.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "class_name": "CompositeCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest.[void]testContainsAfterAdd()", "name": "testContainsAfterAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAfterAdd()", "original_string": "    @Test\n    public void testContainsAfterAdd() {\n        one.add(\"1\");\n        c.addComposited(one);\n        c.setMutator(new CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                return one.add(obj);\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                return one.addAll(coll);\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                return one.remove(obj);\n            }\n        });\n        c.add(\"2\");\n        assertTrue(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "class_name": "CompositeCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest.[void]testContainsAfterRemove()", "name": "testContainsAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAfterRemove()", "original_string": "    @Test\n    public void testContainsAfterRemove() {\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        c.setMutator(new CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                return one.add(obj);\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                return one.addAll(coll);\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                return one.remove(obj) || two.remove(obj);\n            }\n        });\n        c.remove(\"1\");\n        assertFalse(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "class_name": "CompositeCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest.[void]testContainsAfterClear()", "name": "testContainsAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAfterClear()", "original_string": "    @Test\n    public void testContainsAfterClear() {\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        c.clear();\n        assertFalse(c.contains(\"1\"));\n        assertFalse(c.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "class_name": "CompositeCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java.CompositeCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java.UnmodifiableCollectionTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final Collection<E> coll = makeFullCollection();\n        assertSame(coll, UnmodifiableCollection.unmodifiableCollection(coll));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableCollection.unmodifiableCollection(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java", "class_name": "UnmodifiableCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java.UnmodifiableCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java.UnmodifiableCollectionTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullCollection() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java", "class_name": "UnmodifiableCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java.UnmodifiableCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testAddAllMutator()", "name": "testAddAllMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public void testAddAllMutator()", "original_string": "    @Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public void testAddAllMutator() {\n        setUpTest();\n        c.setMutator(new CompositeCollection.CollectionMutator<E>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public boolean add(final CompositeCollection<E> composite,\n                    final List<Collection<E>> collections, final E obj) {\n                for (final Collection<E> collection : collections) {\n                    collection.add(obj);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean addAll(final CompositeCollection<E> composite,\n                    final List<Collection<E>> collections, final Collection<? extends E> coll) {\n                for (final Collection<E> collection : collections) {\n                    collection.addAll(coll);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean remove(final CompositeCollection<E> composite,\n                    final List<Collection<E>> collections, final Object obj) {\n                return false;\n            }\n        });\n\n        c.addComposited(one);\n        two.add((E) \"foo\");\n        c.addAll(two);\n        assertTrue(c.contains(\"foo\"));\n        assertTrue(one.contains(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"serial\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testAddAllToCollection()", "name": "testAddAllToCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddAllToCollection()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddAllToCollection() {\n        setUpTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        c.addComposited(one, two);\n        final Collection<E> toCollection = new HashSet<>(c);\n        assertTrue(toCollection.containsAll(c));\n        assertEquals(c.size(), toCollection.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testAddMutator()", "name": "testAddMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public void testAddMutator()", "original_string": "    @Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public void testAddMutator() {\n        setUpTest();\n        c.setMutator(new CompositeCollection.CollectionMutator<E>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public boolean add(final CompositeCollection<E> composite,\n                    final List<Collection<E>> collections, final E obj) {\n                for (final Collection<E> collection : collections) {\n                    collection.add(obj);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean addAll(final CompositeCollection<E> composite,\n                    final List<Collection<E>> collections, final Collection<? extends E> coll) {\n                for (final Collection<E> collection : collections) {\n                    collection.addAll(coll);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean remove(final CompositeCollection<E> composite,\n                    final List<Collection<E>> collections, final Object obj) {\n                return false;\n            }\n        });\n\n        c.addComposited(one);\n        c.add((E) \"foo\");\n        assertTrue(c.contains(\"foo\"));\n        assertTrue(one.contains(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"serial\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testAddNullList()", "name": "testAddNullList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddNullList()", "original_string": "    @Test\n    public void testAddNullList() {\n        final ArrayList<String> nullList = null;\n        final CompositeCollection<String> cc = new CompositeCollection<>();\n        cc.addComposited(nullList);\n        assertEquals(0, cc.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testAddNullLists2Args()", "name": "testAddNullLists2Args", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddNullLists2Args()", "original_string": "    @Test\n    public void testAddNullLists2Args() {\n        final ArrayList<String> nullList = null;\n        final CompositeCollection<String> cc = new CompositeCollection<>();\n        cc.addComposited(nullList, nullList);\n        assertEquals(0, cc.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testAddNullListsVarArgs()", "name": "testAddNullListsVarArgs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddNullListsVarArgs()", "original_string": "    @Test\n    public void testAddNullListsVarArgs() {\n        final ArrayList<String> nullList = null;\n        final CompositeCollection<String> cc = new CompositeCollection<>();\n        cc.addComposited(nullList, nullList, nullList);\n        assertEquals(0, cc.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClear()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClear() {\n        setUpTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        c.addComposited(one, two);\n        c.clear();\n        assertTrue(one.isEmpty());\n        assertTrue(two.isEmpty());\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testContainsAll()", "name": "testContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsAll() {\n        setUpTest();\n        one.add((E) \"1\");\n        two.add((E) \"1\");\n        c.addComposited(one);\n        assertTrue(c.containsAll(two));\n        assertFalse(c.containsAll(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testIsEmpty()", "name": "testIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIsEmpty()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIsEmpty() {\n        setUpTest();\n        assertTrue(c.isEmpty());\n        final HashSet<E> empty = new HashSet<>();\n        c.addComposited(empty);\n        assertTrue(c.isEmpty());\n        empty.add((E) \"a\");\n        assertFalse(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIterator() {\n        setUpTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        c.addComposited(one);\n        c.addComposited(two);\n        final Iterator<E> i = c.iterator();\n        E next = i.next();\n        assertTrue(c.contains(next));\n        assertTrue(one.contains(next));\n        next = i.next();\n        i.remove();\n        assertFalse(c.contains(next));\n        assertFalse(two.contains(next));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testMultipleCollectionsSize()", "name": "testMultipleCollectionsSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultipleCollectionsSize()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultipleCollectionsSize() {\n        setUpTest();\n        final HashSet<E> set = new HashSet<>();\n        set.add((E) \"a\");\n        set.add((E) \"b\");\n        c.addComposited(set);\n        final HashSet<E> other = new HashSet<>();\n        other.add((E) \"c\");\n        c.addComposited(other);\n        assertEquals(set.size() + other.size(), c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove() {\n        setUpMutatorTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        two.add((E) \"1\");\n        c.addComposited(one, two);\n        c.remove(\"1\");\n        assertFalse(c.contains(\"1\"));\n        assertFalse(one.contains(\"1\"));\n        assertFalse(two.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testRemoveAll()", "name": "testRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAll() {\n        setUpMutatorTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        two.add((E) \"1\");\n        // need separate list to remove, as otherwise one clears itself\n        final Collection<E> removing = new ArrayList<>(one);\n        c.addComposited(one, two);\n        c.removeAll(removing);\n        assertFalse(c.contains(\"1\"));\n        assertFalse(one.contains(\"1\"));\n        assertFalse(two.contains(\"1\"));\n        c.removeAll(null);\n        assertFalse(c.contains(\"1\"));\n        assertFalse(one.contains(\"1\"));\n        assertFalse(two.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testRemoveComposited()", "name": "testRemoveComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveComposited()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveComposited() {\n        setUpMutatorTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        two.add((E) \"1\");\n        c.addComposited(one, two);\n        c.removeComposited(one);\n        assertTrue(c.contains(\"1\"));\n        assertEquals(2, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testRemoveIf()", "name": "testRemoveIf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveIf()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveIf() {\n        setUpMutatorTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        two.add((E) \"1\");\n        // need separate list to remove, as otherwise one clears itself\n        final Predicate<E> predicate = e -> e == \"1\";\n        c.addComposited(one, two);\n        c.removeIf(predicate);\n        assertFalse(c.contains(\"1\"));\n        assertFalse(one.contains(\"1\"));\n        assertFalse(two.contains(\"1\"));\n        c.removeIf(null);\n        assertFalse(c.contains(\"1\"));\n        assertFalse(one.contains(\"1\"));\n        assertFalse(two.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testRetainAll()", "name": "testRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll() {\n        setUpTest();\n        one.add((E) \"1\");\n        one.add((E) \"2\");\n        two.add((E) \"1\");\n        c.addComposited(one);\n        c.retainAll(two);\n        assertFalse(c.contains(\"2\"));\n        assertFalse(one.contains(\"2\"));\n        assertTrue(c.contains(\"1\"));\n        assertTrue(one.contains(\"1\"));\n        c.retainAll(null);\n        assertFalse(c.contains(\"2\"));\n        assertFalse(one.contains(\"2\"));\n        assertTrue(c.contains(\"1\"));\n        assertTrue(one.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize() {\n        setUpTest();\n        final HashSet<E> set = new HashSet<>();\n        set.add((E) \"a\");\n        set.add((E) \"b\");\n        c.addComposited(set);\n        assertEquals(set.size(), c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testToCollection()", "name": "testToCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToCollection()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToCollection() {\n        setUpTest();\n        one.add((E) \"1\");\n        two.add((E) \"2\");\n        c.addComposited(one, two);\n        final Collection<E> foo = c.toCollection();\n        assertTrue(foo.containsAll(c));\n        assertEquals(c.size(), foo.size());\n        one.add((E) \"3\");\n        assertFalse(foo.containsAll(c));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest.[void]testUnsupportedRemove()", "name": "testUnsupportedRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testUnsupportedRemove()", "original_string": "    @Test\n    @Override\n    public void testUnsupportedRemove() {\n        resetFull();\n\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().remove(null));\n\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java", "class_name": "CompositeCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java.CompositeCollectionTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nOverride testUnsupportedRemove, since the default impl expects removeAll,\nretainAll and iterator().remove to throw\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest.[void]testRemoveIf_AllElementsRemoved()", "name": "testRemoveIf_AllElementsRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIf_AllElementsRemoved()", "original_string": "    @Test\n    public void testRemoveIf_AllElementsRemoved() {\n        Predicate<String> filter = s -> true;\n        assertTrue(c.removeIf(filter));\n        assertEquals(0, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "class_name": "CompositeCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest.[void]testRemoveIf_NoElementsRemoved()", "name": "testRemoveIf_NoElementsRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIf_NoElementsRemoved()", "original_string": "    @Test\n    public void testRemoveIf_NoElementsRemoved() {\n        Predicate<String> filter = s -> false;\n        assertFalse(c.removeIf(filter));\n        assertEquals(4, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "class_name": "CompositeCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest.[void]testRemoveIf_SomeElementsRemoved()", "name": "testRemoveIf_SomeElementsRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIf_SomeElementsRemoved()", "original_string": "    @Test\n    public void testRemoveIf_SomeElementsRemoved() {\n        Predicate<String> filter = s -> s.equals(\"a\") || s.equals(\"c\");\n        assertTrue(c.removeIf(filter));\n        assertEquals(2, c.size());\n        assertFalse(c.contains(\"a\"));\n        assertFalse(c.contains(\"c\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "class_name": "CompositeCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest.[void]testRemoveIf_NullFilter()", "name": "testRemoveIf_NullFilter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIf_NullFilter()", "original_string": "    @Test\n    public void testRemoveIf_NullFilter() {\n        assertFalse(c.removeIf(null));\n        assertEquals(4, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "class_name": "CompositeCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java.CompositeCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java.IndexedCollection_retainAllTest.[void]testRetainAllWithMatchingElements()", "name": "testRetainAllWithMatchingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithMatchingElements()", "original_string": "    @Test\n    public void testRetainAllWithMatchingElements() {\n        Collection<String> retainCollection = asList(\"1\", \"2\");\n        boolean changed = indexedCollection.retainAll(retainCollection);\n\n        assertTrue(changed);\n        assertEquals(2, indexedCollection.size());\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertNull(indexedCollection.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "class_name": "IndexedCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java.IndexedCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java.IndexedCollection_retainAllTest.[void]testRetainAllWithNoMatchingElements()", "name": "testRetainAllWithNoMatchingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithNoMatchingElements()", "original_string": "    @Test\n    public void testRetainAllWithNoMatchingElements() {\n        Collection<String> retainCollection = asList(\"4\", \"5\");\n        boolean changed = indexedCollection.retainAll(retainCollection);\n\n        assertTrue(changed);\n        assertEquals(0, indexedCollection.size());\n        assertNull(indexedCollection.get(1));\n        assertNull(indexedCollection.get(2));\n        assertNull(indexedCollection.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "class_name": "IndexedCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java.IndexedCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java.IndexedCollection_retainAllTest.[void]testRetainAllWithAllMatchingElements()", "name": "testRetainAllWithAllMatchingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithAllMatchingElements()", "original_string": "    @Test\n    public void testRetainAllWithAllMatchingElements() {\n        Collection<String> retainCollection = asList(\"1\", \"2\", \"3\");\n        boolean changed = indexedCollection.retainAll(retainCollection);\n\n        assertFalse(changed);\n        assertEquals(3, indexedCollection.size());\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "class_name": "IndexedCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java.IndexedCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest.[void]testRemoveAllWithEmptyCollection()", "name": "testRemoveAllWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithEmptyCollection()", "original_string": "    @Test\n    public void testRemoveAllWithEmptyCollection() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertFalse(c.removeAll(new ArrayList<>()));\n        assertEquals(2, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "class_name": "CompositeCollection_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest.[void]testRemoveAllWithNonEmptyCollection()", "name": "testRemoveAllWithNonEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithNonEmptyCollection()", "original_string": "    @Test\n    public void testRemoveAllWithNonEmptyCollection() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertTrue(c.removeAll(Arrays.asList(\"1\", \"2\")));\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "class_name": "CompositeCollection_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest.[void]testRemoveAllWithPartialMatch()", "name": "testRemoveAllWithPartialMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithPartialMatch()", "original_string": "    @Test\n    public void testRemoveAllWithPartialMatch() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertTrue(c.removeAll(Arrays.asList(\"1\")));\n        assertEquals(1, c.size());\n        assertFalse(c.contains(\"1\"));\n        assertTrue(c.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "class_name": "CompositeCollection_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest.[void]testRemoveAllWithNoMatch()", "name": "testRemoveAllWithNoMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithNoMatch()", "original_string": "    @Test\n    public void testRemoveAllWithNoMatch() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertFalse(c.removeAll(Arrays.asList(\"3\")));\n        assertEquals(2, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "class_name": "CompositeCollection_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java.CompositeCollection_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java.TransformedCollectionTest.[void]testTransformedCollection()", "name": "testTransformedCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedCollection()", "original_string": "    @Test\n    public void testTransformedCollection() {\n        final Collection<Object> coll = TransformedCollection.transformingCollection(new ArrayList<>(), STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, coll.size());\n        final Object[] elements = getFullElements();\n        for (int i = 0; i < elements.length; i++) {\n            coll.add(elements[i]);\n            assertEquals(i + 1, coll.size());\n            assertTrue(coll.contains(Integer.valueOf((String) elements[i])));\n            assertFalse(coll.contains(elements[i]));\n        }\n\n        assertTrue(coll.remove(Integer.valueOf((String) elements[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java", "class_name": "TransformedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java.TransformedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java.TransformedCollectionTest.[void]testTransformedCollection_decorateTransform()", "name": "testTransformedCollection_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedCollection_decorateTransform()", "original_string": "    @Test\n    public void testTransformedCollection_decorateTransform() {\n        final Collection<Object> originalCollection = new ArrayList<>();\n        final Object[] elements = getFullElements();\n        Collections.addAll(originalCollection, elements);\n        final Collection<Object> collection = TransformedCollection.transformedCollection(originalCollection, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(elements.length, collection.size());\n        for (final Object element : elements) {\n            assertTrue(collection.contains(Integer.valueOf((String) element)));\n            assertFalse(collection.contains(element));\n        }\n\n        assertFalse(collection.remove(elements[0]));\n        assertTrue(collection.remove(Integer.valueOf((String) elements[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java", "class_name": "TransformedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java.TransformedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest.[void]testUniqueIndexedCollectionWithUniqueKeys()", "name": "testUniqueIndexedCollectionWithUniqueKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniqueIndexedCollectionWithUniqueKeys()", "original_string": "    @Test\n    public void testUniqueIndexedCollectionWithUniqueKeys() {\n        Collection<String> coll = Arrays.asList(\"1\", \"2\", \"3\");\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.uniqueIndexedCollection(coll, keyTransformer);\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "class_name": "IndexedCollection_uniqueIndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest.[void]testUniqueIndexedCollectionWithDuplicateKeys()", "name": "testUniqueIndexedCollectionWithDuplicateKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniqueIndexedCollectionWithDuplicateKeys()", "original_string": "    @Test\n    public void testUniqueIndexedCollectionWithDuplicateKeys() {\n        Collection<String> coll = Arrays.asList(\"1\", \"2\", \"2\");\n        assertThrows(IllegalArgumentException.class, () -> {\n            IndexedCollection.uniqueIndexedCollection(coll, keyTransformer);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "class_name": "IndexedCollection_uniqueIndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest.[void]testUniqueIndexedCollectionWithEmptyCollection()", "name": "testUniqueIndexedCollectionWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniqueIndexedCollectionWithEmptyCollection()", "original_string": "    @Test\n    public void testUniqueIndexedCollectionWithEmptyCollection() {\n        Collection<String> coll = Arrays.asList();\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.uniqueIndexedCollection(coll, keyTransformer);\n\n        assertNull(indexedCollection.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "class_name": "IndexedCollection_uniqueIndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest.[void]testUniqueIndexedCollectionWithNullKeyTransformer()", "name": "testUniqueIndexedCollectionWithNullKeyTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniqueIndexedCollectionWithNullKeyTransformer()", "original_string": "    @Test\n    public void testUniqueIndexedCollectionWithNullKeyTransformer() {\n        Collection<String> coll = Arrays.asList(\"1\", \"2\", \"3\");\n        assertThrows(NullPointerException.class, () -> {\n            IndexedCollection.uniqueIndexedCollection(coll, null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "class_name": "IndexedCollection_uniqueIndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java.IndexedCollection_uniqueIndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest.[void]testRetainAllWithNullCollection()", "name": "testRetainAllWithNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithNullCollection()", "original_string": "    @Test\n    public void testRetainAllWithNullCollection() {\n        setUp();\n        assertFalse(c.retainAll(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "class_name": "CompositeCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest.[void]testRetainAllWithEmptyCollection()", "name": "testRetainAllWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithEmptyCollection()", "original_string": "    @Test\n    public void testRetainAllWithEmptyCollection() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        assertTrue(c.retainAll(new ArrayList<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "class_name": "CompositeCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest.[void]testRetainAllWithMatchingElements()", "name": "testRetainAllWithMatchingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithMatchingElements()", "original_string": "    @Test\n    public void testRetainAllWithMatchingElements() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        Collection<String> retain = new HashSet<>(Arrays.asList(\"1\", \"2\"));\n        assertFalse(c.retainAll(retain));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "class_name": "CompositeCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest.[void]testRetainAllWithNonMatchingElements()", "name": "testRetainAllWithNonMatchingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithNonMatchingElements()", "original_string": "    @Test\n    public void testRetainAllWithNonMatchingElements() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        Collection<String> retain = new HashSet<>(Arrays.asList(\"3\", \"4\"));\n        assertTrue(c.retainAll(retain));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "class_name": "CompositeCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest.[void]testRetainAllWithPartialMatchingElements()", "name": "testRetainAllWithPartialMatchingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRetainAllWithPartialMatchingElements()", "original_string": "    @Test\n    public void testRetainAllWithPartialMatchingElements() {\n        setUp();\n        one.add(\"1\");\n        two.add(\"2\");\n        c.addComposited(one, two);\n        Collection<String> retain = new HashSet<>(Arrays.asList(\"1\", \"3\"));\n        assertTrue(c.retainAll(retain));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "class_name": "CompositeCollection_retainAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java.CompositeCollection_retainAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java.UnmodifiableCollection_unmodifiableCollectionTest.[void]testUnmodifiableCollectionWithUnmodifiableCollection()", "name": "testUnmodifiableCollectionWithUnmodifiableCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableCollectionWithUnmodifiableCollection()", "original_string": "    @Test\n    public void testUnmodifiableCollectionWithUnmodifiableCollection() {\n        Collection<String> original = new ArrayList<>();\n        original.add(\"test\");\n        Collection<String> unmodifiable = UnmodifiableCollection.unmodifiableCollection(original);\n\n        // Ensure the returned collection is an instance of UnmodifiableCollection\n        assertTrue(unmodifiable instanceof UnmodifiableCollection);\n\n        // Ensure the original collection is not modified\n        assertSame(original, ((UnmodifiableCollection<String>) unmodifiable).decorated());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java", "class_name": "UnmodifiableCollection_unmodifiableCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java.UnmodifiableCollection_unmodifiableCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java.UnmodifiableCollection_unmodifiableCollectionTest.[void]testUnmodifiableCollectionWithAlreadyUnmodifiableCollection()", "name": "testUnmodifiableCollectionWithAlreadyUnmodifiableCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableCollectionWithAlreadyUnmodifiableCollection()", "original_string": "    @Test\n    public void testUnmodifiableCollectionWithAlreadyUnmodifiableCollection() {\n        Collection<String> original = new ArrayList<>();\n        original.add(\"test\");\n        Collection<String> unmodifiable = UnmodifiableCollection.unmodifiableCollection(original);\n        Collection<String> alreadyUnmodifiable = UnmodifiableCollection.unmodifiableCollection(unmodifiable);\n\n        // Ensure the returned collection is the same instance as the input unmodifiable collection\n        assertSame(unmodifiable, alreadyUnmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java", "class_name": "UnmodifiableCollection_unmodifiableCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java.UnmodifiableCollection_unmodifiableCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest.[void]testIteratorWithEmptyComposite()", "name": "testIteratorWithEmptyComposite", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithEmptyComposite()", "original_string": "    @Test\n    public void testIteratorWithEmptyComposite() {\n        Iterator<String> iterator = c.iterator();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "class_name": "CompositeCollection_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest.[void]testIteratorWithSingleCollection()", "name": "testIteratorWithSingleCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithSingleCollection()", "original_string": "    @Test\n    public void testIteratorWithSingleCollection() {\n        c.addComposited(one);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(one, new HashSet<>(result));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "class_name": "CompositeCollection_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest.[void]testIteratorWithMultipleCollections()", "name": "testIteratorWithMultipleCollections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithMultipleCollections()", "original_string": "    @Test\n    public void testIteratorWithMultipleCollections() {\n        c.addComposited(one, two);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(new HashSet<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")), new HashSet<>(result));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "class_name": "CompositeCollection_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest.[void]testIteratorAfterClear()", "name": "testIteratorAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorAfterClear()", "original_string": "    @Test\n    public void testIteratorAfterClear() {\n        c.addComposited(one);\n        c.clear();\n        Iterator<String> iterator = c.iterator();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "class_name": "CompositeCollection_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest.[void]testIteratorAfterRemoveComposited()", "name": "testIteratorAfterRemoveComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorAfterRemoveComposited()", "original_string": "    @Test\n    public void testIteratorAfterRemoveComposited() {\n        c.addComposited(one, two);\n        c.removeComposited(one);\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertEquals(two, new HashSet<>(result));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "class_name": "CompositeCollection_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest.[void]testIteratorAfterAddElement()", "name": "testIteratorAfterAddElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorAfterAddElement()", "original_string": "    @Test\n    public void testIteratorAfterAddElement() {\n        c.setMutator(new CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                for (Collection<String> collection : collections) {\n                    if (collection.add(obj)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                boolean changed = false;\n                for (String collItem : coll) {\n                    changed |= add(composite, collections, collItem);\n                }\n                return changed;\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                for (Collection<String> collection : collections) {\n                    if (collection.remove(obj)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n        });\n        c.addComposited(one);\n        c.add(\"g\");\n        Iterator<String> iterator = c.iterator();\n        List<String> result = new ArrayList<>();\n        iterator.forEachRemaining(result::add);\n        assertTrue(result.contains(\"g\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "class_name": "CompositeCollection_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java.CompositeCollection_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest.[void]testContainsReturnsTrueForExistingObject()", "name": "testContainsReturnsTrueForExistingObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsTrueForExistingObject()", "original_string": "    @Test\n    public void testContainsReturnsTrueForExistingObject() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        assertTrue(indexedCollection.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "class_name": "IndexedCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest.[void]testContainsReturnsFalseForNonExistingObject()", "name": "testContainsReturnsFalseForNonExistingObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsFalseForNonExistingObject()", "original_string": "    @Test\n    public void testContainsReturnsFalseForNonExistingObject() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        assertFalse(indexedCollection.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "class_name": "IndexedCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest.[void]testContainsReturnsTrueAfterAddingObject()", "name": "testContainsReturnsTrueAfterAddingObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsTrueAfterAddingObject()", "original_string": "    @Test\n    public void testContainsReturnsTrueAfterAddingObject() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        originalCollection.add(\"2\");\n        indexedCollection.reindex();\n        assertTrue(indexedCollection.contains(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "class_name": "IndexedCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest.[void]testContainsReturnsFalseAfterRemovingObject()", "name": "testContainsReturnsFalseAfterRemovingObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsReturnsFalseAfterRemovingObject()", "original_string": "    @Test\n    public void testContainsReturnsFalseAfterRemovingObject() {\n        originalCollection.add(\"1\");\n        indexedCollection.reindex();\n        originalCollection.remove(\"1\");\n        indexedCollection.reindex();\n        assertFalse(indexedCollection.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "class_name": "IndexedCollection_containsTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java.IndexedCollection_containsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java.PredicatedCollection_addAllTest.[void]testAddAll_ValidElements()", "name": "testAddAll_ValidElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAll_ValidElements()", "original_string": "    @Test\n    public void testAddAll_ValidElements() {\n        Predicate<String> predicate = NotNullPredicate.notNullPredicate();\n        PredicatedCollection<String> predicatedCollection = new PredicatedCollection<>(new HashSet<>(), predicate);\n        Collection<String> validElements = Arrays.asList(\"item1\", \"item2\");\n\n        boolean result = predicatedCollection.addAll(validElements);\n\n        assertTrue(result);\n        assertEquals(2, predicatedCollection.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java", "class_name": "PredicatedCollection_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java.PredicatedCollection_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java.PredicatedCollection_addAllTest.[void]testAddAll_InvalidElement()", "name": "testAddAll_InvalidElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAll_InvalidElement()", "original_string": "    @Test\n    public void testAddAll_InvalidElement() {\n        Predicate<String> predicate = NotNullPredicate.notNullPredicate();\n        PredicatedCollection<String> predicatedCollection = new PredicatedCollection<>(new HashSet<>(), predicate);\n        Collection<String> invalidElements = Arrays.asList(\"item1\", null, \"item2\");\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            predicatedCollection.addAll(invalidElements);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java", "class_name": "PredicatedCollection_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java.PredicatedCollection_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest.[void]testAddedObjectsCanBeRetrievedByKey()", "name": "testAddedObjectsCanBeRetrievedByKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddedObjectsCanBeRetrievedByKey()", "original_string": "    @Test\n    public void testAddedObjectsCanBeRetrievedByKey() throws Exception {\n        final Collection<String> coll = makeTestCollection();\n        coll.add(\"12\");\n        coll.add(\"16\");\n        coll.add(\"1\");\n        coll.addAll(asList(\"2\", \"3\", \"4\"));\n\n        @SuppressWarnings(\"unchecked\")\n        final IndexedCollection<Integer, String> indexed = (IndexedCollection<Integer, String>) coll;\n        assertEquals(\"12\", indexed.get(12));\n        assertEquals(\"16\", indexed.get(16));\n        assertEquals(\"1\", indexed.get(1));\n        assertEquals(\"2\", indexed.get(2));\n        assertEquals(\"3\", indexed.get(3));\n        assertEquals(\"4\", indexed.get(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java", "class_name": "IndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest.[void]testDecoratedCollectionIsIndexedOnCreation()", "name": "testDecoratedCollectionIsIndexedOnCreation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecoratedCollectionIsIndexedOnCreation()", "original_string": "    @Test\n    public void testDecoratedCollectionIsIndexedOnCreation() throws Exception {\n        final Collection<String> original = makeFullCollection();\n        final IndexedCollection<Integer, String> indexed = decorateUniqueCollection(original);\n\n        assertEquals(\"1\", indexed.get(1));\n        assertEquals(\"2\", indexed.get(2));\n        assertEquals(\"3\", indexed.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java", "class_name": "IndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest.[void]testEnsureDuplicateObjectsCauseException()", "name": "testEnsureDuplicateObjectsCauseException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnsureDuplicateObjectsCauseException()", "original_string": "    @Test\n    public void testEnsureDuplicateObjectsCauseException() throws Exception {\n        final Collection<String> coll = makeUniqueTestCollection();\n\n        coll.add(\"1\");\n\n        assertThrows(IllegalArgumentException.class, () -> coll.add(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java", "class_name": "IndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest.[void]testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately()", "name": "testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately()", "original_string": "    @Test\n    public void testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately() throws Exception {\n        final Collection<String> original = new ArrayList<>();\n        final IndexedCollection<Integer, String> indexed = decorateUniqueCollection(original);\n\n        original.add(\"1\");\n        original.add(\"2\");\n        original.add(\"3\");\n\n        assertNull(indexed.get(1));\n        assertNull(indexed.get(2));\n        assertNull(indexed.get(3));\n\n        indexed.reindex();\n\n        assertEquals(\"1\", indexed.get(1));\n        assertEquals(\"2\", indexed.get(2));\n        assertEquals(\"3\", indexed.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java", "class_name": "IndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java.IndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java.UnmodifiableBoundedCollectionTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final BoundedCollection<E> coll = makeFullCollection();\n        assertSame(coll, UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableBoundedCollection.unmodifiableBoundedCollection(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java", "class_name": "UnmodifiableBoundedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java.UnmodifiableBoundedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java.UnmodifiableBoundedCollectionTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullCollection() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java", "class_name": "UnmodifiableBoundedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollectionTest.java.UnmodifiableBoundedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest.[void]testIsEmptyWhenEmpty()", "name": "testIsEmptyWhenEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWhenEmpty()", "original_string": "    @Test\n    public void testIsEmptyWhenEmpty() {\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "class_name": "CompositeCollection_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest.[void]testIsEmptyWhenNotEmpty()", "name": "testIsEmptyWhenNotEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWhenNotEmpty()", "original_string": "    @Test\n    public void testIsEmptyWhenNotEmpty() {\n        one.add(\"1\");\n        c.addComposited(one);\n        assertFalse(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "class_name": "CompositeCollection_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest.[void]testIsEmptyAfterClear()", "name": "testIsEmptyAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyAfterClear()", "original_string": "    @Test\n    public void testIsEmptyAfterClear() {\n        one.add(\"1\");\n        c.addComposited(one);\n        c.clear();\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "class_name": "CompositeCollection_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest.[void]testIsEmptyAfterAddAndRemove()", "name": "testIsEmptyAfterAddAndRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyAfterAddAndRemove()", "original_string": "    @Test\n    public void testIsEmptyAfterAddAndRemove() {\n        one.add(\"1\");\n        c.addComposited(one);\n        one.clear(); // Remove the element from the underlying collection instead of using c.remove()\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "class_name": "CompositeCollection_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java.CompositeCollection_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java.IndexedCollection_nonUniqueIndexedCollectionTest.[void]testNonUniqueIndexedCollection()", "name": "testNonUniqueIndexedCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNonUniqueIndexedCollection()", "original_string": "    @Test\n    public void testNonUniqueIndexedCollection() {\n        Collection<String> coll = Arrays.asList(\"1\", \"2\", \"3\");\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.nonUniqueIndexedCollection(coll, keyTransformer);\n\n        assertNotNull(indexedCollection);\n        assertEquals(3, indexedCollection.size());\n        assertTrue(indexedCollection.contains(\"1\"));\n        assertTrue(indexedCollection.contains(\"2\"));\n        assertTrue(indexedCollection.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "class_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java.IndexedCollection_nonUniqueIndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java.IndexedCollection_nonUniqueIndexedCollectionTest.[void]testNonUniqueIndexedCollectionWithEmptyCollection()", "name": "testNonUniqueIndexedCollectionWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNonUniqueIndexedCollectionWithEmptyCollection()", "original_string": "    @Test\n    public void testNonUniqueIndexedCollectionWithEmptyCollection() {\n        Collection<String> coll = Arrays.asList();\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.nonUniqueIndexedCollection(coll, keyTransformer);\n\n        assertNotNull(indexedCollection);\n        assertEquals(0, indexedCollection.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "class_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java.IndexedCollection_nonUniqueIndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java.IndexedCollection_nonUniqueIndexedCollectionTest.[void]testNonUniqueIndexedCollectionWithDuplicateKeys()", "name": "testNonUniqueIndexedCollectionWithDuplicateKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNonUniqueIndexedCollectionWithDuplicateKeys()", "original_string": "    @Test\n    public void testNonUniqueIndexedCollectionWithDuplicateKeys() {\n        Collection<String> coll = Arrays.asList(\"1\", \"2\", \"2\", \"3\");\n        IndexedCollection<Integer, String> indexedCollection = IndexedCollection.nonUniqueIndexedCollection(coll, keyTransformer);\n\n        assertNotNull(indexedCollection);\n        assertEquals(4, indexedCollection.size());\n        assertTrue(indexedCollection.contains(\"1\"));\n        assertTrue(indexedCollection.contains(\"2\"));\n        assertTrue(indexedCollection.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "class_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java.IndexedCollection_nonUniqueIndexedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest.[void]testGetWithExistingKey()", "name": "testGetWithExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithExistingKey()", "original_string": "    @Test\n    public void testGetWithExistingKey() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "class_name": "IndexedCollection_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest.[void]testGetWithNonExistingKey()", "name": "testGetWithNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithNonExistingKey()", "original_string": "    @Test\n    public void testGetWithNonExistingKey() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertNull(indexedCollection.get(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "class_name": "IndexedCollection_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest.[void]testGetAfterReindex()", "name": "testGetAfterReindex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterReindex()", "original_string": "    @Test\n    public void testGetAfterReindex() {\n        Collection<String> original = new ArrayList<>();\n        original.add(\"1\");\n        original.add(\"2\");\n        original.add(\"3\");\n\n        indexedCollection = new IndexedCollection<>(original, keyTransformer,\n                MultiValueMap.<Integer, String>multiValueMap(new HashMap<>()), false);\n\n        indexedCollection.reindex();\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "class_name": "IndexedCollection_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest.[void]testGetAfterAddToIndex()", "name": "testGetAfterAddToIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterAddToIndex()", "original_string": "    @Test\n    public void testGetAfterAddToIndex() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n\n        indexedCollection.add(\"4\");\n\n        assertEquals(\"4\", indexedCollection.get(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "class_name": "IndexedCollection_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest.[void]testGetAfterRemoveFromIndex()", "name": "testGetAfterRemoveFromIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterRemoveFromIndex()", "original_string": "    @Test\n    public void testGetAfterRemoveFromIndex() {\n        indexedCollection.add(\"1\");\n        indexedCollection.add(\"2\");\n        indexedCollection.add(\"3\");\n\n        assertEquals(\"1\", indexedCollection.get(1));\n        assertEquals(\"2\", indexedCollection.get(2));\n        assertEquals(\"3\", indexedCollection.get(3));\n\n        indexedCollection.remove(\"2\");\n\n        assertNull(indexedCollection.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "class_name": "IndexedCollection_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java.IndexedCollection_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java.CompositeCollection_removeTest.[void]testRemoveMutator()", "name": "testRemoveMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public void testRemoveMutator()", "original_string": "    @Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public void testRemoveMutator() {\n        setUpTest();\n        c.setMutator(new CompositeCollection.CollectionMutator<String>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public boolean add(final CompositeCollection<String> composite,\n                    final List<Collection<String>> collections, final String obj) {\n                for (final Collection<String> collection : collections) {\n                    collection.add(obj);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean addAll(final CompositeCollection<String> composite,\n                    final List<Collection<String>> collections, final Collection<? extends String> coll) {\n                for (final Collection<String> collection : collections) {\n                    collection.addAll(coll);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean remove(final CompositeCollection<String> composite,\n                    final List<Collection<String>> collections, final Object obj) {\n                for (final Collection<String> collection : collections) {\n                    collection.remove(obj);\n                }\n                return true;\n            }\n        });\n\n        c.addComposited(one);\n        one.add(\"foo\"); // Directly add to the collection\n        assertTrue(c.contains(\"foo\"));\n        assertTrue(one.contains(\"foo\"));\n\n        assertTrue(c.remove(\"foo\"));\n        assertFalse(c.contains(\"foo\"));\n        assertFalse(one.contains(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java", "class_name": "CompositeCollection_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java.CompositeCollection_removeTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings({ \"unchecked\", \"serial\" })\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"serial\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java.CompositeCollection_removeTest.[void]testRemoveWithoutMutator()", "name": "testRemoveWithoutMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithoutMutator()", "original_string": "    @Test\n    public void testRemoveWithoutMutator() {\n        setUpTest();\n        c.addComposited(one);\n        one.add(\"foo\"); // Directly add to the collection\n        assertTrue(c.contains(\"foo\"));\n        assertTrue(one.contains(\"foo\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> c.remove(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java", "class_name": "CompositeCollection_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java.CompositeCollection_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java.PredicatedCollectionTest.[void]testIllegalAdd()", "name": "testIllegalAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd() {\n        final Collection<E> c = makeTestCollection();\n        final Integer i = 3;\n\n        assertThrows(IllegalArgumentException.class, () -> c.add((E) i), \"Integer should fail string predicate.\");\n\n        assertFalse(c.contains(i), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java", "class_name": "PredicatedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java.PredicatedCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java.PredicatedCollectionTest.[void]testIllegalAddAll()", "name": "testIllegalAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll() {\n        final Collection<E> c = makeTestCollection();\n        final List<E> elements = new ArrayList<>();\n        elements.add((E) \"one\");\n        elements.add((E) \"two\");\n        elements.add((E) Integer.valueOf(3));\n        elements.add((E) \"four\");\n\n        assertThrows(IllegalArgumentException.class, () -> c.addAll(elements), \"Integer should fail string predicate.\");\n\n        assertFalse(c.contains(\"one\"), \"Collection shouldn't contain illegal element\");\n        assertFalse(c.contains(\"two\"), \"Collection shouldn't contain illegal element\");\n        assertFalse(c.contains(3), \"Collection shouldn't contain illegal element\");\n        assertFalse(c.contains(\"four\"), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java", "class_name": "PredicatedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java.PredicatedCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java.CompositeCollection_addAllTest.[void]testAddAllWithMutator()", "name": "testAddAllWithMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllWithMutator()", "original_string": "    @Test\n    public void testAddAllWithMutator() {\n        CompositeCollection.CollectionMutator<String> mutator = new CompositeCollection.CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                for (Collection<String> coll : collections) {\n                    coll.add(obj);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                for (Collection<String> collection : collections) {\n                    collection.addAll(coll);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                for (Collection<String> coll : collections) {\n                    coll.remove(obj);\n                }\n                return true;\n            }\n        };\n\n        c.setMutator(mutator);\n        c.addComposited(one, two);\n\n        Collection<String> newElements = Arrays.asList(\"5\", \"6\");\n        assertTrue(c.addAll(newElements));\n        assertTrue(one.containsAll(newElements));\n        assertTrue(two.containsAll(newElements));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "class_name": "CompositeCollection_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java.CompositeCollection_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java.CompositeCollection_addAllTest.[void]testAddAllWithoutMutator()", "name": "testAddAllWithoutMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllWithoutMutator()", "original_string": "    @Test\n    public void testAddAllWithoutMutator() {\n        assertThrows(UnsupportedOperationException.class, () -> {\n            c.addAll(Arrays.asList(\"5\", \"6\"));\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "class_name": "CompositeCollection_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java.CompositeCollection_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java.CompositeCollection_addAllTest.[void]testAddAllWithEmptyCollection()", "name": "testAddAllWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllWithEmptyCollection()", "original_string": "    @Test\n    public void testAddAllWithEmptyCollection() {\n        CompositeCollection.CollectionMutator<String> mutator = new CompositeCollection.CollectionMutator<String>() {\n            @Override\n            public boolean add(CompositeCollection<String> composite, List<Collection<String>> collections, String obj) {\n                for (Collection<String> coll : collections) {\n                    coll.add(obj);\n                }\n                return true;\n            }\n\n            @Override\n            public boolean addAll(CompositeCollection<String> composite, List<Collection<String>> collections, Collection<? extends String> coll) {\n                for (Collection<String> collection : collections) {\n                    collection.addAll(coll);\n                }\n                return !coll.isEmpty();\n            }\n\n            @Override\n            public boolean remove(CompositeCollection<String> composite, List<Collection<String>> collections, Object obj) {\n                for (Collection<String> coll : collections) {\n                    coll.remove(obj);\n                }\n                return true;\n            }\n        };\n\n        c.setMutator(mutator);\n        c.addComposited(one, two);\n\n        Collection<String> emptyCollection = new ArrayList<>();\n        assertFalse(c.addAll(emptyCollection));\n        assertEquals(4, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "class_name": "CompositeCollection_addAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java.CompositeCollection_addAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest.[void]testContainsAllWithNullCollection()", "name": "testContainsAllWithNullCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAllWithNullCollection()", "original_string": "    @Test\n    public void testContainsAllWithNullCollection() {\n        assertFalse(c.containsAll(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "class_name": "CompositeCollection_containsAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest.[void]testContainsAllWithEmptyCollection()", "name": "testContainsAllWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAllWithEmptyCollection()", "original_string": "    @Test\n    public void testContainsAllWithEmptyCollection() {\n        assertTrue(c.containsAll(new ArrayList<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "class_name": "CompositeCollection_containsAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest.[void]testContainsAllWithAllElementsPresent()", "name": "testContainsAllWithAllElementsPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAllWithAllElementsPresent()", "original_string": "    @Test\n    public void testContainsAllWithAllElementsPresent() {\n        Collection<String> testCollection = Arrays.asList(\"a\", \"d\");\n        assertTrue(c.containsAll(testCollection));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "class_name": "CompositeCollection_containsAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest.[void]testContainsAllWithSomeElementsMissing()", "name": "testContainsAllWithSomeElementsMissing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAllWithSomeElementsMissing()", "original_string": "    @Test\n    public void testContainsAllWithSomeElementsMissing() {\n        Collection<String> testCollection = Arrays.asList(\"a\", \"x\");\n        assertFalse(c.containsAll(testCollection));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "class_name": "CompositeCollection_containsAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest.[void]testContainsAllAfterAddingElements()", "name": "testContainsAllAfterAddingElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAllAfterAddingElements()", "original_string": "    @Test\n    public void testContainsAllAfterAddingElements() {\n        Collection<String> newCollection = new HashSet<>(Arrays.asList(\"g\"));\n        c.addComposited(newCollection);\n        Collection<String> testCollection = Arrays.asList(\"a\", \"g\");\n        assertTrue(c.containsAll(testCollection));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "class_name": "CompositeCollection_containsAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest.[void]testContainsAllAfterClearingCollection()", "name": "testContainsAllAfterClearingCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsAllAfterClearingCollection()", "original_string": "    @Test\n    public void testContainsAllAfterClearingCollection() {\n        c.clear();\n        Collection<String> testCollection = Arrays.asList(\"a\", \"d\");\n        assertFalse(c.containsAll(testCollection));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "class_name": "CompositeCollection_containsAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java.CompositeCollection_containsAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest.[void]testRemoveIfWithNullFilter()", "name": "testRemoveIfWithNullFilter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIfWithNullFilter()", "original_string": "    @Test\n    public void testRemoveIfWithNullFilter() {\n        assertFalse(indexedCollection.removeIf(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "class_name": "IndexedCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest.[void]testRemoveIfWithNoMatches()", "name": "testRemoveIfWithNoMatches", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIfWithNoMatches()", "original_string": "    @Test\n    public void testRemoveIfWithNoMatches() {\n        Predicate<String> filter = s -> s.equals(\"4\");\n        assertFalse(indexedCollection.removeIf(filter));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "class_name": "IndexedCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest.[void]testRemoveIfWithMatches()", "name": "testRemoveIfWithMatches", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIfWithMatches()", "original_string": "    @Test\n    public void testRemoveIfWithMatches() {\n        Predicate<String> filter = s -> s.equals(\"2\");\n        assertTrue(indexedCollection.removeIf(filter));\n        assertFalse(originalCollection.contains(\"2\"));\n        indexedCollection.reindex();\n        assertNull(indexedCollection.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "class_name": "IndexedCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest.[void]testRemoveIfWithAllMatches()", "name": "testRemoveIfWithAllMatches", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveIfWithAllMatches()", "original_string": "    @Test\n    public void testRemoveIfWithAllMatches() {\n        Predicate<String> filter = s -> true;\n        assertTrue(indexedCollection.removeIf(filter));\n        assertTrue(originalCollection.isEmpty());\n        indexedCollection.reindex();\n        assertNull(indexedCollection.get(1));\n        assertNull(indexedCollection.get(2));\n        assertNull(indexedCollection.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "class_name": "IndexedCollection_removeIfTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java.IndexedCollection_removeIfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java.IndexedCollection_removeAllTest.[void]testRemoveAllRemovesAllElements()", "name": "testRemoveAllRemovesAllElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllRemovesAllElements()", "original_string": "    @Test\n    public void testRemoveAllRemovesAllElements() {\n        Collection<String> toRemove = asList(\"1\", \"2\");\n        assertTrue(indexedCollection.removeAll(toRemove));\n        assertFalse(indexedCollection.contains(\"1\"));\n        assertFalse(indexedCollection.contains(\"2\"));\n        assertTrue(indexedCollection.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "class_name": "IndexedCollection_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java.IndexedCollection_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java.IndexedCollection_removeAllTest.[void]testRemoveAllReturnsFalseIfNoElementsRemoved()", "name": "testRemoveAllReturnsFalseIfNoElementsRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllReturnsFalseIfNoElementsRemoved()", "original_string": "    @Test\n    public void testRemoveAllReturnsFalseIfNoElementsRemoved() {\n        Collection<String> toRemove = asList(\"4\", \"5\");\n        assertFalse(indexedCollection.removeAll(toRemove));\n        assertTrue(indexedCollection.contains(\"1\"));\n        assertTrue(indexedCollection.contains(\"2\"));\n        assertTrue(indexedCollection.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "class_name": "IndexedCollection_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java.IndexedCollection_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java.IndexedCollection_removeAllTest.[void]testRemoveAllReindexesAfterRemoval()", "name": "testRemoveAllReindexesAfterRemoval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllReindexesAfterRemoval()", "original_string": "    @Test\n    public void testRemoveAllReindexesAfterRemoval() {\n        Collection<String> toRemove = asList(\"1\", \"2\");\n        indexedCollection.removeAll(toRemove);\n        assertEquals(\"3\", indexedCollection.get(3));\n        assertNull(indexedCollection.get(1));\n        assertNull(indexedCollection.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "class_name": "IndexedCollection_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java.IndexedCollection_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java.TransformedCollection_transformedCollectionTest.[void]testTransformedCollectionWithNonEmptyCollection()", "name": "testTransformedCollectionWithNonEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedCollectionWithNonEmptyCollection()", "original_string": "    @Test\n    public void testTransformedCollectionWithNonEmptyCollection() {\n        // Given\n        Collection<String> originalCollection = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When\n        TransformedCollection<String> transformedCollection = TransformedCollection.transformedCollection(originalCollection, transformer);\n\n        // Then\n        assertEquals(3, transformedCollection.size());\n        assertTrue(transformedCollection.contains(\"A\"));\n        assertTrue(transformedCollection.contains(\"B\"));\n        assertTrue(transformedCollection.contains(\"C\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java", "class_name": "TransformedCollection_transformedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java.TransformedCollection_transformedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java.TransformedCollection_transformedCollectionTest.[void]testTransformedCollectionWithEmptyCollection()", "name": "testTransformedCollectionWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedCollectionWithEmptyCollection()", "original_string": "    @Test\n    public void testTransformedCollectionWithEmptyCollection() {\n        // Given\n        Collection<String> originalCollection = Collections.emptyList();\n        Transformer<String, String> transformer = s -> s.toUpperCase();\n\n        // When\n        TransformedCollection<String> transformedCollection = TransformedCollection.transformedCollection(originalCollection, transformer);\n\n        // Then\n        assertTrue(transformedCollection.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java", "class_name": "TransformedCollection_transformedCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java.TransformedCollection_transformedCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionAdd()", "name": "testCollectionAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionAdd()", "original_string": "    @Test\n    public void testCollectionAdd() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final E[] elements = getFullElements();\n        for (final E element : elements) {\n            resetEmpty();\n            final boolean r = getCollection().add(element);\n            getConfirmed().add(element);\n            verify();\n            assertTrue(r, \"Empty collection changed after add\");\n            assertEquals(1, getCollection().size(), \"Collection size is 1 after first add\");\n        }\n\n        resetEmpty();\n        int size = 0;\n        for (final E element : elements) {\n            final boolean r = getCollection().add(element);\n            getConfirmed().add(element);\n            verify();\n            if (r) {\n                size++;\n            }\n            assertEquals(size, getCollection().size(), \"Collection size should grow after add\");\n            assertTrue(getCollection().contains(element), \"Collection should contain added element\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#add(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionAddAll()", "name": "testCollectionAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionAddAll()", "original_string": "    @Test\n    public void testCollectionAddAll() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        E[] elements = getFullElements();\n        boolean r = getCollection().addAll(Arrays.asList(elements));\n        getConfirmed().addAll(Arrays.asList(elements));\n        verify();\n        assertTrue(r, \"Empty collection should change after addAll\");\n        for (final E element : elements) {\n            assertTrue(getCollection().contains(element), \"Collection should contain added element\");\n        }\n\n        resetFull();\n        int size = getCollection().size();\n        elements = getOtherElements();\n        r = getCollection().addAll(Arrays.asList(elements));\n        getConfirmed().addAll(Arrays.asList(elements));\n        verify();\n        assertTrue(r, \"Full collection should change after addAll\");\n        for (final E element : elements) {\n            assertTrue(getCollection().contains(element),\n                    \"Full collection should contain added element\");\n        }\n        assertEquals(size + elements.length, getCollection().size(), \"Size should increase after addAll\");\n\n        resetFull();\n        size = getCollection().size();\n        r = getCollection().addAll(Arrays.asList(getFullElements()));\n        getConfirmed().addAll(Arrays.asList(getFullElements()));\n        verify();\n        if (r) {\n            assertTrue(size < getCollection().size(), \"Size should increase if addAll returns true\");\n        } else {\n            assertEquals(size, getCollection().size(), \"Size should not change if addAll returns false\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#addAll(Collection)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionClear()", "name": "testCollectionClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionClear()", "original_string": "    @Test\n    public void testCollectionClear() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        getCollection().clear(); // just to make sure it doesn't raise anything\n        verify();\n\n        resetFull();\n        getCollection().clear();\n        getConfirmed().clear();\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Test {@link Collection#clear()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionContains()", "name": "testCollectionContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionContains()", "original_string": "    @Test\n    public void testCollectionContains() {\n        Object[] elements;\n\n        resetEmpty();\n        elements = getFullElements();\n        for (int i = 0; i < elements.length; i++) {\n            assertFalse(getCollection().contains(elements[i]), \"Empty collection shouldn't contain element[\" + i + \"]\");\n        }\n        // make sure calls to \"contains\" don't change anything\n        verify();\n\n        elements = getOtherElements();\n        for (int i = 0; i < elements.length; i++) {\n            assertFalse(getCollection().contains(elements[i]), \"Empty collection shouldn't contain element[\" + i + \"]\");\n        }\n        // make sure calls to \"contains\" don't change anything\n        verify();\n\n        resetFull();\n        elements = getFullElements();\n        for (int i = 0; i < elements.length; i++) {\n            assertTrue(getCollection().contains(elements[i]),\n                    \"Full collection should contain element[\" + i + \"]\");\n        }\n        // make sure calls to \"contains\" don't change anything\n        verify();\n\n        resetFull();\n        elements = getOtherElements();\n        for (final Object element : elements) {\n            assertFalse(getCollection().contains(element), \"Full collection shouldn't contain element\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#contains(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionContainsAll()", "name": "testCollectionContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionContainsAll()", "original_string": "    @Test\n    public void testCollectionContainsAll() {\n        resetEmpty();\n        Collection<E> col = new HashSet<>();\n        assertTrue(getCollection().containsAll(col),\n                \"Every Collection should contain all elements of an \" + \"empty Collection.\");\n        col.addAll(Arrays.asList(getOtherElements()));\n        assertFalse(getCollection().containsAll(col),\n                \"Empty Collection shouldn't contain all elements of \" + \"a non-empty Collection.\");\n        // make sure calls to \"containsAll\" don't change anything\n        verify();\n\n        resetFull();\n        assertFalse(getCollection().containsAll(col), \"Full collection shouldn't contain other elements\");\n\n        col.clear();\n        col.addAll(Arrays.asList(getFullElements()));\n        assertTrue(getCollection().containsAll(col),\n                \"Full collection should containAll full elements\");\n        // make sure calls to \"containsAll\" don't change anything\n        verify();\n\n        final int min = getFullElements().length < 4 ? 0 : 2;\n        final int max = getFullElements().length == 1 ? 1 :\n                getFullElements().length <= 5 ? getFullElements().length - 1 : 5;\n        col = Arrays.asList(getFullElements()).subList(min, max);\n        assertTrue(getCollection().containsAll(col),\n                \"Full collection should containAll partial full elements\");\n        assertTrue(getCollection().containsAll(getCollection()),\n                \"Full collection should containAll itself\");\n        // make sure calls to \"containsAll\" don't change anything\n        verify();\n\n        col = new ArrayList<>(Arrays.asList(getFullElements()));\n        col.addAll(Arrays.asList(getFullElements()));\n        assertTrue(getCollection().containsAll(col),\n                \"Full collection should containAll duplicate full elements\");\n\n        // make sure calls to \"containsAll\" don't change anything\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#containsAll(Collection)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionIsEmpty()", "name": "testCollectionIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionIsEmpty()", "original_string": "    @Test\n    public void testCollectionIsEmpty() {\n        resetEmpty();\n        assertTrue(getCollection().isEmpty(), \"New Collection should be empty.\");\n        // make sure calls to \"isEmpty() don't change anything\n        verify();\n\n        resetFull();\n        assertFalse(getCollection().isEmpty(), \"Full collection shouldn't be empty\");\n        // make sure calls to \"isEmpty() don't change anything\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#isEmpty()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionIterator()", "name": "testCollectionIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionIterator()", "original_string": "    @Test\n    public void testCollectionIterator() {\n        resetEmpty();\n        Iterator<E> it1 = getCollection().iterator();\n        assertFalse(it1.hasNext(), \"Iterator for empty Collection shouldn't have next.\");\n        final Iterator<E> finalIt1 = it1;\n        assertThrows(NoSuchElementException.class, () -> finalIt1.next(),\n                \"Iterator at end of Collection should throw NoSuchElementException when next is called.\");\n        // make sure nothing has changed after non-modification\n        verify();\n\n        resetFull();\n        it1 = getCollection().iterator();\n        for (final E element : getCollection()) {\n            assertTrue(it1.hasNext(), \"Iterator for full collection should haveNext\");\n            it1.next();\n        }\n        assertFalse(it1.hasNext(), \"Iterator should be finished\");\n\n        final ArrayList<E> list = new ArrayList<>();\n        it1 = getCollection().iterator();\n        for (int i = 0; i < getCollection().size(); i++) {\n            final E next = it1.next();\n            assertTrue(getCollection().contains(next),\n                    \"Collection should contain element returned by its iterator\");\n            list.add(next);\n        }\n        final Iterator<E> finalIt2 = it1;\n        assertThrows(NoSuchElementException.class, () -> finalIt2.next(),\n                \"iterator.next() should raise NoSuchElementException after it finishes\");\n        // make sure nothing has changed after non-modification\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests the read-only functionality of {@link Collection#iterator()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionIteratorFailFast()", "name": "testCollectionIteratorFailFast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionIteratorFailFast()", "original_string": "    @Test\n    public void testCollectionIteratorFailFast() {\n        if (!isFailFastSupported()) {\n            return;\n        }\n\n        if (isAddSupported()) {\n            resetFull();\n            final Iterator<E> iter0 = getCollection().iterator();\n            final E o = getOtherElements()[0];\n            getCollection().add(o);\n            getConfirmed().add(o);\n            assertThrows(ConcurrentModificationException.class, () -> iter0.next(),\n                    \"next after add should raise ConcurrentModification\");\n            verify();\n\n            resetFull();\n            final Iterator<E> iter = getCollection().iterator();\n            getCollection().addAll(Arrays.asList(getOtherElements()));\n            getConfirmed().addAll(Arrays.asList(getOtherElements()));\n            assertThrows(ConcurrentModificationException.class, () -> iter.next(),\n                    \"next after addAll should raise ConcurrentModification\");\n            verify();\n        }\n\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetFull();\n        try {\n            final Iterator<E> iter = getCollection().iterator();\n            getCollection().clear();\n            iter.next();\n            fail(\"next after clear should raise ConcurrentModification\");\n        } catch (final ConcurrentModificationException | NoSuchElementException e) {\n            // ConcurrentModificationException: expected\n            // NoSuchElementException: (also legal given spec)\n        }\n\n        resetFull();\n        final Iterator<E> iter0 = getCollection().iterator();\n        getCollection().remove(getFullElements()[0]);\n        assertThrows(ConcurrentModificationException.class, () -> iter0.next(),\n                \"next after remove should raise ConcurrentModification\");\n\n        resetFull();\n        final Iterator<E> iter1 = getCollection().iterator();\n        getCollection().removeIf(e -> false);\n        assertThrows(ConcurrentModificationException.class, () -> iter1.next(),\n                \"next after removeIf should raise ConcurrentModification\");\n\n        resetFull();\n        final Iterator<E> iter2 = getCollection().iterator();\n        final List<E> sublist = Arrays.asList(getFullElements()).subList(2, 5);\n        getCollection().removeAll(sublist);\n        assertThrows(ConcurrentModificationException.class, () -> iter2.next(),\n                \"next after removeAll should raise ConcurrentModification\");\n\n        resetFull();\n        final Iterator<E> iter3 = getCollection().iterator();\n        final List<E> sublist3 = Arrays.asList(getFullElements()).subList(2, 5);\n        getCollection().retainAll(sublist3);\n        assertThrows(ConcurrentModificationException.class, () -> iter3.next(),\n                \"next after retainAll should raise ConcurrentModification\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests that the collection's iterator is fail-fast.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionIteratorRemove()", "name": "testCollectionIteratorRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCollectionIteratorRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCollectionIteratorRemove() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        assertThrows(IllegalStateException.class, () -> getCollection().iterator().remove(),\n                \"New iterator.remove should raise IllegalState\");\n        verify();\n\n        final Iterator<E> iter0 = getCollection().iterator();\n        iter0.hasNext();\n        assertThrows(IllegalStateException.class, () -> iter0.remove(),\n                \"New iterator.remove should raise IllegalState even after hasNext\");\n        verify();\n\n        resetFull();\n        int size = getCollection().size();\n        Iterator<E> iter = getCollection().iterator();\n        while (iter.hasNext()) {\n            Object o = iter.next();\n            // TreeMap reuses the Map Entry, so the verify below fails\n            // Clone it here if necessary\n            if (o instanceof Map.Entry) {\n                o = cloneMapEntry((Map.Entry<E, E>) o);\n            }\n            iter.remove();\n\n            // if the elements aren't distinguishable, we can just remove a\n            // matching element from the confirmed collection and verify\n            // contents are still the same.  Otherwise, we don't have the\n            // ability to distinguish the elements and determine which to\n            // remove from the confirmed collection (in which case, we don't\n            // verify because we don't know how).\n            //\n            // see areEqualElementsDistinguishable()\n            if (!areEqualElementsDistinguishable()) {\n                getConfirmed().remove(o);\n                verify();\n            }\n\n            size--;\n            assertEquals(size, getCollection().size(),\n                    \"Collection should shrink by one after iterator.remove\");\n        }\n        assertTrue(getCollection().isEmpty(), \"Collection should be empty after iterator purge\");\n\n        resetFull();\n        iter = getCollection().iterator();\n        iter.next();\n        iter.remove();\n        final Iterator<E> finalIter = iter;\n        assertThrows(IllegalStateException.class, () -> finalIter.remove(),\n                \"Second iter.remove should raise IllegalState\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests removals from {@link Collection#iterator()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionRemove()", "name": "testCollectionRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionRemove()", "original_string": "    @Test\n    public void testCollectionRemove() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        final E[] elements = getFullElements();\n        for (final E element : elements) {\n            assertFalse(getCollection().remove(element), \"Shouldn't remove nonexistent element\");\n            verify();\n        }\n\n        final E[] other = getOtherElements();\n\n        resetFull();\n        for (final E element : other) {\n            assertFalse(getCollection().remove(element), \"Shouldn't remove nonexistent other element\");\n            verify();\n        }\n\n        final int size = getCollection().size();\n        for (final E element : elements) {\n            resetFull();\n            assertTrue(getCollection().remove(element),\n                    \"Collection should remove extant element: \" + element);\n\n            // if the elements aren't distinguishable, we can just remove a\n            // matching element from the confirmed collection and verify\n            // contents are still the same.  Otherwise, we don't have the\n            // ability to distinguish the elements and determine which to\n            // remove from the confirmed collection (in which case, we don't\n            // verify because we don't know how).\n            //\n            // see areEqualElementsDistinguishable()\n            if (!areEqualElementsDistinguishable()) {\n                getConfirmed().remove(element);\n                verify();\n            }\n\n            assertEquals(size - 1, getCollection().size(), \"Collection should shrink after remove\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#remove(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionRemoveAll()", "name": "testCollectionRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionRemoveAll()", "original_string": "    @Test\n    public void testCollectionRemoveAll() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        assertFalse(getCollection().removeAll(Collections.EMPTY_SET), \"Empty collection removeAll should return false for empty input\");\n        verify();\n\n        assertFalse(getCollection().removeAll(new ArrayList<>(getCollection())), \"Empty collection removeAll should return false for nonempty input\");\n        verify();\n\n        resetFull();\n        assertFalse(getCollection().removeAll(Collections.EMPTY_SET), \"Full collection removeAll should return false for empty input\");\n        verify();\n\n        assertFalse(getCollection().removeAll(Arrays.asList(getOtherElements())), \"Full collection removeAll should return false for other elements\");\n        verify();\n\n        assertTrue(getCollection().removeAll(new HashSet<>(getCollection())),\n                \"Full collection removeAll should return true for full elements\");\n        getConfirmed().removeAll(new HashSet<>(getConfirmed()));\n        verify();\n\n        resetFull();\n        final int size = getCollection().size();\n        final int min = getFullElements().length < 4 ? 0 : 2;\n        final int max = getFullElements().length == 1 ? 1 :\n                getFullElements().length <= 5 ? getFullElements().length - 1 : 5;\n        final Collection<E> all = Arrays.asList(getFullElements()).subList(min, max);\n        assertTrue(getCollection().removeAll(all), \"Full collection removeAll should work\");\n        getConfirmed().removeAll(all);\n        verify();\n\n        assertTrue(getCollection().size() < size, \"Collection should shrink after removeAll\");\n        for (final E element : all) {\n            assertFalse(getCollection().contains(element), \"Collection shouldn't contain removed element\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#removeAll(Collection)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionRemoveIf()", "name": "testCollectionRemoveIf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionRemoveIf()", "original_string": "    @Test\n    public void testCollectionRemoveIf() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        assertFalse(getCollection().removeIf(e -> false), \"Empty collection removeIf should return false for a predicate that returns only false\");\n        verify();\n\n        assertFalse(getCollection().removeIf(e -> true), \"Empty collection removeIf should return false for a predicate that returns only true\");\n        verify();\n\n        resetFull();\n        assertFalse(getCollection().removeIf(e -> false), \"Full collection removeIf should return false for a predicate that returns only false\");\n        verify();\n\n        assertTrue(getCollection().removeIf(e -> true), \"Full collection removeIf should return true for a predicate that returns only true\");\n        getConfirmed().removeIf(e -> true);\n        verify();\n\n        resetFull();\n        final List<E> elements = Arrays.asList(getFullElements());\n\n        final int mid = getFullElements().length / 2;\n        final E target = elements.get(mid);\n\n        final int size = getCollection().size();\n        final int targetCount = Collections.frequency(elements, target);\n\n        final Predicate<E> filter = target::equals;\n\n        assertTrue(getCollection().removeIf(filter), \"Full collection removeIf should work\");\n        getConfirmed().removeIf(filter);\n        verify();\n\n        assertEquals(getCollection().size(), size - targetCount, \"Collection should shrink after removeIf\");\n        assertFalse(getCollection().contains(target), \"Collection shouldn't contain removed element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#removeIf(Predicate)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionRetainAll()", "name": "testCollectionRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionRetainAll()", "original_string": "    @Test\n    public void testCollectionRetainAll() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        final List<E> elements = Arrays.asList(getFullElements());\n        final List<E> other = Arrays.asList(getOtherElements());\n\n        assertFalse(getCollection().retainAll(Collections.EMPTY_SET), \"Empty retainAll() should return false\");\n        verify();\n\n        assertFalse(getCollection().retainAll(elements), \"Empty retainAll() should return false\");\n        verify();\n\n        resetFull();\n        assertTrue(getCollection().retainAll(Collections.EMPTY_SET),\n                \"Collection should change from retainAll empty\");\n        getConfirmed().retainAll(Collections.EMPTY_SET);\n        verify();\n\n        resetFull();\n        assertTrue(getCollection().retainAll(other), \"Collection changed from retainAll other\");\n        getConfirmed().retainAll(other);\n        verify();\n\n        resetFull();\n        int size = getCollection().size();\n        assertFalse(getCollection().retainAll(elements), \"Collection shouldn't change from retainAll elements\");\n        verify();\n        assertEquals(size, getCollection().size(), \"Collection size shouldn't change\");\n\n        if (getFullElements().length > 1) {\n            resetFull();\n            size = getCollection().size();\n            final int min = getFullElements().length < 4 ? 0 : 2;\n            final int max = getFullElements().length <= 5 ? getFullElements().length - 1 : 5;\n            assertTrue(getCollection().retainAll(elements.subList(min, max)),\n                    \"Collection should changed by partial retainAll\");\n            getConfirmed().retainAll(elements.subList(min, max));\n            verify();\n\n            for (final E element : getCollection()) {\n                assertTrue(elements.subList(min, max).contains(element), \"Collection only contains retained element\");\n            }\n        }\n\n        resetFull();\n        final HashSet<E> set = new HashSet<>(elements);\n        size = getCollection().size();\n        assertFalse(getCollection().retainAll(set),\n                \"Collection shouldn't change from retainAll without \" + \"duplicate elements\");\n        verify();\n        assertEquals(size, getCollection().size(),\n                \"Collection size didn't change from nonduplicate \" + \"retainAll\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#retainAll(Collection)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionSize()", "name": "testCollectionSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionSize()", "original_string": "    @Test\n    public void testCollectionSize() {\n        resetEmpty();\n        assertEquals(0, getCollection().size(), \"Size of new Collection is 0.\");\n\n        resetFull();\n        assertFalse(getCollection().isEmpty(), \"Size of full collection should be greater than zero\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#size()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionToArray()", "name": "testCollectionToArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionToArray()", "original_string": "    @Test\n    public void testCollectionToArray() {\n        resetEmpty();\n        assertEquals(0, getCollection().toArray().length,\n                \"Empty Collection should return empty array for toArray\");\n\n        resetFull();\n        final Object[] array = getCollection().toArray();\n        assertEquals(array.length, getCollection().size(),\n                \"Full collection toArray should be same size as collection\");\n        final Object[] confirmedArray = getConfirmed().toArray();\n        assertEquals(confirmedArray.length, array.length, \"length of array from confirmed collection should \"\n                + \"match the length of the collection's array\");\n        final boolean[] matched = new boolean[array.length];\n\n        for (int i = 0; i < array.length; i++) {\n            assertTrue(getCollection().contains(array[i]),\n                    \"Collection should contain element in toArray\");\n\n            boolean match = false;\n            // find a match in the confirmed array\n            for (int j = 0; j < array.length; j++) {\n                // skip already matched\n                if (matched[j]) {\n                    continue;\n                }\n                if (Objects.equals(array[i], confirmedArray[j])) {\n                    matched[j] = true;\n                    match = true;\n                    break;\n                }\n            }\n            if (!match) {\n                fail(\"element \" + i + \" in returned array should be found \"\n                        + \"in the confirmed collection's array\");\n            }\n        }\n        for (final boolean element : matched) {\n            assertTrue(element, \"Collection should return all its elements in \" + \"toArray\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#toArray()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionToArray2()", "name": "testCollectionToArray2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionToArray2()", "original_string": "    @Test\n    public void testCollectionToArray2() {\n        resetEmpty();\n        Object[] a = { new Object(), null, null };\n        Object[] array = getCollection().toArray(a);\n        assertEquals(array, a, \"Given array shouldn't shrink\");\n        assertNull(a[0], \"Last element should be set to null\");\n        verify();\n\n        resetFull();\n        assertThrows(ArrayStoreException.class, () -> getCollection().toArray(new Void[0]),\n                \"toArray(new Void[0]) should raise ArrayStore\");\n        verify();\n\n        // Casting to Object[] allows compilation on Java 11.\n        assertThrows(NullPointerException.class, () -> getCollection().toArray((Object[]) null),\n                \"toArray(null) should raise NPE\");\n        verify();\n\n        array = getCollection().toArray(ArrayUtils.EMPTY_OBJECT_ARRAY);\n        a = getCollection().toArray();\n\n        if ((getIterationBehaviour() & UNORDERED) != 0) {\n            assertUnorderedArrayEquals(array, a, \"toArray(Object[]) and toArray()\");\n        } else {\n            assertEquals(Arrays.asList(array), Arrays.asList(a), \"toArrays should be equal\");\n        }\n        // Figure out if they're all the same class\n        // TODO: It'd be nicer to detect a common superclass\n        final HashSet<Class<?>> classes = new HashSet<>();\n        for (final Object element : array) {\n            classes.add(element == null ? null : element.getClass());\n        }\n        if (classes.size() > 1) {\n            return;\n        }\n\n        Class<?> cl = classes.iterator().next();\n        if (Map.Entry.class.isAssignableFrom(cl)) {  // check needed for protective cases like Predicated/Unmod map entrySet\n            cl = Map.Entry.class;\n        }\n        a = (Object[]) Array.newInstance(cl, 0);\n        array = getCollection().toArray(a);\n        assertEquals(a.getClass(), array.getClass(),\n                \"toArray(Object[]) should return correct array type\");\n\n        if ((getIterationBehaviour() & UNORDERED) != 0) {\n            assertUnorderedArrayEquals(array, getCollection().toArray(), \"type-specific toArray(T[]) and toArray()\");\n        } else {\n            assertEquals(Arrays.asList(array),\n                    Arrays.asList(getCollection().toArray()),\n                    \"type-specific toArrays should be equal\");\n        }\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link Collection#toArray(Object[])}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testCollectionToString()", "name": "testCollectionToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollectionToString()", "original_string": "    @Test\n    public void testCollectionToString() {\n        resetEmpty();\n        assertNotNull(getCollection().toString(), \"toString shouldn't return null\");\n\n        resetFull();\n        assertNotNull(getCollection().toString(), \"toString shouldn't return null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@code toString} on a collection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testSerializeDeserializeThenCompare()", "name": "testSerializeDeserializeThenCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testSerializeDeserializeThenCompare()", "original_string": "    @Test\n    @Override\n    public void testSerializeDeserializeThenCompare() throws Exception {\n        Object obj = makeObject();\n        if (obj instanceof Serializable && isTestSerialization()) {\n            final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            final ObjectOutputStream out = new ObjectOutputStream(buffer);\n            out.writeObject(obj);\n            out.close();\n\n            final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n            final Object dest = in.readObject();\n            in.close();\n            if (isEqualsCheckable()) {\n                assertEquals(obj, dest, \"obj != deserialize(serialize(obj)) - EMPTY Collection\");\n            }\n        }\n        obj = makeFullCollection();\n        if (obj instanceof Serializable && isTestSerialization()) {\n            final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            final ObjectOutputStream out = new ObjectOutputStream(buffer);\n            out.writeObject(obj);\n            out.close();\n\n            final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n            final Object dest = in.readObject();\n            in.close();\n            if (isEqualsCheckable()) {\n                assertEquals(obj, dest, \"obj != deserialize(serialize(obj)) - FULL Collection\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testUnsupportedAdd()", "name": "testUnsupportedAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsupportedAdd()", "original_string": "    @Test\n    public void testUnsupportedAdd() {\n        if (isAddSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().add(getFullNonNullElements()[0]),\n                \"Empty collection should not support add.\");\n        // make sure things didn't change even if the expected exception was\n        // thrown.\n        verify();\n\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().addAll(Arrays.asList(getFullElements())),\n                \"Empty collection should not support addAll.\");\n        // make sure things didn't change even if the expected exception was\n        // thrown.\n        verify();\n\n        resetFull();\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().add(getFullNonNullElements()[0]),\n                \"Full collection should not support add.\");\n        // make sure things didn't change even if the expected exception was\n        // thrown.\n        verify();\n\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().addAll(Arrays.asList(getOtherElements())),\n                \"Full collection should not support addAll.\");\n        // make sure things didn't change even if the expected exception was\n        // thrown.\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n If {@link #isAddSupported()} returns false, tests that add operations\n raise <code>UnsupportedOperationException.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest.[void]testUnsupportedRemove()", "name": "testUnsupportedRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsupportedRemove()", "original_string": "    @Test\n    public void testUnsupportedRemove() {\n        if (isRemoveSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().clear(),\n                \"clear should raise UnsupportedOperationException\");\n        verify();\n\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().remove(null),\n                \"remove should raise UnsupportedOperationException\");\n        verify();\n\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().removeIf(e -> true),\n                \"removeIf should raise UnsupportedOperationException\");\n        verify();\n\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().removeAll(null),\n                \"removeAll should raise UnsupportedOperationException\");\n        verify();\n\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().retainAll(null),\n                \"retainAll should raise UnsupportedOperationException\");\n        verify();\n\n        resetFull();\n        final Iterator<E> iterator = getCollection().iterator();\n        iterator.next();\n        assertThrows(UnsupportedOperationException.class, () -> iterator.remove(),\n                \"iterator.remove should raise UnsupportedOperationException\");\n        verify();\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java", "class_name": "AbstractCollectionTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java.AbstractCollectionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n If isRemoveSupported() returns false, tests to see that remove\n operations raise an UnsupportedOperationException.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java.PredicatedCollection_addTest.[void]testAddValidElement()", "name": "testAddValidElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddValidElement()", "original_string": "    @Test\n    public void testAddValidElement() {\n        Predicate<String> predicate = NotNullPredicate.notNullPredicate();\n        PredicatedCollection<String> predicatedCollection = new PredicatedCollection<>(new ArrayList<>(), predicate);\n\n        boolean result = predicatedCollection.add(\"validElement\");\n\n        assertTrue(result);\n        assertEquals(1, predicatedCollection.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java", "class_name": "PredicatedCollection_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java.PredicatedCollection_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java.PredicatedCollection_addTest.[void]testAddInvalidElement()", "name": "testAddInvalidElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddInvalidElement()", "original_string": "    @Test\n    public void testAddInvalidElement() {\n        Predicate<String> predicate = NotNullPredicate.notNullPredicate();\n        PredicatedCollection<String> predicatedCollection = new PredicatedCollection<>(new ArrayList<>(), predicate);\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            predicatedCollection.add(null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java", "class_name": "PredicatedCollection_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java.PredicatedCollection_addTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        // Given\n        assertEquals(3, c.size());\n        assertFalse(c.isEmpty());\n\n        // When\n        c.clear();\n\n        // Then\n        assertEquals(0, c.size());\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "class_name": "CompositeCollection_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest.[void]testClearWithEmptyComposite()", "name": "testClearWithEmptyComposite", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearWithEmptyComposite()", "original_string": "    @Test\n    public void testClearWithEmptyComposite() {\n        // Given\n        CompositeCollection<String> emptyComposite = new CompositeCollection<>();\n\n        // When\n        emptyComposite.clear();\n\n        // Then\n        assertEquals(0, emptyComposite.size());\n        assertTrue(emptyComposite.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "class_name": "CompositeCollection_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest.[void]testClearWithSingleCollection()", "name": "testClearWithSingleCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearWithSingleCollection()", "original_string": "    @Test\n    public void testClearWithSingleCollection() {\n        // Given\n        CompositeCollection<String> singleComposite = new CompositeCollection<>(one);\n        assertEquals(2, singleComposite.size());\n        assertFalse(singleComposite.isEmpty());\n\n        // When\n        singleComposite.clear();\n\n        // Then\n        assertEquals(0, singleComposite.size());\n        assertTrue(singleComposite.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "class_name": "CompositeCollection_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest.[void]testClearWithMultipleCollections()", "name": "testClearWithMultipleCollections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearWithMultipleCollections()", "original_string": "    @Test\n    public void testClearWithMultipleCollections() {\n        // Given\n        Collection<String> three = new HashSet<>();\n        three.add(\"element4\");\n        c.addComposited(three);\n        assertEquals(4, c.size());\n        assertFalse(c.isEmpty());\n\n        // When\n        c.clear();\n\n        // Then\n        assertEquals(0, c.size());\n        assertTrue(c.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "class_name": "CompositeCollection_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java.CompositeCollection_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java.IndexedCollection_removeTest.[void]testRemoveElementFromCollection()", "name": "testRemoveElementFromCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveElementFromCollection()", "original_string": "    @Test\n    public void testRemoveElementFromCollection() {\n        originalCollection.add(\"1\");\n        originalCollection.add(\"2\");\n        originalCollection.add(\"3\");\n\n        indexedCollection.reindex();\n\n        assertTrue(indexedCollection.remove(\"2\"));\n        assertFalse(indexedCollection.contains(\"2\"));\n        assertEquals(2, indexedCollection.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java", "class_name": "IndexedCollection_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java.IndexedCollection_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java.IndexedCollection_removeTest.[void]testRemoveNonExistentElementFromCollection()", "name": "testRemoveNonExistentElementFromCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNonExistentElementFromCollection()", "original_string": "    @Test\n    public void testRemoveNonExistentElementFromCollection() {\n        originalCollection.add(\"1\");\n        originalCollection.add(\"2\");\n        originalCollection.add(\"3\");\n\n        indexedCollection.reindex();\n\n        assertFalse(indexedCollection.remove(\"4\"));\n        assertEquals(3, indexedCollection.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java", "class_name": "IndexedCollection_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java.IndexedCollection_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java.IndexedCollection_removeTest.[void]testRemoveElementAndReindex()", "name": "testRemoveElementAndReindex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveElementAndReindex()", "original_string": "    @Test\n    public void testRemoveElementAndReindex() {\n        originalCollection.add(\"1\");\n        originalCollection.add(\"2\");\n        originalCollection.add(\"3\");\n\n        indexedCollection.reindex();\n\n        assertTrue(indexedCollection.remove(\"2\"));\n        indexedCollection.reindex();\n\n        assertFalse(indexedCollection.contains(\"2\"));\n        assertEquals(2, indexedCollection.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java", "class_name": "IndexedCollection_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java.IndexedCollection_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest.[void]testSizeWithEmptyComposite()", "name": "testSizeWithEmptyComposite", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithEmptyComposite()", "original_string": "    @Test\n    public void testSizeWithEmptyComposite() {\n        assertEquals(0, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "class_name": "CompositeCollection_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest.[void]testSizeWithSingleCollection()", "name": "testSizeWithSingleCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithSingleCollection()", "original_string": "    @Test\n    public void testSizeWithSingleCollection() {\n        c.addComposited(one);\n        assertEquals(2, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "class_name": "CompositeCollection_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest.[void]testSizeWithMultipleCollections()", "name": "testSizeWithMultipleCollections", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithMultipleCollections()", "original_string": "    @Test\n    public void testSizeWithMultipleCollections() {\n        c.addComposited(one, two);\n        assertEquals(4, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "class_name": "CompositeCollection_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest.[void]testSizeAfterAddingElement()", "name": "testSizeAfterAddingElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterAddingElement()", "original_string": "    @Test\n    public void testSizeAfterAddingElement() {\n        c.addComposited(one);\n        Collection<String> temp = new ArrayList<>(one);\n        temp.add(\"5\");\n        c.removeComposited(one);\n        c.addComposited(temp);\n        assertEquals(3, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "class_name": "CompositeCollection_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest.[void]testSizeAfterRemovingElement()", "name": "testSizeAfterRemovingElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterRemovingElement()", "original_string": "    @Test\n    public void testSizeAfterRemovingElement() {\n        c.addComposited(one);\n        Collection<String> temp = new ArrayList<>(one);\n        temp.remove(\"1\");\n        c.removeComposited(one);\n        c.addComposited(temp);\n        assertEquals(1, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "class_name": "CompositeCollection_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest.[void]testSizeAfterRemovingCollection()", "name": "testSizeAfterRemovingCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterRemovingCollection()", "original_string": "    @Test\n    public void testSizeAfterRemovingCollection() {\n        c.addComposited(one, two);\n        c.removeComposited(one);\n        assertEquals(2, c.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "class_name": "CompositeCollection_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java.CompositeCollection_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest.[void]testAddAllPass()", "name": "testAddAllPass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAllPass()", "original_string": "    @Test\n    public void testAddAllPass() {\n        final PredicatedCollection.Builder<String> builder = PredicatedCollection.notNullBuilder();\n        builder.addAll(Arrays.asList(\"test1\", null, \"test2\"));\n        assertEquals(builder.createPredicatedList().size(), 2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "class_name": "PredicatedCollectionBuilderTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that only items that pass the Predicate end up in the buffer.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest.[void]testAddFail()", "name": "testAddFail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddFail()", "original_string": "    @Test\n    public void testAddFail() {\n        final PredicatedCollection.Builder<String> builder = PredicatedCollection.notNullBuilder();\n        builder.add((String) null);\n        assertTrue(builder.createPredicatedList().isEmpty());\n\n        assertEquals(1, builder.rejectedElements().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "class_name": "PredicatedCollectionBuilderTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that failing the Predicate means NOT ending up in the buffer.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest.[void]testAddPass()", "name": "testAddPass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddPass()", "original_string": "    @Test\n    public void testAddPass() {\n        final PredicatedCollection.Builder<String> builder = PredicatedCollection.notNullBuilder();\n        builder.add(\"test\");\n        assertEquals(builder.createPredicatedList().size(), 1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "class_name": "PredicatedCollectionBuilderTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that passing the Predicate means ending up in the buffer.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest.[void]testCreatePredicatedCollectionWithNotNullPredicate()", "name": "testCreatePredicatedCollectionWithNotNullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreatePredicatedCollectionWithNotNullPredicate()", "original_string": "    @Test\n    public void testCreatePredicatedCollectionWithNotNullPredicate() {\n        final PredicatedCollection.Builder<String> builder = PredicatedCollection.notNullBuilder();\n        builder.add(\"test1\");\n        builder.add((String) null);\n\n        final List<String> predicatedList = builder.createPredicatedList();\n        checkPredicatedCollection1(predicatedList);\n\n        final Set<String> predicatedSet = builder.createPredicatedSet();\n        checkPredicatedCollection1(predicatedSet);\n\n        final Bag<String> predicatedBag = builder.createPredicatedBag();\n        checkPredicatedCollection1(predicatedBag);\n\n        final Queue<String> predicatedQueue = builder.createPredicatedQueue();\n        checkPredicatedCollection1(predicatedQueue);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "class_name": "PredicatedCollectionBuilderTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest.[void]testCreatePredicatedCollectionWithPredicate()", "name": "testCreatePredicatedCollectionWithPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreatePredicatedCollectionWithPredicate()", "original_string": "    @Test\n    public void testCreatePredicatedCollectionWithPredicate() {\n        final OddPredicate p = new OddPredicate();\n        final PredicatedCollection.Builder<Integer> builder = PredicatedCollection.builder(p);\n\n        builder.add(1);\n        builder.add(2);\n        builder.add(3);\n\n        final List<Integer> predicatedList = builder.createPredicatedList();\n        checkPredicatedCollection2(predicatedList);\n\n        final Set<Integer> predicatedSet = builder.createPredicatedSet();\n        checkPredicatedCollection2(predicatedSet);\n\n        final Bag<Integer> predicatedBag = builder.createPredicatedBag();\n        checkPredicatedCollection2(predicatedBag);\n\n        final Queue<Integer> predicatedQueue = builder.createPredicatedQueue();\n        checkPredicatedCollection2(predicatedQueue);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java", "class_name": "PredicatedCollectionBuilderTest", "class_uri": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java.PredicatedCollectionBuilderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java.ListOrderedMap_previousKeyTest.[void]testPreviousKey_existingKey()", "name": "testPreviousKey_existingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPreviousKey_existingKey()", "original_string": "    @Test\n    void testPreviousKey_existingKey() {\n        assertEquals(\"key2\", map.previousKey(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "class_name": "ListOrderedMap_previousKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java.ListOrderedMap_previousKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java.ListOrderedMap_previousKeyTest.[void]testPreviousKey_firstKey()", "name": "testPreviousKey_firstKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPreviousKey_firstKey()", "original_string": "    @Test\n    void testPreviousKey_firstKey() {\n        assertNull(map.previousKey(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "class_name": "ListOrderedMap_previousKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java.ListOrderedMap_previousKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java.ListOrderedMap_previousKeyTest.[void]testPreviousKey_nonExistingKey()", "name": "testPreviousKey_nonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPreviousKey_nonExistingKey()", "original_string": "    @Test\n    void testPreviousKey_nonExistingKey() {\n        assertNull(map.previousKey(\"nonExistingKey\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "class_name": "ListOrderedMap_previousKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java.ListOrderedMap_previousKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java.TransformedMapTest.[void]testFactory_Decorate()", "name": "testFactory_Decorate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_Decorate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_Decorate() {\n        final Map<K, V> base = new HashMap<>();\n        base.put((K) \"A\", (V) \"1\");\n        base.put((K) \"B\", (V) \"2\");\n        base.put((K) \"C\", (V) \"3\");\n\n        final Map<K, V> trans = TransformedMap\n                .transformingMap(\n                        base,\n                        null,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(3, trans.size());\n        assertEquals(\"1\", trans.get(\"A\"));\n        assertEquals(\"2\", trans.get(\"B\"));\n        assertEquals(\"3\", trans.get(\"C\"));\n        trans.put((K) \"D\", (V) \"4\");\n        assertEquals(Integer.valueOf(4), trans.get(\"D\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java", "class_name": "TransformedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java.TransformedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java.TransformedMapTest.[void]testFactory_decorateTransform()", "name": "testFactory_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_decorateTransform()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_decorateTransform() {\n        final Map<K, V> base = new HashMap<>();\n        base.put((K) \"A\", (V) \"1\");\n        base.put((K) \"B\", (V) \"2\");\n        base.put((K) \"C\", (V) \"3\");\n\n        final Map<K, V> trans = TransformedMap\n                .transformedMap(\n                        base,\n                        (Transformer<? super K, ? extends K>) TransformedCollectionTest.TO_LOWER_CASE_TRANSFORMER,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(3, trans.size());\n        assertEquals(Integer.valueOf(1), trans.get(\"a\"));\n        assertEquals(Integer.valueOf(2), trans.get(\"b\"));\n        assertEquals(Integer.valueOf(3), trans.get(\"c\"));\n        trans.put((K) \"D\", (V) \"4\");\n        assertEquals(Integer.valueOf(4), trans.get(\"d\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java", "class_name": "TransformedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java.TransformedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java.TransformedMapTest.[void]testTransformedMap()", "name": "testTransformedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testTransformedMap()", "original_string": "    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testTransformedMap() {\n        final Object[] els = { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n\n        Map<K, V> map = TransformedMap\n                .transformingMap(\n                        new HashMap<>(),\n                        (Transformer<? super K, ? extends K>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,\n                        null);\n        assertEquals(0, map.size());\n        for (int i = 0; i < els.length; i++) {\n            map.put((K) els[i], (V) els[i]);\n            assertEquals(i + 1, map.size());\n            assertTrue(map.containsKey(Integer.valueOf((String) els[i])));\n            assertFalse(map.containsKey(els[i]));\n            assertTrue(map.containsValue(els[i]));\n            assertEquals(els[i], map.get(Integer.valueOf((String) els[i])));\n        }\n\n        assertNull(map.remove(els[0]));\n        assertEquals(els[0], map.remove(Integer.valueOf((String) els[0])));\n\n        map = TransformedMap.transformingMap(new HashMap(), null,\n                                             // cast needed for eclipse compiler\n                                             (Transformer) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, map.size());\n        for (int i = 0; i < els.length; i++) {\n            map.put((K) els[i], (V) els[i]);\n            assertEquals(i + 1, map.size());\n            assertTrue(map.containsValue(Integer.valueOf((String) els[i])));\n            assertFalse(map.containsValue(els[i]));\n            assertTrue(map.containsKey(els[i]));\n            assertEquals(Integer.valueOf((String) els[i]), map.get(els[i]));\n        }\n\n        assertEquals(Integer.valueOf((String) els[0]), map.remove(els[0]));\n\n        final Set<Map.Entry<K, V>> entrySet = map.entrySet();\n        final Map.Entry<K, V>[] array = entrySet.toArray(new Map.Entry[0]);\n        array[0].setValue((V) \"66\");\n        assertEquals(Integer.valueOf(66), array[0].getValue());\n        assertEquals(Integer.valueOf(66), map.get(array[0].getKey()));\n\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        entry.setValue((V) \"88\");\n        assertEquals(Integer.valueOf(88), entry.getValue());\n        assertEquals(Integer.valueOf(88), map.get(entry.getKey()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java", "class_name": "TransformedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java.TransformedMapTest", "attributes": {"modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"rawtypes\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java.HashedMapTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone() {\n        final HashedMap<K, V> map = new HashedMap<>(10);\n        map.put((K) \"1\", (V) \"1\");\n        final HashedMap<K, V> cloned = map.clone();\n        assertEquals(map.size(), cloned.size());\n        assertSame(map.get(\"1\"), cloned.get(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java", "class_name": "HashedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java.HashedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java.HashedMapTest.[void]testInitialCapacityZero()", "name": "testInitialCapacityZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInitialCapacityZero()", "original_string": "    @Test\n    public void testInitialCapacityZero() {\n        final HashedMap<String, String> map = new HashedMap<>(0);\n        assertEquals(1, map.data.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java", "class_name": "HashedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java.HashedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-323\">COLLECTIONS-323</a>.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java.HashedMapTest.[void]testInternalState()", "name": "testInternalState", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInternalState()", "original_string": "    @Test\n    public void testInternalState() {\n        final HashedMap<Integer, Integer> map = new HashedMap<>(42, 0.75f);\n        assertEquals(0.75f, map.loadFactor, 0.1f);\n        assertEquals(0, map.size);\n        assertEquals(64, map.data.length);\n        assertEquals(48, map.threshold);\n        assertEquals(0, map.modCount);\n\n        // contract: the capacity is ensured when too many elements are added\n        final HashedMap<Integer, Integer> tmpMap = new HashedMap<>();\n        // we need to put at least the \"threshold\" number of elements\n        // in order to double the capacity\n        for (int i = 1; i <= map.threshold; i++) {\n            tmpMap.put(i, i);\n        }\n        map.putAll(tmpMap);\n        // the threshold has changed due to calling ensureCapacity\n        assertEquals(96, map.threshold);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java", "class_name": "HashedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/HashedMapTest.java.HashedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest.[void]testGetExistingKey()", "name": "testGetExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetExistingKey()", "original_string": "    @Test\n    public void testGetExistingKey() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        assertEquals(\"1-2\", multiKeyMap.get(1, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "class_name": "MultiKeyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest.[void]testGetNonExistingKey()", "name": "testGetNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNonExistingKey()", "original_string": "    @Test\n    public void testGetNonExistingKey() {\n        assertNull(multiKeyMap.get(1, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "class_name": "MultiKeyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest.[void]testGetAfterRemove()", "name": "testGetAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterRemove()", "original_string": "    @Test\n    public void testGetAfterRemove() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        multiKeyMap.removeMultiKey(1, 2);\n        assertNull(multiKeyMap.get(1, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "class_name": "MultiKeyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest.[void]testGetWithNullKeys()", "name": "testGetWithNullKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithNullKeys()", "original_string": "    @Test\n    public void testGetWithNullKeys() {\n        multiKeyMap.put(null, null, \"null-null\");\n        assertEquals(\"null-null\", multiKeyMap.get(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "class_name": "MultiKeyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest.[void]testGetWithMixedKeys()", "name": "testGetWithMixedKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithMixedKeys()", "original_string": "    @Test\n    public void testGetWithMixedKeys() {\n        multiKeyMap.put(1, null, \"1-null\");\n        multiKeyMap.put(null, 2, \"null-2\");\n        assertEquals(\"1-null\", multiKeyMap.get(1, null));\n        assertEquals(\"null-2\", multiKeyMap.get(null, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "class_name": "MultiKeyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest.[void]testGetWithMultipleEntries()", "name": "testGetWithMultipleEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithMultipleEntries()", "original_string": "    @Test\n    public void testGetWithMultipleEntries() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        multiKeyMap.put(1, 3, \"1-3\");\n        multiKeyMap.put(2, 2, \"2-2\");\n        assertEquals(\"1-2\", multiKeyMap.get(1, 2));\n        assertEquals(\"1-3\", multiKeyMap.get(1, 3));\n        assertEquals(\"2-2\", multiKeyMap.get(2, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "class_name": "MultiKeyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest.[void]testGetWithOverwrittenEntry()", "name": "testGetWithOverwrittenEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithOverwrittenEntry()", "original_string": "    @Test\n    public void testGetWithOverwrittenEntry() {\n        multiKeyMap.put(1, 2, \"1-2\");\n        multiKeyMap.put(1, 2, \"new-1-2\");\n        assertEquals(\"new-1-2\", multiKeyMap.get(1, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "class_name": "MultiKeyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java.MultiKeyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest.[void]testMapGet()", "name": "testMapGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testMapGet()", "original_string": "    @Override\n    @Test\n    public void testMapGet() {\n        Map<Integer, Number> map = lazySortedMap(new TreeMap<>(), oneFactory);\n        assertEquals(0, map.size());\n        final Number i1 = map.get(5);\n        assertEquals(1, i1);\n        assertEquals(1, map.size());\n\n        map = lazySortedMap(new TreeMap<>(), FactoryUtils.<Number>nullFactory());\n        final Number o = map.get(5);\n        assertNull(o);\n        assertEquals(1, map.size());\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java", "class_name": "LazySortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest.[void]testReverseSortOrder()", "name": "testReverseSortOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReverseSortOrder()", "original_string": "    @Test\n    public void testReverseSortOrder() {\n        final SortedMap<String, Number> map = lazySortedMap(new ConcurrentSkipListMap<>(reverseStringComparator), oneFactory);\n        map.put(\"A\", 5);\n        map.get(\"B\"); // Entry with value \"One\" created\n        map.put(\"C\", 8);\n        assertEquals(\"A\", map.lastKey(), \"Last key should be A\");\n        assertEquals(\"C\", map.firstKey(), \"First key should be C\");\n        assertEquals(\"B\", map.tailMap(\"B\").firstKey(),\n                \"First key in tail map should be B\");\n        assertEquals(\"B\", map.headMap(\"A\").lastKey(),\n                \"Last key in head map should be B\");\n        assertEquals(\"B\", map.subMap(\"C\", \"A\").lastKey(),\n                \"Last key in submap should be B\");\n\n        final Comparator<?> c = map.comparator();\n        assertSame(c, reverseStringComparator, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java", "class_name": "LazySortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest.[void]testSortOrder()", "name": "testSortOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSortOrder()", "original_string": "    @Test\n    public void testSortOrder() {\n        final SortedMap<String, Number> map = lazySortedMap(new TreeMap<>(), oneFactory);\n        map.put(\"A\",  5);\n        map.get(\"B\"); // Entry with value \"One\" created\n        map.put(\"C\", 8);\n        assertEquals(\"A\", map.firstKey(), \"First key should be A\");\n        assertEquals(\"C\", map.lastKey(), \"Last key should be C\");\n        assertEquals(\"B\", map.tailMap(\"B\").firstKey(),\n                \"First key in tail map should be B\");\n        assertEquals(\"B\", map.headMap(\"C\").lastKey(),\n                \"Last key in head map should be B\");\n        assertEquals(\"B\", map.subMap(\"A\", \"C\").lastKey(),\n                \"Last key in submap should be B\");\n\n        final Comparator<?> c = map.comparator();\n        assertNull(c, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java", "class_name": "LazySortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest.[void]testTransformerDecorate()", "name": "testTransformerDecorate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformerDecorate()", "original_string": "    @Test\n    public void testTransformerDecorate() {\n        final Transformer<Object, Integer> transformer = TransformerUtils.asTransformer(oneFactory);\n        final SortedMap<Integer, Number> map = lazySortedMap(new TreeMap<>(), transformer);\n        assertInstanceOf(LazySortedMap.class, map);\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> lazySortedMap(new TreeMap<>(), (Transformer<Integer, Number>) null),\n                        \"Expecting NullPointerException for null transformer\"),\n                () -> assertThrows(NullPointerException.class, () -> lazySortedMap((SortedMap<Integer, Number>) null, transformer),\n                        \"Expecting NullPointerException for null map\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java", "class_name": "LazySortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazySortedMapTest.java.LazySortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_entrySetTest.java.UnmodifiableMap_entrySetTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        originalMap.put(\"key2\", \"value2\");\n        Map<String, String> unmodifiableMap = UnmodifiableMap.unmodifiableMap(originalMap);\n\n        // When\n        Set<Map.Entry<String, String>> entrySet = unmodifiableMap.entrySet();\n\n        // Then\n        assertEquals(2, entrySet.size());\n        assertTrue(entrySet.containsAll(originalMap.entrySet()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_entrySetTest.java", "class_name": "UnmodifiableMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_entrySetTest.java.UnmodifiableMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java.LazySortedMap_headMapTest.[void]testHeadMap()", "name": "testHeadMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeadMap()", "original_string": "    @Test\n    public void testHeadMap() {\n        // Given\n        SortedMap<Integer, String> originalMap = new TreeMap<>();\n        originalMap.put(1, \"One\");\n        originalMap.put(2, \"Two\");\n        originalMap.put(3, \"Three\");\n\n        Factory<String> factory = () -> \"Default\";\n        LazySortedMap<Integer, String> lazySortedMap = LazySortedMap.lazySortedMap(originalMap, factory);\n\n        // When\n        SortedMap<Integer, String> headMap = lazySortedMap.headMap(3);\n\n        // Then\n        assertEquals(2, headMap.size());\n        assertTrue(headMap.containsKey(1));\n        assertTrue(headMap.containsKey(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java", "class_name": "LazySortedMap_headMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java.LazySortedMap_headMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest.[void]testRemoveExistingKey()", "name": "testRemoveExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveExistingKey()", "original_string": "    @Test\n    public void testRemoveExistingKey() {\n        map.put(\"key1\", \"value1\");\n        assertTrue(map.containsKey(\"key1\"));\n        assertEquals(\"value1\", map.remove(\"key1\"));\n        assertFalse(map.containsKey(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "class_name": "StaticBucketMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest.[void]testRemoveNonExistingKey()", "name": "testRemoveNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNonExistingKey()", "original_string": "    @Test\n    public void testRemoveNonExistingKey() {\n        assertFalse(map.containsKey(\"key2\"));\n        assertNull(map.remove(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "class_name": "StaticBucketMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest.[void]testRemoveNullKey()", "name": "testRemoveNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNullKey()", "original_string": "    @Test\n    public void testRemoveNullKey() {\n        map.put(null, \"nullValue\");\n        assertTrue(map.containsKey(null));\n        assertEquals(\"nullValue\", map.remove(null));\n        assertFalse(map.containsKey(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "class_name": "StaticBucketMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest.[void]testRemoveFromEmptyMap()", "name": "testRemoveFromEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromEmptyMap()", "original_string": "    @Test\n    public void testRemoveFromEmptyMap() {\n        assertFalse(map.containsKey(\"key3\"));\n        assertNull(map.remove(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "class_name": "StaticBucketMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest.[void]testRemoveWithMultipleEntriesInBucket()", "name": "testRemoveWithMultipleEntriesInBucket", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithMultipleEntriesInBucket()", "original_string": "    @Test\n    public void testRemoveWithMultipleEntriesInBucket() {\n        map.put(\"key4\", \"value4\");\n        map.put(\"key5\", \"value5\");\n        assertTrue(map.containsKey(\"key4\"));\n        assertTrue(map.containsKey(\"key5\"));\n        assertEquals(\"value4\", map.remove(\"key4\"));\n        assertFalse(map.containsKey(\"key4\"));\n        assertTrue(map.containsKey(\"key5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "class_name": "StaticBucketMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java.StaticBucketMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java.ListOrderedMap_putAllTest.[void]testPutAll_IndexOutOfBounds()", "name": "testPutAll_IndexOutOfBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPutAll_IndexOutOfBounds()", "original_string": "    @Test\n    void testPutAll_IndexOutOfBounds() {\n        Map<Integer, String> inputMap = new HashMap<>();\n        inputMap.put(1, \"one\");\n        inputMap.put(2, \"two\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> map.putAll(-1, inputMap));\n        assertThrows(IndexOutOfBoundsException.class, () -> map.putAll(1, inputMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "class_name": "ListOrderedMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java.ListOrderedMap_putAllTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java.ListOrderedMap_putAllTest.[void]testPutAll_AddNewEntries()", "name": "testPutAll_AddNewEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPutAll_AddNewEntries()", "original_string": "    @Test\n    void testPutAll_AddNewEntries() {\n        Map<Integer, String> inputMap = new HashMap<>();\n        inputMap.put(1, \"one\");\n        inputMap.put(2, \"two\");\n\n        map.putAll(0, inputMap);\n\n        assertEquals(2, map.size());\n        assertEquals(\"one\", map.getValue(0));\n        assertEquals(\"two\", map.getValue(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "class_name": "ListOrderedMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java.ListOrderedMap_putAllTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java.ListOrderedMap_putAllTest.[void]testPutAll_ReplaceExistingEntries()", "name": "testPutAll_ReplaceExistingEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPutAll_ReplaceExistingEntries()", "original_string": "    @Test\n    void testPutAll_ReplaceExistingEntries() {\n        map.put(1, \"oldOne\");\n        map.put(2, \"oldTwo\");\n\n        Map<Integer, String> inputMap = new HashMap<>();\n        inputMap.put(1, \"newOne\");\n        inputMap.put(2, \"newTwo\");\n\n        map.putAll(0, inputMap);\n\n        assertEquals(2, map.size());\n        assertEquals(\"newOne\", map.getValue(0));\n        assertEquals(\"newTwo\", map.getValue(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "class_name": "ListOrderedMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java.ListOrderedMap_putAllTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java.StaticBucketMap_sizeTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSize()", "original_string": "    @Test\n    void testSize() {\n        StaticBucketMap<Integer, String> map = new StaticBucketMap<>(1);\n\n        // Given: Map with one entry\n        map.put(1, \"one\");\n\n        // When: Calculating size\n        int size = map.size();\n\n        // Then: Size should be 1\n        assertEquals(1, size);\n\n        // Given: Map with one entry removed\n        map.remove(1);\n\n        // When: Calculating size\n        size = map.size();\n\n        // Then: Size should be 0\n        assertEquals(0, size);\n\n        // Given: Map with all entries cleared\n        map.put(2, \"two\");\n        map.clear();\n\n        // When: Calculating size\n        size = map.size();\n\n        // Then: Size should be 0\n        assertEquals(0, size);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java", "class_name": "StaticBucketMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java.StaticBucketMap_sizeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java.StaticBucketMap_containsKeyTest.[void]testContainsKey_KeyExists()", "name": "testContainsKey_KeyExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsKey_KeyExists()", "original_string": "    @Test\n    void testContainsKey_KeyExists() {\n        map.put(\"key1\", \"value1\");\n        assertTrue(map.containsKey(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "class_name": "StaticBucketMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java.StaticBucketMap_containsKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java.StaticBucketMap_containsKeyTest.[void]testContainsKey_KeyDoesNotExist()", "name": "testContainsKey_KeyDoesNotExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsKey_KeyDoesNotExist()", "original_string": "    @Test\n    void testContainsKey_KeyDoesNotExist() {\n        assertFalse(map.containsKey(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "class_name": "StaticBucketMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java.StaticBucketMap_containsKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java.StaticBucketMap_containsKeyTest.[void]testContainsKey_KeyRemoved()", "name": "testContainsKey_KeyRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsKey_KeyRemoved()", "original_string": "    @Test\n    void testContainsKey_KeyRemoved() {\n        map.put(\"key3\", \"value3\");\n        map.remove(\"key3\");\n        assertFalse(map.containsKey(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "class_name": "StaticBucketMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java.StaticBucketMap_containsKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java.LazySortedMap_subMapTest.[void]testSubMap()", "name": "testSubMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubMap()", "original_string": "    @Test\n    public void testSubMap() {\n        // Given\n        SortedMap<Integer, String> originalMap = new TreeMap<>();\n        originalMap.put(1, \"One\");\n        originalMap.put(2, \"Two\");\n        originalMap.put(3, \"Three\");\n        originalMap.put(4, \"Four\");\n        originalMap.put(5, \"Five\");\n\n        Factory<String> factory = () -> \"Default\";\n        LazySortedMap<Integer, String> lazySortedMap = new LazySortedMap<>(originalMap, factory);\n\n        // When\n        SortedMap<Integer, String> subMap = lazySortedMap.subMap(2, 4);\n\n        // Then\n        assertNotNull(subMap);\n        assertEquals(2, subMap.size());\n        assertEquals(\"Two\", subMap.get(2));\n        assertEquals(\"Three\", subMap.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java", "class_name": "LazySortedMap_subMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java.LazySortedMap_subMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEmptyMapCompatibility()", "name": "testEmptyMapCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyMapCompatibility()", "original_string": "    @Test\n    public void testEmptyMapCompatibility() throws Exception {\n        /*\n         * Create canonical objects with this code Map map = makeEmptyMap(); if (!(map instanceof Serializable)) return;\n         *\n         * writeExternalFormToDisk((Serializable) map, getCanonicalEmptyCollectionName(map));\n         */\n\n        // test to make sure the canonical form has been preserved\n        final Map<K, V> map = makeObject();\n        if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            @SuppressWarnings(\"unchecked\")\n            final Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n            assertEquals(0, map2.size(), \"Map is empty\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Map against the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetClearChangesMap()", "name": "testEntrySetClearChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetClearChangesMap()", "original_string": "    @Test\n    public void testEntrySetClearChangesMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // clear values, reflected in map\n        resetFull();\n        Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        assertFalse(getMap().isEmpty());\n        assertFalse(entrySet.isEmpty());\n        entrySet.clear();\n        assertTrue(getMap().isEmpty());\n        assertTrue(entrySet.isEmpty());\n\n        // clear map, reflected in values\n        resetFull();\n        entrySet = getMap().entrySet();\n        assertFalse(getMap().isEmpty());\n        assertFalse(entrySet.isEmpty());\n        getMap().clear();\n        assertTrue(getMap().isEmpty());\n        assertTrue(entrySet.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the {@link Map#entrySet()} collection is backed by the underlying map for clear().\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetContains1()", "name": "testEntrySetContains1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetContains1()", "original_string": "    @Test\n    public void testEntrySetContains1() {\n        resetFull();\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        assertTrue(entrySet.contains(entry));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetContains2()", "name": "testEntrySetContains2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetContains2()", "original_string": "    @Test\n    public void testEntrySetContains2() {\n        resetFull();\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        final Map.Entry<K, V> test = cloneMapEntry(entry);\n        assertTrue(entrySet.contains(test));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetContains3()", "name": "testEntrySetContains3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySetContains3()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySetContains3() {\n        resetFull();\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        final HashMap<K, V> temp = new HashMap<>();\n        temp.put(entry.getKey(), (V) \"A VERY DIFFERENT VALUE\");\n        final Map.Entry<K, V> test = temp.entrySet().iterator().next();\n        assertFalse(entrySet.contains(test));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetIteratorRemoveChangesMap()", "name": "testEntrySetIteratorRemoveChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetIteratorRemoveChangesMap()", "original_string": "    @Test\n    public void testEntrySetIteratorRemoveChangesMap() {\n        resetFull();\n        for (final Iterator<Map.Entry<K, V>> iter = getMap().entrySet().iterator(); iter.hasNext();) {\n            final K key = iter.next().getKey();\n            try {\n                iter.remove();\n            } catch (final UnsupportedOperationException e) {\n                return;\n            }\n            assertFalse(getMap().containsKey(key));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that entrySet.iterator.remove changes the underlying map.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetRemove1()", "name": "testEntrySetRemove1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetRemove1()", "original_string": "    @Test\n    public void testEntrySetRemove1() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        resetFull();\n        final int size = getMap().size();\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        final K key = entry.getKey();\n\n        assertTrue(entrySet.remove(entry));\n        assertFalse(getMap().containsKey(key));\n        assertEquals(size - 1, getMap().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetRemove2()", "name": "testEntrySetRemove2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetRemove2()", "original_string": "    @Test\n    public void testEntrySetRemove2() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        resetFull();\n        final int size = getMap().size();\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        final K key = entry.getKey();\n        final Map.Entry<K, V> test = cloneMapEntry(entry);\n\n        assertTrue(entrySet.remove(test));\n        assertFalse(getMap().containsKey(key));\n        assertEquals(size - 1, getMap().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetRemove3()", "name": "testEntrySetRemove3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySetRemove3()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySetRemove3() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        resetFull();\n        final int size = getMap().size();\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        final K key = entry.getKey();\n        final HashMap<K, V> temp = new HashMap<>();\n        temp.put(entry.getKey(), (V) \"A VERY DIFFERENT VALUE\");\n        final Map.Entry<K, V> test = temp.entrySet().iterator().next();\n\n        assertFalse(entrySet.remove(test));\n        assertTrue(getMap().containsKey(key));\n        assertEquals(size, getMap().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetRemoveAll()", "name": "testEntrySetRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetRemoveAll()", "original_string": "    @Test\n    public void testEntrySetRemoveAll() {\n        resetFull();\n        final K[] sampleKeys = getSampleKeys();\n        final V[] sampleValues = getSampleValues();\n        // verify map looks as expected:\n        for (int i = 0; i < sampleKeys.length; i++) {\n            if (!getMap().containsKey(sampleKeys[i])) {\n                return;\n            }\n            final V value = sampleValues[i];\n            final V test = getMap().get(sampleKeys[i]);\n            if (value == test || value != null && value.equals(test)) {\n                continue;\n            }\n            return;\n        }\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final HashSet<Map.Entry<K, V>> comparisonSet = new HashSet<>(entrySet);\n        try {\n            assertFalse(entrySet.removeAll(Collections.<Map.Entry<K, V>>emptySet()));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertEquals(sampleKeys.length, getMap().size());\n        try {\n            assertTrue(entrySet.removeAll(comparisonSet));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest entrySet.removeAll.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetRemoveChangesMap()", "name": "testEntrySetRemoveChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetRemoveChangesMap()", "original_string": "    @Test\n    public void testEntrySetRemoveChangesMap() {\n        resetFull();\n        final K[] sampleKeys = getSampleKeys();\n        final V[] sampleValues = getSampleValues();\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        for (int i = 0; i < sampleKeys.length; i++) {\n            try {\n                entrySet.remove(new DefaultMapEntry<>(sampleKeys[i], sampleValues[i]));\n            } catch (final UnsupportedOperationException e) {\n                // if entrySet removal is unsupported, just skip this test\n                return;\n            }\n            assertFalse(getMap().containsKey(sampleKeys[i]), \"Entry should have been removed from the underlying map.\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the {@link Map#entrySet} set is backed by the underlying map by removing from the entrySet set and testing if the entry was removed from the\nmap.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testEntrySetRetainAll()", "name": "testEntrySetRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetRetainAll()", "original_string": "    @Test\n    public void testEntrySetRetainAll() {\n        resetFull();\n        final K[] sampleKeys = getSampleKeys();\n        final V[] sampleValues = getSampleValues();\n        // verify map looks as expected:\n        for (int i = 0; i < sampleKeys.length; i++) {\n            if (!getMap().containsKey(sampleKeys[i])) {\n                return;\n            }\n            final V value = sampleValues[i];\n            final V test = getMap().get(sampleKeys[i]);\n            if (value == test || value != null && value.equals(test)) {\n                continue;\n            }\n            return;\n        }\n        final Set<Map.Entry<K, V>> entrySet = getMap().entrySet();\n        final HashSet<Map.Entry<K, V>> comparisonSet = new HashSet<>(entrySet);\n        try {\n            assertFalse(entrySet.retainAll(comparisonSet));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertEquals(sampleKeys.length, getMap().size());\n        try {\n            assertTrue(entrySet.retainAll(Collections.<Map.Entry<K, V>>emptySet()));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest entrySet.retainAll.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testFullMapCompatibility()", "name": "testFullMapCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullMapCompatibility()", "original_string": "    @Test\n    public void testFullMapCompatibility() throws Exception {\n        /*\n         * Create canonical objects with this code Map map = makeFullMap(); if (!(map instanceof Serializable)) return;\n         *\n         * writeExternalFormToDisk((Serializable) map, getCanonicalFullCollectionName(map));\n         */\n\n        // test to make sure the canonical form has been preserved\n        final Map<K, V> map = makeFullMap();\n        if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            @SuppressWarnings(\"unchecked\")\n            final Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n            assertEquals(getSampleKeys().length, map2.size(), \"Map is the right size\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Map against the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testKeySetClearChangesMap()", "name": "testKeySetClearChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetClearChangesMap()", "original_string": "    @Test\n    public void testKeySetClearChangesMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // clear values, reflected in map\n        resetFull();\n        Set<K> keySet = getMap().keySet();\n        assertFalse(getMap().isEmpty());\n        assertFalse(keySet.isEmpty());\n        keySet.clear();\n        assertTrue(getMap().isEmpty());\n        assertTrue(keySet.isEmpty());\n\n        // clear map, reflected in values\n        resetFull();\n        keySet = getMap().keySet();\n        assertFalse(getMap().isEmpty());\n        assertFalse(keySet.isEmpty());\n        getMap().clear();\n        assertTrue(getMap().isEmpty());\n        assertTrue(keySet.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the {@link Map#keySet} collection is backed by the underlying map for clear().\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testKeySetIteratorRemoveChangesMap()", "name": "testKeySetIteratorRemoveChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetIteratorRemoveChangesMap()", "original_string": "    @Test\n    public void testKeySetIteratorRemoveChangesMap() {\n        resetFull();\n        for (final Iterator<K> iter = getMap().keySet().iterator(); iter.hasNext();) {\n            final K key = iter.next();\n            try {\n                iter.remove();\n            } catch (final UnsupportedOperationException e) {\n                return;\n            }\n            assertFalse(getMap().containsKey(key));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that keySet.iterator.remove changes the underlying map.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testKeySetRemoveAll()", "name": "testKeySetRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetRemoveAll()", "original_string": "    @Test\n    public void testKeySetRemoveAll() {\n        resetFull();\n        final Set<K> keys = getMap().keySet();\n        final List<K> sampleKeysAsList = Arrays.asList(getSampleKeys());\n        if (!keys.equals(sampleKeysAsList)) {\n            return;\n        }\n        try {\n            assertFalse(keys.removeAll(Collections.<K>emptySet()));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertEquals(sampleKeysAsList, keys);\n        try {\n            assertTrue(keys.removeAll(sampleKeysAsList));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest keySet.removeAll.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testKeySetRemoveChangesMap()", "name": "testKeySetRemoveChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetRemoveChangesMap()", "original_string": "    @Test\n    public void testKeySetRemoveChangesMap() {\n        resetFull();\n        final K[] sampleKeys = getSampleKeys();\n        final Set<K> keys = getMap().keySet();\n        for (final K sampleKey : sampleKeys) {\n            try {\n                keys.remove(sampleKey);\n            } catch (final UnsupportedOperationException e) {\n                // if key.remove is unsupported, just skip this test\n                return;\n            }\n            assertFalse(getMap().containsKey(sampleKey), \"Key should have been removed from the underlying map.\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the {@link Map#keySet} set is backed by the underlying map by removing from the keySet set and testing if the key was removed from the map.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testKeySetRetainAll()", "name": "testKeySetRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetRetainAll()", "original_string": "    @Test\n    public void testKeySetRetainAll() {\n        resetFull();\n        final Set<K> keys = getMap().keySet();\n        final List<K> sampleKeysAsList = Arrays.asList(getSampleKeys());\n        if (!keys.equals(sampleKeysAsList)) {\n            return;\n        }\n        try {\n            assertFalse(keys.retainAll(sampleKeysAsList));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertEquals(sampleKeysAsList, keys);\n        try {\n            assertTrue(keys.retainAll(Collections.<K>emptySet()));\n        } catch (final UnsupportedOperationException e) {\n            return;\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest keySet.retainAll.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMakeMap()", "name": "testMakeMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMakeMap()", "original_string": "    @Test\n    public void testMakeMap() {\n        final Map<K, V> em = makeObject();\n        assertNotNull(em, \"failure in test: makeEmptyMap must return a non-null map.\");\n\n        final Map<K, V> em2 = makeObject();\n        assertNotNull(em, \"failure in test: makeEmptyMap must return a non-null map.\");\n\n        assertNotSame(em, em2, \"failure in test: makeEmptyMap must return a new map \" + \"with each invocation.\");\n\n        final Map<K, V> fm = makeFullMap();\n        assertNotNull(fm, \"failure in test: makeFullMap must return a non-null map.\");\n\n        final Map<K, V> fm2 = makeFullMap();\n        assertNotNull(fm2, \"failure in test: makeFullMap must return a non-null map.\");\n\n        assertNotSame(fm, fm2, \"failure in test: makeFullMap must return a new map \" + \"with each invocation.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest to ensure that makeEmptyMap and makeFull returns a new non-null map with each invocation.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapClear()", "name": "testMapClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapClear()", "original_string": "    @Test\n    public void testMapClear() {\n        if (!isRemoveSupported()) {\n            resetFull();\n            assertThrows(UnsupportedOperationException.class, () -> getMap().clear(), \"Expected UnsupportedOperationException on clear\");\n            return;\n        }\n\n        resetEmpty();\n        getMap().clear();\n        getConfirmed().clear();\n        verify();\n\n        resetFull();\n        getMap().clear();\n        getConfirmed().clear();\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link Map#clear()}. If the map {@link #isRemoveSupported() can add and remove elements}, then {@link Map#size()} and {@link Map#isEmpty()} are\nused to ensure that map has no elements after a call to clear. If the map does not support adding and removing elements, this method checks to ensure\nclear throws an UnsupportedOperationException.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapContainsKey()", "name": "testMapContainsKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapContainsKey()", "original_string": "    @Test\n    public void testMapContainsKey() {\n        final Object[] keys = getSampleKeys();\n\n        resetEmpty();\n        for (final Object key : keys) {\n            assertFalse(getMap().containsKey(key), \"Map must not contain key when map is empty\");\n        }\n        verify();\n\n        resetFull();\n        for (final Object key : keys) {\n            assertTrue(getMap().containsKey(key), \"Map must contain key for a mapping in the map. \" + \"Missing: \" + key);\n        }\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.containsKey(Object) by verifying it returns false for all sample keys on a map created using an empty map and returns true for all sample keys\nreturned on a full map.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapContainsValue()", "name": "testMapContainsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapContainsValue()", "original_string": "    @Test\n    public void testMapContainsValue() {\n        final Object[] values = getSampleValues();\n\n        resetEmpty();\n        for (final Object value : values) {\n            assertFalse(getMap().containsValue(value), \"Empty map must not contain value\");\n        }\n        verify();\n\n        resetFull();\n        for (final Object value : values) {\n            assertTrue(getMap().containsValue(value), \"Map must contain value for a mapping in the map.\");\n        }\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.containsValue(Object) by verifying it returns false for all sample values on an empty map and returns true for all sample values on a full map.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapEquals()", "name": "testMapEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapEquals()", "original_string": "    @Test\n    public void testMapEquals() {\n        resetEmpty();\n        assertEquals(getMap(), confirmed, \"Empty maps unequal.\");\n        verify();\n\n        resetFull();\n        assertEquals(getMap(), confirmed, \"Full maps unequal.\");\n        verify();\n\n        resetFull();\n        // modify the HashMap created from the full map and make sure this\n        // change results in map.equals() to return false.\n        final Iterator<K> iter = confirmed.keySet().iterator();\n        iter.next();\n        iter.remove();\n        assertFalse(getMap().equals(confirmed), \"Different maps equal.\");\n\n        resetFull();\n        assertFalse(getMap().equals(null), \"equals(null) returned true.\");\n        assertFalse(getMap().equals(new Object()), \"equals(new Object()) returned true.\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.equals(Object)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapGet()", "name": "testMapGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapGet()", "original_string": "    @Test\n    public void testMapGet() {\n        resetEmpty();\n\n        final Object[] keys = getSampleKeys();\n        final Object[] values = getSampleValues();\n\n        for (final Object key : keys) {\n            assertNull(getMap().get(key), \"Empty map.get() should return null.\");\n        }\n        verify();\n\n        resetFull();\n        for (int i = 0; i < keys.length; i++) {\n            assertEquals(values[i], getMap().get(keys[i]), \"Full map.get() should return value from mapping.\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.get(Object)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapHashCode()", "name": "testMapHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapHashCode()", "original_string": "    @Test\n    public void testMapHashCode() {\n        resetEmpty();\n        assertEquals(getMap().hashCode(), confirmed.hashCode(), \"Empty maps have different hashCodes.\");\n\n        resetFull();\n        assertEquals(getMap().hashCode(), confirmed.hashCode(), \"Equal maps have different hashCodes.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.hashCode()\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapIsEmpty()", "name": "testMapIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIsEmpty()", "original_string": "    @Test\n    public void testMapIsEmpty() {\n        resetEmpty();\n        assertTrue(getMap().isEmpty(), \"Map.isEmpty() should return true with an empty map\");\n        verify();\n\n        resetFull();\n        assertFalse(getMap().isEmpty(), \"Map.isEmpty() should return false with a non-empty map\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.isEmpty()\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapPut()", "name": "testMapPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapPut()", "original_string": "    @Test\n    public void testMapPut() {\n        resetEmpty();\n        final K[] keys = getSampleKeys();\n        final V[] values = getSampleValues();\n        final V[] newValues = getNewSampleValues();\n\n        if (isPutAddSupported()) {\n            for (int i = 0; i < keys.length; i++) {\n                final Object o = getMap().put(keys[i], values[i]);\n                getConfirmed().put(keys[i], values[i]);\n                verify();\n                assertNull(o, \"First map.put should return null\");\n                assertTrue(getMap().containsKey(keys[i]), \"Map should contain key after put\");\n                assertTrue(getMap().containsValue(values[i]), \"Map should contain value after put\");\n            }\n            if (isPutChangeSupported()) {\n                for (int i = 0; i < keys.length; i++) {\n                    final Object o = getMap().put(keys[i], newValues[i]);\n                    getConfirmed().put(keys[i], newValues[i]);\n                    verify();\n                    assertEquals(values[i], o, \"Map.put should return previous value when changed\");\n                    assertTrue(getMap().containsKey(keys[i]), \"Map should still contain key after put when changed\");\n                    assertTrue(getMap().containsValue(newValues[i]), \"Map should contain new value after put when changed\");\n\n                    // if duplicates are allowed, we're not guaranteed that the value\n                    // no longer exists, so don't try checking that.\n                    if (!isAllowDuplicateValues()) {\n                        assertFalse(getMap().containsValue(values[i]), \"Map should not contain old value after put when changed\");\n                    }\n                }\n            } else {\n                try {\n                    // two possible exception here, either valid\n                    getMap().put(keys[0], newValues[0]);\n                    fail(\"Expected IllegalArgumentException or UnsupportedOperationException on put (change)\");\n                } catch (final IllegalArgumentException | UnsupportedOperationException ex) {\n                    // ignore\n                }\n            }\n\n        } else if (isPutChangeSupported()) {\n            resetEmpty();\n            try {\n                getMap().put(keys[0], values[0]);\n                fail(\"Expected UnsupportedOperationException or IllegalArgumentException on put (add) when fixed size\");\n            } catch (final IllegalArgumentException | UnsupportedOperationException ex) {\n                // ignore\n            }\n\n            resetFull();\n            int i = 0;\n            for (final Iterator<K> it = getMap().keySet().iterator(); it.hasNext() && i < newValues.length; i++) {\n                final K key = it.next();\n                final V o = getMap().put(key, newValues[i]);\n                final V value = getConfirmed().put(key, newValues[i]);\n                verify();\n                assertEquals(value, o, \"Map.put should return previous value when changed\");\n                assertTrue(getMap().containsKey(key), \"Map should still contain key after put when changed\");\n                assertTrue(getMap().containsValue(newValues[i]), \"Map should contain new value after put when changed\");\n\n                // if duplicates are allowed, we're not guaranteed that the value\n                // no longer exists, so don't try checking that.\n                if (!isAllowDuplicateValues()) {\n                    assertFalse(getMap().containsValue(values[i]), \"Map should not contain old value after put when changed\");\n                }\n            }\n        } else {\n            assertThrows(UnsupportedOperationException.class, () -> getMap().put(keys[0], values[0]), \"Expected UnsupportedOperationException on put (add)\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.put(Object, Object)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapPutAll()", "name": "testMapPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapPutAll()", "original_string": "    @Test\n    public void testMapPutAll() {\n        if (!isPutAddSupported()) {\n            if (!isPutChangeSupported()) {\n                final Map<K, V> temp = makeFullMap();\n                resetEmpty();\n                assertThrows(UnsupportedOperationException.class, () -> getMap().putAll(temp), \"Expected UnsupportedOperationException on putAll\");\n            }\n            return;\n        }\n\n        // check putAll OK adding empty map to empty map\n        resetEmpty();\n        assertEquals(0, getMap().size());\n        getMap().putAll(new HashMap<>());\n        assertEquals(0, getMap().size());\n\n        // check putAll OK adding empty map to non-empty map\n        resetFull();\n        final int size = getMap().size();\n        getMap().putAll(new HashMap<>());\n        assertEquals(size, getMap().size());\n\n        // check putAll OK adding non-empty map to empty map\n        resetEmpty();\n        Map<K, V> m2 = makeFullMap();\n        getMap().putAll(m2);\n        getConfirmed().putAll(m2);\n        verify();\n\n        // check putAll OK adding non-empty JDK map to empty map\n        resetEmpty();\n        m2 = makeConfirmedMap();\n        final K[] keys = getSampleKeys();\n        final V[] values = getSampleValues();\n        for (int i = 0; i < keys.length; i++) {\n            m2.put(keys[i], values[i]);\n        }\n        getMap().putAll(m2);\n        getConfirmed().putAll(m2);\n        verify();\n\n        // check putAll OK adding non-empty JDK map to non-empty map\n        resetEmpty();\n        m2 = makeConfirmedMap();\n        getMap().put(keys[0], values[0]);\n        getConfirmed().put(keys[0], values[0]);\n        verify();\n        for (int i = 1; i < keys.length; i++) {\n            m2.put(keys[i], values[i]);\n        }\n        getMap().putAll(m2);\n        getConfirmed().putAll(m2);\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.putAll(map)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapPutNullKey()", "name": "testMapPutNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapPutNullKey()", "original_string": "    @Test\n    public void testMapPutNullKey() {\n        resetFull();\n        final V[] values = getSampleValues();\n\n        if (isPutAddSupported()) {\n            if (isAllowNullKey()) {\n                getMap().put(null, values[0]);\n            } else {\n                try {\n                    getMap().put(null, values[0]);\n                    fail(\"put(null, value) should throw NPE/IAE\");\n                } catch (final NullPointerException | IllegalArgumentException ex) {\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.put(null, value)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapPutNullValue()", "name": "testMapPutNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapPutNullValue()", "original_string": "    @Test\n    public void testMapPutNullValue() {\n        resetFull();\n        final K[] keys = getSampleKeys();\n\n        if (isPutAddSupported()) {\n            if (isAllowNullValue()) {\n                getMap().put(keys[0], null);\n            } else {\n                try {\n                    getMap().put(keys[0], null);\n                    fail(\"put(key, null) should throw NPE/IAE\");\n                } catch (final NullPointerException | IllegalArgumentException ex) {\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.put(null, value)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapRemove()", "name": "testMapRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapRemove()", "original_string": "    @Test\n    public void testMapRemove() {\n        if (!isRemoveSupported()) {\n            resetFull();\n            assertThrows(UnsupportedOperationException.class, () -> getMap().remove(getMap().keySet().iterator().next()),\n                    \"Expected UnsupportedOperationException on remove\");\n            return;\n        }\n\n        resetEmpty();\n\n        final Object[] keys = getSampleKeys();\n        final Object[] values = getSampleValues();\n        for (final Object key : keys) {\n            final Object o = getMap().remove(key);\n            assertNull(o, \"First map.remove should return null\");\n        }\n        verify();\n\n        resetFull();\n\n        for (int i = 0; i < keys.length; i++) {\n            final Object o = getMap().remove(keys[i]);\n            getConfirmed().remove(keys[i]);\n            verify();\n\n            assertEquals(values[i], o, \"map.remove with valid key should return value\");\n        }\n\n        final Object[] other = getOtherKeys();\n\n        resetFull();\n        final int size = getMap().size();\n        for (final Object element : other) {\n            final Object o = getMap().remove(element);\n            assertNull(o, \"map.remove for nonexistent key should return null\");\n            assertEquals(size, getMap().size(), \"map.remove for nonexistent key should not \" + \"shrink map\");\n        }\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.remove(Object)\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapSize()", "name": "testMapSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapSize()", "original_string": "    @Test\n    public void testMapSize() {\n        resetEmpty();\n        assertEquals(0, getMap().size(), \"Map.size() should be 0 with an empty map\");\n        verify();\n\n        resetFull();\n        assertEquals(getSampleKeys().length, getMap().size(), \"Map.size() should equal the number of entries \" + \"in the map\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.size()\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testMapToString()", "name": "testMapToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapToString()", "original_string": "    @Test\n    public void testMapToString() {\n        resetEmpty();\n        assertNotNull(getMap().toString(), \"Empty map toString() should not return null\");\n        verify();\n\n        resetFull();\n        assertNotNull(getMap().toString(), \"Empty map toString() should not return null\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests Map.toString(). Since the format of the string returned by the toString() method is not defined in the Map interface, there is no common way to\ntest the results of the toString() method. Therefore, it is encouraged that Map implementations override this test with one that checks the format\nmatches any format defined in its API. This default implementation just verifies that the toString() method does not return null.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testSampleMappings()", "name": "testSampleMappings", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSampleMappings()", "original_string": "    @Test\n    public void testSampleMappings() {\n        final Object[] keys = getSampleKeys();\n        final Object[] values = getSampleValues();\n        final Object[] newValues = getNewSampleValues();\n\n        assertNotNull(keys, \"failure in test: Must have keys returned from \" + \"getSampleKeys.\");\n\n        assertNotNull(values, \"failure in test: Must have values returned from \" + \"getSampleValues.\");\n\n        // verify keys and values have equivalent lengths (in case getSampleX are\n        // overridden)\n        assertEquals(keys.length, values.length, \"failure in test: not the same number of sample \" + \"keys and values.\");\n\n        assertEquals(values.length, newValues.length, \"failure in test: not the same number of values and new values.\");\n\n        // verify there aren't duplicate keys, and check values\n        for (int i = 0; i < keys.length - 1; i++) {\n            for (int j = i + 1; j < keys.length; j++) {\n                assertTrue(keys[i] != null || keys[j] != null, \"failure in test: duplicate null keys.\");\n                assertTrue(keys[i] == null || keys[j] == null || !keys[i].equals(keys[j]) && !keys[j].equals(keys[i]),\n                        \"failure in test: duplicate non-null key.\");\n            }\n            assertTrue(keys[i] != null || isAllowNullKey(), \"failure in test: found null key, but isNullKeySupported \" + \"is false.\");\n            assertTrue(values[i] != null || isAllowNullValue(), \"failure in test: found null value, but isNullValueSupported \" + \"is false.\");\n            assertTrue(newValues[i] != null || isAllowNullValue(), \"failure in test: found null new value, but isNullValueSupported \" + \"is false.\");\n            assertTrue(values[i] != newValues[i] && (values[i] == null || !values[i].equals(newValues[i])),\n                    \"failure in test: values should not be the same as new value\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest to ensure the test setup is working properly. This method checks to ensure that the getSampleKeys and getSampleValues methods are returning results\nthat look appropriate. That is, they both return a non-null array of equal length. The keys array must not have any duplicate values, and may only\ncontain a (single) null key if isNullKeySupported() returns true. The values array must only have a null value if useNullValue() is true and may only\nhave duplicate values if isAllowDuplicateValues() returns true.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testValuesClearChangesMap()", "name": "testValuesClearChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesClearChangesMap()", "original_string": "    @Test\n    public void testValuesClearChangesMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // clear values, reflected in map\n        resetFull();\n        Collection<V> values = getMap().values();\n        assertFalse(getMap().isEmpty());\n        assertFalse(values.isEmpty());\n        values.clear();\n        assertTrue(getMap().isEmpty());\n        assertTrue(values.isEmpty());\n\n        // clear map, reflected in values\n        resetFull();\n        values = getMap().values();\n        assertFalse(getMap().isEmpty());\n        assertFalse(values.isEmpty());\n        getMap().clear();\n        assertTrue(getMap().isEmpty());\n        assertTrue(values.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the {@link Map#bitMaps} collection is backed by the underlying map for clear().\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testValuesIteratorRemoveChangesMap()", "name": "testValuesIteratorRemoveChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testValuesIteratorRemoveChangesMap()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testValuesIteratorRemoveChangesMap() {\n        resetFull();\n        final List<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n        final Map<V, Integer> cardinality = CollectionUtils.getCardinalityMap(sampleValuesAsList);\n        final Collection<V> values = getMap().values();\n        for (final Iterator<V> iter = values.iterator(); iter.hasNext();) {\n            final V value = iter.next();\n            Integer count = cardinality.get(value);\n            if (count == null) {\n                return;\n            }\n            try {\n                iter.remove();\n                cardinality.put(value, --count);\n            } catch (final UnsupportedOperationException e) {\n                // if values.iterator.remove is unsupported, just skip this test\n                return;\n            }\n            final boolean expected = count > 0;\n            final StringBuilder msg = new StringBuilder(\"Value should \");\n            msg.append(expected ? \"yet \" : \"no longer \");\n            msg.append(\"be present in the underlying map\");\n            assertEquals(expected, getMap().containsValue(value), msg.toString());\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": "\nVerifies that values.iterator.remove changes the underlying map.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testValuesRemoveAll()", "name": "testValuesRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesRemoveAll()", "original_string": "    @Test\n    public void testValuesRemoveAll() {\n        resetFull();\n        final Collection<V> values = getMap().values();\n        final List<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n        if (!values.equals(sampleValuesAsList)) {\n            return;\n        }\n        try {\n            assertFalse(values.removeAll(Collections.<V>emptySet()));\n        } catch (final UnsupportedOperationException e) {\n            // if values.removeAll is unsupported, just skip this test\n            return;\n        }\n        assertEquals(sampleValuesAsList.size(), getMap().size());\n        try {\n            assertTrue(values.removeAll(sampleValuesAsList));\n        } catch (final UnsupportedOperationException e) {\n            // if values.removeAll is unsupported, just skip this test\n            return;\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests values.removeAll.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testValuesRemoveChangesMap()", "name": "testValuesRemoveChangesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesRemoveChangesMap()", "original_string": "    @Test\n    public void testValuesRemoveChangesMap() {\n        resetFull();\n        final V[] sampleValues = getSampleValues();\n        final Collection<V> values = getMap().values();\n        for (final V sampleValue : sampleValues) {\n            if (map.containsValue(sampleValue)) {\n                int j = 0; // loop counter prevents infinite loops when remove is broken\n                while (values.contains(sampleValue) && j < 10000) {\n                    try {\n                        values.remove(sampleValue);\n                    } catch (final UnsupportedOperationException e) {\n                        // if values.remove is unsupported, just skip this test\n                        return;\n                    }\n                    j++;\n                }\n                assertTrue(j < 10000, \"values().remove(obj) is broken\");\n                assertFalse(getMap().containsValue(sampleValue), \"Value should have been removed from the underlying map.\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the {@link Map#bitMaps} collection is backed by the underlying map by removing from the values collection and testing if the value was removed\nfrom the map.\n<p>\nWe should really test the \"vice versa\" case--that values removed from the map are removed from the values collection--also, but that's a more difficult\ntest to construct (lacking a \"removeValue\" method.)\n</p>\n<p>\nSee bug <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-92\"> COLLECTIONS-92</a>.\n</p>\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest.[void]testValuesRetainAll()", "name": "testValuesRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesRetainAll()", "original_string": "    @Test\n    public void testValuesRetainAll() {\n        resetFull();\n        final Collection<V> values = getMap().values();\n        final List<V> sampleValuesAsList = Arrays.asList(getSampleValues());\n        if (!values.equals(sampleValuesAsList)) {\n            return;\n        }\n        try {\n            assertFalse(values.retainAll(sampleValuesAsList));\n        } catch (final UnsupportedOperationException e) {\n            // if values.retainAll is unsupported, just skip this test\n            return;\n        }\n        assertEquals(sampleValuesAsList.size(), getMap().size());\n        try {\n            assertTrue(values.retainAll(Collections.<V>emptySet()));\n        } catch (final UnsupportedOperationException e) {\n            // if values.retainAll is unsupported, just skip this test\n            return;\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java", "class_name": "AbstractMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractMapTest.java.AbstractMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest values.retainAll.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_valuesTest.java.UnmodifiableOrderedMap_valuesTest.[void]testValues()", "name": "testValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValues()", "original_string": "    @Test\n    public void testValues() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        originalMap.put(\"key2\", \"value2\");\n        OrderedMap<String, String> orderedMap = UnmodifiableOrderedMap.unmodifiableOrderedMap(new LinkedMap<>(originalMap));\n\n        // When\n        Collection<String> values = orderedMap.values();\n\n        // Then\n        assertTrue(values instanceof UnmodifiableCollection);\n        assertTrue(values.contains(\"value1\"));\n        assertTrue(values.contains(\"value2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_valuesTest.java", "class_name": "UnmodifiableOrderedMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_valuesTest.java.UnmodifiableOrderedMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java.ListOrderedMap_lastKeyTest.[void]testLastKey_EmptyMap()", "name": "testLastKey_EmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLastKey_EmptyMap()", "original_string": "    @Test\n    void testLastKey_EmptyMap() {\n        ListOrderedMap<String, String> map = new ListOrderedMap<>();\n        assertThrows(NoSuchElementException.class, map::lastKey);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java", "class_name": "ListOrderedMap_lastKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java.ListOrderedMap_lastKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java.ListOrderedMap_lastKeyTest.[void]testLastKey_NonEmptyMap()", "name": "testLastKey_NonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testLastKey_NonEmptyMap()", "original_string": "    @Test\n    void testLastKey_NonEmptyMap() {\n        ListOrderedMap<String, String> map = new ListOrderedMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        assertEquals(\"key2\", map.lastKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java", "class_name": "ListOrderedMap_lastKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java.ListOrderedMap_lastKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_keySetTest.java.UnmodifiableMap_keySetTest.[void]testKeySet()", "name": "testKeySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySet()", "original_string": "    @Test\n    public void testKeySet() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        originalMap.put(\"key2\", \"value2\");\n        Map<String, String> unmodifiableMap = UnmodifiableMap.unmodifiableMap(originalMap);\n\n        // When\n        Set<String> keySet = unmodifiableMap.keySet();\n\n        // Then\n        assertTrue(keySet instanceof UnmodifiableSet);\n        assertTrue(keySet.contains(\"key1\"));\n        assertTrue(keySet.contains(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_keySetTest.java", "class_name": "UnmodifiableMap_keySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_keySetTest.java.UnmodifiableMap_keySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest.[void]testRemoveExistingKey()", "name": "testRemoveExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveExistingKey()", "original_string": "    @Test\n    public void testRemoveExistingKey() {\n        assertTrue(compositeMap.containsKey(\"1\"));\n        assertEquals(\"one\", compositeMap.remove(\"1\"));\n        assertFalse(compositeMap.containsKey(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "class_name": "CompositeMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest.[void]testRemoveNonExistingKey()", "name": "testRemoveNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNonExistingKey()", "original_string": "    @Test\n    public void testRemoveNonExistingKey() {\n        assertFalse(compositeMap.containsKey(\"5\"));\n        assertNull(compositeMap.remove(\"5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "class_name": "CompositeMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest.[void]testRemoveFromSecondMap()", "name": "testRemoveFromSecondMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromSecondMap()", "original_string": "    @Test\n    public void testRemoveFromSecondMap() {\n        assertTrue(compositeMap.containsKey(\"3\"));\n        assertEquals(\"three\", compositeMap.remove(\"3\"));\n        assertFalse(compositeMap.containsKey(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "class_name": "CompositeMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest.[void]testRemoveAfterAddComposited()", "name": "testRemoveAfterAddComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterAddComposited()", "original_string": "    @Test\n    public void testRemoveAfterAddComposited() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"5\", \"five\");\n        compositeMap.addComposited(map3);\n\n        assertTrue(compositeMap.containsKey(\"5\"));\n        assertEquals(\"five\", compositeMap.remove(\"5\"));\n        assertFalse(compositeMap.containsKey(\"5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "class_name": "CompositeMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest.[void]testRemoveAfterPut()", "name": "testRemoveAfterPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterPut()", "original_string": "    @Test\n    public void testRemoveAfterPut() {\n        compositeMap.put(\"6\", \"six\");\n        assertTrue(compositeMap.containsKey(\"6\"));\n        assertEquals(\"six\", compositeMap.remove(\"6\"));\n        assertFalse(compositeMap.containsKey(\"6\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "class_name": "CompositeMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java.CompositeMap_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java.MultiKeyMap_putAllTest.[void]testPutAll_WithValidKeys()", "name": "testPutAll_WithValidKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_WithValidKeys()", "original_string": "    @Test\n    public void testPutAll_WithValidKeys() {\n        // Given\n        MultiKeyMap<String, String> multiKeyMap = new MultiKeyMap<>();\n        Map<MultiKey<? extends String>, String> mapToCopy = new HashMap<>();\n        mapToCopy.put(new MultiKey<>(\"key1\", \"key2\"), \"value1\");\n        mapToCopy.put(new MultiKey<>(\"key3\", \"key4\"), \"value2\");\n\n        // When\n        multiKeyMap.putAll(mapToCopy);\n\n        // Then\n        // Assertions are implicit as the method does not return a value\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java", "class_name": "MultiKeyMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java.MultiKeyMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java.MultiKeyMap_putAllTest.[void]testPutAll_WithNullKey()", "name": "testPutAll_WithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_WithNullKey()", "original_string": "    @Test\n    public void testPutAll_WithNullKey() {\n        // Given\n        MultiKeyMap<String, String> multiKeyMap = new MultiKeyMap<>();\n        Map<MultiKey<? extends String>, String> mapToCopy = new HashMap<>();\n        mapToCopy.put(null, \"value1\");\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> multiKeyMap.putAll(mapToCopy));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java", "class_name": "MultiKeyMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java.MultiKeyMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone() {\n        final MultiKeyMap<K, V> map = new MultiKeyMap<>();\n        map.put(new MultiKey<>((K) I1, (K) I2), (V) \"1-2\");\n        final Map<MultiKey<? extends K>, V> cloned = map.clone();\n        assertEquals(map.size(), cloned.size());\n        assertSame(map.get(new MultiKey<>((K) I1, (K) I2)), cloned.get(new MultiKey<>((K) I1, (K) I2)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testLRUMultiKeyMap()", "name": "testLRUMultiKeyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLRUMultiKeyMap()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLRUMultiKeyMap() {\n        final MultiKeyMap<K, V> map = MultiKeyMap.multiKeyMap(new LRUMap<>(2));\n        map.put((K) I1, (K) I2, (V) \"1-2\");\n        map.put((K) I1, (K) I3, (V) \"1-1\");\n        assertEquals(2, map.size());\n        map.put((K) I1, (K) I4, (V) \"1-4\");\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(I1, I3));\n        assertTrue(map.containsKey(I1, I4));\n        assertFalse(map.containsKey(I1, I2));\n\n        final MultiKeyMap<K, V> cloned = map.clone();\n        assertEquals(2, map.size());\n        assertTrue(cloned.containsKey(I1, I3));\n        assertTrue(cloned.containsKey(I1, I4));\n        assertFalse(cloned.containsKey(I1, I2));\n        cloned.put((K) I1, (K) I5, (V) \"1-5\");\n        assertEquals(2, cloned.size());\n        assertTrue(cloned.containsKey(I1, I4));\n        assertTrue(cloned.containsKey(I1, I5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyContainsKey()", "name": "testMultiKeyContainsKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyContainsKey()", "original_string": "    @Test\n    public void testMultiKeyContainsKey() {\n        resetFull();\n        final MultiKeyMap<K, V> multimap = getMap();\n        final MultiKey<K>[] keys = getMultiKeyKeys();\n\n        for (final MultiKey<K> key : keys) {\n            switch (key.size()) {\n            case 2:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1)));\n                assertFalse(multimap.containsKey(null, key.getKey(1)));\n                assertFalse(multimap.containsKey(key.getKey(0), null));\n                assertFalse(multimap.containsKey(null, null));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), null));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), null, null));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), null, null, null));\n                break;\n            case 3:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertFalse(multimap.containsKey(null, key.getKey(1), key.getKey(2)));\n                assertFalse(multimap.containsKey(key.getKey(0), null, key.getKey(2)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), null));\n                assertFalse(multimap.containsKey(null, null, null));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), null));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), null, null));\n                break;\n            case 4:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertFalse(multimap.containsKey(null, key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertFalse(multimap.containsKey(key.getKey(0), null, key.getKey(2), key.getKey(3)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), null, key.getKey(3)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), null));\n                assertFalse(multimap.containsKey(null, null, null, null));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), null));\n                break;\n            case 5:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertFalse(multimap.containsKey(null, key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertFalse(multimap.containsKey(key.getKey(0), null, key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), null, key.getKey(3), key.getKey(4)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), null, key.getKey(4)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), null));\n                assertFalse(multimap.containsKey(null, null, null, null, null));\n                break;\n            default:\n                fail(\"Invalid key size\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyGet()", "name": "testMultiKeyGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyGet()", "original_string": "    @Test\n    public void testMultiKeyGet() {\n        resetFull();\n        final MultiKeyMap<K, V> multimap = getMap();\n        final MultiKey<K>[] keys = getMultiKeyKeys();\n        final V[] values = getSampleValues();\n\n        for (int i = 0; i < keys.length; i++) {\n            final MultiKey<K> key = keys[i];\n            final V value = values[i];\n\n            switch (key.size()) {\n            case 2:\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1)));\n                assertNull(multimap.get(null, key.getKey(1)));\n                assertNull(multimap.get(key.getKey(0), null));\n                assertNull(multimap.get(null, null));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), null));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), null, null));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), null, null, null));\n                break;\n            case 3:\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertNull(multimap.get(null, key.getKey(1), key.getKey(2)));\n                assertNull(multimap.get(key.getKey(0), null, key.getKey(2)));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), null));\n                assertNull(multimap.get(null, null, null));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), null));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), null, null));\n                break;\n            case 4:\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertNull(multimap.get(null, key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertNull(multimap.get(key.getKey(0), null, key.getKey(2), key.getKey(3)));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), null, key.getKey(3)));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), null));\n                assertNull(multimap.get(null, null, null, null));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), null));\n                break;\n            case 5:\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertNull(multimap.get(null, key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertNull(multimap.get(key.getKey(0), null, key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), null, key.getKey(3), key.getKey(4)));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), null, key.getKey(4)));\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), null));\n                assertNull(multimap.get(null, null, null, null, null));\n                break;\n            default:\n                fail(\"Invalid key size\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyPut()", "name": "testMultiKeyPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyPut()", "original_string": "    @Test\n    public void testMultiKeyPut() {\n        final MultiKey<K>[] keys = getMultiKeyKeys();\n        final V[] values = getSampleValues();\n\n        for (int i = 0; i < keys.length; i++) {\n            final MultiKeyMap<K, V> multimap = new MultiKeyMap<>();\n\n            final MultiKey<K> key = keys[i];\n            final V value = values[i];\n\n            switch (key.size()) {\n            case 2:\n                assertNull(multimap.put(key.getKey(0), key.getKey(1), value));\n                assertEquals(1, multimap.size());\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1)));\n                assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0), key.getKey(1))));\n                assertEquals(value, multimap.put(key.getKey(0), key.getKey(1), null));\n                assertEquals(1, multimap.size());\n                assertNull(multimap.get(key.getKey(0), key.getKey(1)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1)));\n                break;\n            case 3:\n                assertNull(multimap.put(key.getKey(0), key.getKey(1), key.getKey(2), value));\n                assertEquals(1, multimap.size());\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0), key.getKey(1), key.getKey(2))));\n                assertEquals(value, multimap.put(key.getKey(0), key.getKey(1), key.getKey(2), null));\n                assertEquals(1, multimap.size());\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                break;\n            case 4:\n                assertNull(multimap.put(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), value));\n                assertEquals(1, multimap.size());\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3))));\n                assertEquals(value, multimap.put(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), null));\n                assertEquals(1, multimap.size());\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                break;\n            case 5:\n                assertNull(multimap.put(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4), value));\n                assertEquals(1, multimap.size());\n                assertEquals(value, multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertTrue(multimap.containsKey(new MultiKey<>(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4))));\n                assertEquals(value, multimap.put(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4), null));\n                assertEquals(1, multimap.size());\n                assertNull(multimap.get(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                break;\n            default:\n                fail(\"Invalid key size\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyPutWithNullKey()", "name": "testMultiKeyPutWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyPutWithNullKey()", "original_string": "    @Test\n    public void testMultiKeyPutWithNullKey() {\n        final MultiKeyMap<String, String> map = new MultiKeyMap<>();\n        map.put(\"a\", null, \"value1\");\n        map.put(\"b\", null, \"value2\");\n        map.put(\"c\", null, \"value3\");\n        map.put(\"a\", \"z\",  \"value4\");\n        map.put(\"a\", null, \"value5\");\n        map.put(null, \"a\", \"value6\");\n        map.put(null, null, \"value7\");\n\n        assertEquals(6, map.size());\n        assertEquals(\"value5\", map.get(\"a\", null));\n        assertEquals(\"value4\", map.get(\"a\", \"z\"));\n        assertEquals(\"value6\", map.get(null, \"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyRemove()", "name": "testMultiKeyRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyRemove()", "original_string": "    @Test\n    public void testMultiKeyRemove() {\n        final MultiKey<K>[] keys = getMultiKeyKeys();\n        final V[] values = getSampleValues();\n\n        for (int i = 0; i < keys.length; i++) {\n            resetFull();\n            final MultiKeyMap<K, V> multimap = getMap();\n            final int size = multimap.size();\n\n            final MultiKey<K> key = keys[i];\n            final V value = values[i];\n\n            switch (key.size()) {\n            case 2:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1)));\n                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1)));\n                assertEquals(size - 1, multimap.size());\n                assertNull(multimap.removeMultiKey(key.getKey(0), key.getKey(1)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1)));\n                break;\n            case 3:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertEquals(size - 1, multimap.size());\n                assertNull(multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                break;\n            case 4:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertEquals(size - 1, multimap.size());\n                assertNull(multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                break;\n            case 5:\n                assertTrue(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertEquals(size - 1, multimap.size());\n                assertNull(multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                assertFalse(multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                break;\n            default:\n                fail(\"Invalid key size\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyRemoveAll1()", "name": "testMultiKeyRemoveAll1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyRemoveAll1()", "original_string": "    @Test\n    public void testMultiKeyRemoveAll1() {\n        resetFull();\n        final MultiKeyMap<K, V> multimap = getMap();\n        assertEquals(12, multimap.size());\n\n        multimap.removeAll(I1);\n        assertEquals(8, multimap.size());\n        for (final MapIterator<MultiKey<? extends K>, V> it = multimap.mapIterator(); it.hasNext();) {\n            final MultiKey<? extends K> key = it.next();\n            assertFalse(I1.equals(key.getKey(0)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyRemoveAll2()", "name": "testMultiKeyRemoveAll2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyRemoveAll2()", "original_string": "    @Test\n    public void testMultiKeyRemoveAll2() {\n        resetFull();\n        final MultiKeyMap<K, V> multimap = getMap();\n        assertEquals(12, multimap.size());\n\n        multimap.removeAll(I2, I3);\n        assertEquals(9, multimap.size());\n        for (final MapIterator<MultiKey<? extends K>, V> it = multimap.mapIterator(); it.hasNext();) {\n            final MultiKey<? extends K> key = it.next();\n            assertFalse(I2.equals(key.getKey(0)) && I3.equals(key.getKey(1)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyRemoveAll3()", "name": "testMultiKeyRemoveAll3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyRemoveAll3()", "original_string": "    @Test\n    public void testMultiKeyRemoveAll3() {\n        resetFull();\n        final MultiKeyMap<K, V> multimap = getMap();\n        assertEquals(12, multimap.size());\n\n        multimap.removeAll(I1, I1, I2);\n        assertEquals(9, multimap.size());\n        for (final MapIterator<MultiKey<? extends K>, V> it = multimap.mapIterator(); it.hasNext();) {\n            final MultiKey<? extends K> key = it.next();\n            assertFalse(I1.equals(key.getKey(0)) && I1.equals(key.getKey(1)) && I2.equals(key.getKey(2)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testMultiKeyRemoveAll4()", "name": "testMultiKeyRemoveAll4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiKeyRemoveAll4()", "original_string": "    @Test\n    public void testMultiKeyRemoveAll4() {\n        resetFull();\n        final MultiKeyMap<K, V> multimap = getMap();\n        assertEquals(12, multimap.size());\n\n        multimap.removeAll(I1, I1, I2, I3);\n        assertEquals(10, multimap.size());\n        for (final MapIterator<MultiKey<? extends K>, V> it = multimap.mapIterator(); it.hasNext();) {\n            final MultiKey<? extends K> key = it.next();\n            assertFalse(I1.equals(key.getKey(0)) && I1.equals(key.getKey(1)) && I2.equals(key.getKey(2)) && key.size() >= 4 && I3.equals(key.getKey(3)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest.[void]testNullHandling()", "name": "testNullHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling() {\n        resetFull();\n        assertNull(map.get(null));\n        assertFalse(map.containsKey(null));\n        assertFalse(map.containsValue(null));\n        assertNull(map.remove(null));\n        assertFalse(map.entrySet().contains(null));\n        assertFalse(map.containsKey(null));\n        assertFalse(map.containsValue(null));\n\n        assertThrows(NullPointerException.class, () -> map.put(null, null));\n\n        assertNull(map.put(new MultiKey<>(null, null), null));\n\n        assertThrows(NullPointerException.class, () -> map.put(null, (V) new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java", "class_name": "MultiKeyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java.MultiKeyMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest.[void]testHashCodeWithNonNullKeyAndValue()", "name": "testHashCodeWithNonNullKeyAndValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNonNullKeyAndValue()", "original_string": "    @Test\n    public void testHashCodeWithNonNullKeyAndValue() {\n        assertEquals(\"key\".hashCode() ^ \"value\".hashCode(), singletonMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "class_name": "SingletonMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest.[void]testHashCodeWithNullKey()", "name": "testHashCodeWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNullKey()", "original_string": "    @Test\n    public void testHashCodeWithNullKey() {\n        singletonMap = new SingletonMap<>(null, \"value\");\n        assertEquals(0 ^ \"value\".hashCode(), singletonMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "class_name": "SingletonMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest.[void]testHashCodeWithNullValue()", "name": "testHashCodeWithNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNullValue()", "original_string": "    @Test\n    public void testHashCodeWithNullValue() {\n        singletonMap = new SingletonMap<>(\"key\", null);\n        assertEquals(\"key\".hashCode() ^ 0, singletonMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "class_name": "SingletonMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest.[void]testHashCodeWithNullKeyAndValue()", "name": "testHashCodeWithNullKeyAndValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNullKeyAndValue()", "original_string": "    @Test\n    public void testHashCodeWithNullKeyAndValue() {\n        singletonMap = new SingletonMap<>(null, null);\n        assertEquals(0 ^ 0, singletonMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "class_name": "SingletonMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java.SingletonMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest.[void]testContainsValue_ValuePresent()", "name": "testContainsValue_ValuePresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ValuePresent()", "original_string": "    @Test\n    public void testContainsValue_ValuePresent() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        assertTrue(multiValueMap.containsValue(\"value1\"));\n        assertTrue(multiValueMap.containsValue(\"value2\"));\n        assertTrue(multiValueMap.containsValue(\"value3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "class_name": "MultiValueMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest.[void]testContainsValue_ValueNotPresent()", "name": "testContainsValue_ValueNotPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ValueNotPresent()", "original_string": "    @Test\n    public void testContainsValue_ValueNotPresent() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        assertFalse(multiValueMap.containsValue(\"value4\"));\n        assertFalse(multiValueMap.containsValue(\"value5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "class_name": "MultiValueMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest.[void]testContainsValue_EmptyMap()", "name": "testContainsValue_EmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_EmptyMap()", "original_string": "    @Test\n    public void testContainsValue_EmptyMap() {\n        assertFalse(multiValueMap.containsValue(\"value1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "class_name": "MultiValueMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest.[void]testContainsValue_AfterRemove()", "name": "testContainsValue_AfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_AfterRemove()", "original_string": "    @Test\n    public void testContainsValue_AfterRemove() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        multiValueMap.removeMapping(\"key1\", \"value1\");\n        assertFalse(multiValueMap.containsValue(\"value1\"));\n        assertTrue(multiValueMap.containsValue(\"value2\"));\n        assertTrue(multiValueMap.containsValue(\"value3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "class_name": "MultiValueMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest.[void]testContainsValue_AfterClear()", "name": "testContainsValue_AfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_AfterClear()", "original_string": "    @Test\n    public void testContainsValue_AfterClear() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        multiValueMap.clear();\n        assertFalse(multiValueMap.containsValue(\"value1\"));\n        assertFalse(multiValueMap.containsValue(\"value2\"));\n        assertFalse(multiValueMap.containsValue(\"value3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "class_name": "MultiValueMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java.MultiValueMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java.PassiveExpiringMap_containsKeyTest.[void]testContainsKey_KeyExistsAndNotExpired()", "name": "testContainsKey_KeyExistsAndNotExpired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsKey_KeyExistsAndNotExpired()", "original_string": "    @Test\n    void testContainsKey_KeyExistsAndNotExpired() {\n        map.put(\"key1\", \"value1\");\n        assertTrue(map.containsKey(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java", "class_name": "PassiveExpiringMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java.PassiveExpiringMap_containsKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java.PassiveExpiringMap_containsKeyTest.[void]testContainsKey_KeyExistsButExpired()", "name": "testContainsKey_KeyExistsButExpired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsKey_KeyExistsButExpired()", "original_string": "    @Test\n    void testContainsKey_KeyExistsButExpired() throws InterruptedException {\n        map.put(\"key2\", \"value2\");\n        Thread.sleep(1001); // Wait for the entry to expire\n        assertFalse(map.containsKey(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java", "class_name": "PassiveExpiringMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java.PassiveExpiringMap_containsKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java.PassiveExpiringMap_containsKeyTest.[void]testContainsKey_KeyDoesNotExist()", "name": "testContainsKey_KeyDoesNotExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsKey_KeyDoesNotExist()", "original_string": "    @Test\n    void testContainsKey_KeyDoesNotExist() {\n        assertFalse(map.containsKey(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java", "class_name": "PassiveExpiringMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java.PassiveExpiringMap_containsKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest.[void]testRemoveMappingSuccess()", "name": "testRemoveMappingSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingSuccess()", "original_string": "    @Test\n    public void testRemoveMappingSuccess() {\n        assertTrue(multiValueMap.removeMapping(\"key1\", \"value1\"));\n        assertFalse(multiValueMap.containsValue(\"key1\", \"value1\"));\n        assertEquals(2, multiValueMap.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "class_name": "MultiValueMap_removeMappingTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest.[void]testRemoveMappingNonExistentValue()", "name": "testRemoveMappingNonExistentValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingNonExistentValue()", "original_string": "    @Test\n    public void testRemoveMappingNonExistentValue() {\n        assertFalse(multiValueMap.removeMapping(\"key1\", \"nonExistentValue\"));\n        assertEquals(3, multiValueMap.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "class_name": "MultiValueMap_removeMappingTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest.[void]testRemoveMappingNonExistentKey()", "name": "testRemoveMappingNonExistentKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingNonExistentKey()", "original_string": "    @Test\n    public void testRemoveMappingNonExistentKey() {\n        assertFalse(multiValueMap.removeMapping(\"nonExistentKey\", \"value1\"));\n        assertEquals(3, multiValueMap.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "class_name": "MultiValueMap_removeMappingTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest.[void]testRemoveMappingLastValue()", "name": "testRemoveMappingLastValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingLastValue()", "original_string": "    @Test\n    public void testRemoveMappingLastValue() {\n        assertTrue(multiValueMap.removeMapping(\"key2\", \"value3\"));\n        assertFalse(multiValueMap.containsKey(\"key2\"));\n        assertEquals(2, multiValueMap.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "class_name": "MultiValueMap_removeMappingTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest.[void]testRemoveMappingAndClear()", "name": "testRemoveMappingAndClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingAndClear()", "original_string": "    @Test\n    public void testRemoveMappingAndClear() {\n        multiValueMap.clear();\n        assertFalse(multiValueMap.removeMapping(\"key1\", \"value1\"));\n        assertEquals(0, multiValueMap.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "class_name": "MultiValueMap_removeMappingTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest.[void]testRemoveMappingAndIterator()", "name": "testRemoveMappingAndIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingAndIterator()", "original_string": "    @Test\n    public void testRemoveMappingAndIterator() {\n        Iterator<String> iterator = multiValueMap.iterator(\"key1\");\n        while (iterator.hasNext()) {\n            String value = iterator.next();\n            if (\"value1\".equals(value)) {\n                iterator.remove();\n            }\n        }\n        assertFalse(multiValueMap.containsValue(\"key1\", \"value1\"));\n        assertEquals(2, multiValueMap.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "class_name": "MultiValueMap_removeMappingTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java.MultiValueMap_removeMappingTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_SameInstance()", "original_string": "    @Test\n    public void testEquals_SameInstance() {\n        assertTrue(singletonMap.equals(singletonMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_DifferentType()", "name": "testEquals_DifferentType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_DifferentType()", "original_string": "    @Test\n    public void testEquals_DifferentType() {\n        assertFalse(singletonMap.equals(\"not a map\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_DifferentSizeMap()", "name": "testEquals_DifferentSizeMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_DifferentSizeMap()", "original_string": "    @Test\n    public void testEquals_DifferentSizeMap() {\n        Map<String, String> differentSizeMap = new HashMap<>();\n        differentSizeMap.put(\"key1\", \"value1\");\n        differentSizeMap.put(\"key2\", \"value2\");\n        assertFalse(singletonMap.equals(differentSizeMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_SameKeyDifferentValue()", "name": "testEquals_SameKeyDifferentValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_SameKeyDifferentValue()", "original_string": "    @Test\n    public void testEquals_SameKeyDifferentValue() {\n        Map<String, String> sameKeyDifferentValueMap = new HashMap<>();\n        sameKeyDifferentValueMap.put(\"key\", \"differentValue\");\n        assertFalse(singletonMap.equals(sameKeyDifferentValueMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_DifferentKeySameValue()", "name": "testEquals_DifferentKeySameValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_DifferentKeySameValue()", "original_string": "    @Test\n    public void testEquals_DifferentKeySameValue() {\n        Map<String, String> differentKeySameValueMap = new HashMap<>();\n        differentKeySameValueMap.put(\"differentKey\", \"value\");\n        assertFalse(singletonMap.equals(differentKeySameValueMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_SameKeySameValue()", "name": "testEquals_SameKeySameValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_SameKeySameValue()", "original_string": "    @Test\n    public void testEquals_SameKeySameValue() {\n        Map<String, String> sameKeySameValueMap = new HashMap<>();\n        sameKeySameValueMap.put(\"key\", \"value\");\n        assertTrue(singletonMap.equals(sameKeySameValueMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_NullKey()", "name": "testEquals_NullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NullKey()", "original_string": "    @Test\n    public void testEquals_NullKey() {\n        SingletonMap<String, String> nullKeyMap = new SingletonMap<>(null, \"value\");\n        Map<String, String> nullKeyHashMap = new HashMap<>();\n        nullKeyHashMap.put(null, \"value\");\n        assertTrue(nullKeyMap.equals(nullKeyHashMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_NullValue()", "name": "testEquals_NullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NullValue()", "original_string": "    @Test\n    public void testEquals_NullValue() {\n        SingletonMap<String, String> nullValueMap = new SingletonMap<>(\"key\", null);\n        Map<String, String> nullValueHashMap = new HashMap<>();\n        nullValueHashMap.put(\"key\", null);\n        assertTrue(nullValueMap.equals(nullValueHashMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest.[void]testEquals_NullKeyAndValue()", "name": "testEquals_NullKeyAndValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NullKeyAndValue()", "original_string": "    @Test\n    public void testEquals_NullKeyAndValue() {\n        SingletonMap<String, String> nullKeyAndValueMap = new SingletonMap<>(null, null);\n        Map<String, String> nullKeyAndValueHashMap = new HashMap<>();\n        nullKeyAndValueHashMap.put(null, null);\n        assertTrue(nullKeyAndValueMap.equals(nullKeyAndValueHashMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "class_name": "SingletonMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java.SingletonMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final SortedMap<K, V> map = makeFullMap();\n        assertSame(map, UnmodifiableSortedMap.unmodifiableSortedMap(map));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableSortedMap.unmodifiableSortedMap(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "class_name": "UnmodifiableSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest.[void]testHeadMap()", "name": "testHeadMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeadMap()", "original_string": "    @Test\n    public void testHeadMap() {\n        final SortedMap<K, V> map = makeFullMap();\n        final SortedMap<K, V> m = new TreeMap<>();\n        // \"again\" is the first key of the map\n        assertSame(m.isEmpty(), map.headMap((K) \"again\").isEmpty());\n        assertSame(18, map.size());\n        // \"you\" is the last key of the map\n        assertSame(17, map.headMap((K) \"you\").size());\n        // \"we'll\" is the before key of \"you\"\n        assertSame(16, map.headMap((K) \"we'll\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "class_name": "UnmodifiableSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest.[void]testSubMap()", "name": "testSubMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubMap()", "original_string": "    @Test\n    public void testSubMap() {\n        final SortedMap<K, V> map = makeFullMap();\n\n        assertSame(18, map.size());\n        // get the sub map from again to you(exclusive)\n        assertSame(17, map.subMap((K) \"again\", (K) \"you\").size());\n        // get the sub map from again to we'll(exclusive)\n        assertSame(16, map.subMap((K) \"again\", (K) \"we'll\").size());\n        // \"again\" is the first key of the map\n        assertSame(0, map.subMap((K) \"again\", (K) \"again\").size());\n\n        assertSame(map.headMap((K) \"you\").size(), map.subMap((K) \"again\", (K) \"you\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "class_name": "UnmodifiableSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest.[void]testTailMap()", "name": "testTailMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTailMap()", "original_string": "    @Test\n    public void testTailMap() {\n        final SortedMap<K, V> map = makeFullMap();\n\n        assertSame(18, map.size());\n        // \"you\" is the last key of the map\n        assertSame(1, map.tailMap((K) \"you\").size());\n        // \"we'll\" is the before key of \"you\"\n        assertSame(2, map.tailMap((K) \"we'll\").size());\n        // \"again\" is the first key of the map\n        assertSame(18, map.tailMap((K) \"again\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "class_name": "UnmodifiableSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java", "class_name": "UnmodifiableSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java.UnmodifiableSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(4, entrySet.size());\n        assertTrue(entrySet.containsAll(map1.entrySet()));\n        assertTrue(entrySet.containsAll(map2.entrySet()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "class_name": "CompositeMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest.[void]testEntrySetAfterAddComposited()", "name": "testEntrySetAfterAddComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetAfterAddComposited()", "original_string": "    @Test\n    public void testEntrySetAfterAddComposited() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"5\", \"five\");\n        compositeMap.addComposited(map3);\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(5, entrySet.size());\n        assertTrue(entrySet.containsAll(map1.entrySet()));\n        assertTrue(entrySet.containsAll(map2.entrySet()));\n        assertTrue(entrySet.containsAll(map3.entrySet()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "class_name": "CompositeMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest.[void]testEntrySetAfterRemoveComposited()", "name": "testEntrySetAfterRemoveComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetAfterRemoveComposited()", "original_string": "    @Test\n    public void testEntrySetAfterRemoveComposited() {\n        compositeMap.removeComposited(map2);\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(2, entrySet.size());\n        assertTrue(entrySet.containsAll(map1.entrySet()));\n        assertFalse(entrySet.containsAll(map2.entrySet()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "class_name": "CompositeMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest.[void]testEntrySetAfterClear()", "name": "testEntrySetAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetAfterClear()", "original_string": "    @Test\n    public void testEntrySetAfterClear() {\n        compositeMap.clear();\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(0, entrySet.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "class_name": "CompositeMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest.[void]testEntrySetAfterPut()", "name": "testEntrySetAfterPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetAfterPut()", "original_string": "    @Test\n    public void testEntrySetAfterPut() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"6\", \"six\");\n        compositeMap.addComposited(newMap);\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(5, entrySet.size());\n        assertTrue(entrySet.contains(new AbstractMap.SimpleEntry<>(\"6\", \"six\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "class_name": "CompositeMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest.[void]testEntrySetAfterRemove()", "name": "testEntrySetAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetAfterRemove()", "original_string": "    @Test\n    public void testEntrySetAfterRemove() {\n        compositeMap.remove(\"3\");\n\n        Set<Map.Entry<String, String>> entrySet = compositeMap.entrySet();\n        assertEquals(3, entrySet.size());\n        assertFalse(entrySet.contains(new AbstractMap.SimpleEntry<>(\"3\", \"three\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "class_name": "CompositeMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java.CompositeMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java.PassiveExpiringMap_containsValueTest.[void]testContainsValue_ValuePresent()", "name": "testContainsValue_ValuePresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ValuePresent()", "original_string": "    @Test\n    public void testContainsValue_ValuePresent() {\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new ConstantTimeToLiveExpirationPolicy<>(-1L), new HashMap<>());\n        map.put(\"key1\", \"value1\");\n        assertTrue(map.containsValue(\"value1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "class_name": "PassiveExpiringMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java.PassiveExpiringMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java.PassiveExpiringMap_containsValueTest.[void]testContainsValue_ValueNotPresent()", "name": "testContainsValue_ValueNotPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ValueNotPresent()", "original_string": "    @Test\n    public void testContainsValue_ValueNotPresent() {\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new ConstantTimeToLiveExpirationPolicy<>(-1L), new HashMap<>());\n        map.put(\"key1\", \"value1\");\n        assertFalse(map.containsValue(\"value2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "class_name": "PassiveExpiringMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java.PassiveExpiringMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java.PassiveExpiringMap_containsValueTest.[void]testContainsValue_ExpiredValue()", "name": "testContainsValue_ExpiredValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ExpiredValue()", "original_string": "    @Test\n    public void testContainsValue_ExpiredValue() {\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new ConstantTimeToLiveExpirationPolicy<>(0L), new HashMap<>());\n        map.put(\"key1\", \"value1\");\n        assertFalse(map.containsValue(\"value1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "class_name": "PassiveExpiringMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java.PassiveExpiringMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java.MultiKeyMap_cloneTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testClone()", "original_string": "    @Test\n    void testClone() {\n        MultiKeyMap<String, String> originalMap = new MultiKeyMap<>();\n        originalMap.put(\"key1\", \"key2\", \"value1\");\n\n        MultiKeyMap<String, String> clonedMap = originalMap.clone();\n\n        assertEquals(originalMap.get(\"key1\", \"key2\"), clonedMap.get(\"key1\", \"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java", "class_name": "MultiKeyMap_cloneTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java.MultiKeyMap_cloneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java.StaticBucketMapTest.[void]test_containsKey_nullMatchesIncorrectly()", "name": "test_containsKey_nullMatchesIncorrectly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void test_containsKey_nullMatchesIncorrectly()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void test_containsKey_nullMatchesIncorrectly() {\n        final StaticBucketMap<K, V> map = new StaticBucketMap<>(17);\n        map.put(null, (V) \"A\");\n        assertTrue(map.containsKey(null));\n        // loop so we find a string that is in the same bucket as the null\n        for (int i = 'A'; i <= 'Z'; i++) {\n            final String str = String.valueOf((char) i);\n            assertFalse(map.containsKey(str), \"String: \" + str);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java", "class_name": "StaticBucketMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java.StaticBucketMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java.StaticBucketMapTest.[void]test_containsValue_nullMatchesIncorrectly()", "name": "test_containsValue_nullMatchesIncorrectly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void test_containsValue_nullMatchesIncorrectly()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void test_containsValue_nullMatchesIncorrectly() {\n        final StaticBucketMap<K, V> map = new StaticBucketMap<>(17);\n        map.put((K) \"A\", null);\n        assertTrue(map.containsValue(null));\n        // loop so we find a string that is in the same bucket as the null\n        for (int i = 'A'; i <= 'Z'; i++) {\n            final String str = String.valueOf((char) i);\n            assertFalse(map.containsValue(str), \"String: \" + str);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java", "class_name": "StaticBucketMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java.StaticBucketMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java.StaticBucketMapTest.[void]test_get_nullMatchesIncorrectly()", "name": "test_get_nullMatchesIncorrectly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void test_get_nullMatchesIncorrectly()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void test_get_nullMatchesIncorrectly() {\n        final StaticBucketMap<K, V> map = new StaticBucketMap<>(17);\n        map.put(null, (V) \"A\");\n        assertEquals(\"A\", map.get(null));\n        // loop so we find a string that is in the same bucket as the null\n        for (int i = 'A'; i <= 'Z'; i++) {\n            final String str = String.valueOf((char) i);\n            assertNull(map.get(str), \"String: \" + str);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java", "class_name": "StaticBucketMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMapTest.java.StaticBucketMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Bugzilla 37567"}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java.TransformedMap_putTest.[void]testPutWithTransformers()", "name": "testPutWithTransformers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutWithTransformers()", "original_string": "    @Test\n    public void testPutWithTransformers() {\n        // Given\n        Transformer<String, String> keyTransformer = mock(Transformer.class);\n        Transformer<String, String> valueTransformer = mock(Transformer.class);\n        Map<String, String> originalMap = new HashMap<>();\n        TransformedMap<String, String> transformedMap = new TransformedMap<>(originalMap, keyTransformer, valueTransformer);\n\n        String originalKey = \"key\";\n        String originalValue = \"value\";\n        String transformedKey = \"transformedKey\";\n        String transformedValue = \"transformedValue\";\n\n        when(keyTransformer.apply(originalKey)).thenReturn(transformedKey);\n        when(valueTransformer.apply(originalValue)).thenReturn(transformedValue);\n\n        // When\n        transformedMap.put(originalKey, originalValue);\n\n        // Then\n        assertEquals(transformedValue, originalMap.get(transformedKey));\n        verify(keyTransformer).apply(originalKey);\n        verify(valueTransformer).apply(originalValue);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java", "class_name": "TransformedMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java.TransformedMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java.TransformedMap_putTest.[void]testPutWithoutTransformers()", "name": "testPutWithoutTransformers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutWithoutTransformers()", "original_string": "    @Test\n    public void testPutWithoutTransformers() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        TransformedMap<String, String> transformedMap = new TransformedMap<>(originalMap, null, null);\n\n        String originalKey = \"key\";\n        String originalValue = \"value\";\n\n        // When\n        transformedMap.put(originalKey, originalValue);\n\n        // Then\n        assertEquals(originalValue, originalMap.get(originalKey));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java", "class_name": "TransformedMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java.TransformedMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java.SingletonMap_setValueTest.[void]testSetValue()", "name": "testSetValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetValue()", "original_string": "    @Test\n    public void testSetValue() {\n        SingletonMap<String, String> map = new SingletonMap<>(\"key\", \"oldValue\");\n        String oldValue = map.setValue(\"newValue\");\n        assertEquals(\"oldValue\", oldValue);\n        assertEquals(\"newValue\", map.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java", "class_name": "SingletonMap_setValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java.SingletonMap_setValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java.ListOrderedMap_toStringTest.[void]testToStringEmptyMap()", "name": "testToStringEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringEmptyMap()", "original_string": "    @Test\n    public void testToStringEmptyMap() {\n        ListOrderedMap<String, String> map = new ListOrderedMap<>(new HashMap<>());\n        assertEquals(\"{}\", map.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java", "class_name": "ListOrderedMap_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java.ListOrderedMap_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java.ListOrderedMap_toStringTest.[void]testToStringNonEmptyMap()", "name": "testToStringNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringNonEmptyMap()", "original_string": "    @Test\n    public void testToStringNonEmptyMap() {\n        ListOrderedMap<String, String> map = new ListOrderedMap<>(new HashMap<>());\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        assertEquals(\"{key1=value1, key2=value2}\", map.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java", "class_name": "ListOrderedMap_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java.ListOrderedMap_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java.ListOrderedMap_toStringTest.[void]testToStringWithSelfReference()", "name": "testToStringWithSelfReference", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithSelfReference()", "original_string": "    @Test\n    public void testToStringWithSelfReference() {\n        ListOrderedMap<String, Object> map = new ListOrderedMap<>(new HashMap<>());\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", map);\n        assertEquals(\"{key1=value1, key2=(this Map)}\", map.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java", "class_name": "ListOrderedMap_toStringTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java.ListOrderedMap_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testAccessOrder()", "name": "testAccessOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccessOrder()", "original_string": "    @Test\n    public void testAccessOrder() {\n        if (!isPutAddSupported() || !isPutChangeSupported()) {\n            return;\n        }\n        final K[] keys = getSampleKeys();\n        final V[] values = getSampleValues();\n        Iterator<K> kit;\n        Iterator<V> vit;\n\n        resetEmpty();\n        map.put(keys[0], values[0]);\n        map.put(keys[1], values[1]);\n        kit = map.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[1], vit.next());\n\n        // no change to order\n        map.put(keys[1], values[1]);\n        kit = map.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[1], vit.next());\n\n        // no change to order\n        map.put(keys[1], values[2]);\n        kit = map.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[2], vit.next());\n\n        // change to order\n        map.put(keys[0], values[3]);\n        kit = map.keySet().iterator();\n        assertSame(keys[1], kit.next());\n        assertSame(keys[0], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[2], vit.next());\n        assertSame(values[3], vit.next());\n\n        // change to order\n        map.get(keys[1]);\n        kit = map.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[3], vit.next());\n        assertSame(values[2], vit.next());\n\n        // change to order\n        map.get(keys[0]);\n        kit = map.keySet().iterator();\n        assertSame(keys[1], kit.next());\n        assertSame(keys[0], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[2], vit.next());\n        assertSame(values[3], vit.next());\n\n        // no change to order\n        map.get(keys[0]);\n        kit = map.keySet().iterator();\n        assertSame(keys[1], kit.next());\n        assertSame(keys[0], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[2], vit.next());\n        assertSame(values[3], vit.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testAccessOrder2()", "name": "testAccessOrder2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccessOrder2()", "original_string": "    @Test\n    public void testAccessOrder2() {\n        if (!isPutAddSupported() || !isPutChangeSupported()) {\n            return;\n        }\n        final K[] keys = getSampleKeys();\n        final V[] values = getSampleValues();\n        Iterator<K> kit;\n        Iterator<V> vit;\n\n        resetEmpty();\n        final LRUMap<K, V> lruMap = (LRUMap<K, V>) map;\n\n        lruMap.put(keys[0], values[0]);\n        lruMap.put(keys[1], values[1]);\n        kit = lruMap.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = lruMap.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[1], vit.next());\n\n        // no change to order\n        lruMap.put(keys[1], values[1]);\n        kit = lruMap.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = lruMap.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[1], vit.next());\n\n        // no change to order\n        lruMap.get(keys[1], false);\n        kit = lruMap.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = lruMap.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[1], vit.next());\n\n        // change to order\n        lruMap.get(keys[0], true);\n        kit = lruMap.keySet().iterator();\n        assertSame(keys[1], kit.next());\n        assertSame(keys[0], kit.next());\n        vit = lruMap.values().iterator();\n        assertSame(values[1], vit.next());\n        assertSame(values[0], vit.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone() {\n        final LRUMap<K, V> map = new LRUMap<>(10);\n        map.put((K) \"1\", (V) \"1\");\n        final Map<K, V> cloned = map.clone();\n        assertEquals(map.size(), cloned.size());\n        assertSame(map.get(\"1\"), cloned.get(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testCtors()", "name": "testCtors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCtors()", "original_string": "    @Test\n    public void testCtors() {\n        assertAll(\n                () -> assertThrows(IllegalArgumentException.class, () -> new LRUMap<K, V>(0),\n                        \"maxSize must be positive\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> new LRUMap<K, V>(-1, 12, 0.75f, false),\n                        \"maxSize must be positive\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> new LRUMap<K, V>(10, -1),\n                        \"initialSize must not be negative\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> new LRUMap<K, V>(10, 12),\n                        \"initialSize must not be larger than maxSize\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> new LRUMap<K, V>(10, -1, 0.75f, false),\n                        \"initialSize must not be negative\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> new LRUMap<K, V>(10, 12, 0.75f, false),\n                        \"initialSize must not be larger than maxSize\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testInternalState_Buckets()", "name": "testInternalState_Buckets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_Buckets()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_Buckets() {\n        if (!isPutAddSupported() || !isPutChangeSupported()) {\n            return;\n        }\n        final SingleHashCode one = new SingleHashCode(\"1\");\n        final SingleHashCode two = new SingleHashCode(\"2\");\n        final SingleHashCode three = new SingleHashCode(\"3\");\n        final SingleHashCode four = new SingleHashCode(\"4\");\n        final SingleHashCode five = new SingleHashCode(\"5\");\n        final SingleHashCode six = new SingleHashCode(\"6\");\n\n        final LRUMap<K, V> map = new LRUMap<>(3, 1.0f);\n        final int hashIndex = map.hashIndex(map.hash(one), 4);\n        map.put((K) one, (V) \"A\");\n        map.put((K) two, (V) \"B\");\n        map.put((K) three, (V) \"C\");\n\n        assertEquals(4, map.data.length);\n        assertEquals(3, map.size);\n        assertNull(map.header.next);\n        assertEquals(one, map.header.after.key);  // LRU\n        assertEquals(two, map.header.after.after.key);\n        assertEquals(three, map.header.after.after.after.key);  // MRU\n        assertEquals(three, map.data[hashIndex].key);\n        assertEquals(two, map.data[hashIndex].next.key);\n        assertEquals(one, map.data[hashIndex].next.next.key);\n\n        map.put((K) four, (V) \"D\");  // reuses last in next list\n\n        assertEquals(4, map.data.length);\n        assertEquals(3, map.size);\n        assertNull(map.header.next);\n        assertEquals(two, map.header.after.key);  // LRU\n        assertEquals(three, map.header.after.after.key);\n        assertEquals(four, map.header.after.after.after.key);  // MRU\n        assertEquals(four, map.data[hashIndex].key);\n        assertEquals(three, map.data[hashIndex].next.key);\n        assertEquals(two, map.data[hashIndex].next.next.key);\n\n        map.get(three);\n\n        assertEquals(4, map.data.length);\n        assertEquals(3, map.size);\n        assertNull(map.header.next);\n        assertEquals(two, map.header.after.key);  // LRU\n        assertEquals(four, map.header.after.after.key);\n        assertEquals(three, map.header.after.after.after.key);  // MRU\n        assertEquals(four, map.data[hashIndex].key);\n        assertEquals(three, map.data[hashIndex].next.key);\n        assertEquals(two, map.data[hashIndex].next.next.key);\n\n        map.put((K) five, (V) \"E\");  // reuses last in next list\n\n        assertEquals(4, map.data.length);\n        assertEquals(3, map.size);\n        assertNull(map.header.next);\n        assertEquals(four, map.header.after.key);  // LRU\n        assertEquals(three, map.header.after.after.key);\n        assertEquals(five, map.header.after.after.after.key);  // MRU\n        assertEquals(five, map.data[hashIndex].key);\n        assertEquals(four, map.data[hashIndex].next.key);\n        assertEquals(three, map.data[hashIndex].next.next.key);\n\n        map.get(three);\n        map.get(five);\n\n        assertEquals(4, map.data.length);\n        assertEquals(3, map.size);\n        assertNull(map.header.next);\n        assertEquals(four, map.header.after.key);  // LRU\n        assertEquals(three, map.header.after.after.key);\n        assertEquals(five, map.header.after.after.after.key);  // MRU\n        assertEquals(five, map.data[hashIndex].key);\n        assertEquals(four, map.data[hashIndex].next.key);\n        assertEquals(three, map.data[hashIndex].next.next.key);\n\n        map.put((K) six, (V) \"F\");  // reuses middle in next list\n\n        assertEquals(4, map.data.length);\n        assertEquals(3, map.size);\n        assertNull(map.header.next);\n        assertEquals(three, map.header.after.key);  // LRU\n        assertEquals(five, map.header.after.after.key);\n        assertEquals(six, map.header.after.after.after.key);  // MRU\n        assertEquals(six, map.data[hashIndex].key);\n        assertEquals(five, map.data[hashIndex].next.key);\n        assertEquals(three, map.data[hashIndex].next.next.key);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testInternalState_getEntry_int()", "name": "testInternalState_getEntry_int", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_getEntry_int()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_getEntry_int() {\n        if (!isPutAddSupported() || !isPutChangeSupported()) {\n            return;\n        }\n        final SingleHashCode one = new SingleHashCode(\"1\");\n        final SingleHashCode two = new SingleHashCode(\"2\");\n        final SingleHashCode three = new SingleHashCode(\"3\");\n\n        final LRUMap<K, V> map = new LRUMap<>(3, 1.0f);\n        map.put((K) one, (V) \"A\");\n        map.put((K) two, (V) \"B\");\n        map.put((K) three, (V) \"C\");\n\n        assertEquals(one, map.getEntry(0).key);\n        assertEquals(two, map.getEntry(1).key);\n        assertEquals(three, map.getEntry(2).key);\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> map.getEntry(-1)),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> map.getEntry(3))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testLRU()", "name": "testLRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLRU()", "original_string": "    @Test\n    public void testLRU() {\n        if (!isPutAddSupported() || !isPutChangeSupported()) {\n            return;\n        }\n        final K[] keys = getSampleKeys();\n        final V[] values = getSampleValues();\n        Iterator<K> kit;\n        Iterator<V> vit;\n\n        final LRUMap<K, V> map = new LRUMap<>(2);\n        assertEquals(0, map.size());\n        assertFalse(map.isFull());\n        assertEquals(2, map.maxSize());\n\n        map.put(keys[0], values[0]);\n        assertEquals(1, map.size());\n        assertFalse(map.isFull());\n        assertEquals(2, map.maxSize());\n\n        map.put(keys[1], values[1]);\n        assertEquals(2, map.size());\n        assertTrue(map.isFull());\n        assertEquals(2, map.maxSize());\n        kit = map.keySet().iterator();\n        assertSame(keys[0], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[1], vit.next());\n\n        map.put(keys[2], values[2]);\n        assertEquals(2, map.size());\n        assertTrue(map.isFull());\n        assertEquals(2, map.maxSize());\n        kit = map.keySet().iterator();\n        assertSame(keys[1], kit.next());\n        assertSame(keys[2], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[1], vit.next());\n        assertSame(values[2], vit.next());\n\n        map.put(keys[2], values[0]);\n        assertEquals(2, map.size());\n        assertTrue(map.isFull());\n        assertEquals(2, map.maxSize());\n        kit = map.keySet().iterator();\n        assertSame(keys[1], kit.next());\n        assertSame(keys[2], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[1], vit.next());\n        assertSame(values[0], vit.next());\n\n        map.put(keys[1], values[3]);\n        assertEquals(2, map.size());\n        assertTrue(map.isFull());\n        assertEquals(2, map.maxSize());\n        kit = map.keySet().iterator();\n        assertSame(keys[2], kit.next());\n        assertSame(keys[1], kit.next());\n        vit = map.values().iterator();\n        assertSame(values[0], vit.next());\n        assertSame(values[3], vit.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testRemoveLRU()", "name": "testRemoveLRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRU()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRU() {\n        final MockLRUMapSubclass<K, String> map = new MockLRUMapSubclass<>(2);\n        assertNull(map.entry);\n        map.put((K) \"A\", \"a\");\n        assertNull(map.entry);\n        map.put((K) \"B\", \"b\");\n        assertNull(map.entry);\n        map.put((K) \"C\", \"c\");  // removes oldest, which is A=a\n        assertNotNull(map.entry);\n        assertEquals(\"A\", map.key);\n        assertEquals(\"a\", map.value);\n        assertEquals(\"C\", map.entry.getKey());  // entry is reused\n        assertEquals(\"c\", map.entry.getValue());  // entry is reused\n        assertFalse(map.containsKey(\"A\"));\n        assertTrue(map.containsKey(\"B\"));\n        assertTrue(map.containsKey(\"C\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testRemoveLRUBlocksRemove()", "name": "testRemoveLRUBlocksRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRUBlocksRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRUBlocksRemove() {\n        final MockLRUMapSubclassBlocksRemove<K, V> map = new MockLRUMapSubclassBlocksRemove<>(2, false);\n        assertEquals(0, map.size());\n        map.put((K) \"A\", (V) \"a\");\n        assertEquals(1, map.size());\n        map.put((K) \"B\", (V) \"b\");\n        assertEquals(2, map.size());\n        map.put((K) \"C\", (V) \"c\");  // should remove oldest, which is A=a, but this is blocked\n        assertEquals(3, map.size());\n        assertEquals(2, map.maxSize());\n        assertTrue(map.containsKey(\"A\"));\n        assertTrue(map.containsKey(\"B\"));\n        assertTrue(map.containsKey(\"C\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testRemoveLRUBlocksRemoveScan()", "name": "testRemoveLRUBlocksRemoveScan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRUBlocksRemoveScan()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRUBlocksRemoveScan() {\n        final MockLRUMapSubclassBlocksRemove<K, V> map = new MockLRUMapSubclassBlocksRemove<>(2, true);\n        assertEquals(0, map.size());\n        map.put((K) \"A\", (V) \"a\");\n        assertEquals(1, map.size());\n        map.put((K) \"B\", (V) \"b\");\n        assertEquals(2, map.size());\n        map.put((K) \"C\", (V) \"c\");  // should remove oldest, which is A=a, but this is blocked\n        assertEquals(3, map.size());\n        assertEquals(2, map.maxSize());\n        assertTrue(map.containsKey(\"A\"));\n        assertTrue(map.containsKey(\"B\"));\n        assertTrue(map.containsKey(\"C\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testRemoveLRUFirstBlocksRemove()", "name": "testRemoveLRUFirstBlocksRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRUFirstBlocksRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLRUFirstBlocksRemove() {\n        final MockLRUMapSubclassFirstBlocksRemove<K, V> map = new MockLRUMapSubclassFirstBlocksRemove<>(2);\n        assertEquals(0, map.size());\n        map.put((K) \"A\", (V) \"a\");\n        assertEquals(1, map.size());\n        map.put((K) \"B\", (V) \"b\");\n        assertEquals(2, map.size());\n        map.put((K) \"C\", (V) \"c\");  // should remove oldest, which is A=a  but this is blocked - so advance to B=b\n        assertEquals(2, map.size());\n        assertEquals(2, map.maxSize());\n        assertTrue(map.containsKey(\"A\"));\n        assertFalse(map.containsKey(\"B\"));\n        assertTrue(map.containsKey(\"C\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReset()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReset() {\n        resetEmpty();\n        OrderedMap<K, V> ordered = getMap();\n        ((ResettableIterator<K>) ordered.mapIterator()).reset();\n\n        resetFull();\n        ordered = getMap();\n        final List<K> list = new ArrayList<>(ordered.keySet());\n        final ResettableIterator<K> it = (ResettableIterator<K>) ordered.mapIterator();\n        assertSame(list.get(0), it.next());\n        assertSame(list.get(1), it.next());\n        it.reset();\n        assertSame(list.get(0), it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testSynchronizedRemoveFromEntrySet()", "name": "testSynchronizedRemoveFromEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedRemoveFromEntrySet()", "original_string": "    @Test\n    public void testSynchronizedRemoveFromEntrySet() throws InterruptedException {\n\n        final Map<Object, Thread> map = new LRUMap<>(10000);\n\n        final Map<Throwable, String> exceptions = new HashMap<>();\n        final ThreadGroup tg = new ThreadGroup(getName()) {\n            @Override\n            public void uncaughtException(final Thread t, final Throwable e) {\n                exceptions.put(e, t.getName());\n                super.uncaughtException(t, e);\n            }\n        };\n\n        final int[] counter = new int[1];\n        counter[0] = 0;\n        final Thread[] threads = new Thread[50];\n        for (int i = 0; i < threads.length; ++i) {\n            threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n\n                @Override\n                public void run() {\n                    int i = 0;\n                    try {\n                        synchronized (this) {\n                            notifyAll();\n                            wait();\n                        }\n                        final Thread thread = Thread.currentThread();\n                        while (i < 1000  && !interrupted()) {\n                            synchronized (map) {\n                                map.put(thread.getName() + \"[\" + ++i + \"]\", thread);\n                            }\n                        }\n                        synchronized (map) {\n                            map.entrySet().removeIf(entry -> entry.getValue() == this);\n                        }\n                    } catch (final InterruptedException e) {\n                        fail(\"Unexpected InterruptedException\");\n                    }\n                    if (i > 0) {\n                        synchronized (counter) {\n                            counter[0]++;\n                        }\n                    }\n                }\n\n            };\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.start();\n                thread.wait();\n            }\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.notifyAll();\n            }\n        }\n\n        Thread.sleep(1000);\n\n        for (final Thread thread : threads) {\n            thread.interrupt();\n        }\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.join();\n            }\n        }\n\n        assertEquals(0, exceptions.size(), \"Exceptions have been thrown: \" + exceptions);\n        assertTrue(counter[0] >= threads.length,\n                \"Each thread should have put at least 1 element into the map, but only \" + counter[0] + \" did succeed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testSynchronizedRemoveFromKeySet()", "name": "testSynchronizedRemoveFromKeySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedRemoveFromKeySet()", "original_string": "    @Test\n    public void testSynchronizedRemoveFromKeySet() throws InterruptedException {\n\n        final Map<Object, Thread> map = new LRUMap<>(10000);\n\n        final Map<Throwable, String> exceptions = new HashMap<>();\n        final ThreadGroup tg = new ThreadGroup(getName()) {\n            @Override\n            public void uncaughtException(final Thread t, final Throwable e) {\n                exceptions.put(e, t.getName());\n                super.uncaughtException(t, e);\n            }\n        };\n\n        final int[] counter = new int[1];\n        counter[0] = 0;\n        final Thread[] threads = new Thread[50];\n        for (int i = 0; i < threads.length; ++i) {\n            threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n\n                @Override\n                public void run() {\n                    int i = 0;\n                    try {\n                        synchronized (this) {\n                            notifyAll();\n                            wait();\n                        }\n                        final Thread thread = Thread.currentThread();\n                        while (i < 1000  && !interrupted()) {\n                            synchronized (map) {\n                                map.put(thread.getName() + \"[\" + ++i + \"]\", thread);\n                            }\n                        }\n                        synchronized (map) {\n                            for (final Iterator<Object> iter = map.keySet().iterator(); iter.hasNext();) {\n                                final String name = (String) iter.next();\n                                if (name.substring(0, name.indexOf('[')).equals(getName())) {\n                                    iter.remove();\n                                }\n                            }\n                        }\n                    } catch (final InterruptedException e) {\n                        fail(\"Unexpected InterruptedException\");\n                    }\n                    if (i > 0) {\n                        synchronized (counter) {\n                            counter[0]++;\n                        }\n                    }\n                }\n\n            };\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.start();\n                thread.wait();\n            }\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.notifyAll();\n            }\n        }\n\n        Thread.sleep(1000);\n\n        for (final Thread thread : threads) {\n            thread.interrupt();\n        }\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.join();\n            }\n        }\n\n        assertEquals(0, exceptions.size(), \"Exceptions have been thrown: \" + exceptions);\n        assertTrue(counter[0] >= threads.length,\n                \"Each thread should have put at least 1 element into the map, but only \" + counter[0] + \" did succeed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testSynchronizedRemoveFromMapIterator()", "name": "testSynchronizedRemoveFromMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedRemoveFromMapIterator()", "original_string": "    @Test\n    public void testSynchronizedRemoveFromMapIterator() throws InterruptedException {\n\n        final LRUMap<Object, Thread> map = new LRUMap<>(10000);\n\n        final Map<Throwable, String> exceptions = new HashMap<>();\n        final ThreadGroup tg = new ThreadGroup(getName()) {\n            @Override\n            public void uncaughtException(final Thread t, final Throwable e) {\n                exceptions.put(e, t.getName());\n                super.uncaughtException(t, e);\n            }\n        };\n\n        final int[] counter = new int[1];\n        counter[0] = 0;\n        final Thread[] threads = new Thread[50];\n        for (int i = 0; i < threads.length; ++i) {\n            threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n\n                @Override\n                public void run() {\n                    int i = 0;\n                    try {\n                        synchronized (this) {\n                            notifyAll();\n                            wait();\n                        }\n                        final Thread thread = Thread.currentThread();\n                        while (i < 1000  && !interrupted()) {\n                            synchronized (map) {\n                                map.put(thread.getName() + \"[\" + ++i + \"]\", thread);\n                            }\n                        }\n                        synchronized (map) {\n                            for (final MapIterator<Object, Thread> iter = map.mapIterator(); iter.hasNext();) {\n                                iter.next();\n                                if (iter.getValue() == this) {\n                                    iter.remove();\n                                }\n                            }\n                        }\n                    } catch (final InterruptedException e) {\n                        fail(\"Unexpected InterruptedException\");\n                    }\n                    if (i > 0) {\n                        synchronized (counter) {\n                            counter[0]++;\n                        }\n                    }\n                }\n\n            };\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.start();\n                thread.wait();\n            }\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.notifyAll();\n            }\n        }\n\n        Thread.sleep(1000);\n\n        for (final Thread thread : threads) {\n            thread.interrupt();\n        }\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.join();\n            }\n        }\n\n        assertEquals(0, exceptions.size(), \"Exceptions have been thrown: \" + exceptions);\n        assertTrue(counter[0] >= threads.length,\n                \"Each thread should have put at least 1 element into the map, but only \" + counter[0] + \" did succeed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest.[void]testSynchronizedRemoveFromValues()", "name": "testSynchronizedRemoveFromValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSynchronizedRemoveFromValues()", "original_string": "    @Test\n    public void testSynchronizedRemoveFromValues() throws InterruptedException {\n\n        final Map<Object, Thread> map = new LRUMap<>(10000);\n\n        final Map<Throwable, String> exceptions = new HashMap<>();\n        final ThreadGroup tg = new ThreadGroup(getName()) {\n            @Override\n            public void uncaughtException(final Thread t, final Throwable e) {\n                exceptions.put(e, t.getName());\n                super.uncaughtException(t, e);\n            }\n        };\n\n        final int[] counter = new int[1];\n        counter[0] = 0;\n        final Thread[] threads = new Thread[50];\n        for (int i = 0; i < threads.length; ++i) {\n            threads[i] = new Thread(tg, \"JUnit Thread \" + i) {\n\n                @Override\n                public void run() {\n                    int i = 0;\n                    try {\n                        synchronized (this) {\n                            notifyAll();\n                            wait();\n                        }\n                        final Thread thread = Thread.currentThread();\n                        while (i < 1000  && !interrupted()) {\n                            synchronized (map) {\n                                map.put(thread.getName() + \"[\" + ++i + \"]\", thread);\n                            }\n                        }\n                        synchronized (map) {\n                            map.values().removeIf(thread1 -> thread1 == this);\n                        }\n                    } catch (final InterruptedException e) {\n                        fail(\"Unexpected InterruptedException\");\n                    }\n                    if (i > 0) {\n                        synchronized (counter) {\n                            counter[0]++;\n                        }\n                    }\n                }\n\n            };\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.start();\n                thread.wait();\n            }\n        }\n\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.notifyAll();\n            }\n        }\n\n        Thread.sleep(1000);\n\n        for (final Thread thread : threads) {\n            thread.interrupt();\n        }\n        for (final Thread thread : threads) {\n            synchronized (thread) {\n                thread.join();\n            }\n        }\n\n        assertEquals(0, exceptions.size(), \"Exceptions have been thrown: \" + exceptions);\n        assertTrue(counter[0] >= threads.length,\n                \"Each thread should have put at least 1 element into the map, but only \" + counter[0] + \" did succeed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java", "class_name": "LRUMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMapTest.java.LRUMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone() {\n        final LinkedMap<K, V> map = new LinkedMap<>(10);\n        map.put((K) \"1\", (V) \"1\");\n        final Map<K, V> cloned = map.clone();\n        assertEquals(map.size(), cloned.size());\n        assertSame(map.get(\"1\"), cloned.get(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testGetByIndex()", "name": "testGetByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetByIndex()", "original_string": "    @Test\n    public void testGetByIndex() {\n        resetEmpty();\n        LinkedMap<K, V> lm = getMap();\n        try {\n            lm.get(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lm.get(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lm = getMap();\n        try {\n            lm.get(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lm.get(lm.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        int i = 0;\n        for (final MapIterator<K, V> it = lm.mapIterator(); it.hasNext(); i++) {\n            assertSame(it.next(), lm.get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testGetValueByIndex()", "name": "testGetValueByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueByIndex()", "original_string": "    @Test\n    public void testGetValueByIndex() {\n        resetEmpty();\n        LinkedMap<K, V> lm = getMap();\n        try {\n            lm.getValue(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lm.getValue(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lm = getMap();\n        try {\n            lm.getValue(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lm.getValue(lm.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        int i = 0;\n        for (final MapIterator<K, V> it = lm.mapIterator(); it.hasNext(); i++) {\n            it.next();\n            assertSame(it.getValue(), lm.getValue(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf()", "original_string": "    @Test\n    public void testIndexOf() {\n        resetEmpty();\n        LinkedMap<K, V> lm = getMap();\n        assertEquals(-1, lm.indexOf(getOtherKeys()));\n\n        resetFull();\n        lm = getMap();\n        final List<K> list = new ArrayList<>();\n        for (final MapIterator<K, V> it = lm.mapIterator(); it.hasNext();) {\n            list.add(it.next());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            assertEquals(i, lm.indexOf(list.get(i)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testInitialCapacityZero()", "name": "testInitialCapacityZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInitialCapacityZero()", "original_string": "    @Test\n    public void testInitialCapacityZero() {\n        final LinkedMap<String, String> map = new LinkedMap<>(0);\n        assertEquals(1, map.data.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-323\">COLLECTIONS-323</a>.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testInsertionOrder()", "name": "testInsertionOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInsertionOrder()", "original_string": "    @Test\n    public void testInsertionOrder() {\n        if (!isPutAddSupported() || !isPutChangeSupported()) {\n            return;\n        }\n        final K[] keys = getSampleKeys();\n        final V[] values = getSampleValues();\n        Iterator<K> keyIter;\n        Iterator<V> valueIter;\n\n        resetEmpty();\n        map.put(keys[0], values[0]);\n        map.put(keys[1], values[1]);\n        keyIter = map.keySet().iterator();\n        assertSame(keys[0], keyIter.next());\n        assertSame(keys[1], keyIter.next());\n        valueIter = map.values().iterator();\n        assertSame(values[0], valueIter.next());\n        assertSame(values[1], valueIter.next());\n\n        // no change to order\n        map.put(keys[1], values[1]);\n        keyIter = map.keySet().iterator();\n        assertSame(keys[0], keyIter.next());\n        assertSame(keys[1], keyIter.next());\n        valueIter = map.values().iterator();\n        assertSame(values[0], valueIter.next());\n        assertSame(values[1], valueIter.next());\n\n        // no change to order\n        map.put(keys[1], values[2]);\n        keyIter = map.keySet().iterator();\n        assertSame(keys[0], keyIter.next());\n        assertSame(keys[1], keyIter.next());\n        valueIter = map.values().iterator();\n        assertSame(values[0], valueIter.next());\n        assertSame(values[2], valueIter.next());\n\n        // no change to order\n        map.put(keys[0], values[3]);\n        keyIter = map.keySet().iterator();\n        assertSame(keys[0], keyIter.next());\n        assertSame(keys[1], keyIter.next());\n        valueIter = map.values().iterator();\n        assertSame(values[3], valueIter.next());\n        assertSame(values[2], valueIter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testRemoveByIndex()", "name": "testRemoveByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveByIndex()", "original_string": "    @Test\n    public void testRemoveByIndex() {\n        resetEmpty();\n        LinkedMap<K, V> lm = getMap();\n        try {\n            lm.remove(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lm.remove(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lm = getMap();\n        try {\n            lm.remove(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lm.remove(lm.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        final List<K> list = new ArrayList<>();\n        for (final MapIterator<K, V> it = lm.mapIterator(); it.hasNext();) {\n            list.add(it.next());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            final Object key = list.get(i);\n            final Object value = lm.get(key);\n            assertEquals(value, lm.remove(i));\n            list.remove(i);\n            assertFalse(lm.containsKey(key));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReset()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReset() {\n        resetEmpty();\n        OrderedMap<K, V> ordered = getMap();\n        ((ResettableIterator<K>) ordered.mapIterator()).reset();\n\n        resetFull();\n        ordered = getMap();\n        final List<K> list = new ArrayList<>(ordered.keySet());\n        final ResettableIterator<K> it = (ResettableIterator<K>) ordered.mapIterator();\n        assertSame(list.get(0), it.next());\n        assertSame(list.get(1), it.next());\n        it.reset();\n        assertSame(list.get(0), it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java", "class_name": "LinkedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMapTest.java.LinkedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java.UnmodifiableOrderedMapTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final OrderedMap<K, V> map = makeFullMap();\n        assertSame(map, UnmodifiableOrderedMap.unmodifiableOrderedMap(map));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableOrderedMap.unmodifiableOrderedMap(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java", "class_name": "UnmodifiableOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java.UnmodifiableOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java.UnmodifiableOrderedMapTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java", "class_name": "UnmodifiableOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java.UnmodifiableOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest.[void]testFirstKey()", "name": "testFirstKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFirstKey()", "original_string": "    @Test\n    public void testFirstKey() {\n        resetEmpty();\n        OrderedMap<K, V> ordered = getMap();\n        final OrderedMap<K, V> finalOrdered = ordered;\n        assertThrows(NoSuchElementException.class, () -> finalOrdered.firstKey());\n\n        resetFull();\n        ordered = getMap();\n        final K confirmedFirst = confirmed.keySet().iterator().next();\n        assertEquals(confirmedFirst, ordered.firstKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java", "class_name": "AbstractOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest.[void]testLastKey()", "name": "testLastKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLastKey()", "original_string": "    @Test\n    public void testLastKey() {\n        resetEmpty();\n        OrderedMap<K, V> ordered = getMap();\n        final OrderedMap<K, V> finalOrdered = ordered;\n        assertThrows(NoSuchElementException.class, () -> finalOrdered.lastKey());\n\n        resetFull();\n        ordered = getMap();\n        K confirmedLast = null;\n        for (final Iterator<K> it = confirmed.keySet().iterator(); it.hasNext();) {\n            confirmedLast = it.next();\n        }\n        assertEquals(confirmedLast, ordered.lastKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java", "class_name": "AbstractOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest.[void]testNextKey()", "name": "testNextKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextKey()", "original_string": "    @Test\n    public void testNextKey() {\n        resetEmpty();\n        OrderedMap<K, V> ordered = getMap();\n        assertNull(ordered.nextKey(getOtherKeys()[0]));\n        if (!isAllowNullKey()) {\n            try {\n                assertNull(ordered.nextKey(null)); // this is allowed too\n            } catch (final NullPointerException ex) {\n            }\n        } else {\n            assertNull(ordered.nextKey(null));\n        }\n\n        resetFull();\n        ordered = getMap();\n        final Iterator<K> it = confirmed.keySet().iterator();\n        K confirmedLast = it.next();\n        while (it.hasNext()) {\n            final K confirmedObject = it.next();\n            assertEquals(confirmedObject, ordered.nextKey(confirmedLast));\n            confirmedLast = confirmedObject;\n        }\n        assertNull(ordered.nextKey(confirmedLast));\n\n        if (!isAllowNullKey()) {\n            final OrderedMap<K, V> finalOrdered = ordered;\n            assertThrows(NullPointerException.class, () -> finalOrdered.nextKey(null));\n        } else {\n            assertNull(ordered.nextKey(null));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java", "class_name": "AbstractOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest.[void]testPreviousKey()", "name": "testPreviousKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousKey()", "original_string": "    @Test\n    public void testPreviousKey() {\n        resetEmpty();\n        OrderedMap<K, V> ordered = getMap();\n        assertNull(ordered.previousKey(getOtherKeys()[0]));\n        if (!isAllowNullKey()) {\n            try {\n                assertNull(ordered.previousKey(null)); // this is allowed too\n            } catch (final NullPointerException ex) {\n            }\n        } else {\n            assertNull(ordered.previousKey(null));\n        }\n\n        resetFull();\n        ordered = getMap();\n        final List<K> list = new ArrayList<>(confirmed.keySet());\n        Collections.reverse(list);\n        final Iterator<K> it = list.iterator();\n        K confirmedLast = it.next();\n        while (it.hasNext()) {\n            final K confirmedObject = it.next();\n            assertEquals(confirmedObject, ordered.previousKey(confirmedLast));\n            confirmedLast = confirmedObject;\n        }\n        assertNull(ordered.previousKey(confirmedLast));\n\n        if (!isAllowNullKey()) {\n            final OrderedMap<K, V> finalOrdered = ordered;\n            assertThrows(NullPointerException.class, () -> finalOrdered.previousKey(null));\n        } else if (!isAllowNullKey()) {\n            assertNull(ordered.previousKey(null));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java", "class_name": "AbstractOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractOrderedMapTest.java.AbstractOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest.[void]testIteratorWithSingleEntry()", "name": "testIteratorWithSingleEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithSingleEntry()", "original_string": "    @Test\n    public void testIteratorWithSingleEntry() {\n        multiValueMap.put(\"key1\", \"value1\");\n\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry = iterator.next();\n        assertEquals(\"key1\", entry.getKey());\n        assertEquals(\"value1\", entry.getValue());\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java", "class_name": "MultiValueMap_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest.[void]testIteratorWithMultipleEntries()", "name": "testIteratorWithMultipleEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithMultipleEntries()", "original_string": "    @Test\n    public void testIteratorWithMultipleEntries() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry1 = iterator.next();\n        assertEquals(\"key1\", entry1.getKey());\n        assertEquals(\"value1\", entry1.getValue());\n\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry2 = iterator.next();\n        assertEquals(\"key1\", entry2.getKey());\n        assertEquals(\"value2\", entry2.getValue());\n\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry3 = iterator.next();\n        assertEquals(\"key2\", entry3.getKey());\n        assertEquals(\"value3\", entry3.getValue());\n\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java", "class_name": "MultiValueMap_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest.[void]testIteratorWithEmptyMap()", "name": "testIteratorWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithEmptyMap()", "original_string": "    @Test\n    public void testIteratorWithEmptyMap() {\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java", "class_name": "MultiValueMap_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest.[void]testIteratorAfterRemove()", "name": "testIteratorAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorAfterRemove()", "original_string": "    @Test\n    public void testIteratorAfterRemove() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        multiValueMap.removeMapping(\"key1\", \"value1\");\n\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry1 = iterator.next();\n        assertEquals(\"key1\", entry1.getKey());\n        assertEquals(\"value2\", entry1.getValue());\n\n        assertTrue(iterator.hasNext());\n        Map.Entry<String, String> entry2 = iterator.next();\n        assertEquals(\"key2\", entry2.getKey());\n        assertEquals(\"value3\", entry2.getValue());\n\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java", "class_name": "MultiValueMap_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest.[void]testIteratorAfterClear()", "name": "testIteratorAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorAfterClear()", "original_string": "    @Test\n    public void testIteratorAfterClear() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        multiValueMap.put(\"key2\", \"value3\");\n\n        multiValueMap.clear();\n\n        Iterator<Map.Entry<String, String>> iterator = multiValueMap.iterator();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java", "class_name": "MultiValueMap_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java.MultiValueMap_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest.[void]testContainsValue_ValuePresentInFirstMap()", "name": "testContainsValue_ValuePresentInFirstMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ValuePresentInFirstMap()", "original_string": "    @Test\n    public void testContainsValue_ValuePresentInFirstMap() {\n        assertTrue(compositeMap.containsValue(\"one\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "class_name": "CompositeMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest.[void]testContainsValue_ValuePresentInSecondMap()", "name": "testContainsValue_ValuePresentInSecondMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ValuePresentInSecondMap()", "original_string": "    @Test\n    public void testContainsValue_ValuePresentInSecondMap() {\n        assertTrue(compositeMap.containsValue(\"three\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "class_name": "CompositeMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest.[void]testContainsValue_ValueNotPresent()", "name": "testContainsValue_ValueNotPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_ValueNotPresent()", "original_string": "    @Test\n    public void testContainsValue_ValueNotPresent() {\n        assertFalse(compositeMap.containsValue(\"five\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "class_name": "CompositeMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest.[void]testContainsValue_AfterAddingNewMap()", "name": "testContainsValue_AfterAddingNewMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_AfterAddingNewMap()", "original_string": "    @Test\n    public void testContainsValue_AfterAddingNewMap() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"5\", \"five\");\n        compositeMap.addComposited(newMap);\n        assertTrue(compositeMap.containsValue(\"five\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "class_name": "CompositeMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest.[void]testContainsValue_AfterRemovingValue()", "name": "testContainsValue_AfterRemovingValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_AfterRemovingValue()", "original_string": "    @Test\n    public void testContainsValue_AfterRemovingValue() {\n        compositeMap.remove(\"1\");\n        assertFalse(compositeMap.containsValue(\"one\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "class_name": "CompositeMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest.[void]testContainsValue_AfterPuttingNewValue()", "name": "testContainsValue_AfterPuttingNewValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue_AfterPuttingNewValue()", "original_string": "    @Test\n    public void testContainsValue_AfterPuttingNewValue() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"6\", \"six\");\n        compositeMap.addComposited(newMap);\n        assertTrue(compositeMap.containsValue(\"six\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "class_name": "CompositeMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java.CompositeMap_containsValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest.[void]testIndexOfKeyExists()", "name": "testIndexOfKeyExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOfKeyExists()", "original_string": "    @Test\n    public void testIndexOfKeyExists() {\n        linkedMap.put(\"key1\", \"value1\");\n        linkedMap.put(\"key2\", \"value2\");\n        linkedMap.put(\"key3\", \"value3\");\n\n        assertEquals(1, linkedMap.indexOf(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "class_name": "LinkedMap_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest.[void]testIndexOfKeyNotExists()", "name": "testIndexOfKeyNotExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOfKeyNotExists()", "original_string": "    @Test\n    public void testIndexOfKeyNotExists() {\n        linkedMap.put(\"key1\", \"value1\");\n        linkedMap.put(\"key2\", \"value2\");\n\n        assertEquals(CollectionUtils.INDEX_NOT_FOUND, linkedMap.indexOf(\"key4\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "class_name": "LinkedMap_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest.[void]testIndexOfAfterRemove()", "name": "testIndexOfAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOfAfterRemove()", "original_string": "    @Test\n    public void testIndexOfAfterRemove() {\n        linkedMap.put(\"key1\", \"value1\");\n        linkedMap.put(\"key2\", \"value2\");\n        linkedMap.put(\"key3\", \"value3\");\n\n        linkedMap.remove(1);\n\n        assertEquals(CollectionUtils.INDEX_NOT_FOUND, linkedMap.indexOf(\"key2\"));\n        assertEquals(1, linkedMap.indexOf(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "class_name": "LinkedMap_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest.[void]testIndexOfAfterAdd()", "name": "testIndexOfAfterAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOfAfterAdd()", "original_string": "    @Test\n    public void testIndexOfAfterAdd() {\n        linkedMap.put(\"key1\", \"value1\");\n        linkedMap.put(\"key2\", \"value2\");\n\n        linkedMap.put(\"key3\", \"value3\");\n\n        assertEquals(2, linkedMap.indexOf(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "class_name": "LinkedMap_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest.[void]testIndexOfEmptyMap()", "name": "testIndexOfEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOfEmptyMap()", "original_string": "    @Test\n    public void testIndexOfEmptyMap() {\n        assertEquals(CollectionUtils.INDEX_NOT_FOUND, linkedMap.indexOf(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "class_name": "LinkedMap_indexOfTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java.LinkedMap_indexOfTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java.SingletonMap_putTest.[void]testPutWithMatchingKey()", "name": "testPutWithMatchingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutWithMatchingKey()", "original_string": "    @Test\n    public void testPutWithMatchingKey() {\n        SingletonMap<String, String> map = new SingletonMap<>(\"key\", \"oldValue\");\n        String oldValue = map.put(\"key\", \"newValue\");\n        assertEquals(\"oldValue\", oldValue);\n        assertEquals(\"newValue\", map.get(\"key\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java", "class_name": "SingletonMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java.SingletonMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java.SingletonMap_putTest.[void]testPutWithNonMatchingKey()", "name": "testPutWithNonMatchingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutWithNonMatchingKey()", "original_string": "    @Test\n    public void testPutWithNonMatchingKey() {\n        SingletonMap<String, String> map = new SingletonMap<>(\"key\", \"value\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            map.put(\"newKey\", \"newValue\");\n        });\n        assertEquals(\"Cannot put new key/value pair - Map is fixed size singleton\", exception.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java", "class_name": "SingletonMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java.SingletonMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeWithExistingKey()", "name": "testSizeWithExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithExistingKey()", "original_string": "    @Test\n    public void testSizeWithExistingKey() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key1\", \"value2\");\n        assertEquals(2, multiValueMap.size(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeWithNonExistingKey()", "name": "testSizeWithNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithNonExistingKey()", "original_string": "    @Test\n    public void testSizeWithNonExistingKey() {\n        assertEquals(0, multiValueMap.size(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeAfterRemoveMapping()", "name": "testSizeAfterRemoveMapping", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterRemoveMapping()", "original_string": "    @Test\n    public void testSizeAfterRemoveMapping() {\n        multiValueMap.put(\"key3\", \"value3\");\n        multiValueMap.put(\"key3\", \"value4\");\n        multiValueMap.removeMapping(\"key3\", \"value3\");\n        assertEquals(1, multiValueMap.size(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeAfterClear()", "name": "testSizeAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterClear()", "original_string": "    @Test\n    public void testSizeAfterClear() {\n        multiValueMap.put(\"key4\", \"value5\");\n        multiValueMap.put(\"key4\", \"value6\");\n        multiValueMap.clear();\n        assertEquals(0, multiValueMap.size(\"key4\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeWithMultipleKeys()", "name": "testSizeWithMultipleKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithMultipleKeys()", "original_string": "    @Test\n    public void testSizeWithMultipleKeys() {\n        multiValueMap.put(\"key5\", \"value7\");\n        multiValueMap.put(\"key6\", \"value8\");\n        multiValueMap.put(\"key6\", \"value9\");\n        assertEquals(1, multiValueMap.size(\"key5\"));\n        assertEquals(2, multiValueMap.size(\"key6\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeWithEmptyCollection()", "name": "testSizeWithEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithEmptyCollection()", "original_string": "    @Test\n    public void testSizeWithEmptyCollection() {\n        multiValueMap.put(\"key7\", \"value10\");\n        multiValueMap.removeMapping(\"key7\", \"value10\");\n        assertEquals(0, multiValueMap.size(\"key7\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeWithNullKey()", "name": "testSizeWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithNullKey()", "original_string": "    @Test\n    public void testSizeWithNullKey() {\n        multiValueMap.put(null, \"value11\");\n        multiValueMap.put(null, \"value12\");\n        assertEquals(2, multiValueMap.size(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest.[void]testSizeWithDifferentCollectionTypes()", "name": "testSizeWithDifferentCollectionTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithDifferentCollectionTypes()", "original_string": "    @Test\n    public void testSizeWithDifferentCollectionTypes() {\n        MultiValueMap<String, String> mapWithArrayList = MultiValueMap.multiValueMap(new HashMap<>(), ArrayList.class);\n        mapWithArrayList.put(\"key8\", \"value13\");\n        mapWithArrayList.put(\"key8\", \"value14\");\n        assertEquals(2, mapWithArrayList.size(\"key8\"));\n\n        MultiValueMap<String, String> mapWithHashSet = MultiValueMap.multiValueMap(new HashMap<>(), HashSet.class);\n        mapWithHashSet.put(\"key9\", \"value15\");\n        mapWithHashSet.put(\"key9\", \"value16\");\n        assertEquals(2, mapWithHashSet.size(\"key9\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "class_name": "MultiValueMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java.MultiValueMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java.CompositeMap_addCompositedTest.[void]testAddCompositedSuccess()", "name": "testAddCompositedSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddCompositedSuccess()", "original_string": "    @Test\n    public void testAddCompositedSuccess() {\n        compositeMap.addComposited(map3);\n        assertEquals(5, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "class_name": "CompositeMap_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java.CompositeMap_addCompositedTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java.CompositeMap_addCompositedTest.[void]testAddCompositedKeyCollisionWithoutMutator()", "name": "testAddCompositedKeyCollisionWithoutMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddCompositedKeyCollisionWithoutMutator()", "original_string": "    @Test\n    public void testAddCompositedKeyCollisionWithoutMutator() {\n        Map<String, String> mapWithCollision = new HashMap<>();\n        mapWithCollision.put(\"key2\", \"value5\"); // Key collision with map1\n        assertThrows(IllegalArgumentException.class, () -> {\n            compositeMap.addComposited(mapWithCollision);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "class_name": "CompositeMap_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java.CompositeMap_addCompositedTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java.CompositeMap_addCompositedTest.[void]testAddCompositedKeyCollisionWithMutator()", "name": "testAddCompositedKeyCollisionWithMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddCompositedKeyCollisionWithMutator()", "original_string": "    @Test\n    public void testAddCompositedKeyCollisionWithMutator() {\n        compositeMap.setMutator(new CompositeMap.MapMutator<String, String>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> t) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n                // Handle collision\n            }\n        });\n\n        Map<String, String> mapWithCollision = new HashMap<>();\n        mapWithCollision.put(\"key2\", \"value5\"); // Key collision with map1\n        compositeMap.addComposited(mapWithCollision);\n        assertEquals(5, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "class_name": "CompositeMap_addCompositedTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java.CompositeMap_addCompositedTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java.LazySortedMap_tailMapTest.[void]testTailMap()", "name": "testTailMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTailMap()", "original_string": "    @Test\n    public void testTailMap() {\n        // Given\n        SortedMap<Integer, String> originalMap = new TreeMap<>();\n        originalMap.put(1, \"one\");\n        originalMap.put(2, \"two\");\n        originalMap.put(3, \"three\");\n        Factory<String> factory = () -> \"default\";\n        LazySortedMap<Integer, String> lazySortedMap = LazySortedMap.lazySortedMap(originalMap, factory);\n\n        // When\n        SortedMap<Integer, String> resultMap = lazySortedMap.tailMap(2);\n\n        // Then\n        assertNotNull(resultMap);\n        assertEquals(2, resultMap.size());\n        assertEquals(\"two\", resultMap.get(2));\n        assertEquals(\"three\", resultMap.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java", "class_name": "LazySortedMap_tailMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java.LazySortedMap_tailMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructors()", "original_string": "    @Test\n    public void testConstructors() {\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> {\n                    final Map<String, String> map = null;\n                    new PassiveExpiringMap<>(map);\n                },\n                        \"constructor - exception should have been thrown.\"),\n                () -> assertThrows(NullPointerException.class, () -> {\n                    final ExpirationPolicy<String, String> policy = null;\n                    new PassiveExpiringMap<>(policy);\n                },\n                        \"constructor - exception should have been thrown.\"),\n                () -> assertThrows(NullPointerException.class, () -> {\n                    final TimeUnit unit = null;\n                    new PassiveExpiringMap<String, String>(10L, unit);\n                },\n                        \"constructor - exception should have been thrown.\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testContainsKey()", "name": "testContainsKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey()", "original_string": "    @Test\n    public void testContainsKey() {\n        final Map<Integer, String> m = makeTestMap();\n        assertFalse(m.containsKey(Integer.valueOf(1)));\n        assertFalse(m.containsKey(Integer.valueOf(3)));\n        assertFalse(m.containsKey(Integer.valueOf(5)));\n        assertTrue(m.containsKey(Integer.valueOf(2)));\n        assertTrue(m.containsKey(Integer.valueOf(4)));\n        assertTrue(m.containsKey(Integer.valueOf(6)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testContainsValue()", "name": "testContainsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue()", "original_string": "    @Test\n    public void testContainsValue() {\n        final Map<Integer, String> m = makeTestMap();\n        assertFalse(m.containsValue(\"one\"));\n        assertFalse(m.containsValue(\"three\"));\n        assertFalse(m.containsValue(\"five\"));\n        assertTrue(m.containsValue(\"two\"));\n        assertTrue(m.containsValue(\"four\"));\n        assertTrue(m.containsValue(\"six\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testDecoratedMap()", "name": "testDecoratedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecoratedMap()", "original_string": "    @Test\n    public void testDecoratedMap() {\n        // entries shouldn't expire\n        final Map<Integer, String> m = makeDecoratedTestMap();\n        assertEquals(6, m.size());\n        assertEquals(\"one\", m.get(Integer.valueOf(1)));\n\n        // removing a single item shouldn't affect any other items\n        assertEquals(\"two\", m.get(Integer.valueOf(2)));\n        m.remove(Integer.valueOf(2));\n        assertEquals(5, m.size());\n        assertEquals(\"one\", m.get(Integer.valueOf(1)));\n        assertNull(m.get(Integer.valueOf(2)));\n\n        // adding a single, even item shouldn't affect any other items\n        assertNull(m.get(Integer.valueOf(2)));\n        m.put(Integer.valueOf(2), \"two\");\n        assertEquals(6, m.size());\n        assertEquals(\"one\", m.get(Integer.valueOf(1)));\n        assertEquals(\"two\", m.get(Integer.valueOf(2)));\n\n        // adding a single, odd item (one that expires) shouldn't affect any\n        // other items\n        // put the entry expires immediately\n        m.put(Integer.valueOf(1), \"one-one\");\n        assertEquals(5, m.size());\n        assertNull(m.get(Integer.valueOf(1)));\n        assertEquals(\"two\", m.get(Integer.valueOf(2)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        final Map<Integer, String> m = makeTestMap();\n        assertEquals(3, m.entrySet().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testExpiration()", "name": "testExpiration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExpiration()", "original_string": "    @Test\n    public void testExpiration() {\n        validateExpiration(new PassiveExpiringMap<>(500), 500);\n        validateExpiration(new PassiveExpiringMap<>(1000), 1000);\n        validateExpiration(new PassiveExpiringMap<>(\n                new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<>(500)), 500);\n        validateExpiration(new PassiveExpiringMap<>(\n                new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<>(1, TimeUnit.SECONDS)), 1000);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet()", "original_string": "    @Test\n    public void testGet() {\n        final Map<Integer, String> m = makeTestMap();\n        assertNull(m.get(Integer.valueOf(1)));\n        assertEquals(\"two\", m.get(Integer.valueOf(2)));\n        assertNull(m.get(Integer.valueOf(3)));\n        assertEquals(\"four\", m.get(Integer.valueOf(4)));\n        assertNull(m.get(Integer.valueOf(5)));\n        assertEquals(\"six\", m.get(Integer.valueOf(6)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testIsEmpty()", "name": "testIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmpty()", "original_string": "    @Test\n    public void testIsEmpty() {\n        Map<Integer, String> m = makeTestMap();\n        assertFalse(m.isEmpty());\n\n        // remove just evens\n        m = makeTestMap();\n        m.remove(Integer.valueOf(2));\n        m.remove(Integer.valueOf(4));\n        m.remove(Integer.valueOf(6));\n        assertTrue(m.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testKeySet()", "name": "testKeySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySet()", "original_string": "    @Test\n    public void testKeySet() {\n        final Map<Integer, String> m = makeTestMap();\n        assertEquals(3, m.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testPut()", "name": "testPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut()", "original_string": "    @Test\n    public void testPut() {\n        final Map<Integer, String> m = makeTestMap();\n        assertNull(m.put(Integer.valueOf(1), \"ONE\"));\n        assertEquals(\"two\", m.put(Integer.valueOf(2), \"TWO\"));\n        assertNull(m.put(Integer.valueOf(3), \"THREE\"));\n        assertEquals(\"four\", m.put(Integer.valueOf(4), \"FOUR\"));\n        assertNull(m.put(Integer.valueOf(5), \"FIVE\"));\n        assertEquals(\"six\", m.put(Integer.valueOf(6), \"SIX\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        final Map<Integer, String> m = makeTestMap();\n        assertEquals(3, m.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testValues()", "name": "testValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValues()", "original_string": "    @Test\n    public void testValues() {\n        final Map<Integer, String> m = makeTestMap();\n        assertEquals(3, m.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest.[void]testZeroTimeToLive()", "name": "testZeroTimeToLive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testZeroTimeToLive()", "original_string": "    @Test\n    public void testZeroTimeToLive() {\n        // item should not be available\n        final PassiveExpiringMap<String, String> m = new PassiveExpiringMap<>(0L);\n        m.put(\"a\", \"b\");\n        assertNull(m.get(\"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java", "class_name": "PassiveExpiringMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java.PassiveExpiringMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest.[void]testNextKey_ValidKey()", "name": "testNextKey_ValidKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextKey_ValidKey()", "original_string": "    @Test\n    public void testNextKey_ValidKey() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n        listOrderedMap.put(\"key3\", \"value3\");\n\n        assertEquals(\"key2\", listOrderedMap.nextKey(\"key1\"));\n        assertEquals(\"key3\", listOrderedMap.nextKey(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "class_name": "ListOrderedMap_nextKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest.[void]testNextKey_LastKey()", "name": "testNextKey_LastKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextKey_LastKey()", "original_string": "    @Test\n    public void testNextKey_LastKey() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n\n        assertNull(listOrderedMap.nextKey(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "class_name": "ListOrderedMap_nextKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest.[void]testNextKey_NonExistentKey()", "name": "testNextKey_NonExistentKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextKey_NonExistentKey()", "original_string": "    @Test\n    public void testNextKey_NonExistentKey() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n\n        assertNull(listOrderedMap.nextKey(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "class_name": "ListOrderedMap_nextKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest.[void]testNextKey_EmptyMap()", "name": "testNextKey_EmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextKey_EmptyMap()", "original_string": "    @Test\n    public void testNextKey_EmptyMap() {\n        assertNull(listOrderedMap.nextKey(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "class_name": "ListOrderedMap_nextKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest.[void]testNextKey_AfterRemove()", "name": "testNextKey_AfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextKey_AfterRemove()", "original_string": "    @Test\n    public void testNextKey_AfterRemove() {\n        listOrderedMap.put(\"key1\", \"value1\");\n        listOrderedMap.put(\"key2\", \"value2\");\n        listOrderedMap.put(\"key3\", \"value3\");\n\n        listOrderedMap.remove(\"key2\");\n\n        assertEquals(\"key3\", listOrderedMap.nextKey(\"key1\"));\n        assertNull(listOrderedMap.nextKey(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "class_name": "ListOrderedMap_nextKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java.ListOrderedMap_nextKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java.TransformedMap_putAllTest.[void]testPutAll()", "name": "testPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll()", "original_string": "    @Test\n    public void testPutAll() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        originalMap.put(\"key2\", \"value2\");\n\n        Transformer<String, String> keyTransformer = mock(Transformer.class);\n        Transformer<String, String> valueTransformer = mock(Transformer.class);\n\n        when(keyTransformer.apply(\"key1\")).thenReturn(\"transformedKey1\");\n        when(keyTransformer.apply(\"key2\")).thenReturn(\"transformedKey2\");\n        when(valueTransformer.apply(\"value1\")).thenReturn(\"transformedValue1\");\n        when(valueTransformer.apply(\"value2\")).thenReturn(\"transformedValue2\");\n\n        TransformedMap<String, String> transformedMap = new TransformedMap<>(new HashMap<>(), keyTransformer, valueTransformer);\n\n        // When\n        transformedMap.putAll(originalMap);\n\n        // Then\n        Map<String, String> expectedMap = new HashMap<>();\n        expectedMap.put(\"transformedKey1\", \"transformedValue1\");\n        expectedMap.put(\"transformedKey2\", \"transformedValue2\");\n\n        assertEquals(expectedMap, transformedMap.decorated());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java", "class_name": "TransformedMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java.TransformedMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_KeyInFirstMap()", "name": "testContainsKey_KeyInFirstMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_KeyInFirstMap()", "original_string": "    @Test\n    public void testContainsKey_KeyInFirstMap() {\n        assertTrue(compositeMap.containsKey(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_KeyInSecondMap()", "name": "testContainsKey_KeyInSecondMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_KeyInSecondMap()", "original_string": "    @Test\n    public void testContainsKey_KeyInSecondMap() {\n        assertTrue(compositeMap.containsKey(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_KeyNotPresent()", "name": "testContainsKey_KeyNotPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_KeyNotPresent()", "original_string": "    @Test\n    public void testContainsKey_KeyNotPresent() {\n        assertFalse(compositeMap.containsKey(\"5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_AfterAddingNewMap()", "name": "testContainsKey_AfterAddingNewMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_AfterAddingNewMap()", "original_string": "    @Test\n    public void testContainsKey_AfterAddingNewMap() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"5\", \"five\");\n        compositeMap.addComposited(newMap);\n        assertTrue(compositeMap.containsKey(\"5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_AfterRemovingKey()", "name": "testContainsKey_AfterRemovingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_AfterRemovingKey()", "original_string": "    @Test\n    public void testContainsKey_AfterRemovingKey() {\n        compositeMap.remove(\"1\");\n        assertFalse(compositeMap.containsKey(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_AfterRemovingCompositedMap()", "name": "testContainsKey_AfterRemovingCompositedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_AfterRemovingCompositedMap()", "original_string": "    @Test\n    public void testContainsKey_AfterRemovingCompositedMap() {\n        compositeMap.removeComposited(mapOne);\n        assertFalse(compositeMap.containsKey(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_NullKey()", "name": "testContainsKey_NullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_NullKey()", "original_string": "    @Test\n    public void testContainsKey_NullKey() {\n        assertFalse(compositeMap.containsKey(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest.[void]testContainsKey_EmptyCompositeMap()", "name": "testContainsKey_EmptyCompositeMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey_EmptyCompositeMap()", "original_string": "    @Test\n    public void testContainsKey_EmptyCompositeMap() {\n        compositeMap = new CompositeMap<>();\n        assertFalse(compositeMap.containsKey(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "class_name": "CompositeMap_containsKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java.CompositeMap_containsKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java.PassiveExpiringMap_putTest.[void]testPut_EntryNeverExpires()", "name": "testPut_EntryNeverExpires", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut_EntryNeverExpires()", "original_string": "    @Test\n    public void testPut_EntryNeverExpires() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(-1L);\n        String key = \"key\";\n        String value = \"value\";\n\n        // When\n        String result = map.put(key, value);\n\n        // Then\n        assertNull(result);\n        assertEquals(value, map.get(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "class_name": "PassiveExpiringMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java.PassiveExpiringMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java.PassiveExpiringMap_putTest.[void]testPut_EntryAlwaysExpires()", "name": "testPut_EntryAlwaysExpires", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut_EntryAlwaysExpires()", "original_string": "    @Test\n    public void testPut_EntryAlwaysExpires() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(0L);\n        String key = \"key\";\n        String value = \"value\";\n\n        // When\n        String result = map.put(key, value);\n\n        // Then\n        assertNull(result);\n        assertNull(map.get(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "class_name": "PassiveExpiringMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java.PassiveExpiringMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java.PassiveExpiringMap_putTest.[void]testPut_EntryExpiresAfterTime()", "name": "testPut_EntryExpiresAfterTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut_EntryExpiresAfterTime()", "original_string": "    @Test\n    public void testPut_EntryExpiresAfterTime() throws InterruptedException {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(1, TimeUnit.SECONDS);\n        String key = \"key\";\n        String value = \"value\";\n\n        // When\n        String result = map.put(key, value);\n\n        // Then\n        assertNull(result);\n        assertEquals(value, map.get(key));\n\n        // Wait for the entry to expire\n        Thread.sleep(1100);\n        assertNull(map.get(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "class_name": "PassiveExpiringMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java.PassiveExpiringMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java.AbstractIterableMapTest.[void]testFailFastEntrySet()", "name": "testFailFastEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFailFastEntrySet()", "original_string": "    @Test\n    public void testFailFastEntrySet() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        if (!isFailFastExpected()) {\n            return;\n        }\n        resetFull();\n        Iterator<Map.Entry<K, V>> it = getMap().entrySet().iterator();\n        final Map.Entry<K, V> val = it.next();\n        getMap().remove(val.getKey());\n        final Iterator<Map.Entry<K, V>> finalIt0 = it;\n        assertThrows(ConcurrentModificationException.class, () -> finalIt0.next());\n\n        resetFull();\n        it = getMap().entrySet().iterator();\n        it.next();\n        getMap().clear();\n        final Iterator<Map.Entry<K, V>> finalIt1 = it;\n        assertThrows(ConcurrentModificationException.class, () -> finalIt1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java", "class_name": "AbstractIterableMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java.AbstractIterableMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java.AbstractIterableMapTest.[void]testFailFastKeySet()", "name": "testFailFastKeySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFailFastKeySet()", "original_string": "    @Test\n    public void testFailFastKeySet() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        if (!isFailFastExpected()) {\n            return;\n        }\n        resetFull();\n        Iterator<K> it = getMap().keySet().iterator();\n        final K val = it.next();\n        getMap().remove(val);\n        final Iterator<K> finalIt0 = it;\n        assertThrows(ConcurrentModificationException.class, () -> finalIt0.next());\n\n        resetFull();\n        it = getMap().keySet().iterator();\n        it.next();\n        getMap().clear();\n        final Iterator<K> finalIt1 = it;\n        assertThrows(ConcurrentModificationException.class, () -> finalIt1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java", "class_name": "AbstractIterableMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java.AbstractIterableMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java.AbstractIterableMapTest.[void]testFailFastValues()", "name": "testFailFastValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFailFastValues()", "original_string": "    @Test\n    public void testFailFastValues() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        if (!isFailFastExpected()) {\n            return;\n        }\n        resetFull();\n        Iterator<V> it = getMap().values().iterator();\n        it.next();\n        getMap().remove(getMap().keySet().iterator().next());\n        final Iterator<V> finalIt0 = it;\n        assertThrows(ConcurrentModificationException.class, () -> finalIt0.next());\n\n        resetFull();\n        it = getMap().values().iterator();\n        it.next();\n        getMap().clear();\n        final Iterator<V> finalIt1 = it;\n        assertThrows(ConcurrentModificationException.class, () -> finalIt1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java", "class_name": "AbstractIterableMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractIterableMapTest.java.AbstractIterableMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "  }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java.UnmodifiableSortedMap_unmodifiableSortedMapTest.[void]testUnmodifiableSortedMap_WithUnmodifiableMap()", "name": "testUnmodifiableSortedMap_WithUnmodifiableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableSortedMap_WithUnmodifiableMap()", "original_string": "    @Test\n    public void testUnmodifiableSortedMap_WithUnmodifiableMap() {\n        // Given\n        SortedMap<String, String> originalMap = new TreeMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        SortedMap<String, String> unmodifiableMap = UnmodifiableSortedMap.unmodifiableSortedMap(originalMap);\n\n        // When\n        SortedMap<String, String> result = UnmodifiableSortedMap.unmodifiableSortedMap(unmodifiableMap);\n\n        // Then\n        assertSame(unmodifiableMap, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java", "class_name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java.UnmodifiableSortedMap_unmodifiableSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java.UnmodifiableSortedMap_unmodifiableSortedMapTest.[void]testUnmodifiableSortedMap_WithModifiableMap()", "name": "testUnmodifiableSortedMap_WithModifiableMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableSortedMap_WithModifiableMap()", "original_string": "    @Test\n    public void testUnmodifiableSortedMap_WithModifiableMap() {\n        // Given\n        SortedMap<String, String> originalMap = new TreeMap<>();\n        originalMap.put(\"key1\", \"value1\");\n\n        // When\n        SortedMap<String, String> result = UnmodifiableSortedMap.unmodifiableSortedMap(originalMap);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableSortedMap);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java", "class_name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java.UnmodifiableSortedMap_unmodifiableSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java.PassiveExpiringMap_getTest.[void]testGet_EntryExistsAndNotExpired()", "name": "testGet_EntryExistsAndNotExpired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_EntryExistsAndNotExpired()", "original_string": "    @Test\n    public void testGet_EntryExistsAndNotExpired() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new ConstantTimeToLiveExpirationPolicy<>(1000L), new HashMap<>());\n        map.put(\"key1\", \"value1\");\n\n        // When\n        String result = map.get(\"key1\");\n\n        // Then\n        assertEquals(\"value1\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java", "class_name": "PassiveExpiringMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java.PassiveExpiringMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java.PassiveExpiringMap_getTest.[void]testGet_EntryExistsButExpired()", "name": "testGet_EntryExistsButExpired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_EntryExistsButExpired()", "original_string": "    @Test\n    public void testGet_EntryExistsButExpired() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new ConstantTimeToLiveExpirationPolicy<>(0L), new HashMap<>());\n        map.put(\"key1\", \"value1\");\n\n        // When\n        String result = map.get(\"key1\");\n\n        // Then\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java", "class_name": "PassiveExpiringMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java.PassiveExpiringMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java.PassiveExpiringMap_getTest.[void]testGet_EntryDoesNotExist()", "name": "testGet_EntryDoesNotExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_EntryDoesNotExist()", "original_string": "    @Test\n    public void testGet_EntryDoesNotExist() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new ConstantTimeToLiveExpirationPolicy<>(1000L), new HashMap<>());\n\n        // When\n        String result = map.get(\"key1\");\n\n        // Then\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java", "class_name": "PassiveExpiringMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java.PassiveExpiringMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_entrySetTest.java.PassiveExpiringMap_entrySetTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new ConstantTimeToLiveExpirationPolicy<>(1000L), new HashMap<>());\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        // When\n        Set<Map.Entry<String, String>> entrySet = map.entrySet();\n\n        // Then\n        assertEquals(2, entrySet.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_entrySetTest.java", "class_name": "PassiveExpiringMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_entrySetTest.java.PassiveExpiringMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest.[void]testValuesWithEmptyMap()", "name": "testValuesWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesWithEmptyMap()", "original_string": "    @Test\n    public void testValuesWithEmptyMap() {\n        Collection<Object> values = multiValueMap.values();\n        assertTrue(values.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java", "class_name": "MultiValueMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest.[void]testValuesWithSingleEntry()", "name": "testValuesWithSingleEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesWithSingleEntry()", "original_string": "    @Test\n    public void testValuesWithSingleEntry() {\n        multiValueMap.put(\"key1\", \"value1\");\n        Collection<Object> values = multiValueMap.values();\n        assertEquals(1, values.size());\n        assertTrue(values.contains(\"value1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java", "class_name": "MultiValueMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest.[void]testValuesWithMultipleEntries()", "name": "testValuesWithMultipleEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesWithMultipleEntries()", "original_string": "    @Test\n    public void testValuesWithMultipleEntries() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key2\", \"value2\");\n        multiValueMap.put(\"key1\", \"value3\");\n        Collection<Object> values = multiValueMap.values();\n        assertEquals(3, values.size());\n        assertTrue(values.contains(\"value1\"));\n        assertTrue(values.contains(\"value2\"));\n        assertTrue(values.contains(\"value3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java", "class_name": "MultiValueMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest.[void]testValuesAfterClear()", "name": "testValuesAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesAfterClear()", "original_string": "    @Test\n    public void testValuesAfterClear() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key2\", \"value2\");\n        multiValueMap.clear();\n        Collection<Object> values = multiValueMap.values();\n        assertTrue(values.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java", "class_name": "MultiValueMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest.[void]testValuesAfterRemove()", "name": "testValuesAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesAfterRemove()", "original_string": "    @Test\n    public void testValuesAfterRemove() {\n        multiValueMap.put(\"key1\", \"value1\");\n        multiValueMap.put(\"key2\", \"value2\");\n        multiValueMap.remove(\"key1\");\n        Collection<Object> values = multiValueMap.values();\n        assertEquals(1, values.size());\n        assertTrue(values.contains(\"value2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java", "class_name": "MultiValueMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest.[void]testValuesWithCustomCollection()", "name": "testValuesWithCustomCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesWithCustomCollection()", "original_string": "    @Test\n    public void testValuesWithCustomCollection() {\n        Map<String, Collection<String>> map = new HashMap<>();\n        map.put(\"key1\", new ArrayList<>(java.util.Arrays.asList(\"value1\", \"value2\")));\n        MultiValueMap<String, String> customMap = MultiValueMap.multiValueMap(map, ArrayList::new);\n        Collection<Object> values = customMap.values();\n        assertEquals(2, values.size());\n        assertTrue(values.contains(\"value1\"));\n        assertTrue(values.contains(\"value2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java", "class_name": "MultiValueMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java.MultiValueMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest.[void]testCaseInsensitive()", "name": "testCaseInsensitive", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCaseInsensitive()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCaseInsensitive() {\n        final Map<K, V> map = makeObject();\n        map.put((K) \"One\", (V) \"One\");\n        map.put((K) \"Two\", (V) \"Two\");\n        assertEquals(\"One\", map.get(\"one\"));\n        assertEquals(\"One\", map.get(\"oNe\"));\n        map.put((K) \"two\", (V) \"Three\");\n        assertEquals(\"Three\", map.get(\"Two\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "class_name": "CaseInsensitiveMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone() {\n        final CaseInsensitiveMap<K, V> map = new CaseInsensitiveMap<>(10);\n        map.put((K) \"1\", (V) \"1\");\n        final CaseInsensitiveMap<K, V> cloned = map.clone();\n        assertEquals(map.size(), cloned.size());\n        assertSame(map.get(\"1\"), cloned.get(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "class_name": "CaseInsensitiveMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest.[void]testInitialCapacityZero()", "name": "testInitialCapacityZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInitialCapacityZero()", "original_string": "    @Test\n    public void testInitialCapacityZero() {\n        final CaseInsensitiveMap<String, String> map = new CaseInsensitiveMap<>(0);\n        assertEquals(1, map.data.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "class_name": "CaseInsensitiveMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-323\">COLLECTIONS-323</a>.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest.[void]testLocaleIndependence()", "name": "testLocaleIndependence", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLocaleIndependence()", "original_string": "    @Test\n    public void testLocaleIndependence() {\n        final Locale orig = Locale.getDefault();\n\n        final Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\", StringUtils.EMPTY, StringUtils.EMPTY), Locale.getDefault() };\n\n        final String[][] data = {\n            { \"i\", \"I\" },\n            { \"\\u03C2\", \"\\u03C3\" },\n            { \"\\u03A3\", \"\\u03C2\" },\n            { \"\\u03A3\", \"\\u03C3\" },\n        };\n\n        try {\n            for (final Locale locale : locales) {\n                Locale.setDefault(locale);\n                for (int j = 0; j < data.length; j++) {\n                    assertTrue(data[j][0].equalsIgnoreCase(data[j][1]), \"Test data corrupt: \" + j);\n                    final CaseInsensitiveMap<String, String> map = new CaseInsensitiveMap<>();\n                    map.put(data[j][0], \"value\");\n                    assertEquals(\"value\", map.get(data[j][1]), Locale.getDefault() + \": \" + j);\n                }\n            }\n        } finally {\n            Locale.setDefault(orig);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "class_name": "CaseInsensitiveMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " COLLECTIONS-294"}, {"uris": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest.[void]testNullHandling()", "name": "testNullHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling() {\n        final Map<K, V> map = makeObject();\n        map.put((K) \"One\", (V) \"One\");\n        map.put((K) \"Two\", (V) \"Two\");\n        map.put(null, (V) \"Three\");\n        assertEquals(\"Three\", map.get(null));\n        map.put(null, (V) \"Four\");\n        assertEquals(\"Four\", map.get(null));\n        final Set<K> keys = map.keySet();\n        assertTrue(keys.contains(\"one\"));\n        assertTrue(keys.contains(\"two\"));\n        assertTrue(keys.contains(null));\n        assertEquals(3, keys.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "class_name": "CaseInsensitiveMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest.[void]testPutAll()", "name": "testPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll()", "original_string": "    @Test\n    public void testPutAll() {\n        final Map<Object, String> map = new HashMap<>();\n        map.put(\"One\", \"One\");\n        map.put(\"Two\", \"Two\");\n        map.put(\"one\", \"Three\");\n        map.put(null, \"Four\");\n        map.put(Integer.valueOf(20), \"Five\");\n        final Map<Object, String> caseInsensitiveMap = new CaseInsensitiveMap<>(map);\n        assertEquals(4, caseInsensitiveMap.size()); // ones collapsed\n        final Set<Object> keys = caseInsensitiveMap.keySet();\n        assertTrue(keys.contains(\"one\"));\n        assertTrue(keys.contains(\"two\"));\n        assertTrue(keys.contains(null));\n        assertTrue(keys.contains(Integer.toString(20)));\n        assertEquals(4, keys.size());\n        assertTrue(!caseInsensitiveMap.containsValue(\"One\")\n            || !caseInsensitiveMap.containsValue(\"Three\")); // ones collapsed\n        assertEquals(\"Four\", caseInsensitiveMap.get(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java", "class_name": "CaseInsensitiveMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java.CaseInsensitiveMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest.[void]testEqualsWithEqualMaps()", "name": "testEqualsWithEqualMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithEqualMaps()", "original_string": "    @Test\n    public void testEqualsWithEqualMaps() {\n        CompositeMap<String, String> otherCompositeMap = new CompositeMap<>(map1, map2);\n        assertTrue(compositeMap.equals(otherCompositeMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "class_name": "CompositeMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest.[void]testEqualsWithDifferentMaps()", "name": "testEqualsWithDifferentMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithDifferentMaps()", "original_string": "    @Test\n    public void testEqualsWithDifferentMaps() {\n        Map<String, String> differentMap1 = new HashMap<>();\n        differentMap1.put(\"key1\", \"value1\");\n        differentMap1.put(\"key2\", \"value2\");\n\n        Map<String, String> differentMap2 = new HashMap<>();\n        differentMap2.put(\"key3\", \"value3\");\n        differentMap2.put(\"key4\", \"value4\");\n        differentMap2.put(\"key5\", \"value5\");\n\n        CompositeMap<String, String> otherCompositeMap = new CompositeMap<>(differentMap1, differentMap2);\n        assertFalse(compositeMap.equals(otherCompositeMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "class_name": "CompositeMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest.[void]testEqualsWithNonMapObject()", "name": "testEqualsWithNonMapObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithNonMapObject()", "original_string": "    @Test\n    public void testEqualsWithNonMapObject() {\n        assertFalse(compositeMap.equals(\"Not a map\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "class_name": "CompositeMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest.[void]testEqualsAfterModification()", "name": "testEqualsAfterModification", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsAfterModification()", "original_string": "    @Test\n    public void testEqualsAfterModification() {\n        Map<String, String> modifiedMap1 = new HashMap<>(map1);\n        modifiedMap1.put(\"key5\", \"value5\");\n        CompositeMap<String, String> otherCompositeMap = new CompositeMap<>(modifiedMap1, map2);\n        assertFalse(compositeMap.equals(otherCompositeMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "class_name": "CompositeMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest.[void]testEqualsAfterRemoval()", "name": "testEqualsAfterRemoval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsAfterRemoval()", "original_string": "    @Test\n    public void testEqualsAfterRemoval() {\n        compositeMap.remove(\"key1\");\n        Map<String, String> modifiedMap1 = new HashMap<>(map1);\n        modifiedMap1.remove(\"key1\");\n        CompositeMap<String, String> otherCompositeMap = new CompositeMap<>(modifiedMap1, map2);\n        assertTrue(compositeMap.equals(otherCompositeMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "class_name": "CompositeMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java.CompositeMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java.PassiveExpiringMap_clearTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        // Given\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        PassiveExpiringMap<String, String> expiringMap = new PassiveExpiringMap<>(map);\n\n        // When\n        expiringMap.clear();\n\n        // Then\n        assertEquals(0, expiringMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java", "class_name": "PassiveExpiringMap_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java.PassiveExpiringMap_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java.TransformedSortedMap_transformedSortedMapTest.[void]testTransformedSortedMapWithNonEmptyMap()", "name": "testTransformedSortedMapWithNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedSortedMapWithNonEmptyMap()", "original_string": "    @Test\n    public void testTransformedSortedMapWithNonEmptyMap() {\n        // Given\n        SortedMap<String, Integer> originalMap = new TreeMap<>();\n        originalMap.put(\"one\", 1);\n        originalMap.put(\"two\", 2);\n\n        Transformer<String, String> keyTransformer = input -> input.toUpperCase();\n        Transformer<Integer, Integer> valueTransformer = input -> input * 2;\n\n        // When\n        TransformedSortedMap<String, Integer> transformedMap = TransformedSortedMap.transformedSortedMap(originalMap, keyTransformer, valueTransformer);\n\n        // Then\n        assertEquals(2, transformedMap.size());\n        assertEquals(2, transformedMap.get(\"ONE\"));\n        assertEquals(4, transformedMap.get(\"TWO\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java", "class_name": "TransformedSortedMap_transformedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java.TransformedSortedMap_transformedSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java.TransformedSortedMap_transformedSortedMapTest.[void]testTransformedSortedMapWithEmptyMap()", "name": "testTransformedSortedMapWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedSortedMapWithEmptyMap()", "original_string": "    @Test\n    public void testTransformedSortedMapWithEmptyMap() {\n        // Given\n        SortedMap<String, Integer> originalMap = new TreeMap<>();\n\n        Transformer<String, String> keyTransformer = input -> input.toUpperCase();\n        Transformer<Integer, Integer> valueTransformer = input -> input * 2;\n\n        // When\n        TransformedSortedMap<String, Integer> transformedMap = TransformedSortedMap.transformedSortedMap(originalMap, keyTransformer, valueTransformer);\n\n        // Then\n        assertTrue(transformedMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java", "class_name": "TransformedSortedMap_transformedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java.TransformedSortedMap_transformedSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test.[void]testGetByIndex()", "name": "testGetByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetByIndex()", "original_string": "    @Test\n    public void testGetByIndex() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        try {\n            lom.get(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.get(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lom = getMap();\n        try {\n            lom.get(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.get(lom.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        int i = 0;\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext(); i++) {\n            assertSame(it.next(), lom.get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java", "class_name": "ListOrderedMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test.[void]testGetValueByIndex()", "name": "testGetValueByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueByIndex()", "original_string": "    @Test\n    public void testGetValueByIndex() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        try {\n            lom.getValue(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.getValue(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lom = getMap();\n        try {\n            lom.getValue(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.getValue(lom.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        int i = 0;\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext(); i++) {\n            it.next();\n            assertSame(it.getValue(), lom.getValue(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java", "class_name": "ListOrderedMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf()", "original_string": "    @Test\n    public void testIndexOf() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        assertEquals(-1, lom.indexOf(getOtherKeys()));\n\n        resetFull();\n        lom = getMap();\n        final List<K> list = new ArrayList<>();\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext();) {\n            list.add(it.next());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            assertEquals(i, lom.indexOf(list.get(i)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java", "class_name": "ListOrderedMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test.[void]testRemoveByIndex()", "name": "testRemoveByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveByIndex()", "original_string": "    @Test\n    public void testRemoveByIndex() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        try {\n            lom.remove(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.remove(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lom = getMap();\n        try {\n            lom.remove(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.remove(lom.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        final List<K> list = new ArrayList<>();\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext();) {\n            list.add(it.next());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            final Object key = list.get(i);\n            final Object value = lom.get(key);\n            assertEquals(value, lom.remove(i));\n            list.remove(i);\n            assertFalse(lom.containsKey(key));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java", "class_name": "ListOrderedMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap2Test.java.ListOrderedMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_subMapTest.java.PredicatedSortedMap_subMapTest.[void]testSubMap()", "name": "testSubMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubMap()", "original_string": "    @Test\n    public void testSubMap() {\n        // Given\n        SortedMap<Integer, String> originalMap = new TreeMap<>();\n        originalMap.put(1, \"One\");\n        originalMap.put(2, \"Two\");\n        originalMap.put(3, \"Three\");\n        Predicate<Integer> keyPredicate = key -> key > 0;\n        Predicate<String> valuePredicate = value -> value.length() > 2;\n        PredicatedSortedMap<Integer, String> predicatedMap = PredicatedSortedMap.predicatedSortedMap(originalMap, keyPredicate, valuePredicate);\n\n        // When\n        SortedMap<Integer, String> subMap = predicatedMap.subMap(2, 4);\n\n        // Then\n        assertNotNull(subMap);\n        assertEquals(2, subMap.size());\n        assertEquals(\"Two\", subMap.get(2));\n        assertEquals(\"Three\", subMap.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_subMapTest.java", "class_name": "PredicatedSortedMap_subMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_subMapTest.java.PredicatedSortedMap_subMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java.ListOrderedMap_clearTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testClear()", "original_string": "    @Test\n    void testClear() {\n        // Given\n        ListOrderedMap<String, String> map = new ListOrderedMap<>(new HashMap<>());\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        // When\n        map.clear();\n\n        // Then\n        assertTrue(map.isEmpty());\n        assertEquals(0, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java", "class_name": "ListOrderedMap_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java.ListOrderedMap_clearTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java.TransformedSortedMapTest.[void]testFactory_Decorate()", "name": "testFactory_Decorate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_Decorate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_Decorate() {\n        final SortedMap<K, V> base = new TreeMap<>();\n        base.put((K) \"A\", (V) \"1\");\n        base.put((K) \"B\", (V) \"2\");\n        base.put((K) \"C\", (V) \"3\");\n\n        final SortedMap<K, V> trans = TransformedSortedMap\n                .transformingSortedMap(\n                        base,\n                        null,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(3, trans.size());\n        assertEquals(\"1\", trans.get(\"A\"));\n        assertEquals(\"2\", trans.get(\"B\"));\n        assertEquals(\"3\", trans.get(\"C\"));\n        trans.put((K) \"D\", (V) \"4\");\n        assertEquals(Integer.valueOf(4), trans.get(\"D\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java", "class_name": "TransformedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java.TransformedSortedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java.TransformedSortedMapTest.[void]testFactory_decorateTransform()", "name": "testFactory_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_decorateTransform()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_decorateTransform() {\n        final SortedMap<K, V> base = new TreeMap<>();\n        base.put((K) \"A\", (V) \"1\");\n        base.put((K) \"B\", (V) \"2\");\n        base.put((K) \"C\", (V) \"3\");\n\n        final SortedMap<K, V> trans = TransformedSortedMap\n                .transformedSortedMap(\n                        base,\n                        null,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(3, trans.size());\n        assertEquals(Integer.valueOf(1), trans.get(\"A\"));\n        assertEquals(Integer.valueOf(2), trans.get(\"B\"));\n        assertEquals(Integer.valueOf(3), trans.get(\"C\"));\n        trans.put((K) \"D\", (V) \"4\");\n        assertEquals(Integer.valueOf(4), trans.get(\"D\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java", "class_name": "TransformedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java.TransformedSortedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java.TransformedSortedMapTest.[void]testTransformedMap()", "name": "testTransformedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedMap()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedMap() {\n        final Object[] els = { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n\n        SortedMap<K, V> map = TransformedSortedMap\n                .transformingSortedMap(\n                        new TreeMap<>(),\n                        (Transformer<? super K, ? extends K>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,\n                        null);\n        assertEquals(0, map.size());\n        for (int i = 0; i < els.length; i++) {\n            map.put((K) els[i], (V) els[i]);\n            assertEquals(i + 1, map.size());\n            assertTrue(map.containsKey(Integer.valueOf((String) els[i])));\n            final SortedMap<K, V> finalMap1 = map;\n            final int finalI = i;\n            assertThrows(ClassCastException.class, () -> finalMap1.containsKey(els[finalI]));\n            assertTrue(map.containsValue(els[i]));\n            assertEquals(els[i], map.get(Integer.valueOf((String) els[i])));\n        }\n\n        final SortedMap<K, V> finalMap = map;\n        assertThrows(ClassCastException.class, () -> finalMap.remove(els[0]));\n        assertEquals(els[0], map.remove(Integer.valueOf((String) els[0])));\n\n        map = TransformedSortedMap\n                .transformingSortedMap(\n                        new TreeMap<>(),\n                        null,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, map.size());\n        for (int i = 0; i < els.length; i++) {\n            map.put((K) els[i], (V) els[i]);\n            assertEquals(i + 1, map.size());\n            assertTrue(map.containsValue(Integer.valueOf((String) els[i])));\n            assertFalse(map.containsValue(els[i]));\n            assertTrue(map.containsKey(els[i]));\n            assertEquals(Integer.valueOf((String) els[i]), map.get(els[i]));\n        }\n\n        assertEquals(Integer.valueOf((String) els[0]), map.remove(els[0]));\n\n        final Set<Map.Entry<K, V>> entrySet = map.entrySet();\n        final Map.Entry<K, V>[] array = entrySet.toArray(new Map.Entry[0]);\n        array[0].setValue((V) \"66\");\n        assertEquals(Integer.valueOf(66), array[0].getValue());\n        assertEquals(Integer.valueOf(66), map.get(array[0].getKey()));\n\n        final Map.Entry<K, V> entry = entrySet.iterator().next();\n        entry.setValue((V) \"88\");\n        assertEquals(Integer.valueOf(88), entry.getValue());\n        assertEquals(Integer.valueOf(88), map.get(entry.getKey()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java", "class_name": "TransformedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java.TransformedSortedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        compositeMap.clear();\n        assertTrue(map1.isEmpty());\n        assertTrue(map2.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "class_name": "CompositeMap_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest.[void]testClearWithEmptyCompositeMap()", "name": "testClearWithEmptyCompositeMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearWithEmptyCompositeMap()", "original_string": "    @Test\n    public void testClearWithEmptyCompositeMap() {\n        CompositeMap<String, String> emptyCompositeMap = new CompositeMap<>();\n        emptyCompositeMap.clear();\n        assertTrue(emptyCompositeMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "class_name": "CompositeMap_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest.[void]testClearWithSingleMap()", "name": "testClearWithSingleMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearWithSingleMap()", "original_string": "    @Test\n    public void testClearWithSingleMap() {\n        CompositeMap<String, String> singleMapComposite = new CompositeMap<>(map1);\n        singleMapComposite.clear();\n        assertTrue(map1.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "class_name": "CompositeMap_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest.[void]testClearWithMultipleMaps()", "name": "testClearWithMultipleMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearWithMultipleMaps()", "original_string": "    @Test\n    public void testClearWithMultipleMaps() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"key5\", \"value5\");\n        map3.put(\"key6\", \"value6\");\n\n        compositeMap.addComposited(map3);\n        compositeMap.clear();\n\n        assertTrue(map1.isEmpty());\n        assertTrue(map2.isEmpty());\n        assertTrue(map3.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "class_name": "CompositeMap_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java.CompositeMap_clearTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_valuesTest.java.UnmodifiableMap_valuesTest.[void]testValuesReturnsUnmodifiableCollection()", "name": "testValuesReturnsUnmodifiableCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesReturnsUnmodifiableCollection()", "original_string": "    @Test\n    public void testValuesReturnsUnmodifiableCollection() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        originalMap.put(\"key2\", \"value2\");\n        Map<String, String> unmodifiableMap = UnmodifiableMap.unmodifiableMap(originalMap);\n\n        // When\n        Collection<String> values = unmodifiableMap.values();\n\n        // Then\n        assertTrue(values instanceof UnmodifiableCollection);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_valuesTest.java", "class_name": "UnmodifiableMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_valuesTest.java.UnmodifiableMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_valuesTest.java.PassiveExpiringMap_valuesTest.[void]testValuesWithExpiredEntries()", "name": "testValuesWithExpiredEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesWithExpiredEntries()", "original_string": "    @Test\n    public void testValuesWithExpiredEntries() {\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(1, TimeUnit.MILLISECONDS);\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        // Wait for entries to expire\n        try {\n            Thread.sleep(2);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        Collection<String> values = map.values();\n        assertEquals(0, values.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_valuesTest.java", "class_name": "PassiveExpiringMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_valuesTest.java.PassiveExpiringMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_valuesTest.java.PassiveExpiringMap_valuesTest.[void]testValuesWithoutExpiredEntries()", "name": "testValuesWithoutExpiredEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesWithoutExpiredEntries()", "original_string": "    @Test\n    public void testValuesWithoutExpiredEntries() {\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(1000, TimeUnit.MILLISECONDS);\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        Collection<String> values = map.values();\n        assertEquals(2, values.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_valuesTest.java", "class_name": "PassiveExpiringMap_valuesTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_valuesTest.java.PassiveExpiringMap_valuesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySet() {\n        SortedMap<K, V> map = makeTestMap();\n        assertNotNull(map.entrySet(), \"returned entryset should not be null\");\n        map = decorateMap(new TreeMap<>(), null, null);\n        map.put((K) \"oneKey\", (V) \"oneValue\");\n        assertEquals(1, map.entrySet().size(), \"returned entryset should contain one entry\");\n        map = decorateMap(map, null, null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java", "class_name": "PredicatedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " from TestPredicatedMap"}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest.[void]testPut()", "name": "testPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut() {\n        final Map<K, V> map = makeTestMap();\n        assertThrows(IllegalArgumentException.class, () -> map.put((K) \"Hi\", (V) Integer.valueOf(3)),\n                \"Illegal value should raise IllegalArgument\");\n\n        assertThrows(IllegalArgumentException.class, () -> map.put((K) Integer.valueOf(3), (V) \"Hi\"),\n                \"Illegal key should raise IllegalArgument\");\n\n        assertFalse(map.containsKey(Integer.valueOf(3)));\n        assertFalse(map.containsValue(Integer.valueOf(3)));\n\n        final Map<K, V> map2 = new HashMap<>();\n        map2.put((K) \"A\", (V) \"a\");\n        map2.put((K) \"B\", (V) \"b\");\n        map2.put((K) \"C\", (V) \"c\");\n        map2.put((K) \"c\", (V) Integer.valueOf(3));\n\n        assertThrows(IllegalArgumentException.class, () -> map.putAll(map2),\n                \"Illegal value should raise IllegalArgument\");\n\n        map.put((K) \"E\", (V) \"e\");\n        Iterator<Map.Entry<K, V>> iterator = map.entrySet().iterator();\n        Map.Entry<K, V> entry = iterator.next();\n        final Map.Entry<K, V> finalEntry = entry;\n        assertThrows(IllegalArgumentException.class, () -> finalEntry.setValue((V) Integer.valueOf(3)),\n                \"Illegal value should raise IllegalArgument\");\n\n        map.put((K) \"F\", (V) \"f\");\n        iterator = map.entrySet().iterator();\n        entry = iterator.next();\n        entry.setValue((V) \"x\");\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java", "class_name": "PredicatedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest.[void]testReverseSortOrder()", "name": "testReverseSortOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReverseSortOrder()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReverseSortOrder() {\n        final SortedMap<K, V> map = makeTestMapWithComparator();\n        map.put((K) \"A\",  (V) \"a\");\n        map.put((K) \"B\", (V) \"b\");\n        assertThrows(IllegalArgumentException.class, () -> map.put(null, (V) \"c\"),\n                \"Null key should raise IllegalArgument\");\n        map.put((K) \"C\", (V) \"c\");\n        assertThrows(IllegalArgumentException.class, () -> map.put((K) \"D\", null),\n                \"Null value should raise IllegalArgument\");\n        assertEquals(\"A\", map.lastKey(), \"Last key should be A\");\n        assertEquals(\"C\", map.firstKey(), \"First key should be C\");\n        assertEquals(\"B\", map.tailMap((K) \"B\").firstKey(),\n                \"First key in tail map should be B\");\n        assertEquals(\"B\", map.headMap((K) \"A\").lastKey(),\n                \"Last key in head map should be B\");\n        assertEquals(\"B\", map.subMap((K) \"C\", (K) \"A\").lastKey(),\n                \"Last key in submap should be B\");\n\n        final Comparator<? super K> c = map.comparator();\n        assertSame(c, reverseStringComparator, \"reverse order, so comparator should be reverseStringComparator\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java", "class_name": "PredicatedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest.[void]testSortOrder()", "name": "testSortOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSortOrder()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSortOrder() {\n        final SortedMap<K, V> map = makeTestMap();\n        map.put((K) \"A\", (V) \"a\");\n        map.put((K) \"B\", (V) \"b\");\n        assertThrows(IllegalArgumentException.class, () -> map.put(null, (V) \"c\"),\n                \"Null key should raise IllegalArgument\");\n        map.put((K) \"C\", (V) \"c\");\n        assertThrows(IllegalArgumentException.class, () -> map.put((K) \"D\", null),\n                \"Null value should raise IllegalArgument\");\n        assertEquals(\"A\", map.firstKey(), \"First key should be A\");\n        assertEquals(\"C\", map.lastKey(), \"Last key should be C\");\n        assertEquals(\"B\", map.tailMap((K) \"B\").firstKey(),\n                \"First key in tail map should be B\");\n        assertEquals(\"B\", map.headMap((K) \"C\").lastKey(),\n                \"Last key in head map should be B\");\n        assertEquals(\"B\", map.subMap((K) \"A\", (K) \"C\").lastKey(),\n                \"Last key in submap should be B\");\n\n        final Comparator<? super K> c = map.comparator();\n        assertNull(c, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java", "class_name": "PredicatedSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java.PredicatedSortedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest.[void]testGetExistingKeyWithUpdateToMRU()", "name": "testGetExistingKeyWithUpdateToMRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetExistingKeyWithUpdateToMRU()", "original_string": "    @Test\n    public void testGetExistingKeyWithUpdateToMRU() {\n        lruMap.put(\"key1\", \"value1\");\n        lruMap.put(\"key2\", \"value2\");\n\n        assertEquals(\"value1\", lruMap.get(\"key1\", true));\n        assertEquals(\"value2\", lruMap.get(\"key2\", true));\n\n        // Ensure \"key1\" is now the most recently used\n        lruMap.put(\"key3\", \"value3\");\n        assertNull(lruMap.get(\"key1\"));\n        assertEquals(\"value2\", lruMap.get(\"key2\"));\n        assertEquals(\"value3\", lruMap.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "class_name": "LRUMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest.[void]testGetExistingKeyWithoutUpdateToMRU()", "name": "testGetExistingKeyWithoutUpdateToMRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetExistingKeyWithoutUpdateToMRU()", "original_string": "    @Test\n    public void testGetExistingKeyWithoutUpdateToMRU() {\n        lruMap.put(\"key1\", \"value1\");\n        lruMap.put(\"key2\", \"value2\");\n\n        assertEquals(\"value1\", lruMap.get(\"key1\", false));\n        assertEquals(\"value2\", lruMap.get(\"key2\", false));\n\n        // Ensure the order remains the same\n        lruMap.put(\"key3\", \"value3\");\n        assertNull(lruMap.get(\"key1\"));\n        assertEquals(\"value2\", lruMap.get(\"key2\"));\n        assertEquals(\"value3\", lruMap.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "class_name": "LRUMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest.[void]testGetNonExistingKey()", "name": "testGetNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNonExistingKey()", "original_string": "    @Test\n    public void testGetNonExistingKey() {\n        lruMap.put(\"key1\", \"value1\");\n        lruMap.put(\"key2\", \"value2\");\n\n        assertNull(lruMap.get(\"key3\", true));\n        assertNull(lruMap.get(\"key3\", false));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "class_name": "LRUMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest.[void]testGetWithEmptyMap()", "name": "testGetWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithEmptyMap()", "original_string": "    @Test\n    public void testGetWithEmptyMap() {\n        assertNull(lruMap.get(\"key1\", true));\n        assertNull(lruMap.get(\"key1\", false));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "class_name": "LRUMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest.[void]testGetWithFullMapAndUpdateToMRU()", "name": "testGetWithFullMapAndUpdateToMRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithFullMapAndUpdateToMRU()", "original_string": "    @Test\n    public void testGetWithFullMapAndUpdateToMRU() {\n        lruMap.put(\"key1\", \"value1\");\n        lruMap.put(\"key2\", \"value2\");\n\n        assertEquals(\"value1\", lruMap.get(\"key1\", true));\n        assertEquals(\"value2\", lruMap.get(\"key2\", true));\n\n        // Ensure \"key1\" is now the most recently used\n        lruMap.put(\"key3\", \"value3\");\n        assertNull(lruMap.get(\"key1\"));\n        assertEquals(\"value2\", lruMap.get(\"key2\"));\n        assertEquals(\"value3\", lruMap.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "class_name": "LRUMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest.[void]testGetWithFullMapWithoutUpdateToMRU()", "name": "testGetWithFullMapWithoutUpdateToMRU", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithFullMapWithoutUpdateToMRU()", "original_string": "    @Test\n    public void testGetWithFullMapWithoutUpdateToMRU() {\n        lruMap.put(\"key1\", \"value1\");\n        lruMap.put(\"key2\", \"value2\");\n\n        assertEquals(\"value1\", lruMap.get(\"key1\", false));\n        assertEquals(\"value2\", lruMap.get(\"key2\", false));\n\n        // Ensure the order remains the same\n        lruMap.put(\"key3\", \"value3\");\n        assertNull(lruMap.get(\"key1\"));\n        assertEquals(\"value2\", lruMap.get(\"key2\"));\n        assertEquals(\"value3\", lruMap.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "class_name": "LRUMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java.LRUMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest.[void]testPutNewKey()", "name": "testPutNewKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutNewKey()", "original_string": "    @Test\n    public void testPutNewKey() {\n        String key = \"key1\";\n        String value = \"value1\";\n        assertNull(map.put(key, value));\n        assertTrue(map.containsKey(key));\n        assertEquals(value, map.get(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "class_name": "StaticBucketMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest.[void]testPutExistingKey()", "name": "testPutExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutExistingKey()", "original_string": "    @Test\n    public void testPutExistingKey() {\n        String key = \"key1\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n        assertNull(map.put(key, value1));\n        assertEquals(value1, map.put(key, value2));\n        assertEquals(value2, map.get(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "class_name": "StaticBucketMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest.[void]testPutNullKey()", "name": "testPutNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutNullKey()", "original_string": "    @Test\n    public void testPutNullKey() {\n        String value = \"value1\";\n        assertNull(map.put(null, value));\n        assertTrue(map.containsKey(null));\n        assertEquals(value, map.get(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "class_name": "StaticBucketMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest.[void]testPutNullValue()", "name": "testPutNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutNullValue()", "original_string": "    @Test\n    public void testPutNullValue() {\n        String key = \"key1\";\n        assertNull(map.put(key, null));\n        assertTrue(map.containsKey(key));\n        assertNull(map.get(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "class_name": "StaticBucketMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest.[void]testPutRemoveKey()", "name": "testPutRemoveKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutRemoveKey()", "original_string": "    @Test\n    public void testPutRemoveKey() {\n        String key = \"key1\";\n        String value = \"value1\";\n        assertNull(map.put(key, value));\n        assertEquals(value, map.remove(key));\n        assertFalse(map.containsKey(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "class_name": "StaticBucketMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java.StaticBucketMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java.StaticBucketMap_containsValueTest.[void]testContainsValue_ValuePresent()", "name": "testContainsValue_ValuePresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsValue_ValuePresent()", "original_string": "    @Test\n    void testContainsValue_ValuePresent() {\n        // Given\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        // When\n        boolean result = map.containsValue(\"value1\");\n\n        // Then\n        assertTrue(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "class_name": "StaticBucketMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java.StaticBucketMap_containsValueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java.StaticBucketMap_containsValueTest.[void]testContainsValue_ValueNotPresent()", "name": "testContainsValue_ValueNotPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsValue_ValueNotPresent()", "original_string": "    @Test\n    void testContainsValue_ValueNotPresent() {\n        // Given\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        // When\n        boolean result = map.containsValue(\"value3\");\n\n        // Then\n        assertFalse(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "class_name": "StaticBucketMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java.StaticBucketMap_containsValueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java.StaticBucketMap_containsValueTest.[void]testContainsValue_EmptyMap()", "name": "testContainsValue_EmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testContainsValue_EmptyMap()", "original_string": "    @Test\n    void testContainsValue_EmptyMap() {\n        // Given\n        // Map is empty\n\n        // When\n        boolean result = map.containsValue(\"value1\");\n\n        // Then\n        assertFalse(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "class_name": "StaticBucketMap_containsValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java.StaticBucketMap_containsValueTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java.TransformedMap_transformedMapTest.[void]testTransformedMapWithNonEmptyMap()", "name": "testTransformedMapWithNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedMapWithNonEmptyMap()", "original_string": "    @Test\n    public void testTransformedMapWithNonEmptyMap() {\n        // Given\n        Map<String, Integer> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", 1);\n        originalMap.put(\"key2\", 2);\n\n        Transformer<String, String> keyTransformer = input -> \"transformed_\" + input;\n        Transformer<Integer, Integer> valueTransformer = input -> input * 2;\n\n        // When\n        TransformedMap<String, Integer> transformedMap = TransformedMap.transformedMap(originalMap, keyTransformer, valueTransformer);\n\n        // Then\n        assertEquals(2, transformedMap.size());\n        assertTrue(transformedMap.containsKey(\"transformed_key1\"));\n        assertTrue(transformedMap.containsKey(\"transformed_key2\"));\n        assertEquals(2, transformedMap.get(\"transformed_key1\"));\n        assertEquals(4, transformedMap.get(\"transformed_key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java", "class_name": "TransformedMap_transformedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java.TransformedMap_transformedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java.TransformedMap_transformedMapTest.[void]testTransformedMapWithEmptyMap()", "name": "testTransformedMapWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedMapWithEmptyMap()", "original_string": "    @Test\n    public void testTransformedMapWithEmptyMap() {\n        // Given\n        Map<String, Integer> originalMap = new HashMap<>();\n\n        Transformer<String, String> keyTransformer = input -> \"transformed_\" + input;\n        Transformer<Integer, Integer> valueTransformer = input -> input * 2;\n\n        // When\n        TransformedMap<String, Integer> transformedMap = TransformedMap.transformedMap(originalMap, keyTransformer, valueTransformer);\n\n        // Then\n        assertTrue(transformedMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java", "class_name": "TransformedMap_transformedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java.TransformedMap_transformedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetExistingKey()", "name": "testGetExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetExistingKey()", "original_string": "    @Test\n    public void testGetExistingKey() {\n        map.put(\"key1\", \"value1\");\n        assertEquals(\"value1\", map.get(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetNonExistingKey()", "name": "testGetNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNonExistingKey()", "original_string": "    @Test\n    public void testGetNonExistingKey() {\n        assertNull(map.get(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetNullKey()", "name": "testGetNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNullKey()", "original_string": "    @Test\n    public void testGetNullKey() {\n        map.put(null, \"nullValue\");\n        assertEquals(\"nullValue\", map.get(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetAfterRemove()", "name": "testGetAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterRemove()", "original_string": "    @Test\n    public void testGetAfterRemove() {\n        map.put(\"key3\", \"value3\");\n        map.remove(\"key3\");\n        assertNull(map.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetWithMultipleEntries()", "name": "testGetWithMultipleEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithMultipleEntries()", "original_string": "    @Test\n    public void testGetWithMultipleEntries() {\n        map.put(\"key4\", \"value4\");\n        map.put(\"key5\", \"value5\");\n        assertEquals(\"value4\", map.get(\"key4\"));\n        assertEquals(\"value5\", map.get(\"key5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetWithSameHashDifferentKey()", "name": "testGetWithSameHashDifferentKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithSameHashDifferentKey()", "original_string": "    @Test\n    public void testGetWithSameHashDifferentKey() {\n        // Assuming \"A\" and \"B\" hash to the same bucket\n        map.put(\"A\", \"valueA\");\n        map.put(\"B\", \"valueB\");\n        assertEquals(\"valueA\", map.get(\"A\"));\n        assertEquals(\"valueB\", map.get(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetWithCollision()", "name": "testGetWithCollision", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithCollision()", "original_string": "    @Test\n    public void testGetWithCollision() {\n        // Assuming \"C\" and \"D\" hash to the same bucket\n        map.put(\"C\", \"valueC\");\n        map.put(\"D\", \"valueD\");\n        assertEquals(\"valueC\", map.get(\"C\"));\n        assertEquals(\"valueD\", map.get(\"D\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetWithNullValue()", "name": "testGetWithNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithNullValue()", "original_string": "    @Test\n    public void testGetWithNullValue() {\n        map.put(\"key6\", null);\n        assertNull(map.get(\"key6\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetWithNullKeyAndNullValue()", "name": "testGetWithNullKeyAndNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithNullKeyAndNullValue()", "original_string": "    @Test\n    public void testGetWithNullKeyAndNullValue() {\n        map.put(null, null);\n        assertNull(map.get(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetWithEmptyMap()", "name": "testGetWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithEmptyMap()", "original_string": "    @Test\n    public void testGetWithEmptyMap() {\n        assertNull(map.get(\"nonExistentKey\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest.[void]testGetWithConcurrentModification()", "name": "testGetWithConcurrentModification", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithConcurrentModification()", "original_string": "    @Test\n    public void testGetWithConcurrentModification() {\n        map.put(\"key7\", \"value7\");\n        map.put(\"key8\", \"value8\");\n        map.remove(\"key7\");\n        assertNull(map.get(\"key7\"));\n        assertEquals(\"value8\", map.get(\"key8\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "class_name": "StaticBucketMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java.StaticBucketMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testClone2()", "name": "testClone2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone2() {\n        final Flat3Map<K, V> map = makeObject();\n        assertEquals(0, map.size());\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(ONE));\n        assertTrue(map.containsKey(TWO));\n        assertSame(TEN, map.get(ONE));\n        assertSame(TWENTY, map.get(TWO));\n\n        // clone works (size = 2)\n        final Flat3Map<K, V> cloned = map.clone();\n        assertEquals(2, cloned.size());\n        assertTrue(cloned.containsKey(ONE));\n        assertTrue(cloned.containsKey(TWO));\n        assertSame(TEN, cloned.get(ONE));\n        assertSame(TWENTY, cloned.get(TWO));\n\n        // change original doesn't change clone\n        map.put((K) TEN, (V) ONE);\n        map.put((K) TWENTY, (V) TWO);\n        assertEquals(4, map.size());\n        assertEquals(2, cloned.size());\n        assertTrue(cloned.containsKey(ONE));\n        assertTrue(cloned.containsKey(TWO));\n        assertSame(TEN, cloned.get(ONE));\n        assertSame(TWENTY, cloned.get(TWO));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testClone4()", "name": "testClone4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone4()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClone4() {\n        final Flat3Map<K, V> map = makeObject();\n        assertEquals(0, map.size());\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) TEN, (V) ONE);\n        map.put((K) TWENTY, (V) TWO);\n\n        // clone works (size = 4)\n        final Flat3Map<K, V> cloned = map.clone();\n        assertEquals(4, map.size());\n        assertEquals(4, cloned.size());\n        assertTrue(cloned.containsKey(ONE));\n        assertTrue(cloned.containsKey(TWO));\n        assertTrue(cloned.containsKey(TEN));\n        assertTrue(cloned.containsKey(TWENTY));\n        assertSame(TEN, cloned.get(ONE));\n        assertSame(TWENTY, cloned.get(TWO));\n        assertSame(ONE, cloned.get(TEN));\n        assertSame(TWO, cloned.get(TWENTY));\n\n        // change original doesn't change clone\n        map.clear();\n        assertEquals(0, map.size());\n        assertEquals(4, cloned.size());\n        assertTrue(cloned.containsKey(ONE));\n        assertTrue(cloned.containsKey(TWO));\n        assertTrue(cloned.containsKey(TEN));\n        assertTrue(cloned.containsKey(TWENTY));\n        assertSame(TEN, cloned.get(ONE));\n        assertSame(TWENTY, cloned.get(TWO));\n        assertSame(ONE, cloned.get(TEN));\n        assertSame(TWO, cloned.get(TWENTY));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testCollections261()", "name": "testCollections261", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollections261()", "original_string": "    @Test\n    public void testCollections261() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        m.put( Integer.valueOf(1), Integer.valueOf(1) );\n        m.put( Integer.valueOf(0), Integer.valueOf(0) );\n        assertEquals( Integer.valueOf(1), m.remove( Integer.valueOf(1) ) );\n        assertEquals( Integer.valueOf(0), m.remove( Integer.valueOf(0) ) );\n\n        m.put( Integer.valueOf(2), Integer.valueOf(2) );\n        m.put( Integer.valueOf(1), Integer.valueOf(1) );\n        m.put( Integer.valueOf(0), Integer.valueOf(0) );\n        assertEquals( Integer.valueOf(2), m.remove( Integer.valueOf(2) ) );\n        assertEquals( Integer.valueOf(1), m.remove( Integer.valueOf(1) ) );\n        assertEquals( Integer.valueOf(0), m.remove( Integer.valueOf(0) ) );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testContainsKey1()", "name": "testContainsKey1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey1()", "original_string": "    @Test\n    public void testContainsKey1() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(null, THREE);\n        final boolean contains = m.containsKey(null);\n        assertTrue(contains);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testContainsKey2()", "name": "testContainsKey2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey2()", "original_string": "    @Test\n    public void testContainsKey2() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(null, TWO);\n        final boolean contains = m.containsKey(null);\n        assertTrue(contains);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testContainsKey3()", "name": "testContainsKey3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey3()", "original_string": "    @Test\n    public void testContainsKey3() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(null, ONE);\n        final boolean contains = m.containsKey(null);\n        assertTrue(contains);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testContainsValue1()", "name": "testContainsValue1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue1()", "original_string": "    @Test\n    public void testContainsValue1() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, null);\n        final boolean contains = m.containsValue(null);\n        assertTrue(contains);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testContainsValue2()", "name": "testContainsValue2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue2()", "original_string": "    @Test\n    public void testContainsValue2() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(TWO, null);\n        final boolean contains = m.containsValue(null);\n        assertTrue(contains);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testContainsValue3()", "name": "testContainsValue3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue3()", "original_string": "    @Test\n    public void testContainsValue3() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, null);\n        final boolean contains = m.containsValue(null);\n        assertTrue(contains);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testEntryIteratorSetValue1()", "name": "testEntryIteratorSetValue1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntryIteratorSetValue1()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntryIteratorSetValue1() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) THREE, (V) THIRTY);\n\n        final Iterator<Map.Entry<K, V>> it = map.entrySet().iterator();\n        final Map.Entry<K, V> entry = it.next();\n        entry.setValue((V) \"NewValue\");\n        assertEquals(3, map.size());\n        assertTrue(map.containsKey(ONE));\n        assertTrue(map.containsKey(TWO));\n        assertTrue(map.containsKey(THREE));\n        assertEquals(\"NewValue\", map.get(ONE));\n        assertEquals(TWENTY, map.get(TWO));\n        assertEquals(THIRTY, map.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testEntryIteratorSetValue2()", "name": "testEntryIteratorSetValue2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntryIteratorSetValue2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntryIteratorSetValue2() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) THREE, (V) THIRTY);\n\n        final Iterator<Map.Entry<K, V>> it = map.entrySet().iterator();\n        it.next();\n        final Map.Entry<K, V> entry = it.next();\n        entry.setValue((V) \"NewValue\");\n        assertEquals(3, map.size());\n        assertTrue(map.containsKey(ONE));\n        assertTrue(map.containsKey(TWO));\n        assertTrue(map.containsKey(THREE));\n        assertEquals(TEN, map.get(ONE));\n        assertEquals(\"NewValue\", map.get(TWO));\n        assertEquals(THIRTY, map.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testEntryIteratorSetValue3()", "name": "testEntryIteratorSetValue3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntryIteratorSetValue3()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntryIteratorSetValue3() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) THREE, (V) THIRTY);\n\n        final Iterator<Map.Entry<K, V>> it = map.entrySet().iterator();\n        it.next();\n        it.next();\n        final Map.Entry<K, V> entry = it.next();\n        entry.setValue((V) \"NewValue\");\n        assertEquals(3, map.size());\n        assertTrue(map.containsKey(ONE));\n        assertTrue(map.containsKey(TWO));\n        assertTrue(map.containsKey(THREE));\n        assertEquals(TEN, map.get(ONE));\n        assertEquals(TWENTY, map.get(TWO));\n        assertEquals(\"NewValue\", map.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        // Sanity check\n        putAndRemove(new LinkedHashMap<>());\n        // Actual test\n        putAndRemove(new Flat3Map<>());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testEquals1()", "name": "testEquals1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEquals1()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEquals1() {\n        final Flat3Map<K, V> map1 = makeObject();\n        map1.put((K) \"a\", (V) \"testA\");\n        map1.put((K) \"b\", (V) \"testB\");\n        final Flat3Map<K, V> map2 = makeObject();\n        map2.put((K) \"a\", (V) \"testB\");\n        map2.put((K) \"b\", (V) \"testA\");\n        assertFalse(map1.equals(map2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testEquals2()", "name": "testEquals2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEquals2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEquals2() {\n        final Flat3Map<K, V> map1 = makeObject();\n        map1.put((K) \"a\", (V) \"testA\");\n        map1.put((K) \"b\", (V) \"testB\");\n        final Flat3Map<K, V> map2 = makeObject();\n        map2.put((K) \"a\", (V) \"testB\");\n        map2.put((K) \"c\", (V) \"testA\");\n        assertFalse(map1.equals(map2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testGet1()", "name": "testGet1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet1()", "original_string": "    @Test\n    public void testGet1() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(null, ONE);\n        obj = m.get(null);\n        assertSame(ONE, obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testGet2()", "name": "testGet2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet2()", "original_string": "    @Test\n    public void testGet2() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(ONE, ONE);\n        m.put(null, TWO);\n        obj = m.get(null);\n        assertSame(TWO, obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testGet3()", "name": "testGet3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet3()", "original_string": "    @Test\n    public void testGet3() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(null, THREE);\n        obj = m.get(null);\n        assertSame(THREE, obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testMapIteratorSetValue1()", "name": "testMapIteratorSetValue1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorSetValue1()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorSetValue1() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) THREE, (V) THIRTY);\n\n        final MapIterator<K, V> it = map.mapIterator();\n        it.next();\n        it.setValue((V) \"NewValue\");\n        assertEquals(3, map.size());\n        assertTrue(map.containsKey(ONE));\n        assertTrue(map.containsKey(TWO));\n        assertTrue(map.containsKey(THREE));\n        assertEquals(\"NewValue\", map.get(ONE));\n        assertEquals(TWENTY, map.get(TWO));\n        assertEquals(THIRTY, map.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testMapIteratorSetValue2()", "name": "testMapIteratorSetValue2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorSetValue2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorSetValue2() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) THREE, (V) THIRTY);\n\n        final MapIterator<K, V> it = map.mapIterator();\n        it.next();\n        it.next();\n        it.setValue((V) \"NewValue\");\n        assertEquals(3, map.size());\n        assertTrue(map.containsKey(ONE));\n        assertTrue(map.containsKey(TWO));\n        assertTrue(map.containsKey(THREE));\n        assertEquals(TEN, map.get(ONE));\n        assertEquals(\"NewValue\", map.get(TWO));\n        assertEquals(THIRTY, map.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testMapIteratorSetValue3()", "name": "testMapIteratorSetValue3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorSetValue3()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorSetValue3() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) THREE, (V) THIRTY);\n\n        final MapIterator<K, V> it = map.mapIterator();\n        it.next();\n        it.next();\n        it.next();\n        it.setValue((V) \"NewValue\");\n        assertEquals(3, map.size());\n        assertTrue(map.containsKey(ONE));\n        assertTrue(map.containsKey(TWO));\n        assertTrue(map.containsKey(THREE));\n        assertEquals(TEN, map.get(ONE));\n        assertEquals(TWENTY, map.get(TWO));\n        assertEquals(\"NewValue\", map.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testNewInstance1()", "name": "testNewInstance1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewInstance1()", "original_string": "    @Test\n    public void testNewInstance1() {\n        final Map<Integer, Integer> orig = new HashMap<>();\n        orig.put(ONE, ONE);\n        orig.put(TWO, TWO);\n\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>(orig);\n\n        assertEquals(orig, m);\n        assertEquals(2, m.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testPut1()", "name": "testPut1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut1()", "original_string": "    @Test\n    public void testPut1() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(null, THREE);\n        final Object old = m.put(null, ONE);\n        assertEquals(THREE, old);\n        assertEquals(ONE, m.get(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testPut2()", "name": "testPut2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut2()", "original_string": "    @Test\n    public void testPut2() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(null, THREE);\n        final Object old = m.put(null, ONE);\n        assertEquals(THREE, old);\n        assertEquals(ONE, m.get(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testPut3()", "name": "testPut3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut3()", "original_string": "    @Test\n    public void testPut3() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(null, THREE);\n        final Object old = m.put(null, ONE);\n        assertEquals(THREE, old);\n        assertNull(m.get(ONE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testPut4()", "name": "testPut4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut4()", "original_string": "    @Test\n    public void testPut4() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, THREE);\n        final Object old = m.put(THREE, ONE);\n        assertEquals(THREE, old);\n        assertEquals(ONE, m.get(THREE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testPut5()", "name": "testPut5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut5()", "original_string": "    @Test\n    public void testPut5() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, ONE);\n        m.put(TWO, THREE);\n        final Object old = m.put(TWO, ONE);\n        assertEquals(THREE, old);\n        assertEquals(ONE, m.get(TWO));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testPut6()", "name": "testPut6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut6()", "original_string": "    @Test\n    public void testPut6() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        m.put(ONE, THREE);\n        final Object old = m.put(ONE, ONE);\n        assertEquals(THREE, old);\n        assertEquals(ONE, m.get(ONE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove1()", "name": "testRemove1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove1()", "original_string": "    @Test\n    public void testRemove1() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n\n        // object is not existing\n        Object obj = m.remove(44);\n        assertNull(obj);\n\n        m.put(ONE, ONE);\n        obj = m.remove(ONE);\n        assertSame(ONE, obj);\n        assertEquals(0, m.size());\n\n        // after removal, be no longer there\n        obj = m.get(ONE);\n        assertNull(obj);\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, THREE);\n\n        obj = m.remove(ONE);\n        assertSame(ONE, obj);\n\n        obj = m.get(ONE);\n        assertNull(obj);\n        obj = m.get(TWO);\n        assertSame(TWO, obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove10()", "name": "testRemove10", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove10()", "original_string": "    @Test\n    public void testRemove10() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n\n        obj = m.remove(null);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove11()", "name": "testRemove11", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove11()", "original_string": "    @Test\n    public void testRemove11() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, THREE);\n\n        obj = m.remove(null);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove12()", "name": "testRemove12", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove12()", "original_string": "    @Test\n    public void testRemove12() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, THREE);\n\n        obj = m.remove(42);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove13()", "name": "testRemove13", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove13()", "original_string": "    @Test\n    public void testRemove13() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n\n        obj = m.remove(42);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove2()", "name": "testRemove2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove2()", "original_string": "    @Test\n    public void testRemove2() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, THREE);\n\n        obj = m.remove(ONE);\n        assertSame(ONE, obj);\n\n        obj = m.get(ONE);\n        assertNull(obj);\n        obj = m.get(TWO);\n        assertSame(TWO, obj);\n        obj = m.get(THREE);\n        assertSame(THREE, obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove3()", "name": "testRemove3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove3()", "original_string": "    @Test\n    public void testRemove3() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, THREE);\n\n        obj = m.remove(TWO);\n        assertSame(TWO, obj);\n\n        obj = m.get(ONE);\n        assertSame(ONE, obj);\n        obj = m.get(TWO);\n        assertNull(obj);\n        obj = m.get(THREE);\n        assertSame(THREE, obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove4()", "name": "testRemove4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove4()", "original_string": "    @Test\n    public void testRemove4() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(THREE, THREE);\n\n        obj = m.remove(THREE);\n        assertSame(THREE, obj);\n\n        obj = m.get(ONE);\n        assertSame(ONE, obj);\n        obj = m.get(TWO);\n        assertSame(TWO, obj);\n        obj = m.get(THREE);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove5()", "name": "testRemove5", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove5()", "original_string": "    @Test\n    public void testRemove5() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        Object obj;\n\n        m.put(null, ONE);\n\n        obj = m.remove(null);\n        assertSame(ONE, obj);\n\n        obj = m.get(null);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove6()", "name": "testRemove6", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove6()", "original_string": "    @Test\n    public void testRemove6() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        Object obj;\n\n        m.put(ONE, ONE);\n        m.put(null, TWO);\n\n        obj = m.remove(null);\n        assertSame(TWO, obj);\n\n        obj = m.get(ONE);\n        assertSame(ONE, obj);\n        obj = m.get(null);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove7()", "name": "testRemove7", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove7()", "original_string": "    @Test\n    public void testRemove7() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        Object obj;\n\n        m.put(null, ONE);\n        m.put(TWO, TWO);\n\n        obj = m.remove(null);\n        assertSame(ONE, obj);\n\n        obj = m.get(null);\n        assertNull(obj);\n        obj = m.get(TWO);\n        assertSame(TWO, obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove8()", "name": "testRemove8", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove8()", "original_string": "    @Test\n    public void testRemove8() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        Object obj;\n\n        m.put(ONE, ONE);\n        m.put(TWO, TWO);\n        m.put(null, THREE);\n\n        obj = m.remove(null);\n        assertSame(THREE, obj);\n\n        obj = m.get(ONE);\n        assertSame(ONE, obj);\n        obj = m.get(TWO);\n        assertSame(TWO, obj);\n        obj = m.get(null);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testRemove9()", "name": "testRemove9", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove9()", "original_string": "    @Test\n    public void testRemove9() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final Object obj;\n\n        m.put(ONE, ONE);\n\n        obj = m.remove(null);\n        assertNull(obj);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testSerialisation0()", "name": "testSerialisation0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerialisation0()", "original_string": "    @Test\n    public void testSerialisation0() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        final ObjectOutputStream out = new ObjectOutputStream(bout);\n        out.writeObject(map);\n        final byte[] bytes = bout.toByteArray();\n        out.close();\n        final ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n        final ObjectInputStream in = new ObjectInputStream(bin);\n        final Flat3Map<?, ?> ser = (Flat3Map<?, ?>) in.readObject();\n        in.close();\n        assertEquals(0, map.size());\n        assertEquals(0, ser.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testSerialisation2()", "name": "testSerialisation2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerialisation2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerialisation2() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n\n        final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        final ObjectOutputStream out = new ObjectOutputStream(bout);\n        out.writeObject(map);\n        final byte[] bytes = bout.toByteArray();\n        out.close();\n        final ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n        final ObjectInputStream in = new ObjectInputStream(bin);\n        final Flat3Map<?, ?> ser = (Flat3Map<?, ?>) in.readObject();\n        in.close();\n        assertEquals(2, map.size());\n        assertEquals(2, ser.size());\n        assertTrue(ser.containsKey(ONE));\n        assertTrue(ser.containsKey(TWO));\n        assertEquals(TEN, ser.get(ONE));\n        assertEquals(TWENTY, ser.get(TWO));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testSerialisation4()", "name": "testSerialisation4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerialisation4()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerialisation4() throws Exception {\n        final Flat3Map<K, V> map = makeObject();\n        map.put((K) ONE, (V) TEN);\n        map.put((K) TWO, (V) TWENTY);\n        map.put((K) TEN, (V) ONE);\n        map.put((K) TWENTY, (V) TWO);\n\n        final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        final ObjectOutputStream out = new ObjectOutputStream(bout);\n        out.writeObject(map);\n        final byte[] bytes = bout.toByteArray();\n        out.close();\n        final ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n        final ObjectInputStream in = new ObjectInputStream(bin);\n        final Flat3Map<?, ?> ser = (Flat3Map<?, ?>) in.readObject();\n        in.close();\n        assertEquals(4, map.size());\n        assertEquals(4, ser.size());\n        assertTrue(ser.containsKey(ONE));\n        assertTrue(ser.containsKey(TWO));\n        assertTrue(ser.containsKey(TEN));\n        assertTrue(ser.containsKey(TWENTY));\n        assertEquals(TEN, ser.get(ONE));\n        assertEquals(TWENTY, ser.get(TWO));\n        assertEquals(ONE, ser.get(TEN));\n        assertEquals(TWO, ser.get(TWENTY));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        final Flat3Map<Integer, Integer> m = new Flat3Map<>();\n        final String string0 = m.toString();\n        assertNotNull(string0);\n        m.put( Integer.valueOf(1), Integer.valueOf(1) );\n        final String string1 = m.toString();\n        assertNotNull(string1);\n        assertNotSame(string0, string1);\n        m.put( Integer.valueOf(0), Integer.valueOf(0) );\n        final String string2 = m.toString();\n        assertNotNull(string2);\n        assertNotSame(string0, string2);\n        assertNotSame(string1, string2);\n        m.put( Integer.valueOf(2), Integer.valueOf(2) );\n        final String string3 = m.toString();\n        assertNotNull(string3);\n        assertNotSame(string0, string3);\n        assertNotSame(string1, string3);\n        assertNotSame(string2, string3);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java", "class_name": "Flat3MapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java.Flat3MapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_entrySetTest.java.UnmodifiableOrderedMap_entrySetTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        // Given\n        Map<String, String> originalMap = new HashMap<>();\n        originalMap.put(\"key1\", \"value1\");\n        originalMap.put(\"key2\", \"value2\");\n        OrderedMap<String, String> orderedMap = UnmodifiableOrderedMap.unmodifiableOrderedMap(new LinkedMap<>(originalMap));\n\n        // When\n        Set<Map.Entry<String, String>> entrySet = orderedMap.entrySet();\n\n        // Then\n        assertEquals(2, entrySet.size());\n        assertTrue(entrySet.containsAll(originalMap.entrySet()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_entrySetTest.java", "class_name": "UnmodifiableOrderedMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_entrySetTest.java.UnmodifiableOrderedMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest.[void]testHashCodeWithEmptyMap()", "name": "testHashCodeWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithEmptyMap()", "original_string": "    @Test\n    public void testHashCodeWithEmptyMap() {\n        CompositeMap<String, String> emptyMap = new CompositeMap<>();\n        assertEquals(0, emptyMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "class_name": "CompositeMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest.[void]testHashCodeWithNonEmptyMap()", "name": "testHashCodeWithNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNonEmptyMap()", "original_string": "    @Test\n    public void testHashCodeWithNonEmptyMap() {\n        int expectedHashCode = map1.hashCode() + map2.hashCode();\n        assertEquals(expectedHashCode, compositeMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "class_name": "CompositeMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest.[void]testHashCodeAfterAddingMap()", "name": "testHashCodeAfterAddingMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeAfterAddingMap()", "original_string": "    @Test\n    public void testHashCodeAfterAddingMap() {\n        Map<String, String> map3 = new HashMap<>();\n        map3.put(\"key5\", \"value5\");\n        compositeMap.addComposited(map3);\n\n        int expectedHashCode = map1.hashCode() + map2.hashCode() + map3.hashCode();\n        assertEquals(expectedHashCode, compositeMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "class_name": "CompositeMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest.[void]testHashCodeAfterRemovingMap()", "name": "testHashCodeAfterRemovingMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeAfterRemovingMap()", "original_string": "    @Test\n    public void testHashCodeAfterRemovingMap() {\n        compositeMap.removeComposited(map2);\n        int expectedHashCode = map1.hashCode();\n        assertEquals(expectedHashCode, compositeMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "class_name": "CompositeMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest.[void]testHashCodeAfterModifyingMap()", "name": "testHashCodeAfterModifyingMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeAfterModifyingMap()", "original_string": "    @Test\n    public void testHashCodeAfterModifyingMap() {\n        map1.put(\"key6\", \"value6\");\n        int expectedHashCode = map1.hashCode() + map2.hashCode();\n        assertEquals(expectedHashCode, compositeMap.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "class_name": "CompositeMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest.[void]testHashCodeConsistency()", "name": "testHashCodeConsistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeConsistency()", "original_string": "    @Test\n    public void testHashCodeConsistency() {\n        int initialHashCode = compositeMap.hashCode();\n        map1.put(\"key7\", \"value7\");\n        int modifiedHashCode = compositeMap.hashCode();\n        assertNotEquals(initialHashCode, modifiedHashCode);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "class_name": "CompositeMap_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java.CompositeMap_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest.[void]testSizeWithInitialMaps()", "name": "testSizeWithInitialMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeWithInitialMaps()", "original_string": "    @Test\n    public void testSizeWithInitialMaps() {\n        assertEquals(4, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "class_name": "CompositeMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest.[void]testSizeAfterAddingMap()", "name": "testSizeAfterAddingMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterAddingMap()", "original_string": "    @Test\n    public void testSizeAfterAddingMap() {\n        Map<String, String> mapThree = new HashMap<>();\n        mapThree.put(\"5\", \"five\");\n        mapThree.put(\"6\", \"six\");\n\n        compositeMap.addComposited(mapThree);\n        assertEquals(6, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "class_name": "CompositeMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest.[void]testSizeAfterRemovingMap()", "name": "testSizeAfterRemovingMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterRemovingMap()", "original_string": "    @Test\n    public void testSizeAfterRemovingMap() {\n        compositeMap.removeComposited(mapTwo);\n        assertEquals(2, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "class_name": "CompositeMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest.[void]testSizeAfterAddingKeyValue()", "name": "testSizeAfterAddingKeyValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterAddingKeyValue()", "original_string": "    @Test\n    public void testSizeAfterAddingKeyValue() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"5\", \"five\");\n        compositeMap.addComposited(newMap);\n        assertEquals(5, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "class_name": "CompositeMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest.[void]testSizeAfterRemovingKeyValue()", "name": "testSizeAfterRemovingKeyValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterRemovingKeyValue()", "original_string": "    @Test\n    public void testSizeAfterRemovingKeyValue() {\n        compositeMap.remove(\"3\");\n        assertEquals(3, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "class_name": "CompositeMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest.[void]testSizeAfterClearingMaps()", "name": "testSizeAfterClearingMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSizeAfterClearingMaps()", "original_string": "    @Test\n    public void testSizeAfterClearingMaps() {\n        compositeMap.clear();\n        assertEquals(0, compositeMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "class_name": "CompositeMap_sizeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java.CompositeMap_sizeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java.PredicatedMapTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEntrySet() {\n        Map<K, V> map = makeTestMap();\n        assertNotNull(map.entrySet(), \"returned entryset should not be null\");\n        map = decorateMap(new HashMap<>(), null, null);\n        map.put((K) \"oneKey\", (V) \"oneValue\");\n        assertEquals(1, map.entrySet().size(), \"returned entryset should contain one entry\");\n        map = decorateMap(map, null, null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java", "class_name": "PredicatedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java.PredicatedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java.PredicatedMapTest.[void]testPut()", "name": "testPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut() {\n        final Map<K, V> map = makeTestMap();\n        assertThrows(IllegalArgumentException.class, () -> map.put((K) \"Hi\", (V) Integer.valueOf(3)),\n                \"Illegal value should raise IllegalArgument\");\n\n        assertThrows(IllegalArgumentException.class, () -> map.put((K) Integer.valueOf(3), (V) \"Hi\"),\n                \"Illegal key should raise IllegalArgument\");\n\n        assertFalse(map.containsKey(Integer.valueOf(3)));\n        assertFalse(map.containsValue(Integer.valueOf(3)));\n\n        final Map<K, V> map2 = new HashMap<>();\n        map2.put((K) \"A\", (V) \"a\");\n        map2.put((K) \"B\", (V) \"b\");\n        map2.put((K) \"C\", (V) \"c\");\n        map2.put((K) \"c\", (V) Integer.valueOf(3));\n\n        assertThrows(IllegalArgumentException.class, () -> map.putAll(map2),\n                \"Illegal value should raise IllegalArgument\");\n\n        map.put((K) \"E\", (V) \"e\");\n        Iterator<Map.Entry<K, V>> iterator = map.entrySet().iterator();\n        Map.Entry<K, V> entry = iterator.next();\n        final Map.Entry<K, V> finalEntry = entry;\n        assertThrows(IllegalArgumentException.class, () -> finalEntry.setValue((V) Integer.valueOf(3)),\n                \"Illegal value should raise IllegalArgument\");\n\n        map.put((K) \"F\", (V) \"f\");\n        iterator = map.entrySet().iterator();\n        entry = iterator.next();\n        entry.setValue((V) \"x\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java", "class_name": "PredicatedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java.PredicatedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testContainsValue()", "name": "testContainsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsValue()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsValue() {\n        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n        assertTrue(map.containsValue(\"uno\"));\n        assertTrue(map.containsValue(\"un\"));\n        assertTrue(map.containsValue(\"dos\"));\n        assertTrue(map.containsValue(\"deux\"));\n        assertTrue(map.containsValue(\"tres\"));\n        assertTrue(map.containsValue(\"trois\"));\n        assertFalse(map.containsValue(\"quatro\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testContainsValue_Key()", "name": "testContainsValue_Key", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsValue_Key()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsValue_Key() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        assertFalse(map.containsValue(\"A\", \"AA\"));\n        assertFalse(map.containsValue(\"B\", \"BB\"));\n        map.put((K) \"A\", \"AA\");\n        assertTrue(map.containsValue(\"A\", \"AA\"));\n        assertFalse(map.containsValue(\"A\", \"AB\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testEmptyMapCompatibility()", "name": "testEmptyMapCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyMapCompatibility()", "original_string": "    @Test\n    public void testEmptyMapCompatibility() throws Exception {\n        final Map<?, ?> map = makeEmptyMap();\n        final Map<?, ?> map2 = (Map<?, ?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n        assertEquals(0, map2.size(), \"Map is empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testFullMapCompatibility()", "name": "testFullMapCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullMapCompatibility()", "original_string": "    @Test\n    public void testFullMapCompatibility() throws Exception {\n        final Map<?, ?> map = (Map<?, ?>) makeObject();\n        final Map<?, ?> map2 = (Map<?, ?>) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n        assertEquals(map.size(), map2.size(), \"Map is the right size\");\n        for (final Object key : map.keySet()) {\n            assertEquals(map.get(key), map2.get(key), \"Map had unequal elements\");\n            map2.remove(key);\n        }\n        assertEquals(0, map2.size(), \"Map had extra values\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testGetCollection()", "name": "testGetCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetCollection()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetCollection() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        map.put((K) \"A\", \"AA\");\n        assertSame(map.get(\"A\"), map.getCollection(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final MultiValueMap<K, V> map = createTestMap();\n        @SuppressWarnings(\"unchecked\")\n        final Collection<V> values = new ArrayList<>((Collection<V>) map.values());\n        final Iterator<Map.Entry<K, V>> iterator = map.iterator();\n        while (iterator.hasNext()) {\n            final Map.Entry<K, V> entry = iterator.next();\n            assertTrue(map.containsValue(entry.getKey(), entry.getValue()));\n            assertTrue(values.contains(entry.getValue()));\n            assertTrue(values.remove(entry.getValue()));\n        }\n        assertTrue(values.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testIterator_Key()", "name": "testIterator_Key", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIterator_Key()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIterator_Key() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        assertFalse(map.iterator(\"A\").hasNext());\n        map.put((K) \"A\", \"AA\");\n        final Iterator<?> it = map.iterator(\"A\");\n        assertTrue(it.hasNext());\n        it.next();\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testKeyContainsValue()", "name": "testKeyContainsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testKeyContainsValue()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testKeyContainsValue() {\n        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n        assertTrue(map.containsValue(\"one\", \"uno\"));\n        assertTrue(map.containsValue(\"one\", \"un\"));\n        assertTrue(map.containsValue(\"two\", \"dos\"));\n        assertTrue(map.containsValue(\"two\", \"deux\"));\n        assertTrue(map.containsValue(\"three\", \"tres\"));\n        assertTrue(map.containsValue(\"three\", \"trois\"));\n        assertFalse(map.containsValue(\"four\", \"quatro\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testKeyedIterator()", "name": "testKeyedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeyedIterator()", "original_string": "    @Test\n    public void testKeyedIterator() {\n        final MultiValueMap<K, V> map = createTestMap();\n        final ArrayList<Object> actual = new ArrayList<>(IteratorUtils.toList(map.iterator(\"one\")));\n        final ArrayList<Object> expected = new ArrayList<>(Arrays.asList(\"uno\", \"un\"));\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testMapEquals()", "name": "testMapEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapEquals()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapEquals() {\n        final MultiValueMap<K, V> one = new MultiValueMap<>();\n        final Integer value = Integer.valueOf(1);\n        one.put((K) \"One\", value);\n        one.removeMapping(\"One\", value);\n\n        final MultiValueMap<K, V> two = new MultiValueMap<>();\n        assertEquals(two, one);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testMultipleValues()", "name": "testMultipleValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultipleValues()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultipleValues() {\n        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n        final HashSet<V> expected = new HashSet<>();\n        expected.add((V) \"uno\");\n        expected.add((V) \"un\");\n        assertEquals(expected, map.get(\"one\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testNoMappingReturnsNull()", "name": "testNoMappingReturnsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoMappingReturnsNull()", "original_string": "    @Test\n    public void testNoMappingReturnsNull() {\n        final MultiValueMap<K, V> map = createTestMap();\n        assertNull(map.get(\"whatever\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testPutAll_KeyCollection()", "name": "testPutAll_KeyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_KeyCollection()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_KeyCollection() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        Collection<V> coll = (Collection<V>) Arrays.asList(\"X\", \"Y\", \"Z\");\n\n        assertTrue(map.putAll((K) \"A\", coll));\n        assertEquals(3, map.size(\"A\"));\n        assertTrue(map.containsValue(\"A\", \"X\"));\n        assertTrue(map.containsValue(\"A\", \"Y\"));\n        assertTrue(map.containsValue(\"A\", \"Z\"));\n\n        assertFalse(map.putAll((K) \"A\", null));\n        assertEquals(3, map.size(\"A\"));\n        assertTrue(map.containsValue(\"A\", \"X\"));\n        assertTrue(map.containsValue(\"A\", \"Y\"));\n        assertTrue(map.containsValue(\"A\", \"Z\"));\n\n        assertFalse(map.putAll((K) \"A\", new ArrayList<>()));\n        assertEquals(3, map.size(\"A\"));\n        assertTrue(map.containsValue(\"A\", \"X\"));\n        assertTrue(map.containsValue(\"A\", \"Y\"));\n        assertTrue(map.containsValue(\"A\", \"Z\"));\n\n        coll = (Collection<V>) Arrays.asList(\"M\");\n        assertTrue(map.putAll((K) \"A\", coll));\n        assertEquals(4, map.size(\"A\"));\n        assertTrue(map.containsValue(\"A\", \"X\"));\n        assertTrue(map.containsValue(\"A\", \"Y\"));\n        assertTrue(map.containsValue(\"A\", \"Z\"));\n        assertTrue(map.containsValue(\"A\", \"M\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testPutAll_Map1()", "name": "testPutAll_Map1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map1()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map1() {\n        final MultiMap<K, V> original = new MultiValueMap<>();\n        original.put((K) \"key\", \"object1\");\n        original.put((K) \"key\", \"object2\");\n\n        final MultiValueMap<K, V> test = new MultiValueMap<>();\n        test.put((K) \"keyA\", \"objectA\");\n        test.put((K) \"key\", \"object0\");\n        test.putAll(original);\n\n        assertEquals(2, test.size());\n        assertEquals(4, test.totalSize());\n        assertEquals(1, test.getCollection(\"keyA\").size());\n        assertEquals(3, test.getCollection(\"key\").size());\n        assertTrue(test.containsValue(\"objectA\"));\n        assertTrue(test.containsValue(\"object0\"));\n        assertTrue(test.containsValue(\"object1\"));\n        assertTrue(test.containsValue(\"object2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testPutAll_Map2()", "name": "testPutAll_Map2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map2() {\n        final Map<K, V> original = new HashMap<>();\n        original.put((K) \"keyX\", (V) \"object1\");\n        original.put((K) \"keyY\", (V) \"object2\");\n\n        final MultiValueMap<K, V> test = new MultiValueMap<>();\n        test.put((K) \"keyA\", \"objectA\");\n        test.put((K) \"keyX\", \"object0\");\n        test.putAll(original);\n\n        assertEquals(3, test.size());\n        assertEquals(4, test.totalSize());\n        assertEquals(1, test.getCollection(\"keyA\").size());\n        assertEquals(2, test.getCollection(\"keyX\").size());\n        assertEquals(1, test.getCollection(\"keyY\").size());\n        assertTrue(test.containsValue(\"objectA\"));\n        assertTrue(test.containsValue(\"object0\"));\n        assertTrue(test.containsValue(\"object1\"));\n        assertTrue(test.containsValue(\"object2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testPutWithList()", "name": "testPutWithList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutWithList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutWithList() {\n        @SuppressWarnings(\"rawtypes\")\n        final MultiValueMap<K, V> test = MultiValueMap.multiValueMap(new HashMap<>(), ArrayList.class);\n        assertEquals(\"a\", test.put((K) \"A\", \"a\"));\n        assertEquals(\"b\", test.put((K) \"A\", \"b\"));\n        assertEquals(1, test.size());\n        assertEquals(2, test.size(\"A\"));\n        assertEquals(2, test.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testPutWithSet()", "name": "testPutWithSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutWithSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutWithSet() {\n        @SuppressWarnings(\"rawtypes\")\n        final MultiValueMap<K, V> test = MultiValueMap.multiValueMap(new HashMap<>(), HashSet.class);\n        assertEquals(\"a\", test.put((K) \"A\", \"a\"));\n        assertEquals(\"b\", test.put((K) \"A\", \"b\"));\n        assertNull(test.put((K) \"A\", \"a\"));\n        assertEquals(1, test.size());\n        assertEquals(2, test.size(\"A\"));\n        assertEquals(2, test.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testRemove_KeyItem()", "name": "testRemove_KeyItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove_KeyItem()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove_KeyItem() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        map.put((K) \"A\", \"AA\");\n        map.put((K) \"A\", \"AB\");\n        map.put((K) \"A\", \"AC\");\n        assertFalse(map.removeMapping(\"C\", \"CA\"));\n        assertFalse(map.removeMapping(\"A\", \"AD\"));\n        assertTrue(map.removeMapping(\"A\", \"AC\"));\n        assertTrue(map.removeMapping(\"A\", \"AB\"));\n        assertTrue(map.removeMapping(\"A\", \"AA\"));\n        assertEquals(new MultiValueMap<>(), map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testRemoveAllViaEntryIterator()", "name": "testRemoveAllViaEntryIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllViaEntryIterator()", "original_string": "    @Test\n    public void testRemoveAllViaEntryIterator() {\n        final MultiValueMap<K, V> map = createTestMap();\n        for (final Iterator<?> i = map.iterator(); i.hasNext();) {\n            i.next();\n            i.remove();\n        }\n        assertNull(map.get(\"one\"));\n        assertEquals(0, map.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testRemoveAllViaIterator()", "name": "testRemoveAllViaIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllViaIterator()", "original_string": "    @Test\n    public void testRemoveAllViaIterator() {\n        final MultiValueMap<K, V> map = createTestMap();\n        for (final Iterator<?> i = map.values().iterator(); i.hasNext();) {\n            i.next();\n            i.remove();\n        }\n        assertNull(map.get(\"one\"));\n        assertTrue(map.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testRemoveAllViaKeyedIterator()", "name": "testRemoveAllViaKeyedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllViaKeyedIterator()", "original_string": "    @Test\n    public void testRemoveAllViaKeyedIterator() {\n        final MultiValueMap<K, V> map = createTestMap();\n        for (final Iterator<?> i = map.iterator(\"one\"); i.hasNext();) {\n            i.next();\n            i.remove();\n        }\n        assertNull(map.get(\"one\"));\n        assertEquals(4, map.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        assertEquals(0, map.size());\n        map.put((K) \"A\", \"AA\");\n        assertEquals(1, map.size());\n        map.put((K) \"B\", \"BA\");\n        assertEquals(2, map.size());\n        map.put((K) \"B\", \"BB\");\n        assertEquals(2, map.size());\n        map.put((K) \"B\", \"BC\");\n        assertEquals(2, map.size());\n        map.remove(\"A\");\n        assertEquals(1, map.size());\n        map.removeMapping(\"B\", \"BC\");\n        assertEquals(1, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testSize_Key()", "name": "testSize_Key", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize_Key()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize_Key() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        assertEquals(0, map.size(\"A\"));\n        assertEquals(0, map.size(\"B\"));\n        map.put((K) \"A\", \"AA\");\n        assertEquals(1, map.size(\"A\"));\n        assertEquals(0, map.size(\"B\"));\n        map.put((K) \"B\", \"BA\");\n        assertEquals(1, map.size(\"A\"));\n        assertEquals(1, map.size(\"B\"));\n        map.put((K) \"B\", \"BB\");\n        assertEquals(1, map.size(\"A\"));\n        assertEquals(2, map.size(\"B\"));\n        map.put((K) \"B\", \"BC\");\n        assertEquals(1, map.size(\"A\"));\n        assertEquals(3, map.size(\"B\"));\n        map.remove(\"A\");\n        assertEquals(0, map.size(\"A\"));\n        assertEquals(3, map.size(\"B\"));\n        map.removeMapping(\"B\", \"BC\");\n        assertEquals(0, map.size(\"A\"));\n        assertEquals(2, map.size(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testTotalSize()", "name": "testTotalSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTotalSize()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTotalSize() {\n        final MultiValueMap<K, V> map = new MultiValueMap<>();\n        assertEquals(0, map.totalSize());\n        map.put((K) \"A\", \"AA\");\n        assertEquals(1, map.totalSize());\n        map.put((K) \"B\", \"BA\");\n        assertEquals(2, map.totalSize());\n        map.put((K) \"B\", \"BB\");\n        assertEquals(3, map.totalSize());\n        map.put((K) \"B\", \"BC\");\n        assertEquals(4, map.totalSize());\n        map.remove(\"A\");\n        assertEquals(3, map.totalSize());\n        map.removeMapping(\"B\", \"BC\");\n        assertEquals(2, map.totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " extend the AbstractTestMap"}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testTotalSizeA()", "name": "testTotalSizeA", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTotalSizeA()", "original_string": "    @Test\n    public void testTotalSizeA() {\n        assertEquals(6, createTestMap().totalSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testUnsafeDeSerialization()", "name": "testUnsafeDeSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsafeDeSerialization()", "original_string": "    @Test\n    public void testUnsafeDeSerialization() throws Exception {\n        final MultiValueMap map1 = MultiValueMap.multiValueMap(new HashMap(), ArrayList.class);\n        byte[] bytes = serialize(map1);\n        final Object result = deserialize(bytes);\n        assertEquals(map1, result);\n\n        final MultiValueMap map2 = MultiValueMap.multiValueMap(new HashMap(), (Class) String.class);\n        bytes = serialize(map2);\n\n        final byte[] finalBytes = bytes;\n        assertThrows(UnsupportedOperationException.class, () -> deserialize(finalBytes));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testValueCollectionType()", "name": "testValueCollectionType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValueCollectionType()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValueCollectionType() {\n        final MultiValueMap<K, V> map = createTestMap(LinkedList.class);\n        assertTrue(map.get(\"one\") instanceof LinkedList);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest.[void]testValues()", "name": "testValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValues()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValues() {\n        final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n        final HashSet<V> expected = new HashSet<>();\n        expected.add((V) \"uno\");\n        expected.add((V) \"dos\");\n        expected.add((V) \"tres\");\n        expected.add((V) \"un\");\n        expected.add((V) \"deux\");\n        expected.add((V) \"trois\");\n        final Collection<Object> c = map.values();\n        assertEquals(6, c.size());\n        assertEquals(expected, new HashSet<>(c));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java", "class_name": "MultiValueMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java.MultiValueMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java.TransformedSortedMap_tailMapTest.[void]testTailMap()", "name": "testTailMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTailMap()", "original_string": "    @Test\n    public void testTailMap() {\n        SortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> tailMap = transformedMap.tailMap(\"B\");\n\n        assertEquals(2, tailMap.size());\n        assertEquals(\"2\", tailMap.get(\"B\"));\n        assertEquals(\"3\", tailMap.get(\"C\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "class_name": "TransformedSortedMap_tailMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java.TransformedSortedMap_tailMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java.TransformedSortedMap_tailMapTest.[void]testTailMapWithNonExistentKey()", "name": "testTailMapWithNonExistentKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTailMapWithNonExistentKey()", "original_string": "    @Test\n    public void testTailMapWithNonExistentKey() {\n        SortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> tailMap = transformedMap.tailMap(\"D\");\n\n        assertEquals(0, tailMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "class_name": "TransformedSortedMap_tailMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java.TransformedSortedMap_tailMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java.TransformedSortedMap_tailMapTest.[void]testTailMapWithNullKey()", "name": "testTailMapWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTailMapWithNullKey()", "original_string": "    @Test\n    public void testTailMapWithNullKey() {\n        SortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(baseMap, keyTransformer, valueTransformer);\n        assertThrows(NullPointerException.class, () -> {\n            transformedMap.tailMap(null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "class_name": "TransformedSortedMap_tailMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java.TransformedSortedMap_tailMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java.StaticBucketMap_clearTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testClear()", "original_string": "    @Test\n    void testClear() {\n        // Given\n        StaticBucketMap<Integer, String> map = new StaticBucketMap<>(1);\n        map.put(1, \"one\");\n        map.put(2, \"two\");\n\n        // When\n        map.clear();\n\n        // Then\n        assertEquals(0, map.size());\n        assertNull(map.get(1));\n        assertNull(map.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java", "class_name": "StaticBucketMap_clearTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java.StaticBucketMap_clearTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java.DefaultedMap_getTest.[void]testGet_KeyExistsInMap()", "name": "testGet_KeyExistsInMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_KeyExistsInMap()", "original_string": "    @Test\n    public void testGet_KeyExistsInMap() {\n        // Given\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        DefaultedMap<String, String> defaultedMap = new DefaultedMap<>(map, mock(Transformer.class));\n\n        // When\n        String result = defaultedMap.get(\"key1\");\n\n        // Then\n        assertEquals(\"value1\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "class_name": "DefaultedMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java.DefaultedMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java.DefaultedMap_getTest.[void]testGet_KeyNotInMapButExistsInMapAsNull()", "name": "testGet_KeyNotInMapButExistsInMapAsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_KeyNotInMapButExistsInMapAsNull()", "original_string": "    @Test\n    public void testGet_KeyNotInMapButExistsInMapAsNull() {\n        // Given\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", null);\n        DefaultedMap<String, String> defaultedMap = new DefaultedMap<>(map, mock(Transformer.class));\n\n        // When\n        String result = defaultedMap.get(\"key1\");\n\n        // Then\n        assertEquals(null, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "class_name": "DefaultedMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java.DefaultedMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java.DefaultedMap_getTest.[void]testGet_KeyNotInMapAndTransformerReturnsValue()", "name": "testGet_KeyNotInMapAndTransformerReturnsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_KeyNotInMapAndTransformerReturnsValue()", "original_string": "    @Test\n    public void testGet_KeyNotInMapAndTransformerReturnsValue() {\n        // Given\n        Map<String, String> map = new HashMap<>();\n        Transformer<String, String> transformer = mock(Transformer.class);\n        when(transformer.apply(\"key1\")).thenReturn(\"default\");\n        DefaultedMap<String, String> defaultedMap = new DefaultedMap<>(map, transformer);\n\n        // When\n        String result = defaultedMap.get(\"key1\");\n\n        // Then\n        assertEquals(\"default\", result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "class_name": "DefaultedMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java.DefaultedMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testAddComposited()", "name": "testAddComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddComposited()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddComposited() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n        final HashMap<K, V> three = new HashMap<>();\n        three.put((K) \"5\", (V) \"five\");\n        map.addComposited(null);\n        map.addComposited(three);\n        assertTrue(map.containsKey(\"5\"));\n\n        assertThrows(IllegalArgumentException.class, () -> map.addComposited(three));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet()", "original_string": "    @Test\n    public void testGet() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n        assertEquals(\"one\", map.get(\"1\"));\n        assertEquals(\"four\", map.get(\"4\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testPut()", "name": "testPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo(),\n            new CompositeMap.MapMutator<K, V>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public V put(final CompositeMap<K, V> map, final Map<K, V>[] composited, final K key,\n                    final V value) {\n                    pass = true;\n                    return (V) \"foo\";\n                }\n\n                @Override\n                public void putAll(final CompositeMap<K, V> map, final Map<K, V>[] composited, final Map<? extends K, ? extends V> t) {\n                    throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public void resolveCollision(final CompositeMap<K, V> composite,\n                    final Map<K, V> existing,\n                    final Map<K, V> added,\n                    final Collection<K> intersect) {\n                    throw new UnsupportedOperationException();\n                }\n            });\n\n        map.put((K) \"willy\", (V) \"wonka\");\n        assertTrue(pass);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testPutAll()", "name": "testPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll()", "original_string": "    @Test\n    public void testPutAll() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo(),\n            new CompositeMap.MapMutator<K, V>() {\n                private static final long serialVersionUID = 1L;\n                @Override\n                public V put(final CompositeMap<K, V> map, final Map<K, V>[] composited, final K key,\n                    final V value) {\n                    throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public void putAll(final CompositeMap<K, V> map, final Map<K, V>[] composited, final Map<? extends K, ? extends V> t) {\n                    pass = true;\n                }\n\n                @Override\n                public void resolveCollision(final CompositeMap<K, V> composite,\n                    final Map<K, V> existing,\n                    final Map<K, V> added,\n                    final Collection<K> intersect) {\n                    throw new UnsupportedOperationException();\n                }\n            });\n\n        map.putAll(null);\n        assertTrue(pass);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testRemoveComposited()", "name": "testRemoveComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveComposited()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveComposited() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n        final HashMap<K, V> three = new HashMap<>();\n        three.put((K) \"5\", (V) \"five\");\n        map.addComposited(null);\n        map.addComposited(three);\n        assertTrue(map.containsKey(\"5\"));\n\n        map.removeComposited(three);\n        assertFalse(map.containsKey(\"5\"));\n\n        map.removeComposited(buildOne());\n        assertFalse(map.containsKey(\"2\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testRemoveFromComposited()", "name": "testRemoveFromComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFromComposited()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFromComposited() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n        final HashMap<K, V> three = new HashMap<>();\n        three.put((K) \"5\", (V) \"five\");\n        map.addComposited(null);\n        map.addComposited(three);\n        assertTrue(map.containsKey(\"5\"));\n\n        //Now remove \"5\"\n        map.remove(\"5\");\n        assertFalse(three.containsKey(\"5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testRemoveFromUnderlying()", "name": "testRemoveFromUnderlying", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFromUnderlying()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFromUnderlying() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo());\n        final HashMap<K, V> three = new HashMap<>();\n        three.put((K) \"5\", (V) \"five\");\n        map.addComposited(null);\n        map.addComposited(three);\n        assertTrue(map.containsKey(\"5\"));\n\n        //Now remove \"5\"\n        three.remove(\"5\");\n        assertFalse(map.containsKey(\"5\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest.[void]testResolveCollision()", "name": "testResolveCollision", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testResolveCollision()", "original_string": "    @Test\n    public void testResolveCollision() {\n        final CompositeMap<K, V> map = new CompositeMap<>(buildOne(), buildTwo(),\n            new CompositeMap.MapMutator<K, V>() {\n                private static final long serialVersionUID = 1L;\n\n                @Override\n                public V put(final CompositeMap<K, V> map, final Map<K, V>[] composited, final K key,\n                    final V value) {\n                    throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public void putAll(final CompositeMap<K, V> map, final Map<K, V>[] composited, final Map<? extends K, ? extends V> t) {\n                    throw new UnsupportedOperationException();\n                }\n\n                @Override\n                public void resolveCollision(final CompositeMap<K, V> composite,\n                    final Map<K, V> existing,\n                    final Map<K, V> added,\n                    final Collection<K> intersect) {\n                    pass = true;\n                }\n            });\n\n        map.addComposited(buildOne());\n        assertTrue(pass);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java", "class_name": "CompositeMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java.CompositeMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest.[void]testRemoveAllWithExistingKey()", "name": "testRemoveAllWithExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithExistingKey()", "original_string": "    @Test\n    public void testRemoveAllWithExistingKey() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n        map.put(I2, I3, \"2-3\");\n\n        assertTrue(map.removeAll(I1));\n        assertEquals(1, map.size());\n        assertFalse(map.containsKey(I1, I2));\n        assertFalse(map.containsKey(I1, I3));\n        assertTrue(map.containsKey(I2, I3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "class_name": "MultiKeyMap_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest.[void]testRemoveAllWithNonExistingKey()", "name": "testRemoveAllWithNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithNonExistingKey()", "original_string": "    @Test\n    public void testRemoveAllWithNonExistingKey() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n\n        assertFalse(map.removeAll(I4));\n        assertEquals(2, map.size());\n        assertTrue(map.containsKey(I1, I2));\n        assertTrue(map.containsKey(I1, I3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "class_name": "MultiKeyMap_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest.[void]testRemoveAllWithNullKey()", "name": "testRemoveAllWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithNullKey()", "original_string": "    @Test\n    public void testRemoveAllWithNullKey() {\n        map.put(null, I2, \"null-2\");\n        map.put(I1, I3, \"1-3\");\n\n        assertTrue(map.removeAll(null));\n        assertEquals(1, map.size());\n        assertFalse(map.containsKey(null, I2));\n        assertTrue(map.containsKey(I1, I3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "class_name": "MultiKeyMap_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest.[void]testRemoveAllWithEmptyMap()", "name": "testRemoveAllWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithEmptyMap()", "original_string": "    @Test\n    public void testRemoveAllWithEmptyMap() {\n        assertFalse(map.removeAll(I1));\n        assertEquals(0, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "class_name": "MultiKeyMap_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest.[void]testRemoveAllWithMultipleKeys()", "name": "testRemoveAllWithMultipleKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllWithMultipleKeys()", "original_string": "    @Test\n    public void testRemoveAllWithMultipleKeys() {\n        map.put(I1, I2, \"1-2\");\n        map.put(I1, I3, \"1-3\");\n        map.put(I2, I3, \"2-3\");\n        map.put(I2, I4, \"2-4\");\n\n        assertTrue(map.removeAll(I1));\n        assertEquals(2, map.size());\n        assertFalse(map.containsKey(I1, I2));\n        assertFalse(map.containsKey(I1, I3));\n        assertTrue(map.containsKey(I2, I3));\n        assertTrue(map.containsKey(I2, I4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "class_name": "MultiKeyMap_removeAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java.MultiKeyMap_removeAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java.SingletonMapTest.[void]testBoundedMap()", "name": "testBoundedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBoundedMap()", "original_string": "    @Test\n    public void testBoundedMap() {\n        final SingletonMap<K, V> map = makeFullMap();\n        assertEquals(1, map.size());\n        assertTrue(map.isFull());\n        assertEquals(1, map.maxSize());\n        assertInstanceOf(BoundedMap.class, map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java", "class_name": "SingletonMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java.SingletonMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java.SingletonMapTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClone()", "original_string": "    @Test\n    public void testClone() {\n        final SingletonMap<K, V> map = makeFullMap();\n        assertEquals(1, map.size());\n        final SingletonMap<K, V> cloned = map.clone();\n        assertEquals(1, cloned.size());\n        assertTrue(cloned.containsKey(ONE));\n        assertTrue(cloned.containsValue(TWO));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java", "class_name": "SingletonMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java.SingletonMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java.SingletonMapTest.[void]testKeyValue()", "name": "testKeyValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeyValue()", "original_string": "    @Test\n    public void testKeyValue() {\n        final SingletonMap<K, V> map = makeFullMap();\n        assertEquals(1, map.size());\n        assertEquals(ONE, map.getKey());\n        assertEquals(TWO, map.getValue());\n        assertInstanceOf(KeyValue.class, map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java", "class_name": "SingletonMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java.SingletonMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest.[void]testBasics()", "name": "testBasics", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBasics()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBasics() {\n        final IterableMap<K, V> map = new ReferenceIdentityMap<>(ReferenceStrength.HARD, ReferenceStrength.HARD);\n        assertEquals(0, map.size());\n\n        map.put((K) I1A, (V) I2A);\n        assertEquals(1, map.size());\n        assertSame(I2A, map.get(I1A));\n        assertSame(null, map.get(I1B));\n        assertTrue(map.containsKey(I1A));\n        assertFalse(map.containsKey(I1B));\n        assertTrue(map.containsValue(I2A));\n        assertFalse(map.containsValue(I2B));\n\n        map.put((K) I1A, (V) I2B);\n        assertEquals(1, map.size());\n        assertSame(I2B, map.get(I1A));\n        assertSame(null, map.get(I1B));\n        assertTrue(map.containsKey(I1A));\n        assertFalse(map.containsKey(I1B));\n        assertFalse(map.containsValue(I2A));\n        assertTrue(map.containsValue(I2B));\n\n        map.put((K) I1B, (V) I2B);\n        assertEquals(2, map.size());\n        assertSame(I2B, map.get(I1A));\n        assertSame(I2B, map.get(I1B));\n        assertTrue(map.containsKey(I1A));\n        assertTrue(map.containsKey(I1B));\n        assertFalse(map.containsValue(I2A));\n        assertTrue(map.containsValue(I2B));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java", "class_name": "ReferenceIdentityMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest.[void]testHashEntry()", "name": "testHashEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testHashEntry()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testHashEntry() {\n        final IterableMap<K, V> map = new ReferenceIdentityMap<>(ReferenceStrength.HARD, ReferenceStrength.HARD);\n\n        map.put((K) I1A, (V) I2A);\n        map.put((K) I1B, (V) I2A);\n\n        final Map.Entry<K, V> entry1 = map.entrySet().iterator().next();\n        final Iterator<Map.Entry<K, V>> it = map.entrySet().iterator();\n        final Map.Entry<K, V> entry2 = it.next();\n        final Map.Entry<K, V> entry3 = it.next();\n\n        assertTrue(entry1.equals(entry2));\n        assertTrue(entry2.equals(entry1));\n        assertFalse(entry1.equals(entry3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java", "class_name": "ReferenceIdentityMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest.[void]testNullHandling()", "name": "testNullHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling() {\n        resetFull();\n        assertNull(getMap().get(null));\n        assertFalse(getMap().containsKey(null));\n        assertFalse(getMap().containsValue(null));\n        assertNull(getMap().remove(null));\n        assertFalse(getMap().entrySet().contains(null));\n        assertFalse(getMap().containsKey(null));\n        assertFalse(getMap().containsValue(null));\n        assertThrows(NullPointerException.class, () -> getMap().put(null, null));\n        assertThrows(NullPointerException.class, () -> getMap().put((K) new Object(), null));\n        assertThrows(NullPointerException.class, () -> getMap().put(null, (V) new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java", "class_name": "ReferenceIdentityMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest.[void]testPurgeValues()", "name": "testPurgeValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPurgeValues()", "original_string": "    @Test\n    public void testPurgeValues() throws Exception {\n        // many thanks to Juozas Baliuka for suggesting this method\n        final Map<K, V> testMap = buildRefMap();\n\n        int iterations = 0;\n        int bytz = 2;\n        while (true) {\n            System.gc();\n            if (iterations++ > 50) {\n                fail(\"Max iterations reached before resource released.\");\n            }\n            testMap.isEmpty();\n            if (\n                keyReference.get() == null &&\n                valueReference.get() == null) {\n                break;\n\n            }\n            // create garbage:\n            @SuppressWarnings(\"unused\")\n            final byte[] b =  new byte[bytz];\n            bytz *= 2;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java", "class_name": "ReferenceIdentityMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java.ReferenceIdentityMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Tests whether purge values setting works"}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putAllTest.java.StaticBucketMap_putAllTest.[void]testPutAll()", "name": "testPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll()", "original_string": "    @Test\n    public void testPutAll() {\n        // Given\n        StaticBucketMap<Integer, String> map = new StaticBucketMap<>(10);\n        Map<Integer, String> inputMap = new HashMap<>();\n        inputMap.put(1, \"One\");\n        inputMap.put(2, \"Two\");\n        inputMap.put(3, \"Three\");\n\n        // When\n        map.putAll(inputMap);\n\n        // Then\n        assertEquals(3, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putAllTest.java", "class_name": "StaticBucketMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putAllTest.java.StaticBucketMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java.UnmodifiableMapTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final Map<K, V> map = makeFullMap();\n        assertSame(map, UnmodifiableMap.unmodifiableMap(map));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableMap.unmodifiableMap(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java", "class_name": "UnmodifiableMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java.UnmodifiableMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java.UnmodifiableMapTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java", "class_name": "UnmodifiableMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java.UnmodifiableMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java.TransformedSortedMap_subMapTest.[void]testSubMap()", "name": "testSubMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubMap()", "original_string": "    @Test\n    public void testSubMap() {\n        TransformedSortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(baseMap, keyTransformer, valueTransformer);\n\n        SortedMap<String, String> subMap = transformedMap.subMap(\"A\", \"C\");\n\n        assertEquals(2, subMap.size());\n        assertEquals(\"1\", subMap.get(\"A\"));\n        assertEquals(\"2\", subMap.get(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java", "class_name": "TransformedSortedMap_subMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java.TransformedSortedMap_subMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java.TransformedSortedMap_subMapTest.[void]testSubMapWithTransformers()", "name": "testSubMapWithTransformers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubMapWithTransformers()", "original_string": "    @Test\n    public void testSubMapWithTransformers() {\n        Transformer<String, String> keyTransformer = TransformerUtils.stringValueTransformer();\n        Transformer<String, String> valueTransformer = TransformerUtils.stringValueTransformer();\n\n        TransformedSortedMap<String, String> transformedMap = TransformedSortedMap.transformingSortedMap(baseMap, keyTransformer, valueTransformer);\n\n        SortedMap<String, String> subMap = transformedMap.subMap(\"A\", \"C\");\n\n        assertEquals(2, subMap.size());\n        assertEquals(\"1\", subMap.get(\"A\"));\n        assertEquals(\"2\", subMap.get(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java", "class_name": "TransformedSortedMap_subMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java.TransformedSortedMap_subMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest.[void]testPutAllWithMutator()", "name": "testPutAllWithMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithMutator()", "original_string": "    @Test\n    public void testPutAllWithMutator() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"5\", \"five\");\n        newMap.put(\"6\", \"six\");\n\n        compositeMap.setMutator(new CompositeMap.MapMutator<String, String>() {\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> mapToAdd) {\n                for (Map<String, String> m : composited) {\n                    m.putAll(mapToAdd);\n                }\n            }\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                return null;\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n            }\n        });\n\n        compositeMap.putAll(newMap);\n\n        assertTrue(compositeMap.containsKey(\"5\"));\n        assertTrue(compositeMap.containsKey(\"6\"));\n        assertEquals(\"five\", compositeMap.get(\"5\"));\n        assertEquals(\"six\", compositeMap.get(\"6\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "class_name": "CompositeMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest.[void]testPutAllWithoutMutator()", "name": "testPutAllWithoutMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithoutMutator()", "original_string": "    @Test\n    public void testPutAllWithoutMutator() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"5\", \"five\");\n        newMap.put(\"6\", \"six\");\n\n        assertThrows(UnsupportedOperationException.class, () -> compositeMap.putAll(newMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "class_name": "CompositeMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest.[void]testPutAllWithClear()", "name": "testPutAllWithClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithClear()", "original_string": "    @Test\n    public void testPutAllWithClear() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"5\", \"five\");\n        newMap.put(\"6\", \"six\");\n\n        compositeMap.clear();\n\n        compositeMap.setMutator(new CompositeMap.MapMutator<String, String>() {\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> mapToAdd) {\n                for (Map<String, String> m : composited) {\n                    m.putAll(mapToAdd);\n                }\n            }\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                return null;\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n            }\n        });\n\n        compositeMap.putAll(newMap);\n\n        assertTrue(compositeMap.containsKey(\"5\"));\n        assertTrue(compositeMap.containsKey(\"6\"));\n        assertEquals(\"five\", compositeMap.get(\"5\"));\n        assertEquals(\"six\", compositeMap.get(\"6\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "class_name": "CompositeMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest.[void]testPutAllWithRemoveComposited()", "name": "testPutAllWithRemoveComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithRemoveComposited()", "original_string": "    @Test\n    public void testPutAllWithRemoveComposited() {\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"5\", \"five\");\n        newMap.put(\"6\", \"six\");\n\n        compositeMap.removeComposited(mapOne);\n\n        compositeMap.setMutator(new CompositeMap.MapMutator<String, String>() {\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> mapToAdd) {\n                for (Map<String, String> m : composited) {\n                    m.putAll(mapToAdd);\n                }\n            }\n\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                return null;\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n            }\n        });\n\n        compositeMap.putAll(newMap);\n\n        assertTrue(compositeMap.containsKey(\"5\"));\n        assertTrue(compositeMap.containsKey(\"6\"));\n        assertEquals(\"five\", compositeMap.get(\"5\"));\n        assertEquals(\"six\", compositeMap.get(\"6\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "class_name": "CompositeMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java.CompositeMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java.PassiveExpiringMap_keySetTest.[void]testKeySetWithExpiredEntries()", "name": "testKeySetWithExpiredEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetWithExpiredEntries()", "original_string": "    @Test\n    public void testKeySetWithExpiredEntries() throws InterruptedException {\n        // Given\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        Thread.sleep(1500); // Ensure entries expire\n\n        // When\n        Set<String> keySet = map.keySet();\n\n        // Then\n        assertTrue(keySet.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java", "class_name": "PassiveExpiringMap_keySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java.PassiveExpiringMap_keySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java.PassiveExpiringMap_keySetTest.[void]testKeySetWithoutExpiredEntries()", "name": "testKeySetWithoutExpiredEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetWithoutExpiredEntries()", "original_string": "    @Test\n    public void testKeySetWithoutExpiredEntries() {\n        // Given\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        // When\n        Set<String> keySet = map.keySet();\n\n        // Then\n        assertEquals(2, keySet.size());\n        assertTrue(keySet.contains(\"key1\"));\n        assertTrue(keySet.contains(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java", "class_name": "PassiveExpiringMap_keySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java.PassiveExpiringMap_keySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest.[void]testPutAll_NewKey()", "name": "testPutAll_NewKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_NewKey()", "original_string": "    @Test\n    public void testPutAll_NewKey() {\n        Collection<String> values = new ArrayList<>(Arrays.asList(\"A\", \"B\", \"C\"));\n        assertTrue(multiValueMap.putAll(\"key1\", values));\n        assertEquals(3, multiValueMap.size(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "class_name": "MultiValueMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest.[void]testPutAll_ExistingKey()", "name": "testPutAll_ExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_ExistingKey()", "original_string": "    @Test\n    public void testPutAll_ExistingKey() {\n        Collection<String> initialValues = new ArrayList<>(Arrays.asList(\"A\", \"B\"));\n        multiValueMap.putAll(\"key1\", initialValues);\n        Collection<String> additionalValues = new ArrayList<>(Arrays.asList(\"C\", \"D\"));\n        assertTrue(multiValueMap.putAll(\"key1\", additionalValues));\n        assertEquals(4, multiValueMap.size(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "class_name": "MultiValueMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest.[void]testPutAll_NullValues()", "name": "testPutAll_NullValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_NullValues()", "original_string": "    @Test\n    public void testPutAll_NullValues() {\n        assertFalse(multiValueMap.putAll(\"key1\", null));\n        assertNull(multiValueMap.getCollection(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "class_name": "MultiValueMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest.[void]testPutAll_EmptyValues()", "name": "testPutAll_EmptyValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_EmptyValues()", "original_string": "    @Test\n    public void testPutAll_EmptyValues() {\n        Collection<String> values = new ArrayList<>();\n        assertFalse(multiValueMap.putAll(\"key1\", values));\n        assertNull(multiValueMap.getCollection(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "class_name": "MultiValueMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest.[void]testPutAll_AfterRemoveMapping()", "name": "testPutAll_AfterRemoveMapping", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_AfterRemoveMapping()", "original_string": "    @Test\n    public void testPutAll_AfterRemoveMapping() {\n        Collection<String> initialValues = new ArrayList<>(Arrays.asList(\"A\", \"B\"));\n        multiValueMap.putAll(\"key1\", initialValues);\n        assertTrue(multiValueMap.removeMapping(\"key1\", \"A\"));\n        Collection<String> additionalValues = new ArrayList<>(Arrays.asList(\"C\", \"D\"));\n        assertTrue(multiValueMap.putAll(\"key1\", additionalValues));\n        assertEquals(3, multiValueMap.size(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "class_name": "MultiValueMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest.[void]testPutAll_WithPut()", "name": "testPutAll_WithPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll_WithPut()", "original_string": "    @Test\n    public void testPutAll_WithPut() {\n        multiValueMap.put(\"key1\", \"A\");\n        Collection<String> additionalValues = new ArrayList<>(Arrays.asList(\"B\", \"C\"));\n        assertTrue(multiValueMap.putAll(\"key1\", additionalValues));\n        assertEquals(3, multiValueMap.size(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "class_name": "MultiValueMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java.MultiValueMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java.LazyMapTest.[void]testMapGet()", "name": "testMapGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testMapGet()", "original_string": "    @Test\n    @Override\n    public void testMapGet() {\n        //TODO eliminate need for this via superclass - see svn history.\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java", "class_name": "LazyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java.LazyMapTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java.LazyMapTest.[void]testMapGetWithFactory()", "name": "testMapGetWithFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapGetWithFactory()", "original_string": "    @Test\n    public void testMapGetWithFactory() {\n        Map<Integer, Number> map = lazyMap(new HashMap<>(), oneFactory);\n        assertEquals(0, map.size());\n        final Number i1 = map.get(\"Five\");\n        assertEquals(1, i1);\n        assertEquals(1, map.size());\n        final Number i2 = map.get(new String(new char[] {'F', 'i', 'v', 'e'}));\n        assertEquals(1, i2);\n        assertEquals(1, map.size());\n        assertSame(i1, i2);\n\n        map = lazyMap(new HashMap<>(), FactoryUtils.<Long>nullFactory());\n        final Object o = map.get(\"Five\");\n        assertNull(o);\n        assertEquals(1, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java", "class_name": "LazyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java.LazyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java.LazyMapTest.[void]testMapGetWithTransformer()", "name": "testMapGetWithTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapGetWithTransformer()", "original_string": "    @Test\n    public void testMapGetWithTransformer() {\n        final Transformer<Number, Integer> intConverter = Number::intValue;\n        final Map<Long, Number> map = lazyMap(new HashMap<>(), intConverter);\n        assertEquals(0, map.size());\n        final Number i1 = map.get(123L);\n        assertEquals(123, i1);\n        assertEquals(1, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java", "class_name": "LazyMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazyMapTest.java.LazyMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest.[void]testCustomPurge()", "name": "testCustomPurge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCustomPurge()", "original_string": "    @Test\n    public void testCustomPurge() {\n        final List<Integer> expiredValues = new ArrayList<>();\n        @SuppressWarnings(\"unchecked\")\n        final Consumer<Integer> consumer = (Consumer<Integer> & Serializable) expiredValues::add;\n        final Map<Integer, Integer> map = new ReferenceMap<Integer, Integer>(ReferenceStrength.WEAK, ReferenceStrength.HARD, false) {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            protected ReferenceEntry<Integer, Integer> createEntry(final HashEntry<Integer, Integer> next, final int hashCode, final Integer key, final Integer value) {\n                return new AccessibleEntry<>(this, next, hashCode, key, value, consumer);\n            }\n        };\n        for (int i = 100000; i < 100010; i++) {\n            map.put(Integer.valueOf(i), Integer.valueOf(i));\n        }\n        int iterations = 0;\n        int bytz = 2;\n        while (true) {\n            System.gc();\n            if (iterations++ > 50 || bytz < 0) {\n                fail(\"Max iterations reached before resource released.\");\n            }\n            map.isEmpty();\n            if (!expiredValues.isEmpty()) {\n                break;\n            }\n            // create garbage:\n            @SuppressWarnings(\"unused\")\n            final byte[] b = new byte[bytz];\n            bytz *= 2;\n        }\n        assertFalse(expiredValues.isEmpty(), \"Value should be stored\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "class_name": "ReferenceMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest.[void]testDataSizeAfterSerialization()", "name": "testDataSizeAfterSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDataSizeAfterSerialization()", "original_string": "    @Test\n    public void testDataSizeAfterSerialization() throws IOException, ClassNotFoundException {\n\n        final ReferenceMap<String, String> serializeMap = new ReferenceMap<>(ReferenceStrength.WEAK, ReferenceStrength.WEAK, true);\n        serializeMap.put(\"KEY\", \"VALUE\");\n\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try (ObjectOutputStream out = new ObjectOutputStream(baos)) {\n            out.writeObject(serializeMap);\n        }\n\n        final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n        try (ObjectInputStream in = new ObjectInputStream(bais)) {\n            @SuppressWarnings(\"unchecked\")\n            final ReferenceMap<String, String> deserializedMap = (ReferenceMap<String, String>) in.readObject();\n            assertEquals(1, deserializedMap.size());\n            assertEquals(serializeMap.data.length, deserializedMap.data.length);\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "class_name": "ReferenceMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest whether after serialization the \"data\" HashEntry array is the same size as the original.<p>\n\nSee <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-599\">COLLECTIONS-599: HashEntry array object naming data initialized with double the size during deserialization</a>\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest.[void]testIteratorLastEntryCanBeRemovedAfterHasNext()", "name": "testIteratorLastEntryCanBeRemovedAfterHasNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorLastEntryCanBeRemovedAfterHasNext()", "original_string": "    @Test\n    public void testIteratorLastEntryCanBeRemovedAfterHasNext() {\n        final ReferenceMap<Integer, Integer> map = new ReferenceMap<>();\n        map.put(1, 2);\n        final Iterator<Map.Entry<Integer, Integer>> iter = map.entrySet().iterator();\n        assertTrue(iter.hasNext());\n        iter.next();\n        // below line should not affect remove\n        assertFalse(iter.hasNext());\n        iter.remove();\n        assertTrue(map.isEmpty(), \"Expect empty but have entry: \" + map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "class_name": "ReferenceMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest whether remove is not removing last entry after calling hasNext.\n<p>\nSee <a href=\"https://issues.apache.org/jira/browse/COLLECTIONS-802\">COLLECTIONS-802: ReferenceMap iterator remove violates contract</a>\n"}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest.[void]testNullHandling()", "name": "testNullHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNullHandling() {\n        resetFull();\n        assertNull(map.get(null));\n        assertFalse(map.containsKey(null));\n        assertFalse(map.containsValue(null));\n        assertNull(map.remove(null));\n        assertFalse(map.entrySet().contains(null));\n        assertFalse(map.containsKey(null));\n        assertFalse(map.containsValue(null));\n        assertThrows(NullPointerException.class, () -> map.put(null, null));\n        assertThrows(NullPointerException.class, () -> map.put((K) new Object(), null));\n        assertThrows(NullPointerException.class, () -> map.put(null, (V) new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "class_name": "ReferenceMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest.[void]testPurgeValues()", "name": "testPurgeValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPurgeValues()", "original_string": "    @Test\n    public void testPurgeValues() throws Exception {\n        // many thanks to Juozas Baliuka for suggesting this method\n        final Map<K, V> testMap = buildRefMap();\n\n        int iterations = 0;\n        int bytz = 2;\n        while (true) {\n            System.gc();\n            if (iterations++ > 50) {\n                fail(\"Max iterations reached before resource released.\");\n            }\n            testMap.isEmpty();\n            if (keyReference.get() == null && valueReference.get() == null) {\n                break;\n\n            }\n            // create garbage:\n            @SuppressWarnings(\"unused\")\n            final byte[] b = new byte[bytz];\n            bytz *= 2;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "class_name": "ReferenceMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java.ReferenceMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Tests whether purge values setting works"}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        Set<Map.Entry<String, String>> entrySet = singletonMap.entrySet();\n        assertEquals(1, entrySet.size());\n        Map.Entry<String, String> entry = entrySet.iterator().next();\n        assertInstanceOf(TiedMapEntry.class, entry);\n        assertEquals(\"key\", entry.getKey());\n        assertEquals(\"value\", entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "class_name": "SingletonMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest.[void]testEntrySetAfterPut()", "name": "testEntrySetAfterPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetAfterPut()", "original_string": "    @Test\n    public void testEntrySetAfterPut() {\n        singletonMap.put(\"key\", \"newValue\");\n        Set<Map.Entry<String, String>> entrySet = singletonMap.entrySet();\n        assertEquals(1, entrySet.size());\n        Map.Entry<String, String> entry = entrySet.iterator().next();\n        assertInstanceOf(TiedMapEntry.class, entry);\n        assertEquals(\"key\", entry.getKey());\n        assertEquals(\"newValue\", entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "class_name": "SingletonMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest.[void]testEntrySetWithNullKey()", "name": "testEntrySetWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetWithNullKey()", "original_string": "    @Test\n    public void testEntrySetWithNullKey() {\n        SingletonMap<String, String> nullKeyMap = new SingletonMap<>(null, \"value\");\n        Set<Map.Entry<String, String>> entrySet = nullKeyMap.entrySet();\n        assertEquals(1, entrySet.size());\n        Map.Entry<String, String> entry = entrySet.iterator().next();\n        assertInstanceOf(TiedMapEntry.class, entry);\n        assertEquals(null, entry.getKey());\n        assertEquals(\"value\", entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "class_name": "SingletonMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest.[void]testEntrySetWithNullValue()", "name": "testEntrySetWithNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySetWithNullValue()", "original_string": "    @Test\n    public void testEntrySetWithNullValue() {\n        SingletonMap<String, String> nullValueMap = new SingletonMap<>(\"key\", null);\n        Set<Map.Entry<String, String>> entrySet = nullValueMap.entrySet();\n        assertEquals(1, entrySet.size());\n        Map.Entry<String, String> entry = entrySet.iterator().next();\n        assertInstanceOf(TiedMapEntry.class, entry);\n        assertEquals(\"key\", entry.getKey());\n        assertEquals(null, entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "class_name": "SingletonMap_entrySetTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java.SingletonMap_entrySetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java.AbstractSortedMapTest.[void]testComparator()", "name": "testComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparator()", "original_string": "    @Test\n    public void testComparator() {\n//        SortedMap<K, V> sm = makeFullMap();\n        // no tests I can think of\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java", "class_name": "AbstractSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java.AbstractSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java.AbstractSortedMapTest.[void]testFirstKey()", "name": "testFirstKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFirstKey()", "original_string": "    @Test\n    public void testFirstKey() {\n        final SortedMap<K, V> sm = makeFullMap();\n        assertSame(sm.keySet().iterator().next(), sm.firstKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java", "class_name": "AbstractSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java.AbstractSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java.AbstractSortedMapTest.[void]testLastKey()", "name": "testLastKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLastKey()", "original_string": "    @Test\n    public void testLastKey() {\n        final SortedMap<K, V> sm = makeFullMap();\n        K obj = null;\n        for (final K k : sm.keySet()) {\n            obj = k;\n        }\n        assertSame(obj, sm.lastKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java", "class_name": "AbstractSortedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/AbstractSortedMapTest.java.AbstractSortedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java.SingletonMap_putAllTest.[void]testPutAllWithEmptyMap()", "name": "testPutAllWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithEmptyMap()", "original_string": "    @Test\n    public void testPutAllWithEmptyMap() {\n        SingletonMap<String, String> singletonMap = new SingletonMap<>(\"key\", \"value\");\n        Map<String, String> emptyMap = new HashMap<>();\n        singletonMap.putAll(emptyMap);\n        assertEquals(\"value\", singletonMap.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "class_name": "SingletonMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java.SingletonMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java.SingletonMap_putAllTest.[void]testPutAllWithSingleEntryMap()", "name": "testPutAllWithSingleEntryMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithSingleEntryMap()", "original_string": "    @Test\n    public void testPutAllWithSingleEntryMap() {\n        SingletonMap<String, String> singletonMap = new SingletonMap<>(\"key\", \"value\");\n        Map<String, String> singleEntryMap = new HashMap<>();\n        singleEntryMap.put(\"key\", \"newValue\");\n        singletonMap.putAll(singleEntryMap);\n        assertEquals(\"newValue\", singletonMap.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "class_name": "SingletonMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java.SingletonMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java.SingletonMap_putAllTest.[void]testPutAllWithMultipleEntriesMap()", "name": "testPutAllWithMultipleEntriesMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithMultipleEntriesMap()", "original_string": "    @Test\n    public void testPutAllWithMultipleEntriesMap() {\n        SingletonMap<String, String> singletonMap = new SingletonMap<>(\"key\", \"value\");\n        Map<String, String> multipleEntriesMap = new HashMap<>();\n        multipleEntriesMap.put(\"key1\", \"value1\");\n        multipleEntriesMap.put(\"key2\", \"value2\");\n        assertThrows(IllegalArgumentException.class, () -> singletonMap.putAll(multipleEntriesMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "class_name": "SingletonMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java.SingletonMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest.[void]testHeadMap()", "name": "testHeadMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeadMap()", "original_string": "    @Test\n    public void testHeadMap() {\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> headMap = transformedMap.headMap(\"B\");\n\n        assertEquals(1, headMap.size());\n        assertEquals(\"1\", headMap.get(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "class_name": "TransformedSortedMap_headMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest.[void]testHeadMapWithEmptyMap()", "name": "testHeadMapWithEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeadMapWithEmptyMap()", "original_string": "    @Test\n    public void testHeadMapWithEmptyMap() {\n        baseMap.clear();\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> headMap = transformedMap.headMap(\"B\");\n\n        assertEquals(0, headMap.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "class_name": "TransformedSortedMap_headMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest.[void]testHeadMapWithNullKey()", "name": "testHeadMapWithNullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeadMapWithNullKey()", "original_string": "    @Test\n    public void testHeadMapWithNullKey() {\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        assertThrows(NullPointerException.class, () -> {\n            transformedMap.headMap(null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "class_name": "TransformedSortedMap_headMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest.[void]testHeadMapWithNonExistentKey()", "name": "testHeadMapWithNonExistentKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHeadMapWithNonExistentKey()", "original_string": "    @Test\n    public void testHeadMapWithNonExistentKey() {\n        TransformedSortedMap<String, String> transformedMap = new TransformedSortedMap<>(baseMap, keyTransformer, valueTransformer);\n        SortedMap<String, String> headMap = transformedMap.headMap(\"Z\");\n\n        assertEquals(3, headMap.size());\n        assertEquals(\"1\", headMap.get(\"A\"));\n        assertEquals(\"2\", headMap.get(\"B\"));\n        assertEquals(\"3\", headMap.get(\"C\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "class_name": "TransformedSortedMap_headMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java.TransformedSortedMap_headMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java.LazyMap_getTest.[void]testGet_KeyNotInMap()", "name": "testGet_KeyNotInMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_KeyNotInMap()", "original_string": "    @Test\n    public void testGet_KeyNotInMap() {\n        // Given\n        String key = \"newKey\";\n        String value = \"newValue\";\n        when(factory.create()).thenReturn(value);\n\n        // When\n        String result = lazyMap.get(key);\n\n        // Then\n        assertEquals(value, result);\n        verify(factory, times(1)).create();\n        assertEquals(value, map.get(key));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java", "class_name": "LazyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java.LazyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java.LazyMap_getTest.[void]testGet_KeyInMap()", "name": "testGet_KeyInMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_KeyInMap()", "original_string": "    @Test\n    public void testGet_KeyInMap() {\n        // Given\n        String key = \"existingKey\";\n        String value = \"existingValue\";\n        map.put(key, value);\n\n        // When\n        String result = lazyMap.get(key);\n\n        // Then\n        assertEquals(value, result);\n        verify(factory, never()).create();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java", "class_name": "LazyMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java.LazyMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_SameInstance()", "original_string": "    @Test\n    public void testEquals_SameInstance() {\n        assertTrue(map.equals(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_DifferentType()", "name": "testEquals_DifferentType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_DifferentType()", "original_string": "    @Test\n    public void testEquals_DifferentType() {\n        assertFalse(map.equals(\"not a map\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_EmptyMaps()", "name": "testEquals_EmptyMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_EmptyMaps()", "original_string": "    @Test\n    public void testEquals_EmptyMaps() {\n        StaticBucketMap<String, String> otherMap = new StaticBucketMap<>(17);\n        assertTrue(map.equals(otherMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_NonEmptyMapsEqual()", "name": "testEquals_NonEmptyMapsEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NonEmptyMapsEqual()", "original_string": "    @Test\n    public void testEquals_NonEmptyMapsEqual() {\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        StaticBucketMap<String, String> otherMap = new StaticBucketMap<>(17);\n        otherMap.put(\"key1\", \"value1\");\n        otherMap.put(\"key2\", \"value2\");\n\n        assertTrue(map.equals(otherMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_NonEmptyMapsNotEqual()", "name": "testEquals_NonEmptyMapsNotEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NonEmptyMapsNotEqual()", "original_string": "    @Test\n    public void testEquals_NonEmptyMapsNotEqual() {\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        StaticBucketMap<String, String> otherMap = new StaticBucketMap<>(17);\n        otherMap.put(\"key1\", \"value1\");\n        otherMap.put(\"key2\", \"differentValue\");\n\n        assertFalse(map.equals(otherMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_DifferentSizeMaps()", "name": "testEquals_DifferentSizeMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_DifferentSizeMaps()", "original_string": "    @Test\n    public void testEquals_DifferentSizeMaps() {\n        map.put(\"key1\", \"value1\");\n\n        StaticBucketMap<String, String> otherMap = new StaticBucketMap<>(17);\n        otherMap.put(\"key1\", \"value1\");\n        otherMap.put(\"key2\", \"value2\");\n\n        assertFalse(map.equals(otherMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_NullKey()", "name": "testEquals_NullKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NullKey()", "original_string": "    @Test\n    public void testEquals_NullKey() {\n        map.put(null, \"value1\");\n\n        StaticBucketMap<String, String> otherMap = new StaticBucketMap<>(17);\n        otherMap.put(null, \"value1\");\n\n        assertTrue(map.equals(otherMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_NullValue()", "name": "testEquals_NullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NullValue()", "original_string": "    @Test\n    public void testEquals_NullValue() {\n        map.put(\"key1\", null);\n\n        StaticBucketMap<String, String> otherMap = new StaticBucketMap<>(17);\n        otherMap.put(\"key1\", null);\n\n        assertTrue(map.equals(otherMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest.[void]testEquals_NullKeyAndValue()", "name": "testEquals_NullKeyAndValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals_NullKeyAndValue()", "original_string": "    @Test\n    public void testEquals_NullKeyAndValue() {\n        map.put(null, null);\n\n        StaticBucketMap<String, String> otherMap = new StaticBucketMap<>(17);\n        otherMap.put(null, null);\n\n        assertTrue(map.equals(otherMap));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "class_name": "StaticBucketMap_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java.StaticBucketMap_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_tailMapTest.java.PredicatedSortedMap_tailMapTest.[void]testTailMap()", "name": "testTailMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTailMap()", "original_string": "    @Test\n    public void testTailMap() {\n        // Given\n        SortedMap<Integer, String> originalMap = new TreeMap<>();\n        originalMap.put(1, \"One\");\n        originalMap.put(2, \"Two\");\n        originalMap.put(3, \"Three\");\n\n        Predicate<Integer> keyPredicate = key -> key > 0;\n        Predicate<String> valuePredicate = value -> value.length() > 0;\n\n        PredicatedSortedMap<Integer, String> predicatedMap = PredicatedSortedMap.predicatedSortedMap(originalMap, keyPredicate, valuePredicate);\n\n        // When\n        SortedMap<Integer, String> tailMap = predicatedMap.tailMap(2);\n\n        // Then\n        assertEquals(2, tailMap.size());\n        assertTrue(tailMap.containsKey(2));\n        assertTrue(tailMap.containsKey(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_tailMapTest.java", "class_name": "PredicatedSortedMap_tailMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_tailMapTest.java.PredicatedSortedMap_tailMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putTest.java.CompositeMap_putTest.[void]testPutWithMutator()", "name": "testPutWithMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutWithMutator()", "original_string": "    @Test\n    public void testPutWithMutator() {\n        CompositeMap.MapMutator<String, String> mutator = new CompositeMap.MapMutator<String, String>() {\n            @Override\n            public String put(CompositeMap<String, String> map, Map<String, String>[] composited, String key, String value) {\n                for (Map<String, String> m : composited) {\n                    if (m.containsKey(key)) {\n                        return m.put(key, value);\n                    }\n                }\n                return composited[0].put(key, value);\n            }\n\n            @Override\n            public void putAll(CompositeMap<String, String> map, Map<String, String>[] composited, Map<? extends String, ? extends String> mapToAdd) {\n                for (Map.Entry<? extends String, ? extends String> entry : mapToAdd.entrySet()) {\n                    put(map, composited, entry.getKey(), entry.getValue());\n                }\n            }\n\n            @Override\n            public void resolveCollision(CompositeMap<String, String> composite, Map<String, String> existing, Map<String, String> added, Collection<String> intersect) {\n                // No-op for this test\n            }\n        };\n\n        compositeMap.setMutator(mutator);\n\n        // Test adding a new key-value pair\n        assertEquals(null, compositeMap.put(\"5\", \"five\"));\n        assertTrue(compositeMap.containsKey(\"5\"));\n\n        // Test updating an existing key-value pair\n        assertEquals(\"two\", compositeMap.put(\"2\", \"newTwo\"));\n        assertEquals(\"newTwo\", compositeMap.get(\"2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putTest.java", "class_name": "CompositeMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putTest.java.CompositeMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putTest.java.CompositeMap_putTest.[void]testPutWithoutMutator()", "name": "testPutWithoutMutator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutWithoutMutator()", "original_string": "    @Test\n    public void testPutWithoutMutator() {\n        assertThrows(UnsupportedOperationException.class, () -> compositeMap.put(\"5\", \"five\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putTest.java", "class_name": "CompositeMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putTest.java.CompositeMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java.ListOrderedMap_removeTest.[void]testRemoveExistingKey()", "name": "testRemoveExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRemoveExistingKey()", "original_string": "    @Test\n    void testRemoveExistingKey() {\n        // Given\n        assertTrue(map.containsKey(\"key1\"));\n\n        // When\n        String result = map.remove(\"key1\");\n\n        // Then\n        assertEquals(\"value1\", result);\n        assertFalse(map.containsKey(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java", "class_name": "ListOrderedMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java.ListOrderedMap_removeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java.ListOrderedMap_removeTest.[void]testRemoveNonExistingKey()", "name": "testRemoveNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testRemoveNonExistingKey()", "original_string": "    @Test\n    void testRemoveNonExistingKey() {\n        // Given\n        assertFalse(map.containsKey(\"key3\"));\n\n        // When\n        String result = map.remove(\"key3\");\n\n        // Then\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java", "class_name": "ListOrderedMap_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java.ListOrderedMap_removeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_cloneTest.java.SingletonMap_cloneTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testClone()", "original_string": "    @Test\n    void testClone() {\n        SingletonMap<String, String> original = new SingletonMap<>(\"key\", \"value\");\n        SingletonMap<String, String> cloned = original.clone();\n\n        assertNotSame(original, cloned);\n        assertEquals(original.getKey(), cloned.getKey());\n        assertEquals(original.getValue(), cloned.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_cloneTest.java", "class_name": "SingletonMap_cloneTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_cloneTest.java.SingletonMap_cloneTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java.SingletonMap_getTest.[void]testGet_KeyExists()", "name": "testGet_KeyExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_KeyExists()", "original_string": "    @Test\n    public void testGet_KeyExists() {\n        SingletonMap<String, String> map = new SingletonMap<>(\"key\", \"value\");\n        assertEquals(\"value\", map.get(\"key\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java", "class_name": "SingletonMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java.SingletonMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java.SingletonMap_getTest.[void]testGet_KeyDoesNotExist()", "name": "testGet_KeyDoesNotExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet_KeyDoesNotExist()", "original_string": "    @Test\n    public void testGet_KeyDoesNotExist() {\n        SingletonMap<String, String> map = new SingletonMap<>(\"key\", \"value\");\n        assertNull(map.get(\"nonexistentKey\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java", "class_name": "SingletonMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java.SingletonMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest.[void]testGetExistingKey()", "name": "testGetExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetExistingKey()", "original_string": "    @Test\n    public void testGetExistingKey() {\n        map1.put(\"key1\", \"value1\");\n        map2.put(\"key2\", \"value2\");\n        assertEquals(\"value1\", compositeMap.get(\"key1\"));\n        assertEquals(\"value2\", compositeMap.get(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "class_name": "CompositeMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest.[void]testGetNonExistingKey()", "name": "testGetNonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetNonExistingKey()", "original_string": "    @Test\n    public void testGetNonExistingKey() {\n        map1.put(\"key1\", \"value1\");\n        assertNull(compositeMap.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "class_name": "CompositeMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest.[void]testGetAfterAddComposited()", "name": "testGetAfterAddComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterAddComposited()", "original_string": "    @Test\n    public void testGetAfterAddComposited() {\n        map1.put(\"key1\", \"value1\");\n        Map<String, String> newMap = new HashMap<>();\n        newMap.put(\"key3\", \"value3\");\n        compositeMap.addComposited(newMap);\n        assertEquals(\"value3\", compositeMap.get(\"key3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "class_name": "CompositeMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest.[void]testGetAfterPut()", "name": "testGetAfterPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAfterPut()", "original_string": "    @Test\n    public void testGetAfterPut() {\n        map1.put(\"key1\", \"value1\");\n        map1.put(\"key2\", \"value2\");\n        assertEquals(\"value2\", compositeMap.get(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "class_name": "CompositeMap_getTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java.CompositeMap_getTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java.ListOrderedMap_firstKeyTest.[void]testFirstKey_MapNotEmpty()", "name": "testFirstKey_MapNotEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFirstKey_MapNotEmpty()", "original_string": "    @Test\n    void testFirstKey_MapNotEmpty() {\n        ListOrderedMap<String, String> map = new ListOrderedMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        assertEquals(\"key1\", map.firstKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java", "class_name": "ListOrderedMap_firstKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java.ListOrderedMap_firstKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java.ListOrderedMap_firstKeyTest.[void]testFirstKey_MapEmpty()", "name": "testFirstKey_MapEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testFirstKey_MapEmpty()", "original_string": "    @Test\n    void testFirstKey_MapEmpty() {\n        ListOrderedMap<String, String> map = new ListOrderedMap<>();\n        assertThrows(NoSuchElementException.class, map::firstKey);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java", "class_name": "ListOrderedMap_firstKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java.ListOrderedMap_firstKeyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testCOLLECTIONS_474_nonNullValues()", "name": "testCOLLECTIONS_474_nonNullValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCOLLECTIONS_474_nonNullValues()", "original_string": "    @Test\n    public void testCOLLECTIONS_474_nonNullValues() {\n        final Object key1 = new Object();\n        final Object key2 = new Object();\n        final HashMap<Object, Object> hmap = new HashMap<>();\n        hmap.put(key1, \"1\");\n        hmap.put(key2, \"2\");\n        assertEquals(2, hmap.size(), \"Should have two elements\");\n        final ListOrderedMap<Object, Object> listMap = new ListOrderedMap<>();\n        listMap.put(key1, \"3\");\n        listMap.put(key2, \"4\");\n        assertEquals(2, listMap.size(), \"Should have two elements\");\n        listMap.putAll(2, hmap);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testCOLLECTIONS_474_nullValues()", "name": "testCOLLECTIONS_474_nullValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCOLLECTIONS_474_nullValues()", "original_string": "    @Test\n    public void testCOLLECTIONS_474_nullValues() {\n        final Object key1 = new Object();\n        final Object key2 = new Object();\n        final HashMap<Object, Object> hmap = new HashMap<>();\n        hmap.put(key1, null);\n        hmap.put(key2, null);\n        assertEquals(2, hmap.size(), \"Should have two elements\");\n        final ListOrderedMap<Object, Object> listMap = new ListOrderedMap<>();\n        listMap.put(key1, null);\n        listMap.put(key2, null);\n        assertEquals(2, listMap.size(), \"Should have two elements\");\n        listMap.putAll(2, hmap);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testGetByIndex()", "name": "testGetByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetByIndex()", "original_string": "    @Test\n    public void testGetByIndex() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        try {\n            lom.get(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.get(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lom = getMap();\n        try {\n            lom.get(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.get(lom.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        int i = 0;\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext(); i++) {\n            assertSame(it.next(), lom.get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testGetValueByIndex()", "name": "testGetValueByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetValueByIndex()", "original_string": "    @Test\n    public void testGetValueByIndex() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        try {\n            lom.getValue(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.getValue(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lom = getMap();\n        try {\n            lom.getValue(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.getValue(lom.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        int i = 0;\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext(); i++) {\n            it.next();\n            assertSame(it.getValue(), lom.getValue(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexOf()", "original_string": "    @Test\n    public void testIndexOf() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        assertEquals(-1, lom.indexOf(getOtherKeys()));\n\n        resetFull();\n        lom = getMap();\n        final List<K> list = new ArrayList<>();\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext();) {\n            list.add(it.next());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            assertEquals(i, lom.indexOf(list.get(i)));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testPut_intObjectObject()", "name": "testPut_intObjectObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut_intObjectObject()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPut_intObjectObject() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n\n        final ListOrderedMap<K, V> finalLom = lom;\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> finalLom.put(1, (K) \"testInsert1\", (V) \"testInsert1v\"),\n                        \"should not be able to insert at pos 1 in empty Map\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> finalLom.put(-1, (K) \"testInsert-1\", (V) \"testInsert-1v\"),\n                        \"should not be able to insert at pos -1 in empty Map\"));\n\n        // put where key doesn't exist\n        lom.put(0, (K) \"testInsert1\", (V) \"testInsert1v\");\n        assertEquals(\"testInsert1v\", lom.getValue(0));\n\n        lom.put((K) \"testInsertPut\", (V) \"testInsertPutv\");\n        assertEquals(\"testInsert1v\", lom.getValue(0));\n        assertEquals(\"testInsertPutv\", lom.getValue(1));\n\n        lom.put(0, (K) \"testInsert0\", (V) \"testInsert0v\");\n        assertEquals(\"testInsert0v\", lom.getValue(0));\n        assertEquals(\"testInsert1v\", lom.getValue(1));\n        assertEquals(\"testInsertPutv\", lom.getValue(2));\n\n        lom.put(3, (K) \"testInsert3\", (V) \"testInsert3v\");\n        assertEquals(\"testInsert0v\", lom.getValue(0));\n        assertEquals(\"testInsert1v\", lom.getValue(1));\n        assertEquals(\"testInsertPutv\", lom.getValue(2));\n        assertEquals(\"testInsert3v\", lom.getValue(3));\n\n        // put in a full map\n        resetFull();\n        lom = getMap();\n        final ListOrderedMap<K, V> lom2 = new ListOrderedMap<>();\n        lom2.putAll(lom);\n\n        lom2.put(0, (K) \"testInsert0\", (V) \"testInsert0v\");\n        assertEquals(\"testInsert0v\", lom2.getValue(0));\n        for (int i = 0; i < lom.size(); i++) {\n            assertEquals(lom2.getValue(i + 1), lom.getValue(i));\n        }\n\n        // put where key does exist\n        final Integer i1 = Integer.valueOf(1);\n        final Integer i1b = Integer.valueOf(1);\n        final Integer i2 = Integer.valueOf(2);\n        final Integer i3 = Integer.valueOf(3);\n\n        resetEmpty();\n        lom = getMap();\n        lom.put((K) i1, (V) \"1\");\n        lom.put((K) i2, (V) \"2\");\n        lom.put((K) i3, (V) \"3\");\n        lom.put(0, (K) i1, (V) \"One\");\n        assertEquals(3, lom.size());\n        assertEquals(3, lom.map.size());\n        assertEquals(3, lom.keyList().size());\n        assertEquals(\"One\", lom.getValue(0));\n        assertSame(i1, lom.get(0));\n\n        resetEmpty();\n        lom = getMap();\n        lom.put((K) i1, (V) \"1\");\n        lom.put((K) i2, (V) \"2\");\n        lom.put((K) i3, (V) \"3\");\n        lom.put(0, (K) i1b, (V) \"One\");\n        assertEquals(3, lom.size());\n        assertEquals(3, lom.map.size());\n        assertEquals(3, lom.keyList().size());\n        assertEquals(\"One\", lom.getValue(0));\n        assertEquals(\"2\", lom.getValue(1));\n        assertEquals(\"3\", lom.getValue(2));\n        assertSame(i1b, lom.get(0));\n\n        resetEmpty();\n        lom = getMap();\n        lom.put((K) i1, (V) \"1\");\n        lom.put((K) i2, (V) \"2\");\n        lom.put((K) i3, (V) \"3\");\n        lom.put(1, (K) i1b, (V) \"One\");\n        assertEquals(3, lom.size());\n        assertEquals(3, lom.map.size());\n        assertEquals(3, lom.keyList().size());\n        assertEquals(\"One\", lom.getValue(0));\n        assertEquals(\"2\", lom.getValue(1));\n        assertEquals(\"3\", lom.getValue(2));\n\n        resetEmpty();\n        lom = getMap();\n        lom.put((K) i1, (V) \"1\");\n        lom.put((K) i2, (V) \"2\");\n        lom.put((K) i3, (V) \"3\");\n        lom.put(2, (K) i1b, (V) \"One\");\n        assertEquals(3, lom.size());\n        assertEquals(3, lom.map.size());\n        assertEquals(3, lom.keyList().size());\n        assertEquals(\"2\", lom.getValue(0));\n        assertEquals(\"One\", lom.getValue(1));\n        assertEquals(\"3\", lom.getValue(2));\n\n        resetEmpty();\n        lom = getMap();\n        lom.put((K) i1, (V) \"1\");\n        lom.put((K) i2, (V) \"2\");\n        lom.put((K) i3, (V) \"3\");\n        lom.put(3, (K) i1b, (V) \"One\");\n        assertEquals(3, lom.size());\n        assertEquals(3, lom.map.size());\n        assertEquals(3, lom.keyList().size());\n        assertEquals(\"2\", lom.getValue(0));\n        assertEquals(\"3\", lom.getValue(1));\n        assertEquals(\"One\", lom.getValue(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testPutAllWithIndex()", "name": "testPutAllWithIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllWithIndex()", "original_string": "    @Test\n    public void testPutAllWithIndex() {\n        resetEmpty();\n        @SuppressWarnings(\"unchecked\")\n        final ListOrderedMap<String, String> lom = (ListOrderedMap<String, String>) map;\n\n        // Create Initial Data\n        lom.put(\"testInsert0\", \"testInsert0v\");\n        lom.put(\"testInsert1\", \"testInsert1v\");\n        lom.put(\"testInsert2\", \"testInsert2v\");\n        assertEquals(\"testInsert0v\", lom.getValue(0));\n        assertEquals(\"testInsert1v\", lom.getValue(1));\n        assertEquals(\"testInsert2v\", lom.getValue(2));\n\n        // Create New Test Map and Add using putAll(int, Object, Object)\n        final Map<String, String> values = new ListOrderedMap<>();\n        values.put(\"NewInsert0\", \"NewInsert0v\");\n        values.put(\"NewInsert1\", \"NewInsert1v\");\n        lom.putAll(1, values);\n\n        // Perform Asserts\n        assertEquals(\"testInsert0v\", lom.getValue(0));\n        assertEquals(\"NewInsert0v\", lom.getValue(1));\n        assertEquals(\"NewInsert1v\", lom.getValue(2));\n        assertEquals(\"testInsert1v\", lom.getValue(3));\n        assertEquals(\"testInsert2v\", lom.getValue(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testPutAllWithIndexBug441()", "name": "testPutAllWithIndexBug441", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAllWithIndexBug441()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAllWithIndexBug441() {\n        // see COLLECTIONS-441\n        resetEmpty();\n        final ListOrderedMap<K, V> lom = getMap();\n\n        final int size = 5;\n        for (int i = 0; i < size; i++) {\n            lom.put((K) Integer.valueOf(i), (V) Boolean.TRUE);\n        }\n\n        final Map<K, V> map = new TreeMap<>();\n        for (int i = 0; i < size; i++) {\n            map.put((K) Integer.valueOf(i), (V) Boolean.FALSE);\n        }\n\n        lom.putAll(3, map);\n\n        final List<K> orderedList = lom.asList();\n        for (int i = 0; i < size; i++) {\n            assertEquals(Integer.valueOf(i), orderedList.get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testRemoveByIndex()", "name": "testRemoveByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveByIndex()", "original_string": "    @Test\n    public void testRemoveByIndex() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        try {\n            lom.remove(0);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.remove(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lom = getMap();\n        try {\n            lom.remove(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.remove(lom.size());\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        final List<K> list = new ArrayList<>();\n        for (final MapIterator<K, V> it = lom.mapIterator(); it.hasNext();) {\n            list.add(it.next());\n        }\n        for (int i = 0; i < list.size(); i++) {\n            final Object key = list.get(i);\n            final Object value = lom.get(key);\n            assertEquals(value, lom.remove(i));\n            list.remove(i);\n            assertFalse(lom.containsKey(key));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testSetValueByIndex()", "name": "testSetValueByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValueByIndex()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValueByIndex() {\n        resetEmpty();\n        ListOrderedMap<K, V> lom = getMap();\n        try {\n            lom.setValue(0, (V) StringUtils.EMPTY);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.setValue(-1, (V) StringUtils.EMPTY);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        resetFull();\n        lom = getMap();\n        try {\n            lom.setValue(-1, (V) StringUtils.EMPTY);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        try {\n            lom.setValue(lom.size(), (V) StringUtils.EMPTY);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n\n        for (int i = 0; i < lom.size(); i++) {\n            final V value = lom.getValue(i);\n            final Object input = Integer.valueOf(i);\n            assertEquals(value, lom.setValue(i, (V) input));\n            assertEquals(input, lom.getValue(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testValueList_getByIndex()", "name": "testValueList_getByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValueList_getByIndex()", "original_string": "    @Test\n    public void testValueList_getByIndex() {\n        resetFull();\n        final ListOrderedMap<K, V> lom = getMap();\n        for (int i = 0; i < lom.size(); i++) {\n            final V expected = lom.getValue(i);\n            assertEquals(expected, lom.valueList().get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testValueList_removeByIndex()", "name": "testValueList_removeByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValueList_removeByIndex()", "original_string": "    @Test\n    public void testValueList_removeByIndex() {\n        resetFull();\n        final ListOrderedMap<K, V> lom = getMap();\n        while (lom.size() > 1) {\n            final V expected = lom.getValue(1);\n            assertEquals(expected, lom.valueList().remove(1));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest.[void]testValueList_setByIndex()", "name": "testValueList_setByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValueList_setByIndex()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValueList_setByIndex() {\n        resetFull();\n        final ListOrderedMap<K, V> lom = getMap();\n        for (int i = 0; i < lom.size(); i++) {\n            final Object input = Integer.valueOf(i);\n            final V expected = lom.getValue(i);\n            assertEquals(expected, lom.valueList().set(i, (V) input));\n            assertEquals(input, lom.getValue(i));\n            assertEquals(input, lom.valueList().get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java", "class_name": "ListOrderedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java.ListOrderedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest.[void]testIsEmptyWhenAllMapsAreEmpty()", "name": "testIsEmptyWhenAllMapsAreEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWhenAllMapsAreEmpty()", "original_string": "    @Test\n    public void testIsEmptyWhenAllMapsAreEmpty() {\n        assertTrue(compositeMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "class_name": "CompositeMap_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest.[void]testIsEmptyWhenOneMapIsNotEmpty()", "name": "testIsEmptyWhenOneMapIsNotEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWhenOneMapIsNotEmpty()", "original_string": "    @Test\n    public void testIsEmptyWhenOneMapIsNotEmpty() {\n        Map<String, String> map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        compositeMap.addComposited(map1);\n        assertFalse(compositeMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "class_name": "CompositeMap_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest.[void]testIsEmptyAfterClear()", "name": "testIsEmptyAfterClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyAfterClear()", "original_string": "    @Test\n    public void testIsEmptyAfterClear() {\n        Map<String, String> map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        compositeMap.addComposited(map1);\n        compositeMap.clear();\n        assertTrue(compositeMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "class_name": "CompositeMap_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest.[void]testIsEmptyAfterAddingAndRemovingMap()", "name": "testIsEmptyAfterAddingAndRemovingMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyAfterAddingAndRemovingMap()", "original_string": "    @Test\n    public void testIsEmptyAfterAddingAndRemovingMap() {\n        Map<String, String> map1 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        compositeMap.addComposited(map1);\n        compositeMap.removeComposited(map1);\n        assertTrue(compositeMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "class_name": "CompositeMap_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest.[void]testIsEmptyWithMultipleMaps()", "name": "testIsEmptyWithMultipleMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmptyWithMultipleMaps()", "original_string": "    @Test\n    public void testIsEmptyWithMultipleMaps() {\n        Map<String, String> map1 = new HashMap<>();\n        Map<String, String> map2 = new HashMap<>();\n        map1.put(\"key1\", \"value1\");\n        map2.put(\"key2\", \"value2\");\n        compositeMap.addComposited(map1);\n        compositeMap.addComposited(map2);\n        assertFalse(compositeMap.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "class_name": "CompositeMap_isEmptyTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java.CompositeMap_isEmptyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putAllTest.java.PassiveExpiringMap_putAllTest.[void]testPutAll()", "name": "testPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll()", "original_string": "    @Test\n    public void testPutAll() {\n        // Given\n        PassiveExpiringMap<String, String> map = new PassiveExpiringMap<>(new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<>(-1L));\n        Map<String, String> mapToCopy = new HashMap<>();\n        mapToCopy.put(\"key1\", \"value1\");\n        mapToCopy.put(\"key2\", \"value2\");\n\n        // When\n        map.putAll(mapToCopy);\n\n        // Then\n        assertEquals(2, map.size());\n        assertEquals(\"value1\", map.get(\"key1\"));\n        assertEquals(\"value2\", map.get(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putAllTest.java", "class_name": "PassiveExpiringMap_putAllTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putAllTest.java.PassiveExpiringMap_putAllTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest.[void]testFactoryMethods()", "name": "testFactoryMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFactoryMethods()", "original_string": "    @Test\n    public void testFactoryMethods() {\n        final HashMap<K, V> base = new HashMap<>();\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> DefaultedMap.defaultedMap(null, (V) \"DEFAULT_VALUE\"),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> DefaultedMap.defaultedMap((Map<K, V>) null, nullFactory),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> DefaultedMap.defaultedMap(base, (Factory<V>) null),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> DefaultedMap.defaultedMap((Map<K, V>) null, nullTransformer),\n                        \"Expecting NullPointerException\"),\n                () -> assertThrows(NullPointerException.class, () -> DefaultedMap.defaultedMap(base, (Transformer<K, V>) null),\n                        \"Expecting NullPointerException\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "class_name": "DefaultedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest.[void]testMapGet()", "name": "testMapGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet() {\n        final Map<K, V> map = new DefaultedMap<>((V) \"NULL\");\n\n        assertEquals(0, map.size());\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n\n        map.put((K) \"Key\", (V) \"Value\");\n        assertEquals(1, map.size());\n        assertTrue(map.containsKey(\"Key\"));\n        assertEquals(\"Value\", map.get(\"Key\"));\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "class_name": "DefaultedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest.[void]testMapGet2()", "name": "testMapGet2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet2() {\n        final HashMap<K, V> base = new HashMap<>();\n        final Map<K, V> map = DefaultedMap.defaultedMap(base, (V) \"NULL\");\n\n        assertEquals(0, map.size());\n        assertEquals(0, base.size());\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n\n        map.put((K) \"Key\", (V) \"Value\");\n        assertEquals(1, map.size());\n        assertEquals(1, base.size());\n        assertTrue(map.containsKey(\"Key\"));\n        assertEquals(\"Value\", map.get(\"Key\"));\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "class_name": "DefaultedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest.[void]testMapGet3()", "name": "testMapGet3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet3()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet3() {\n        final HashMap<K, V> base = new HashMap<>();\n        final Map<K, V> map = DefaultedMap.defaultedMap(base, ConstantFactory.constantFactory((V) \"NULL\"));\n\n        assertEquals(0, map.size());\n        assertEquals(0, base.size());\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n\n        map.put((K) \"Key\", (V) \"Value\");\n        assertEquals(1, map.size());\n        assertEquals(1, base.size());\n        assertTrue(map.containsKey(\"Key\"));\n        assertEquals(\"Value\", map.get(\"Key\"));\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "class_name": "DefaultedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest.[void]testMapGet4()", "name": "testMapGet4", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet4()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapGet4() {\n        final HashMap<K, V> base = new HashMap<>();\n        final Map<K, V> map = DefaultedMap.defaultedMap(base, (Transformer<K, V>) input -> {\n            if (input instanceof String) {\n                return (V) \"NULL\";\n            }\n            return (V) \"NULL_OBJECT\";\n        });\n\n        assertEquals(0, map.size());\n        assertEquals(0, base.size());\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n        assertEquals(\"NULL_OBJECT\", map.get(Integer.valueOf(0)));\n\n        map.put((K) \"Key\", (V) \"Value\");\n        assertEquals(1, map.size());\n        assertEquals(1, base.size());\n        assertTrue(map.containsKey(\"Key\"));\n        assertEquals(\"Value\", map.get(\"Key\"));\n        assertFalse(map.containsKey(\"NotInMap\"));\n        assertEquals(\"NULL\", map.get(\"NotInMap\"));\n        assertEquals(\"NULL_OBJECT\", map.get(Integer.valueOf(0)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java", "class_name": "DefaultedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java.DefaultedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java.MultiKeyMap_putTest.[void]testPutNewEntry()", "name": "testPutNewEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutNewEntry()", "original_string": "    @Test\n    public void testPutNewEntry() {\n        MultiKeyMap<String, String> map = new MultiKeyMap<>();\n        String key1 = \"key1\";\n        String key2 = \"key2\";\n        String key3 = \"key3\";\n        String key4 = \"key4\";\n        String key5 = \"key5\";\n        String value = \"value\";\n\n        String result = map.put(key1, key2, key3, key4, key5, value);\n\n        assertNull(result);\n        assertEquals(value, map.get(key1, key2, key3, key4, key5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java", "class_name": "MultiKeyMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java.MultiKeyMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java.MultiKeyMap_putTest.[void]testPutExistingEntry()", "name": "testPutExistingEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutExistingEntry()", "original_string": "    @Test\n    public void testPutExistingEntry() {\n        MultiKeyMap<String, String> map = new MultiKeyMap<>();\n        String key1 = \"key1\";\n        String key2 = \"key2\";\n        String key3 = \"key3\";\n        String key4 = \"key4\";\n        String key5 = \"key5\";\n        String value1 = \"value1\";\n        String value2 = \"value2\";\n\n        map.put(key1, key2, key3, key4, key5, value1);\n        String result = map.put(key1, key2, key3, key4, key5, value2);\n\n        assertEquals(value1, result);\n        assertEquals(value2, map.get(key1, key2, key3, key4, key5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java", "class_name": "MultiKeyMap_putTest", "class_uri": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java.MultiKeyMap_putTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest.[void]testExecution()", "name": "testExecution", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecution()", "original_string": "    @Test\n    public void testExecution() {\n        final ExecutionVisitor<Character> ev = new ExecutionVisitor<>();\n        for (int i = 0; i < before.size(); ++i) {\n            ev.setList(sequence(before.get(i)));\n            new SequencesComparator<>(sequence(before.get(i)),\n                    sequence(after.get(i))).getScript().visit(ev);\n            assertEquals(after.get(i), ev.getString());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java", "class_name": "SequencesComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest.[void]testLength()", "name": "testLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLength()", "original_string": "    @Test\n    public void testLength() {\n        for (int i = 0; i < before.size(); ++i) {\n            final SequencesComparator<Character> comparator =\n                    new SequencesComparator<>(sequence(before.get(i)),\n                            sequence(after.get(i)));\n            assertEquals(length[i], comparator.getScript().getModifications());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java", "class_name": "SequencesComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest.[void]testMinimal()", "name": "testMinimal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinimal()", "original_string": "    @Test\n    public void testMinimal() {\n        final String[] shadokAlph = {\n            \"GA\",\n            \"BU\",\n            \"ZO\",\n            \"MEU\"\n        };\n        final List<String> sentenceBefore = new ArrayList<>();\n        final List<String> sentenceAfter  = new ArrayList<>();\n        sentenceBefore.add(shadokAlph[0]);\n        sentenceBefore.add(shadokAlph[2]);\n        sentenceBefore.add(shadokAlph[3]);\n        sentenceBefore.add(shadokAlph[1]);\n        sentenceBefore.add(shadokAlph[0]);\n        sentenceBefore.add(shadokAlph[0]);\n        sentenceBefore.add(shadokAlph[2]);\n        sentenceBefore.add(shadokAlph[1]);\n        sentenceBefore.add(shadokAlph[3]);\n        sentenceBefore.add(shadokAlph[0]);\n        sentenceBefore.add(shadokAlph[2]);\n        sentenceBefore.add(shadokAlph[1]);\n        sentenceBefore.add(shadokAlph[3]);\n        sentenceBefore.add(shadokAlph[2]);\n        sentenceBefore.add(shadokAlph[2]);\n        sentenceBefore.add(shadokAlph[0]);\n        sentenceBefore.add(shadokAlph[1]);\n        sentenceBefore.add(shadokAlph[3]);\n        sentenceBefore.add(shadokAlph[0]);\n        sentenceBefore.add(shadokAlph[3]);\n\n        final Random random = new Random(4564634237452342L);\n\n        for (int nbCom = 0; nbCom <= 40; nbCom += 5) {\n            sentenceAfter.clear();\n            sentenceAfter.addAll(sentenceBefore);\n            for (int i = 0; i < nbCom; i++) {\n                if (random.nextInt(2) == 0) {\n                    sentenceAfter.add(random.nextInt(sentenceAfter.size() + 1), shadokAlph[random.nextInt(4)]);\n                } else {\n                    sentenceAfter.remove(random.nextInt(sentenceAfter.size()));\n                }\n            }\n\n            final SequencesComparator<String> comparator = new SequencesComparator<>(sentenceBefore, sentenceAfter);\n            assertTrue(comparator.getScript().getModifications() <= nbCom);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java", "class_name": "SequencesComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest.[void]testShadok()", "name": "testShadok", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testShadok()", "original_string": "    @Test\n    public void testShadok() {\n        final int lgMax = 5;\n        final String[] shadokAlph = {\n            \"GA\",\n            \"BU\",\n            \"ZO\",\n            \"MEU\"\n        };\n        List<List<String>> shadokSentences = new ArrayList<>();\n        for (int lg = 0; lg < lgMax; ++lg) {\n            final List<List<String>> newTab = new ArrayList<>();\n            newTab.add(new ArrayList<>());\n            for (final String element : shadokAlph) {\n                for (final List<String> sentence : shadokSentences) {\n                    final List<String> newSentence = new ArrayList<>(sentence);\n                    newSentence.add(element);\n                    newTab.add(newSentence);\n                }\n            }\n            shadokSentences = newTab;\n        }\n\n        final ExecutionVisitor<String> ev = new ExecutionVisitor<>();\n\n        for (final List<String> element : shadokSentences) {\n            for (final List<String> shadokSentence : shadokSentences) {\n                ev.setList(element);\n                new SequencesComparator<>(element,\n                        shadokSentence).getScript().visit(ev);\n\n                final StringBuilder concat = new StringBuilder();\n                for (final String s : shadokSentence) {\n                    concat.append(s);\n                }\n                assertEquals(concat.toString(), ev.getString());\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java", "class_name": "SequencesComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java.SequencesComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java.SequencesComparator_getScriptTest.[void]testGetScript()", "name": "testGetScript", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetScript()", "original_string": "    @Test\n    public void testGetScript() {\n        List<String> sequence1 = Arrays.asList(\"A\", \"B\", \"C\");\n        List<String> sequence2 = Arrays.asList(\"A\", \"C\", \"D\");\n\n        SequencesComparator<String> comparator = new SequencesComparator<>(sequence1, sequence2);\n        EditScript<String> script = comparator.getScript();\n\n        assertEquals(2, script.getModifications());\n        assertEquals(2, script.getLCSLength()); // Corrected assertion\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java", "class_name": "SequencesComparator_getScriptTest", "class_uri": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java.SequencesComparator_getScriptTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractClosureTest.java.AbstractClosureTest.[void]testClosureSanityTests()", "name": "testClosureSanityTests", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClosureSanityTests()", "original_string": "    @Test\n    public void testClosureSanityTests() throws Exception {\n        final Closure<?> closure = generateClosure();\n        assertNotNull(closure);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractClosureTest.java", "class_name": "AbstractClosureTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractClosureTest.java.AbstractClosureTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractPredicateTest.java.AbstractPredicateTest.[void]testPredicateSanityTests()", "name": "testPredicateSanityTests", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicateSanityTests()", "original_string": "    @Test\n    public void testPredicateSanityTests() throws Exception {\n        final Predicate<?> predicate = generatePredicate();\n        assertNotNull(predicate);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractPredicateTest.java", "class_name": "AbstractPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractPredicateTest.java.AbstractPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractAnyAllOnePredicateTest.java.AbstractAnyAllOnePredicateTest.[void]singleElementArrayToGetInstance()", "name": "singleElementArrayToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public final void singleElementArrayToGetInstance()", "original_string": "    @Override\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public final void singleElementArrayToGetInstance() {\n        final Predicate<T> predicate = createMockPredicate(null);\n        final Predicate<T> allPredicate = getPredicateInstance(predicate);\n        assertSame(predicate, allPredicate, \"expected argument to be returned by getInstance()\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractAnyAllOnePredicateTest.java", "class_name": "AbstractAnyAllOnePredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractAnyAllOnePredicateTest.java.AbstractAnyAllOnePredicateTest", "attributes": {"modifiers": "@Override\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public final", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether {@code getInstance} with a one element array returns the first element in the array.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractAnyAllOnePredicateTest.java.AbstractAnyAllOnePredicateTest.[void]singletonCollectionToGetInstance()", "name": "singletonCollectionToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public final void singletonCollectionToGetInstance()", "original_string": "    @Override\n    @Test\n    public final void singletonCollectionToGetInstance() {\n        final Predicate<T> predicate = createMockPredicate(null);\n        final Predicate<T> allPredicate = getPredicateInstance(\n                Collections.<Predicate<T>>singleton(predicate));\n        assertSame(predicate, allPredicate, \"expected singleton collection member to be returned by getInstance()\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractAnyAllOnePredicateTest.java", "class_name": "AbstractAnyAllOnePredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractAnyAllOnePredicateTest.java.AbstractAnyAllOnePredicateTest", "attributes": {"modifiers": "@Override\n    @Test\n    public final", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that passing a singleton collection to {@code getInstance} returns the single element in the\ncollection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java.AllPredicate_allPredicateTest.[void]testAllPredicate_EmptyCollection()", "name": "testAllPredicate_EmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicate_EmptyCollection()", "original_string": "    @Test\n    public void testAllPredicate_EmptyCollection() {\n        Collection<Predicate<Object>> predicates = Arrays.asList();\n        Predicate<Object> result = AllPredicate.allPredicate(predicates);\n        assertTrue(result.test(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "class_name": "AllPredicate_allPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java.AllPredicate_allPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java.AllPredicate_allPredicateTest.[void]testAllPredicate_SinglePredicate()", "name": "testAllPredicate_SinglePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicate_SinglePredicate()", "original_string": "    @Test\n    public void testAllPredicate_SinglePredicate() {\n        Predicate<Object> mockPredicate = mock(Predicate.class);\n        Object testObject = new Object();\n        when(mockPredicate.test(testObject)).thenReturn(true);\n\n        Collection<Predicate<Object>> predicates = Arrays.asList(mockPredicate);\n        Predicate<Object> result = AllPredicate.allPredicate(predicates);\n        assertTrue(result.test(testObject));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "class_name": "AllPredicate_allPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java.AllPredicate_allPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java.AllPredicate_allPredicateTest.[void]testAllPredicate_MultiplePredicates()", "name": "testAllPredicate_MultiplePredicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicate_MultiplePredicates()", "original_string": "    @Test\n    public void testAllPredicate_MultiplePredicates() {\n        Predicate<Object> mockPredicate1 = mock(Predicate.class);\n        Predicate<Object> mockPredicate2 = mock(Predicate.class);\n        Object testObject = new Object();\n        when(mockPredicate1.test(testObject)).thenReturn(true);\n        when(mockPredicate2.test(testObject)).thenReturn(true);\n\n        Collection<Predicate<Object>> predicates = Arrays.asList(mockPredicate1, mockPredicate2);\n        Predicate<Object> result = AllPredicate.allPredicate(predicates);\n        assertTrue(result.test(testObject));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "class_name": "AllPredicate_allPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java.AllPredicate_allPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java.AllPredicate_testTest.[void]testAllPredicatesTrue()", "name": "testAllPredicatesTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPredicatesTrue()", "original_string": "    @Test\n    public void testAllPredicatesTrue() {\n        Predicate<String> predicate1 = mock(Predicate.class);\n        Predicate<String> predicate2 = mock(Predicate.class);\n\n        when(predicate1.test(\"testObject\")).thenReturn(true);\n        when(predicate2.test(\"testObject\")).thenReturn(true);\n\n        AllPredicate<String> allPredicate = new AllPredicate<>(predicate1, predicate2);\n        assertTrue(allPredicate.test(\"testObject\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java", "class_name": "AllPredicate_testTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java.AllPredicate_testTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java.AllPredicate_testTest.[void]testOnePredicateFalse()", "name": "testOnePredicateFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnePredicateFalse()", "original_string": "    @Test\n    public void testOnePredicateFalse() {\n        Predicate<String> predicate1 = mock(Predicate.class);\n        Predicate<String> predicate2 = mock(Predicate.class);\n\n        when(predicate1.test(\"testObject\")).thenReturn(true);\n        when(predicate2.test(\"testObject\")).thenReturn(false);\n\n        AllPredicate<String> allPredicate = new AllPredicate<>(predicate1, predicate2);\n        assertFalse(allPredicate.test(\"testObject\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java", "class_name": "AllPredicate_testTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java.AllPredicate_testTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java.ComparatorPredicate_comparatorPredicateTest.[void]testComparatorPredicate_WithNonNullComparatorAndCriterion()", "name": "testComparatorPredicate_WithNonNullComparatorAndCriterion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparatorPredicate_WithNonNullComparatorAndCriterion()", "original_string": "    @Test\n    public void testComparatorPredicate_WithNonNullComparatorAndCriterion() {\n        // Given\n        Integer object = 10;\n        Comparator<Integer> comparator = Integer::compareTo;\n        ComparatorPredicate.Criterion criterion = ComparatorPredicate.Criterion.EQUAL;\n\n        // When\n        Predicate<Integer> predicate = ComparatorPredicate.comparatorPredicate(object, comparator, criterion);\n\n        // Then\n        assertTrue(predicate.test(10));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "class_name": "ComparatorPredicate_comparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java.ComparatorPredicate_comparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java.ComparatorPredicate_comparatorPredicateTest.[void]testComparatorPredicate_WithNullComparator()", "name": "testComparatorPredicate_WithNullComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparatorPredicate_WithNullComparator()", "original_string": "    @Test\n    public void testComparatorPredicate_WithNullComparator() {\n        // Given\n        Integer object = 10;\n        Comparator<Integer> comparator = null;\n        ComparatorPredicate.Criterion criterion = ComparatorPredicate.Criterion.EQUAL;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            ComparatorPredicate.comparatorPredicate(object, comparator, criterion);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "class_name": "ComparatorPredicate_comparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java.ComparatorPredicate_comparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java.ComparatorPredicate_comparatorPredicateTest.[void]testComparatorPredicate_WithNullCriterion()", "name": "testComparatorPredicate_WithNullCriterion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparatorPredicate_WithNullCriterion()", "original_string": "    @Test\n    public void testComparatorPredicate_WithNullCriterion() {\n        // Given\n        Integer object = 10;\n        Comparator<Integer> comparator = Integer::compareTo;\n        ComparatorPredicate.Criterion criterion = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            ComparatorPredicate.comparatorPredicate(object, comparator, criterion);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "class_name": "ComparatorPredicate_comparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java.ComparatorPredicate_comparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest.[void]nullArrayToGetInstance()", "name": "nullArrayToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void nullArrayToGetInstance()", "original_string": "    @Test\n    public final void nullArrayToGetInstance() {\n        assertThrows(NullPointerException.class, () -> getPredicateInstance((Predicate<T>[]) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java", "class_name": "AbstractCompositePredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@code getInstance} with a null predicate array.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest.[void]nullCollectionToGetInstance()", "name": "nullCollectionToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void nullCollectionToGetInstance()", "original_string": "    @Test\n    public final void nullCollectionToGetInstance() {\n        assertThrows(NullPointerException.class, () -> getPredicateInstance((Collection<Predicate<T>>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java", "class_name": "AbstractCompositePredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@code getInstance} with a null predicate collection\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest.[void]nullElementInArrayToGetInstance()", "name": "nullElementInArrayToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({\"unchecked\"})\n    @Test\n    public final void nullElementInArrayToGetInstance()", "original_string": "    @SuppressWarnings({\"unchecked\"})\n    @Test\n    public final void nullElementInArrayToGetInstance() {\n        assertThrows(NullPointerException.class, () -> getPredicateInstance(new Predicate[] { null }));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java", "class_name": "AbstractCompositePredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest", "attributes": {"modifiers": "@SuppressWarnings({\"unchecked\"})\n    @Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({\"unchecked\"})", "public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@code getInstance} with a single null element in the predicate array.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest.[void]nullElementsInArrayToGetInstance()", "name": "nullElementsInArrayToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({\"unchecked\"})\n    @Test\n    public final void nullElementsInArrayToGetInstance()", "original_string": "    @SuppressWarnings({\"unchecked\"})\n    @Test\n    public final void nullElementsInArrayToGetInstance() {\n        assertThrows(NullPointerException.class, () -> getPredicateInstance(new Predicate[] { null, null }));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java", "class_name": "AbstractCompositePredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest", "attributes": {"modifiers": "@SuppressWarnings({\"unchecked\"})\n    @Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({\"unchecked\"})", "public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@code getInstance} with two null elements in the predicate array.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest.[void]nullElementsInCollectionToGetInstance()", "name": "nullElementsInCollectionToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void nullElementsInCollectionToGetInstance()", "original_string": "    @Test\n    public final void nullElementsInCollectionToGetInstance() {\n        final Collection<Predicate<T>> coll = new ArrayList<>();\n        coll.add(null);\n        coll.add(null);\n        assertThrows(NullPointerException.class, () -> getPredicateInstance(coll));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java", "class_name": "AbstractCompositePredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AbstractCompositePredicateTest.java.AbstractCompositePredicateTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@code getInstance} with a predicate collection that contains null elements\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java.EqualPredicate_equalPredicateTest.[void]testEqualPredicateWithNonNullObject()", "name": "testEqualPredicateWithNonNullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEqualPredicateWithNonNullObject()", "original_string": "    @Test\n    void testEqualPredicateWithNonNullObject() {\n        String input = \"test\";\n        Predicate<String> predicate = EqualPredicate.equalPredicate(input);\n        assertNotNull(predicate);\n        assertTrue(predicate.test(input));\n        assertFalse(predicate.test(\"other\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java", "class_name": "EqualPredicate_equalPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java.EqualPredicate_equalPredicateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java.EqualPredicate_equalPredicateTest.[void]testEqualPredicateWithNullObject()", "name": "testEqualPredicateWithNullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEqualPredicateWithNullObject()", "original_string": "    @Test\n    void testEqualPredicateWithNullObject() {\n        Predicate<String> predicate = EqualPredicate.equalPredicate(null);\n        assertNotNull(predicate);\n        assertTrue(predicate.test(null));\n        assertFalse(predicate.test(\"nonNull\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java", "class_name": "EqualPredicate_equalPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java.EqualPredicate_equalPredicateTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java.NullPredicateTest.[void]testEnsurePredicateCanBeTypedWithoutWarning()", "name": "testEnsurePredicateCanBeTypedWithoutWarning", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnsurePredicateCanBeTypedWithoutWarning()", "original_string": "    @Test\n    public void testEnsurePredicateCanBeTypedWithoutWarning() throws Exception {\n        final Predicate<String> predicate = NullPredicate.nullPredicate();\n        assertPredicateFalse(predicate, cString);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java", "class_name": "NullPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java.NullPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java.NullPredicateTest.[void]testNullPredicate()", "name": "testNullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullPredicate()", "original_string": "    @Test\n    public void testNullPredicate() {\n        assertSame(NullPredicate.nullPredicate(), NullPredicate.nullPredicate());\n        assertPredicateTrue(nullPredicate(), null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java", "class_name": "NullPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/NullPredicateTest.java.NullPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java.EqualPredicate_testTest.[void]testWithEquator()", "name": "testWithEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithEquator()", "original_string": "    @Test\n    public void testWithEquator() {\n        // Given\n        String value = \"test\";\n        Equator<String> equator = mock(Equator.class);\n        when(equator.equate(value, value)).thenReturn(true);\n        Predicate<String> predicate = EqualPredicate.equalPredicate(value, equator);\n\n        // When\n        boolean result = predicate.test(value);\n\n        // Then\n        assertTrue(result);\n        verify(equator).equate(value, value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java", "class_name": "EqualPredicate_testTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java.EqualPredicate_testTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java.EqualPredicate_testTest.[void]testWithoutEquator()", "name": "testWithoutEquator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithoutEquator()", "original_string": "    @Test\n    public void testWithoutEquator() {\n        // Given\n        String value = \"test\";\n        Predicate<String> predicate = EqualPredicate.equalPredicate(value);\n\n        // When\n        boolean result = predicate.test(value);\n\n        // Then\n        assertTrue(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java", "class_name": "EqualPredicate_testTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java.EqualPredicate_testTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java.EqualPredicateTest.[void]testNullArgumentEqualsNullPredicate()", "name": "testNullArgumentEqualsNullPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullArgumentEqualsNullPredicate()", "original_string": "    @Test\n    public void testNullArgumentEqualsNullPredicate() throws Exception {\n        assertSame(nullPredicate(), equalPredicate(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java", "class_name": "EqualPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java.EqualPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java.EqualPredicateTest.[void]testObjectFactoryUsesEqualsForTest()", "name": "testObjectFactoryUsesEqualsForTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testObjectFactoryUsesEqualsForTest()", "original_string": "    @Test\n    public void testObjectFactoryUsesEqualsForTest() throws Exception {\n        final Predicate<EqualsTestObject> predicate = equalPredicate(FALSE_OBJECT);\n        assertPredicateFalse(predicate, FALSE_OBJECT);\n        assertPredicateTrue(equalPredicate(TRUE_OBJECT), TRUE_OBJECT);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java", "class_name": "EqualPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java.EqualPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java.EqualPredicateTest.[void]testPredicateTypeCanBeSuperClassOfObject()", "name": "testPredicateTypeCanBeSuperClassOfObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"boxing\")\n    @Test\n    public void testPredicateTypeCanBeSuperClassOfObject()", "original_string": "    @SuppressWarnings(\"boxing\")\n    @Test\n    public void testPredicateTypeCanBeSuperClassOfObject() throws Exception {\n        final Predicate<Number> predicate = equalPredicate((Number) 4);\n        assertPredicateTrue(predicate, 4);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java", "class_name": "EqualPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/EqualPredicateTest.java.EqualPredicateTest", "attributes": {"modifiers": "@SuppressWarnings(\"boxing\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest.[void]testAllTrue()", "name": "testAllTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllTrue()", "original_string": "    @Test\n    public void testAllTrue() {\n        assertTrue(getPredicateInstance(true, true).evaluate(getTestValue()),\n                \"multiple true predicates evaluated to false\");\n        assertTrue(getPredicateInstance(true, true, true).evaluate(getTestValue()),\n                \"multiple true predicates evaluated to false\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "class_name": "AllPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether multiple true predicates evaluates to true.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest.[void]testEmptyArrayToGetInstance()", "name": "testEmptyArrayToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({\"unchecked\"})\n    @Test\n    public void testEmptyArrayToGetInstance()", "original_string": "    @SuppressWarnings({\"unchecked\"})\n    @Test\n    public void testEmptyArrayToGetInstance() {\n        assertTrue(getPredicateInstance(new Predicate[] {}).evaluate(null), \"empty array not true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "class_name": "AllPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest", "attributes": {"modifiers": "@SuppressWarnings({\"unchecked\"})\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({\"unchecked\"})", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerifies that providing an empty predicate array evaluates to true.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest.[void]testEmptyCollectionToGetInstance()", "name": "testEmptyCollectionToGetInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyCollectionToGetInstance()", "original_string": "    @Test\n    public void testEmptyCollectionToGetInstance() {\n        final Predicate<Integer> allPredicate = getPredicateInstance(Collections.<Predicate<Integer>>emptyList());\n        assertTrue(allPredicate.evaluate(getTestValue()), \"empty collection not true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "class_name": "AllPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerifies that providing an empty predicate collection evaluates to true.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest.[void]testOneFalsePredicate()", "name": "testOneFalsePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testOneFalsePredicate()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testOneFalsePredicate() {\n        // use the constructor directly, as getInstance() returns the original predicate when passed\n        // an array of size one.\n        final Predicate<Integer> predicate = createMockPredicate(false);\n        assertFalse(allPredicate(predicate).test(getTestValue()), \"single false predicate evaluated to true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "class_name": "AllPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether a single false predicate evaluates to true.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest.[void]testOneTruePredicate()", "name": "testOneTruePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testOneTruePredicate()", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testOneTruePredicate() {\n        // use the constructor directly, as getInstance() returns the original predicate when passed\n        // an array of size one.\n        final Predicate<Integer> predicate = createMockPredicate(true);\n        assertTrue(allPredicate(predicate).test(getTestValue()), \"single true predicate evaluated to false\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "class_name": "AllPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether a single true predicate evaluates to true.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest.[void]testTrueAndFalseCombined()", "name": "testTrueAndFalseCombined", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTrueAndFalseCombined()", "original_string": "    @Test\n    public void testTrueAndFalseCombined() {\n        assertFalse(getPredicateInstance(false, null).evaluate(getTestValue()),\n                \"false predicate evaluated to true\");\n        assertFalse(getPredicateInstance(false, null, null).evaluate(getTestValue()),\n                \"false predicate evaluated to true\");\n        assertFalse(getPredicateInstance(true, false, null).evaluate(getTestValue()),\n                \"false predicate evaluated to true\");\n        assertFalse(getPredicateInstance(true, true, false).evaluate(getTestValue()),\n                \"false predicate evaluated to true\");\n        assertFalse(getPredicateInstance(true, true, false, null).evaluate(getTestValue()),\n                \"false predicate evaluated to true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java", "class_name": "AllPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/AllPredicateTest.java.AllPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether combining some true and one false evaluates to false.  Also verifies that only the first\nfalse predicate is actually evaluated\n"}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest.[void]testCompareEquals()", "name": "testCompareEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareEquals()", "original_string": "    @Test\n    public void testCompareEquals() {\n        final Integer value = Integer.valueOf(10);\n        final Predicate<Integer> p = comparatorPredicate(value, new TestComparator<>());\n        assertPredicateFalse(p, Integer.valueOf(value.intValue() - 1));\n        assertPredicateTrue(p, Integer.valueOf(value.intValue()));\n        assertPredicateFalse(p, Integer.valueOf(value.intValue() + 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "class_name": "ComparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest.[void]testCompareGreater()", "name": "testCompareGreater", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareGreater()", "original_string": "    @Test\n    public void testCompareGreater() {\n        final Integer value = Integer.valueOf(10);\n        final Predicate<Integer> p = comparatorPredicate(value, new TestComparator<>(), Criterion.GREATER);\n        assertPredicateTrue(p, Integer.valueOf(value.intValue() - 1));\n        assertPredicateFalse(p, Integer.valueOf(value.intValue()));\n        assertPredicateFalse(p, Integer.valueOf(value.intValue() + 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "class_name": "ComparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest.[void]testCompareGreaterOrEqual()", "name": "testCompareGreaterOrEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareGreaterOrEqual()", "original_string": "    @Test\n    public void testCompareGreaterOrEqual() {\n        final Integer value = Integer.valueOf(10);\n        final Predicate<Integer> p = comparatorPredicate(value, new TestComparator<>(), Criterion.GREATER_OR_EQUAL);\n        assertPredicateTrue(p, Integer.valueOf(value.intValue() - 1));\n        assertPredicateTrue(p, Integer.valueOf(value.intValue()));\n        assertPredicateFalse(p, Integer.valueOf(value.intValue() + 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "class_name": "ComparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest.[void]testCompareLess()", "name": "testCompareLess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareLess()", "original_string": "    @Test\n    public void testCompareLess() {\n        final Integer value = Integer.valueOf(10);\n        final Predicate<Integer> p = comparatorPredicate(value, new TestComparator<>(), Criterion.LESS);\n        assertPredicateFalse(p, Integer.valueOf(value.intValue() - 1));\n        assertPredicateFalse(p, Integer.valueOf(value.intValue()));\n        assertPredicateTrue(p, Integer.valueOf(value.intValue() + 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "class_name": "ComparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest.[void]testCompareLessOrEqual()", "name": "testCompareLessOrEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareLessOrEqual()", "original_string": "    @Test\n    public void testCompareLessOrEqual() {\n        final Integer value = Integer.valueOf(10);\n        final Predicate<Integer> p = comparatorPredicate(value, new TestComparator<>(), Criterion.LESS_OR_EQUAL);\n        assertPredicateFalse(p, Integer.valueOf(value.intValue() - 1));\n        assertPredicateTrue(p, Integer.valueOf(value.intValue()));\n        assertPredicateTrue(p, Integer.valueOf(value.intValue() + 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java", "class_name": "ComparatorPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java.ComparatorPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java.ComparatorChain_setComparatorTest.[void]testSetComparator_ForwardSort()", "name": "testSetComparator_ForwardSort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSetComparator_ForwardSort()", "original_string": "    @Test\n    void testSetComparator_ForwardSort() {\n        // Given\n        ComparatorChain<String> chain = new ComparatorChain<>();\n        Comparator<String> comparator = Comparator.naturalOrder();\n        chain.addComparator(comparator);\n\n        // When\n        chain.setComparator(0, comparator, false);\n\n        // Then\n        assertFalse(chain.isLocked());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java", "class_name": "ComparatorChain_setComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java.ComparatorChain_setComparatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java.ComparatorChain_setComparatorTest.[void]testSetComparator_ReverseSort()", "name": "testSetComparator_ReverseSort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSetComparator_ReverseSort()", "original_string": "    @Test\n    void testSetComparator_ReverseSort() {\n        // Given\n        ComparatorChain<String> chain = new ComparatorChain<>();\n        Comparator<String> comparator = Comparator.naturalOrder();\n        chain.addComparator(comparator);\n\n        // When\n        chain.setComparator(0, comparator, true);\n\n        // Then\n        assertFalse(chain.isLocked());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java", "class_name": "ComparatorChain_setComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java.ComparatorChain_setComparatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java.ComparatorChain_setComparatorTest.[void]testSetComparator_LockedChain()", "name": "testSetComparator_LockedChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSetComparator_LockedChain()", "original_string": "    @Test\n    void testSetComparator_LockedChain() {\n        // Given\n        ComparatorChain<String> chain = new ComparatorChain<>();\n        Comparator<String> comparator = Comparator.naturalOrder();\n        chain.addComparator(comparator);\n        chain.compare(\"a\", \"b\"); // This will lock the chain\n\n        // When & Then\n        assertThrows(UnsupportedOperationException.class, () -> {\n            chain.setComparator(0, comparator, false);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java", "class_name": "ComparatorChain_setComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java.ComparatorChain_setComparatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java.TransformingComparatorTest.[void]testEquals()", "name": "testEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals()", "original_string": "    @Test\n    public void testEquals() {\n        final Transformer<String, String> t1 = TransformerUtils.nopTransformer();\n        final TransformingComparator<String, String> comp1 = new TransformingComparator<>(t1);\n        final TransformingComparator<String, String> comp2 = new TransformingComparator<>(t1, comp1);\n\n        // Checks the contract: equals-hashCode on comp1 and comp2\n        assertTrue(comp1.equals(comp2) ? comp1.hashCode() == comp2.hashCode() : true,\n                \"Contract failed: equals-hashCode\");\n\n        // Checks the contract: equals-hashCode on comp1 and comp2\n        assertTrue(comp2.equals(comp1) ? comp2.hashCode() == comp1.hashCode() : true,\n                \"Contract failed: equals-hashCode\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java", "class_name": "TransformingComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparatorTest.java.TransformingComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java.FixedOrderComparator_addTest.[void]testAddNewObject()", "name": "testAddNewObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddNewObject()", "original_string": "    @Test\n    void testAddNewObject() {\n        assertFalse(comparator.isLocked());\n        assertTrue(comparator.add(\"newObject\"));\n        assertFalse(comparator.add(\"newObject\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java", "class_name": "FixedOrderComparator_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java.FixedOrderComparator_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java.FixedOrderComparator_addTest.[void]testAddWhenLocked()", "name": "testAddWhenLocked", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddWhenLocked()", "original_string": "    @Test\n    void testAddWhenLocked() {\n        comparator.add(\"obj1\"); // Add the object to avoid IllegalArgumentException\n        comparator.add(\"obj2\"); // Add the object to avoid IllegalArgumentException\n        comparator.compare(\"obj1\", \"obj2\"); // Lock the comparator\n        assertThrows(UnsupportedOperationException.class, () -> comparator.add(\"newObject\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java", "class_name": "FixedOrderComparator_addTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java.FixedOrderComparator_addTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsSameInstance()", "name": "testEqualsSameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsSameInstance()", "original_string": "    @Test\n    public void testEqualsSameInstance() {\n        assertTrue(comparator.equals(comparator));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsNull()", "name": "testEqualsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsNull()", "original_string": "    @Test\n    public void testEqualsNull() {\n        assertFalse(comparator.equals(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsDifferentClass()", "name": "testEqualsDifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentClass()", "original_string": "    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(comparator.equals(new Object()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsDifferentCounter()", "name": "testEqualsDifferentCounter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentCounter()", "original_string": "    @Test\n    public void testEqualsDifferentCounter() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>();\n        comparator.add(\"A\");\n        assertFalse(comparator.equals(other));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsDifferentIsLocked()", "name": "testEqualsDifferentIsLocked", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentIsLocked()", "original_string": "    @Test\n    public void testEqualsDifferentIsLocked() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>();\n        comparator.add(\"A\");\n        comparator.compare(\"A\", \"A\");\n        assertFalse(comparator.equals(other));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsDifferentMap()", "name": "testEqualsDifferentMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentMap()", "original_string": "    @Test\n    public void testEqualsDifferentMap() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>();\n        comparator.add(\"A\");\n        other.add(\"B\");\n        assertFalse(comparator.equals(other));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsDifferentUnknownObjectBehavior()", "name": "testEqualsDifferentUnknownObjectBehavior", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentUnknownObjectBehavior()", "original_string": "    @Test\n    public void testEqualsDifferentUnknownObjectBehavior() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>();\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);\n        assertFalse(comparator.equals(other));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest.[void]testEqualsIdentical()", "name": "testEqualsIdentical", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsIdentical()", "original_string": "    @Test\n    public void testEqualsIdentical() {\n        FixedOrderComparator<String> other = new FixedOrderComparator<>();\n        comparator.add(\"A\");\n        other.add(\"A\");\n        assertTrue(comparator.equals(other));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "class_name": "FixedOrderComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java.FixedOrderComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest.[void]testComparatorCompatibility()", "name": "testComparatorCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testComparatorCompatibility()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testComparatorCompatibility() throws IOException, ClassNotFoundException {\n        if (!skipSerializedCanonicalTests()) {\n            Comparator<T> comparator = null;\n\n            // test to make sure the canonical form has been preserved\n            try {\n                comparator = (Comparator<T>) readExternalFormFromDisk(getCanonicalComparatorName(makeObject()));\n            } catch (final FileNotFoundException exception) {\n\n                final boolean autoCreateSerialized = false;\n\n                if (autoCreateSerialized) {\n                    comparator = makeObject();\n                    final String fileName = getCanonicalComparatorName(comparator);\n                    writeExternalFormToDisk((Serializable) comparator, fileName);\n                    fail(\"Serialized form could not be found.  A serialized version \"\n                            + \"has now been written (and should be added to CVS): \" + fileName);\n                } else {\n                    fail(\"The Serialized form could be located to test serialization \"\n                            + \"compatibility: \" + exception.getMessage());\n                }\n            }\n\n            // make sure the canonical form produces the ordering we currently\n            // expect\n            final List<T> randomList = getComparableObjectsOrdered();\n            reverseObjects(randomList);\n            sortObjects(randomList, comparator);\n\n            final List<T> orderedList = getComparableObjectsOrdered();\n\n            assertEquals(orderedList, randomList, \"Comparator did not reorder the List correctly\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java", "class_name": "AbstractComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the Comparator\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest.[void]testComparatorIsSerializable()", "name": "testComparatorIsSerializable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparatorIsSerializable()", "original_string": "    @Test\n    public void testComparatorIsSerializable() {\n        final Comparator<T> comparator = makeObject();\n        assertInstanceOf(Serializable.class, comparator,\n                   \"This comparator should be Serializable.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java", "class_name": "AbstractComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nNearly all Comparators should be Serializable.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest.[void]testEmptyListSort()", "name": "testEmptyListSort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyListSort()", "original_string": "    @Test\n    public void testEmptyListSort() {\n        final List<T> list = new LinkedList<>();\n        sortObjects(list, makeObject());\n\n        final List<T> list2 = new LinkedList<>();\n\n        assertEquals(list2, list, \"Comparator cannot sort empty lists\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java", "class_name": "AbstractComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest sorting an empty list\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest.[void]testRandomListSort()", "name": "testRandomListSort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRandomListSort()", "original_string": "    @Test\n    public void testRandomListSort() {\n        final Comparator<T> comparator = makeObject();\n\n        final List<T> randomList = getComparableObjectsOrdered();\n        randomizeObjects(randomList);\n        sortObjects(randomList, comparator);\n\n        final List<T> orderedList = getComparableObjectsOrdered();\n\n        /* debug\n        Iterator i = randomList.iterator();\n        while (i.hasNext()) {\n            System.out.println(i.next());\n        }\n        */\n\n        assertEquals(orderedList, randomList, \"Comparator did not reorder the List correctly\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java", "class_name": "AbstractComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest sorting a random list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest.[void]testReverseListSort()", "name": "testReverseListSort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReverseListSort()", "original_string": "    @Test\n    public void testReverseListSort() {\n        final Comparator<T> comparator = makeObject();\n\n        final List<T> randomList = getComparableObjectsOrdered();\n        reverseObjects(randomList);\n        sortObjects(randomList, comparator);\n\n        final List<T> orderedList = getComparableObjectsOrdered();\n\n        assertEquals(orderedList, randomList, \"Comparator did not reorder the List correctly\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java", "class_name": "AbstractComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/AbstractComparatorTest.java.AbstractComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest sorting a reversed list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest.[void]testEqualsSameObject()", "name": "testEqualsSameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsSameObject()", "original_string": "    @Test\n    public void testEqualsSameObject() {\n        assertTrue(comparator1.equals(comparator1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "class_name": "TransformingComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest.[void]testEqualsNullObject()", "name": "testEqualsNullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsNullObject()", "original_string": "    @Test\n    public void testEqualsNullObject() {\n        assertFalse(comparator1.equals(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "class_name": "TransformingComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest.[void]testEqualsDifferentClass()", "name": "testEqualsDifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentClass()", "original_string": "    @Test\n    public void testEqualsDifferentClass() {\n        assertFalse(comparator1.equals(\"Not a TransformingComparator\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "class_name": "TransformingComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest.[void]testEqualsSameAttributes()", "name": "testEqualsSameAttributes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsSameAttributes()", "original_string": "    @Test\n    public void testEqualsSameAttributes() {\n        assertTrue(comparator1.equals(comparator2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "class_name": "TransformingComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest.[void]testEqualsDifferentTransformer()", "name": "testEqualsDifferentTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentTransformer()", "original_string": "    @Test\n    public void testEqualsDifferentTransformer() {\n        TransformingComparator<String, String> comparator3 = new TransformingComparator<>(TransformerUtils.constantTransformer(\"Different\"));\n        assertFalse(comparator1.equals(comparator3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "class_name": "TransformingComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest.[void]testEqualsDifferentDecorated()", "name": "testEqualsDifferentDecorated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsDifferentDecorated()", "original_string": "    @Test\n    public void testEqualsDifferentDecorated() {\n        TransformingComparator<String, String> comparator4 = new TransformingComparator<>(transformer, (o1, o2) -> o1.compareTo(o2));\n        assertFalse(comparator1.equals(comparator4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "class_name": "TransformingComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest.[void]testEqualsHashCodeConsistency()", "name": "testEqualsHashCodeConsistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsHashCodeConsistency()", "original_string": "    @Test\n    public void testEqualsHashCodeConsistency() {\n        assertTrue(comparator1.equals(comparator2) ? comparator1.hashCode() == comparator2.hashCode() : true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "class_name": "TransformingComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java.TransformingComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java.ComparatorChain_addComparatorTest.[void]testAddComparator()", "name": "testAddComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddComparator()", "original_string": "    @Test\n    void testAddComparator() {\n        // Given\n        ComparatorChain<String> chain = new ComparatorChain<>();\n        Comparator<String> comparator = Comparator.naturalOrder();\n\n        // When\n        chain.addComparator(comparator, false);\n\n        // Then\n        assertEquals(1, chain.size());\n\n        // Given\n        chain = new ComparatorChain<>();\n\n        // When\n        chain.addComparator(comparator, true);\n\n        // Then\n        assertEquals(1, chain.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java", "class_name": "ComparatorChain_addComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java.ComparatorChain_addComparatorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest.[void]testBadListComparatorChain()", "name": "testBadListComparatorChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBadListComparatorChain()", "original_string": "    @Test\n    public void testBadListComparatorChain() {\n        final List<Comparator<Integer>> list = new LinkedList<>();\n        final ComparatorChain<Integer> chain = new ComparatorChain<>(list);\n        final Integer i1 = 4;\n        final Integer i2 = 6;\n\n        assertThrows(UnsupportedOperationException.class, () -> chain.compare(i1, i2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "class_name": "ComparatorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest.[void]testBadNoopComparatorChain()", "name": "testBadNoopComparatorChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBadNoopComparatorChain()", "original_string": "    @Test\n    public void testBadNoopComparatorChain() {\n        final ComparatorChain<Integer> chain = new ComparatorChain<>();\n        final Integer i1 = 4;\n        final Integer i2 = 6;\n\n        assertThrows(UnsupportedOperationException.class, () -> chain.compare(i1, i2), \"An exception should be thrown when a chain contains zero comparators.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "class_name": "ComparatorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest.[void]testComparatorChainOnMinValuedComparator()", "name": "testComparatorChainOnMinValuedComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparatorChainOnMinValuedComparator()", "original_string": "    @Test\n    public void testComparatorChainOnMinValuedComparator() {\n        // -1 * Integer.MIN_VALUE is less than 0,\n        // test that ComparatorChain handles this edge case correctly\n        final ComparatorChain<Integer> chain = new ComparatorChain<>();\n        chain.addComparator((a, b) -> {\n            final int result = a.compareTo(b);\n            if (result < 0) {\n                return Integer.MIN_VALUE;\n            }\n            if (result > 0) {\n                return Integer.MAX_VALUE;\n            }\n            return 0;\n        }, true);\n\n        assertTrue(chain.compare(4, 5) > 0);\n        assertTrue(chain.compare(5, 4) < 0);\n        assertEquals(0, chain.compare(4, 4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "class_name": "ComparatorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest.[void]testListComparatorChain()", "name": "testListComparatorChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListComparatorChain()", "original_string": "    @Test\n    public void testListComparatorChain() {\n        final List<Comparator<Integer>> list = new LinkedList<>();\n        list.add(new ComparableComparator<>());\n        final ComparatorChain<Integer> chain = new ComparatorChain<>(list);\n        final Integer i1 = 4;\n        final Integer i2 = 6;\n\n        final int correctValue = i1.compareTo(i2);\n        assertEquals(chain.compare(i1, i2), correctValue, \"Comparison returns the right order\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "class_name": "ComparatorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest.[void]testNoopComparatorChain()", "name": "testNoopComparatorChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoopComparatorChain()", "original_string": "    @Test\n    public void testNoopComparatorChain() {\n        final ComparatorChain<Integer> chain = new ComparatorChain<>();\n        final Integer i1 = 4;\n        final Integer i2 = 6;\n        chain.addComparator(new ComparableComparator<>());\n\n        final int correctValue = i1.compareTo(i2);\n        assertEquals(chain.compare(i1, i2), correctValue, \"Comparison returns the right order\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java", "class_name": "ComparatorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java.ComparatorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest.[void]testAddAsEqual()", "name": "testAddAsEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAsEqual()", "original_string": "    @Test\n    public void testAddAsEqual() {\n        final FixedOrderComparator<String> comparator = new FixedOrderComparator<>(topCities);\n        comparator.addAsEqual(\"New York\", \"Minneapolis\");\n        assertEquals(0, comparator.compare(\"New York\", \"Minneapolis\"));\n        assertEquals(-1, comparator.compare(\"Tokyo\", \"Minneapolis\"));\n        assertEquals(1, comparator.compare(\"Shanghai\", \"Minneapolis\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "class_name": "FixedOrderComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests addAsEqual method.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest.[void]testArrayConstructor()", "name": "testArrayConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testArrayConstructor()", "original_string": "    @Test\n    public void testArrayConstructor() {\n        final String[] keys = topCities.clone();\n        final String[] topCitiesForTest = topCities.clone();\n        final FixedOrderComparator<String> comparator = new FixedOrderComparator<>(topCitiesForTest);\n        assertComparatorYieldsOrder(keys, comparator);\n        // test that changing input after constructor has no effect\n        topCitiesForTest[0] = \"Brighton\";\n        assertComparatorYieldsOrder(keys, comparator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "class_name": "FixedOrderComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the array constructor compares items properly.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest.[void]testConstructorPlusAdd()", "name": "testConstructorPlusAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorPlusAdd()", "original_string": "    @Test\n    public void testConstructorPlusAdd() {\n        final FixedOrderComparator<String> comparator = new FixedOrderComparator<>();\n        for (final String topCity : topCities) {\n            comparator.add(topCity);\n        }\n        final String[] keys = topCities.clone();\n        assertComparatorYieldsOrder(keys, comparator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "class_name": "FixedOrderComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the constructor plus add method compares items properly.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest.[void]testListConstructor()", "name": "testListConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListConstructor()", "original_string": "    @Test\n    public void testListConstructor() {\n        final String[] keys = topCities.clone();\n        final List<String> topCitiesForTest = new LinkedList<>(Arrays.asList(topCities));\n        final FixedOrderComparator<String> comparator = new FixedOrderComparator<>(topCitiesForTest);\n        assertComparatorYieldsOrder(keys, comparator);\n        // test that changing input after constructor has no effect\n        topCitiesForTest.set(0, \"Brighton\");\n        assertComparatorYieldsOrder(keys, comparator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "class_name": "FixedOrderComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the list constructor.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest.[void]testLock()", "name": "testLock", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLock()", "original_string": "    @Test\n    public void testLock() {\n        final FixedOrderComparator<String> comparator = new FixedOrderComparator<>(topCities);\n        assertFalse(comparator.isLocked());\n        comparator.compare(\"New York\", \"Tokyo\");\n        assertTrue(comparator.isLocked());\n\n        assertThrows(UnsupportedOperationException.class, () -> comparator.add(\"Minneapolis\"),\n                \"Should have thrown an UnsupportedOperationException\");\n\n        assertThrows(UnsupportedOperationException.class, () -> comparator.addAsEqual(\"New York\", \"Minneapolis\"),\n                \"Should have thrown an UnsupportedOperationException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "class_name": "FixedOrderComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether or not updates are disabled after a comparison is made.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest.[void]testUnknownObjectBehavior()", "name": "testUnknownObjectBehavior", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnknownObjectBehavior()", "original_string": "    @Test\n    public void testUnknownObjectBehavior() {\n        FixedOrderComparator<String> comparator = new FixedOrderComparator<>(topCities);\n\n        final FixedOrderComparator<String> finalComparator = comparator;\n        assertThrows(IllegalArgumentException.class, () -> finalComparator.compare(\"New York\", \"Minneapolis\"),\n                \"Should have thrown a IllegalArgumentException\");\n\n        assertThrows(IllegalArgumentException.class, () -> finalComparator.compare(\"Minneapolis\", \"New York\"),\n                \"Should have thrown a IllegalArgumentException\");\n\n        assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION, comparator.getUnknownObjectBehavior());\n\n        comparator = new FixedOrderComparator<>(topCities);\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);\n        assertEquals(FixedOrderComparator.UnknownObjectBehavior.BEFORE, comparator.getUnknownObjectBehavior());\n        LinkedList<String> keys = new LinkedList<>(Arrays.asList(topCities));\n        keys.addFirst(\"Minneapolis\");\n        assertComparatorYieldsOrder(keys.toArray(ArrayUtils.EMPTY_STRING_ARRAY), comparator);\n\n        assertEquals(-1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals( 1, comparator.compare(\"New York\", \"Minneapolis\"));\n        assertEquals( 0, comparator.compare(\"Minneapolis\", \"St Paul\"));\n\n        comparator = new FixedOrderComparator<>(topCities);\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);\n        keys = new LinkedList<>(Arrays.asList(topCities));\n        keys.add(\"Minneapolis\");\n        assertComparatorYieldsOrder(keys.toArray(ArrayUtils.EMPTY_STRING_ARRAY), comparator);\n\n        assertEquals( 1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(-1, comparator.compare(\"New York\", \"Minneapolis\"));\n        assertEquals( 0, comparator.compare(\"Minneapolis\", \"St Paul\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java", "class_name": "FixedOrderComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparatorTest.java.FixedOrderComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java.TransformingComparator_compareTest.[void]testCompare()", "name": "testCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompare()", "original_string": "    @Test\n    public void testCompare() {\n        // Given\n        Transformer<Integer, String> transformer = mock(Transformer.class);\n        Comparator<String> decorated = mock(Comparator.class);\n        TransformingComparator<Integer, String> comparator = new TransformingComparator<>(transformer, decorated);\n\n        Integer obj1 = 1;\n        Integer obj2 = 2;\n        String transformedValue1 = \"1\";\n        String transformedValue2 = \"2\";\n\n        when(transformer.apply(obj1)).thenReturn(transformedValue1);\n        when(transformer.apply(obj2)).thenReturn(transformedValue2);\n        when(decorated.compare(transformedValue1, transformedValue2)).thenReturn(-1);\n\n        // When\n        int result = comparator.compare(obj1, obj2);\n\n        // Then\n        assertEquals(-1, result);\n        verify(transformer, times(1)).apply(obj1);\n        verify(transformer, times(1)).apply(obj2);\n        verify(decorated, times(1)).compare(transformedValue1, transformedValue2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java", "class_name": "TransformingComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java.TransformingComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java.BooleanComparator_hashCodeTest.[void]testHashCodeTrueFirst()", "name": "testHashCodeTrueFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeTrueFirst()", "original_string": "    @Test\n    public void testHashCodeTrueFirst() {\n        BooleanComparator comparator = new BooleanComparator(true);\n        int expectedHash = -1 * \"BooleanComparator\".hashCode();\n        assertEquals(expectedHash, comparator.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java", "class_name": "BooleanComparator_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java.BooleanComparator_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java.BooleanComparator_hashCodeTest.[void]testHashCodeFalseFirst()", "name": "testHashCodeFalseFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeFalseFirst()", "original_string": "    @Test\n    public void testHashCodeFalseFirst() {\n        BooleanComparator comparator = new BooleanComparator(false);\n        int expectedHash = \"BooleanComparator\".hashCode();\n        assertEquals(expectedHash, comparator.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java", "class_name": "BooleanComparator_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java.BooleanComparator_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testCompareKnownObjects()", "name": "testCompareKnownObjects", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareKnownObjects()", "original_string": "    @Test\n    public void testCompareKnownObjects() {\n        assertEquals(-1, comparator.compare(\"New York\", \"Los Angeles\"));\n        assertEquals(1, comparator.compare(\"Los Angeles\", \"New York\"));\n        assertEquals(0, comparator.compare(\"New York\", \"New York\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testCompareUnknownObjectBehaviorException()", "name": "testCompareUnknownObjectBehaviorException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareUnknownObjectBehaviorException()", "original_string": "    @Test\n    public void testCompareUnknownObjectBehaviorException() {\n        assertThrows(IllegalArgumentException.class, () -> comparator.compare(\"Minneapolis\", \"New York\"));\n        assertThrows(IllegalArgumentException.class, () -> comparator.compare(\"New York\", \"Minneapolis\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testCompareUnknownObjectBehaviorBefore()", "name": "testCompareUnknownObjectBehaviorBefore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareUnknownObjectBehaviorBefore()", "original_string": "    @Test\n    public void testCompareUnknownObjectBehaviorBefore() {\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);\n        assertEquals(-1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(1, comparator.compare(\"New York\", \"Minneapolis\"));\n        assertEquals(0, comparator.compare(\"Minneapolis\", \"St Paul\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testCompareUnknownObjectBehaviorAfter()", "name": "testCompareUnknownObjectBehaviorAfter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareUnknownObjectBehaviorAfter()", "original_string": "    @Test\n    public void testCompareUnknownObjectBehaviorAfter() {\n        comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);\n        assertEquals(1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(-1, comparator.compare(\"New York\", \"Minneapolis\"));\n        assertEquals(0, comparator.compare(\"Minneapolis\", \"St Paul\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testAddAndCompare()", "name": "testAddAndCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAndCompare()", "original_string": "    @Test\n    public void testAddAndCompare() {\n        comparator.add(\"Minneapolis\");\n        assertEquals(1, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(-1, comparator.compare(\"New York\", \"Minneapolis\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testAddAsEqualAndCompare()", "name": "testAddAsEqualAndCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAsEqualAndCompare()", "original_string": "    @Test\n    public void testAddAsEqualAndCompare() {\n        comparator.addAsEqual(\"New York\", \"Minneapolis\");\n        assertEquals(0, comparator.compare(\"Minneapolis\", \"New York\"));\n        assertEquals(0, comparator.compare(\"New York\", \"Minneapolis\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testIsLocked()", "name": "testIsLocked", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsLocked()", "original_string": "    @Test\n    public void testIsLocked() {\n        assertFalse(comparator.isLocked());\n        comparator.compare(\"New York\", \"Los Angeles\");\n        assertTrue(comparator.isLocked());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest.[void]testSetUnknownObjectBehaviorLocked()", "name": "testSetUnknownObjectBehaviorLocked", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetUnknownObjectBehaviorLocked()", "original_string": "    @Test\n    public void testSetUnknownObjectBehaviorLocked() {\n        comparator.compare(\"New York\", \"Los Angeles\");\n        assertThrows(UnsupportedOperationException.class, () -> comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "class_name": "FixedOrderComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java.FixedOrderComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest.[void]testHashCodeWithNonNullDecoratedAndTransformer()", "name": "testHashCodeWithNonNullDecoratedAndTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNonNullDecoratedAndTransformer()", "original_string": "    @Test\n    public void testHashCodeWithNonNullDecoratedAndTransformer() {\n        TransformingComparator<String, String> comparatorWithDecorated = new TransformingComparator<>(transformer, comparator);\n        int expectedHashCode = 17 * 37 + comparator.hashCode();\n        expectedHashCode = expectedHashCode * 37 + transformer.hashCode();\n        assertEquals(expectedHashCode, comparatorWithDecorated.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java", "class_name": "TransformingComparator_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest.[void]testHashCodeWithNullDecorated()", "name": "testHashCodeWithNullDecorated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNullDecorated()", "original_string": "    @Test\n    public void testHashCodeWithNullDecorated() {\n        TransformingComparator<String, String> comparatorWithNullDecorated = new TransformingComparator<>(transformer, null);\n        int expectedHashCode = 17 * 37 + 0;\n        expectedHashCode = expectedHashCode * 37 + transformer.hashCode();\n        assertEquals(expectedHashCode, comparatorWithNullDecorated.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java", "class_name": "TransformingComparator_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest.[void]testHashCodeWithNullTransformer()", "name": "testHashCodeWithNullTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNullTransformer()", "original_string": "    @Test\n    public void testHashCodeWithNullTransformer() {\n        TransformingComparator<String, String> comparatorWithNullTransformer = new TransformingComparator<>(null, comparator);\n        int expectedHashCode = 17 * 37 + comparator.hashCode();\n        expectedHashCode = expectedHashCode * 37 + 0;\n        assertEquals(expectedHashCode, comparatorWithNullTransformer.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java", "class_name": "TransformingComparator_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest.[void]testHashCodeWithNullDecoratedAndTransformer()", "name": "testHashCodeWithNullDecoratedAndTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCodeWithNullDecoratedAndTransformer()", "original_string": "    @Test\n    public void testHashCodeWithNullDecoratedAndTransformer() {\n        TransformingComparator<String, String> comparatorWithNulls = new TransformingComparator<>(null, null);\n        int expectedHashCode = 17 * 37 + 0;\n        expectedHashCode = expectedHashCode * 37 + 0;\n        assertEquals(expectedHashCode, comparatorWithNulls.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java", "class_name": "TransformingComparator_hashCodeTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java.TransformingComparator_hashCodeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest.[void]testEqualsWithSameInstance()", "name": "testEqualsWithSameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithSameInstance()", "original_string": "    @Test\n    public void testEqualsWithSameInstance() {\n        BooleanComparator comparator = BooleanComparator.getTrueFirstComparator();\n        assertTrue(comparator.equals(comparator));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "class_name": "BooleanComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest.[void]testEqualsWithDifferentInstanceSameOrder()", "name": "testEqualsWithDifferentInstanceSameOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithDifferentInstanceSameOrder()", "original_string": "    @Test\n    public void testEqualsWithDifferentInstanceSameOrder() {\n        BooleanComparator trueFirst1 = BooleanComparator.getTrueFirstComparator();\n        BooleanComparator trueFirst2 = BooleanComparator.booleanComparator(true);\n        assertTrue(trueFirst1.equals(trueFirst2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "class_name": "BooleanComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest.[void]testEqualsWithDifferentInstanceDifferentOrder()", "name": "testEqualsWithDifferentInstanceDifferentOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithDifferentInstanceDifferentOrder()", "original_string": "    @Test\n    public void testEqualsWithDifferentInstanceDifferentOrder() {\n        BooleanComparator trueFirst = BooleanComparator.getTrueFirstComparator();\n        BooleanComparator falseFirst = BooleanComparator.getFalseFirstComparator();\n        assertFalse(trueFirst.equals(falseFirst));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "class_name": "BooleanComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest.[void]testEqualsWithNonBooleanComparatorInstance()", "name": "testEqualsWithNonBooleanComparatorInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithNonBooleanComparatorInstance()", "original_string": "    @Test\n    public void testEqualsWithNonBooleanComparatorInstance() {\n        BooleanComparator trueFirst = BooleanComparator.getTrueFirstComparator();\n        Object nonComparator = new Object();\n        assertFalse(trueFirst.equals(nonComparator));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "class_name": "BooleanComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest.[void]testEqualsWithNull()", "name": "testEqualsWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsWithNull()", "original_string": "    @Test\n    public void testEqualsWithNull() {\n        BooleanComparator trueFirst = BooleanComparator.getTrueFirstComparator();\n        assertFalse(trueFirst.equals(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "class_name": "BooleanComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java.BooleanComparator_equalsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java.BooleanComparatorTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructors()", "original_string": "    @Test\n    public void testConstructors() {\n        allTests(false, new BooleanComparator());\n        allTests(false, new BooleanComparator(false));\n        allTests(true, new BooleanComparator(true));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java", "class_name": "BooleanComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java.BooleanComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java.BooleanComparatorTest.[void]testEqualsCompatibleInstance()", "name": "testEqualsCompatibleInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsCompatibleInstance()", "original_string": "    @Test\n    public void testEqualsCompatibleInstance() {\n        assertEquals(new BooleanComparator(), new BooleanComparator(false));\n        assertEquals(new BooleanComparator(false), new BooleanComparator(false));\n        assertEquals(new BooleanComparator(false), BooleanComparator.getFalseFirstComparator());\n        assertSame(BooleanComparator.getFalseFirstComparator(), BooleanComparator.booleanComparator(false));\n\n        assertEquals(new BooleanComparator(true), new BooleanComparator(true));\n        assertEquals(new BooleanComparator(true), BooleanComparator.getTrueFirstComparator());\n        assertSame(BooleanComparator.getTrueFirstComparator(), BooleanComparator.booleanComparator(true));\n\n        assertNotEquals(new BooleanComparator(), new BooleanComparator(true));\n        assertNotEquals(new BooleanComparator(true), new BooleanComparator(false));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java", "class_name": "BooleanComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java.BooleanComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java.BooleanComparatorTest.[void]testStaticFactoryMethods()", "name": "testStaticFactoryMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStaticFactoryMethods()", "original_string": "    @Test\n    public void testStaticFactoryMethods() {\n        allTests(false, BooleanComparator.getFalseFirstComparator());\n        allTests(false, BooleanComparator.booleanComparator(false));\n        allTests(true, BooleanComparator.getTrueFirstComparator());\n        allTests(true, BooleanComparator.booleanComparator(true));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java", "class_name": "BooleanComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparatorTest.java.BooleanComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java.BooleanComparator_compareTest.[void]testCompareTrueFirst()", "name": "testCompareTrueFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareTrueFirst()", "original_string": "    @Test\n    public void testCompareTrueFirst() {\n        BooleanComparator comparator = BooleanComparator.getTrueFirstComparator();\n\n        assertEquals(-1, comparator.compare(Boolean.TRUE, Boolean.FALSE));\n        assertEquals(1, comparator.compare(Boolean.FALSE, Boolean.TRUE));\n        assertEquals(0, comparator.compare(Boolean.TRUE, Boolean.TRUE));\n        assertEquals(0, comparator.compare(Boolean.FALSE, Boolean.FALSE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "class_name": "BooleanComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java.BooleanComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java.BooleanComparator_compareTest.[void]testCompareFalseFirst()", "name": "testCompareFalseFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareFalseFirst()", "original_string": "    @Test\n    public void testCompareFalseFirst() {\n        BooleanComparator comparator = BooleanComparator.getFalseFirstComparator();\n\n        assertEquals(1, comparator.compare(Boolean.TRUE, Boolean.FALSE));\n        assertEquals(-1, comparator.compare(Boolean.FALSE, Boolean.TRUE));\n        assertEquals(0, comparator.compare(Boolean.TRUE, Boolean.TRUE));\n        assertEquals(0, comparator.compare(Boolean.FALSE, Boolean.FALSE));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "class_name": "BooleanComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java.BooleanComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java.BooleanComparator_compareTest.[void]testCompareNullArguments()", "name": "testCompareNullArguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompareNullArguments()", "original_string": "    @Test\n    public void testCompareNullArguments() {\n        BooleanComparator comparator = BooleanComparator.getTrueFirstComparator();\n\n        assertThrows(NullPointerException.class, () -> comparator.compare(null, Boolean.TRUE));\n        assertThrows(NullPointerException.class, () -> comparator.compare(Boolean.TRUE, null));\n        assertThrows(NullPointerException.class, () -> comparator.compare(null, null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "class_name": "BooleanComparator_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java.BooleanComparator_compareTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java.ReverseComparatorTest.[void]testSerializeDeserializeThenCompare()", "name": "testSerializeDeserializeThenCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testSerializeDeserializeThenCompare()", "original_string": "    @Test\n    @Override\n    public void testSerializeDeserializeThenCompare() throws Exception {\n        final Comparator<?> comp = new ReverseComparator<>(new ComparableComparator<>());\n\n        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        final ObjectOutputStream out = new ObjectOutputStream(buffer);\n        out.writeObject(comp);\n        out.close();\n\n        final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n        final Object dest = in.readObject();\n        in.close();\n        assertEquals(comp, dest, \"obj != deserialize(serialize(obj))\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java", "class_name": "ReverseComparatorTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java.ReverseComparatorTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nOverride this inherited test since Collections.reverseOrder\ndoesn't adhere to the \"soft\" Comparator contract, and we've\nalready \"canonized\" the comparator returned by makeComparator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java.ReverseComparator_equalsTest.[void]testEquals()", "name": "testEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEquals()", "original_string": "    @Test\n    void testEquals() {\n        Comparator<Integer> naturalOrder = Comparator.naturalOrder();\n        ReverseComparator<Integer> rc1 = new ReverseComparator<>(naturalOrder);\n        ReverseComparator<Integer> rc2 = new ReverseComparator<>(naturalOrder);\n        ReverseComparator<Integer> rc3 = new ReverseComparator<>(Comparator.reverseOrder());\n\n        // Test same instance\n        assertTrue(rc1.equals(rc1));\n\n        // Test null\n        assertFalse(rc1.equals(null));\n\n        // Test different class\n        assertFalse(rc1.equals(\"Not a ReverseComparator\"));\n\n        // Test same class, same comparator\n        assertTrue(rc1.equals(rc2));\n\n        // Test same class, different comparator\n        assertFalse(rc1.equals(rc3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java", "class_name": "ReverseComparator_equalsTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java.ReverseComparator_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java.FixedOrderComparator_addAsEqualTest.[void]testAddAsEqual_NewObjectAdded()", "name": "testAddAsEqual_NewObjectAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddAsEqual_NewObjectAdded()", "original_string": "    @Test\n    void testAddAsEqual_NewObjectAdded() {\n        // Given\n        String existingObj = \"existingObj\";\n        String newObj = \"newObj\";\n\n        // When\n        boolean result = comparator.addAsEqual(existingObj, newObj);\n\n        // Then\n        assertTrue(result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java", "class_name": "FixedOrderComparator_addAsEqualTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java.FixedOrderComparator_addAsEqualTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java.FixedOrderComparator_addAsEqualTest.[void]testAddAsEqual_ExistingObjectNotKnown()", "name": "testAddAsEqual_ExistingObjectNotKnown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddAsEqual_ExistingObjectNotKnown()", "original_string": "    @Test\n    void testAddAsEqual_ExistingObjectNotKnown() {\n        // Given\n        String existingObj = \"unknownObj\";\n        String newObj = \"newObj\";\n\n        // When / Then\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            comparator.addAsEqual(existingObj, newObj);\n        });\n        assertEquals(\"unknownObj not known to \" + comparator, exception.getMessage());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java", "class_name": "FixedOrderComparator_addAsEqualTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java.FixedOrderComparator_addAsEqualTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest.[void]testCompare_SingleComparator_ForwardOrder()", "name": "testCompare_SingleComparator_ForwardOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCompare_SingleComparator_ForwardOrder()", "original_string": "    @Test\n    void testCompare_SingleComparator_ForwardOrder() {\n        comparatorChain.addComparator(Comparator.naturalOrder());\n        assertEquals(1, comparatorChain.compare(\"b\", \"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "class_name": "ComparatorChain_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest.[void]testCompare_SingleComparator_ReverseOrder()", "name": "testCompare_SingleComparator_ReverseOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCompare_SingleComparator_ReverseOrder()", "original_string": "    @Test\n    void testCompare_SingleComparator_ReverseOrder() {\n        comparatorChain.addComparator(Comparator.naturalOrder(), true);\n        assertEquals(-1, comparatorChain.compare(\"b\", \"a\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "class_name": "ComparatorChain_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest.[void]testCompare_MultipleComparators_MixedOrder()", "name": "testCompare_MultipleComparators_MixedOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCompare_MultipleComparators_MixedOrder()", "original_string": "    @Test\n    void testCompare_MultipleComparators_MixedOrder() {\n        comparatorChain.addComparator(Comparator.naturalOrder());\n        comparatorChain.addComparator(Comparator.reverseOrder(), true);\n        assertEquals(-1, comparatorChain.compare(\"a\", \"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "class_name": "ComparatorChain_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest.[void]testCompare_NoComparators_ThrowsException()", "name": "testCompare_NoComparators_ThrowsException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCompare_NoComparators_ThrowsException()", "original_string": "    @Test\n    void testCompare_NoComparators_ThrowsException() {\n        assertThrows(UnsupportedOperationException.class, () -> comparatorChain.compare(\"a\", \"b\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "class_name": "ComparatorChain_compareTest", "class_uri": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java.ComparatorChain_compareTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java.UnmodifiableTrieTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final Trie<String, V> trie = makeFullMap();\n        assertSame(trie, UnmodifiableTrie.unmodifiableTrie(trie));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableTrie.unmodifiableTrie(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java", "class_name": "UnmodifiableTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java.UnmodifiableTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java.UnmodifiableTrieTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java", "class_name": "UnmodifiableTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java.UnmodifiableTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest.[void]testPrefixMap()", "name": "testPrefixMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrefixMap()", "original_string": "    @Test\n    public void testPrefixMap() {\n        final PatriciaTrie<String> trie = new PatriciaTrie<>();\n\n        final String[] keys = {\n            StringUtils.EMPTY,\n            \"Albert\", \"Xavier\", \"XyZ\", \"Anna\", \"Alien\", \"Alberto\",\n            \"Alberts\", \"Allie\", \"Alliese\", \"Alabama\", \"Banane\",\n            \"Blabla\", \"Amber\", \"Ammun\", \"Akka\", \"Akko\", \"Albertoo\",\n            \"Amma\"\n        };\n\n        for (final String key : keys) {\n            trie.put(key, key);\n        }\n\n        SortedMap<String, String> map;\n        Iterator<String> iterator;\n        Iterator<Map.Entry<String, String>> entryIterator;\n        Map.Entry<String, String> entry;\n\n        map = trie.prefixMap(\"Al\");\n        assertEquals(8, map.size());\n        assertEquals(\"Alabama\", map.firstKey());\n        assertEquals(\"Alliese\", map.lastKey());\n        assertEquals(\"Albertoo\", map.get(\"Albertoo\"));\n        assertNotNull(trie.get(\"Xavier\"));\n        assertNull(map.get(\"Xavier\"));\n        assertNull(trie.get(\"Alice\"));\n        assertNull(map.get(\"Alice\"));\n        iterator = map.values().iterator();\n        assertEquals(\"Alabama\", iterator.next());\n        assertEquals(\"Albert\", iterator.next());\n        assertEquals(\"Alberto\", iterator.next());\n        assertEquals(\"Albertoo\", iterator.next());\n        assertEquals(\"Alberts\", iterator.next());\n        assertEquals(\"Alien\", iterator.next());\n        assertEquals(\"Allie\", iterator.next());\n        assertEquals(\"Alliese\", iterator.next());\n        assertFalse(iterator.hasNext());\n\n        map = trie.prefixMap(\"Albert\");\n        iterator = map.keySet().iterator();\n        assertEquals(\"Albert\", iterator.next());\n        assertEquals(\"Alberto\", iterator.next());\n        assertEquals(\"Albertoo\", iterator.next());\n        assertEquals(\"Alberts\", iterator.next());\n        assertFalse(iterator.hasNext());\n        assertEquals(4, map.size());\n        assertEquals(\"Albert\", map.firstKey());\n        assertEquals(\"Alberts\", map.lastKey());\n        assertNull(trie.get(\"Albertz\"));\n        map.put(\"Albertz\", \"Albertz\");\n        assertEquals(\"Albertz\", trie.get(\"Albertz\"));\n        assertEquals(5, map.size());\n        assertEquals(\"Albertz\", map.lastKey());\n        iterator = map.keySet().iterator();\n        assertEquals(\"Albert\", iterator.next());\n        assertEquals(\"Alberto\", iterator.next());\n        assertEquals(\"Albertoo\", iterator.next());\n        assertEquals(\"Alberts\", iterator.next());\n        assertEquals(\"Albertz\", iterator.next());\n        assertFalse(iterator.hasNext());\n        assertEquals(\"Albertz\", map.remove(\"Albertz\"));\n\n        map = trie.prefixMap(\"Alberto\");\n        assertEquals(2, map.size());\n        assertEquals(\"Alberto\", map.firstKey());\n        assertEquals(\"Albertoo\", map.lastKey());\n        entryIterator = map.entrySet().iterator();\n        entry = entryIterator.next();\n        assertEquals(\"Alberto\", entry.getKey());\n        assertEquals(\"Alberto\", entry.getValue());\n        entry = entryIterator.next();\n        assertEquals(\"Albertoo\", entry.getKey());\n        assertEquals(\"Albertoo\", entry.getValue());\n        assertFalse(entryIterator.hasNext());\n        trie.put(\"Albertoad\", \"Albertoad\");\n        assertEquals(3, map.size());\n        assertEquals(\"Alberto\", map.firstKey());\n        assertEquals(\"Albertoo\", map.lastKey());\n        entryIterator = map.entrySet().iterator();\n        entry = entryIterator.next();\n        assertEquals(\"Alberto\", entry.getKey());\n        assertEquals(\"Alberto\", entry.getValue());\n        entry = entryIterator.next();\n        assertEquals(\"Albertoad\", entry.getKey());\n        assertEquals(\"Albertoad\", entry.getValue());\n        entry = entryIterator.next();\n        assertEquals(\"Albertoo\", entry.getKey());\n        assertEquals(\"Albertoo\", entry.getValue());\n        assertFalse(entryIterator.hasNext());\n        assertEquals(\"Albertoo\", trie.remove(\"Albertoo\"));\n        assertEquals(\"Alberto\", map.firstKey());\n        assertEquals(\"Albertoad\", map.lastKey());\n        assertEquals(2, map.size());\n        entryIterator = map.entrySet().iterator();\n        entry = entryIterator.next();\n        assertEquals(\"Alberto\", entry.getKey());\n        assertEquals(\"Alberto\", entry.getValue());\n        entry = entryIterator.next();\n        assertEquals(\"Albertoad\", entry.getKey());\n        assertEquals(\"Albertoad\", entry.getValue());\n        assertFalse(entryIterator.hasNext());\n        assertEquals(\"Albertoad\", trie.remove(\"Albertoad\"));\n        trie.put(\"Albertoo\", \"Albertoo\");\n\n        map = trie.prefixMap(\"X\");\n        assertEquals(2, map.size());\n        assertFalse(map.containsKey(\"Albert\"));\n        assertTrue(map.containsKey(\"Xavier\"));\n        assertFalse(map.containsKey(\"Xalan\"));\n        iterator = map.values().iterator();\n        assertEquals(\"Xavier\", iterator.next());\n        assertEquals(\"XyZ\", iterator.next());\n        assertFalse(iterator.hasNext());\n\n        map = trie.prefixMap(\"An\");\n        assertEquals(1, map.size());\n        assertEquals(\"Anna\", map.firstKey());\n        assertEquals(\"Anna\", map.lastKey());\n        iterator = map.keySet().iterator();\n        assertEquals(\"Anna\", iterator.next());\n        assertFalse(iterator.hasNext());\n\n        map = trie.prefixMap(\"Ban\");\n        assertEquals(1, map.size());\n        assertEquals(\"Banane\", map.firstKey());\n        assertEquals(\"Banane\", map.lastKey());\n        iterator = map.keySet().iterator();\n        assertEquals(\"Banane\", iterator.next());\n        assertFalse(iterator.hasNext());\n\n        map = trie.prefixMap(\"Am\");\n        assertFalse(map.isEmpty());\n        assertEquals(3, map.size());\n        assertEquals(\"Amber\", trie.remove(\"Amber\"));\n        iterator = map.keySet().iterator();\n        assertEquals(\"Amma\", iterator.next());\n        assertEquals(\"Ammun\", iterator.next());\n        assertFalse(iterator.hasNext());\n        iterator = map.keySet().iterator();\n        map.put(\"Amber\", \"Amber\");\n        assertEquals(3, map.size());\n\n        final Iterator<String> iterator1 = iterator;\n        assertThrows(ConcurrentModificationException.class, () -> iterator1.next());\n\n        assertEquals(\"Amber\", map.firstKey());\n        assertEquals(\"Ammun\", map.lastKey());\n\n        map = trie.prefixMap(\"Ak\\0\");\n        assertTrue(map.isEmpty());\n\n        map = trie.prefixMap(\"Ak\");\n        assertEquals(2, map.size());\n        assertEquals(\"Akka\", map.firstKey());\n        assertEquals(\"Akko\", map.lastKey());\n        map.put(\"Ak\", \"Ak\");\n        assertEquals(\"Ak\", map.firstKey());\n        assertEquals(\"Akko\", map.lastKey());\n        assertEquals(3, map.size());\n        trie.put(\"Al\", \"Al\");\n        assertEquals(3, map.size());\n        assertEquals(\"Ak\", map.remove(\"Ak\"));\n        assertEquals(\"Akka\", map.firstKey());\n        assertEquals(\"Akko\", map.lastKey());\n        assertEquals(2, map.size());\n        iterator = map.keySet().iterator();\n        assertEquals(\"Akka\", iterator.next());\n        assertEquals(\"Akko\", iterator.next());\n        assertFalse(iterator.hasNext());\n        assertEquals(\"Al\", trie.remove(\"Al\"));\n\n        map = trie.prefixMap(\"Akka\");\n        assertEquals(1, map.size());\n        assertEquals(\"Akka\", map.firstKey());\n        assertEquals(\"Akka\", map.lastKey());\n        iterator = map.keySet().iterator();\n        assertEquals(\"Akka\", iterator.next());\n        assertFalse(iterator.hasNext());\n\n        map = trie.prefixMap(\"Ab\");\n        assertTrue(map.isEmpty());\n        assertEquals(0, map.size());\n\n        final SortedMap<String, String> map1 = map;\n        assertThrows(NoSuchElementException.class, () -> map1.firstKey());\n\n        final SortedMap<String, String> map2 = map;\n        assertThrows(NoSuchElementException.class, () -> map2.lastKey());\n\n        iterator = map.values().iterator();\n        assertFalse(iterator.hasNext());\n\n        map = trie.prefixMap(\"Albertooo\");\n        assertTrue(map.isEmpty());\n        assertEquals(0, map.size());\n\n        final SortedMap<String, String> map3 = map;\n        assertThrows(NoSuchElementException.class, () -> map3.firstKey(),\n                () -> \"got a first key: \" + map3.firstKey());\n\n        final SortedMap<String, String> map4 = map;\n        assertThrows(NoSuchElementException.class, () -> map4.lastKey(),\n                () -> \"got a last key: \" + map4.lastKey());\n\n        iterator = map.values().iterator();\n        assertFalse(iterator.hasNext());\n\n        map = trie.prefixMap(StringUtils.EMPTY);\n        assertSame(trie, map); // stricter than necessary, but a good check\n\n        map = trie.prefixMap(\"\\0\");\n        assertTrue(map.isEmpty());\n        assertEquals(0, map.size());\n\n        final SortedMap<String, String> map5 = map;\n        assertThrows(NoSuchElementException.class, () -> map5.firstKey(),\n                () -> \"got a first key: \" + map5.firstKey());\n\n        final SortedMap<String, String> map6 = map;\n        assertThrows(NoSuchElementException.class, () -> map6.lastKey(),\n                () -> \"got a last key: \" + map6.lastKey());\n\n        iterator = map.values().iterator();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "class_name": "PatriciaTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest.[void]testPrefixMapClear()", "name": "testPrefixMapClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrefixMapClear()", "original_string": "    @Test\n    public void testPrefixMapClear() {\n        final Trie<String, Integer> trie = new PatriciaTrie<>();\n        trie.put(\"Anna\", 1);\n        trie.put(\"Anael\", 2);\n        trie.put(\"Analu\", 3);\n        trie.put(\"Andreas\", 4);\n        trie.put(\"Andrea\", 5);\n        trie.put(\"Andres\", 6);\n        trie.put(\"Anatole\", 7);\n        final SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n        assertEquals(new HashSet<>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());\n        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<>(prefixMap.values()));\n\n        prefixMap.clear();\n        assertTrue(prefixMap.isEmpty());\n        assertTrue(prefixMap.isEmpty());\n        assertTrue(prefixMap.isEmpty());\n        assertEquals(new HashSet<>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());\n        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<>(trie.values()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "class_name": "PatriciaTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest.[void]testPrefixMapClearNothing()", "name": "testPrefixMapClearNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrefixMapClearNothing()", "original_string": "    @Test\n    public void testPrefixMapClearNothing() {\n        final Trie<String, Integer> trie = new PatriciaTrie<>();\n        final SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n        assertEquals(new HashSet<>(), prefixMap.keySet());\n        assertEquals(new ArrayList<>(0), new ArrayList<>(prefixMap.values()));\n\n        prefixMap.clear();\n        assertTrue(prefixMap.isEmpty());\n        assertTrue(prefixMap.isEmpty());\n        assertTrue(prefixMap.isEmpty());\n        assertEquals(new HashSet<>(), trie.keySet());\n        assertEquals(new ArrayList<>(0), new ArrayList<>(trie.values()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "class_name": "PatriciaTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest.[void]testPrefixMapClearUsingRemove()", "name": "testPrefixMapClearUsingRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrefixMapClearUsingRemove()", "original_string": "    @Test\n    public void testPrefixMapClearUsingRemove() {\n        final Trie<String, Integer> trie = new PatriciaTrie<>();\n        trie.put(\"Anna\", 1);\n        trie.put(\"Anael\", 2);\n        trie.put(\"Analu\", 3);\n        trie.put(\"Andreas\", 4);\n        trie.put(\"Andrea\", 5);\n        trie.put(\"Andres\", 6);\n        trie.put(\"Anatole\", 7);\n        final SortedMap<String, Integer> prefixMap = trie.prefixMap(\"And\");\n        assertEquals(new HashSet<>(Arrays.asList(\"Andrea\", \"Andreas\", \"Andres\")), prefixMap.keySet());\n        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<>(prefixMap.values()));\n\n        final Set<String> keys = new HashSet<>(prefixMap.keySet());\n        for (final String key : keys) {\n            prefixMap.remove(key);\n        }\n        assertTrue(prefixMap.isEmpty());\n        assertTrue(prefixMap.isEmpty());\n        assertEquals(new HashSet<>(Arrays.asList(\"Anael\", \"Analu\", \"Anatole\", \"Anna\")), trie.keySet());\n        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<>(trie.values()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "class_name": "PatriciaTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest.[void]testPrefixMapRemoval()", "name": "testPrefixMapRemoval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrefixMapRemoval()", "original_string": "    @Test\n    public void testPrefixMapRemoval() {\n        final PatriciaTrie<String> trie = new PatriciaTrie<>();\n\n        final String[] keys = {\n            \"Albert\", \"Xavier\", \"XyZ\", \"Anna\", \"Alien\", \"Alberto\",\n            \"Alberts\", \"Allie\", \"Alliese\", \"Alabama\", \"Banane\",\n            \"Blabla\", \"Amber\", \"Ammun\", \"Akka\", \"Akko\", \"Albertoo\",\n            \"Amma\"\n        };\n\n        for (final String key : keys) {\n            trie.put(key, key);\n        }\n\n        SortedMap<String, String> map = trie.prefixMap(\"Al\");\n        assertEquals(8, map.size());\n        Iterator<String> iter = map.keySet().iterator();\n        assertEquals(\"Alabama\", iter.next());\n        assertEquals(\"Albert\", iter.next());\n        assertEquals(\"Alberto\", iter.next());\n        assertEquals(\"Albertoo\", iter.next());\n        assertEquals(\"Alberts\", iter.next());\n        assertEquals(\"Alien\", iter.next());\n        iter.remove();\n        assertEquals(7, map.size());\n        assertEquals(\"Allie\", iter.next());\n        assertEquals(\"Alliese\", iter.next());\n        assertFalse(iter.hasNext());\n\n        map = trie.prefixMap(\"Ak\");\n        assertEquals(2, map.size());\n        iter = map.keySet().iterator();\n        assertEquals(\"Akka\", iter.next());\n        iter.remove();\n        assertEquals(1, map.size());\n        assertEquals(\"Akko\", iter.next());\n\n        final Iterator<String> iter1 = iter;\n        assertFalse(iter.hasNext(), () -> \"shouldn't have next (but was: \" + iter1.next() + \")\");\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "class_name": "PatriciaTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest.[void]testPrefixMapSizes()", "name": "testPrefixMapSizes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrefixMapSizes()", "original_string": "    @Test\n    public void testPrefixMapSizes() {\n        // COLLECTIONS-525\n        final PatriciaTrie<String> aTree = new PatriciaTrie<>();\n        aTree.put(\"\u70b9\u8bc4\", \"\u6d4b\u8bd5\");\n        aTree.put(\"\u4e66\u8bc4\", \"\u6d4b\u8bd5\");\n        assertTrue(aTree.prefixMap(\"\u70b9\").containsKey(\"\u70b9\u8bc4\"));\n        assertEquals(\"\u6d4b\u8bd5\", aTree.prefixMap(\"\u70b9\").get(\"\u70b9\u8bc4\"));\n        assertFalse(aTree.prefixMap(\"\u70b9\").isEmpty());\n        assertEquals(1, aTree.prefixMap(\"\u70b9\").size());\n        assertEquals(1, aTree.prefixMap(\"\u70b9\").size());\n        assertEquals(1, aTree.prefixMap(\"\u70b9\").entrySet().size());\n        assertEquals(1, aTree.prefixMap(\"\u70b9\u8bc4\").size());\n\n        aTree.clear();\n        aTree.put(\"\u70b9\u8bc4\", \"\u8054\u76df\");\n        aTree.put(\"\u70b9\u7248\", \"\u5b9a\u5411\");\n        assertEquals(2, aTree.prefixMap(\"\u70b9\").size());\n        assertEquals(2, aTree.prefixMap(\"\u70b9\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "class_name": "PatriciaTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest.[void]testPrefixMapSizes2()", "name": "testPrefixMapSizes2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPrefixMapSizes2()", "original_string": "    @Test\n    public void testPrefixMapSizes2() {\n        final char u8000 = Character.toChars(32768)[0]; // U+8000 (1000000000000000)\n        final char char_b = 'b'; // 1100010\n\n        final PatriciaTrie<String> trie = new PatriciaTrie<>();\n        final String prefixString = StringUtils.EMPTY + char_b;\n        final String longerString = prefixString + u8000;\n\n        assertEquals(1, prefixString.length());\n        assertEquals(2, longerString.length());\n\n        assertTrue(longerString.startsWith(prefixString));\n\n        trie.put(prefixString, \"prefixString\");\n        trie.put(longerString, \"longerString\");\n\n        assertEquals(2, trie.prefixMap(prefixString).size());\n        assertTrue(trie.prefixMap(prefixString).containsKey(longerString));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java", "class_name": "PatriciaTrieTest", "class_uri": "src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java.PatriciaTrieTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest.[void]testEmptyMap()", "name": "testEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyMap()", "original_string": "    @Test\n    public void testEmptyMap() throws IOException, ClassNotFoundException {\n        final TransformedSplitMap<String, String, String, String> map =\n                TransformedSplitMap.transformingMap(new HashMap<>(),\n                                                    NOPTransformer.<String>nopTransformer(),\n                                                    NOPTransformer.<String>nopTransformer() );\n\n        final ObjectInputStream in = new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + \"/TransformedSplitMap.emptyCollection.version4.obj\"));\n        final Object readObject = in.readObject();\n        in.close();\n\n        final TransformedSplitMap<?, ?, ?, ?> readMap = (TransformedSplitMap<?, ?, ?, ?>) readObject;\n        assertTrue(readMap.isEmpty(), \"Map should be empty\");\n        assertEquals(map.entrySet(), readMap.entrySet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java", "class_name": "TransformedSplitMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest.[void]testFullMap()", "name": "testFullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullMap()", "original_string": "    @Test\n    public void testFullMap() throws IOException, ClassNotFoundException {\n        final TransformedSplitMap<String, String, String, String> map = TransformedSplitMap.transformingMap(\n                new HashMap<>(),\n                NOPTransformer.<String>nopTransformer(),\n                NOPTransformer.<String>nopTransformer() );\n        map.put( \"a\", \"b\" );\n        map.put( \"c\", \"d\" );\n        map.put( \"e\", \"f\" );\n        map.put( \"g\", \"h\" );\n\n        final ObjectInputStream in = new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + \"TransformedSplitMap.fullCollection.version4.obj\"));\n        final Object readObject = in.readObject();\n        in.close();\n\n        final TransformedSplitMap<?, ?, ?, ?> readMap = (TransformedSplitMap<?, ?, ?, ?>) readObject;\n        assertFalse(readMap.isEmpty(), \"Map should not be empty\");\n        assertEquals(map.entrySet(), readMap.entrySet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java", "class_name": "TransformedSplitMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest.[void]testMapIterator()", "name": "testMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIterator()", "original_string": "    @Test\n    public void testMapIterator() {\n        final TransformedSplitMap<String, String, String, Integer> map =\n                TransformedSplitMap.transformingMap(new HashMap<>(),\n                                                    NOPTransformer.<String>nopTransformer(), stringToInt);\n        assertEquals(0, map.size());\n        for (int i = 0; i < 6; i++) {\n            map.put(String.valueOf(i), String.valueOf(i));\n        }\n\n        for (final MapIterator<String, Integer> it = map.mapIterator(); it.hasNext();) {\n            final String k = it.next();\n            assertEquals(k, it.getKey());\n            assertEquals(map.get(k), it.getValue());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java", "class_name": "TransformedSplitMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest.[void]testTransformedMap()", "name": "testTransformedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedMap()", "original_string": "    @Test\n    public void testTransformedMap() {\n        final TransformedSplitMap<Integer, String, Object, Class<?>> map = TransformedSplitMap.transformingMap(\n                new HashMap<>(), intToString, objectToClass);\n\n        final Integer[] k = { 0, 1, 2, 3, 4, 5, 6 };\n        final Object[] v = { StringUtils.EMPTY, new Object(), new HashMap<>(), 0, BigInteger.TEN, null,\n            new Object[0] };\n\n        assertEquals(0, map.size());\n        for (int i = 0; i < k.length; i++) {\n            map.put(k[i], v[i]);\n            assertEquals(i + 1, map.size());\n            assertTrue(map.containsKey(intToString.transform(k[i])));\n            assertFalse(map.containsKey(k[i]));\n            assertTrue(map.containsValue(objectToClass.transform(v[i])));\n            assertTrue(objectToClass.transform(v[i]) != v[i] ^ map.containsValue(v[i]));\n            assertEquals(objectToClass.transform(v[i]), map.get(intToString.transform(k[i])));\n        }\n\n        int sz = map.size();\n        assertNull(map.remove(k[0]));\n        assertEquals(sz, map.size());\n        assertEquals(objectToClass.transform(v[0]), map.remove(intToString.transform(k[0])));\n        assertEquals(--sz, map.size());\n\n        final TransformedSplitMap<String, String, String, Integer> map2 = TransformedSplitMap.transformingMap(\n                new HashMap<>(), NOPTransformer.<String>nopTransformer(), stringToInt);\n        assertEquals(0, map2.size());\n        for (int i = 0; i < 6; i++) {\n            map2.put(String.valueOf(i), String.valueOf(i));\n            assertEquals(i + 1, map2.size());\n            assertTrue(map2.containsValue(i));\n            assertFalse(map2.containsValue(String.valueOf(i)));\n            assertTrue(map2.containsKey(String.valueOf(i)));\n            assertEquals(i, map2.get(String.valueOf(i)).intValue());\n        }\n\n        int sz2 = map2.size();\n        assertEquals(Integer.valueOf(0), map2.remove(\"0\"));\n        assertEquals(--sz2, map2.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java", "class_name": "TransformedSplitMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java.TransformedSplitMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java.TransformedSplitMap_transformingMapTest.[void]testTransformingMap()", "name": "testTransformingMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformingMap()", "original_string": "    @Test\n    public void testTransformingMap() {\n        // Given\n        Map<String, Integer> map = new LinkedMap<>();\n        Transformer<String, String> keyTransformer = input -> input;\n        Transformer<Integer, Integer> valueTransformer = input -> input;\n\n        // When\n        TransformedSplitMap<String, String, Integer, Integer> transformedMap = TransformedSplitMap.transformingMap(map, keyTransformer, valueTransformer);\n\n        // Then\n        assertNotNull(transformedMap);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java", "class_name": "TransformedSplitMap_transformingMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java.TransformedSplitMap_transformingMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorEnumerationTest.java.IteratorEnumerationTest.[void]testEnumeration()", "name": "testEnumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnumeration()", "original_string": "    @Test\n    public void testEnumeration() {\n        final Iterator<String> iterator = Arrays.asList(\"a\", \"b\", \"c\").iterator();\n        final IteratorEnumeration<String> enumeration = new IteratorEnumeration<>(iterator);\n\n        assertEquals(iterator, enumeration.getIterator());\n\n        assertTrue(enumeration.hasMoreElements());\n        assertEquals(\"a\", enumeration.nextElement());\n        assertEquals(\"b\", enumeration.nextElement());\n        assertEquals(\"c\", enumeration.nextElement());\n        assertFalse(enumeration.hasMoreElements());\n\n        assertThrows(NoSuchElementException.class, () -> enumeration.nextElement());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorEnumerationTest.java", "class_name": "IteratorEnumerationTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorEnumerationTest.java.IteratorEnumerationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java.SingletonIteratorTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<E> iter = makeObject();\n        assertTrue(iter.hasNext(), \"Iterator has a first item\");\n\n        final E iterValue = iter.next();\n        assertEquals(testValue, iterValue, \"Iteration value is correct\");\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java", "class_name": "SingletonIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java.SingletonIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java.SingletonIteratorTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final ResettableIterator<E> it = makeObject();\n\n        assertTrue(it.hasNext());\n        assertEquals(testValue, it.next());\n        assertFalse(it.hasNext());\n\n        it.reset();\n\n        assertTrue(it.hasNext());\n        assertEquals(testValue, it.next());\n        assertFalse(it.hasNext());\n\n        it.reset();\n        it.reset();\n\n        assertTrue(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java", "class_name": "SingletonIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java.SingletonIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java.SingletonIteratorTest.[void]testSingletonIteratorRemove()", "name": "testSingletonIteratorRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSingletonIteratorRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSingletonIteratorRemove() {\n        final ResettableIterator<E> iter = new SingletonIterator<>((E) \"xyzzy\");\n        assertTrue(iter.hasNext());\n        assertEquals(\"xyzzy\", iter.next());\n        iter.remove();\n        iter.reset();\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java", "class_name": "SingletonIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIteratorTest.java.SingletonIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest.[void]testNextIndexWithElements()", "name": "testNextIndexWithElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextIndexWithElements()", "original_string": "    @Test\n    public void testNextIndexWithElements() {\n        assertEquals(0, loopingListIterator.nextIndex());\n        loopingListIterator.next();\n        assertEquals(1, loopingListIterator.nextIndex());\n        loopingListIterator.next();\n        assertEquals(2, loopingListIterator.nextIndex());\n        loopingListIterator.next();\n        assertEquals(0, loopingListIterator.nextIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "class_name": "LoopingListIterator_nextIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest.[void]testNextIndexWithEmptyList()", "name": "testNextIndexWithEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextIndexWithEmptyList()", "original_string": "    @Test\n    public void testNextIndexWithEmptyList() {\n        list = Arrays.asList();\n        loopingListIterator = new LoopingListIterator<>(list);\n        assertThrows(NoSuchElementException.class, () -> {\n            loopingListIterator.nextIndex();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "class_name": "LoopingListIterator_nextIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest.[void]testNextIndexAfterReset()", "name": "testNextIndexAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextIndexAfterReset()", "original_string": "    @Test\n    public void testNextIndexAfterReset() {\n        loopingListIterator.reset();\n        assertEquals(0, loopingListIterator.nextIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "class_name": "LoopingListIterator_nextIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest.[void]testNextIndexAfterFullIteration()", "name": "testNextIndexAfterFullIteration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextIndexAfterFullIteration()", "original_string": "    @Test\n    public void testNextIndexAfterFullIteration() {\n        loopingListIterator.next();\n        loopingListIterator.next();\n        loopingListIterator.next();\n        assertEquals(0, loopingListIterator.nextIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "class_name": "LoopingListIterator_nextIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java.LoopingListIterator_nextIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java.ObjectArrayIteratorTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<E> iter = makeObject();\n        for (final String testValue : testArray) {\n            final E iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java", "class_name": "ObjectArrayIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java.ObjectArrayIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java.ObjectArrayIteratorTest.[void]testNullArray()", "name": "testNullArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullArray()", "original_string": "    @Test\n    public void testNullArray() {\n        assertThrows(NullPointerException.class, () -> makeArrayIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java", "class_name": "ObjectArrayIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java.ObjectArrayIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java.ObjectArrayIteratorTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReset()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testReset() {\n        final ObjectArrayIterator<E> it = makeArrayIterator((E[]) testArray);\n        it.next();\n        it.reset();\n        assertEquals(\"One\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java", "class_name": "ObjectArrayIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java.ObjectArrayIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest.[void]testRepeatedHasNext()", "name": "testRepeatedHasNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepeatedHasNext()", "original_string": "    @Test\n    public void testRepeatedHasNext() {\n        for (int i = 0; i <= array.length; i++) {\n            assertTrue(iterator.hasNext());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "class_name": "FilterIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest.[void]testRepeatedNext()", "name": "testRepeatedNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unused\")\n    public void testRepeatedNext()", "original_string": "    @Test\n    @SuppressWarnings(\"unused\")\n    public void testRepeatedNext() {\n        for (final String element : array) {\n            iterator.next();\n        }\n        verifyNoMoreElements();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "class_name": "FilterIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unused\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unused\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest.[void]testReturnValues()", "name": "testReturnValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReturnValues()", "original_string": "    @Test\n    public void testReturnValues() {\n        verifyElementsInPredicate(ArrayUtils.EMPTY_STRING_ARRAY);\n        verifyElementsInPredicate(new String[] { \"a\" });\n        verifyElementsInPredicate(new String[] { \"b\" });\n        verifyElementsInPredicate(new String[] { \"c\" });\n        verifyElementsInPredicate(new String[] { \"a\", \"b\" });\n        verifyElementsInPredicate(new String[] { \"a\", \"c\" });\n        verifyElementsInPredicate(new String[] { \"b\", \"c\" });\n        verifyElementsInPredicate(new String[] { \"a\", \"b\", \"c\" });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "class_name": "FilterIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest.[void]testSetIterator()", "name": "testSetIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetIterator() {\n        final Iterator<E> iter1 = Collections.singleton((E) new Object()).iterator();\n        final Iterator<E> iter2 = Collections.<E>emptyList().iterator();\n\n        final FilterIterator<E> filterIterator = new FilterIterator<>(iter1);\n        filterIterator.setPredicate(truePredicate());\n        // this iterator has elements\n        assertTrue(filterIterator.hasNext());\n\n        // this iterator has no elements\n        filterIterator.setIterator(iter2);\n        assertFalse(filterIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "class_name": "FilterIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that when the iterator is changed, the hasNext method returns the\ncorrect response for the new iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest.[void]testSetPredicate()", "name": "testSetPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetPredicate()", "original_string": "    @Test\n    public void testSetPredicate() {\n        final Iterator<E> iter = Collections.singleton((E) null).iterator();\n\n        final FilterIterator<E> filterIterator = new FilterIterator<>(iter);\n        filterIterator.setPredicate(truePredicate());\n        // this predicate matches\n        assertTrue(filterIterator.hasNext());\n\n        // this predicate doesn't match\n        filterIterator.setPredicate(NotNullPredicate.notNullPredicate());\n        assertFalse(filterIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java", "class_name": "FilterIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java.FilterIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that when the predicate is changed, the hasNext method returns the\ncorrect response for the new predicate.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java.ArrayIteratorTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<E> iter = makeObject();\n        for (final String testValue : testArray) {\n            final E iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        assertThrows(NoSuchElementException.class, iter::next, \"NoSuchElementException must be thrown\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java", "class_name": "ArrayIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java.ArrayIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java.ArrayIteratorTest.[void]testNullArray()", "name": "testNullArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullArray()", "original_string": "    @Test\n    public void testNullArray() {\n        assertThrows(NullPointerException.class, () -> new ArrayIterator<>(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java", "class_name": "ArrayIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java.ArrayIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java.ArrayIteratorTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final ArrayIterator<E> it = makeObject();\n        it.next();\n        it.reset();\n        assertEquals(\"One\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java", "class_name": "ArrayIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java.ArrayIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdd()", "original_string": "    @Test\n    public void testAdd() {\n        ListIterator<E> it = makeObject();\n\n        final E addValue = addSetValue();\n        if (!supportsAdd()) {\n            // check for UnsupportedOperationException if not supported\n            final ListIterator<E> finalIt0 = it;\n            assertThrows(UnsupportedOperationException.class, () -> finalIt0.add(addValue),\n                    \"UnsupportedOperationException must be thrown from add of \" + it.getClass().getSimpleName());\n            return;\n        }\n\n        // add at start should be OK, added should be previous\n        it = makeObject();\n        it.add(addValue);\n        assertEquals(addValue, it.previous());\n\n        // add at start should be OK, added should not be next\n        it = makeObject();\n        it.add(addValue);\n        assertNotSame(addValue, it.next());\n\n        // add in middle and at end should be OK\n        it = makeObject();\n        while (it.hasNext()) {\n            it.next();\n            it.add(addValue);\n            // check add OK\n            assertEquals(addValue, it.previous());\n            it.next();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java", "class_name": "AbstractListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest add behavior.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest.[void]testAddThenRemove()", "name": "testAddThenRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddThenRemove()", "original_string": "    @Test\n    public void testAddThenRemove() {\n        final ListIterator<E> it = makeObject();\n\n        // add then remove\n        if (supportsAdd() && supportsRemove()) {\n            it.next();\n            it.add(addSetValue());\n            assertThrows(IllegalStateException.class, () -> it.remove(),\n                    \"IllegalStateException must be thrown from remove after add\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java", "class_name": "AbstractListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest remove after add behavior.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest.[void]testAddThenSet()", "name": "testAddThenSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddThenSet()", "original_string": "    @Test\n    public void testAddThenSet() {\n        final ListIterator<E> it = makeObject();\n        // add then set\n        if (supportsAdd() && supportsSet()) {\n            it.next();\n            it.add(addSetValue());\n            assertThrows(IllegalStateException.class, () -> it.set(addSetValue()),\n                    \"IllegalStateException must be thrown from set after add\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java", "class_name": "AbstractListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest.[void]testEmptyListIteratorIsIndeedEmpty()", "name": "testEmptyListIteratorIsIndeedEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyListIteratorIsIndeedEmpty()", "original_string": "    @Test\n    public void testEmptyListIteratorIsIndeedEmpty() {\n        if (!supportsEmptyIterator()) {\n            return;\n        }\n\n        final ListIterator<E> it = makeEmptyIterator();\n\n        assertFalse(it.hasNext());\n        assertEquals(0, it.nextIndex());\n        assertFalse(it.hasPrevious());\n        assertEquals(-1, it.previousIndex());\n\n        // next() should throw a NoSuchElementException\n        assertThrows(NoSuchElementException.class, () -> it.next(),\n                \"NoSuchElementException must be thrown from empty ListIterator\");\n\n        // previous() should throw a NoSuchElementException\n        assertThrows(NoSuchElementException.class, () -> it.previous(),\n                \"NoSuchElementException must be thrown from empty ListIterator\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java", "class_name": "AbstractListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that the empty list iterator contract is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest.[void]testRemoveThenSet()", "name": "testRemoveThenSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveThenSet()", "original_string": "    @Test\n    public void testRemoveThenSet() {\n        final ListIterator<E> it = makeObject();\n        if (supportsRemove() && supportsSet()) {\n            it.next();\n            it.remove();\n            assertThrows(IllegalStateException.class, () -> it.set(addSetValue()),\n                    \"IllegalStateException must be thrown from set after remove\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java", "class_name": "AbstractListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest.[void]testSet()", "name": "testSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSet()", "original_string": "    @Test\n    public void testSet() {\n        final ListIterator<E> it = makeObject();\n\n        if (!supportsSet()) {\n            // check for UnsupportedOperationException if not supported\n            assertThrows(UnsupportedOperationException.class, () -> it.set(addSetValue()),\n                    \"UnsupportedOperationException must be thrown from set in \" + it.getClass().getSimpleName());\n            return;\n        }\n\n        // should throw IllegalStateException before next() called\n        assertThrows(IllegalStateException.class, () -> it.set(addSetValue()));\n\n        // set after next should be fine\n        it.next();\n        it.set(addSetValue());\n\n        // repeated set calls should be fine\n        it.set(addSetValue());\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java", "class_name": "AbstractListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest set behavior.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest.[void]testWalkForwardAndBack()", "name": "testWalkForwardAndBack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWalkForwardAndBack()", "original_string": "    @Test\n    public void testWalkForwardAndBack() {\n        final ArrayList<E> list = new ArrayList<>();\n        final ListIterator<E> it = makeObject();\n        while (it.hasNext()) {\n            list.add(it.next());\n        }\n\n        // check state at end\n        assertFalse(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertThrows(NoSuchElementException.class, () -> it.next(),\n                \"NoSuchElementException must be thrown from next at end of ListIterator\");\n\n        // loop back through comparing\n        for (int i = list.size() - 1; i >= 0; i--) {\n            assertEquals(i + 1, it.nextIndex());\n            assertEquals(i, it.previousIndex());\n\n            final Object obj = list.get(i);\n            assertEquals(obj, it.previous());\n        }\n\n        // check state at start\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertThrows(NoSuchElementException.class, () -> it.previous(),\n                \"NoSuchElementException must be thrown from previous at start of ListIterator\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java", "class_name": "AbstractListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractListIteratorTest.java.AbstractListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest navigation through the iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIteratorTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        OrderedMapIterator<K, V> it = makeObject();\n        assertSame(it, UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(it));\n\n        it = getMap().mapIterator();\n        assertNotSame(it, UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(it));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java", "class_name": "UnmodifiableOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIteratorTest.[void]testOrderedMapIterator()", "name": "testOrderedMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrderedMapIterator()", "original_string": "    @Test\n    public void testOrderedMapIterator() {\n        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java", "class_name": "UnmodifiableOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java.PushbackIterator_pushbackIteratorTest.[void]testPushbackIteratorWithNonNullIterator()", "name": "testPushbackIteratorWithNonNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPushbackIteratorWithNonNullIterator()", "original_string": "    @Test\n    void testPushbackIteratorWithNonNullIterator() {\n        // Given\n        Iterator<String> mockIterator = mock(Iterator.class);\n\n        // When\n        PushbackIterator<String> result = PushbackIterator.pushbackIterator(mockIterator);\n\n        // Then\n        assertNotNull(result);\n        assertNotSame(mockIterator, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "class_name": "PushbackIterator_pushbackIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java.PushbackIterator_pushbackIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java.PushbackIterator_pushbackIteratorTest.[void]testPushbackIteratorWithPushbackIteratorInstance()", "name": "testPushbackIteratorWithPushbackIteratorInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPushbackIteratorWithPushbackIteratorInstance()", "original_string": "    @Test\n    void testPushbackIteratorWithPushbackIteratorInstance() {\n        // Given\n        PushbackIterator<String> mockPushbackIterator = mock(PushbackIterator.class);\n\n        // When\n        PushbackIterator<String> result = PushbackIterator.pushbackIterator(mockPushbackIterator);\n\n        // Then\n        assertSame(mockPushbackIterator, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "class_name": "PushbackIterator_pushbackIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java.PushbackIterator_pushbackIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java.PushbackIterator_pushbackIteratorTest.[void]testPushbackIteratorWithNullIterator()", "name": "testPushbackIteratorWithNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPushbackIteratorWithNullIterator()", "original_string": "    @Test\n    void testPushbackIteratorWithNullIterator() {\n        // Given\n        Iterator<String> nullIterator = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            PushbackIterator.pushbackIterator(nullIterator);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "class_name": "PushbackIterator_pushbackIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java.PushbackIterator_pushbackIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest.[void]testEmptyChain()", "name": "testEmptyChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyChain()", "original_string": "    @Test\n    public void testEmptyChain() {\n        final IteratorChain<Object> chain = new IteratorChain<>();\n        assertFalse(chain.hasNext());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> chain.next()),\n                () -> assertThrows(IllegalStateException.class, () -> chain.remove())\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "class_name": "IteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest.[void]testFirstIteratorIsEmptyBug()", "name": "testFirstIteratorIsEmptyBug", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFirstIteratorIsEmptyBug()", "original_string": "    @Test\n    public void testFirstIteratorIsEmptyBug() {\n        final List<String> empty = new ArrayList<>();\n        final List<String> notEmpty = new ArrayList<>();\n        notEmpty.add(\"A\");\n        notEmpty.add(\"B\");\n        notEmpty.add(\"C\");\n        final IteratorChain<String> chain = new IteratorChain<>();\n        chain.addIterator(empty.iterator());\n        chain.addIterator(notEmpty.iterator());\n        assertTrue(chain.hasNext(), \"should have next\");\n        assertEquals(\"A\", chain.next());\n        assertTrue(chain.hasNext(), \"should have next\");\n        assertEquals(\"B\", chain.next());\n        assertTrue(chain.hasNext(), \"should have next\");\n        assertEquals(\"C\", chain.next());\n        assertFalse(chain.hasNext(), \"should not have next\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "class_name": "IteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<String> iter = makeObject();\n        for (final String testValue : testArray) {\n            final Object iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "class_name": "IteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testRemove()", "original_string": "    @Test\n    @Override\n    public void testRemove() {\n        final Iterator<String> iter = makeObject();\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(),\n                \"Calling remove before the first call to next() should throw an exception\");\n\n        for (final String testValue : testArray) {\n            final String iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n\n            if (!iterValue.equals(\"Four\")) {\n                iter.remove();\n            }\n        }\n\n        assertTrue(list1.isEmpty(), \"List is empty\");\n        assertEquals(1, list2.size(), \"List is empty\");\n        assertTrue(list3.isEmpty(), \"List is empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "class_name": "IteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest.[void]testRemoveFromFilteredIterator()", "name": "testRemoveFromFilteredIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromFilteredIterator()", "original_string": "    @Test\n    public void testRemoveFromFilteredIterator() {\n\n        final Predicate<Integer> myPredicate = i -> i.compareTo(Integer.valueOf(4)) < 0;\n\n        final List<Integer> list1 = new ArrayList<>();\n        final List<Integer> list2 = new ArrayList<>();\n\n        list1.add(Integer.valueOf(1));\n        list1.add(Integer.valueOf(2));\n        list2.add(Integer.valueOf(3));\n        list2.add(Integer.valueOf(4)); // will be ignored by the predicate\n\n        final Iterator<Integer> it1 = IteratorUtils.filteredIterator(list1.iterator(), myPredicate);\n        final Iterator<Integer> it2 = IteratorUtils.filteredIterator(list2.iterator(), myPredicate);\n\n        final Iterator<Integer> it = IteratorUtils.chainedIterator(it1, it2);\n        while (it.hasNext()) {\n            it.next();\n            it.remove();\n        }\n        assertEquals(0, list1.size());\n        assertEquals(1, list2.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java", "class_name": "IteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java.IteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testNegativeOffset()", "name": "testNegativeOffset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNegativeOffset()", "original_string": "    @Test\n    public void testNegativeOffset() {\n        assertThrows(IllegalArgumentException.class, () -> new SkippingIterator<>(testList.iterator(), -1),\n                \"Expected IllegalArgumentException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if a negative {@code offset} is passed to the\nconstructor. {@link IllegalArgumentException} is expected.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testOffsetGreaterThanSize()", "name": "testOffsetGreaterThanSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOffsetGreaterThanSize()", "original_string": "    @Test\n    public void testOffsetGreaterThanSize() {\n        final Iterator<E> iter = new SkippingIterator<>(testList.iterator(), 10);\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if the {@code offset} passed to the constructor is\ngreater than the decorated iterator's size. The SkippingIterator should\nbehave as if there are no more elements to return.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testRemoveCalledTwice()", "name": "testRemoveCalledTwice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveCalledTwice()", "original_string": "    @Test\n    public void testRemoveCalledTwice() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new SkippingIterator<>(testListCopy.iterator(), 1);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        iter.remove();\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(),\n                \"Expected IllegalStateException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the {@code remove()} method being called twice without calling\n{@code next()} in between.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testRemoveFirst()", "name": "testRemoveFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFirst()", "original_string": "    @Test\n    public void testRemoveFirst() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new SkippingIterator<>(testListCopy.iterator(), 4);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n\n        iter.remove();\n        assertFalse(testListCopy.contains(\"e\"));\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"g\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest removing the first element. Verify that the element is removed from\nthe underlying collection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testRemoveLast()", "name": "testRemoveLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveLast()", "original_string": "    @Test\n    public void testRemoveLast() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new SkippingIterator<>(testListCopy.iterator(), 5);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"g\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n\n        iter.remove();\n        assertFalse(testListCopy.contains(\"g\"));\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest removing the last element. Verify that the element is removed from\nthe underlying collection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testRemoveMiddle()", "name": "testRemoveMiddle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMiddle()", "original_string": "    @Test\n    public void testRemoveMiddle() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new SkippingIterator<>(testListCopy.iterator(), 3);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n\n        iter.remove();\n        assertFalse(testListCopy.contains(\"d\"));\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"g\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest removing an element in the middle of the iterator. Verify that the\nelement is removed from the underlying collection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testRemoveUnsupported()", "name": "testRemoveUnsupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveUnsupported()", "original_string": "    @Test\n    public void testRemoveUnsupported() {\n        final Iterator<E> mockIterator = new AbstractIteratorDecorator<E>(testList.iterator()) {\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n\n        final Iterator<E> iter = new SkippingIterator<>(mockIterator, 1);\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n\n        assertThrows(UnsupportedOperationException.class, () -> iter.remove(),\n                \"Expected UnsupportedOperationException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if the decorated iterator does not support the\n{@code remove()} method and throws an {@link UnsupportedOperationException}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testRemoveWithoutCallingNext()", "name": "testRemoveWithoutCallingNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithoutCallingNext()", "original_string": "    @Test\n    public void testRemoveWithoutCallingNext() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new SkippingIterator<>(testListCopy.iterator(), 1);\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(),\n                \"Expected IllegalStateException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the {@code remove()} method being called without\n{@code next()} being called first.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testSameAsDecorated()", "name": "testSameAsDecorated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSameAsDecorated()", "original_string": "    @Test\n    public void testSameAsDecorated() {\n        final Iterator<E> iter = new SkippingIterator<>(testList.iterator(), 0);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"a\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"g\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a decorated iterator bounded such that the {@code offset} is\nzero, in that the SkippingIterator should return all the same elements\nas its decorated iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest.[void]testSkipping()", "name": "testSkipping", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSkipping()", "original_string": "    @Test\n    public void testSkipping() {\n        final Iterator<E> iter = new SkippingIterator<>(testList.iterator(), 2);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"g\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java", "class_name": "SkippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java.SkippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a decorated iterator bounded such that the first element returned is\nat an index greater its first element, and the last element returned is\nat an index less than its last element.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest.[void]testSetSuccess()", "name": "testSetSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetSuccess()", "original_string": "    @Test\n    public void testSetSuccess() {\n        iterator.next();\n        Object newValue = new Object();\n        iterator.set(newValue);\n        iterator.reset(); // Reset the iterator to its initial state\n        assertEquals(newValue, iterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "class_name": "SingletonListIterator_setTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest.[void]testSetWithoutNextCall()", "name": "testSetWithoutNextCall", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetWithoutNextCall()", "original_string": "    @Test\n    public void testSetWithoutNextCall() {\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.set(new Object());\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "class_name": "SingletonListIterator_setTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest.[void]testSetAfterRemove()", "name": "testSetAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetAfterRemove()", "original_string": "    @Test\n    public void testSetAfterRemove() {\n        iterator.next();\n        iterator.remove();\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.set(new Object());\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "class_name": "SingletonListIterator_setTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest.[void]testSetAfterReset()", "name": "testSetAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetAfterReset()", "original_string": "    @Test\n    public void testSetAfterReset() {\n        iterator.next();\n        iterator.reset();\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.set(new Object());\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "class_name": "SingletonListIterator_setTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java.SingletonListIterator_setTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java.ObjectArrayListIteratorTest.[void]testListIterator()", "name": "testListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListIterator()", "original_string": "    @Test\n    public void testListIterator() {\n        final ListIterator<E> iter = makeObject();\n\n        // TestArrayIterator#testIterator() has already tested the iterator forward,\n        //  now we need to test it in reverse\n\n        // fast-forward the iterator to the end...\n        while (iter.hasNext()) {\n            iter.next();\n        }\n\n        for (int x = testArray.length - 1; x >= 0; x--) {\n            final Object testValue = testArray[x];\n            final Object iterValue = iter.previous();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasPrevious(), \"Iterator should now be empty\");\n\n        try {\n            iter.previous();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java", "class_name": "ObjectArrayListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java.ObjectArrayListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the basic ListIterator functionality - going backwards using\n{@code previous()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java.ObjectArrayListIteratorTest.[void]testListIteratorSet()", "name": "testListIteratorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorSet() {\n        final String[] testData = { \"a\", \"b\", \"c\" };\n\n        final String[] result = { \"0\", \"1\", \"2\" };\n\n        ListIterator<E> iter = makeArrayListIterator((E[]) testData);\n        int x = 0;\n\n        while (iter.hasNext()) {\n            iter.next();\n            iter.set((E) Integer.toString(x));\n            x++;\n        }\n\n        assertArrayEquals(testData, result, \"The two arrays should have the same value, i.e. {0,1,2}\");\n\n        // a call to set() before a call to next() or previous() should throw an IllegalStateException\n        iter = makeArrayListIterator((E[]) testArray);\n\n        final ListIterator<E> finalIter = iter;\n        assertThrows(IllegalStateException.class, () -> finalIter.set((E) \"should fail\"), \"ListIterator#set should fail if next() or previous() have not yet been called.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java", "class_name": "ObjectArrayListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayListIteratorTest.java.ObjectArrayListIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the {@link java.util.ListIterator#set} operation.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteration_IteratorOfIterators()", "name": "testIteration_IteratorOfIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteration_IteratorOfIterators()", "original_string": "    @Test\n    public void testIteration_IteratorOfIterators() {\n        final List<Iterator<String>> iteratorList = new ArrayList<>();\n        iteratorList.add(list1.iterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(list3.iterator());\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator(), null);\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(it.hasNext());\n            assertEquals(testArray[i], it.next());\n        }\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteration_IteratorOfIteratorsWithEmptyIterators()", "name": "testIteration_IteratorOfIteratorsWithEmptyIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteration_IteratorOfIteratorsWithEmptyIterators()", "original_string": "    @Test\n    public void testIteration_IteratorOfIteratorsWithEmptyIterators() {\n        final List<Iterator<String>> iteratorList = new ArrayList<>();\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        iteratorList.add(list1.iterator());\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        iteratorList.add(list3.iterator());\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator(), null);\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(it.hasNext());\n            assertEquals(testArray[i], it.next());\n        }\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteration_RootNoTransformer()", "name": "testIteration_RootNoTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteration_RootNoTransformer()", "original_string": "    @Test\n    public void testIteration_RootNoTransformer() {\n        final Forest forest = new Forest();\n        final Iterator<Object> it = new ObjectGraphIterator<>(forest, null);\n\n        assertTrue(it.hasNext());\n        assertSame(forest, it.next());\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteration_RootNull()", "name": "testIteration_RootNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteration_RootNull()", "original_string": "    @Test\n    public void testIteration_RootNull() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(null, null);\n\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteration_Transformed1()", "name": "testIteration_Transformed1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteration_Transformed1()", "original_string": "    @Test\n    public void testIteration_Transformed1() {\n        final Forest forest = new Forest();\n        final Leaf l1 = forest.addTree().addBranch().addLeaf();\n        final Iterator<Object> it = new ObjectGraphIterator<>(forest, new LeafFinder());\n\n        assertTrue(it.hasNext());\n        assertSame(l1, it.next());\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteration_Transformed2()", "name": "testIteration_Transformed2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteration_Transformed2()", "original_string": "    @Test\n    public void testIteration_Transformed2() {\n        final Forest forest = new Forest();\n        forest.addTree();\n        forest.addTree();\n        forest.addTree();\n        final Branch b1 = forest.getTree(0).addBranch();\n        final Branch b2 = forest.getTree(0).addBranch();\n        final Branch b3 = forest.getTree(2).addBranch();\n        /* Branch b4 = */ forest.getTree(2).addBranch();\n        final Branch b5 = forest.getTree(2).addBranch();\n        final Leaf l1 = b1.addLeaf();\n        final Leaf l2 = b1.addLeaf();\n        final Leaf l3 = b2.addLeaf();\n        final Leaf l4 = b3.addLeaf();\n        final Leaf l5 = b5.addLeaf();\n\n        final Iterator<Object> it = new ObjectGraphIterator<>(forest, new LeafFinder());\n\n        assertTrue(it.hasNext());\n        assertSame(l1, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l2, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l3, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l4, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l5, it.next());\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteration_Transformed3()", "name": "testIteration_Transformed3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteration_Transformed3()", "original_string": "    @Test\n    public void testIteration_Transformed3() {\n        final Forest forest = new Forest();\n        forest.addTree();\n        forest.addTree();\n        forest.addTree();\n        final Branch b1 = forest.getTree(1).addBranch();\n        final Branch b2 = forest.getTree(1).addBranch();\n        final Branch b3 = forest.getTree(2).addBranch();\n        final Branch b4 = forest.getTree(2).addBranch();\n        /* Branch b5 = */ forest.getTree(2).addBranch();\n        final Leaf l1 = b1.addLeaf();\n        final Leaf l2 = b1.addLeaf();\n        final Leaf l3 = b2.addLeaf();\n        final Leaf l4 = b3.addLeaf();\n        final Leaf l5 = b4.addLeaf();\n\n        final Iterator<Object> it = new ObjectGraphIterator<>(forest, new LeafFinder());\n\n        assertTrue(it.hasNext());\n        assertSame(l1, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l2, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l3, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l4, it.next());\n        assertTrue(it.hasNext());\n        assertSame(l5, it.next());\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructor_null_next()", "name": "testIteratorConstructor_null_next", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructor_null_next()", "original_string": "    @Test\n    public void testIteratorConstructor_null_next() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(null);\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructor_null_remove()", "name": "testIteratorConstructor_null_remove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructor_null_remove()", "original_string": "    @Test\n    public void testIteratorConstructor_null_remove() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(null);\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructor_null1()", "name": "testIteratorConstructor_null1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructor_null1()", "original_string": "    @Test\n    public void testIteratorConstructor_null1() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(null);\n\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructorIteration_Empty()", "name": "testIteratorConstructorIteration_Empty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructorIteration_Empty()", "original_string": "    @Test\n    public void testIteratorConstructorIteration_Empty() {\n        final List<Iterator<Object>> iteratorList = new ArrayList<>();\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructorIteration_Simple()", "name": "testIteratorConstructorIteration_Simple", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructorIteration_Simple()", "original_string": "    @Test\n    public void testIteratorConstructorIteration_Simple() {\n        final List<Iterator<String>> iteratorList = new ArrayList<>();\n        iteratorList.add(list1.iterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(list3.iterator());\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(it.hasNext());\n            assertEquals(testArray[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructorIteration_SimpleNoHasNext()", "name": "testIteratorConstructorIteration_SimpleNoHasNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructorIteration_SimpleNoHasNext()", "original_string": "    @Test\n    public void testIteratorConstructorIteration_SimpleNoHasNext() {\n        final List<Iterator<String>> iteratorList = new ArrayList<>();\n        iteratorList.add(list1.iterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(list3.iterator());\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        for (int i = 0; i < 6; i++) {\n            assertEquals(testArray[i], it.next());\n        }\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructorIteration_WithEmptyIterators()", "name": "testIteratorConstructorIteration_WithEmptyIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructorIteration_WithEmptyIterators()", "original_string": "    @Test\n    public void testIteratorConstructorIteration_WithEmptyIterators() {\n        final List<Iterator<String>> iteratorList = new ArrayList<>();\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        iteratorList.add(list1.iterator());\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        iteratorList.add(list3.iterator());\n        iteratorList.add(IteratorUtils.<String>emptyIterator());\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        for (int i = 0; i < 6; i++) {\n            assertTrue(it.hasNext());\n            assertEquals(testArray[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest.[void]testIteratorConstructorRemove()", "name": "testIteratorConstructorRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorConstructorRemove()", "original_string": "    @Test\n    public void testIteratorConstructorRemove() {\n        final List<Iterator<String>> iteratorList = new ArrayList<>();\n        iteratorList.add(list1.iterator());\n        iteratorList.add(list2.iterator());\n        iteratorList.add(list3.iterator());\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator());\n\n        for (int i = 0; i < 6; i++) {\n            assertEquals(testArray[i], it.next());\n            it.remove();\n        }\n        assertFalse(it.hasNext());\n        assertEquals(0, list1.size());\n        assertEquals(0, list2.size());\n        assertEquals(0, list3.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java", "class_name": "ObjectGraphIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java.ObjectGraphIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest.[void]testPreviousSuccess()", "name": "testPreviousSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousSuccess()", "original_string": "    @Test\n    public void testPreviousSuccess() {\n        iterator.next(); // Move to the object\n        Object previousValue = iterator.previous();\n        assertEquals(testValue, previousValue, \"Previous value should be the same as the initial object\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "class_name": "SingletonListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest.[void]testPreviousBeforeFirst()", "name": "testPreviousBeforeFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousBeforeFirst()", "original_string": "    @Test\n    public void testPreviousBeforeFirst() {\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.previous();\n        }, \"Calling previous before first should throw NoSuchElementException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "class_name": "SingletonListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest.[void]testPreviousAfterRemove()", "name": "testPreviousAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousAfterRemove()", "original_string": "    @Test\n    public void testPreviousAfterRemove() {\n        iterator.next(); // Move to the object\n        iterator.remove(); // Remove the object\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.previous();\n        }, \"Calling previous after remove should throw NoSuchElementException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "class_name": "SingletonListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest.[void]testPreviousAfterReset()", "name": "testPreviousAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousAfterReset()", "original_string": "    @Test\n    public void testPreviousAfterReset() {\n        iterator.next(); // Move to the object\n        iterator.reset(); // Reset the iterator\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.previous();\n        }, \"Calling previous after reset should throw NoSuchElementException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "class_name": "SingletonListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java.SingletonListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java.NodeListIteratorTest.[void]testEmptyIteratorWithNodeConstructor()", "name": "testEmptyIteratorWithNodeConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIteratorWithNodeConstructor()", "original_string": "    @Test\n    public void testEmptyIteratorWithNodeConstructor() {\n        createIteratorWithStandardConstr = false;\n        testEmptyIterator();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java", "class_name": "NodeListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java.NodeListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntests the convenience Constructor with parameter type org.w3c.Node\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java.NodeListIteratorTest.[void]testFullIteratorWithNodeConstructor()", "name": "testFullIteratorWithNodeConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullIteratorWithNodeConstructor()", "original_string": "    @Test\n    public void testFullIteratorWithNodeConstructor() {\n        createIteratorWithStandardConstr = false;\n        testFullIterator();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java", "class_name": "NodeListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java.NodeListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntests the convenience Constructor with parameter type org.w3c.Node\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java.NodeListIteratorTest.[void]testNullConstructor()", "name": "testNullConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullConstructor()", "original_string": "    @Test\n    public void testNullConstructor() {\n        assertThrows(NullPointerException.class, () -> new NodeListIterator((Node) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java", "class_name": "NodeListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java.NodeListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest.[void]testDelayedPushback()", "name": "testDelayedPushback", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testDelayedPushback()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testDelayedPushback() {\n        final PushbackIterator<E> iter = makeObject();\n        assertEquals(\"a\", iter.next());\n        iter.pushback((E) \"x\");\n        assertEquals(\"x\", iter.next());\n        assertEquals(\"b\", iter.next());\n        validate(iter, \"c\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java", "class_name": "PushbackIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest.[void]testImmediatePushback()", "name": "testImmediatePushback", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testImmediatePushback()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testImmediatePushback() {\n        final PushbackIterator<E> iter = makeObject();\n        iter.pushback((E) \"x\");\n        assertEquals(\"x\", iter.next());\n        assertEquals(\"a\", iter.next());\n        validate(iter, \"b\", \"c\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java", "class_name": "PushbackIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest.[void]testMultiplePushback()", "name": "testMultiplePushback", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiplePushback()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiplePushback() {\n        final PushbackIterator<E> iter = makeObject();\n        assertEquals(\"a\", iter.next());\n        iter.pushback((E) \"x\");\n        iter.pushback((E) \"y\");\n        assertEquals(\"y\", iter.next());\n        assertEquals(\"x\", iter.next());\n        assertEquals(\"b\", iter.next());\n        validate(iter, \"c\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java", "class_name": "PushbackIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest.[void]testNormalIteration()", "name": "testNormalIteration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNormalIteration()", "original_string": "    @Test\n    public void testNormalIteration() {\n        final PushbackIterator<E> iter = makeObject();\n        assertEquals(\"a\", iter.next());\n        assertEquals(\"b\", iter.next());\n        assertEquals(\"c\", iter.next());\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java", "class_name": "PushbackIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java.PushbackIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java.SingletonListIteratorTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final ListIterator<E> iter = makeObject();\n        assertTrue(iter.hasNext(), \"Iterator should have next item\");\n        assertFalse(iter.hasPrevious(), \"Iterator should have no previous item\");\n        assertEquals(0, iter.nextIndex(), \"Iteration next index\");\n        assertEquals(-1, iter.previousIndex(), \"Iteration previous index\");\n\n        Object iterValue = iter.next();\n        assertEquals(testValue, iterValue, \"Iteration value is correct\");\n\n        assertFalse(iter.hasNext(), \"Iterator should have no next item\");\n        assertTrue(iter.hasPrevious(), \"Iterator should have previous item\");\n        assertEquals(1, iter.nextIndex(), \"Iteration next index\");\n        assertEquals(0, iter.previousIndex(), \"Iteration previous index\");\n\n        iterValue = iter.previous();\n        assertEquals(testValue, iterValue, \"Iteration value is correct\");\n\n        assertTrue(iter.hasNext(), \"Iterator should have next item\");\n        assertFalse(iter.hasPrevious(), \"Iterator should have no previous item\");\n        assertEquals(0, iter.nextIndex(), \"Iteration next index\");\n        assertEquals(-1, iter.previousIndex(), \"Iteration previous index\");\n\n        iterValue = iter.next();\n        assertEquals(testValue, iterValue, \"Iteration value is correct\");\n\n        assertFalse(iter.hasNext(), \"Iterator should have no next item\");\n        assertTrue(iter.hasPrevious(), \"Iterator should have previous item\");\n        assertEquals(1, iter.nextIndex(), \"Iteration next index\");\n        assertEquals(0, iter.previousIndex(), \"Iteration previous index\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n        iter.previous();\n        try {\n            iter.previous();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java", "class_name": "SingletonListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java.SingletonListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java.SingletonListIteratorTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final ResettableListIterator<E> it = makeObject();\n\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertEquals(testValue, it.next());\n        assertFalse(it.hasNext());\n        assertTrue(it.hasPrevious());\n\n        it.reset();\n\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertEquals(testValue, it.next());\n        assertFalse(it.hasNext());\n        assertTrue(it.hasPrevious());\n\n        it.reset();\n        it.reset();\n\n        assertTrue(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java", "class_name": "SingletonListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIteratorTest.java.SingletonListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java.ObjectArrayIterator_nextTest.[void]testNextWithElements()", "name": "testNextWithElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithElements()", "original_string": "    @Test\n    public void testNextWithElements() {\n        assertEquals(\"One\", iterator.next());\n        assertEquals(\"Two\", iterator.next());\n        assertEquals(\"Three\", iterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "class_name": "ObjectArrayIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java.ObjectArrayIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java.ObjectArrayIterator_nextTest.[void]testNextWithoutElements()", "name": "testNextWithoutElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithoutElements()", "original_string": "    @Test\n    public void testNextWithoutElements() {\n        iterator.next();\n        iterator.next();\n        iterator.next();\n        assertThrows(NoSuchElementException.class, () -> {\n            iterator.next();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "class_name": "ObjectArrayIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java.ObjectArrayIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java.ObjectArrayIterator_nextTest.[void]testNextAfterReset()", "name": "testNextAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAfterReset()", "original_string": "    @Test\n    public void testNextAfterReset() {\n        assertEquals(\"One\", iterator.next());\n        iterator.reset();\n        assertEquals(\"One\", iterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "class_name": "ObjectArrayIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java.ObjectArrayIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest.[void]testEmptyChain()", "name": "testEmptyChain", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyChain()", "original_string": "    @Test\n    public void testEmptyChain() {\n        final LazyIteratorChain<String> chain = makeEmptyIterator();\n        assertFalse(chain.hasNext());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> chain.next()),\n                () -> assertThrows(IllegalStateException.class, () -> chain.remove())\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "class_name": "LazyIteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest.[void]testFirstIteratorIsEmptyBug()", "name": "testFirstIteratorIsEmptyBug", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFirstIteratorIsEmptyBug()", "original_string": "    @Test\n    public void testFirstIteratorIsEmptyBug() {\n        final List<String> empty = new ArrayList<>();\n        final List<String> notEmpty = new ArrayList<>();\n        notEmpty.add(\"A\");\n        notEmpty.add(\"B\");\n        notEmpty.add(\"C\");\n        final LazyIteratorChain<String> chain = new LazyIteratorChain<String>() {\n            @Override\n            protected Iterator<String> nextIterator(final int count) {\n                switch (count) {\n                case 1:\n                    return empty.iterator();\n                case 2:\n                    return notEmpty.iterator();\n                }\n                return null;\n            }\n        };\n        assertTrue(chain.hasNext(), \"should have next\");\n        assertEquals(\"A\", chain.next());\n        assertTrue(chain.hasNext(), \"should have next\");\n        assertEquals(\"B\", chain.next());\n        assertTrue(chain.hasNext(), \"should have next\");\n        assertEquals(\"C\", chain.next());\n        assertFalse(chain.hasNext(), \"should not have next\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "class_name": "LazyIteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<String> iter = makeObject();\n        for (final String testValue : testArray) {\n            final Object iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "class_name": "LazyIteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testRemove()", "original_string": "    @Test\n    @Override\n    public void testRemove() {\n        final Iterator<String> iter = makeObject();\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(),\n                \"Calling remove before the first call to next() should throw an exception\");\n\n        for (final String testValue : testArray) {\n            final String iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n\n            if (!iterValue.equals(\"Four\")) {\n                iter.remove();\n            }\n        }\n\n        assertTrue(list1.isEmpty(), \"List is empty\");\n        assertEquals(1, list2.size(), \"List is empty\");\n        assertTrue(list3.isEmpty(), \"List is empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "class_name": "LazyIteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest.[void]testRemoveFromFilteredIterator()", "name": "testRemoveFromFilteredIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromFilteredIterator()", "original_string": "    @Test\n    public void testRemoveFromFilteredIterator() {\n\n        final Predicate<Integer> myPredicate = i -> i.compareTo(Integer.valueOf(4)) < 0;\n\n        final List<Integer> list1 = new ArrayList<>();\n        final List<Integer> list2 = new ArrayList<>();\n\n        list1.add(Integer.valueOf(1));\n        list1.add(Integer.valueOf(2));\n        list2.add(Integer.valueOf(3));\n        list2.add(Integer.valueOf(4)); // will be ignored by the predicate\n\n        final Iterator<Integer> it1 = IteratorUtils.filteredIterator(list1.iterator(), myPredicate);\n        final Iterator<Integer> it2 = IteratorUtils.filteredIterator(list2.iterator(), myPredicate);\n\n        final Iterator<Integer> it = IteratorUtils.chainedIterator(it1, it2);\n        while (it.hasNext()) {\n            it.next();\n            it.remove();\n        }\n        assertEquals(0, list1.size());\n        assertEquals(1, list2.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java", "class_name": "LazyIteratorChainTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java.LazyIteratorChainTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java.SingletonIterator2Test.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<E> iter = makeObject();\n        assertTrue(iter.hasNext(), \"Iterator has a first item\");\n\n        final E iterValue = iter.next();\n        assertEquals(testValue, iterValue, \"Iteration value is correct\");\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java", "class_name": "SingletonIterator2Test", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java.SingletonIterator2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java.SingletonIterator2Test.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final ResettableIterator<E> it = makeObject();\n\n        assertTrue(it.hasNext());\n        assertEquals(testValue, it.next());\n        assertFalse(it.hasNext());\n\n        it.reset();\n\n        assertTrue(it.hasNext());\n        assertEquals(testValue, it.next());\n        assertFalse(it.hasNext());\n\n        it.reset();\n        it.reset();\n\n        assertTrue(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java", "class_name": "SingletonIterator2Test", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator2Test.java.SingletonIterator2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testCollections360()", "name": "testCollections360", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollections360()", "original_string": "    @Test\n    public void testCollections360() throws Throwable {\n        final Collection<Predicate<Object>> var7 = new GrowthList<>();\n        final Predicate<Object> var9 = PredicateUtils.anyPredicate(var7);\n        final FilterListIterator<Object> var13 = new FilterListIterator<>(var9);\n        assertFalse(var13.hasNext());\n        final FilterListIterator<Object> var14 = new FilterListIterator<>(var9);\n        assertFalse(var14.hasPrevious());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest for {@link \"https://issues.apache.org/jira/browse/COLLECTIONS-360 COLLECTIONS-360\"}\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testEvens()", "name": "testEvens", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEvens()", "original_string": "    @Test\n    public void testEvens() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), evenPred);\n        walkLists(evens, filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testFailingHasNextBug()", "name": "testFailingHasNextBug", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFailingHasNextBug()", "original_string": "    @Test\n    public void testFailingHasNextBug() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), fourPred);\n        final ListIterator<Integer> expected = fours.listIterator();\n        while (expected.hasNext()) {\n            expected.next();\n            filtered.next();\n        }\n        assertTrue(filtered.hasPrevious());\n        assertFalse(filtered.hasNext());\n        assertEquals(expected.previous(), filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testFalsePredicate()", "name": "testFalsePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFalsePredicate()", "original_string": "    @Test\n    public void testFalsePredicate() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), falsePred);\n        walkLists(new ArrayList<>(), filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testFours()", "name": "testFours", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFours()", "original_string": "    @Test\n    public void testFours() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), fourPred);\n        walkLists(fours, filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testManual()", "name": "testManual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManual()", "original_string": "    @Test\n    public void testManual() {\n        // do this one \"by hand\" as a sanity check\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), threePred);\n\n        assertEquals(Integer.valueOf(0), filtered.next());\n        assertEquals(Integer.valueOf(3), filtered.next());\n        assertEquals(Integer.valueOf(6), filtered.next());\n        assertEquals(Integer.valueOf(9), filtered.next());\n        assertEquals(Integer.valueOf(12), filtered.next());\n        assertEquals(Integer.valueOf(15), filtered.next());\n        assertEquals(Integer.valueOf(18), filtered.next());\n\n        assertEquals(Integer.valueOf(18), filtered.previous());\n        assertEquals(Integer.valueOf(15), filtered.previous());\n        assertEquals(Integer.valueOf(12), filtered.previous());\n        assertEquals(Integer.valueOf(9), filtered.previous());\n        assertEquals(Integer.valueOf(6), filtered.previous());\n        assertEquals(Integer.valueOf(3), filtered.previous());\n        assertEquals(Integer.valueOf(0), filtered.previous());\n\n        assertFalse(filtered.hasPrevious());\n\n        assertEquals(Integer.valueOf(0), filtered.next());\n        assertEquals(Integer.valueOf(3), filtered.next());\n        assertEquals(Integer.valueOf(6), filtered.next());\n        assertEquals(Integer.valueOf(9), filtered.next());\n        assertEquals(Integer.valueOf(12), filtered.next());\n        assertEquals(Integer.valueOf(15), filtered.next());\n        assertEquals(Integer.valueOf(18), filtered.next());\n\n        assertFalse(filtered.hasNext());\n\n        assertEquals(Integer.valueOf(18), filtered.previous());\n        assertEquals(Integer.valueOf(15), filtered.previous());\n        assertEquals(Integer.valueOf(12), filtered.previous());\n        assertEquals(Integer.valueOf(9), filtered.previous());\n        assertEquals(Integer.valueOf(6), filtered.previous());\n        assertEquals(Integer.valueOf(3), filtered.previous());\n        assertEquals(Integer.valueOf(0), filtered.previous());\n\n        assertEquals(Integer.valueOf(0), filtered.next());\n        assertEquals(Integer.valueOf(0), filtered.previous());\n        assertEquals(Integer.valueOf(0), filtered.next());\n\n        assertEquals(Integer.valueOf(3), filtered.next());\n        assertEquals(Integer.valueOf(6), filtered.next());\n        assertEquals(Integer.valueOf(6), filtered.previous());\n        assertEquals(Integer.valueOf(3), filtered.previous());\n        assertEquals(Integer.valueOf(3), filtered.next());\n        assertEquals(Integer.valueOf(6), filtered.next());\n\n        assertEquals(Integer.valueOf(9), filtered.next());\n        assertEquals(Integer.valueOf(12), filtered.next());\n        assertEquals(Integer.valueOf(15), filtered.next());\n        assertEquals(Integer.valueOf(15), filtered.previous());\n        assertEquals(Integer.valueOf(12), filtered.previous());\n        assertEquals(Integer.valueOf(9), filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testNestedSixes()", "name": "testNestedSixes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNestedSixes()", "original_string": "    @Test\n    public void testNestedSixes() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(\n                                        new FilterListIterator<>(list.listIterator(), threePred),\n                                        evenPred\n                                      );\n        walkLists(sixes, filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testNestedSixes2()", "name": "testNestedSixes2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNestedSixes2()", "original_string": "    @Test\n    public void testNestedSixes2() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(\n                                        new FilterListIterator<>(list.listIterator(), evenPred),\n                                        threePred\n                                      );\n        walkLists(sixes, filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testNestedSixes3()", "name": "testNestedSixes3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNestedSixes3()", "original_string": "    @Test\n    public void testNestedSixes3() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(\n                                        new FilterListIterator<>(list.listIterator(), threePred),\n                                        evenPred\n                                      );\n        walkLists(sixes, new FilterListIterator<>(filtered, truePred));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testNextChangesPrevious()", "name": "testNextChangesPrevious", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextChangesPrevious()", "original_string": "    @Test\n    public void testNextChangesPrevious() {\n        {\n            final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), threePred);\n            nextNextPrevious(threes.listIterator(), filtered);\n        }\n\n        {\n            final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), truePred);\n            nextNextPrevious(list.listIterator(), filtered);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testOdds()", "name": "testOdds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOdds()", "original_string": "    @Test\n    public void testOdds() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), oddPred);\n        walkLists(odds, filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testPreviousChangesNext()", "name": "testPreviousChangesNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousChangesNext()", "original_string": "    @Test\n    public void testPreviousChangesNext() {\n        {\n            final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), threePred);\n            final ListIterator<Integer> expected = threes.listIterator();\n            walkForward(expected, filtered);\n            previousPreviousNext(expected, filtered);\n        }\n        {\n            final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), truePred);\n            final ListIterator<Integer> expected = list.listIterator();\n            walkForward(expected, filtered);\n            previousPreviousNext(expected, filtered);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testThrees()", "name": "testThrees", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testThrees()", "original_string": "    @Test\n    public void testThrees() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), threePred);\n        walkLists(threes, filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testTruePredicate()", "name": "testTruePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTruePredicate()", "original_string": "    @Test\n    public void testTruePredicate() {\n        final FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), truePred);\n        walkLists(list, filtered);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Utilities"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest.[void]testWalkLists()", "name": "testWalkLists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWalkLists()", "original_string": "    @Test\n    public void testWalkLists() {\n        // this just confirms that our walkLists method works OK\n        walkLists(list, list.listIterator());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java", "class_name": "FilterListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java.FilterListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java.FilterListIterator_nextTest.[void]testNextWithValidElement()", "name": "testNextWithValidElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithValidElement()", "original_string": "    @Test\n    public void testNextWithValidElement() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), fourPred);\n        assertTrue(filtered.hasNext());\n        assertEquals(fours.get(0), filtered.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java", "class_name": "FilterListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java.FilterListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java.FilterListIterator_nextTest.[void]testNextWithNoValidElement()", "name": "testNextWithNoValidElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithNoValidElement()", "original_string": "    @Test\n    public void testNextWithNoValidElement() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), x -> x % 100 == 0);\n        assertThrows(NoSuchElementException.class, () -> {\n            while (filtered.hasNext()) {\n                filtered.next();\n            }\n            filtered.next(); // This should throw NoSuchElementException\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java", "class_name": "FilterListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java.FilterListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java.FilterListIterator_nextTest.[void]testNextWithMultipleValidElements()", "name": "testNextWithMultipleValidElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithMultipleValidElements()", "original_string": "    @Test\n    public void testNextWithMultipleValidElements() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), fourPred);\n        ListIterator<Integer> expected = fours.listIterator();\n        while (expected.hasNext()) {\n            assertEquals(expected.next(), filtered.next());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java", "class_name": "FilterListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java.FilterListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest.[void]testRemoveAfterNext()", "name": "testRemoveAfterNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterNext()", "original_string": "    @Test\n    public void testRemoveAfterNext() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertEquals(\"a\", it.next());\n        it.remove();\n        assertEquals(Arrays.asList(\"b\", \"c\"), testList);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java", "class_name": "PeekingIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest.[void]testRemoveWithoutPeekOrElement()", "name": "testRemoveWithoutPeekOrElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithoutPeekOrElement()", "original_string": "    @Test\n    public void testRemoveWithoutPeekOrElement() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java", "class_name": "PeekingIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest.[void]testRemoveAfterPeek()", "name": "testRemoveAfterPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterPeek()", "original_string": "    @Test\n    public void testRemoveAfterPeek() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertEquals(\"a\", it.peek());\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java", "class_name": "PeekingIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest.[void]testRemoveAfterElement()", "name": "testRemoveAfterElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterElement()", "original_string": "    @Test\n    public void testRemoveAfterElement() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertTrue(it.hasNext());\n        assertEquals(\"a\", it.element());\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java", "class_name": "PeekingIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java.PeekingIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest.[void]testNextWithElements()", "name": "testNextWithElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithElements()", "original_string": "    @Test\n    public void testNextWithElements() {\n        NodeList nodeList = createMock(NodeList.class);\n        expect(nodeList.getLength()).andReturn(nodes.length).anyTimes();\n        for (int i = 0; i < nodes.length; i++) {\n            expect(nodeList.item(i)).andReturn(nodes[i]).anyTimes();\n        }\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(nodeList);\n\n        for (Node node : nodes) {\n            assertEquals(node, nodeListIterator.next());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "class_name": "NodeListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest.[void]testNextWithNoElements()", "name": "testNextWithNoElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithNoElements()", "original_string": "    @Test\n    public void testNextWithNoElements() {\n        NodeList nodeList = createMock(NodeList.class);\n        expect(nodeList.getLength()).andReturn(0).anyTimes();\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(nodeList);\n\n        assertThrows(NoSuchElementException.class, () -> {\n            nodeListIterator.next();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "class_name": "NodeListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest.[void]testNextWithNodeConstructor()", "name": "testNextWithNodeConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithNodeConstructor()", "original_string": "    @Test\n    public void testNextWithNodeConstructor() {\n        Node node = createMock(Element.class);\n        NodeList nodeList = createMock(NodeList.class);\n        expect(node.getChildNodes()).andReturn(nodeList).anyTimes();\n        expect(nodeList.getLength()).andReturn(nodes.length).anyTimes();\n        for (int i = 0; i < nodes.length; i++) {\n            expect(nodeList.item(i)).andReturn(nodes[i]).anyTimes();\n        }\n        replay(node);\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(node);\n\n        for (Node childNode : nodes) {\n            assertEquals(childNode, nodeListIterator.next());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "class_name": "NodeListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest.[void]testNextWithNodeConstructorNoElements()", "name": "testNextWithNodeConstructorNoElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithNodeConstructorNoElements()", "original_string": "    @Test\n    public void testNextWithNodeConstructorNoElements() {\n        Node node = createMock(Element.class);\n        NodeList nodeList = createMock(NodeList.class);\n        expect(node.getChildNodes()).andReturn(nodeList).anyTimes();\n        expect(nodeList.getLength()).andReturn(0).anyTimes();\n        replay(node);\n        replay(nodeList);\n\n        nodeListIterator = new NodeListIterator(node);\n\n        assertThrows(NoSuchElementException.class, () -> {\n            nodeListIterator.next();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "class_name": "NodeListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java.NodeListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java.SkippingIterator_nextTest.[void]testNext()", "name": "testNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNext()", "original_string": "    @Test\n    public void testNext() {\n        Iterator<String> iterator = Arrays.asList(\"a\", \"b\", \"c\", \"d\").iterator();\n        SkippingIterator<String> skippingIterator = new SkippingIterator<>(iterator, 2);\n\n        assertEquals(\"c\", skippingIterator.next());\n        assertEquals(\"d\", skippingIterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java", "class_name": "SkippingIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java.SkippingIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java.ArrayIterator2Test.[void]testIndexedArray()", "name": "testIndexedArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexedArray()", "original_string": "    @Test\n    public void testIndexedArray() {\n        Iterator<E> iter = makeArrayIterator(testArray, 2);\n        int count = 0;\n        while (iter.hasNext()) {\n            ++count;\n            iter.next();\n        }\n\n        assertEquals(count, testArray.length - 2, \"the count should be right using ArrayIterator(Object,2) \");\n\n        iter = makeArrayIterator(testArray, 1, testArray.length - 1);\n        count = 0;\n        while (iter.hasNext()) {\n            ++count;\n            iter.next();\n        }\n\n        assertEquals(\n                count,\n                testArray.length - 2,\n                \"the count should be right using ArrayIterator(Object,1,\" + (testArray.length - 1) + \") \");\n        assertAll(\n                () -> assertThrows(ArrayIndexOutOfBoundsException.class, () -> makeArrayIterator(testArray, -1),\n                        \"new ArrayIterator(Object,-1) should throw an ArrayIndexOutOfBoundsException\"),\n                () -> assertThrows(ArrayIndexOutOfBoundsException.class, () -> makeArrayIterator(testArray, testArray.length + 1),\n                        \"new ArrayIterator(Object,length+1) should throw an ArrayIndexOutOfBoundsException\"),\n                () -> assertThrows(ArrayIndexOutOfBoundsException.class, () -> makeArrayIterator(testArray, 0, -1),\n                        \"new ArrayIterator(Object,0,-1) should throw an ArrayIndexOutOfBoundsException\"),\n                () -> assertThrows(ArrayIndexOutOfBoundsException.class, () -> makeArrayIterator(testArray, 0, testArray.length + 1),\n                        \"new ArrayIterator(Object,0,length+1) should throw an ArrayIndexOutOfBoundsException\"),\n                () -> assertThrows(IllegalArgumentException.class, () -> makeArrayIterator(testArray, testArray.length - 1, testArray.length - 2),\n                        \"new ArrayIterator(Object,length-2,length-1) should throw an IllegalArgumentException\")\n        );\n\n        try {\n            iter = makeArrayIterator(testArray, 1, 1);\n            // expected not to fail\n        } catch (final IllegalArgumentException iae) {\n            // MODIFIED: an iterator over a zero-length section of array\n            //  should be perfectly legal behavior\n            fail(\"new ArrayIterator(Object,1,1) should NOT throw an IllegalArgumentException\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java", "class_name": "ArrayIterator2Test", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java.ArrayIterator2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java.ArrayIterator2Test.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<E> iter = makeObject();\n        for (final int element : testArray) {\n            final Integer testValue = Integer.valueOf(element);\n            final Number iterValue = (Number) iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java", "class_name": "ArrayIterator2Test", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java.ArrayIterator2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest.[void]testPreviousWithTruePredicate()", "name": "testPreviousWithTruePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousWithTruePredicate()", "original_string": "    @Test\n    public void testPreviousWithTruePredicate() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), truePred);\n        filtered.next(); // Move to the first element\n        assertEquals(Integer.valueOf(0), filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "class_name": "FilterListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest.[void]testPreviousWithFalsePredicate()", "name": "testPreviousWithFalsePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousWithFalsePredicate()", "original_string": "    @Test\n    public void testPreviousWithFalsePredicate() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), falsePred);\n        assertThrows(NoSuchElementException.class, () -> filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "class_name": "FilterListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest.[void]testPreviousWithEvenPredicate()", "name": "testPreviousWithEvenPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousWithEvenPredicate()", "original_string": "    @Test\n    public void testPreviousWithEvenPredicate() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), evenPred);\n        filtered.next(); // Move to the first even element\n        assertEquals(Integer.valueOf(0), filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "class_name": "FilterListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest.[void]testPreviousWithOddPredicate()", "name": "testPreviousWithOddPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousWithOddPredicate()", "original_string": "    @Test\n    public void testPreviousWithOddPredicate() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), oddPred);\n        filtered.next(); // Move to the first odd element\n        assertEquals(Integer.valueOf(1), filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "class_name": "FilterListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest.[void]testPreviousWithThreePredicate()", "name": "testPreviousWithThreePredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousWithThreePredicate()", "original_string": "    @Test\n    public void testPreviousWithThreePredicate() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), threePred);\n        filtered.next(); // Move to the first multiple of 3\n        assertEquals(Integer.valueOf(0), filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "class_name": "FilterListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest.[void]testPreviousWithFourPredicate()", "name": "testPreviousWithFourPredicate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousWithFourPredicate()", "original_string": "    @Test\n    public void testPreviousWithFourPredicate() {\n        FilterListIterator<Integer> filtered = new FilterListIterator<>(list.listIterator(), fourPred);\n        filtered.next(); // Move to the first multiple of 4\n        assertEquals(Integer.valueOf(0), filtered.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "class_name": "FilterListIterator_previousTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java.FilterListIterator_previousTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java.UnmodifiableMapIteratorTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        MapIterator<K, V> it = makeObject();\n        assertSame(it, UnmodifiableMapIterator.unmodifiableMapIterator(it));\n\n        it = getMap().mapIterator();\n        assertNotSame(it, UnmodifiableMapIterator.unmodifiableMapIterator(it));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableMapIterator.unmodifiableMapIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java", "class_name": "UnmodifiableMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java.UnmodifiableMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java.UnmodifiableMapIteratorTest.[void]testMapIterator()", "name": "testMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIterator()", "original_string": "    @Test\n    public void testMapIterator() {\n        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java", "class_name": "UnmodifiableMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIteratorTest.java.UnmodifiableMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest.[void]testEmptyMapIterator()", "name": "testEmptyMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyMapIterator()", "original_string": "    @Test\n    public void testEmptyMapIterator() {\n        if (!supportsEmptyIterator()) {\n            return;\n        }\n\n        final MapIterator<K, V> it = makeEmptyIterator();\n        assertFalse(it.hasNext());\n\n        // next() should throw a NoSuchElementException\n        assertThrows(NoSuchElementException.class, () -> it.next());\n\n        // getKey() should throw an IllegalStateException\n        assertThrows(IllegalStateException.class, () -> it.getKey());\n\n        // getValue() should throw an IllegalStateException\n        assertThrows(IllegalStateException.class, () -> it.getValue());\n\n        if (!supportsSetValue()) {\n            // setValue() should throw an UnsupportedOperationException/IllegalStateException\n            try {\n                it.setValue(addSetValues()[0]);\n                fail();\n            } catch (final UnsupportedOperationException | IllegalStateException ex) {\n                // ignore\n            }\n        } else {\n            // setValue() should throw an IllegalStateException\n            assertThrows(IllegalStateException.class, () -> it.setValue(addSetValues()[0]));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java", "class_name": "AbstractMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that the empty list iterator contract is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest.[void]testFullMapIterator()", "name": "testFullMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullMapIterator()", "original_string": "    @Test\n    public void testFullMapIterator() {\n        if (!supportsFullIterator()) {\n            return;\n        }\n\n        final MapIterator<K, V> it = makeObject();\n        final Map<K, V> map = getMap();\n        assertTrue(it.hasNext());\n\n        assertTrue(it.hasNext());\n        final Set<K> set = new HashSet<>();\n        while (it.hasNext()) {\n            // getKey\n            final K key = it.next();\n            assertSame(key, it.getKey(), \"it.next() should equals getKey()\");\n            assertTrue(map.containsKey(key),  \"Key must be in map\");\n            assertTrue(set.add(key), \"Key must be unique\");\n\n            // getValue\n            final V value = it.getValue();\n            if (!isGetStructuralModify()) {\n                assertSame(map.get(key), value, \"Value must be mapped to key\");\n            }\n            assertTrue(map.containsValue(value),  \"Value must be in map\");\n\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java", "class_name": "AbstractMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that the full list iterator contract is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest.[void]testMapIteratorRemoveGetKey()", "name": "testMapIteratorRemoveGetKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIteratorRemoveGetKey()", "original_string": "    @Test\n    public void testMapIteratorRemoveGetKey() {\n        if (!supportsRemove()) {\n            return;\n        }\n        final MapIterator<K, V> it = makeObject();\n        final Map<K, V> confirmed = getConfirmedMap();\n\n        assertTrue(it.hasNext());\n        final K key = it.next();\n\n        it.remove();\n        confirmed.remove(key);\n        verify();\n\n        assertThrows(IllegalStateException.class, () -> it.getKey());\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java", "class_name": "AbstractMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest.[void]testMapIteratorRemoveGetValue()", "name": "testMapIteratorRemoveGetValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIteratorRemoveGetValue()", "original_string": "    @Test\n    public void testMapIteratorRemoveGetValue() {\n        if (!supportsRemove()) {\n            return;\n        }\n        final MapIterator<K, V> it = makeObject();\n        final Map<K, V> confirmed = getConfirmedMap();\n\n        assertTrue(it.hasNext());\n        final K key = it.next();\n\n        it.remove();\n        confirmed.remove(key);\n        verify();\n\n        assertThrows(IllegalStateException.class, () -> it.getValue());\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java", "class_name": "AbstractMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest.[void]testMapIteratorSet()", "name": "testMapIteratorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIteratorSet()", "original_string": "    @Test\n    public void testMapIteratorSet() {\n        if (!supportsFullIterator()) {\n            return;\n        }\n\n        final V newValue = addSetValues()[0];\n        final V newValue2 = addSetValues().length == 1 ? addSetValues()[0] : addSetValues()[1];\n        final MapIterator<K, V> it = makeObject();\n        final Map<K, V> map = getMap();\n        final Map<K, V> confirmed = getConfirmedMap();\n        assertTrue(it.hasNext());\n        final K key = it.next();\n        final V value = it.getValue();\n\n        if (!supportsSetValue()) {\n            assertThrows(UnsupportedOperationException.class, () -> it.setValue(newValue));\n            return;\n        }\n        final V old = it.setValue(newValue);\n        confirmed.put(key, newValue);\n        assertSame(key, it.getKey(), \"Key must not change after setValue\");\n        assertSame(newValue, it.getValue(), \"Value must be changed after setValue\");\n        assertSame(value, old, \"setValue must return old value\");\n        assertTrue(map.containsKey(key), \"Map must contain key\");\n        // test against confirmed, as map may contain value twice\n        assertEquals(confirmed.containsValue(old), map.containsValue(old),\n            \"Map must not contain old value\");\n        assertTrue(map.containsValue(newValue), \"Map must contain new value\");\n        verify();\n\n        it.setValue(newValue);  // same value - should be OK\n        confirmed.put(key, newValue);\n        assertSame(key, it.getKey(), \"Key must not change after setValue\");\n        assertSame(newValue, it.getValue(), \"Value must be changed after setValue\");\n        verify();\n\n        it.setValue(newValue2);  // new value\n        confirmed.put(key, newValue2);\n        assertSame(key, it.getKey(), \"Key must not change after setValue\");\n        assertSame(newValue2, it.getValue(), \"Value must be changed after setValue\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java", "class_name": "AbstractMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest.[void]testMapIteratorSetRemoveSet()", "name": "testMapIteratorSetRemoveSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIteratorSetRemoveSet()", "original_string": "    @Test\n    public void testMapIteratorSetRemoveSet() {\n        if (!supportsSetValue() || !supportsRemove()) {\n            return;\n        }\n        final V newValue = addSetValues()[0];\n        final MapIterator<K, V> it = makeObject();\n        final Map<K, V> confirmed = getConfirmedMap();\n\n        assertTrue(it.hasNext());\n        final K key = it.next();\n\n        it.setValue(newValue);\n        it.remove();\n        confirmed.remove(key);\n        verify();\n\n        assertThrows(IllegalStateException.class, () -> it.setValue(newValue));\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java", "class_name": "AbstractMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testRemove()", "original_string": "    @Test\n    @Override\n    public void testRemove() { // override\n        final MapIterator<K, V> it = makeObject();\n        final Map<K, V> map = getMap();\n        final Map<K, V> confirmed = getConfirmedMap();\n        assertTrue(it.hasNext());\n        final K key = it.next();\n\n        if (!supportsRemove()) {\n            assertThrows(UnsupportedOperationException.class, () -> it.remove());\n            return;\n        }\n\n        it.remove();\n        confirmed.remove(key);\n        assertFalse(map.containsKey(key));\n        verify();\n\n        try {\n            it.remove();  // second remove fails\n        } catch (final IllegalStateException ex) {\n        }\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java", "class_name": "AbstractMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractMapIteratorTest.java.AbstractMapIteratorTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java.UnmodifiableListIterator_unmodifiableListIteratorTest.[void]testUnmodifiableListIteratorWithUnmodifiableIterator()", "name": "testUnmodifiableListIteratorWithUnmodifiableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableListIteratorWithUnmodifiableIterator()", "original_string": "    @Test\n    void testUnmodifiableListIteratorWithUnmodifiableIterator() {\n        // Given\n        ListIterator<String> mockIterator = mock(ListIterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n        when(mockIterator.next()).thenReturn(\"element\");\n        when(mockIterator.hasPrevious()).thenReturn(false);\n        when(mockIterator.previous()).thenThrow(new NoSuchElementException());\n\n        // When\n        ListIterator<String> result = UnmodifiableListIterator.unmodifiableListIterator(mockIterator);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableListIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "class_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java.UnmodifiableListIterator_unmodifiableListIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java.UnmodifiableListIterator_unmodifiableListIteratorTest.[void]testUnmodifiableListIteratorWithModifiableIterator()", "name": "testUnmodifiableListIteratorWithModifiableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableListIteratorWithModifiableIterator()", "original_string": "    @Test\n    void testUnmodifiableListIteratorWithModifiableIterator() {\n        // Given\n        ListIterator<String> mockIterator = mock(ListIterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n        when(mockIterator.next()).thenReturn(\"element\");\n        when(mockIterator.hasPrevious()).thenReturn(false);\n        when(mockIterator.previous()).thenThrow(new NoSuchElementException());\n\n        // When\n        ListIterator<String> result = UnmodifiableListIterator.unmodifiableListIterator(mockIterator);\n\n        // Then\n        assertNotSame(mockIterator, result);\n        assertTrue(result instanceof UnmodifiableListIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "class_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java.UnmodifiableListIterator_unmodifiableListIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java.UnmodifiableListIterator_unmodifiableListIteratorTest.[void]testUnmodifiableListIteratorWithNullIterator()", "name": "testUnmodifiableListIteratorWithNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableListIteratorWithNullIterator()", "original_string": "    @Test\n    void testUnmodifiableListIteratorWithNullIterator() {\n        // Given\n        ListIterator<String> nullIterator = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            UnmodifiableListIterator.unmodifiableListIterator(nullIterator);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "class_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java.UnmodifiableListIterator_unmodifiableListIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testConstructorEx()", "name": "testConstructorEx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorEx()", "original_string": "    @Test\n    public void testConstructorEx() {\n        assertThrows(NullPointerException.class, () -> new LoopingIterator<>(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests constructor exception.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testLooping0()", "name": "testLooping0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLooping0()", "original_string": "    @Test\n    public void testLooping0() {\n        final List<Object> list = new ArrayList<>();\n        final LoopingIterator<Object> loop = new LoopingIterator<>(list);\n        assertFalse(loop.hasNext(), \"hasNext should return false\");\n\n        assertThrows(NoSuchElementException.class, () -> loop.next(),\n                \"NoSuchElementException was not thrown during next() call.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether an empty looping iterator works as designed.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testLooping1()", "name": "testLooping1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLooping1()", "original_string": "    @Test\n    public void testLooping1() {\n        final List<String> list = Arrays.asList(\"a\");\n        final LoopingIterator<String> loop = new LoopingIterator<>(list);\n\n        assertTrue(loop.hasNext(), \"1st hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n\n        assertTrue(loop.hasNext(), \"2nd hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n\n        assertTrue(loop.hasNext(), \"3rd hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether a populated looping iterator works as designed.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testLooping2()", "name": "testLooping2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLooping2()", "original_string": "    @Test\n    public void testLooping2() {\n        final List<String> list = Arrays.asList(\"a\", \"b\");\n        final LoopingIterator<String> loop = new LoopingIterator<>(list);\n\n        assertTrue(loop.hasNext(), \"1st hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n\n        assertTrue(loop.hasNext(), \"2nd hasNext should return true\");\n        assertEquals(\"b\", loop.next());\n\n        assertTrue(loop.hasNext(), \"3rd hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether a populated looping iterator works as designed.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testLooping3()", "name": "testLooping3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLooping3()", "original_string": "    @Test\n    public void testLooping3() {\n        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n        final LoopingIterator<String> loop = new LoopingIterator<>(list);\n\n        assertTrue(loop.hasNext(), \"1st hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n\n        assertTrue(loop.hasNext(), \"2nd hasNext should return true\");\n        assertEquals(\"b\", loop.next());\n\n        assertTrue(loop.hasNext(), \"3rd hasNext should return true\");\n        assertEquals(\"c\", loop.next());\n\n        assertTrue(loop.hasNext(), \"4th hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether a populated looping iterator works as designed.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testRemoving1()", "name": "testRemoving1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoving1()", "original_string": "    @Test\n    public void testRemoving1() {\n        final List<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        final LoopingIterator<String> loop = new LoopingIterator<>(list);\n        assertEquals(3, list.size(), \"list should have 3 elements.\");\n\n        assertTrue(loop.hasNext(), \"1st hasNext should return true\");\n        assertEquals(\"a\", loop.next());\n        loop.remove();  // removes a\n        assertEquals(2, list.size(), \"list should have 2 elements.\");\n\n        assertTrue(loop.hasNext(), \"2nd hasNext should return true\");\n        assertEquals(\"b\", loop.next());\n        loop.remove();  // removes b\n        assertEquals(1, list.size(), \"list should have 1 elements.\");\n\n        assertTrue(loop.hasNext(), \"3rd hasNext should return true\");\n        assertEquals(\"c\", loop.next());\n        loop.remove();  // removes c\n        assertEquals(0, list.size(), \"list should have 0 elements.\");\n\n        assertFalse(loop.hasNext(), \"4th hasNext should return false\");\n\n        assertThrows(NoSuchElementException.class, () -> loop.next(),\n                \"Expected NoSuchElementException to be thrown.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the remove() method on a LoopingIterator wrapped ArrayList.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n        final LoopingIterator<String> loop = new LoopingIterator<>(list);\n\n        assertEquals(\"a\", loop.next());\n        assertEquals(\"b\", loop.next());\n        loop.reset();\n        assertEquals(\"a\", loop.next());\n        loop.reset();\n        assertEquals(\"a\", loop.next());\n        assertEquals(\"b\", loop.next());\n        assertEquals(\"c\", loop.next());\n        loop.reset();\n        assertEquals(\"a\", loop.next());\n        assertEquals(\"b\", loop.next());\n        assertEquals(\"c\", loop.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the reset() method on a LoopingIterator wrapped ArrayList.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        final List<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        final LoopingIterator<String> loop = new LoopingIterator<>(list);\n\n        assertEquals(3, loop.size());\n        loop.next();\n        loop.next();\n        assertEquals(3, loop.size());\n        loop.reset();\n        assertEquals(3, loop.size());\n        loop.next();\n        loop.remove();\n        assertEquals(2, loop.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java", "class_name": "LoopingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingIteratorTest.java.LoopingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the size() method on a LoopingIterator wrapped ArrayList.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_removeTest.java.CollatingIterator_removeTest.[void]testRemoveWithoutNext()", "name": "testRemoveWithoutNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithoutNext()", "original_string": "    @Test\n    public void testRemoveWithoutNext() {\n        assertThrows(IllegalStateException.class, () -> {\n            collatingIterator.remove();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_removeTest.java", "class_name": "CollatingIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_removeTest.java.CollatingIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_removeTest.java.CollatingIterator_removeTest.[void]testRemoveAfterNext()", "name": "testRemoveAfterNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterNext()", "original_string": "    @Test\n    public void testRemoveAfterNext() {\n        Iterator<Integer> iterator = evens.iterator();\n        collatingIterator.next(); // Ensure next() has been called\n        collatingIterator.remove();\n        assertEquals(9, evens.size()); // Corrected the expected size\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_removeTest.java", "class_name": "CollatingIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_removeTest.java.CollatingIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java.PermutationIterator_nextTest.[void]testNextPermutation()", "name": "testNextPermutation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextPermutation()", "original_string": "    @Test\n    public void testNextPermutation() {\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> firstPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('A', 'B', 'C'), firstPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> secondPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('A', 'C', 'B'), secondPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> thirdPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('C', 'A', 'B'), thirdPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> fourthPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('C', 'B', 'A'), fourthPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> fifthPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('B', 'C', 'A'), fifthPermutation);\n\n        assertTrue(permutationIterator.hasNext());\n\n        List<Character> sixthPermutation = permutationIterator.next();\n        assertEquals(Arrays.asList('B', 'A', 'C'), sixthPermutation);\n\n        assertFalse(permutationIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java", "class_name": "PermutationIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java.PermutationIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java.PermutationIterator_nextTest.[void]testNextPermutationThrowsNoSuchElementException()", "name": "testNextPermutationThrowsNoSuchElementException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextPermutationThrowsNoSuchElementException()", "original_string": "    @Test\n    public void testNextPermutationThrowsNoSuchElementException() {\n        List<Character> collection = new ArrayList<>();\n        PermutationIterator<Character> emptyIterator = new PermutationIterator<>(collection);\n\n        assertTrue(emptyIterator.hasNext());\n        assertEquals(0, emptyIterator.next().size());\n\n        assertThrows(NoSuchElementException.class, () -> {\n            emptyIterator.next();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java", "class_name": "PermutationIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java.PermutationIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java.PermutationIterator_nextTest.[void]testRemoveNotSupported()", "name": "testRemoveNotSupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNotSupported()", "original_string": "    @Test\n    public void testRemoveNotSupported() {\n        assertThrows(UnsupportedOperationException.class, () -> {\n            permutationIterator.remove();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java", "class_name": "PermutationIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java.PermutationIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java.UnmodifiableIteratorTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        Iterator<E> it = makeObject();\n        assertSame(it, UnmodifiableIterator.unmodifiableIterator(it));\n\n        it = testList.iterator();\n        assertNotSame(it, UnmodifiableIterator.unmodifiableIterator(it));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableIterator.unmodifiableIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java", "class_name": "UnmodifiableIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java.UnmodifiableIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java.UnmodifiableIteratorTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java", "class_name": "UnmodifiableIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableIteratorTest.java.UnmodifiableIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java.AbstractIteratorTest.[void]testEmptyIterator()", "name": "testEmptyIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyIterator()", "original_string": "    @Test\n    public void testEmptyIterator() {\n        if (!supportsEmptyIterator()) {\n            return;\n        }\n\n        final Iterator<E> it = makeEmptyIterator();\n\n        // hasNext() should return false\n        assertFalse(it.hasNext(), \"hasNext() should return false for empty iterators\");\n\n        // next() should throw a NoSuchElementException\n        assertThrows(NoSuchElementException.class, () -> it.next(),\n                \"NoSuchElementException must be thrown when Iterator is exhausted\");\n        verify();\n\n        assertNotNull(it.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java", "class_name": "AbstractIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java.AbstractIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the empty iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java.AbstractIteratorTest.[void]testFullIterator()", "name": "testFullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullIterator()", "original_string": "    @Test\n    public void testFullIterator() {\n        if (!supportsFullIterator()) {\n            return;\n        }\n\n        final Iterator<E> it = makeObject();\n\n        // hasNext() must be true (ensure makeFullIterator is correct!)\n        assertTrue(it.hasNext(), \"hasNext() should return true for at least one element\");\n\n        // next() must not throw exception (ensure makeFullIterator is correct!)\n        try {\n            it.next();\n        } catch (final NoSuchElementException e) {\n            fail(\"Full iterators must have at least one element\");\n        }\n\n        // iterate through\n        while (it.hasNext()) {\n            it.next();\n            verify();\n        }\n\n        // next() must throw NoSuchElementException now\n        assertThrows(NoSuchElementException.class, () -> it.next(),\n                \"NoSuchElementException must be thrown when Iterator is exhausted\");\n\n        assertNotNull(it.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java", "class_name": "AbstractIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java.AbstractIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest normal iteration behavior.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java.AbstractIteratorTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove()", "original_string": "    @Test\n    public void testRemove() {\n        final Iterator<E> it = makeObject();\n\n        if (!supportsRemove()) {\n            // check for UnsupportedOperationException if not supported\n            assertThrows(UnsupportedOperationException.class, it::remove);\n            return;\n        }\n\n        // should throw IllegalStateException before next() called\n        assertThrows(IllegalStateException.class, () -> it.remove());\n        verify();\n\n        // remove after next should be fine\n        it.next();\n        it.remove();\n\n        // should throw IllegalStateException for second remove()\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java", "class_name": "AbstractIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractIteratorTest.java.AbstractIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest remove behavior.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest.[void]testNextWithElements()", "name": "testNextWithElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithElements()", "original_string": "    @Test\n    public void testNextWithElements() {\n        assertEquals(\"a\", loopingListIterator.next());\n        assertEquals(\"b\", loopingListIterator.next());\n        assertEquals(\"c\", loopingListIterator.next());\n        assertEquals(\"a\", loopingListIterator.next()); // Looping back to the start\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java", "class_name": "LoopingListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest.[void]testNextWithEmptyList()", "name": "testNextWithEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithEmptyList()", "original_string": "    @Test\n    public void testNextWithEmptyList() {\n        list = Arrays.asList();\n        loopingListIterator = new LoopingListIterator<>(list);\n        assertThrows(NoSuchElementException.class, () -> {\n            loopingListIterator.next();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java", "class_name": "LoopingListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest.[void]testNextWithReset()", "name": "testNextWithReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithReset()", "original_string": "    @Test\n    public void testNextWithReset() {\n        assertEquals(\"a\", loopingListIterator.next());\n        assertEquals(\"b\", loopingListIterator.next());\n        loopingListIterator.reset();\n        assertEquals(\"a\", loopingListIterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java", "class_name": "LoopingListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest.[void]testNextWithHasNext()", "name": "testNextWithHasNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithHasNext()", "original_string": "    @Test\n    public void testNextWithHasNext() {\n        assertTrue(loopingListIterator.hasNext());\n        assertEquals(\"a\", loopingListIterator.next());\n        assertTrue(loopingListIterator.hasNext());\n        assertEquals(\"b\", loopingListIterator.next());\n        assertTrue(loopingListIterator.hasNext());\n        assertEquals(\"c\", loopingListIterator.next());\n        assertTrue(loopingListIterator.hasNext());\n        assertEquals(\"a\", loopingListIterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java", "class_name": "LoopingListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java.LoopingListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest.[void]testIterateEven()", "name": "testIterateEven", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateEven()", "original_string": "    @Test\n    public void testIterateEven() {\n        @SuppressWarnings(\"unchecked\")\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator());\n        for (final Integer even : evens) {\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "class_name": "ZippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "------------------------------------------------------------------- Tests"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest.[void]testIterateEvenEven()", "name": "testIterateEvenEven", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateEvenEven()", "original_string": "    @Test\n    public void testIterateEvenEven() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator(), evens.iterator());\n        for (final Integer even : evens) {\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "class_name": "ZippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest.[void]testIterateEvenOdd()", "name": "testIterateEvenOdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateEvenOdd()", "original_string": "    @Test\n    public void testIterateEvenOdd() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator(), odds.iterator());\n        for (int i = 0; i < 20; i++) {\n            assertTrue(iter.hasNext());\n            assertEquals(Integer.valueOf(i), iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "class_name": "ZippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest.[void]testIterateFibEvenOdd()", "name": "testIterateFibEvenOdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateFibEvenOdd()", "original_string": "    @Test\n    public void testIterateFibEvenOdd() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(fib.iterator(), evens.iterator(), odds.iterator());\n\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(Integer.valueOf(0), iter.next());  // even   0\n        assertEquals(Integer.valueOf(1), iter.next());  // odd    1\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(Integer.valueOf(2), iter.next());  // even   2\n        assertEquals(Integer.valueOf(3), iter.next());  // odd    3\n        assertEquals(Integer.valueOf(2), iter.next());  // fib    2\n        assertEquals(Integer.valueOf(4), iter.next());  // even   4\n        assertEquals(Integer.valueOf(5), iter.next());  // odd    5\n        assertEquals(Integer.valueOf(3), iter.next());  // fib    3\n        assertEquals(Integer.valueOf(6), iter.next());  // even   6\n        assertEquals(Integer.valueOf(7), iter.next());  // odd    7\n        assertEquals(Integer.valueOf(5), iter.next());  // fib    5\n        assertEquals(Integer.valueOf(8), iter.next());  // even   8\n        assertEquals(Integer.valueOf(9), iter.next());  // odd    9\n        assertEquals(Integer.valueOf(8), iter.next());  // fib    8\n        assertEquals(Integer.valueOf(10), iter.next()); // even  10\n        assertEquals(Integer.valueOf(11), iter.next()); // odd   11\n        assertEquals(Integer.valueOf(13), iter.next()); // fib   13\n        assertEquals(Integer.valueOf(12), iter.next()); // even  12\n        assertEquals(Integer.valueOf(13), iter.next()); // odd   13\n        assertEquals(Integer.valueOf(21), iter.next()); // fib   21\n        assertEquals(Integer.valueOf(14), iter.next()); // even  14\n        assertEquals(Integer.valueOf(15), iter.next()); // odd   15\n        assertEquals(Integer.valueOf(16), iter.next()); // even  16\n        assertEquals(Integer.valueOf(17), iter.next()); // odd   17\n        assertEquals(Integer.valueOf(18), iter.next()); // even  18\n        assertEquals(Integer.valueOf(19), iter.next()); // odd   19\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "class_name": "ZippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest.[void]testIterateOddEven()", "name": "testIterateOddEven", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateOddEven()", "original_string": "    @Test\n    public void testIterateOddEven() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(odds.iterator(), evens.iterator());\n        for (int i = 0, j = 0; i < 20; i++) {\n            assertTrue(iter.hasNext());\n            final int val = iter.next();\n            if (i % 2 == 0) {\n                assertEquals(odds.get(j).intValue(), val);\n            } else {\n                assertEquals(evens.get(j).intValue(), val);\n                j++;\n            }\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "class_name": "ZippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest.[void]testRemoveFromDouble()", "name": "testRemoveFromDouble", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromDouble()", "original_string": "    @Test\n    public void testRemoveFromDouble() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator(), odds.iterator());\n        int expectedSize = evens.size() + odds.size();\n        while (iter.hasNext()) {\n            final Object o = iter.next();\n            final Integer val = (Integer) o;\n            if (val.intValue() % 4 == 0 || val.intValue() % 3 == 0) {\n                expectedSize--;\n                iter.remove();\n            }\n        }\n        assertEquals(expectedSize, evens.size() + odds.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "class_name": "ZippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest.[void]testRemoveFromSingle()", "name": "testRemoveFromSingle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromSingle()", "original_string": "    @Test\n    public void testRemoveFromSingle() {\n        @SuppressWarnings(\"unchecked\")\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator());\n        int expectedSize = evens.size();\n        while (iter.hasNext()) {\n            final Object o = iter.next();\n            final Integer val = (Integer) o;\n            if (val.intValue() % 4 == 0) {\n                expectedSize--;\n                iter.remove();\n            }\n        }\n        assertEquals(expectedSize, evens.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java", "class_name": "ZippingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIteratorTest.java.ZippingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java.CollatingIterator_setIteratorTest.[void]testSetIterator_Success()", "name": "testSetIterator_Success", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSetIterator_Success()", "original_string": "    @Test\n    void testSetIterator_Success() {\n        // Given\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>();\n        Iterator<Integer> mockIterator = mock(Iterator.class);\n\n        // When\n        collatingIterator.addIterator(mockIterator); // Ensure the list has at least one iterator\n        collatingIterator.setIterator(0, mockIterator);\n\n        // Then\n        assertEquals(mockIterator, collatingIterator.getIterators().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "class_name": "CollatingIterator_setIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java.CollatingIterator_setIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java.CollatingIterator_setIteratorTest.[void]testSetIterator_NullIterator()", "name": "testSetIterator_NullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSetIterator_NullIterator()", "original_string": "    @Test\n    void testSetIterator_NullIterator() {\n        // Given\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>();\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            collatingIterator.setIterator(0, null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "class_name": "CollatingIterator_setIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java.CollatingIterator_setIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java.CollatingIterator_setIteratorTest.[void]testSetIterator_IterationStarted()", "name": "testSetIterator_IterationStarted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testSetIterator_IterationStarted()", "original_string": "    @Test\n    void testSetIterator_IterationStarted() {\n        // Given\n        CollatingIterator<Integer> collatingIterator = new CollatingIterator<>();\n        Iterator<Integer> mockIterator = mock(Iterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n        collatingIterator.addIterator(mockIterator);\n\n        // When\n        collatingIterator.next(); // Start iteration\n\n        // Then\n        assertThrows(IllegalStateException.class, () -> {\n            collatingIterator.setIterator(0, mockIterator);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "class_name": "CollatingIterator_setIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java.CollatingIterator_setIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java.UnmodifiableMapIterator_unmodifiableMapIteratorTest.[void]testUnmodifiableMapIteratorWithUnmodifiableIterator()", "name": "testUnmodifiableMapIteratorWithUnmodifiableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableMapIteratorWithUnmodifiableIterator()", "original_string": "    @Test\n    void testUnmodifiableMapIteratorWithUnmodifiableIterator() {\n        // Given\n        MapIterator<String, String> mockIterator = new MockUnmodifiableMapIterator<>();\n\n        // When\n        MapIterator<String, String> result = UnmodifiableMapIterator.unmodifiableMapIterator(mockIterator);\n\n        // Then\n        assertSame(mockIterator, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "class_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java.UnmodifiableMapIterator_unmodifiableMapIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java.UnmodifiableMapIterator_unmodifiableMapIteratorTest.[void]testUnmodifiableMapIteratorWithModifiableIterator()", "name": "testUnmodifiableMapIteratorWithModifiableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableMapIteratorWithModifiableIterator()", "original_string": "    @Test\n    void testUnmodifiableMapIteratorWithModifiableIterator() {\n        // Given\n        Map<String, String> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        MapIterator<String, String> modifiableIterator = new HashMapIterator<>(map);\n\n        // When\n        MapIterator<String, String> result = UnmodifiableMapIterator.unmodifiableMapIterator(modifiableIterator);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableMapIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "class_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java.UnmodifiableMapIterator_unmodifiableMapIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java.UnmodifiableMapIterator_unmodifiableMapIteratorTest.[void]testUnmodifiableMapIteratorWithNullIterator()", "name": "testUnmodifiableMapIteratorWithNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableMapIteratorWithNullIterator()", "original_string": "    @Test\n    void testUnmodifiableMapIteratorWithNullIterator() {\n        // Given\n        MapIterator<String, String> nullIterator = null;\n\n        // When / Then\n        assertThrows(NullPointerException.class, () -> {\n            UnmodifiableMapIterator.unmodifiableMapIterator(nullIterator);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "class_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java.UnmodifiableMapIterator_unmodifiableMapIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testRemoveThrows()", "name": "testRemoveThrows", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveThrows()", "original_string": "    @Test\n    public void testRemoveThrows() {\n        final CartesianProductIterator<Character> it = makeObject();\n        assertThrows(UnsupportedOperationException.class, it::remove);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testEmptyCollection()", "name": "testEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyCollection()", "original_string": "    @Test\n    public void testEmptyCollection() {\n        final CartesianProductIterator<Character> it = new CartesianProductIterator<>(letters, Collections.emptyList());\n        assertFalse(it.hasNext());\n        assertThrows(NoSuchElementException.class, it::next);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testExhaustivity()", "name": "testExhaustivity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExhaustivity()", "original_string": "    @Test\n    public void testExhaustivity() {\n        final List<Character[]> resultsList = new ArrayList<>();\n        final CartesianProductIterator<Character> it = makeObject();\n        while (it.hasNext()) {\n            final List<Character> tuple = it.next();\n            resultsList.add(tuple.toArray(new Character[0]));\n        }\n        assertThrows(NoSuchElementException.class, it::next);\n        assertEquals(18, resultsList.size());\n        final Iterator<Character[]> itResults = resultsList.iterator();\n        for (final Character a : letters) {\n            for (final Character b : numbers) {\n                for (final Character c : symbols) {\n                    assertArrayEquals(new Character[]{a, b, c}, itResults.next());\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest checking that all the tuples are returned\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testExhaustivityWithEmptyList()", "name": "testExhaustivityWithEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExhaustivityWithEmptyList()", "original_string": "    @Test\n    public void testExhaustivityWithEmptyList() {\n        final List<Character[]> resultsList = new ArrayList<>();\n        final CartesianProductIterator<Character> it = new CartesianProductIterator<>(letters, emptyList, symbols);\n        while (it.hasNext()) {\n            final List<Character> tuple = it.next();\n            resultsList.add(tuple.toArray(new Character[0]));\n        }\n        assertThrows(NoSuchElementException.class, it::next);\n        assertEquals(0, resultsList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest checking that no tuples are returned when at least one of the lists is empty\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testExhaustivityWithEmptyFirstList()", "name": "testExhaustivityWithEmptyFirstList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExhaustivityWithEmptyFirstList()", "original_string": "    @Test\n    public void testExhaustivityWithEmptyFirstList() {\n        final List<Character[]> resultsList = new ArrayList<>();\n        final CartesianProductIterator<Character> it = new CartesianProductIterator<>(emptyList, numbers, symbols);\n        while (it.hasNext()) {\n            final List<Character> tuple = it.next();\n            resultsList.add(tuple.toArray(new Character[0]));\n        }\n        assertThrows(NoSuchElementException.class, it::next);\n        assertEquals(0, resultsList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest checking that no tuples are returned when first of the lists is empty\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testExhaustivityWithEmptyLastList()", "name": "testExhaustivityWithEmptyLastList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExhaustivityWithEmptyLastList()", "original_string": "    @Test\n    public void testExhaustivityWithEmptyLastList() {\n        final List<Character[]> resultsList = new ArrayList<>();\n        final CartesianProductIterator<Character> it = new CartesianProductIterator<>(letters, numbers, emptyList);\n        while (it.hasNext()) {\n            final List<Character> tuple = it.next();\n            resultsList.add(tuple.toArray(new Character[0]));\n        }\n        assertThrows(NoSuchElementException.class, it::next);\n        assertEquals(0, resultsList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest checking that no tuples are returned when last of the lists is empty\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testExhaustivityWithAllEmptyLists()", "name": "testExhaustivityWithAllEmptyLists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExhaustivityWithAllEmptyLists()", "original_string": "    @Test\n    public void testExhaustivityWithAllEmptyLists() {\n        final List<Character[]> resultsList = new ArrayList<>();\n        final CartesianProductIterator<Character> it = new CartesianProductIterator<>(emptyList, emptyList, emptyList);\n        while (it.hasNext()) {\n            final List<Character> tuple = it.next();\n            resultsList.add(tuple.toArray(new Character[0]));\n        }\n        assertThrows(NoSuchElementException.class, it::next);\n        assertEquals(0, resultsList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest checking that no tuples are returned when all the lists are empty\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testExhaustivityWithSameList()", "name": "testExhaustivityWithSameList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExhaustivityWithSameList()", "original_string": "    @Test\n    public void testExhaustivityWithSameList() {\n        final List<Character[]> resultsList = new ArrayList<>();\n        final CartesianProductIterator<Character> it = new CartesianProductIterator<>(letters, letters, letters);\n        while (it.hasNext()) {\n            final List<Character> tuple = it.next();\n            resultsList.add(tuple.toArray(new Character[0]));\n        }\n        assertThrows(NoSuchElementException.class, it::next);\n        assertEquals(27, resultsList.size());\n        final Iterator<Character[]> itResults = resultsList.iterator();\n        for (final Character a : letters) {\n            for (final Character b : letters) {\n                for (final Character c : letters) {\n                    assertArrayEquals(new Character[]{a, b, c}, itResults.next());\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest checking that all tuples are returned when same list is passed multiple times\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest.[void]testForEachRemaining()", "name": "testForEachRemaining", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachRemaining()", "original_string": "    @Test\n    public void testForEachRemaining() {\n        final List<Character[]> resultsList = new ArrayList<>();\n        final CartesianProductIterator<Character> it = makeObject();\n        it.forEachRemaining(tuple -> resultsList.add(tuple.toArray(new Character[0])));\n        assertEquals(18, resultsList.size());\n        final Iterator<Character[]> itResults = resultsList.iterator();\n        for (final Character a : letters) {\n            for (final Character b : numbers) {\n                for (final Character c : symbols) {\n                    assertArrayEquals(new Character[]{a, b, c}, itResults.next());\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java", "class_name": "CartesianProductIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CartesianProductIteratorTest.java.CartesianProductIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest that all tuples are provided to consumer\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java.CollatingIterator_addIteratorTest.[void]testAddIterator_Success()", "name": "testAddIterator_Success", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddIterator_Success()", "original_string": "    @Test\n    void testAddIterator_Success() {\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        collatingIterator.addIterator(iterator);\n        assertEquals(1, collatingIterator.getIterators().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "class_name": "CollatingIterator_addIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java.CollatingIterator_addIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java.CollatingIterator_addIteratorTest.[void]testAddIterator_NullIterator()", "name": "testAddIterator_NullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddIterator_NullIterator()", "original_string": "    @Test\n    void testAddIterator_NullIterator() {\n        assertThrows(NullPointerException.class, () -> collatingIterator.addIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "class_name": "CollatingIterator_addIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java.CollatingIterator_addIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java.CollatingIterator_addIteratorTest.[void]testAddIterator_AfterStart()", "name": "testAddIterator_AfterStart", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testAddIterator_AfterStart()", "original_string": "    @Test\n    void testAddIterator_AfterStart() {\n        collatingIterator.hasNext(); // This will call start() internally\n        Iterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator();\n        assertThrows(IllegalStateException.class, () -> collatingIterator.addIterator(iterator));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "class_name": "CollatingIterator_addIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java.CollatingIterator_addIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest.[void]testNextWithPeek()", "name": "testNextWithPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithPeek()", "original_string": "    @Test\n    public void testNextWithPeek() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertEquals(\"a\", it.peek());\n        assertEquals(\"a\", it.next());\n        assertEquals(\"b\", it.peek());\n        assertEquals(\"b\", it.next());\n        assertEquals(\"c\", it.peek());\n        assertEquals(\"c\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "class_name": "PeekingIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest.[void]testNextWithoutPeek()", "name": "testNextWithoutPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithoutPeek()", "original_string": "    @Test\n    public void testNextWithoutPeek() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertEquals(\"a\", it.next());\n        assertEquals(\"b\", it.next());\n        assertEquals(\"c\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "class_name": "PeekingIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest.[void]testNextThrowsNoSuchElementException()", "name": "testNextThrowsNoSuchElementException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextThrowsNoSuchElementException()", "original_string": "    @Test\n    public void testNextThrowsNoSuchElementException() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        while (it.hasNext()) {\n            it.next();\n        }\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "class_name": "PeekingIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest.[void]testNextAfterElement()", "name": "testNextAfterElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAfterElement()", "original_string": "    @Test\n    public void testNextAfterElement() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertEquals(\"a\", it.element());\n        assertEquals(\"a\", it.next());\n        assertEquals(\"b\", it.element());\n        assertEquals(\"b\", it.next());\n        assertEquals(\"c\", it.element());\n        assertEquals(\"c\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "class_name": "PeekingIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest.[void]testNextAfterPeek()", "name": "testNextAfterPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAfterPeek()", "original_string": "    @Test\n    public void testNextAfterPeek() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertEquals(\"a\", it.peek());\n        assertEquals(\"a\", it.next());\n        assertEquals(\"b\", it.peek());\n        assertEquals(\"b\", it.next());\n        assertEquals(\"c\", it.peek());\n        assertEquals(\"c\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "class_name": "PeekingIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java.PeekingIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java.ListIteratorWrapper2Test.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final ListIterator<E> iter = makeObject();\n        for (final String testValue : testArray) {\n            final Object iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n\n        // now, read it backwards\n        for (int i = testArray.length - 1; i > -1; --i) {\n            final Object testValue = testArray[i];\n            final E iterValue = iter.previous();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        try {\n            iter.previous();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n\n        // now, read it forwards again\n        for (final String testValue : testArray) {\n            final Object iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java", "class_name": "ListIteratorWrapper2Test", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java.ListIteratorWrapper2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java.ListIteratorWrapper2Test.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testRemove()", "original_string": "    @Test\n    @Override\n    public void testRemove() {\n        final ListIterator<E> iter = makeObject();\n\n        //initial state:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(), \"ListIteratorWrapper#remove() should fail; must be initially positioned first\");\n\n        //no change from invalid op:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        //establish size:\n        int sz = list1.size();\n\n        //verify initial next() call:\n        assertEquals(list1.get(0), iter.next());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        //verify remove():\n        iter.remove();\n        assertEquals(--sz, list1.size());\n        //like we never started iterating:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(), \"ListIteratorWrapper#remove() should fail; must be repositioned first\");\n\n        //no change from invalid op:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        //two consecutive next() calls:\n        assertEquals(list1.get(0), iter.next());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        assertEquals(list1.get(1), iter.next());\n        assertEquals(1, iter.previousIndex());\n        assertEquals(2, iter.nextIndex());\n\n        //call previous():\n        assertEquals(list1.get(1), iter.previous());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        //should support remove() after calling previous() once from tip because we haven't changed the underlying iterator's position:\n        iter.remove();\n        assertEquals(--sz, list1.size());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        //this would dig into cache on a plain Iterator, but forwards directly to wrapped ListIterator:\n        assertEquals(list1.get(0), iter.previous());\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        //here's the proof; remove() still works:\n        iter.remove();\n        assertEquals(--sz, list1.size());\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        //further testing would be fairly meaningless:\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java", "class_name": "ListIteratorWrapper2Test", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java.ListIteratorWrapper2Test", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java.ListIteratorWrapper2Test.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final ResettableListIterator<E> iter = makeObject();\n        final E first = iter.next();\n        final E second = iter.next();\n\n        iter.reset();\n\n        // after reset, there shouldn't be any previous elements\n        assertFalse(iter.hasPrevious(), \"No previous elements after reset()\");\n\n        // after reset, the results should be the same as before\n        assertEquals(first, iter.next(), \"First element should be the same\");\n        assertEquals(second, iter.next(), \"Second element should be the same\");\n\n        // after passing the point, where we reset, continuation should work as expected\n        for (int i = 2; i < testArray.length; i++) {\n            final Object testValue = testArray[i];\n            final E iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java", "class_name": "ListIteratorWrapper2Test", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapper2Test.java.ListIteratorWrapper2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java.BoundedIterator_hasNextTest.[void]testHasNextWithinBounds()", "name": "testHasNextWithinBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHasNextWithinBounds()", "original_string": "    @Test\n    void testHasNextWithinBounds() {\n        Iterator<String> mockIterator = mock(Iterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n\n        BoundedIterator<String> boundedIterator = new BoundedIterator<>(mockIterator, 0, 1);\n        assertTrue(boundedIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "class_name": "BoundedIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java.BoundedIterator_hasNextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java.BoundedIterator_hasNextTest.[void]testHasNextOutOfBounds()", "name": "testHasNextOutOfBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHasNextOutOfBounds()", "original_string": "    @Test\n    void testHasNextOutOfBounds() {\n        Iterator<String> mockIterator = mock(Iterator.class);\n        when(mockIterator.hasNext()).thenReturn(true);\n\n        BoundedIterator<String> boundedIterator = new BoundedIterator<>(mockIterator, 0, 0);\n        assertFalse(boundedIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "class_name": "BoundedIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java.BoundedIterator_hasNextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java.BoundedIterator_hasNextTest.[void]testHasNextWithNoElements()", "name": "testHasNextWithNoElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testHasNextWithNoElements()", "original_string": "    @Test\n    void testHasNextWithNoElements() {\n        Iterator<String> mockIterator = mock(Iterator.class);\n        when(mockIterator.hasNext()).thenReturn(false);\n\n        BoundedIterator<String> boundedIterator = new BoundedIterator<>(mockIterator, 0, 1);\n        assertFalse(boundedIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "class_name": "BoundedIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java.BoundedIterator_hasNextTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java.IteratorIterable_iteratorTest.[void]testIteratorWithResettableIterator()", "name": "testIteratorWithResettableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithResettableIterator()", "original_string": "    @Test\n    public void testIteratorWithResettableIterator() {\n        // Given\n        ResettableIterator<String> mockResettableIterator = mock(ResettableIterator.class);\n        IteratorIterable<String> iterable = new IteratorIterable<>(mockResettableIterator);\n\n        // When\n        Iterator<String> result = iterable.iterator();\n\n        // Then\n        assertNotNull(result);\n        verify(mockResettableIterator, times(1)).reset();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java", "class_name": "IteratorIterable_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java.IteratorIterable_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java.IteratorIterable_iteratorTest.[void]testIteratorWithNonResettableIterator()", "name": "testIteratorWithNonResettableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorWithNonResettableIterator()", "original_string": "    @Test\n    public void testIteratorWithNonResettableIterator() {\n        // Given\n        Iterator<String> mockIterator = mock(Iterator.class);\n        IteratorIterable<String> iterable = new IteratorIterable<>(mockIterator);\n\n        // When\n        Iterator<String> result = iterable.iterator();\n\n        // Then\n        assertNotNull(result);\n        verifyNoInteractions(mockIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java", "class_name": "IteratorIterable_iteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java.IteratorIterable_iteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest.[void]testNextWithinBounds()", "name": "testNextWithinBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithinBounds()", "original_string": "    @Test\n    public void testNextWithinBounds() {\n        Iterator<String> iter = new BoundedIterator<>(testList.iterator(), 1, 3);\n        assertTrue(iter.hasNext());\n        assertEquals(\"B\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"C\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"D\", iter.next());\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "class_name": "BoundedIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest.[void]testNextOutOfBounds()", "name": "testNextOutOfBounds", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextOutOfBounds()", "original_string": "    @Test\n    public void testNextOutOfBounds() {\n        Iterator<String> iter = new BoundedIterator<>(testList.iterator(), 1, 3);\n        iter.next(); // Move to \"B\"\n        iter.next(); // Move to \"C\"\n        iter.next(); // Move to \"D\"\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "class_name": "BoundedIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest.[void]testNextWithOffsetGreaterThanSize()", "name": "testNextWithOffsetGreaterThanSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithOffsetGreaterThanSize()", "original_string": "    @Test\n    public void testNextWithOffsetGreaterThanSize() {\n        Iterator<String> iter = new BoundedIterator<>(testList.iterator(), 10, 4);\n        assertFalse(iter.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "class_name": "BoundedIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest.[void]testNextWithMaxZero()", "name": "testNextWithMaxZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithMaxZero()", "original_string": "    @Test\n    public void testNextWithMaxZero() {\n        Iterator<String> iter = new BoundedIterator<>(testList.iterator(), 0, 0);\n        assertFalse(iter.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "class_name": "BoundedIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java.BoundedIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest.[void]testElementWithValidIterator()", "name": "testElementWithValidIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementWithValidIterator()", "original_string": "    @Test\n    public void testElementWithValidIterator() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertEquals(\"a\", it.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "class_name": "PeekingIterator_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest.[void]testElementWithExhaustedIterator()", "name": "testElementWithExhaustedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementWithExhaustedIterator()", "original_string": "    @Test\n    public void testElementWithExhaustedIterator() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        while (it.hasNext()) {\n            it.next();\n        }\n        assertThrows(NoSuchElementException.class, () -> it.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "class_name": "PeekingIterator_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest.[void]testElementAfterPeek()", "name": "testElementAfterPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementAfterPeek()", "original_string": "    @Test\n    public void testElementAfterPeek() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertEquals(\"a\", it.peek());\n        assertEquals(\"a\", it.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "class_name": "PeekingIterator_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest.[void]testElementAfterNext()", "name": "testElementAfterNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementAfterNext()", "original_string": "    @Test\n    public void testElementAfterNext() {\n        PeekingIterator<String> it = new PeekingIterator<>(testList.iterator());\n        assertEquals(\"a\", it.next());\n        assertEquals(\"b\", it.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "class_name": "PeekingIterator_elementTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java.PeekingIterator_elementTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest.[void]testHasNextWithElements()", "name": "testHasNextWithElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextWithElements()", "original_string": "    @Test\n    public void testHasNextWithElements() {\n        PeekingIterator<String> it = makeObject();\n        assertTrue(it.hasNext());\n        it.next();\n        assertTrue(it.hasNext());\n        it.next();\n        assertTrue(it.hasNext());\n        it.next();\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "class_name": "PeekingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest.[void]testHasNextWithNoElements()", "name": "testHasNextWithNoElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextWithNoElements()", "original_string": "    @Test\n    public void testHasNextWithNoElements() {\n        PeekingIterator<String> it = new PeekingIterator<>(Collections.emptyIterator());\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "class_name": "PeekingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest.[void]testHasNextAfterPeek()", "name": "testHasNextAfterPeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextAfterPeek()", "original_string": "    @Test\n    public void testHasNextAfterPeek() {\n        PeekingIterator<String> it = makeObject();\n        it.peek();\n        assertTrue(it.hasNext());\n        it.next();\n        it.peek();\n        assertTrue(it.hasNext());\n        it.next();\n        it.peek();\n        assertTrue(it.hasNext());\n        it.next();\n        it.peek();\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "class_name": "PeekingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest.[void]testHasNextAfterElement()", "name": "testHasNextAfterElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextAfterElement()", "original_string": "    @Test\n    public void testHasNextAfterElement() {\n        PeekingIterator<String> it = makeObject();\n        it.element();\n        assertTrue(it.hasNext());\n        it.next();\n        it.element();\n        assertTrue(it.hasNext());\n        it.next();\n        it.element();\n        assertTrue(it.hasNext());\n        it.next();\n        assertThrows(NoSuchElementException.class, it::element);\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "class_name": "PeekingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java.PeekingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest.[void]testRemoveAllowed()", "name": "testRemoveAllowed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAllowed()", "original_string": "    @Test\n    public void testRemoveAllowed() {\n        iterator.next(); // Move to the element\n        iterator.remove(); // Remove the element\n        assertFalse(iterator.hasNext(), \"Iterator should be empty after removal\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "class_name": "SingletonIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest.[void]testRemoveNotAllowed()", "name": "testRemoveNotAllowed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveNotAllowed()", "original_string": "    @Test\n    public void testRemoveNotAllowed() {\n        iterator = new SingletonIterator<>(testValue, false);\n        iterator.next(); // Move to the element\n        assertThrows(UnsupportedOperationException.class, () -> iterator.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "class_name": "SingletonIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest.[void]testRemoveBeforeNext()", "name": "testRemoveBeforeNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveBeforeNext()", "original_string": "    @Test\n    public void testRemoveBeforeNext() {\n        assertThrows(IllegalStateException.class, () -> iterator.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "class_name": "SingletonIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest.[void]testRemoveAfterAlreadyRemoved()", "name": "testRemoveAfterAlreadyRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterAlreadyRemoved()", "original_string": "    @Test\n    public void testRemoveAfterAlreadyRemoved() {\n        iterator.next(); // Move to the element\n        iterator.remove(); // Remove the element\n        assertThrows(IllegalStateException.class, () -> iterator.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "class_name": "SingletonIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest.[void]testRemoveAfterReset()", "name": "testRemoveAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterReset()", "original_string": "    @Test\n    public void testRemoveAfterReset() {\n        iterator.next(); // Move to the element\n        iterator.reset(); // Reset the iterator\n        assertThrows(IllegalStateException.class, () -> iterator.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "class_name": "SingletonIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java.SingletonIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java.IteratorIterableTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unused\")\n    public void testIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unused\")\n    public void testIterator() {\n        final Iterator<Integer> iter = createIterator();\n        final Iterable<Number> iterable = new IteratorIterable<>(iter);\n\n        // first use\n        verifyIteration(iterable);\n\n        // second use\n        for (final Number actual : iterable) {\n            fail(\"should not be able to iterate twice\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java", "class_name": "IteratorIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java.IteratorIterableTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unused\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unused\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java.IteratorIterableTest.[void]testMultipleUserIterator()", "name": "testMultipleUserIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleUserIterator()", "original_string": "    @Test\n    public void testMultipleUserIterator() {\n        final Iterator<Integer> iter = createIterator();\n\n        final Iterable<Number> iterable = new IteratorIterable<>(iter, true);\n\n        // first use\n        verifyIteration(iterable);\n\n        // second use\n        verifyIteration(iterable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java", "class_name": "IteratorIterableTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterableTest.java.IteratorIterableTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java.PeekingIterator_peekingIteratorTest.[void]testPeekingIteratorWithNullIterator()", "name": "testPeekingIteratorWithNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPeekingIteratorWithNullIterator()", "original_string": "    @Test\n    void testPeekingIteratorWithNullIterator() {\n        assertThrows(NullPointerException.class, () -> {\n            PeekingIterator.peekingIterator(null);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "class_name": "PeekingIterator_peekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java.PeekingIterator_peekingIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java.PeekingIterator_peekingIteratorTest.[void]testPeekingIteratorWithNonPeekingIterator()", "name": "testPeekingIteratorWithNonPeekingIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPeekingIteratorWithNonPeekingIterator()", "original_string": "    @Test\n    void testPeekingIteratorWithNonPeekingIterator() {\n        Iterator<String> mockIterator = mock(Iterator.class);\n        PeekingIterator<String> peekingIterator = PeekingIterator.peekingIterator(mockIterator);\n        assertNotNull(peekingIterator);\n        assertNotSame(mockIterator, peekingIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "class_name": "PeekingIterator_peekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java.PeekingIterator_peekingIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java.PeekingIterator_peekingIteratorTest.[void]testPeekingIteratorWithPeekingIterator()", "name": "testPeekingIteratorWithPeekingIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testPeekingIteratorWithPeekingIterator()", "original_string": "    @Test\n    void testPeekingIteratorWithPeekingIterator() {\n        PeekingIterator<String> mockPeekingIterator = mock(PeekingIterator.class);\n        PeekingIterator<String> result = PeekingIterator.peekingIterator(mockPeekingIterator);\n        assertSame(mockPeekingIterator, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "class_name": "PeekingIterator_peekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java.PeekingIterator_peekingIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest.[void]testHasNextWithSingleIterator()", "name": "testHasNextWithSingleIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextWithSingleIterator()", "original_string": "    @Test\n    public void testHasNextWithSingleIterator() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator());\n        for (final Integer even : evens) {\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java", "class_name": "ZippingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest.[void]testHasNextWithMultipleIterators()", "name": "testHasNextWithMultipleIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextWithMultipleIterators()", "original_string": "    @Test\n    public void testHasNextWithMultipleIterators() {\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(evens.iterator(), odds.iterator(), fib.iterator());\n        int totalElements = evens.size() + odds.size() + fib.size();\n        for (int i = 0; i < totalElements; i++) {\n            assertTrue(iter.hasNext());\n            iter.next();\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java", "class_name": "ZippingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest.[void]testHasNextWithExhaustedIterator()", "name": "testHasNextWithExhaustedIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextWithExhaustedIterator()", "original_string": "    @Test\n    public void testHasNextWithExhaustedIterator() {\n        final List<Integer> shortList = new ArrayList<>();\n        shortList.add(1);\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(shortList.iterator(), evens.iterator());\n        assertTrue(iter.hasNext());\n        assertEquals(1, iter.next());\n        for (final Integer even : evens) {\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java", "class_name": "ZippingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest.[void]testHasNextWithAllExhaustedIterators()", "name": "testHasNextWithAllExhaustedIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextWithAllExhaustedIterators()", "original_string": "    @Test\n    public void testHasNextWithAllExhaustedIterators() {\n        final List<Integer> emptyList = new ArrayList<>();\n        final ZippingIterator<Integer> iter = new ZippingIterator<>(emptyList.iterator(), emptyList.iterator());\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java", "class_name": "ZippingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java.ZippingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest.[void]testNextSuccess()", "name": "testNextSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextSuccess()", "original_string": "    @Test\n    public void testNextSuccess() {\n        assertTrue(iterator.hasNext(), \"Iterator should have next item\");\n        assertEquals(testValue, iterator.next(), \"Iteration value is correct\");\n        assertFalse(iterator.hasNext(), \"Iterator should have no next item\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "class_name": "SingletonListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest.[void]testNextAfterReset()", "name": "testNextAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAfterReset()", "original_string": "    @Test\n    public void testNextAfterReset() {\n        iterator.next();\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertEquals(testValue, iterator.next(), \"Iteration value is correct after reset\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "class_name": "SingletonListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest.[void]testNextAfterRemove()", "name": "testNextAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAfterRemove()", "original_string": "    @Test\n    public void testNextAfterRemove() {\n        iterator.next();\n        iterator.remove();\n        assertFalse(iterator.hasNext(), \"Iterator should have no next item after remove\");\n        assertThrows(NoSuchElementException.class, () -> iterator.next(), \"NoSuchElementException must be thrown after remove\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "class_name": "SingletonListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest.[void]testNextWithoutHasNext()", "name": "testNextWithoutHasNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithoutHasNext()", "original_string": "    @Test\n    public void testNextWithoutHasNext() {\n        iterator.next();\n        assertThrows(NoSuchElementException.class, () -> iterator.next(), \"NoSuchElementException must be thrown without hasNext check\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "class_name": "SingletonListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest.[void]testNextAfterPrevious()", "name": "testNextAfterPrevious", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAfterPrevious()", "original_string": "    @Test\n    public void testNextAfterPrevious() {\n        iterator.next();\n        iterator.previous();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after previous\");\n        assertEquals(testValue, iterator.next(), \"Iteration value is correct after previous\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "class_name": "SingletonListIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java.SingletonListIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_removeTest.java.ObjectGraphIterator_removeTest.[void]testRemoveWithoutNext()", "name": "testRemoveWithoutNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithoutNext()", "original_string": "    @Test\n    public void testRemoveWithoutNext() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator(), null);\n        assertThrows(IllegalStateException.class, it::remove);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_removeTest.java", "class_name": "ObjectGraphIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_removeTest.java.ObjectGraphIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_removeTest.java.ObjectGraphIterator_removeTest.[void]testRemoveAfterNext()", "name": "testRemoveAfterNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterNext()", "original_string": "    @Test\n    public void testRemoveAfterNext() {\n        final Iterator<Object> it = new ObjectGraphIterator<>(iteratorList.iterator(), null);\n        assertTrue(it.hasNext());\n        it.next();\n        it.remove();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_removeTest.java", "class_name": "ObjectGraphIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_removeTest.java.ObjectGraphIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java.AbstractOrderedMapIteratorTest.[void]testEmptyMapIterator()", "name": "testEmptyMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testEmptyMapIterator()", "original_string": "    @Test\n    @Override\n    public void testEmptyMapIterator() {\n        if (!supportsEmptyIterator()) {\n            return;\n        }\n\n        super.testEmptyMapIterator();\n\n        final OrderedMapIterator<K, V> it = makeEmptyIterator();\n        assertFalse(it.hasPrevious());\n\n        assertThrows(NoSuchElementException.class, () -> it.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java", "class_name": "AbstractOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java.AbstractOrderedMapIteratorTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that the empty list iterator contract is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java.AbstractOrderedMapIteratorTest.[void]testFullMapIterator()", "name": "testFullMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testFullMapIterator()", "original_string": "    @Test\n    @Override\n    public void testFullMapIterator() {\n        if (!supportsFullIterator()) {\n            return;\n        }\n\n        super.testFullMapIterator();\n\n        final OrderedMapIterator<K, V> it = makeObject();\n        final Map<K, V> map = getMap();\n\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        final Set<K> set = new HashSet<>();\n        while (it.hasNext()) {\n            // getKey\n            final K key = it.next();\n            assertSame(key, it.getKey(), \"it.next() should equals getKey()\");\n            assertTrue(map.containsKey(key),  \"Key must be in map\");\n            assertTrue(set.add(key), \"Key must be unique\");\n\n            // getValue\n            final V value = it.getValue();\n            if (!isGetStructuralModify()) {\n                assertSame(map.get(key), value, \"Value must be mapped to key\");\n            }\n            assertTrue(map.containsValue(value),  \"Value must be in map\");\n\n            assertTrue(it.hasPrevious());\n\n            verify();\n        }\n        while (it.hasPrevious()) {\n            // getKey\n            final Object key = it.previous();\n            assertSame(key, it.getKey(), \"it.previous() should equals getKey()\");\n            assertTrue(map.containsKey(key),  \"Key must be in map\");\n            assertTrue(set.remove(key), \"Key must be unique\");\n\n            // getValue\n            final Object value = it.getValue();\n            if (!isGetStructuralModify()) {\n                assertSame(map.get(key), value, \"Value must be mapped to key\");\n            }\n            assertTrue(map.containsValue(value),  \"Value must be in map\");\n\n            assertTrue(it.hasNext());\n\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java", "class_name": "AbstractOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java.AbstractOrderedMapIteratorTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that the full list iterator contract is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java.AbstractOrderedMapIteratorTest.[void]testMapIteratorOrder()", "name": "testMapIteratorOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIteratorOrder()", "original_string": "    @Test\n    public void testMapIteratorOrder() {\n        if (!supportsFullIterator()) {\n            return;\n        }\n\n        final OrderedMapIterator<K, V> it = makeObject();\n        final Map<K, V> map = getMap();\n\n        assertEquals(new ArrayList<>(map.keySet()), new ArrayList<>(map.keySet()), \"keySet() not consistent\");\n\n        final Iterator<K> it2 = map.keySet().iterator();\n        assertTrue(it.hasNext());\n        assertTrue(it2.hasNext());\n        final List<K> list = new ArrayList<>();\n        while (it.hasNext()) {\n            final K key = it.next();\n            assertEquals(it2.next(), key);\n            list.add(key);\n        }\n        assertEquals(map.size(), list.size());\n        while (it.hasPrevious()) {\n            final K key = it.previous();\n            assertEquals(list.get(list.size() - 1), key);\n            list.remove(list.size() - 1);\n        }\n        assertEquals(0, list.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java", "class_name": "AbstractOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorTest.java.AbstractOrderedMapIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that the iterator order matches the keySet order.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java.UniqueFilterIteratorTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final Iterator<E> iter = makeObject();\n        for (final String testValue : testArray) {\n            final E iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java", "class_name": "UniqueFilterIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UniqueFilterIteratorTest.java.UniqueFilterIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java.CollatingIterator_getIteratorIndexTest.[void]testGetIteratorIndexSuccess()", "name": "testGetIteratorIndexSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIteratorIndexSuccess()", "original_string": "    @Test\n    public void testGetIteratorIndexSuccess() {\n        collatingIterator.next(); // This should set lastReturned to 0\n        assertEquals(0, collatingIterator.getIteratorIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java", "class_name": "CollatingIterator_getIteratorIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java.CollatingIterator_getIteratorIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java.CollatingIterator_getIteratorIndexTest.[void]testGetIteratorIndexNoValueReturnedYet()", "name": "testGetIteratorIndexNoValueReturnedYet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIteratorIndexNoValueReturnedYet()", "original_string": "    @Test\n    public void testGetIteratorIndexNoValueReturnedYet() {\n        assertThrows(IllegalStateException.class, () -> {\n            collatingIterator.getIteratorIndex();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java", "class_name": "CollatingIterator_getIteratorIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java.CollatingIterator_getIteratorIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.[void]testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator()", "name": "testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator()", "original_string": "    @Test\n    void testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator() {\n        // Given\n        OrderedMapIterator<String, String> mockIterator = mock(OrderedMapIterator.class);\n        when(mockIterator.hasNext()).thenReturn(false); // Add a valid method call to mock\n\n        // When\n        OrderedMapIterator<String, String> result = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(mockIterator);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableOrderedMapIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "class_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.[void]testUnmodifiableOrderedMapIteratorWithModifiableIterator()", "name": "testUnmodifiableOrderedMapIteratorWithModifiableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableOrderedMapIteratorWithModifiableIterator()", "original_string": "    @Test\n    void testUnmodifiableOrderedMapIteratorWithModifiableIterator() {\n        // Given\n        OrderedMapIterator<String, String> mockIterator = mock(OrderedMapIterator.class);\n        when(mockIterator.hasNext()).thenReturn(false); // Add a valid method call to mock\n\n        // When\n        OrderedMapIterator<String, String> result = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(mockIterator);\n\n        // Then\n        assertTrue(result instanceof UnmodifiableOrderedMapIterator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "class_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.[void]testUnmodifiableOrderedMapIteratorWithNullIterator()", "name": "testUnmodifiableOrderedMapIteratorWithNullIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testUnmodifiableOrderedMapIteratorWithNullIterator()", "original_string": "    @Test\n    void testUnmodifiableOrderedMapIteratorWithNullIterator() {\n        // Given\n        OrderedMapIterator<String, String> nullIterator = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(nullIterator);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "class_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java.UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java.ArrayListIteratorTest.[void]testListIterator()", "name": "testListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListIterator()", "original_string": "    @Test\n    public void testListIterator() {\n        final ListIterator<E> iter = makeObject();\n\n        // TestArrayIterator#testIterator() has already tested the iterator forward,\n        //  now we need to test it in reverse\n\n        // fast-forward the iterator to the end...\n        while (iter.hasNext()) {\n            iter.next();\n        }\n\n        for (int x = testArray.length - 1; x >= 0; x--) {\n            final Object testValue = testArray[x];\n            final Object iterValue = iter.previous();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasPrevious(), \"Iterator should now be empty\");\n\n        try {\n            iter.previous();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java", "class_name": "ArrayListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java.ArrayListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the basic ListIterator functionality - going backwards using\n{@code previous()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java.ArrayListIteratorTest.[void]testListIteratorSet()", "name": "testListIteratorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorSet() {\n        final String[] testData = { \"a\", \"b\", \"c\" };\n\n        final String[] result = { \"0\", \"1\", \"2\" };\n\n        ListIterator<E> iter = makeArrayListIterator(testData);\n        int x = 0;\n\n        while (iter.hasNext()) {\n            iter.next();\n            iter.set((E) Integer.toString(x));\n            x++;\n        }\n\n        assertArrayEquals(testData, result, \"The two arrays should have the same value, i.e. {0,1,2}\");\n\n        // a call to set() before a call to next() or previous() should throw an IllegalStateException\n        iter = makeArrayListIterator(testArray);\n\n        final ListIterator<E> finalIter = iter;\n        assertThrows(IllegalStateException.class, () -> finalIter.set((E) \"should fail\"), \"ListIterator#set should fail if next() or previous() have not yet been called.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java", "class_name": "ArrayListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ArrayListIteratorTest.java.ArrayListIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the {@link java.util.ListIterator#set} operation.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdd()", "original_string": "    @Test\n    public void testAdd() {\n        List<String> list = new ArrayList<>(Arrays.asList(\"b\", \"e\", \"f\"));\n        LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <b> e f\n\n        loop.add(\"a\");                      // <a> b e f\n        assertEquals(\"b\", loop.next());     // a <b> e f\n        loop.reset();                       // <a> b e f\n        assertEquals(\"a\", loop.next());     // a <b> e f\n        assertEquals(\"b\", loop.next());     // a b <e> f\n\n        loop.add(\"c\");                      // a b c <e> f\n        assertEquals(\"e\", loop.next());     // a b c e <f>\n        assertEquals(\"e\", loop.previous()); // a b c <e> f\n        assertEquals(\"c\", loop.previous()); // a b <c> e f\n        assertEquals(\"c\", loop.next());     // a b c <e> f\n\n        loop.add(\"d\");                      // a b c d <e> f\n        loop.reset();                       // <a> b c d e f\n        assertEquals(\"a\", loop.next());     // a <b> c d e f\n        assertEquals(\"b\", loop.next());     // a b <c> d e f\n        assertEquals(\"c\", loop.next());     // a b c <d> e f\n        assertEquals(\"d\", loop.next());     // a b c d <e> f\n        assertEquals(\"e\", loop.next());     // a b c d e <f>\n        assertEquals(\"f\", loop.next());     // <a> b c d e f\n        assertEquals(\"a\", loop.next());     // a <b> c d e f\n\n        list = new ArrayList<>(Arrays.asList(\"b\", \"e\", \"f\"));\n        loop = new LoopingListIterator<>(list); // <b> e f\n\n        loop.add(\"a\");                      // a <b> e f\n        assertEquals(\"a\", loop.previous()); // a b e <f>\n        loop.reset();                       // <a> b e f\n        assertEquals(\"f\", loop.previous()); // a b e <f>\n        assertEquals(\"e\", loop.previous()); // a b <e> f\n\n        loop.add(\"d\");                      // a b d <e> f\n        assertEquals(\"d\", loop.previous()); // a b <d> e f\n\n        loop.add(\"c\");                      // a b c <d> e f\n        assertEquals(\"c\", loop.previous()); // a b <c> d e f\n\n        loop.reset();\n        assertEquals(\"a\", loop.next());     // a <b> c d e f\n        assertEquals(\"b\", loop.next());     // a b <c> d e f\n        assertEquals(\"c\", loop.next());     // a b c <d> e f\n        assertEquals(\"d\", loop.next());     // a b c d <e> f\n        assertEquals(\"e\", loop.next());     // a b c d e <f>\n        assertEquals(\"f\", loop.next());     // <a> b c d e f\n        assertEquals(\"a\", loop.next());     // a <b> c d e f\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the add method.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testConstructorEx()", "name": "testConstructorEx", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorEx()", "original_string": "    @Test\n    public void testConstructorEx() {\n        assertThrows(NullPointerException.class, () -> new LoopingListIterator<>(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests constructor exception.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testJoggingNotOverBoundary()", "name": "testJoggingNotOverBoundary", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoggingNotOverBoundary()", "original_string": "    @Test\n    public void testJoggingNotOverBoundary() {\n        final List<String> list = Arrays.asList(\"a\", \"b\");\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a> b\n\n        // Try jogging back and forth between the elements, but not\n        // over the begin/end boundary.\n        loop.reset();\n        assertEquals(\"a\", loop.next());     // a <b>\n        assertEquals(\"a\", loop.previous()); // <a> b\n        assertEquals(\"a\", loop.next());     // a <b>\n\n        assertEquals(\"b\", loop.next());     // <a> b\n        assertEquals(\"b\", loop.previous()); // a <b>\n        assertEquals(\"b\", loop.next());     // <a> b\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests jogging back and forth between two elements, but not over\nthe begin/end boundary of the list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testJoggingOverBoundary()", "name": "testJoggingOverBoundary", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoggingOverBoundary()", "original_string": "    @Test\n    public void testJoggingOverBoundary() {\n        final List<String> list = Arrays.asList(\"a\", \"b\");\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a> b\n\n        // Try jogging back and forth between the elements, but not\n        // over the begin/end boundary.\n        assertEquals(\"b\", loop.previous()); // a <b>\n        assertEquals(\"b\", loop.next());     // <a> b\n        assertEquals(\"b\", loop.previous()); // a <b>\n\n        assertEquals(\"a\", loop.previous()); // <a> b\n        assertEquals(\"a\", loop.next());     // a <b>\n        assertEquals(\"a\", loop.previous()); // <a> b\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests jogging back and forth between two elements over the\nbegin/end boundary of the list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testLooping0()", "name": "testLooping0", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLooping0()", "original_string": "    @Test\n    public void testLooping0() {\n        final List<Object> list = new ArrayList<>();\n        final LoopingListIterator<Object> loop = new LoopingListIterator<>(list);\n        assertFalse(loop.hasNext());\n        assertFalse(loop.hasPrevious());\n        assertAll(\n                () -> assertThrows(NoSuchElementException.class, () -> loop.next()),\n                () -> assertThrows(NoSuchElementException.class, () -> loop.previous())\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether an empty looping list iterator works.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testLooping1()", "name": "testLooping1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLooping1()", "original_string": "    @Test\n    public void testLooping1() {\n        final List<String> list = Arrays.asList(\"a\");\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a>\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"a\", loop.next());     // <a>\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"a\", loop.next());     // <a>\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"a\", loop.next());     // <a>\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"a\", loop.previous()); // <a>\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"a\", loop.previous()); // <a>\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"a\", loop.previous()); // <a>\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether a looping list iterator works on a list with only\none element.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testLooping2()", "name": "testLooping2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLooping2()", "original_string": "    @Test\n    public void testLooping2() {\n        final List<String> list = Arrays.asList(\"a\", \"b\");\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a> b\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"a\", loop.next());     // a <b>\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"b\", loop.next());     // <a> b\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"a\", loop.next());     // a <b>\n\n        // Reset the iterator and try using previous.\n        loop.reset();                       // <a> b\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"b\", loop.previous()); // a <b>\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"a\", loop.previous()); // <a> b\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"b\", loop.previous()); // a <b>\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests whether a looping list iterator works on a list with two\nelements.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testNextAndPreviousIndex()", "name": "testNextAndPreviousIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAndPreviousIndex()", "original_string": "    @Test\n    public void testNextAndPreviousIndex() {\n        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a> b c\n\n        assertEquals(0, loop.nextIndex());\n        assertEquals(2, loop.previousIndex());\n\n        assertEquals(\"a\", loop.next());        // a <b> c\n        assertEquals(1, loop.nextIndex());\n        assertEquals(0, loop.previousIndex());\n\n        assertEquals(\"a\", loop.previous());    // <a> b c\n        assertEquals(0, loop.nextIndex());\n        assertEquals(2, loop.previousIndex());\n\n        assertEquals(\"c\", loop.previous());    // a b <c>\n        assertEquals(2, loop.nextIndex());\n        assertEquals(1, loop.previousIndex());\n\n        assertEquals(\"b\", loop.previous());    // a <b> c\n        assertEquals(1, loop.nextIndex());\n        assertEquals(0, loop.previousIndex());\n\n        assertEquals(\"a\", loop.previous());    // <a> b c\n        assertEquals(0, loop.nextIndex());\n        assertEquals(2, loop.previousIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests nextIndex and previousIndex.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testRemovingElementsAndIteratingBackwards()", "name": "testRemovingElementsAndIteratingBackwards", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemovingElementsAndIteratingBackwards()", "original_string": "    @Test\n    public void testRemovingElementsAndIteratingBackwards() {\n        final List<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a> b c\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"c\", loop.previous()); // a b <c>\n        loop.remove();                      // <a> b\n        assertEquals(2, list.size());\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"b\", loop.previous()); // a <b>\n        loop.remove();                      // <a>\n        assertEquals(1, list.size());\n\n        assertTrue(loop.hasPrevious());\n        assertEquals(\"a\", loop.previous()); // <a>\n        loop.remove();                      // ---\n        assertEquals(0, list.size());\n\n        assertFalse(loop.hasPrevious());\n\n        assertThrows(NoSuchElementException.class, () -> loop.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests removing an element from a wrapped ArrayList.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testRemovingElementsAndIteratingForward()", "name": "testRemovingElementsAndIteratingForward", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemovingElementsAndIteratingForward()", "original_string": "    @Test\n    public void testRemovingElementsAndIteratingForward() {\n        final List<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a> b c\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"a\", loop.next()); // a <b> c\n        loop.remove();                  // <b> c\n        assertEquals(2, list.size());\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"b\", loop.next()); // b <c>\n        loop.remove();                  // <c>\n        assertEquals(1, list.size());\n\n        assertTrue(loop.hasNext());\n        assertEquals(\"c\", loop.next()); // <c>\n        loop.remove();                  // ---\n        assertEquals(0, list.size());\n\n        assertFalse(loop.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> loop.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests removing an element from a wrapped ArrayList.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final List<String> list = Arrays.asList(\"a\", \"b\", \"c\");\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <a> b c\n\n        assertEquals(\"a\", loop.next()); // a <b> c\n        assertEquals(\"b\", loop.next()); // a b <c>\n        loop.reset();                   // <a> b c\n        assertEquals(\"a\", loop.next()); // a <b> c\n        loop.reset();                   // <a> b c\n        assertEquals(\"a\", loop.next()); // a <b> c\n        assertEquals(\"b\", loop.next()); // a b <c>\n        assertEquals(\"c\", loop.next()); // <a> b c\n        loop.reset();                   // <a> b c\n\n        assertEquals(\"c\", loop.previous()); // a b <c>\n        assertEquals(\"b\", loop.previous()); // a <b> c\n        loop.reset();                       // <a> b c\n        assertEquals(\"c\", loop.previous()); // a b <c>\n        loop.reset();                       // <a> b c\n        assertEquals(\"c\", loop.previous()); // a b <c>\n        assertEquals(\"b\", loop.previous()); // a <b> c\n        assertEquals(\"a\", loop.previous()); // <a> b c\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the reset method.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest.[void]testSet()", "name": "testSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSet()", "original_string": "    @Test\n    public void testSet() {\n        final List<String> list = Arrays.asList(\"q\", \"r\", \"z\");\n        final LoopingListIterator<String> loop = new LoopingListIterator<>(list); // <q> r z\n\n        assertEquals(\"z\", loop.previous()); // q r <z>\n        loop.set(\"c\");                      // q r <c>\n\n        loop.reset();                       // <q> r c\n        assertEquals(\"q\", loop.next());     // q <r> c\n        loop.set(\"a\");                      // a <r> c\n\n        assertEquals(\"r\", loop.next());     // a r <c>\n        loop.set(\"b\");                      // a b <c>\n\n        loop.reset();                       // <a> b c\n        assertEquals(\"a\", loop.next());     // a <b> c\n        assertEquals(\"b\", loop.next());     // a b <c>\n        assertEquals(\"c\", loop.next());     // <a> b c\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java", "class_name": "LoopingListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIteratorTest.java.LoopingListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests using the set method to change elements.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest.[void]testEmptyListIteratorIsIndeedEmpty()", "name": "testEmptyListIteratorIsIndeedEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testEmptyListIteratorIsIndeedEmpty()", "original_string": "    @Test\n    @Override\n    public void testEmptyListIteratorIsIndeedEmpty() {\n        final ListIterator<E> it = makeEmptyIterator();\n\n        assertFalse(it.hasNext());\n        assertEquals(-1, it.nextIndex());  // reversed index\n        assertFalse(it.hasPrevious());\n        assertEquals(0, it.previousIndex());  // reversed index\n\n        assertAll(\n                // next() should throw a NoSuchElementException\n                () -> assertThrows(NoSuchElementException.class, () -> it.next(),\n                        \"NoSuchElementException must be thrown from empty ListIterator\"),\n                // previous() should throw a NoSuchElementException\n                () -> assertThrows(NoSuchElementException.class, () -> it.previous(),\n                        \"NoSuchElementException must be thrown from empty ListIterator\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java", "class_name": "ReverseListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " overrides"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final ResettableListIterator<E> it = makeObject();\n        assertEquals(\"Four\", it.next());\n        it.reset();\n        assertEquals(\"Four\", it.next());\n        it.next();\n        it.next();\n        it.reset();\n        assertEquals(\"Four\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java", "class_name": "ReverseListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest.[void]testReverse()", "name": "testReverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReverse()", "original_string": "    @Test\n    public void testReverse() {\n        final ListIterator<E> it = makeObject();\n        assertTrue(it.hasNext());\n        assertEquals(3, it.nextIndex());\n        assertFalse(it.hasPrevious());\n        assertEquals(4, it.previousIndex());\n        assertEquals(\"Four\", it.next());\n        assertEquals(2, it.nextIndex());\n        assertTrue(it.hasNext());\n        assertEquals(3, it.previousIndex());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"Three\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(1, it.nextIndex());\n        assertTrue(it.hasPrevious());\n        assertEquals(2, it.previousIndex());\n        assertEquals(\"Two\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(0, it.nextIndex());\n        assertTrue(it.hasPrevious());\n        assertEquals(1, it.previousIndex());\n        assertEquals(\"One\", it.next());\n        assertFalse(it.hasNext());\n        assertEquals(-1, it.nextIndex());\n        assertTrue(it.hasPrevious());\n        assertEquals(0, it.previousIndex());\n        assertEquals(\"One\", it.previous());\n        assertEquals(\"Two\", it.previous());\n        assertEquals(\"Three\", it.previous());\n        assertEquals(\"Four\", it.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java", "class_name": "ReverseListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest.[void]testWalkForwardAndBack()", "name": "testWalkForwardAndBack", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testWalkForwardAndBack()", "original_string": "    @Test\n    @Override\n    public void testWalkForwardAndBack() {\n        final ArrayList<E> list = new ArrayList<>();\n        final ListIterator<E> it = makeObject();\n        while (it.hasNext()) {\n            list.add(it.next());\n        }\n\n        // check state at end\n        assertFalse(it.hasNext());\n        assertTrue(it.hasPrevious());\n\n        // this had to be commented out, as there is a bug in the JDK before JDK1.5\n        // where calling previous at the start of an iterator would push the cursor\n        // back to an invalid negative value\n//        try {\n//            it.next();\n//            fail(\"NoSuchElementException must be thrown from next at end of ListIterator\");\n//        } catch (NoSuchElementException e) {\n//        }\n\n        // loop back through comparing\n        for (int i = list.size() - 1; i >= 0; i--) {\n            assertEquals(list.size() - i - 2, it.nextIndex(), \"\" + i);  // reversed index\n            assertEquals(list.size() - i - 1, it.previousIndex());  // reversed index\n\n            final Object obj = list.get(i);\n            assertEquals(obj, it.previous());\n        }\n\n        // check state at start\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n\n        assertThrows(NoSuchElementException.class, () -> it.previous(),\n                \"NoSuchElementException must be thrown from previous at start of ListIterator\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java", "class_name": "ReverseListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ReverseListIteratorTest.java.ReverseListIteratorTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java.UnmodifiableListIteratorTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        ListIterator<E> it = makeObject();\n        assertSame(it, UnmodifiableListIterator.unmodifiableListIterator(it));\n\n        it = testList.listIterator();\n        assertNotSame(it, UnmodifiableListIterator.unmodifiableListIterator(it));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableListIterator.unmodifiableListIterator(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java", "class_name": "UnmodifiableListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java.UnmodifiableListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java.UnmodifiableListIteratorTest.[void]testListIterator()", "name": "testListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListIterator()", "original_string": "    @Test\n    public void testListIterator() {\n        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java", "class_name": "UnmodifiableListIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIteratorTest.java.UnmodifiableListIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest.[void]testPreviousIndexWithEmptyList()", "name": "testPreviousIndexWithEmptyList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousIndexWithEmptyList()", "original_string": "    @Test\n    public void testPreviousIndexWithEmptyList() {\n        loopingListIterator = new LoopingListIterator<>(Arrays.asList());\n        assertThrows(NoSuchElementException.class, () -> {\n            loopingListIterator.previousIndex();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java", "class_name": "LoopingListIterator_previousIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest.[void]testPreviousIndexAtBeginning()", "name": "testPreviousIndexAtBeginning", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousIndexAtBeginning()", "original_string": "    @Test\n    public void testPreviousIndexAtBeginning() {\n        assertEquals(2, loopingListIterator.previousIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java", "class_name": "LoopingListIterator_previousIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest.[void]testPreviousIndexAfterPrevious()", "name": "testPreviousIndexAfterPrevious", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousIndexAfterPrevious()", "original_string": "    @Test\n    public void testPreviousIndexAfterPrevious() {\n        loopingListIterator.previous();\n        assertEquals(1, loopingListIterator.previousIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java", "class_name": "LoopingListIterator_previousIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest.[void]testPreviousIndexAfterReset()", "name": "testPreviousIndexAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousIndexAfterReset()", "original_string": "    @Test\n    public void testPreviousIndexAfterReset() {\n        loopingListIterator.reset();\n        assertEquals(2, loopingListIterator.previousIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java", "class_name": "LoopingListIterator_previousIndexTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_previousIndexTest.java.LoopingListIterator_previousIndexTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest.[void]testEmptyCollection()", "name": "testEmptyCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyCollection()", "original_string": "    @Test\n    public void testEmptyCollection() {\n        final PermutationIterator<Character> it = makeEmptyIterator();\n        // there is one permutation for an empty set: 0! = 1\n        assertTrue(it.hasNext());\n\n        final List<Character> nextPermutation = it.next();\n        assertEquals(0, nextPermutation.size());\n\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "class_name": "PermutationIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest.[void]testPermutationException()", "name": "testPermutationException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPermutationException()", "original_string": "    @Test\n    public void testPermutationException() {\n        final List<List<Character>> resultsList = new ArrayList<>();\n\n        final PermutationIterator<Character> it = makeObject();\n        while (it.hasNext()) {\n            final List<Character> permutation = it.next();\n            resultsList.add(permutation);\n        }\n        //asking for another permutation should throw an exception\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "class_name": "PermutationIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest.[void]testPermutationExhaustivity()", "name": "testPermutationExhaustivity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testPermutationExhaustivity()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testPermutationExhaustivity() {\n        final List<Character> perm1 = new ArrayList<>();\n        final List<Character> perm2 = new ArrayList<>();\n        final List<Character> perm3 = new ArrayList<>();\n        final List<Character> perm4 = new ArrayList<>();\n        final List<Character> perm5 = new ArrayList<>();\n        final List<Character> perm6 = new ArrayList<>();\n\n        perm1.add('A');\n        perm2.add('A');\n        perm3.add('B');\n        perm4.add('B');\n        perm5.add('C');\n        perm6.add('C');\n\n        perm1.add('B');\n        perm2.add('C');\n        perm3.add('A');\n        perm4.add('C');\n        perm5.add('A');\n        perm6.add('B');\n\n        perm1.add('C');\n        perm2.add('B');\n        perm3.add('C');\n        perm4.add('A');\n        perm5.add('B');\n        perm6.add('A');\n\n        final List<List<Character>> results = new ArrayList<>();\n\n        final PermutationIterator<Character> it = makeObject();\n        while (it.hasNext()) {\n            final List<Character> next = it.next();\n            results.add(next);\n        }\n        //3! permutation for 3 elements\n        assertEquals(6, results.size());\n        assertTrue(results.contains(perm1));\n        assertTrue(results.contains(perm2));\n        assertTrue(results.contains(perm3));\n        assertTrue(results.contains(perm4));\n        assertTrue(results.contains(perm5));\n        assertTrue(results.contains(perm6));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "class_name": "PermutationIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": "\ntest checking that all the permutations are returned\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest.[void]testPermutationResultSize()", "name": "testPermutationResultSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testPermutationResultSize()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testPermutationResultSize() {\n        int factorial = 1;\n        for (int i = 0; i < 8; i++, factorial *= i) {\n            final List<Integer> list = new ArrayList<>();\n            for (int j = 0; j < i; j++) {\n                list.add(j);\n            }\n            final Iterator<List<Integer>> it = new PermutationIterator<>(list);\n            int count = 0;\n            while (it.hasNext()) {\n                it.next();\n                count++;\n            }\n            assertEquals(factorial, count);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "class_name": "PermutationIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest.[void]testPermutationUnicity()", "name": "testPermutationUnicity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPermutationUnicity()", "original_string": "    @Test\n    public void testPermutationUnicity() {\n        final List<List<Character>> resultsList = new ArrayList<>();\n        final Set<List<Character>> resultsSet = new HashSet<>();\n\n        final PermutationIterator<Character> it = makeObject();\n        while (it.hasNext()) {\n            final List<Character> permutation = it.next();\n            resultsList.add(permutation);\n            resultsSet.add(permutation);\n        }\n        //3! permutation for 3 elements\n        assertEquals(6, resultsList.size());\n        assertEquals(6, resultsSet.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "class_name": "PermutationIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\ntest checking that all the permutations are returned only once.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest.[void]testPermutatorHasMore()", "name": "testPermutatorHasMore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPermutatorHasMore()", "original_string": "    @Test\n    public void testPermutatorHasMore() {\n        final PermutationIterator<Character> it = makeObject();\n        for (int i = 0; i < 6; i++) {\n            assertTrue(it.hasNext());\n            it.next();\n        }\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java", "class_name": "PermutationIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PermutationIteratorTest.java.PermutationIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java.ListIteratorWrapperTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterator()", "original_string": "    @Test\n    public void testIterator() {\n        final ListIterator<E> iter = makeObject();\n        for (final String testValue : testArray) {\n            final Object iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        assertFalse(iter.hasNext(), \"Iterator should now be empty\");\n\n        try {\n            iter.next();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n\n        // now, read it backwards\n        for (int i = testArray.length - 1; i > -1; --i) {\n            final Object testValue = testArray[i];\n            final E iterValue = iter.previous();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n        try {\n            iter.previous();\n        } catch (final Exception e) {\n            assertEquals(e.getClass(), new NoSuchElementException().getClass(), \"NoSuchElementException must be thrown\");\n        }\n\n        // now, read it forwards again\n        for (final String testValue : testArray) {\n            final Object iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java", "class_name": "ListIteratorWrapperTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java.ListIteratorWrapperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java.ListIteratorWrapperTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testRemove()", "original_string": "    @Test\n    @Override\n    public void testRemove() {\n        final ListIterator<E> iter = makeObject();\n\n        //initial state:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(),\n                \"ListIteratorWrapper#remove() should fail; must be initially positioned first\");\n\n        //no change from invalid op:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        //establish size:\n        int sz = list1.size();\n\n        //verify initial next() call:\n        assertEquals(list1.get(0), iter.next());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        //verify remove():\n        iter.remove();\n        assertEquals(--sz, list1.size());\n        //like we never started iterating:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(),\n                \"ListIteratorWrapper#remove() should fail; must be repositioned first\");\n\n        //no change from invalid op:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        //two consecutive next() calls:\n        assertEquals(list1.get(0), iter.next());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        assertEquals(list1.get(1), iter.next());\n        assertEquals(1, iter.previousIndex());\n        assertEquals(2, iter.nextIndex());\n\n        //call previous():\n        assertEquals(list1.get(1), iter.previous());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        //should support remove() after calling previous() once from tip because we haven't changed the underlying iterator's position:\n        iter.remove();\n        assertEquals(--sz, list1.size());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        //dig into cache\n        assertEquals(list1.get(0), iter.previous());\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        assertThrows(IllegalStateException.class, () -> iter.remove(),\n                \"ListIteratorWrapper does not support the remove() method while dug into the cache via previous()\");\n\n        //no change from invalid op:\n        assertEquals(-1, iter.previousIndex());\n        assertEquals(0, iter.nextIndex());\n\n        //dig out of cache, first next() maintains current position:\n        assertEquals(list1.get(0), iter.next());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n        //continue traversing underlying iterator with this next() call, and we're out of the hole, so to speak:\n        assertEquals(list1.get(1), iter.next());\n        assertEquals(1, iter.previousIndex());\n        assertEquals(2, iter.nextIndex());\n\n        //verify remove() works again:\n        iter.remove();\n        assertEquals(--sz, list1.size());\n        assertEquals(0, iter.previousIndex());\n        assertEquals(1, iter.nextIndex());\n\n        assertEquals(list1.get(1), iter.next());\n        assertEquals(1, iter.previousIndex());\n        assertEquals(2, iter.nextIndex());\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java", "class_name": "ListIteratorWrapperTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java.ListIteratorWrapperTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java.ListIteratorWrapperTest.[void]testReset()", "name": "testReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReset()", "original_string": "    @Test\n    public void testReset() {\n        final ResettableListIterator<E> iter = makeObject();\n        final E first = iter.next();\n        final E second = iter.next();\n\n        iter.reset();\n\n        // after reset, there shouldn't be any previous elements\n        assertFalse(iter.hasPrevious(), \"No previous elements after reset()\");\n\n        // after reset, the results should be the same as before\n        assertEquals(first, iter.next(), \"First element should be the same\");\n        assertEquals(second, iter.next(), \"Second element should be the same\");\n\n        // after passing the point, where we reset, continuation should work as expected\n        for (int i = 2; i < testArray.length; i++) {\n            final Object testValue = testArray[i];\n            final E iterValue = iter.next();\n\n            assertEquals(testValue, iterValue, \"Iteration value is correct\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java", "class_name": "ListIteratorWrapperTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/ListIteratorWrapperTest.java.ListIteratorWrapperTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testGetSetComparator()", "name": "testGetSetComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetSetComparator()", "original_string": "    @Test\n    public void testGetSetComparator() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>();\n        assertNull(iter.getComparator());\n        iter.setComparator(comparator);\n        assertSame(comparator, iter.getComparator());\n        iter.setComparator(null);\n        assertNull(iter.getComparator());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "------------------------------------------------------------------- Tests"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testIterateEven()", "name": "testIterateEven", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateEven()", "original_string": "    @Test\n    public void testIterateEven() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(evens.iterator());\n        for (final Integer even : evens) {\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n            assertEquals(0, iter.getIteratorIndex());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testIterateEvenEven()", "name": "testIterateEvenEven", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateEvenEven()", "original_string": "    @Test\n    public void testIterateEvenEven() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(evens.iterator());\n        iter.addIterator(evens.iterator());\n        for (final Integer even : evens) {\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n            assertEquals(0, iter.getIteratorIndex());\n            assertTrue(iter.hasNext());\n            assertEquals(even, iter.next());\n            assertEquals(1, iter.getIteratorIndex());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testIterateEvenOdd()", "name": "testIterateEvenOdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateEvenOdd()", "original_string": "    @Test\n    public void testIterateEvenOdd() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator, evens.iterator(), odds.iterator());\n        for (int i = 0; i < 20; i++) {\n            assertTrue(iter.hasNext());\n            assertEquals(Integer.valueOf(i), iter.next());\n            assertEquals(i % 2, iter.getIteratorIndex());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testIterateFibEvenOdd()", "name": "testIterateFibEvenOdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateFibEvenOdd()", "original_string": "    @Test\n    public void testIterateFibEvenOdd() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(fib.iterator());\n        iter.addIterator(evens.iterator());\n        iter.addIterator(odds.iterator());\n\n        assertEquals(Integer.valueOf(0), iter.next());  // even   0\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(0, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(1), iter.next());  // fib    1\n        assertEquals(0, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(1), iter.next());  // odd    1\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(2), iter.next());  // fib    2\n        assertEquals(0, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(2), iter.next());  // even   2\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(3), iter.next());  // fib    3\n        assertEquals(0, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(3), iter.next());  // odd    3\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(4), iter.next());  // even   4\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(5), iter.next());  // fib    5\n        assertEquals(0, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(5), iter.next());  // odd    5\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(6), iter.next());  // even   6\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(7), iter.next());  // odd    7\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(8), iter.next());  // fib    8\n        assertEquals(0, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(8), iter.next());  // even   8\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(9), iter.next());  // odd    9\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(10), iter.next()); // even  10\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(11), iter.next()); // odd   11\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(12), iter.next()); // even  12\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(13), iter.next()); // fib   13\n        assertEquals(0, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(13), iter.next()); // odd   13\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(14), iter.next()); // even  14\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(15), iter.next()); // odd   15\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(16), iter.next()); // even  16\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(17), iter.next()); // odd   17\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(18), iter.next()); // even  18\n        assertEquals(1, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(19), iter.next()); // odd   19\n        assertEquals(2, iter.getIteratorIndex());\n        assertEquals(Integer.valueOf(21), iter.next()); // fib   21\n        assertEquals(0, iter.getIteratorIndex());\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testIterateOddEven()", "name": "testIterateOddEven", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIterateOddEven()", "original_string": "    @Test\n    public void testIterateOddEven() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator, odds.iterator(), evens.iterator());\n        for (int i = 0; i < 20; i++) {\n            assertTrue(iter.hasNext());\n            assertEquals(Integer.valueOf(i), iter.next());\n            assertEquals(i % 2 == 0 ? 1 : 0, iter.getIteratorIndex());\n        }\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testNullComparator()", "name": "testNullComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullComparator()", "original_string": "    @Test\n    public void testNullComparator() {\n        final List<Integer> l1 = Arrays.asList(1, 3, 5);\n        final List<Integer> l2 = Arrays.asList(2, 4, 6);\n\n        final CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<>(null, l1.iterator(), l2.iterator());\n        try {\n            collatingIterator1.next();\n        } catch (final NullPointerException e) {\n            assertTrue(e.getMessage().startsWith(\"You must invoke setComparator\"));\n        }\n\n        int i = 0;\n        final CollatingIterator<Integer> collatingIterator2 = new CollatingIterator<>(null, l1.iterator(), l2.iterator());\n        collatingIterator2.setComparator(new ComparableComparator<>());\n        for ( ; collatingIterator2.hasNext(); i++ ) {\n            final Integer n = collatingIterator2.next();\n            assertEquals((int) n, i + 1, \"wrong order\");\n        }\n        assertEquals(i, l1.size() + l2.size(), \"wrong size\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testRemoveFromDouble()", "name": "testRemoveFromDouble", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromDouble()", "original_string": "    @Test\n    public void testRemoveFromDouble() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(evens.iterator());\n        iter.addIterator(odds.iterator());\n        int expectedSize = evens.size() + odds.size();\n        while (iter.hasNext()) {\n            final Object o = iter.next();\n            final Integer val = (Integer) o;\n            if (val.intValue() % 4 == 0 || val.intValue() % 3 == 0) {\n                expectedSize--;\n                iter.remove();\n            }\n        }\n        assertEquals(expectedSize, evens.size() + odds.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest.[void]testRemoveFromSingle()", "name": "testRemoveFromSingle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFromSingle()", "original_string": "    @Test\n    public void testRemoveFromSingle() {\n        final CollatingIterator<Integer> iter = new CollatingIterator<>(comparator);\n        iter.addIterator(evens.iterator());\n        int expectedSize = evens.size();\n        while (iter.hasNext()) {\n            final Object o = iter.next();\n            final Integer val = (Integer) o;\n            if (val.intValue() % 4 == 0) {\n                expectedSize--;\n                iter.remove();\n            }\n        }\n        assertEquals(expectedSize, evens.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java", "class_name": "CollatingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java.CollatingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java.CollatingIterator_hasNextTest.[void]testHasNext_WithNoIterators()", "name": "testHasNext_WithNoIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNext_WithNoIterators()", "original_string": "    @Test\n    public void testHasNext_WithNoIterators() {\n        assertFalse(collatingIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "class_name": "CollatingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java.CollatingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java.CollatingIterator_hasNextTest.[void]testHasNext_WithEmptyIterators()", "name": "testHasNext_WithEmptyIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNext_WithEmptyIterators()", "original_string": "    @Test\n    public void testHasNext_WithEmptyIterators() {\n        iterators.add(Arrays.<Integer>asList().iterator());\n        iterators.add(Arrays.<Integer>asList().iterator());\n        iterators.forEach(collatingIterator::addIterator);\n        assertFalse(collatingIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "class_name": "CollatingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java.CollatingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java.CollatingIterator_hasNextTest.[void]testHasNext_WithNonEmptyIterators()", "name": "testHasNext_WithNonEmptyIterators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNext_WithNonEmptyIterators()", "original_string": "    @Test\n    public void testHasNext_WithNonEmptyIterators() {\n        iterators.add(Arrays.asList(1, 2).iterator());\n        iterators.add(Arrays.asList(3, 4).iterator());\n        iterators.forEach(collatingIterator::addIterator);\n        assertTrue(collatingIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "class_name": "CollatingIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java.CollatingIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testBounded()", "name": "testBounded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBounded()", "original_string": "    @Test\n    public void testBounded() {\n        final Iterator<E> iter = new BoundedIterator<>(testList.iterator(), 2, 4);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next(),\n                \"Expected NoSuchElementException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a decorated iterator bounded such that the first element returned is\nat an index greater its first element, and the last element returned is\nat an index less than its last element.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testEmptyBounded()", "name": "testEmptyBounded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyBounded()", "original_string": "    @Test\n    public void testEmptyBounded() {\n        final Iterator<E> iter = new BoundedIterator<>(testList.iterator(), 3, 0);\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a decorated iterator bounded to a {@code max} of 0. The\nBoundedIterator should behave as if there are no more elements to return,\nsince it is technically an empty iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testMaxGreaterThanSize()", "name": "testMaxGreaterThanSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxGreaterThanSize()", "original_string": "    @Test\n    public void testMaxGreaterThanSize() {\n        final Iterator<E> iter = new BoundedIterator<>(testList.iterator(), 1, 10);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"g\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if the {@code max} passed to the constructor is\ngreater than the size of the decorated iterator. The last element\nreturned should be the same as the last element of the decorated\niterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testNegativeMax()", "name": "testNegativeMax", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNegativeMax()", "original_string": "    @Test\n    public void testNegativeMax() {\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new BoundedIterator<>(testList.iterator(), 3, -1));\n        assertThat(thrown.getMessage(), is(equalTo(\"Max parameter must not be negative.\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if a negative {@code max} is passed to the\nconstructor. {@link IllegalArgumentException} is expected.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testNegativeOffset()", "name": "testNegativeOffset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNegativeOffset()", "original_string": "    @Test\n    public void testNegativeOffset() {\n        final IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> new BoundedIterator<>(testList.iterator(), -1, 4));\n        assertThat(thrown.getMessage(), is(equalTo(\"Offset parameter must not be negative.\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if a negative {@code offset} is passed to the\nconstructor. {@link IllegalArgumentException} is expected.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testOffsetGreaterThanSize()", "name": "testOffsetGreaterThanSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOffsetGreaterThanSize()", "original_string": "    @Test\n    public void testOffsetGreaterThanSize() {\n        final Iterator<E> iter = new BoundedIterator<>(testList.iterator(), 10, 4);\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if the {@code offset} passed to the constructor is\ngreater than the decorated iterator's size. The BoundedIterator should\nbehave as if there are no more elements to return.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testRemoveCalledTwice()", "name": "testRemoveCalledTwice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveCalledTwice()", "original_string": "    @Test\n    public void testRemoveCalledTwice() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new BoundedIterator<>(testListCopy.iterator(), 1, 5);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        iter.remove();\n\n        assertThrows(IllegalStateException.class, () -> iter.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the {@code remove()} method being called twice without calling\n{@code next()} in between.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testRemoveFirst()", "name": "testRemoveFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveFirst()", "original_string": "    @Test\n    public void testRemoveFirst() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new BoundedIterator<>(testListCopy.iterator(), 1, 5);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n\n        iter.remove();\n        assertFalse(testListCopy.contains(\"b\"));\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest removing the first element. Verify that the element is removed from\nthe underlying collection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testRemoveLast()", "name": "testRemoveLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveLast()", "original_string": "    @Test\n    public void testRemoveLast() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new BoundedIterator<>(testListCopy.iterator(), 1, 5);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        final NoSuchElementException thrown = assertThrows(NoSuchElementException.class, () -> iter.next());\n        assertThat(thrown.getMessage(), is(nullValue()));\n\n        iter.remove();\n        assertFalse(testListCopy.contains(\"f\"));\n\n        assertFalse(iter.hasNext());\n\n        final NoSuchElementException thrown1 = assertThrows(NoSuchElementException.class, () -> iter.next());\n        assertThat(thrown1.getMessage(), is(nullValue()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest removing the last element. Verify that the element is removed from\nthe underlying collection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testRemoveMiddle()", "name": "testRemoveMiddle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMiddle()", "original_string": "    @Test\n    public void testRemoveMiddle() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new BoundedIterator<>(testListCopy.iterator(), 1, 5);\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n\n        iter.remove();\n        assertFalse(testListCopy.contains(\"d\"));\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest removing an element in the middle of the iterator. Verify that the\nelement is removed from the underlying collection.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testRemoveUnsupported()", "name": "testRemoveUnsupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveUnsupported()", "original_string": "    @Test\n    public void testRemoveUnsupported() {\n        final Iterator<E> mockIterator = new AbstractIteratorDecorator<E>(testList.iterator()) {\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n\n        final Iterator<E> iter = new BoundedIterator<>(mockIterator, 1, 5);\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n\n        final UnsupportedOperationException thrown = assertThrows(UnsupportedOperationException.class, () -> iter.remove());\n        assertThat(thrown.getMessage(), is(nullValue()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the case if the decorated iterator does not support the\n{@code remove()} method and throws an {@link UnsupportedOperationException}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testRemoveWithoutCallingNext()", "name": "testRemoveWithoutCallingNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithoutCallingNext()", "original_string": "    @Test\n    public void testRemoveWithoutCallingNext() {\n        final List<E> testListCopy = new ArrayList<>(testList);\n        final Iterator<E> iter = new BoundedIterator<>(testListCopy.iterator(), 1, 5);\n\n        final IllegalStateException thrown = assertThrows(IllegalStateException.class, () -> iter.remove());\n        assertThat(thrown.getMessage(), is(equalTo(\"remove() can not be called before calling next()\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the {@code remove()} method being called without\n{@code next()} being called first.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest.[void]testSameAsDecorated()", "name": "testSameAsDecorated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSameAsDecorated()", "original_string": "    @Test\n    public void testSameAsDecorated() {\n        final Iterator<E> iter = new BoundedIterator<>(testList.iterator(), 0,\n                                                  testList.size());\n\n        assertTrue(iter.hasNext());\n        assertEquals(\"a\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"b\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"c\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"d\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"e\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"f\", iter.next());\n        assertTrue(iter.hasNext());\n        assertEquals(\"g\", iter.next());\n\n        assertFalse(iter.hasNext());\n\n        assertThrows(NoSuchElementException.class, () -> iter.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java", "class_name": "BoundedIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java.BoundedIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest a decorated iterator bounded such that the {@code offset} is\nzero and the {@code max} is its size, in that the BoundedIterator\nshould return all the same elements as its decorated iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest.[void]testRemoveSuccess()", "name": "testRemoveSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveSuccess()", "original_string": "    @Test\n    public void testRemoveSuccess() {\n        iterator.next();\n        iterator.remove();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "class_name": "SingletonListIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest.[void]testRemoveWithoutNextCall()", "name": "testRemoveWithoutNextCall", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveWithoutNextCall()", "original_string": "    @Test\n    public void testRemoveWithoutNextCall() {\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.remove();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "class_name": "SingletonListIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest.[void]testRemoveTwice()", "name": "testRemoveTwice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveTwice()", "original_string": "    @Test\n    public void testRemoveTwice() {\n        iterator.next();\n        iterator.remove();\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.remove();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "class_name": "SingletonListIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest.[void]testRemoveAfterReset()", "name": "testRemoveAfterReset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterReset()", "original_string": "    @Test\n    public void testRemoveAfterReset() {\n        iterator.next();\n        iterator.reset();\n        assertThrows(IllegalStateException.class, () -> {\n            iterator.remove();\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "class_name": "SingletonListIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest.[void]testRemoveAfterSet()", "name": "testRemoveAfterSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveAfterSet()", "original_string": "    @Test\n    public void testRemoveAfterSet() {\n        iterator.next();\n        iterator.set(new Object());\n        iterator.remove();\n        assertFalse(iterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "class_name": "SingletonListIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java.SingletonListIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest.[void]testResetAfterInitialization()", "name": "testResetAfterInitialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testResetAfterInitialization()", "original_string": "    @Test\n    public void testResetAfterInitialization() {\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java", "class_name": "SingletonListIterator_resetTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest.[void]testResetAfterNextCall()", "name": "testResetAfterNextCall", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testResetAfterNextCall()", "original_string": "    @Test\n    public void testResetAfterNextCall() {\n        iterator.next();\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java", "class_name": "SingletonListIterator_resetTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest.[void]testResetAfterRemove()", "name": "testResetAfterRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testResetAfterRemove()", "original_string": "    @Test\n    public void testResetAfterRemove() {\n        iterator.next();\n        iterator.remove();\n        iterator = new SingletonListIterator<>(testValue); // Reset the iterator to its initial state\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java", "class_name": "SingletonListIterator_resetTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest.[void]testResetAfterSet()", "name": "testResetAfterSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testResetAfterSet()", "original_string": "    @Test\n    public void testResetAfterSet() {\n        iterator.next();\n        iterator.set(new Object());\n        iterator.reset();\n        assertTrue(iterator.hasNext(), \"Iterator should have next item after reset\");\n        assertFalse(iterator.hasPrevious(), \"Iterator should have no previous item after reset\");\n        assertEquals(0, iterator.nextIndex(), \"Iteration next index after reset\");\n        assertEquals(-1, iterator.previousIndex(), \"Iteration previous index after reset\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java", "class_name": "SingletonListIterator_resetTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java.SingletonListIterator_resetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest.[void]testEmpty()", "name": "testEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmpty()", "original_string": "    @Test\n    public void testEmpty() {\n        final Iterator<E> it = makeEmptyIterator();\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "class_name": "PeekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest.[void]testIllegalRemove()", "name": "testIllegalRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIllegalRemove()", "original_string": "    @Test\n    public void testIllegalRemove() {\n        final PeekingIterator<E> it = makeObject();\n        it.next();\n        it.remove(); // supported\n\n        assertTrue(it.hasNext());\n        assertEquals(\"b\", it.peek());\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "class_name": "PeekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest.[void]testIteratorExhausted()", "name": "testIteratorExhausted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIteratorExhausted()", "original_string": "    @Test\n    public void testIteratorExhausted() {\n        final PeekingIterator<E> it = makeObject();\n        it.next();\n        it.next();\n        it.next();\n        assertFalse(it.hasNext());\n        assertNull(it.peek());\n\n        assertThrows(NoSuchElementException.class, () -> it.element());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "class_name": "PeekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest.[void]testMultiplePeek()", "name": "testMultiplePeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiplePeek()", "original_string": "    @Test\n    public void testMultiplePeek() {\n        final PeekingIterator<E> it = makeObject();\n        assertEquals(\"a\", it.peek());\n        assertEquals(\"a\", it.peek());\n        assertEquals(\"a\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(\"b\", it.peek());\n        assertEquals(\"b\", it.peek());\n        assertEquals(\"b\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(\"c\", it.peek());\n        assertEquals(\"c\", it.peek());\n        assertEquals(\"c\", it.next());\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "class_name": "PeekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest.[void]testSinglePeek()", "name": "testSinglePeek", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSinglePeek()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSinglePeek() {\n        final PeekingIterator<E> it = makeObject();\n        assertEquals(\"a\", it.peek());\n        assertEquals(\"a\", it.element());\n        validate(it, (E[]) testArray);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java", "class_name": "PeekingIteratorTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java.PeekingIteratorTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java.FilterIterator_nextTest.[void]testNextWithValidElement()", "name": "testNextWithValidElement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithValidElement()", "original_string": "    @Test\n    public void testNextWithValidElement() {\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", iterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "class_name": "FilterIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java.FilterIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java.FilterIterator_nextTest.[void]testNextWithNoSuchElementException()", "name": "testNextWithNoSuchElementException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextWithNoSuchElementException()", "original_string": "    @Test\n    public void testNextWithNoSuchElementException() {\n        iterator = new FilterIterator<>(Collections.emptyIterator(), truePredicate());\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "class_name": "FilterIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java.FilterIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java.FilterIterator_nextTest.[void]testNextAfterHasNext()", "name": "testNextAfterHasNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAfterHasNext()", "original_string": "    @Test\n    public void testNextAfterHasNext() {\n        assertTrue(iterator.hasNext());\n        assertEquals(\"a\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"b\", iterator.next());\n        assertTrue(iterator.hasNext());\n        assertEquals(\"c\", iterator.next());\n        assertFalse(iterator.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "class_name": "FilterIterator_nextTest", "class_uri": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java.FilterIterator_nextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java.SortedPropertiesTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        final SortedProperties sortedProperties = new SortedProperties();\n        for (char ch = 'Z'; ch >= 'A'; ch--) {\n            sortedProperties.put(String.valueOf(ch), \"Value\" + ch);\n        }\n        final Iterator<Map.Entry<Object, Object>> entries = sortedProperties.entrySet().iterator();\n        for (char ch = 'A'; ch <= 'Z'; ch++) {\n            final Map.Entry<Object, Object> entry = entries.next();\n            assertEquals(String.valueOf(ch), entry.getKey());\n            assertEquals(\"Value\" + ch, entry.getValue());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java", "class_name": "SortedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java.SortedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java.SortedPropertiesTest.[void]testKeys()", "name": "testKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeys()", "original_string": "    @Test\n    public void testKeys() {\n        final SortedProperties sortedProperties = new SortedProperties();\n        for (char ch = 'Z'; ch >= 'A'; ch--) {\n            sortedProperties.put(String.valueOf(ch), \"Value\" + ch);\n        }\n        final Enumeration<Object> keys = sortedProperties.keys();\n        for (char ch = 'A'; ch <= 'Z'; ch++) {\n            assertEquals(String.valueOf(ch), keys.nextElement());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java", "class_name": "SortedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesTest.java.SortedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testInstance()", "name": "testInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInstance()", "original_string": "    @Test\n    public void testInstance() {\n        assertNotNull(PropertiesFactory.INSTANCE);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadClassLoaderMissingResource(String)", "name": "testLoadClassLoaderMissingResource", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadClassLoaderMissingResource(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadClassLoaderMissingResource(final String fileExtension) throws Exception {\n        assertNull(factory.load(ClassLoader.getSystemClassLoader(), \"missing/test\" + fileExtension));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadClassLoaderResource(String)", "name": "testLoadClassLoaderResource", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadClassLoaderResource(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadClassLoaderResource(final String fileExtension) throws Exception {\n        assertContents(factory.load(ClassLoader.getSystemClassLoader(), \"org/apache/commons/collections4/properties/test\" + fileExtension));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadFile(String)", "name": "testLoadFile", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadFile(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadFile(final String fileExtension) throws Exception {\n        assertContents(factory.load(Paths.get(getPathString(fileExtension)).toFile()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadFileName(String)", "name": "testLoadFileName", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadFileName(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadFileName(final String fileExtension) throws Exception {\n        assertContents(factory.load(getPathString(fileExtension)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadInputStream(String)", "name": "testLoadInputStream", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadInputStream(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadInputStream(final String fileExtension) throws Exception {\n        // Can't tell what we are reading\n        Assumptions.assumeFalse(isXmlTest(fileExtension));\n        //\n        try (FileInputStream inputStream = new FileInputStream(getPathString(fileExtension))) {\n            assertContents(factory.load(inputStream));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadPath(String)", "name": "testLoadPath", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadPath(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadPath(final String fileExtension) throws Exception {\n        assertContents(factory.load(Paths.get(getPathString(fileExtension))));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadReader(String)", "name": "testLoadReader", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadReader(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadReader(final String fileExtension) throws Exception {\n        // Can't tell what we are reading\n        Assumptions.assumeFalse(isXmlTest(fileExtension));\n        //\n        try (BufferedReader inputStream = Files.newBufferedReader(Paths.get(getPathString(fileExtension)))) {\n            assertContents(factory.load(inputStream));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadUri(String)", "name": "testLoadUri", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadUri(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadUri(final String fileExtension) throws Exception {\n        assertContents(factory.load(Paths.get(getPathString(fileExtension)).toUri()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest.[void]testLoadUrl(String)", "name": "testLoadUrl", "arg_nums": 1, "params": [{"name": "fileExtension", "type": "String"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadUrl(final String fileExtension)", "original_string": "    @ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public void testLoadUrl(final String fileExtension) throws Exception {\n        assertContents(factory.load(Paths.get(getPathString(fileExtension)).toUri().toURL()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java", "class_name": "AbstractPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/AbstractPropertiesFactoryTest.java.AbstractPropertiesFactoryTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(value = \"getParameters\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(value = \"getParameters\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesFactoryTest.java.OrderedPropertiesFactoryTest.[void]testInstance()", "name": "testInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testInstance()", "original_string": "    @Test\n    @Override\n    public void testInstance() {\n        assertNotNull(OrderedPropertiesFactory.INSTANCE);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesFactoryTest.java", "class_name": "OrderedPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesFactoryTest.java.OrderedPropertiesFactoryTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        PropertiesFactory.EMPTY_PROPERTIES.clear();\n        assertEquals(0, PropertiesFactory.EMPTY_PROPERTIES.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testClone()", "name": "testClone", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClone()", "original_string": "    @Test\n    public void testClone() {\n        // TODO Better test?\n        PropertiesFactory.EMPTY_PROPERTIES.clone();\n        assertEquals(0, PropertiesFactory.EMPTY_PROPERTIES.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testCompute()", "name": "testCompute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompute()", "original_string": "    @Test\n    public void testCompute() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.compute(\"key\", (k, v) -> \"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testComputeIfAbsent()", "name": "testComputeIfAbsent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComputeIfAbsent()", "original_string": "    @Test\n    public void testComputeIfAbsent() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.computeIfAbsent(\"key\", k -> \"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testComputeIfPresent()", "name": "testComputeIfPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComputeIfPresent()", "original_string": "    @Test\n    public void testComputeIfPresent() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.computeIfPresent(\"key\", (k, v) -> \"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContains()", "original_string": "    @Test\n    public void testContains() {\n        assertFalse(PropertiesFactory.EMPTY_PROPERTIES.contains(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testContainsKey()", "name": "testContainsKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsKey()", "original_string": "    @Test\n    public void testContainsKey() {\n        assertFalse(PropertiesFactory.EMPTY_PROPERTIES.containsKey(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testContainsValue()", "name": "testContainsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue()", "original_string": "    @Test\n    public void testContainsValue() {\n        assertFalse(PropertiesFactory.EMPTY_PROPERTIES.containsValue(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testElements()", "name": "testElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElements()", "original_string": "    @Test\n    public void testElements() {\n        assertFalse(PropertiesFactory.EMPTY_PROPERTIES.elements().hasMoreElements());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        assertTrue(PropertiesFactory.EMPTY_PROPERTIES.entrySet().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testEquals()", "name": "testEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals()", "original_string": "    @Test\n    public void testEquals() {\n        assertEquals(PropertiesFactory.EMPTY_PROPERTIES, PropertiesFactory.EMPTY_PROPERTIES);\n        assertEquals(PropertiesFactory.EMPTY_PROPERTIES, new Properties());\n        assertEquals(new Properties(), PropertiesFactory.EMPTY_PROPERTIES);\n        assertNotEquals(null, PropertiesFactory.EMPTY_PROPERTIES);\n        final Properties p = new Properties();\n        p.put(\"Key\", \"Value\");\n        assertNotEquals(PropertiesFactory.EMPTY_PROPERTIES, p);\n        assertNotEquals(p, PropertiesFactory.EMPTY_PROPERTIES);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testForEach()", "name": "testForEach", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach()", "original_string": "    @Test\n    public void testForEach() {\n        PropertiesFactory.EMPTY_PROPERTIES.forEach((k, v) -> fail());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet()", "original_string": "    @Test\n    public void testGet() {\n        assertNull(PropertiesFactory.EMPTY_PROPERTIES.get(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testGetOrDefault()", "name": "testGetOrDefault", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOrDefault()", "original_string": "    @Test\n    public void testGetOrDefault() {\n        assertEquals(\"bar\", PropertiesFactory.EMPTY_PROPERTIES.getOrDefault(\"foo\", \"bar\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testGetProperty()", "name": "testGetProperty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetProperty()", "original_string": "    @Test\n    public void testGetProperty() {\n        assertNull(PropertiesFactory.EMPTY_PROPERTIES.getProperty(\"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testGetPropertyDefault()", "name": "testGetPropertyDefault", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetPropertyDefault()", "original_string": "    @Test\n    public void testGetPropertyDefault() {\n        assertEquals(\"bar\", PropertiesFactory.EMPTY_PROPERTIES.getProperty(\"foo\", \"bar\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        assertEquals(PropertiesFactory.EMPTY_PROPERTIES.hashCode(), PropertiesFactory.EMPTY_PROPERTIES.hashCode());\n        // Should be equals?\n        // assertEquals(PropertiesFactory.EMPTY_PROPERTIES.hashCode(), new Properties().hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testIsEmpty()", "name": "testIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsEmpty()", "original_string": "    @Test\n    public void testIsEmpty() {\n        assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testKeys()", "name": "testKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeys()", "original_string": "    @Test\n    public void testKeys() {\n        assertFalse(PropertiesFactory.EMPTY_PROPERTIES.keys().hasMoreElements());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testKeySet()", "name": "testKeySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySet()", "original_string": "    @Test\n    public void testKeySet() {\n        assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testListToPrintStream()", "name": "testListToPrintStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListToPrintStream()", "original_string": "    @Test\n    public void testListToPrintStream() {\n        // actual\n        final ByteArrayOutputStream actual = new ByteArrayOutputStream();\n        PropertiesFactory.EMPTY_PROPERTIES.list(new PrintStream(actual));\n        // expected\n        final ByteArrayOutputStream expected = new ByteArrayOutputStream();\n        PropertiesFactory.INSTANCE.createProperties().list(new PrintStream(expected));\n        assertArrayEquals(expected.toByteArray(), actual.toByteArray());\n        expected.reset();\n        new Properties().list(new PrintStream(expected));\n        assertArrayEquals(expected.toByteArray(), actual.toByteArray());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testListToPrintWriter()", "name": "testListToPrintWriter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListToPrintWriter()", "original_string": "    @Test\n    public void testListToPrintWriter() {\n        // actual\n        final ByteArrayOutputStream actual = new ByteArrayOutputStream();\n        PropertiesFactory.EMPTY_PROPERTIES.list(new PrintWriter(actual));\n        // expected\n        final ByteArrayOutputStream expected = new ByteArrayOutputStream();\n        PropertiesFactory.INSTANCE.createProperties().list(new PrintWriter(expected));\n        assertArrayEquals(expected.toByteArray(), actual.toByteArray());\n        expected.reset();\n        new Properties().list(new PrintWriter(expected));\n        assertArrayEquals(expected.toByteArray(), actual.toByteArray());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testLoadFromXML()", "name": "testLoadFromXML", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoadFromXML()", "original_string": "    @Test\n    public void testLoadFromXML() {\n        assertThrows(UnsupportedOperationException.class,\n            () -> PropertiesFactory.EMPTY_PROPERTIES.loadFromXML(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testLoadInputStream()", "name": "testLoadInputStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoadInputStream()", "original_string": "    @Test\n    public void testLoadInputStream() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.load(new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testLoadReader()", "name": "testLoadReader", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoadReader()", "original_string": "    @Test\n    public void testLoadReader() throws IOException {\n        try (NullReader reader = new NullReader(0)) {\n            assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.load(reader));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testMerge()", "name": "testMerge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMerge()", "original_string": "    @Test\n    public void testMerge() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.merge(\"key\", \"value\", (k, v) -> \"foo\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testPropertyName()", "name": "testPropertyName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPropertyName()", "original_string": "    @Test\n    public void testPropertyName() {\n        assertFalse(PropertiesFactory.EMPTY_PROPERTIES.propertyNames().hasMoreElements());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testPut()", "name": "testPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut()", "original_string": "    @Test\n    public void testPut() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.put(\"Key\", \"Value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testPutAll()", "name": "testPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll()", "original_string": "    @Test\n    public void testPutAll() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.putAll(new HashMap<>()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testPutIfAbsent()", "name": "testPutIfAbsent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutIfAbsent()", "original_string": "    @Test\n    public void testPutIfAbsent() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.putIfAbsent(\"Key\", \"Value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testRehash()", "name": "testRehash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRehash()", "original_string": "    @Test\n    public void testRehash() {\n        // Can't really test without extending and casting to a currently private class\n        // PropertiesFactory.EMPTY_PROPERTIES.rehash();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove()", "original_string": "    @Test\n    public void testRemove() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.remove(\"key\", \"value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testRemoveKey()", "name": "testRemoveKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveKey()", "original_string": "    @Test\n    public void testRemoveKey() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.remove(\"key\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testReplace()", "name": "testReplace", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReplace()", "original_string": "    @Test\n    public void testReplace() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.replace(\"key\", \"value1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testReplaceAll()", "name": "testReplaceAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReplaceAll()", "original_string": "    @Test\n    public void testReplaceAll() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.replaceAll((k, v) -> \"value1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testReplaceOldValue()", "name": "testReplaceOldValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testReplaceOldValue()", "original_string": "    @Test\n    public void testReplaceOldValue() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.replace(\"key\", \"value1\", \"value2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testSave()", "name": "testSave", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSave()", "original_string": "    @Test\n    public void testSave() throws IOException {\n        final String comments = \"Hello world!\";\n        try (ByteArrayOutputStream actual = new ByteArrayOutputStream(); ByteArrayOutputStream expected = new ByteArrayOutputStream()) {\n            // actual\n            PropertiesFactory.EMPTY_PROPERTIES.store(actual, comments);\n            // expected\n            PropertiesFactory.INSTANCE.createProperties().store(expected, comments);\n\n            // Properties.store stores the specified comment appended with current time stamp in the next line\n            final String expectedComment = getFirstLine(expected.toString(StandardCharsets.UTF_8.name()));\n            final String actualComment = getFirstLine(actual.toString(StandardCharsets.UTF_8.name()));\n            assertEquals(expectedComment, actualComment,\n                () -> String.format(\"Expected String '%s' with length '%s'\", expectedComment, expectedComment.length()));\n            expected.reset();\n            try (PrintStream out = new PrintStream(expected)) {\n                new Properties().store(out, comments);\n            }\n            final String[] expectedLines = expected.toString(StandardCharsets.UTF_8.displayName()).split(\"\\\\n\");\n            final String[] actualLines = actual.toString(StandardCharsets.UTF_8.displayName()).split(\"\\\\n\");\n            assertEquals(expectedLines.length, actualLines.length);\n            // The assertion below checks that the comment is the same in both files\n            assertEquals(expectedLines[0], actualLines[0]);\n            // N.B.: We must not expect expectedLines[1] and actualLines[1] to have the same value as\n            // it contains the timestamp of when the data was written to the stream, which makes\n            // this test brittle, causing intermitent failures, see COLLECTIONS-812\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testSetProperty()", "name": "testSetProperty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetProperty()", "original_string": "    @Test\n    public void testSetProperty() {\n        assertThrows(UnsupportedOperationException.class, () -> PropertiesFactory.EMPTY_PROPERTIES.setProperty(\"Key\", \"Value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        assertEquals(0, PropertiesFactory.EMPTY_PROPERTIES.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testStoreToOutputStream()", "name": "testStoreToOutputStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStoreToOutputStream()", "original_string": "    @Test\n    public void testStoreToOutputStream() throws IOException {\n        // Note: The second line is always a comment with a timestamp.\n        final String comments = \"Hello world!\";\n        // actual\n        final ByteArrayOutputStream actual = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(actual)) {\n            PropertiesFactory.EMPTY_PROPERTIES.store(ps, comments);\n        }\n        // expected\n        final ByteArrayOutputStream expected = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(expected)) {\n            PropertiesFactory.INSTANCE.createProperties().store(ps, comments);\n        }\n        assertEquals(removeLine2(expected), removeLine2(actual));\n        expected.reset();\n        try (PrintStream ps = newPrintStream(expected)) {\n            new Properties().store(ps, comments);\n        }\n        assertEquals(removeLine2(expected), removeLine2(actual), () -> removeLine2(actual));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testStoreToPrintWriter()", "name": "testStoreToPrintWriter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStoreToPrintWriter()", "original_string": "    @Test\n    public void testStoreToPrintWriter() throws IOException {\n        // Note: The second line is always a comment with a timestamp.\n        final String comments = \"Hello world!\";\n        // actual\n        final ByteArrayOutputStream actual = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(actual)) {\n            PropertiesFactory.EMPTY_PROPERTIES.store(ps, comments);\n        }\n        // expected\n        final ByteArrayOutputStream expected = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(expected)) {\n            PropertiesFactory.INSTANCE.createProperties().store(ps, comments);\n        }\n        assertEquals(removeLine2(expected), removeLine2(actual));\n        expected.reset();\n        try (PrintStream ps = newPrintStream(expected)) {\n            new Properties().store(ps, comments);\n        }\n        assertEquals(removeLine2(expected), removeLine2(actual));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testStoreToXMLOutputStream()", "name": "testStoreToXMLOutputStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStoreToXMLOutputStream()", "original_string": "    @Test\n    public void testStoreToXMLOutputStream() throws IOException {\n        // Note: The second line is always a comment with a timestamp.\n        final String comments = \"Hello world!\";\n        // actual\n        final ByteArrayOutputStream actual = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(actual)) {\n            PropertiesFactory.EMPTY_PROPERTIES.storeToXML(ps, comments);\n        }\n        // expected\n        final ByteArrayOutputStream expected = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(expected)) {\n            PropertiesFactory.INSTANCE.createProperties().storeToXML(ps, comments);\n        }\n        assertEquals(toString(expected), toString(actual));\n        expected.reset();\n        try (PrintStream ps = new PrintStream(expected)) {\n            new Properties().storeToXML(ps, comments);\n        }\n        assertEquals(removeLine2(expected), removeLine2(actual));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testStoreToXMLOutputStreamWithEncoding()", "name": "testStoreToXMLOutputStreamWithEncoding", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStoreToXMLOutputStreamWithEncoding()", "original_string": "    @Test\n    public void testStoreToXMLOutputStreamWithEncoding() throws IOException {\n        // Note: The second line is always a comment with a timestamp.\n        final String comments = \"Hello world!\";\n        final String encoding = StandardCharsets.UTF_8.name();\n        // actual\n        final ByteArrayOutputStream actual = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(actual)) {\n            PropertiesFactory.EMPTY_PROPERTIES.storeToXML(ps, comments, encoding);\n        }\n        // expected\n        final ByteArrayOutputStream expected = new ByteArrayOutputStream();\n        try (PrintStream ps = newPrintStream(expected)) {\n            PropertiesFactory.INSTANCE.createProperties().storeToXML(ps, comments, encoding);\n        }\n        assertEquals(removeLine2(expected), removeLine2(actual));\n        expected.reset();\n        try (PrintStream ps = newPrintStream(expected)) {\n            new Properties().storeToXML(ps, comments, encoding);\n        }\n        assertEquals(removeLine2(expected), removeLine2(actual));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testStringPropertyName()", "name": "testStringPropertyName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStringPropertyName()", "original_string": "    @Test\n    public void testStringPropertyName() {\n        assertTrue(PropertiesFactory.EMPTY_PROPERTIES.stringPropertyNames().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        assertEquals(new Properties().toString(), PropertiesFactory.EMPTY_PROPERTIES.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest.[void]testValues()", "name": "testValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValues()", "original_string": "    @Test\n    public void testValues() {\n        assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java", "class_name": "EmptyPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/EmptyPropertiesTest.java.EmptyPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/PropertiesFactoryTest.java.PropertiesFactoryTest.[void]testInstance()", "name": "testInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testInstance()", "original_string": "    @Test\n    @Override\n    public void testInstance() {\n        assertNotNull(PropertiesFactory.INSTANCE);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/PropertiesFactoryTest.java", "class_name": "PropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/PropertiesFactoryTest.java.PropertiesFactoryTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testCompute()", "name": "testCompute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCompute()", "original_string": "    @Test\n    public void testCompute() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        int first = 1;\n        int last = 11;\n        for (int i = first; i <= last; i++) {\n            final AtomicInteger aInt = new AtomicInteger(i);\n            orderedProperties.compute(\"key\" + i, (k, v) -> \"value\" + aInt.get());\n        }\n        assertAscendingOrder(orderedProperties);\n        orderedProperties.clear();\n        first = 11;\n        last = 1;\n        for (int i = first; i >= last; i--) {\n            final AtomicInteger aInt = new AtomicInteger(i);\n            orderedProperties.compute(\"key\" + i, (k, v) -> \"value\" + aInt.get());\n        }\n        assertDescendingOrder(orderedProperties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testComputeIfAbsent()", "name": "testComputeIfAbsent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComputeIfAbsent()", "original_string": "    @Test\n    public void testComputeIfAbsent() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        int first = 1;\n        int last = 11;\n        for (int i = first; i <= last; i++) {\n            final AtomicInteger aInt = new AtomicInteger(i);\n            orderedProperties.computeIfAbsent(\"key\" + i, k -> \"value\" + aInt.get());\n        }\n        assertAscendingOrder(orderedProperties);\n        orderedProperties.clear();\n        first = 11;\n        last = 1;\n        for (int i = first; i >= last; i--) {\n            final AtomicInteger aInt = new AtomicInteger(i);\n            orderedProperties.computeIfAbsent(\"key\" + i, k -> \"value\" + aInt.get());\n        }\n        assertDescendingOrder(orderedProperties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        final char first = 'Z';\n        final char last = 'A';\n        for (char ch = first; ch >= last; ch--) {\n            orderedProperties.put(String.valueOf(ch), \"Value\" + ch);\n        }\n        final Iterator<Map.Entry<Object, Object>> entries = orderedProperties.entrySet().iterator();\n        for (char ch = first; ch <= last; ch++) {\n            final Map.Entry<Object, Object> entry = entries.next();\n            assertEquals(String.valueOf(ch), entry.getKey());\n            assertEquals(\"Value\" + ch, entry.getValue());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testForEach()", "name": "testForEach", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEach()", "original_string": "    @Test\n    public void testForEach() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        final char first = 'Z';\n        final char last = 'A';\n        for (char ch = first; ch >= last; ch--) {\n            orderedProperties.put(String.valueOf(ch), \"Value\" + ch);\n        }\n        final AtomicInteger aCh = new AtomicInteger(first);\n        orderedProperties.forEach((k, v) -> {\n            final char ch = (char) aCh.getAndDecrement();\n            assertEquals(String.valueOf(ch), k);\n            assertEquals(\"Value\" + ch, v);\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testKeys()", "name": "testKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeys()", "original_string": "    @Test\n    public void testKeys() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        final char first = 'Z';\n        final char last = 'A';\n        for (char ch = first; ch >= last; ch--) {\n            orderedProperties.put(String.valueOf(ch), \"Value\" + ch);\n        }\n        final Enumeration<Object> keys = orderedProperties.keys();\n        for (char ch = first; ch <= last; ch++) {\n            assertEquals(String.valueOf(ch), keys.nextElement());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testLoadOrderedKeys()", "name": "testLoadOrderedKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoadOrderedKeys()", "original_string": "    @Test\n    public void testLoadOrderedKeys() throws IOException {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        try (FileReader reader = new FileReader(\"src/test/resources/org/apache/commons/collections4/properties/test.properties\")) {\n            orderedProperties.load(reader);\n        }\n        assertAscendingOrder(orderedProperties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testLoadOrderedKeysReverse()", "name": "testLoadOrderedKeysReverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoadOrderedKeysReverse()", "original_string": "    @Test\n    public void testLoadOrderedKeysReverse() throws IOException {\n        loadOrderedKeysReverse();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testMerge()", "name": "testMerge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMerge()", "original_string": "    @Test\n    public void testMerge() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        int first = 1;\n        int last = 11;\n        for (int i = first; i <= last; i++) {\n            orderedProperties.merge(\"key\" + i, \"value\" + i, (k, v) -> v);\n        }\n        assertAscendingOrder(orderedProperties);\n        orderedProperties.clear();\n        first = 11;\n        last = 1;\n        for (int i = first; i >= last; i--) {\n            orderedProperties.merge(\"key\" + i, \"value\" + i, (k, v) -> v);\n        }\n        assertDescendingOrder(orderedProperties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testPut()", "name": "testPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPut()", "original_string": "    @Test\n    public void testPut() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        int first = 1;\n        int last = 11;\n        for (int i = first; i <= last; i++) {\n            orderedProperties.put(\"key\" + i, \"value\" + i);\n        }\n        assertAscendingOrder(orderedProperties);\n        orderedProperties.clear();\n        first = 11;\n        last = 1;\n        for (int i = first; i >= last; i--) {\n            orderedProperties.put(\"key\" + i, \"value\" + i);\n        }\n        assertDescendingOrder(orderedProperties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testPutAll()", "name": "testPutAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAll()", "original_string": "    @Test\n    public void testPutAll() {\n        final OrderedProperties sourceProperties = new OrderedProperties();\n        int first = 1;\n        int last = 11;\n        for (int i = first; i <= last; i++) {\n            sourceProperties.put(\"key\" + i, \"value\" + i);\n        }\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        orderedProperties.putAll(sourceProperties);\n        assertAscendingOrder(orderedProperties);\n        orderedProperties.clear();\n        first = 11;\n        last = 1;\n        for (int i = first; i >= last; i--) {\n            orderedProperties.put(\"key\" + i, \"value\" + i);\n        }\n        assertDescendingOrder(orderedProperties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testPutIfAbsent()", "name": "testPutIfAbsent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutIfAbsent()", "original_string": "    @Test\n    public void testPutIfAbsent() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        int first = 1;\n        int last = 11;\n        for (int i = first; i <= last; i++) {\n            orderedProperties.putIfAbsent(\"key\" + i, \"value\" + i);\n        }\n        assertAscendingOrder(orderedProperties);\n        orderedProperties.clear();\n        first = 11;\n        last = 1;\n        for (int i = first; i >= last; i--) {\n            orderedProperties.putIfAbsent(\"key\" + i, \"value\" + i);\n        }\n        assertDescendingOrder(orderedProperties);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testRemoveKey()", "name": "testRemoveKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveKey()", "original_string": "    @Test\n    public void testRemoveKey() throws FileNotFoundException, IOException {\n        final OrderedProperties props = loadOrderedKeysReverse();\n        final String k = \"key1\";\n        props.remove(k);\n        assertFalse(props.contains(k));\n        assertFalse(props.containsKey(k));\n        assertFalse(Collections.list(props.keys()).contains(k));\n        assertFalse(Collections.list(props.propertyNames()).contains(k));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testRemoveKeyValue()", "name": "testRemoveKeyValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveKeyValue()", "original_string": "    @Test\n    public void testRemoveKeyValue() throws FileNotFoundException, IOException {\n        final OrderedProperties props = loadOrderedKeysReverse();\n        final String k = \"key1\";\n        props.remove(k, \"value1\");\n        assertFalse(props.contains(k));\n        assertFalse(props.containsKey(k));\n        assertFalse(Collections.list(props.keys()).contains(k));\n        assertFalse(Collections.list(props.propertyNames()).contains(k));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        final OrderedProperties orderedProperties = new OrderedProperties();\n        final char first = 'Z';\n        final char last = 'A';\n        for (char ch = first; ch >= last; ch--) {\n            orderedProperties.put(String.valueOf(ch), \"Value\" + ch);\n        }\n        assertEquals(\n                \"{Z=ValueZ, Y=ValueY, X=ValueX, W=ValueW, V=ValueV, U=ValueU, T=ValueT, S=ValueS, R=ValueR, Q=ValueQ, P=ValueP, O=ValueO, N=ValueN, M=ValueM, L=ValueL, K=ValueK, J=ValueJ, I=ValueI, H=ValueH, G=ValueG, F=ValueF, E=ValueE, D=ValueD, C=ValueC, B=ValueB, A=ValueA}\",\n                orderedProperties.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java", "class_name": "OrderedPropertiesTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/OrderedPropertiesTest.java.OrderedPropertiesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesFactoryTest.java.SortedPropertiesFactoryTest.[void]testInstance()", "name": "testInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testInstance()", "original_string": "    @Test\n    @Override\n    public void testInstance() {\n        assertNotNull(SortedPropertiesFactory.INSTANCE);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesFactoryTest.java", "class_name": "SortedPropertiesFactoryTest", "class_uri": "src/test/java/org/apache/commons/collections4/properties/SortedPropertiesFactoryTest.java.SortedPropertiesFactoryTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java.UnmodifiableOrderedBidiMapTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final OrderedBidiMap<K, V> map = makeFullMap();\n        assertSame(map, UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(map));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java", "class_name": "UnmodifiableOrderedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java.UnmodifiableOrderedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java.UnmodifiableOrderedBidiMapTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java", "class_name": "UnmodifiableOrderedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java.UnmodifiableOrderedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiClear()", "name": "testBidiClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiClear()", "original_string": "    @Test\n    public void testBidiClear() {\n        if (!isRemoveSupported()) {\n            assertThrows(UnsupportedOperationException.class, () -> makeFullMap().clear());\n            return;\n        }\n\n        BidiMap<?, ?> map = makeFullMap();\n        map.clear();\n        assertTrue(map.isEmpty(), \"Map was not cleared.\");\n        assertTrue(map.inverseBidiMap().isEmpty(), \"Inverse map was not cleared.\");\n\n        // Tests clear on inverse\n        map = makeFullMap().inverseBidiMap();\n        map.clear();\n        assertTrue(map.isEmpty(), \"Map was not cleared.\");\n        assertTrue(map.inverseBidiMap().isEmpty(), \"Inverse map was not cleared.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiGetKey()", "name": "testBidiGetKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiGetKey()", "original_string": "    @Test\n    public void testBidiGetKey() {\n        doTestGetKey(makeFullMap(), getSampleKeys()[0], getSampleValues()[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " testGetKey"}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiGetKeyInverse()", "name": "testBidiGetKeyInverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiGetKeyInverse()", "original_string": "    @Test\n    public void testBidiGetKeyInverse() {\n        doTestGetKey(\n            makeFullMap().inverseBidiMap(),\n            getSampleValues()[0],\n            getSampleKeys()[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiInverse()", "name": "testBidiInverse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiInverse()", "original_string": "    @Test\n    public void testBidiInverse() {\n        final BidiMap<K, V> map = makeFullMap();\n        final BidiMap<V, K> inverseMap = map.inverseBidiMap();\n\n        assertSame(\n                map,\n                inverseMap.inverseBidiMap(),\n                \"Inverse of inverse is not equal to original.\");\n\n        assertEquals(\n                getSampleKeys()[0],\n                inverseMap.get(getSampleValues()[0]),\n                \"Value not found for key.\");\n\n        assertEquals(\n                getSampleValues()[0],\n                inverseMap.getKey(getSampleKeys()[0]),\n                \"Key not found for value.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " testInverse"}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiKeySetValuesOrder()", "name": "testBidiKeySetValuesOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiKeySetValuesOrder()", "original_string": "    @Test\n    public void testBidiKeySetValuesOrder() {\n        // Skip if collection is unordered\n        Assumptions.assumeFalse((getIterationBehaviour() & AbstractCollectionTest.UNORDERED) != 0);\n        resetFull();\n        final Iterator<K> keys = map.keySet().iterator();\n        final Iterator<V> values = map.values().iterator();\n        while (keys.hasNext() && values.hasNext()) {\n            final K key = keys.next();\n            final V value = values.next();\n            assertSame(map.get(key), value);\n        }\n        assertFalse(keys.hasNext());\n        assertFalse(values.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiMapIteratorSet()", "name": "testBidiMapIteratorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiMapIteratorSet()", "original_string": "    @Test\n    public void testBidiMapIteratorSet() {\n        final V newValue1 = getOtherValues()[0];\n        final V newValue2 = getOtherValues()[1];\n\n        resetFull();\n        final BidiMap<K, V> bidi = getMap();\n        final MapIterator<K, V> it = bidi.mapIterator();\n        assertTrue(it.hasNext());\n        final K key1 = it.next();\n\n        if (!isSetValueSupported()) {\n            assertThrows(UnsupportedOperationException.class, () -> it.setValue(newValue1));\n            return;\n        }\n\n        it.setValue(newValue1);\n        confirmed.put(key1, newValue1);\n        assertSame(key1, it.getKey());\n        assertSame(newValue1, it.getValue());\n        assertTrue(bidi.containsKey(key1));\n        assertTrue(bidi.containsValue(newValue1));\n        assertEquals(newValue1, bidi.get(key1));\n        verify();\n\n        it.setValue(newValue1);  // same value - should be OK\n        confirmed.put(key1, newValue1);\n        assertSame(key1, it.getKey());\n        assertSame(newValue1, it.getValue());\n        assertTrue(bidi.containsKey(key1));\n        assertTrue(bidi.containsValue(newValue1));\n        assertEquals(newValue1, bidi.get(key1));\n        verify();\n\n        final K key2 = it.next();\n        it.setValue(newValue2);\n        confirmed.put(key2, newValue2);\n        assertSame(key2, it.getKey());\n        assertSame(newValue2, it.getValue());\n        assertTrue(bidi.containsKey(key2));\n        assertTrue(bidi.containsValue(newValue2));\n        assertEquals(newValue2, bidi.get(key2));\n        verify();\n\n        // at this point\n        // key1=newValue1, key2=newValue2\n        assertThrows(IllegalArgumentException.class, () -> it.setValue(newValue1));  // should remove key1\n        // below code was previously never executed\n//        confirmed.put(key2, newValue1);\n//        AbstractBidiMapTest.this.getConfirmed().remove(key1);\n//        assertEquals(newValue1, it.getValue());\n//        assertTrue(bidi.containsKey(it.getKey()));\n//        assertTrue(bidi.containsValue(newValue1));\n//        assertEquals(newValue1, bidi.get(it.getKey()));\n//        assertFalse(bidi.containsKey(key1));\n//        assertFalse(bidi.containsValue(newValue2));\n//        verify();\n//\n//        // check for ConcurrentModification\n//        it.next();  // if you fail here, maybe you should be throwing an IAE, see above\n//        if (isRemoveSupported()) {\n//            it.remove();\n//        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiModifyEntrySet()", "name": "testBidiModifyEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiModifyEntrySet()", "original_string": "    @Test\n    public void testBidiModifyEntrySet() {\n        if (!isSetValueSupported()) {\n            return;\n        }\n\n        modifyEntrySet(makeFullMap());\n        modifyEntrySet(makeFullMap().inverseBidiMap());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiPut()", "name": "testBidiPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBidiPut()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testBidiPut() {\n        if (!isPutAddSupported() || !isPutChangeSupported()) {\n            return;\n        }\n\n        final BidiMap<K, V> map = makeObject();\n        final BidiMap<V, K> inverse = map.inverseBidiMap();\n        assertEquals(0, map.size());\n        assertEquals(map.size(), inverse.size());\n\n        map.put((K) \"A\", (V) \"B\");\n        assertEquals(1, map.size());\n        assertEquals(map.size(), inverse.size());\n        assertEquals(\"B\", map.get(\"A\"));\n        assertEquals(\"A\", inverse.get(\"B\"));\n\n        map.put((K) \"A\", (V) \"C\");\n        assertEquals(1, map.size());\n        assertEquals(map.size(), inverse.size());\n        assertEquals(\"C\", map.get(\"A\"));\n        assertEquals(\"A\", inverse.get(\"C\"));\n\n        map.put((K) \"B\", (V) \"C\");\n        assertEquals(1, map.size());\n        assertEquals(map.size(), inverse.size());\n        assertEquals(\"C\", map.get(\"B\"));\n        assertEquals(\"B\", inverse.get(\"C\"));\n\n        map.put((K) \"E\", (V) \"F\");\n        assertEquals(2, map.size());\n        assertEquals(map.size(), inverse.size());\n        assertEquals(\"F\", map.get(\"E\"));\n        assertEquals(\"E\", inverse.get(\"F\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " BidiPut"}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiRemove()", "name": "testBidiRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemove()", "original_string": "    @Test\n    public void testBidiRemove() {\n        if (!isRemoveSupported()) {\n            assertThrows(UnsupportedOperationException.class, () -> makeFullMap().remove(getSampleKeys()[0]));\n\n            assertThrows(UnsupportedOperationException.class, () -> makeFullMap().removeValue(getSampleValues()[0]));\n\n            return;\n        }\n\n        remove(makeFullMap(), getSampleKeys()[0]);\n        remove(makeFullMap().inverseBidiMap(), getSampleValues()[0]);\n\n        removeValue(makeFullMap(), getSampleValues()[0]);\n        removeValue(makeFullMap().inverseBidiMap(), getSampleKeys()[0]);\n\n        assertNull(makeFullMap().removeValue(\"NotPresent\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiRemoveByEntrySet()", "name": "testBidiRemoveByEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveByEntrySet()", "original_string": "    @Test\n    public void testBidiRemoveByEntrySet() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        removeByEntrySet(makeFullMap(), getSampleKeys()[0], getSampleValues()[0]);\n        removeByEntrySet(makeFullMap().inverseBidiMap(), getSampleValues()[0], getSampleKeys()[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest.[void]testBidiRemoveByKeySet()", "name": "testBidiRemoveByKeySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveByKeySet()", "original_string": "    @Test\n    public void testBidiRemoveByKeySet() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        removeByKeySet(makeFullMap(), getSampleKeys()[0], getSampleValues()[0]);\n        removeByKeySet(makeFullMap().inverseBidiMap(), getSampleValues()[0], getSampleKeys()[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java", "class_name": "AbstractBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractBidiMapTest.java.AbstractBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiClearByHeadMap()", "name": "testBidiClearByHeadMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiClearByHeadMap()", "original_string": "    @Test\n    public void testBidiClearByHeadMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        final K first = it.next();\n        final K second = it.next();\n        final K toKey = it.next();\n\n        final V firstValue = sm.get(first);\n        final V secondValue = sm.get(second);\n        final V toKeyValue = sm.get(toKey);\n\n        final SortedMap<K, V> sub = sm.headMap(toKey);\n        final int size = sm.size();\n        assertEquals(2, sub.size());\n        sub.clear();\n        assertEquals(0, sub.size());\n        assertEquals(size - 2, sm.size());\n        assertEquals(size - 2, sm.inverseBidiMap().size());\n\n        assertFalse(sm.containsKey(first));\n        assertFalse(sm.containsValue(firstValue));\n        assertFalse(sm.inverseBidiMap().containsKey(firstValue));\n        assertFalse(sm.inverseBidiMap().containsValue(first));\n        assertFalse(sub.containsKey(first));\n        assertFalse(sub.containsValue(firstValue));\n\n        assertFalse(sm.containsKey(second));\n        assertFalse(sm.containsValue(secondValue));\n        assertFalse(sm.inverseBidiMap().containsKey(secondValue));\n        assertFalse(sm.inverseBidiMap().containsValue(second));\n        assertFalse(sub.containsKey(second));\n        assertFalse(sub.containsValue(secondValue));\n\n        assertTrue(sm.containsKey(toKey));\n        assertTrue(sm.containsValue(toKeyValue));\n        assertTrue(sm.inverseBidiMap().containsKey(toKeyValue));\n        assertTrue(sm.inverseBidiMap().containsValue(toKey));\n        assertFalse(sub.containsKey(toKey));\n        assertFalse(sub.containsValue(toKeyValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiClearBySubMap()", "name": "testBidiClearBySubMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiClearBySubMap()", "original_string": "    @Test\n    public void testBidiClearBySubMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        it.next();\n        final K fromKey = it.next();\n        final K first = it.next();\n        final K second = it.next();\n        final K toKey = it.next();\n\n        final V fromKeyValue = sm.get(fromKey);\n        final V firstValue = sm.get(first);\n        final V secondValue = sm.get(second);\n        final V toKeyValue = sm.get(toKey);\n\n        final SortedMap<K, V> sub = sm.subMap(fromKey, toKey);\n        final int size = sm.size();\n        assertEquals(3, sub.size());\n        sub.clear();\n        assertEquals(0, sub.size());\n        assertEquals(size - 3, sm.size());\n        assertEquals(size - 3, sm.inverseBidiMap().size());\n\n        assertFalse(sm.containsKey(fromKey));\n        assertFalse(sm.containsValue(fromKeyValue));\n        assertFalse(sm.inverseBidiMap().containsKey(fromKeyValue));\n        assertFalse(sm.inverseBidiMap().containsValue(fromKey));\n        assertFalse(sub.containsKey(fromKey));\n        assertFalse(sub.containsValue(fromKeyValue));\n\n        assertFalse(sm.containsKey(first));\n        assertFalse(sm.containsValue(firstValue));\n        assertFalse(sm.inverseBidiMap().containsKey(firstValue));\n        assertFalse(sm.inverseBidiMap().containsValue(first));\n        assertFalse(sub.containsKey(first));\n        assertFalse(sub.containsValue(firstValue));\n\n        assertFalse(sm.containsKey(second));\n        assertFalse(sm.containsValue(secondValue));\n        assertFalse(sm.inverseBidiMap().containsKey(secondValue));\n        assertFalse(sm.inverseBidiMap().containsValue(second));\n        assertFalse(sub.containsKey(second));\n        assertFalse(sub.containsValue(secondValue));\n\n        assertTrue(sm.containsKey(toKey));\n        assertTrue(sm.containsValue(toKeyValue));\n        assertTrue(sm.inverseBidiMap().containsKey(toKeyValue));\n        assertTrue(sm.inverseBidiMap().containsValue(toKey));\n        assertFalse(sub.containsKey(toKey));\n        assertFalse(sub.containsValue(toKeyValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiClearByTailMap()", "name": "testBidiClearByTailMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiClearByTailMap()", "original_string": "    @Test\n    public void testBidiClearByTailMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        it.next();\n        it.next();\n        final K first = it.next();\n        final K fromKey = it.next();\n        final K second = it.next();\n\n        final V firstValue = sm.get(first);\n        final V fromKeyValue = sm.get(fromKey);\n        final V secondValue = sm.get(second);\n\n        final SortedMap<K, V> sub = sm.tailMap(fromKey);\n        final int size = sm.size();\n        assertEquals(size - 3, sub.size());\n        sub.clear();\n        assertEquals(0, sub.size());\n        assertEquals(3, sm.size());\n        assertEquals(3, sm.inverseBidiMap().size());\n\n        assertTrue(sm.containsKey(first));\n        assertTrue(sm.containsValue(firstValue));\n        assertTrue(sm.inverseBidiMap().containsKey(firstValue));\n        assertTrue(sm.inverseBidiMap().containsValue(first));\n        assertFalse(sub.containsKey(first));\n        assertFalse(sub.containsValue(firstValue));\n\n        assertFalse(sm.containsKey(fromKey));\n        assertFalse(sm.containsValue(fromKeyValue));\n        assertFalse(sm.inverseBidiMap().containsKey(fromKeyValue));\n        assertFalse(sm.inverseBidiMap().containsValue(fromKey));\n        assertFalse(sub.containsKey(fromKey));\n        assertFalse(sub.containsValue(fromKeyValue));\n\n        assertFalse(sm.containsKey(second));\n        assertFalse(sm.containsValue(secondValue));\n        assertFalse(sm.inverseBidiMap().containsKey(secondValue));\n        assertFalse(sm.inverseBidiMap().containsValue(second));\n        assertFalse(sub.containsKey(second));\n        assertFalse(sub.containsValue(secondValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiHeadMapContains()", "name": "testBidiHeadMapContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiHeadMapContains()", "original_string": "    @Test\n    public void testBidiHeadMapContains() {\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        final K first = it.next();\n        final K toKey = it.next();\n        final K second = it.next();\n        final V firstValue = sm.get(first);\n        final V secondValue = sm.get(second);\n\n        final SortedMap<K, V> head = sm.headMap(toKey);\n        assertEquals(1, head.size());\n        assertTrue(sm.containsKey(first));\n        assertTrue(head.containsKey(first));\n        assertTrue(sm.containsValue(firstValue));\n        assertTrue(head.containsValue(firstValue));\n        assertTrue(sm.containsKey(second));\n        assertFalse(head.containsKey(second));\n        assertTrue(sm.containsValue(secondValue));\n        assertFalse(head.containsValue(secondValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiRemoveByHeadMap()", "name": "testBidiRemoveByHeadMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveByHeadMap()", "original_string": "    @Test\n    public void testBidiRemoveByHeadMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        final K first = it.next();\n        final K second = it.next();\n        final K toKey = it.next();\n\n        final int size = sm.size();\n        final SortedMap<K, V> sub = sm.headMap(toKey);\n        assertEquals(2, sub.size());\n        assertTrue(sm.containsKey(first));\n        assertTrue(sub.containsKey(first));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n\n        final V firstValue = sub.remove(first);\n        assertEquals(1, sub.size());\n        assertEquals(size - 1, sm.size());\n        assertEquals(size - 1, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(first));\n        assertFalse(sm.containsValue(firstValue));\n        assertFalse(sm.inverseBidiMap().containsKey(firstValue));\n        assertFalse(sm.inverseBidiMap().containsValue(first));\n        assertFalse(sub.containsKey(first));\n        assertFalse(sub.containsValue(firstValue));\n\n        final V secondValue = sub.remove(second);\n        assertEquals(0, sub.size());\n        assertEquals(size - 2, sm.size());\n        assertEquals(size - 2, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(second));\n        assertFalse(sm.containsValue(secondValue));\n        assertFalse(sm.inverseBidiMap().containsKey(secondValue));\n        assertFalse(sm.inverseBidiMap().containsValue(second));\n        assertFalse(sub.containsKey(second));\n        assertFalse(sub.containsValue(secondValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiRemoveByHeadMapEntrySet()", "name": "testBidiRemoveByHeadMapEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveByHeadMapEntrySet()", "original_string": "    @Test\n    public void testBidiRemoveByHeadMapEntrySet() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        final K first = it.next();\n        final K second = it.next();\n        final K toKey = it.next();\n\n        final int size = sm.size();\n        final SortedMap<K, V> sub = sm.headMap(toKey);\n        final Set<Map.Entry<K, V>> set = sub.entrySet();\n        assertEquals(2, sub.size());\n        assertEquals(2, set.size());\n\n        final Iterator<Map.Entry<K, V>> it2 = set.iterator();\n        final Map.Entry<K, V> firstEntry = cloneMapEntry(it2.next());\n        final Map.Entry<K, V> secondEntry = cloneMapEntry(it2.next());\n        assertTrue(sm.containsKey(first));\n        assertTrue(sub.containsKey(first));\n        assertTrue(set.contains(firstEntry));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n        assertTrue(set.contains(secondEntry));\n\n        set.remove(firstEntry);\n        assertEquals(1, sub.size());\n        assertEquals(size - 1, sm.size());\n        assertEquals(size - 1, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(firstEntry.getKey()));\n        assertFalse(sm.containsValue(firstEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsKey(firstEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsValue(firstEntry.getKey()));\n        assertFalse(sub.containsKey(firstEntry.getKey()));\n        assertFalse(sub.containsValue(firstEntry.getValue()));\n        assertFalse(set.contains(firstEntry));\n\n        set.remove(secondEntry);\n        assertEquals(0, sub.size());\n        assertEquals(size - 2, sm.size());\n        assertEquals(size - 2, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(secondEntry.getKey()));\n        assertFalse(sm.containsValue(secondEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsKey(secondEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsValue(secondEntry.getKey()));\n        assertFalse(sub.containsKey(secondEntry.getKey()));\n        assertFalse(sub.containsValue(secondEntry.getValue()));\n        assertFalse(set.contains(secondEntry));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiRemoveBySubMap()", "name": "testBidiRemoveBySubMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveBySubMap()", "original_string": "    @Test\n    public void testBidiRemoveBySubMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        it.next();\n        it.next();\n        final K fromKey = it.next();\n        final K first = it.next();\n        final K second = it.next();\n        final K toKey = it.next();\n\n        final int size = sm.size();\n        final SortedMap<K, V> sub = sm.subMap(fromKey, toKey);\n        assertTrue(sm.containsKey(first));\n        assertTrue(sub.containsKey(first));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n\n        final V firstValue = sub.remove(first);\n        assertEquals(2, sub.size());\n        assertEquals(size - 1, sm.size());\n        assertEquals(size - 1, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(first));\n        assertFalse(sm.containsValue(firstValue));\n        assertFalse(sm.inverseBidiMap().containsKey(firstValue));\n        assertFalse(sm.inverseBidiMap().containsValue(first));\n        assertFalse(sub.containsKey(first));\n        assertFalse(sub.containsValue(firstValue));\n\n        final V secondValue = sub.remove(second);\n        assertEquals(1, sub.size());\n        assertEquals(size - 2, sm.size());\n        assertEquals(size - 2, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(second));\n        assertFalse(sm.containsValue(secondValue));\n        assertFalse(sm.inverseBidiMap().containsKey(secondValue));\n        assertFalse(sm.inverseBidiMap().containsValue(second));\n        assertFalse(sub.containsKey(second));\n        assertFalse(sub.containsValue(secondValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiRemoveBySubMapEntrySet()", "name": "testBidiRemoveBySubMapEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveBySubMapEntrySet()", "original_string": "    @Test\n    public void testBidiRemoveBySubMapEntrySet() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        it.next();\n        it.next();\n        final K fromKey = it.next();\n        final K first = it.next();\n        final K second = it.next();\n        final K toKey = it.next();\n\n        final int size = sm.size();\n        final SortedMap<K, V> sub = sm.subMap(fromKey, toKey);\n        final Set<Map.Entry<K, V>> set = sub.entrySet();\n        assertEquals(3, set.size());\n        final Iterator<Map.Entry<K, V>> it2 = set.iterator();\n        it2.next();\n        final Map.Entry<K, V> firstEntry = cloneMapEntry(it2.next());\n        final Map.Entry<K, V> secondEntry = cloneMapEntry(it2.next());\n        assertTrue(sm.containsKey(first));\n        assertTrue(sub.containsKey(first));\n        assertTrue(set.contains(firstEntry));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n        assertTrue(set.contains(secondEntry));\n\n        set.remove(firstEntry);\n        assertEquals(2, sub.size());\n        assertEquals(size - 1, sm.size());\n        assertEquals(size - 1, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(firstEntry.getKey()));\n        assertFalse(sm.containsValue(firstEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsKey(firstEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsValue(firstEntry.getKey()));\n        assertFalse(sub.containsKey(firstEntry.getKey()));\n        assertFalse(sub.containsValue(firstEntry.getValue()));\n        assertFalse(set.contains(firstEntry));\n\n        set.remove(secondEntry);\n        assertEquals(1, sub.size());\n        assertEquals(size - 2, sm.size());\n        assertEquals(size - 2, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(secondEntry.getKey()));\n        assertFalse(sm.containsValue(secondEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsKey(secondEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsValue(secondEntry.getKey()));\n        assertFalse(sub.containsKey(secondEntry.getKey()));\n        assertFalse(sub.containsValue(secondEntry.getValue()));\n        assertFalse(set.contains(secondEntry));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiRemoveByTailMap()", "name": "testBidiRemoveByTailMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveByTailMap()", "original_string": "    @Test\n    public void testBidiRemoveByTailMap() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        it.next();\n        it.next();\n        final K fromKey = it.next();\n        final K first = it.next();\n        final K second = it.next();\n\n        final int size = sm.size();\n        final SortedMap<K, V> sub = sm.tailMap(fromKey);\n        assertTrue(sm.containsKey(first));\n        assertTrue(sub.containsKey(first));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n\n        final Object firstValue = sub.remove(first);\n        assertEquals(size - 3, sub.size());\n        assertEquals(size - 1, sm.size());\n        assertEquals(size - 1, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(first));\n        assertFalse(sm.containsValue(firstValue));\n        assertFalse(sm.inverseBidiMap().containsKey(firstValue));\n        assertFalse(sm.inverseBidiMap().containsValue(first));\n        assertFalse(sub.containsKey(first));\n        assertFalse(sub.containsValue(firstValue));\n\n        final Object secondValue = sub.remove(second);\n        assertEquals(size - 4, sub.size());\n        assertEquals(size - 2, sm.size());\n        assertEquals(size - 2, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(second));\n        assertFalse(sm.containsValue(secondValue));\n        assertFalse(sm.inverseBidiMap().containsKey(secondValue));\n        assertFalse(sm.inverseBidiMap().containsValue(second));\n        assertFalse(sub.containsKey(second));\n        assertFalse(sub.containsValue(secondValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiRemoveByTailMapEntrySet()", "name": "testBidiRemoveByTailMapEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiRemoveByTailMapEntrySet()", "original_string": "    @Test\n    public void testBidiRemoveByTailMapEntrySet() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        it.next();\n        it.next();\n        final K fromKey = it.next();\n        final K first = it.next();\n        final K second = it.next();\n\n        final int size = sm.size();\n        final SortedMap<K, V> sub = sm.tailMap(fromKey);\n        final Set<Map.Entry<K, V>> set = sub.entrySet();\n        final Iterator<Map.Entry<K, V>> it2 = set.iterator();\n        it2.next();\n        final Map.Entry<K, V> firstEntry = cloneMapEntry(it2.next());\n        final Map.Entry<K, V> secondEntry = cloneMapEntry(it2.next());\n        assertTrue(sm.containsKey(first));\n        assertTrue(sub.containsKey(first));\n        assertTrue(set.contains(firstEntry));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n        assertTrue(set.contains(secondEntry));\n\n        set.remove(firstEntry);\n        assertEquals(size - 3, sub.size());\n        assertEquals(size - 1, sm.size());\n        assertEquals(size - 1, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(firstEntry.getKey()));\n        assertFalse(sm.containsValue(firstEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsKey(firstEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsValue(firstEntry.getKey()));\n        assertFalse(sub.containsKey(firstEntry.getKey()));\n        assertFalse(sub.containsValue(firstEntry.getValue()));\n        assertFalse(set.contains(firstEntry));\n\n        set.remove(secondEntry);\n        assertEquals(size - 4, sub.size());\n        assertEquals(size - 2, sm.size());\n        assertEquals(size - 2, sm.inverseBidiMap().size());\n        assertFalse(sm.containsKey(secondEntry.getKey()));\n        assertFalse(sm.containsValue(secondEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsKey(secondEntry.getValue()));\n        assertFalse(sm.inverseBidiMap().containsValue(secondEntry.getKey()));\n        assertFalse(sub.containsKey(secondEntry.getKey()));\n        assertFalse(sub.containsValue(secondEntry.getValue()));\n        assertFalse(set.contains(secondEntry));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiSubMapContains()", "name": "testBidiSubMapContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiSubMapContains()", "original_string": "    @Test\n    public void testBidiSubMapContains() {\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        final K first = it.next();\n        final K fromKey = it.next();\n        final K second = it.next();\n        final K toKey = it.next();\n        final K third = it.next();\n        final V firstValue = sm.get(first);\n        final V fromKeyValue = sm.get(fromKey);\n        final V secondValue = sm.get(second);\n        final V thirdValue = sm.get(third);\n\n        final SortedMap<K, V> sub = sm.subMap(fromKey, toKey);\n        assertEquals(2, sub.size());\n        assertTrue(sm.containsKey(first));\n        assertFalse(sub.containsKey(first));\n        assertTrue(sm.containsValue(firstValue));\n        assertFalse(sub.containsValue(firstValue));\n        assertTrue(sm.containsKey(fromKey));\n        assertTrue(sub.containsKey(fromKey));\n        assertTrue(sm.containsValue(fromKeyValue));\n        assertTrue(sub.containsValue(fromKeyValue));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n        assertTrue(sm.containsValue(secondValue));\n        assertTrue(sub.containsValue(secondValue));\n        assertTrue(sm.containsKey(third));\n        assertFalse(sub.containsKey(third));\n        assertTrue(sm.containsValue(thirdValue));\n        assertFalse(sub.containsValue(thirdValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest.[void]testBidiTailMapContains()", "name": "testBidiTailMapContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBidiTailMapContains()", "original_string": "    @Test\n    public void testBidiTailMapContains() {\n        // extra test as other tests get complex\n        final SortedBidiMap<K, V> sm = makeFullMap();\n        final Iterator<K> it = sm.keySet().iterator();\n        final K first = it.next();\n        final K fromKey = it.next();\n        final K second = it.next();\n        final V firstValue = sm.get(first);\n        final V fromKeyValue = sm.get(fromKey);\n        final V secondValue = sm.get(second);\n\n        final SortedMap<K, V> sub = sm.tailMap(fromKey);\n        assertEquals(sm.size() - 1, sub.size());\n        assertTrue(sm.containsKey(first));\n        assertFalse(sub.containsKey(first));\n        assertTrue(sm.containsValue(firstValue));\n        assertFalse(sub.containsValue(firstValue));\n        assertTrue(sm.containsKey(fromKey));\n        assertTrue(sub.containsKey(fromKey));\n        assertTrue(sm.containsValue(fromKeyValue));\n        assertTrue(sub.containsValue(fromKeyValue));\n        assertTrue(sm.containsKey(second));\n        assertTrue(sub.containsKey(second));\n        assertTrue(sm.containsValue(secondValue));\n        assertTrue(sub.containsValue(secondValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java", "class_name": "AbstractSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractSortedBidiMapTest.java.AbstractSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test.[void]testCollections364()", "name": "testCollections364", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollections364()", "original_string": "    @Test\n    public void testCollections364() throws Exception {\n        final DualTreeBidiMap<String, Integer> original = new DualTreeBidiMap<>(\n                String.CASE_INSENSITIVE_ORDER, new IntegerComparator());\n        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        final ObjectOutputStream out = new ObjectOutputStream(buffer);\n        out.writeObject(original);\n        out.close();\n\n        final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n        @SuppressWarnings(\"unchecked\")\n        final DualTreeBidiMap<String, Integer> deserialized = (DualTreeBidiMap<String, Integer>) in.readObject();\n        in.close();\n\n        assertNotNull(original.comparator());\n        assertNotNull(deserialized.comparator());\n        assertEquals(original.comparator().getClass(), deserialized.comparator().getClass());\n        assertEquals(original.valueComparator().getClass(), deserialized.valueComparator().getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "class_name": "DualTreeBidiMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test.[void]testComparator()", "name": "testComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparator()", "original_string": "    @Test\n    public void testComparator() {\n        resetEmpty();\n        final SortedBidiMap<K, V> bidi = (SortedBidiMap<K, V>) map;\n        assertNotNull(bidi.comparator());\n        assertTrue(bidi.comparator() instanceof ReverseComparator);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "class_name": "DualTreeBidiMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test.[void]testComparator2()", "name": "testComparator2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparator2()", "original_string": "    @Test\n    public void testComparator2() {\n        final DualTreeBidiMap<String, Integer> dtbm = new DualTreeBidiMap<>(\n                String.CASE_INSENSITIVE_ORDER, null);\n        dtbm.put(\"two\", 0);\n        dtbm.put(\"one\", 1);\n        assertEquals(\"one\", dtbm.firstKey());\n        assertEquals(\"two\", dtbm.lastKey());\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "class_name": "DualTreeBidiMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test.[void]testSerializeDeserializeCheckComparator()", "name": "testSerializeDeserializeCheckComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSerializeDeserializeCheckComparator()", "original_string": "    @Test\n    public void testSerializeDeserializeCheckComparator() throws Exception {\n        final SortedBidiMap<?, ?> obj = makeObject();\n        if (obj instanceof Serializable && isTestSerialization()) {\n            final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            final ObjectOutputStream out = new ObjectOutputStream(buffer);\n            out.writeObject(obj);\n            out.close();\n\n            final ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n            final Object dest = in.readObject();\n            in.close();\n\n            final SortedBidiMap<?, ?> bidi = (SortedBidiMap<?, ?>) dest;\n            assertNotNull(obj.comparator());\n            assertNotNull(bidi.comparator());\n            assertTrue(bidi.comparator() instanceof ReverseComparator);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "class_name": "DualTreeBidiMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test.[void]testSortOrder()", "name": "testSortOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSortOrder()", "original_string": "    @Test\n    public void testSortOrder() throws Exception {\n        final SortedBidiMap<K, V> sm = makeFullMap();\n\n        // Sort by the comparator used in the makeEmptyBidiMap() method\n        List<K> newSortedKeys = getAsList(getSampleKeys());\n        newSortedKeys.sort(new ReverseComparator<>(ComparableComparator.<K>comparableComparator()));\n        newSortedKeys = Collections.unmodifiableList(newSortedKeys);\n\n        final Iterator<K> mapIter = sm.keySet().iterator();\n        for (final K expectedKey : newSortedKeys) {\n            final K mapKey = mapIter.next();\n            assertNotNull(expectedKey, \"key in sorted list may not be null\");\n            assertNotNull(mapKey, \"key in map may not be null\");\n            assertEquals(expectedKey, mapKey, \"key from sorted list and map must be equal\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java", "class_name": "DualTreeBidiMap2Test", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java.DualTreeBidiMap2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java.UnmodifiableBidiMapTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final BidiMap<K, V> map = makeFullMap();\n        assertSame(map, UnmodifiableBidiMap.unmodifiableBidiMap(map));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableBidiMap.unmodifiableBidiMap(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java", "class_name": "UnmodifiableBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java.UnmodifiableBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java.UnmodifiableBidiMapTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java", "class_name": "UnmodifiableBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java.UnmodifiableBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest.[void]testFirstKey()", "name": "testFirstKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFirstKey()", "original_string": "    @Test\n    public void testFirstKey() {\n        resetEmpty();\n        OrderedBidiMap<K, V> bidi = getMap();\n\n        final OrderedBidiMap<K, V> finalBidi = bidi;\n        assertThrows(NoSuchElementException.class, () -> finalBidi.firstKey());\n\n        resetFull();\n        bidi = getMap();\n        final K confirmedFirst = confirmed.keySet().iterator().next();\n        assertEquals(confirmedFirst, bidi.firstKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java", "class_name": "AbstractOrderedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest.[void]testLastKey()", "name": "testLastKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLastKey()", "original_string": "    @Test\n    public void testLastKey() {\n        resetEmpty();\n        OrderedBidiMap<K, V> bidi = getMap();\n\n        final OrderedBidiMap<K, V> finalBidi = bidi;\n        assertThrows(NoSuchElementException.class, () -> finalBidi.lastKey());\n\n        resetFull();\n        bidi = getMap();\n        K confirmedLast = null;\n        for (final Iterator<K> it = confirmed.keySet().iterator(); it.hasNext();) {\n            confirmedLast = it.next();\n        }\n        assertEquals(confirmedLast, bidi.lastKey());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java", "class_name": "AbstractOrderedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest.[void]testNextKey()", "name": "testNextKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextKey()", "original_string": "    @Test\n    public void testNextKey() {\n        resetEmpty();\n        OrderedBidiMap<K, V> bidi = (OrderedBidiMap<K, V>) map;\n        assertNull(bidi.nextKey(getOtherKeys()[0]));\n        if (!isAllowNullKey()) {\n            try {\n                assertNull(bidi.nextKey(null)); // this is allowed too\n            } catch (final NullPointerException ignore) {\n                // ignore\n            }\n        } else {\n            assertNull(bidi.nextKey(null));\n        }\n\n        resetFull();\n        bidi = (OrderedBidiMap<K, V>) map;\n        final Iterator<K> it = confirmed.keySet().iterator();\n        K confirmedLast = it.next();\n        while (it.hasNext()) {\n            final K confirmedObject = it.next();\n            assertEquals(confirmedObject, bidi.nextKey(confirmedLast));\n            confirmedLast = confirmedObject;\n        }\n        assertNull(bidi.nextKey(confirmedLast));\n\n        if (!isAllowNullKey()) {\n            final OrderedBidiMap<K, V> finalBidi = bidi;\n            assertThrows(NullPointerException.class, () -> finalBidi.nextKey(null));\n\n        } else {\n            assertNull(bidi.nextKey(null));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java", "class_name": "AbstractOrderedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest.[void]testPreviousKey()", "name": "testPreviousKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreviousKey()", "original_string": "    @Test\n    public void testPreviousKey() {\n        resetEmpty();\n        OrderedBidiMap<K, V> bidi = getMap();\n        assertNull(bidi.previousKey(getOtherKeys()[0]));\n        if (!isAllowNullKey()) {\n            try {\n                assertNull(bidi.previousKey(null)); // this is allowed too\n            } catch (final NullPointerException ignore) {\n                // ignore\n            }\n        } else {\n            assertNull(bidi.previousKey(null));\n        }\n\n        resetFull();\n        bidi = getMap();\n        final List<K> list = new ArrayList<>(confirmed.keySet());\n        Collections.reverse(list);\n        final Iterator<K> it = list.iterator();\n        K confirmedLast = it.next();\n        while (it.hasNext()) {\n            final K confirmedObject = it.next();\n            assertEquals(confirmedObject, bidi.previousKey(confirmedLast));\n            confirmedLast = confirmedObject;\n        }\n        assertNull(bidi.previousKey(confirmedLast));\n\n        if (!isAllowNullKey()) {\n            final OrderedBidiMap<K, V> finalBidi = bidi;\n            assertThrows(NullPointerException.class, () -> finalBidi.previousKey(null));\n\n        } else {\n            assertNull(bidi.previousKey(null));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java", "class_name": "AbstractOrderedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/AbstractOrderedBidiMapTest.java.AbstractOrderedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java.UnmodifiableSortedBidiMapTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final SortedBidiMap<K, V> map = makeFullMap();\n        assertSame(map, UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(map));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java", "class_name": "UnmodifiableSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java.UnmodifiableSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java.UnmodifiableSortedBidiMapTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java", "class_name": "UnmodifiableSortedBidiMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java.UnmodifiableSortedBidiMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java.UnmodifiableSetTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final Set<E> set = makeFullCollection();\n        assertSame(set, UnmodifiableSet.unmodifiableSet(set));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableSet.unmodifiableSet(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java", "class_name": "UnmodifiableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java.UnmodifiableSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java.UnmodifiableSetTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullCollection() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java", "class_name": "UnmodifiableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java.UnmodifiableSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testAddComposited()", "name": "testAddComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddComposited()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddComposited() {\n        final Set<E> one = buildOne();\n        final Set<E> two = buildTwo();\n        final CompositeSet<E> set = new CompositeSet<>();\n        set.addComposited(one, two);\n        set.addComposited((Set<E>) null);\n        set.addComposited((Set<E>[]) null);\n        set.addComposited(null, null);\n        set.addComposited(null, null, null);\n        final CompositeSet<E> set2 = new CompositeSet<>(buildOne());\n        set2.addComposited(buildTwo());\n        assertEquals(set, set2);\n        final HashSet<E> set3 = new HashSet<>();\n        set3.add((E) \"1\");\n        set3.add((E) \"2\");\n        set3.add((E) \"3\");\n        final HashSet<E> set4 = new HashSet<>();\n        set4.add((E) \"4\");\n        final CompositeSet<E> set5 = new CompositeSet<>(set3);\n        set5.addComposited(set4);\n        assertEquals(set, set5);\n        assertThrows(UnsupportedOperationException.class, () -> set.addComposited(set3),\n                \"Expecting UnsupportedOperationException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testAddCompositedCollision()", "name": "testAddCompositedCollision", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedCollision()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddCompositedCollision() {\n        final HashSet<E> set1 = new HashSet<>();\n        set1.add((E) \"1\");\n        set1.add((E) \"2\");\n        set1.add((E) \"3\");\n        final HashSet<E> set2 = new HashSet<>();\n        set2.add((E) \"4\");\n        final CompositeSet<E> set3 = new CompositeSet<>(set1);\n        assertThrows(UnsupportedOperationException.class, () -> set3.addComposited(set1, buildOne()),\n                \"Expecting UnsupportedOperationException.\");\n        assertThrows(UnsupportedOperationException.class, () -> set3.addComposited(set1, buildOne(), buildTwo()),\n                \"Expecting UnsupportedOperationException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContains()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContains() {\n        final CompositeSet<E> set = new CompositeSet<>(buildOne(), buildTwo());\n        assertTrue(set.contains(\"1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testContainsAll()", "name": "testContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsAll() {\n        final CompositeSet<E> set = new CompositeSet<>(buildOne(), buildTwo());\n        assertFalse(set.containsAll(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testFailedCollisionResolution()", "name": "testFailedCollisionResolution", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFailedCollisionResolution()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFailedCollisionResolution() {\n        final Set<E> one = buildOne();\n        final Set<E> two = buildTwo();\n        final CompositeSet<E> set = new CompositeSet<>(one, two);\n        set.setMutator(new SetMutator<E>() {\n            private static final long serialVersionUID = 1L;\n\n            @Override\n            public boolean add(final CompositeSet<E> composite,\n                    final List<Set<E>> collections, final E obj) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public boolean addAll(final CompositeSet<E> composite,\n                    final List<Set<E>> collections, final Collection<? extends E> coll) {\n                throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void resolveCollision(final CompositeSet<E> comp, final Set<E> existing,\n                final Set<E> added, final Collection<E> intersects) {\n                //noop\n            }\n        });\n\n        final HashSet<E> three = new HashSet<>();\n        three.add((E) \"1\");\n        assertThrows(IllegalArgumentException.class, () -> set.addComposited(three),\n                \"IllegalArgumentException should have been thrown\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testRemoveAll()", "name": "testRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAll() {\n        final CompositeSet<E> set = new CompositeSet<>(buildOne(), buildTwo());\n        assertFalse(set.removeAll(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testRemoveComposited()", "name": "testRemoveComposited", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveComposited()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveComposited() {\n        final Set<E> one = buildOne();\n        final Set<E> two = buildTwo();\n        final CompositeSet<E> set = new CompositeSet<>(one, two);\n        set.remove(\"1\");\n        assertFalse(one.contains(\"1\"));\n\n        set.remove(\"3\");\n        assertFalse(one.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest.[void]testRemoveUnderlying()", "name": "testRemoveUnderlying", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveUnderlying()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveUnderlying() {\n        final Set<E> one = buildOne();\n        final Set<E> two = buildTwo();\n        final CompositeSet<E> set = new CompositeSet<>(one, two);\n        one.remove(\"1\");\n        assertFalse(set.contains(\"1\"));\n\n        two.remove(\"3\");\n        assertFalse(set.contains(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java", "class_name": "CompositeSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java.CompositeSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java.UnmodifiableNavigableSetTest.[void]testComparator()", "name": "testComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparator()", "original_string": "    @Test\n    public void testComparator() {\n        setupSet();\n        final Comparator<? super E> c = set.comparator();\n        assertNull(c, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java", "class_name": "UnmodifiableNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java.UnmodifiableNavigableSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java.UnmodifiableNavigableSetTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final NavigableSet<E> set = makeFullCollection();\n        assertSame(set, UnmodifiableNavigableSet.unmodifiableNavigableSet(set));\n        assertThrows(NullPointerException.class, () -> UnmodifiableNavigableSet.unmodifiableNavigableSet(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java", "class_name": "UnmodifiableNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java.UnmodifiableNavigableSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java.UnmodifiableNavigableSetTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiable()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiable() {\n        setupSet();\n        verifyUnmodifiable(set);\n        verifyUnmodifiable(set.descendingSet());\n        verifyUnmodifiable(set.headSet((E) Integer.valueOf(1)));\n        verifyUnmodifiable(set.headSet((E) Integer.valueOf(1), true));\n        verifyUnmodifiable(set.tailSet((E) Integer.valueOf(1)));\n        verifyUnmodifiable(set.tailSet((E) Integer.valueOf(1), false));\n        verifyUnmodifiable(set.subSet((E) Integer.valueOf(1), (E) Integer.valueOf(3)));\n        verifyUnmodifiable(set.subSet((E) Integer.valueOf(1), false, (E) Integer.valueOf(3), false));\n        verifyUnmodifiable(set.subSet((E) Integer.valueOf(1), true, (E) Integer.valueOf(3), true));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java", "class_name": "UnmodifiableNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableNavigableSetTest.java.UnmodifiableNavigableSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that base set and subsets are not modifiable\n"}, {"uris": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java.TransformedNavigableSetTest.[void]testTransformedSet()", "name": "testTransformedSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedSet() {\n        final NavigableSet<E> set = TransformedNavigableSet.transformingNavigableSet(new TreeSet<>(),\n                (Transformer<E, E>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, set.size());\n        final E[] els = (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n        for (int i = 0; i < els.length; i++) {\n            set.add(els[i]);\n            assertEquals(i + 1, set.size());\n            assertTrue(set.contains(Integer.valueOf((String) els[i])));\n        }\n\n        assertTrue(set.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java", "class_name": "TransformedNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java.TransformedNavigableSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java.TransformedNavigableSetTest.[void]testTransformedSet_decorateTransform()", "name": "testTransformedSet_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedSet_decorateTransform()", "original_string": "    @Test\n    public void testTransformedSet_decorateTransform() {\n        final Set<Object> originalSet = new TreeSet<>();\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        Collections.addAll(originalSet, els);\n        final Set<?> set = TransformedSet.transformedSet(originalSet,\n                TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(els.length, set.size());\n        for (final Object el : els) {\n            assertTrue(set.contains(Integer.valueOf((String) el)));\n        }\n\n        assertTrue(set.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java", "class_name": "TransformedNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/TransformedNavigableSetTest.java.TransformedNavigableSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java.UnmodifiableSortedSetTest.[void]testComparator()", "name": "testComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparator()", "original_string": "    @Test\n    public void testComparator() {\n        setupSet();\n        final Comparator<? super E> c = set.comparator();\n        assertNull(c, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java", "class_name": "UnmodifiableSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java.UnmodifiableSortedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java.UnmodifiableSortedSetTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final SortedSet<E> set = makeFullCollection();\n        assertSame(set, UnmodifiableSortedSet.unmodifiableSortedSet(set));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableSortedSet.unmodifiableSortedSet(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java", "class_name": "UnmodifiableSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java.UnmodifiableSortedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java.UnmodifiableSortedSetTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiable()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiable() {\n        setupSet();\n        verifyUnmodifiable(set);\n        verifyUnmodifiable(set.headSet((E) Integer.valueOf(1)));\n        verifyUnmodifiable(set.tailSet((E) Integer.valueOf(1)));\n        verifyUnmodifiable(set.subSet((E) Integer.valueOf(1), (E) Integer.valueOf(3)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java", "class_name": "UnmodifiableSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java.UnmodifiableSortedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that base set and subsets are not modifiable\n"}, {"uris": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java.TransformedSortedSetTest.[void]testTransformedSet()", "name": "testTransformedSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedSet() {\n        final SortedSet<E> set = TransformedSortedSet.transformingSortedSet(new TreeSet<>(),\n                (Transformer<E, E>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, set.size());\n        final E[] els = (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n        for (int i = 0; i < els.length; i++) {\n            set.add(els[i]);\n            assertEquals(i + 1, set.size());\n            assertTrue(set.contains(Integer.valueOf((String) els[i])));\n        }\n\n        assertTrue(set.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java", "class_name": "TransformedSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java.TransformedSortedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java.TransformedSortedSetTest.[void]testTransformedSet_decorateTransform()", "name": "testTransformedSet_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedSet_decorateTransform()", "original_string": "    @Test\n    public void testTransformedSet_decorateTransform() {\n        final Set<Object> originalSet = new TreeSet<>();\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        Collections.addAll(originalSet, els);\n        final Set<?> set = TransformedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(els.length, set.size());\n        for (final Object el : els) {\n            assertTrue(set.contains(Integer.valueOf((String) el)));\n        }\n\n        assertTrue(set.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java", "class_name": "TransformedSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java.TransformedSortedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java.PredicatedSetTest.[void]testGetSet()", "name": "testGetSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetSet()", "original_string": "    @Test\n    public void testGetSet() {\n        final PredicatedSet<E> set = makeTestSet();\n        assertNotNull(set.decorated(), \"returned set should not be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java", "class_name": "PredicatedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java.PredicatedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java.PredicatedSetTest.[void]testIllegalAdd()", "name": "testIllegalAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd() {\n        final Set<E> set = makeTestSet();\n        final Integer i = Integer.valueOf(3);\n        assertThrows(IllegalArgumentException.class, () -> set.add((E) i),\n                \"Integer should fail string predicate.\");\n        assertFalse(set.contains(i), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java", "class_name": "PredicatedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java.PredicatedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java.PredicatedSetTest.[void]testIllegalAddAll()", "name": "testIllegalAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll() {\n        final Set<E> set = makeTestSet();\n        final Set<E> elements = new HashSet<>();\n        elements.add((E) \"one\");\n        elements.add((E) \"two\");\n        elements.add((E) Integer.valueOf(3));\n        elements.add((E) \"four\");\n        assertThrows(IllegalArgumentException.class, () -> set.addAll(elements),\n                \"Integer should fail string predicate.\");\n        assertFalse(set.contains(\"one\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"two\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(Integer.valueOf(3)), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"four\"), \"Set shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java", "class_name": "PredicatedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java.PredicatedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java.MapBackedSet2Test.[void]testCanonicalEmptyCollectionExists()", "name": "testCanonicalEmptyCollectionExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testCanonicalEmptyCollectionExists()", "original_string": "    @Test\n    @Override\n    public void testCanonicalEmptyCollectionExists() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java", "class_name": "MapBackedSet2Test", "class_uri": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java.MapBackedSet2Test", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java.MapBackedSet2Test.[void]testCanonicalFullCollectionExists()", "name": "testCanonicalFullCollectionExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testCanonicalFullCollectionExists()", "original_string": "    @Test\n    @Override\n    public void testCanonicalFullCollectionExists() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java", "class_name": "MapBackedSet2Test", "class_uri": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java.MapBackedSet2Test", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java.MapBackedSet2Test.[void]testOrdering()", "name": "testOrdering", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOrdering()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOrdering() {\n        final Set<E> set = setupSet();\n        Iterator<E> it = set.iterator();\n\n        for (int i = 0; i < 10; i++) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n\n        for (int i = 0; i < 10; i += 2) {\n            assertTrue(set.remove(Integer.toString(i)), \"Must be able to remove int\");\n        }\n\n        it = set.iterator();\n        for (int i = 1; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong after remove \");\n        }\n\n        for (int i = 0; i < 10; i++) {\n            set.add((E) Integer.toString(i));\n        }\n\n        assertEquals(10, set.size(), \"Size of set is wrong!\");\n\n        it = set.iterator();\n        for (int i = 1; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n        for (int i = 0; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java", "class_name": "MapBackedSet2Test", "class_uri": "src/test/java/org/apache/commons/collections4/set/MapBackedSet2Test.java.MapBackedSet2Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest.[void]testComparator()", "name": "testComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparator()", "original_string": "    @Test\n    public void testComparator() {\n        final NavigableSet<E> set = makeTestSet();\n        final Comparator<? super E> c = set.comparator();\n        assertNull(c, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java", "class_name": "PredicatedNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest.[void]testGetSet()", "name": "testGetSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetSet()", "original_string": "    @Test\n    public void testGetSet() {\n        final PredicatedNavigableSet<E> set = makeTestSet();\n        assertNotNull(set.decorated(), \"returned set should not be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java", "class_name": "PredicatedNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest.[void]testIllegalAdd()", "name": "testIllegalAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd() {\n        final NavigableSet<E> set = makeTestSet();\n        final String testString = \"B\";\n        assertThrows(IllegalArgumentException.class, () -> set.add((E) testString),\n                \"Should fail string predicate.\");\n        assertFalse(set.contains(testString), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java", "class_name": "PredicatedNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest.[void]testIllegalAddAll()", "name": "testIllegalAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll() {\n        final NavigableSet<E> set = makeTestSet();\n        final Set<E> elements = new TreeSet<>();\n        elements.add((E) \"Aone\");\n        elements.add((E) \"Atwo\");\n        elements.add((E) \"Bthree\");\n        elements.add((E) \"Afour\");\n        assertThrows(IllegalArgumentException.class, () -> set.addAll(elements),\n                \"Should fail string predicate.\");\n        assertFalse(set.contains(\"Aone\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"Atwo\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"Bthree\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"Afour\"), \"Set shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java", "class_name": "PredicatedNavigableSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java.PredicatedNavigableSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java.AbstractSetTest.[void]testSetEquals()", "name": "testSetEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetEquals()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetEquals() {\n        resetEmpty();\n        assertEquals(getCollection(), getConfirmed(), \"Empty sets should be equal\");\n        verify();\n\n        final Collection<E> set2 = makeConfirmedCollection();\n        set2.add((E) \"foo\");\n        assertFalse(getCollection().equals(set2), \"Empty set shouldn't equal nonempty set\");\n\n        resetFull();\n        assertEquals(getCollection(), getConfirmed(), \"Full sets should be equal\");\n        verify();\n\n        set2.clear();\n        set2.addAll(Arrays.asList(getOtherElements()));\n        assertFalse(getCollection().equals(set2), \"Sets with different contents shouldn't be equal\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java", "class_name": "AbstractSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java.AbstractSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link Set#equals(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java.AbstractSetTest.[void]testSetHashCode()", "name": "testSetHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetHashCode()", "original_string": "    @Test\n    public void testSetHashCode() {\n        resetEmpty();\n        assertEquals(getCollection().hashCode(), getConfirmed().hashCode(),\n                \"Empty sets have equal hashCodes\");\n\n        resetFull();\n        assertEquals(getCollection().hashCode(), getConfirmed().hashCode(),\n                \"Equal sets have equal hashCodes\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java", "class_name": "AbstractSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/AbstractSetTest.java.AbstractSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests {@link Set#hashCode()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest.[void]testDecorator()", "name": "testDecorator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorator()", "original_string": "    @Test\n    public void testDecorator() {\n        assertAll(\n                () -> assertThrows(NullPointerException.class, () -> ListOrderedSet.listOrderedSet((List<E>) null)),\n                () -> assertThrows(NullPointerException.class, () -> ListOrderedSet.listOrderedSet((Set<E>) null)),\n                () -> assertThrows(NullPointerException.class, () -> ListOrderedSet.listOrderedSet(null, null)),\n                () -> assertThrows(NullPointerException.class, () -> ListOrderedSet.listOrderedSet(new HashSet<>(), null)),\n                () -> assertThrows(NullPointerException.class, () -> ListOrderedSet.listOrderedSet(null, new ArrayList<>()))\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "class_name": "ListOrderedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest.[void]testDuplicates()", "name": "testDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testDuplicates()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testDuplicates() {\n        final List<E> list = new ArrayList<>(10);\n        list.add((E) Integer.valueOf(1));\n        list.add((E) Integer.valueOf(2));\n        list.add((E) Integer.valueOf(3));\n        list.add((E) Integer.valueOf(1));\n\n        final ListOrderedSet<E> orderedSet = ListOrderedSet.listOrderedSet(list);\n\n        assertEquals(3, orderedSet.size());\n        assertEquals(3, IteratorUtils.toArray(orderedSet.iterator()).length);\n\n        // insertion order preserved?\n        assertEquals(Integer.valueOf(1), orderedSet.get(0));\n        assertEquals(Integer.valueOf(2), orderedSet.get(1));\n        assertEquals(Integer.valueOf(3), orderedSet.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "class_name": "ListOrderedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest.[void]testListAddIndexed()", "name": "testListAddIndexed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddIndexed()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddIndexed() {\n        final ListOrderedSet<E> set = makeObject();\n        set.add((E) ZERO);\n        set.add((E) TWO);\n\n        set.add(1, (E) ONE);\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n\n        set.add(0, (E) ONE);\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n\n        final List<E> list = new ArrayList<>();\n        list.add((E) ZERO);\n        list.add((E) TWO);\n\n        set.addAll(0, list);\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n\n        list.add(0, (E) THREE); // list = [3,0,2]\n        set.remove(TWO); //  set = [0,1]\n        set.addAll(1, list);\n        assertEquals(4, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(THREE, set.get(1));\n        assertSame(TWO, set.get(2));\n        assertSame(ONE, set.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "class_name": "ListOrderedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest.[void]testListAddRemove()", "name": "testListAddRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddRemove() {\n        final ListOrderedSet<E> set = makeObject();\n        final List<E> view = set.asList();\n        set.add((E) ZERO);\n        set.add((E) ONE);\n        set.add((E) TWO);\n\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n        assertEquals(3, view.size());\n        assertSame(ZERO, view.get(0));\n        assertSame(ONE, view.get(1));\n        assertSame(TWO, view.get(2));\n\n        assertEquals(0, set.indexOf(ZERO));\n        assertEquals(1, set.indexOf(ONE));\n        assertEquals(2, set.indexOf(TWO));\n\n        set.remove(1);\n        assertEquals(2, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(TWO, set.get(1));\n        assertEquals(2, view.size());\n        assertSame(ZERO, view.get(0));\n        assertSame(TWO, view.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "class_name": "ListOrderedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest.[void]testListAddReplacing()", "name": "testListAddReplacing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddReplacing()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddReplacing() {\n        final ListOrderedSet<E> set = makeObject();\n        final A a = new A();\n        final B b = new B();\n        set.add((E) a);\n        assertEquals(1, set.size());\n        set.add((E) b); // will match but not replace A as equal\n        assertEquals(1, set.size());\n        assertSame(a, set.decorated().iterator().next());\n        assertSame(a, set.iterator().next());\n        assertSame(a, set.get(0));\n        assertSame(a, set.asList().get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "class_name": "ListOrderedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest.[void]testOrdering()", "name": "testOrdering", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOrdering()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOrdering() {\n        final ListOrderedSet<E> set = setupSet();\n        Iterator<E> it = set.iterator();\n\n        for (int i = 0; i < 10; i++) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n\n        for (int i = 0; i < 10; i += 2) {\n            assertTrue(set.remove(Integer.toString(i)),\n                       \"Must be able to remove int\");\n        }\n\n        it = set.iterator();\n        for (int i = 1; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(),\n                         \"Sequence is wrong after remove \");\n        }\n\n        for (int i = 0; i < 10; i++) {\n            set.add((E) Integer.toString(i));\n        }\n\n        assertEquals(10, set.size(), \"Size of set is wrong!\");\n\n        it = set.iterator();\n        for (int i = 1; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n        for (int i = 0; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "class_name": "ListOrderedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest.[void]testRetainAll()", "name": "testRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll() {\n        final List<E> list = new ArrayList<>(10);\n        final Set<E> set = new HashSet<>(10);\n        final ListOrderedSet<E> orderedSet = ListOrderedSet.listOrderedSet(set, list);\n        for (int i = 0; i < 10; ++i) {\n            orderedSet.add((E) Integer.valueOf(10 - i - 1));\n        }\n\n        final Collection<E> retained = new ArrayList<>(5);\n        for (int i = 0; i < 5; ++i) {\n            retained.add((E) Integer.valueOf(i * 2));\n        }\n\n        assertTrue(orderedSet.retainAll(retained));\n        assertEquals(5, orderedSet.size());\n        // insertion order preserved?\n        assertEquals(Integer.valueOf(8), orderedSet.get(0));\n        assertEquals(Integer.valueOf(6), orderedSet.get(1));\n        assertEquals(Integer.valueOf(4), orderedSet.get(2));\n        assertEquals(Integer.valueOf(2), orderedSet.get(3));\n        assertEquals(Integer.valueOf(0), orderedSet.get(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java", "class_name": "ListOrderedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java.ListOrderedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java.TransformedSetTest.[void]testTransformedSet()", "name": "testTransformedSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedSet() {\n        final Set<E> set = TransformedSet.transformingSet(new HashSet<>(),\n                (Transformer<E, E>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, set.size());\n        final E[] els = (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n        for (int i = 0; i < els.length; i++) {\n            set.add(els[i]);\n            assertEquals(i + 1, set.size());\n            assertTrue(set.contains(Integer.valueOf((String) els[i])));\n            assertFalse(set.contains(els[i]));\n        }\n\n        assertFalse(set.remove(els[0]));\n        assertTrue(set.remove(Integer.valueOf((String) els[0])));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java", "class_name": "TransformedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java.TransformedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java.TransformedSetTest.[void]testTransformedSet_decorateTransform()", "name": "testTransformedSet_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedSet_decorateTransform()", "original_string": "    @Test\n    public void testTransformedSet_decorateTransform() {\n        final Set<Object> originalSet = new HashSet<>();\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        Collections.addAll(originalSet, els);\n        final Set<?> set = TransformedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(els.length, set.size());\n        for (final Object el : els) {\n            assertTrue(set.contains(Integer.valueOf((String) el)));\n            assertFalse(set.contains(el));\n        }\n\n        assertFalse(set.remove(els[0]));\n        assertTrue(set.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java", "class_name": "TransformedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java.TransformedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest.[void]testComparator()", "name": "testComparator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testComparator()", "original_string": "    @Test\n    public void testComparator() {\n        final SortedSet<E> set = makeTestSet();\n        final Comparator<? super E> c = set.comparator();\n        assertNull(c, \"natural order, so comparator should be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java", "class_name": "PredicatedSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest.[void]testGetSet()", "name": "testGetSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetSet()", "original_string": "    @Test\n    public void testGetSet() {\n        final PredicatedSortedSet<E> set = makeTestSet();\n        assertNotNull(set.decorated(), \"returned set should not be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java", "class_name": "PredicatedSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest.[void]testIllegalAdd()", "name": "testIllegalAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd() {\n        final SortedSet<E> set = makeTestSet();\n        final String testString = \"B\";\n        assertThrows(IllegalArgumentException.class, () -> set.add((E) testString),\n                \"Should fail string predicate.\");\n        assertFalse(set.contains(testString), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java", "class_name": "PredicatedSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest.[void]testIllegalAddAll()", "name": "testIllegalAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll() {\n        final SortedSet<E> set = makeTestSet();\n        final Set<E> elements = new TreeSet<>();\n        elements.add((E) \"Aone\");\n        elements.add((E) \"Atwo\");\n        elements.add((E) \"Bthree\");\n        elements.add((E) \"Afour\");\n        assertThrows(IllegalArgumentException.class, () -> set.addAll(elements),\n                \"Should fail string predicate.\");\n        assertFalse(set.contains(\"Aone\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"Atwo\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"Bthree\"), \"Set shouldn't contain illegal element\");\n        assertFalse(set.contains(\"Afour\"), \"Set shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java", "class_name": "PredicatedSortedSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java.PredicatedSortedSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java.ListOrderedSet2Test.[void]testListAddIndexed()", "name": "testListAddIndexed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddIndexed()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddIndexed() {\n        final ListOrderedSet<E> set = makeObject();\n        set.add((E) ZERO);\n        set.add((E) TWO);\n\n        set.add(1, (E) ONE);\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n\n        set.add(0, (E) ONE);\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n\n        final List<E> list = new ArrayList<>();\n        list.add((E) ZERO);\n        list.add((E) TWO);\n\n        set.addAll(0, list);\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n\n        list.add(0, (E) THREE); // list = [3,0,2]\n        set.remove(TWO);    //  set = [0,1]\n        set.addAll(1, list);\n        assertEquals(4, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(THREE, set.get(1));\n        assertSame(TWO, set.get(2));\n        assertSame(ONE, set.get(3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java", "class_name": "ListOrderedSet2Test", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java.ListOrderedSet2Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java.ListOrderedSet2Test.[void]testListAddRemove()", "name": "testListAddRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListAddRemove() {\n        final ListOrderedSet<E> set = makeObject();\n        final List<E> view = set.asList();\n        set.add((E) ZERO);\n        set.add((E) ONE);\n        set.add((E) TWO);\n\n        assertEquals(3, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(ONE, set.get(1));\n        assertSame(TWO, set.get(2));\n        assertEquals(3, view.size());\n        assertSame(ZERO, view.get(0));\n        assertSame(ONE, view.get(1));\n        assertSame(TWO, view.get(2));\n\n        assertEquals(0, set.indexOf(ZERO));\n        assertEquals(1, set.indexOf(ONE));\n        assertEquals(2, set.indexOf(TWO));\n\n        set.remove(1);\n        assertEquals(2, set.size());\n        assertSame(ZERO, set.get(0));\n        assertSame(TWO, set.get(1));\n        assertEquals(2, view.size());\n        assertSame(ZERO, view.get(0));\n        assertSame(TWO, view.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java", "class_name": "ListOrderedSet2Test", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java.ListOrderedSet2Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java.ListOrderedSet2Test.[void]testOrdering()", "name": "testOrdering", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOrdering()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testOrdering() {\n        final ListOrderedSet<E> set = setupSet();\n        Iterator<E> it = set.iterator();\n\n        for (int i = 0; i < 10; i++) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n\n        for (int i = 0; i < 10; i += 2) {\n            assertTrue(set.remove(Integer.toString(i)), \"Must be able to remove int\");\n        }\n\n        it = set.iterator();\n        for (int i = 1; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong after remove \");\n        }\n\n        for (int i = 0; i < 10; i++) {\n            set.add((E) Integer.toString(i));\n        }\n\n        assertEquals(10, set.size(), \"Size of set is wrong!\");\n\n        it = set.iterator();\n        for (int i = 1; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n        for (int i = 0; i < 10; i += 2) {\n            assertEquals(Integer.toString(i), it.next(), \"Sequence is wrong\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java", "class_name": "ListOrderedSet2Test", "class_uri": "src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java.ListOrderedSet2Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdd()", "original_string": "    @Test\n    public void testAdd() {\n        final FixedSizeList<String> fixedSizeList = initFixedSizeList();\n\n        assertThrows(UnsupportedOperationException.class, () -> fixedSizeList.add(2, \"New Value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "class_name": "FixedSizeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest.[void]testAddAll()", "name": "testAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddAll()", "original_string": "    @Test\n    public void testAddAll() {\n        final FixedSizeList<String> fixedSizeList = initFixedSizeList();\n\n        final List<String> addList = new ArrayList<>();\n        addList.add(\"item 3\");\n        addList.add(\"item 4\");\n\n        assertThrows(UnsupportedOperationException.class, () -> fixedSizeList.addAll(2, addList));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "class_name": "FixedSizeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest.[void]testIsFull()", "name": "testIsFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsFull()", "original_string": "    @Test\n    public void testIsFull() {\n        final FixedSizeList<String> fixedSizeList = initFixedSizeList();\n\n        assertTrue(fixedSizeList.isFull());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "class_name": "FixedSizeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest.[void]testListAllowsMutationOfUnderlyingCollection()", "name": "testListAllowsMutationOfUnderlyingCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListAllowsMutationOfUnderlyingCollection()", "original_string": "    @Test\n    public void testListAllowsMutationOfUnderlyingCollection() {\n\n        final List<String> decoratedList = new ArrayList<>();\n        decoratedList.add(\"item 1\");\n        decoratedList.add(\"item 2\");\n        //\n        final FixedSizeList<String> fixedSizeList = FixedSizeList.fixedSizeList(decoratedList);\n        final int sizeBefore = fixedSizeList.size();\n        //\n        final boolean changed = decoratedList.add(\"New Value\");\n        assertTrue(changed);\n        //\n        assertEquals(sizeBefore + 1, fixedSizeList.size(),\n                \"Modifying an the underlying list is allowed\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "class_name": "FixedSizeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest.[void]testMaxSize()", "name": "testMaxSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxSize()", "original_string": "    @Test\n    public void testMaxSize() {\n        final FixedSizeList<String> fixedSizeList = initFixedSizeList();\n\n        assertEquals(2, fixedSizeList.maxSize());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "class_name": "FixedSizeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove()", "original_string": "    @Test\n    public void testRemove() {\n        final FixedSizeList<String> fixedSizeList = initFixedSizeList();\n\n        assertThrows(UnsupportedOperationException.class, () -> fixedSizeList.remove(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "class_name": "FixedSizeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest.[void]testSubList()", "name": "testSubList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubList()", "original_string": "    @Test\n    public void testSubList() {\n        final FixedSizeList<String> fixedSizeList = initFixedSizeList();\n\n        final List<String> subFixedSizeList = fixedSizeList.subList(1, 1);\n        assertNotNull(subFixedSizeList);\n        assertEquals(0, subFixedSizeList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java", "class_name": "FixedSizeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/FixedSizeListTest.java.FixedSizeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testAddNodeAfter()", "name": "testAddNodeAfter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddNodeAfter()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddNodeAfter() {\n        resetEmpty();\n        final AbstractLinkedList<E> list = getCollection();\n        if (!isAddSupported()) {\n            try {\n                list.addFirst(null);\n            } catch (final UnsupportedOperationException ex) {\n            }\n        }\n\n        list.addFirst((E) \"value1\");\n        list.addNodeAfter(list.getNode(0, false), (E) \"value2\");\n        assertEquals(\"value1\", list.getFirst());\n        assertEquals(\"value2\", list.getLast());\n        list.removeFirst();\n        checkNodes();\n        list.addNodeAfter(list.getNode(0, false), (E) \"value3\");\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value3\", list.getLast());\n        list.addNodeAfter(list.getNode(0, false), (E) \"value4\");\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value3\", list.getLast());\n        assertEquals(\"value4\", list.get(1));\n        list.addNodeAfter(list.getNode(2, false), (E) \"value5\");\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value4\", list.get(1));\n        assertEquals(\"value3\", list.get(2));\n        assertEquals(\"value5\", list.getLast());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testGetNode()", "name": "testGetNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetNode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetNode() {\n        resetEmpty();\n        final AbstractLinkedList<E> list = getCollection();\n        // get marker\n        assertEquals(list.getNode(0, true).previous, list.getNode(0, true).next);\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(0, false), \"Expecting IndexOutOfBoundsException.\");\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        checkNodes();\n        list.addFirst((E) \"value0\");\n        checkNodes();\n        list.removeNode(list.getNode(1, false));\n        checkNodes();\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(2, false), \"Expecting IndexOutOfBoundsException.\");\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(-1, false), \"Expecting IndexOutOfBoundsException.\");\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(3, true), \"Expecting IndexOutOfBoundsException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testRemoveFirst()", "name": "testRemoveFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFirst()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFirst() {\n        resetEmpty();\n        final AbstractLinkedList<E> list = getCollection();\n        if (!isRemoveSupported()) {\n            try {\n                list.removeFirst();\n            } catch (final UnsupportedOperationException ex) {\n            }\n        }\n\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        assertEquals(\"value1\", list.removeFirst());\n        checkNodes();\n        list.addLast((E) \"value3\");\n        checkNodes();\n        assertEquals(\"value2\", list.removeFirst());\n        assertEquals(\"value3\", list.removeFirst());\n        checkNodes();\n        list.addLast((E) \"value4\");\n        checkNodes();\n        assertEquals(\"value4\", list.removeFirst());\n        checkNodes();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testRemoveLast()", "name": "testRemoveLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLast()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLast() {\n        resetEmpty();\n        final AbstractLinkedList<E> list = getCollection();\n        if (!isRemoveSupported()) {\n            try {\n                list.removeLast();\n            } catch (final UnsupportedOperationException ex) {\n            }\n        }\n\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        assertEquals(\"value2\", list.removeLast());\n        list.addFirst((E) \"value3\");\n        checkNodes();\n        assertEquals(\"value1\", list.removeLast());\n        assertEquals(\"value3\", list.removeLast());\n        list.addFirst((E) \"value4\");\n        checkNodes();\n        assertEquals(\"value4\", list.removeFirst());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest.[void]testRemoveNode()", "name": "testRemoveNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveNode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveNode() {\n        resetEmpty();\n        if (!isAddSupported() || !isRemoveSupported()) {\n            return;\n        }\n        final AbstractLinkedList<E> list = getCollection();\n\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        list.removeNode(list.getNode(0, false));\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value2\", list.getLast());\n        list.addFirst((E) \"value1\");\n        list.addFirst((E) \"value0\");\n        checkNodes();\n        list.removeNode(list.getNode(1, false));\n        assertEquals(\"value0\", list.getFirst());\n        assertEquals(\"value2\", list.getLast());\n        checkNodes();\n        list.removeNode(list.getNode(1, false));\n        assertEquals(\"value0\", list.getFirst());\n        assertEquals(\"value0\", list.getLast());\n        checkNodes();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java", "class_name": "AbstractLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractLinkedListTest.java.AbstractLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java.NodeCachingLinkedListTest.[void]testShrinkCache()", "name": "testShrinkCache", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testShrinkCache()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testShrinkCache() {\n        if (!isRemoveSupported() || !isAddSupported()) {\n            return;\n        }\n        resetEmpty();\n        final NodeCachingLinkedList<E> list = getCollection();\n\n        list.addAll(Arrays.asList((E[]) new String[] { \"1\", \"2\", \"3\", \"4\" }));\n        list.removeAllNodes(); // Will dump all 4 elements into cache\n        list.setMaximumCacheSize(2); // shrink cache\n        list.addAll(Arrays.asList((E[]) new String[] { \"1\", \"2\", \"3\", \"4\" }));\n        checkNodes();\n        list.removeNode(list.getNode(0, false)); // no room in cache\n        list.removeNode(list.getNode(0, false));\n        list.removeNode(list.getNode(0, false));\n        checkNodes();\n        list.addAll(Arrays.asList((E[]) new String[] { \"1\", \"2\", \"3\", \"4\" }));\n        checkNodes();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java", "class_name": "NodeCachingLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/NodeCachingLinkedListTest.java.NodeCachingLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java.Collections701Test.[void]testArrayList()", "name": "testArrayList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testArrayList()", "original_string": "    @Test\n    public void testArrayList() {\n        final List<Object> list = new ArrayList<>();\n        list.add(list);\n        assertEquals(1, list.size());\n        assertEquals(list, list.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java", "class_name": "Collections701Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java.Collections701Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java.Collections701Test.[void]testHashSet()", "name": "testHashSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashSet()", "original_string": "    @Test\n    public void testHashSet() {\n        final Set<Object> set = new HashSet<>();\n        set.add(set);\n        assertEquals(1, set.size());\n        assertEquals(set, set.iterator().next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java", "class_name": "Collections701Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java.Collections701Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java.Collections701Test.[void]testSetUniqueList()", "name": "testSetUniqueList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetUniqueList()", "original_string": "    @Test\n    public void testSetUniqueList() {\n        final List<Object> source = new ArrayList<>();\n        final List<Object> list = SetUniqueList.setUniqueList(source);\n        list.add(list);\n        assertEquals(1, list.size());\n        assertEquals(list, list.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java", "class_name": "Collections701Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/Collections701Test.java.Collections701Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAdd() {\n        assertEquals(\"[]\", list.toString());\n        assertTrue(list.add((E) Integer.valueOf(1)));\n        assertEquals(\"[1]\", list.toString());\n        assertTrue(list.add((E) Integer.valueOf(2)));\n        assertEquals(\"[1, 2]\", list.toString());\n        assertTrue(list.add((E) Integer.valueOf(3)));\n        assertEquals(\"[1, 2, 3]\", list.toString());\n        assertTrue(list.addFirst((E) Integer.valueOf(0)));\n        assertEquals(\"[0, 1, 2, 3]\", list.toString());\n        assertTrue(list.addLast((E) Integer.valueOf(4)));\n        assertEquals(\"[0, 1, 2, 3, 4]\", list.toString());\n        list.add(0, (E) Integer.valueOf(-2));\n        assertEquals(\"[-2, 0, 1, 2, 3, 4]\", list.toString());\n        list.add(1, (E) Integer.valueOf(-1));\n        assertEquals(\"[-2, -1, 0, 1, 2, 3, 4]\", list.toString());\n        list.add(7, (E) Integer.valueOf(5));\n        assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5]\", list.toString());\n\n        final List<E> list2 = new LinkedList<>();\n        list2.add((E) \"A\");\n        list2.add((E) \"B\");\n        list2.add((E) \"C\");\n\n        assertTrue(list.addAll(list2));\n        assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5, A, B, C]\", list.toString());\n        assertTrue(list.addAll(3, list2));\n        assertEquals(\"[-2, -1, 0, A, B, C, 1, 2, 3, 4, 5, A, B, C]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClear()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testClear() {\n        assertEquals(0, list.size());\n        assertTrue(list.isEmpty());\n        list.clear();\n        assertEquals(0, list.size());\n        assertTrue(list.isEmpty());\n\n        list.add((E) \"element\");\n        assertEquals(1, list.size());\n        assertFalse(list.isEmpty());\n\n        list.clear();\n        assertEquals(0, list.size());\n        assertTrue(list.isEmpty());\n\n        list.add((E) \"element1\");\n        list.add((E) \"element2\");\n        assertEquals(2, list.size());\n        assertFalse(list.isEmpty());\n\n        list.clear();\n        assertEquals(0, list.size());\n        assertTrue(list.isEmpty());\n\n        for (int i = 0; i < 1000; i++) {\n            list.add((E) Integer.valueOf(i));\n        }\n        assertEquals(1000, list.size());\n        assertFalse(list.isEmpty());\n\n        list.clear();\n        assertEquals(0, list.size());\n        assertTrue(list.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContains()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContains() {\n        assertFalse(list.contains(\"A\"));\n        assertTrue(list.add((E) \"A\"));\n        assertTrue(list.contains(\"A\"));\n        assertTrue(list.add((E) \"B\"));\n        assertTrue(list.contains(\"A\"));\n        assertTrue(list.addFirst((E) \"a\"));\n        assertTrue(list.contains(\"A\"));\n        assertTrue(list.remove(\"a\"));\n        assertTrue(list.contains(\"A\"));\n        assertTrue(list.remove(\"A\"));\n        assertFalse(list.contains(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testContainsAll()", "name": "testContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsAll() {\n        assertTrue(list.containsAll(list));\n        final java.util.List<E> list2 = new java.util.LinkedList<>();\n        assertTrue(list.containsAll(list2));\n        list2.add((E) \"A\");\n        assertFalse(list.containsAll(list2));\n        list.add((E) \"B\");\n        list.add((E) \"A\");\n        assertTrue(list.containsAll(list2));\n        list2.add((E) \"B\");\n        assertTrue(list.containsAll(list2));\n        list2.add((E) \"C\");\n        assertFalse(list.containsAll(list2));\n        list.add((E) \"C\");\n        assertTrue(list.containsAll(list2));\n        list2.add((E) \"C\");\n        assertTrue(list.containsAll(list2));\n        assertTrue(list.containsAll(list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorAdd()", "name": "testCursorAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorAdd() {\n        final CursorableLinkedList.Cursor<E> it = list.cursor();\n        it.add((E) \"1\");\n        assertEquals(\"[1]\", list.toString());\n        it.add((E) \"3\");\n        assertEquals(\"[1, 3]\", list.toString());\n        it.add((E) \"5\");\n        assertEquals(\"[1, 3, 5]\", list.toString());\n        assertEquals(\"5\", it.previous());\n        it.add((E) \"4\");\n        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n        assertEquals(\"4\", it.previous());\n        assertEquals(\"3\", it.previous());\n        it.add((E) \"2\");\n        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n        it.close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorConcurrentModification()", "name": "testCursorConcurrentModification", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorConcurrentModification()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorConcurrentModification() {\n        // this test verifies that cursors remain valid when the list\n        // is modified via other means.\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"5\");\n        list.add((E) \"7\");\n        list.add((E) \"9\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        final CursorableLinkedList.Cursor<E> c2 = list.cursor();\n        final Iterator<E> li = list.iterator();\n\n        // test cursors remain valid when list modified by std Iterator\n        // test cursors skip elements removed via ListIterator\n        assertEquals(\"1\", li.next());\n        assertEquals(\"2\", li.next());\n        li.remove();\n        assertEquals(\"3\", li.next());\n        assertEquals(\"1\", c1.next());\n        assertEquals(\"3\", c1.next());\n        assertEquals(\"1\", c2.next());\n\n        // test cursor c1 can remove elements from previously modified list\n        // test cursor c2 skips elements removed via different cursor\n        c1.remove();\n        assertEquals(\"5\", c2.next());\n        c2.add((E) \"6\");\n        assertEquals(\"5\", c1.next());\n        assertEquals(\"6\", c1.next());\n        assertEquals(\"7\", c1.next());\n\n        // test cursors remain valid when list mod via CursorableLinkedList\n        // test cursor remains valid when elements inserted into list before\n        // the current position of the cursor.\n        list.add(0, (E) \"0\");\n\n        // test cursor remains valid when element inserted immediately after\n        // current element of a cursor, and the element is seen on the\n        // next call to the next method of that cursor.\n        list.add(5, (E) \"8\");\n\n        assertEquals(\"8\", c1.next());\n        assertEquals(\"9\", c1.next());\n        c1.add((E) \"10\");\n        assertEquals(\"7\", c2.next());\n        assertEquals(\"8\", c2.next());\n        assertEquals(\"9\", c2.next());\n        assertEquals(\"10\", c2.next());\n\n        assertThrows(NoSuchElementException.class, () -> c2.next());\n\n        assertThrows(ConcurrentModificationException.class, () -> li.next());\n\n        c1.close(); // not necessary\n        c2.close(); // not necessary\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorNavigation()", "name": "testCursorNavigation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNavigation()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNavigation() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        final CursorableLinkedList.Cursor<E> it = list.cursor();\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertEquals(\"1\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"1\", it.previous());\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertEquals(\"1\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"2\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"2\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"2\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"3\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"4\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"5\", it.next());\n        assertFalse(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"5\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"4\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"3\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"2\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"1\", it.previous());\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        it.close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorNextIndexAddAfter()", "name": "testCursorNextIndexAddAfter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexAddAfter()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexAddAfter() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"5\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n\n        assertEquals(0, c1.nextIndex());\n        list.add(1, (E) \"0\");\n        assertEquals(0, c1.nextIndex());\n        assertEquals(\"1\", c1.next());\n        assertEquals(1, c1.nextIndex());\n        assertEquals(\"0\", c1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorNextIndexAddBefore()", "name": "testCursorNextIndexAddBefore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexAddBefore()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexAddBefore() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"5\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n\n        assertEquals(0, c1.nextIndex());\n        assertEquals(\"1\", c1.next());\n        list.add(0, (E) \"0\");\n        assertEquals(2, c1.nextIndex());\n        assertEquals(\"2\", c1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorNextIndexAddNext()", "name": "testCursorNextIndexAddNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexAddNext()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexAddNext() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"5\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n\n        assertEquals(0, c1.nextIndex());\n        list.add(0, (E) \"0\");\n        assertEquals(0, c1.nextIndex());\n        assertEquals(\"0\", c1.next());\n        assertEquals(1, c1.nextIndex());\n        assertEquals(\"1\", c1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorNextIndexFirst()", "name": "testCursorNextIndexFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexFirst()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexFirst() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"5\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n\n        assertEquals(0, c1.nextIndex());\n        list.remove(0);\n        assertEquals(0, c1.nextIndex());\n        assertEquals(\"2\", c1.next());\n        assertEquals(1, c1.nextIndex());\n        assertEquals(\"3\", c1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorNextIndexMid()", "name": "testCursorNextIndexMid", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexMid()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorNextIndexMid() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"5\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        final Iterator<E> li = list.iterator();\n\n        // test cursors remain valid when list modified by std Iterator\n        // test cursors skip elements removed via ListIterator\n        assertEquals(\"1\", li.next());\n        assertEquals(\"2\", li.next());\n        li.remove();\n        assertEquals(0, c1.nextIndex());\n        assertEquals(\"1\", c1.next());\n        assertEquals(1, c1.nextIndex());\n        assertEquals(\"3\", c1.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorRemove()", "name": "testCursorRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorRemove() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n\n        final CursorableLinkedList.Cursor<E> it = list.cursor();\n\n        assertThrows(IllegalStateException.class, () -> it.remove());\n\n        assertEquals(\"1\", it.next());\n        assertEquals(\"2\", it.next());\n        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n        it.remove();\n        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n        assertEquals(\"3\", it.next());\n        assertEquals(\"3\", it.previous());\n        assertEquals(\"1\", it.previous());\n        it.remove();\n        assertEquals(\"[3, 4, 5]\", list.toString());\n        assertFalse(it.hasPrevious());\n        assertEquals(\"3\", it.next());\n        it.remove();\n        assertEquals(\"[4, 5]\", list.toString());\n        try {\n            it.remove();\n        } catch (final IllegalStateException e) {\n            // expected\n        }\n        assertEquals(\"4\", it.next());\n        assertEquals(\"5\", it.next());\n        it.remove();\n        assertEquals(\"[4]\", list.toString());\n        assertEquals(\"4\", it.previous());\n        it.remove();\n        assertEquals(\"[]\", list.toString());\n        it.close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testCursorSet()", "name": "testCursorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCursorSet() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n\n        final CursorableLinkedList.Cursor<E> it = list.cursor();\n        assertEquals(\"1\", it.next());\n        it.set((E) \"a\");\n        assertEquals(\"a\", it.previous());\n        it.set((E) \"A\");\n        assertEquals(\"A\", it.next());\n        assertEquals(\"2\", it.next());\n        it.set((E) \"B\");\n        assertEquals(\"3\", it.next());\n        assertEquals(\"4\", it.next());\n        it.set((E) \"D\");\n        assertEquals(\"5\", it.next());\n        it.set((E) \"E\");\n        assertEquals(\"[A, B, 3, D, E]\", list.toString());\n        it.close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testEqualsAndHashCode()", "name": "testEqualsAndHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEqualsAndHashCode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEqualsAndHashCode() {\n        assertEquals(list, list);\n        assertEquals(list.hashCode(), list.hashCode());\n        list.add((E) \"A\");\n        assertEquals(list, list);\n        assertEquals(list.hashCode(), list.hashCode());\n\n        final CursorableLinkedList<E> list2 = new CursorableLinkedList<>();\n        assertFalse(list.equals(list2));\n        assertFalse(list2.equals(list));\n\n        final java.util.List<E> list3 = new java.util.LinkedList<>();\n        assertFalse(list.equals(list3));\n        assertFalse(list3.equals(list));\n        assertEquals(list2, list3);\n        assertEquals(list3, list2);\n        assertEquals(list2.hashCode(), list3.hashCode());\n\n        list2.add((E) \"A\");\n        assertEquals(list, list2);\n        assertEquals(list2, list);\n        assertFalse(list2.equals(list3));\n        assertFalse(list3.equals(list2));\n\n        list3.add((E) \"A\");\n        assertEquals(list2, list3);\n        assertEquals(list3, list2);\n        assertEquals(list2.hashCode(), list3.hashCode());\n\n        list.add((E) \"B\");\n        assertEquals(list, list);\n        assertFalse(list.equals(list2));\n        assertFalse(list2.equals(list));\n        assertFalse(list.equals(list3));\n        assertFalse(list3.equals(list));\n\n        list2.add((E) \"B\");\n        list3.add((E) \"B\");\n        assertEquals(list, list);\n        assertEquals(list, list2);\n        assertEquals(list2, list);\n        assertEquals(list2, list3);\n        assertEquals(list3, list2);\n        assertEquals(list2.hashCode(), list3.hashCode());\n\n        list.add((E) \"C\");\n        list2.add((E) \"C\");\n        list3.add((E) \"C\");\n        assertEquals(list, list);\n        assertEquals(list, list2);\n        assertEquals(list2, list);\n        assertEquals(list2, list3);\n        assertEquals(list3, list2);\n        assertEquals(list.hashCode(), list2.hashCode());\n        assertEquals(list2.hashCode(), list3.hashCode());\n\n        list.add((E) \"D\");\n        list2.addFirst((E) \"D\");\n        assertEquals(list, list);\n        assertFalse(list.equals(list2));\n        assertFalse(list2.equals(list));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGet() {\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(0),\n                \"shouldn't get here\");\n\n        assertTrue(list.add((E) \"A\"));\n        assertEquals(\"A\", list.get(0));\n        assertTrue(list.add((E) \"B\"));\n        assertEquals(\"A\", list.get(0));\n        assertEquals(\"B\", list.get(1));\n        assertAll(\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> list.get(-1),\n                        \"shouldn't get here\"),\n                () -> assertThrows(IndexOutOfBoundsException.class, () -> list.get(2),\n                        \"shouldn't get here\")\n        );\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIndexOf()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIndexOf() {\n        assertEquals(-1, list.indexOf(\"A\"));\n        assertEquals(-1, list.lastIndexOf(\"A\"));\n        list.add((E) \"A\");\n        assertEquals(0, list.indexOf(\"A\"));\n        assertEquals(0, list.lastIndexOf(\"A\"));\n        assertEquals(-1, list.indexOf(\"B\"));\n        assertEquals(-1, list.lastIndexOf(\"B\"));\n        list.add((E) \"B\");\n        assertEquals(0, list.indexOf(\"A\"));\n        assertEquals(0, list.lastIndexOf(\"A\"));\n        assertEquals(1, list.indexOf(\"B\"));\n        assertEquals(1, list.lastIndexOf(\"B\"));\n        list.addFirst((E) \"B\");\n        assertEquals(1, list.indexOf(\"A\"));\n        assertEquals(1, list.lastIndexOf(\"A\"));\n        assertEquals(0, list.indexOf(\"B\"));\n        assertEquals(2, list.lastIndexOf(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextAddIndex1ByList()", "name": "testInternalState_CursorNextAddIndex1ByList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextAddIndex1ByList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextAddIndex1ByList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n\n        list.add(1, (E) \"Z\");\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertEquals(\"A\", c1.current.value);\n        assertEquals(\"Z\", c1.next.value);\n\n        assertEquals(\"[A, Z, B, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[Z, B, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextAddByIterator()", "name": "testInternalState_CursorNextNextAddByIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextAddByIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextAddByIterator() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n\n        c1.add((E) \"Z\");\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(3, c1.nextIndex);\n        assertFalse(c1.currentRemovedByAnother);\n        assertNull(c1.current);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, B, Z, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextAddIndex1ByList()", "name": "testInternalState_CursorNextNextAddIndex1ByList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextAddIndex1ByList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextAddIndex1ByList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n\n        list.add(1, (E) \"Z\");\n\n        assertFalse(c1.nextIndexValid);\n        assertEquals(\"B\", c1.current.value);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, Z, B, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[A, Z, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextNextRemoveIndex1ByList()", "name": "testInternalState_CursorNextNextNextRemoveIndex1ByList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextNextRemoveIndex1ByList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextNextRemoveIndex1ByList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n        assertEquals(\"C\", c1.next());\n\n        assertEquals(\"B\", list.remove(1));\n\n        assertFalse(c1.nextIndexValid);\n        assertFalse(c1.currentRemovedByAnother);\n        assertEquals(\"C\", c1.current.value);\n        assertEquals(\"D\", c1.next.value);\n\n        assertEquals(\"[A, C, D]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[A, D]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextPreviousAddByIterator()", "name": "testInternalState_CursorNextNextPreviousAddByIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousAddByIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousAddByIterator() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n        assertEquals(\"B\", c1.previous());\n\n        c1.add((E) \"Z\");\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(2, c1.nextIndex);\n        assertNull(c1.current);\n        assertEquals(\"B\", c1.next.value);\n\n        assertEquals(\"[A, Z, B, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextPreviousAddIndex1ByList()", "name": "testInternalState_CursorNextNextPreviousAddIndex1ByList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousAddIndex1ByList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousAddIndex1ByList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n        assertEquals(\"B\", c1.previous());\n\n        list.add(1, (E) \"Z\");\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertEquals(\"B\", c1.current.value);\n        assertEquals(\"Z\", c1.next.value);\n\n        assertEquals(\"[A, Z, B, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[A, Z, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextPreviousRemoveByIterator()", "name": "testInternalState_CursorNextNextPreviousRemoveByIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousRemoveByIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousRemoveByIterator() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n        assertEquals(\"B\", c1.previous());\n\n        c1.remove();\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertFalse(c1.currentRemovedByAnother);\n        assertNull(c1.current);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextPreviousRemoveIndex1ByList()", "name": "testInternalState_CursorNextNextPreviousRemoveIndex1ByList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n        assertEquals(\"B\", c1.previous());\n\n        assertEquals(\"B\", list.remove(1));\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertTrue(c1.currentRemovedByAnother);\n        assertNull(c1.current);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[A, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextPreviousSetByIterator()", "name": "testInternalState_CursorNextNextPreviousSetByIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousSetByIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextPreviousSetByIterator() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n        assertEquals(\"B\", c1.previous());\n\n        c1.set((E) \"Z\");\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertEquals(\"Z\", c1.current.value);\n        assertEquals(\"Z\", c1.next.value);\n\n        assertEquals(\"[A, Z, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[A, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextRemoveByIterator()", "name": "testInternalState_CursorNextNextRemoveByIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextRemoveByIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextRemoveByIterator() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n\n        c1.remove();\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertFalse(c1.currentRemovedByAnother);\n        assertNull(c1.current);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextRemoveByListSetByIterator()", "name": "testInternalState_CursorNextNextRemoveByListSetByIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextRemoveByListSetByIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextRemoveByListSetByIterator() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n\n        list.remove(1);\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertNull(c1.current);\n        assertEquals(\"C\", c1.next.value);\n        assertEquals(\"[A, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.set((E) \"Z\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextRemoveIndex1ByList()", "name": "testInternalState_CursorNextNextRemoveIndex1ByList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextRemoveIndex1ByList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextRemoveIndex1ByList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n\n        assertEquals(\"B\", list.remove(1));\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertTrue(c1.currentRemovedByAnother);\n        assertNull(c1.current);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[A, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextNextSetByIterator()", "name": "testInternalState_CursorNextNextSetByIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextSetByIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextNextSetByIterator() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n        assertEquals(\"B\", c1.next());\n\n        c1.set((E) \"Z\");\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(2, c1.nextIndex);\n        assertEquals(\"Z\", c1.current.value);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, Z, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[A, C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testInternalState_CursorNextRemoveIndex1ByList()", "name": "testInternalState_CursorNextRemoveIndex1ByList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextRemoveIndex1ByList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInternalState_CursorNextRemoveIndex1ByList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n\n        final CursorableLinkedList.Cursor<E> c1 = list.cursor();\n        assertEquals(\"A\", c1.next());\n\n        assertEquals(\"B\", list.remove(1));\n\n        assertTrue(c1.nextIndexValid);\n        assertEquals(1, c1.nextIndex);\n        assertFalse(c1.currentRemovedByAnother);\n        assertEquals(\"A\", c1.current.value);\n        assertEquals(\"C\", c1.next.value);\n\n        assertEquals(\"[A, C]\", list.toString());\n        c1.remove();  // works ok\n        assertEquals(\"[C]\", list.toString());\n\n        assertThrows(IllegalStateException.class, () -> c1.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testIsEmpty()", "name": "testIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIsEmpty()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIsEmpty() {\n        assertTrue(list.isEmpty());\n        list.add((E) \"element\");\n        assertFalse(list.isEmpty());\n        list.remove(\"element\");\n        assertTrue(list.isEmpty());\n        list.add((E) \"element\");\n        assertFalse(list.isEmpty());\n        list.clear();\n        assertTrue(list.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testIterator()", "name": "testIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIterator() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        Iterator<E> it = list.iterator();\n        assertTrue(it.hasNext());\n        assertEquals(\"1\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(\"2\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(\"3\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(\"4\", it.next());\n        assertTrue(it.hasNext());\n        assertEquals(\"5\", it.next());\n        assertFalse(it.hasNext());\n\n        it = list.iterator();\n        assertTrue(it.hasNext());\n        assertEquals(\"1\", it.next());\n        it.remove();\n        assertEquals(\"[2, 3, 4, 5]\", list.toString());\n        assertTrue(it.hasNext());\n        assertEquals(\"2\", it.next());\n        it.remove();\n        assertEquals(\"[3, 4, 5]\", list.toString());\n        assertTrue(it.hasNext());\n        assertEquals(\"3\", it.next());\n        it.remove();\n        assertEquals(\"[4, 5]\", list.toString());\n        assertTrue(it.hasNext());\n        assertEquals(\"4\", it.next());\n        it.remove();\n        assertEquals(\"[5]\", list.toString());\n        assertTrue(it.hasNext());\n        assertEquals(\"5\", it.next());\n        it.remove();\n        assertEquals(\"[]\", list.toString());\n        assertFalse(it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testListIteratorAdd()", "name": "testListIteratorAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorAdd()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorAdd() {\n        final ListIterator<E> it = list.listIterator();\n        it.add((E) \"1\");\n        assertEquals(\"[1]\", list.toString());\n        it.add((E) \"3\");\n        assertEquals(\"[1, 3]\", list.toString());\n        it.add((E) \"5\");\n        assertEquals(\"[1, 3, 5]\", list.toString());\n        assertEquals(\"5\", it.previous());\n        it.add((E) \"4\");\n        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n        assertEquals(\"4\", it.previous());\n        assertEquals(\"3\", it.previous());\n        it.add((E) \"2\");\n        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testListIteratorNavigation()", "name": "testListIteratorNavigation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorNavigation()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorNavigation() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        final ListIterator<E> it = list.listIterator();\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertEquals(-1, it.previousIndex());\n        assertEquals(0, it.nextIndex());\n        assertEquals(\"1\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(0, it.previousIndex());\n        assertEquals(1, it.nextIndex());\n        assertEquals(\"1\", it.previous());\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertEquals(-1, it.previousIndex());\n        assertEquals(0, it.nextIndex());\n        assertEquals(\"1\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(0, it.previousIndex());\n        assertEquals(1, it.nextIndex());\n        assertEquals(\"2\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(1, it.previousIndex());\n        assertEquals(2, it.nextIndex());\n        assertEquals(\"2\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(0, it.previousIndex());\n        assertEquals(1, it.nextIndex());\n        assertEquals(\"2\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(1, it.previousIndex());\n        assertEquals(2, it.nextIndex());\n        assertEquals(\"3\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(2, it.previousIndex());\n        assertEquals(3, it.nextIndex());\n        assertEquals(\"4\", it.next());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(3, it.previousIndex());\n        assertEquals(4, it.nextIndex());\n        assertEquals(\"5\", it.next());\n        assertFalse(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(4, it.previousIndex());\n        assertEquals(5, it.nextIndex());\n        assertEquals(\"5\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(3, it.previousIndex());\n        assertEquals(4, it.nextIndex());\n        assertEquals(\"4\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(2, it.previousIndex());\n        assertEquals(3, it.nextIndex());\n        assertEquals(\"3\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(1, it.previousIndex());\n        assertEquals(2, it.nextIndex());\n        assertEquals(\"2\", it.previous());\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n        assertEquals(0, it.previousIndex());\n        assertEquals(1, it.nextIndex());\n        assertEquals(\"1\", it.previous());\n        assertTrue(it.hasNext());\n        assertFalse(it.hasPrevious());\n        assertEquals(-1, it.previousIndex());\n        assertEquals(0, it.nextIndex());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testListIteratorRemove()", "name": "testListIteratorRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorRemove() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n\n        final ListIterator<E> it = list.listIterator();\n        try {\n            it.remove();\n        } catch (final IllegalStateException e) {\n            // expected\n        }\n        assertEquals(\"1\", it.next());\n        assertEquals(\"2\", it.next());\n        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n        it.remove();\n        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n        assertEquals(\"3\", it.next());\n        assertEquals(\"3\", it.previous());\n        assertEquals(\"1\", it.previous());\n        it.remove();\n        assertEquals(\"[3, 4, 5]\", list.toString());\n        assertFalse(it.hasPrevious());\n        assertEquals(\"3\", it.next());\n        it.remove();\n        assertEquals(\"[4, 5]\", list.toString());\n        try {\n            it.remove();\n        } catch (final IllegalStateException e) {\n            // expected\n        }\n        assertEquals(\"4\", it.next());\n        assertEquals(\"5\", it.next());\n        it.remove();\n        assertEquals(\"[4]\", list.toString());\n        assertEquals(\"4\", it.previous());\n        it.remove();\n        assertEquals(\"[]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testListIteratorSet()", "name": "testListIteratorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorSet()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testListIteratorSet() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n\n        final ListIterator<E> it = list.listIterator();\n        assertEquals(\"1\", it.next());\n        it.set((E) \"a\");\n        assertEquals(\"a\", it.previous());\n        it.set((E) \"A\");\n        assertEquals(\"A\", it.next());\n        assertEquals(\"2\", it.next());\n        it.set((E) \"B\");\n        assertEquals(\"3\", it.next());\n        assertEquals(\"4\", it.next());\n        it.set((E) \"D\");\n        assertEquals(\"5\", it.next());\n        it.set((E) \"E\");\n        assertEquals(\"[A, B, 3, D, E]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testLongSerialization()", "name": "testLongSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLongSerialization()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLongSerialization() throws Exception {\n        // recursive serialization will cause a stack\n        // overflow exception with long lists\n        for (int i = 0; i < 10000; i++) {\n            list.add((E) Integer.valueOf(i));\n        }\n\n        final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n        final java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n        out.writeObject(list);\n        out.flush();\n        out.close();\n\n        final java.io.ByteArrayInputStream bufin = new java.io.ByteArrayInputStream(buf.toByteArray());\n        final java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n        final Object list2 = in.readObject();\n\n        assertNotSame(list, list2);\n        assertEquals(list2, list);\n        assertEquals(list, list2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove() {\n        list.add((E) \"1\");\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        assertEquals(\"[1, 1, 2, 3, 4, 5, 2, 3, 4, 5]\", list.toString());\n        assertFalse(list.remove(\"6\"));\n        assertTrue(list.remove(\"5\"));\n        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4, 5]\", list.toString());\n        assertTrue(list.remove(\"5\"));\n        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4]\", list.toString());\n        assertFalse(list.remove(\"5\"));\n        assertTrue(list.remove(\"1\"));\n        assertEquals(\"[1, 2, 3, 4, 2, 3, 4]\", list.toString());\n        assertTrue(list.remove(\"1\"));\n        assertEquals(\"[2, 3, 4, 2, 3, 4]\", list.toString());\n        assertTrue(list.remove(\"2\"));\n        assertEquals(\"[3, 4, 2, 3, 4]\", list.toString());\n        assertTrue(list.remove(\"2\"));\n        assertEquals(\"[3, 4, 3, 4]\", list.toString());\n        assertTrue(list.remove(\"3\"));\n        assertEquals(\"[4, 3, 4]\", list.toString());\n        assertTrue(list.remove(\"3\"));\n        assertEquals(\"[4, 4]\", list.toString());\n        assertTrue(list.remove(\"4\"));\n        assertEquals(\"[4]\", list.toString());\n        assertTrue(list.remove(\"4\"));\n        assertEquals(\"[]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testRemoveAll()", "name": "testRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAll() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n\n        final HashSet<E> set = new HashSet<>();\n        set.add((E) \"A\");\n        set.add((E) \"2\");\n        set.add((E) \"C\");\n        set.add((E) \"4\");\n        set.add((E) \"D\");\n\n        assertTrue(list.removeAll(set));\n        assertEquals(\"[1, 3, 5]\", list.toString());\n        assertFalse(list.removeAll(set));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testRemoveByIndex()", "name": "testRemoveByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveByIndex()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveByIndex() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n        assertEquals(\"1\", list.remove(0));\n        assertEquals(\"[2, 3, 4, 5]\", list.toString());\n        assertEquals(\"3\", list.remove(1));\n        assertEquals(\"[2, 4, 5]\", list.toString());\n        assertEquals(\"4\", list.remove(1));\n        assertEquals(\"[2, 5]\", list.toString());\n        assertEquals(\"5\", list.remove(1));\n        assertEquals(\"[2]\", list.toString());\n        assertEquals(\"2\", list.remove(0));\n        assertEquals(\"[]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testRetainAll()", "name": "testRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll() {\n        list.add((E) \"1\");\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        list.add((E) \"5\");\n\n        final HashSet<E> set = new HashSet<>();\n        set.add((E) \"A\");\n        set.add((E) \"2\");\n        set.add((E) \"C\");\n        set.add((E) \"4\");\n        set.add((E) \"D\");\n\n        assertTrue(list.retainAll(set));\n        assertEquals(\"[2, 2, 4, 4]\", list.toString());\n        assertFalse(list.retainAll(set));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSerialization()", "name": "testSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerialization()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerialization() throws Exception {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n        final java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n        out.writeObject(list);\n        out.flush();\n        out.close();\n\n        final java.io.ByteArrayInputStream bufIn = new java.io.ByteArrayInputStream(buf.toByteArray());\n        final java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufIn);\n        final Object list2 = in.readObject();\n\n        assertNotSame(list, list2);\n        assertEquals(list2, list);\n        assertEquals(list, list2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSerializationWithOpenCursor()", "name": "testSerializationWithOpenCursor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerializationWithOpenCursor()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSerializationWithOpenCursor() throws Exception {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n        final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n        final java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n        out.writeObject(list);\n        out.flush();\n        out.close();\n\n        final java.io.ByteArrayInputStream bufin = new java.io.ByteArrayInputStream(buf.toByteArray());\n        final java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n        final Object list2 = in.readObject();\n\n        assertNotSame(list, list2);\n        assertEquals(list2, list);\n        assertEquals(list, list2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSet()", "name": "testSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSet() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n        list.set(0, (E) \"A\");\n        assertEquals(\"[A, 2, 3, 4, 5]\", list.toString());\n        list.set(1, (E) \"B\");\n        assertEquals(\"[A, B, 3, 4, 5]\", list.toString());\n        list.set(2, (E) \"C\");\n        assertEquals(\"[A, B, C, 4, 5]\", list.toString());\n        list.set(3, (E) \"D\");\n        assertEquals(\"[A, B, C, D, 5]\", list.toString());\n        list.set(4, (E) \"E\");\n        assertEquals(\"[A, B, C, D, E]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSubList()", "name": "testSubList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubList() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        assertEquals(\"[A, B, C, D, E]\", list.toString());\n        assertEquals(\"[A, B, C, D, E]\", list.subList(0, 5).toString());\n        assertEquals(\"[B, C, D, E]\", list.subList(1, 5).toString());\n        assertEquals(\"[C, D, E]\", list.subList(2, 5).toString());\n        assertEquals(\"[D, E]\", list.subList(3, 5).toString());\n        assertEquals(\"[E]\", list.subList(4, 5).toString());\n        assertEquals(\"[]\", list.subList(5, 5).toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSubListAddBegin()", "name": "testSubListAddBegin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddBegin()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddBegin() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(0, 0);\n        sublist.add((E) \"a\");\n        assertEquals(\"[a, A, B, C, D, E]\", list.toString());\n        assertEquals(\"[a]\", sublist.toString());\n        sublist.add((E) \"b\");\n        assertEquals(\"[a, b, A, B, C, D, E]\", list.toString());\n        assertEquals(\"[a, b]\", sublist.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSubListAddEnd()", "name": "testSubListAddEnd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddEnd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddEnd() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(5, 5);\n        sublist.add((E) \"F\");\n        assertEquals(\"[A, B, C, D, E, F]\", list.toString());\n        assertEquals(\"[F]\", sublist.toString());\n        sublist.add((E) \"G\");\n        assertEquals(\"[A, B, C, D, E, F, G]\", list.toString());\n        assertEquals(\"[F, G]\", sublist.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSubListAddMiddle()", "name": "testSubListAddMiddle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddMiddle()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddMiddle() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(1, 3);\n        sublist.add((E) \"a\");\n        assertEquals(\"[A, B, C, a, D, E]\", list.toString());\n        assertEquals(\"[B, C, a]\", sublist.toString());\n        sublist.add((E) \"b\");\n        assertEquals(\"[A, B, C, a, b, D, E]\", list.toString());\n        assertEquals(\"[B, C, a, b]\", sublist.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testSubListRemove()", "name": "testSubListRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListRemove() {\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(1, 4);\n        assertEquals(\"[B, C, D]\", sublist.toString());\n        assertEquals(\"[A, B, C, D, E]\", list.toString());\n        sublist.remove(\"C\");\n        assertEquals(\"[B, D]\", sublist.toString());\n        assertEquals(\"[A, B, D, E]\", list.toString());\n        sublist.remove(1);\n        assertEquals(\"[B]\", sublist.toString());\n        assertEquals(\"[A, B, E]\", list.toString());\n        sublist.clear();\n        assertEquals(\"[]\", sublist.toString());\n        assertEquals(\"[A, E]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest.[void]testToArray()", "name": "testToArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToArray()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToArray() {\n        list.add((E) \"1\");\n        list.add((E) \"2\");\n        list.add((E) \"3\");\n        list.add((E) \"4\");\n        list.add((E) \"5\");\n\n        final Object[] elts = list.toArray();\n        assertEquals(\"1\", elts[0]);\n        assertEquals(\"2\", elts[1]);\n        assertEquals(\"3\", elts[2]);\n        assertEquals(\"4\", elts[3]);\n        assertEquals(\"5\", elts[4]);\n        assertEquals(5, elts.length);\n\n        final String[] elts2 = list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n        assertEquals(\"1\", elts2[0]);\n        assertEquals(\"2\", elts2[1]);\n        assertEquals(\"3\", elts2[2]);\n        assertEquals(\"4\", elts2[3]);\n        assertEquals(\"5\", elts2[4]);\n        assertEquals(5, elts2.length);\n\n        final String[] elts3 = new String[5];\n        assertSame(elts3, list.toArray(elts3));\n        assertEquals(\"1\", elts3[0]);\n        assertEquals(\"2\", elts3[1]);\n        assertEquals(\"3\", elts3[2]);\n        assertEquals(\"4\", elts3[3]);\n        assertEquals(\"5\", elts3[4]);\n        assertEquals(5, elts3.length);\n\n        final String[] elts4 = new String[3];\n        final String[] elts4b = list.toArray(elts4);\n        assertNotSame(elts4, elts4b);\n        assertEquals(\"1\", elts4b[0]);\n        assertEquals(\"2\", elts4b[1]);\n        assertEquals(\"3\", elts4b[2]);\n        assertEquals(\"4\", elts4b[3]);\n        assertEquals(\"5\", elts4b[4]);\n        assertEquals(5, elts4b.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java", "class_name": "CursorableLinkedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java.CursorableLinkedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testAddMultiple()", "name": "testAddMultiple", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddMultiple()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddMultiple() {\n        final List<E> l = makeObject();\n        l.add((E) \"hugo\");\n        l.add((E) \"erna\");\n        l.add((E) \"daniel\");\n        l.add((E) \"andres\");\n        l.add((E) \"harald\");\n        l.add(0, null);\n        assertNull(l.get(0));\n        assertEquals(\"hugo\", l.get(1));\n        assertEquals(\"erna\", l.get(2));\n        assertEquals(\"daniel\", l.get(3));\n        assertEquals(\"andres\", l.get(4));\n        assertEquals(\"harald\", l.get(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testBug35258()", "name": "testBug35258", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBug35258()", "original_string": "    @Test\n    public void testBug35258() {\n        final Object objectToRemove = Integer.valueOf(3);\n\n        final List<Integer> treelist = new TreeList<>();\n        treelist.add(Integer.valueOf(0));\n        treelist.add(Integer.valueOf(1));\n        treelist.add(Integer.valueOf(2));\n        treelist.add(Integer.valueOf(3));\n        treelist.add(Integer.valueOf(4));\n\n        // this cause inconsistency in ListIterator()\n        treelist.remove(objectToRemove);\n\n        final ListIterator<Integer> li = treelist.listIterator();\n        assertEquals(Integer.valueOf(0), li.next());\n        assertEquals(Integer.valueOf(0), li.previous());\n        assertEquals(Integer.valueOf(0), li.next());\n        assertEquals(Integer.valueOf(1), li.next());\n        // this caused error in bug 35258\n        assertEquals(Integer.valueOf(1), li.previous());\n        assertEquals(Integer.valueOf(1), li.next());\n        assertEquals(Integer.valueOf(2), li.next());\n        assertEquals(Integer.valueOf(2), li.previous());\n        assertEquals(Integer.valueOf(2), li.next());\n        assertEquals(Integer.valueOf(4), li.next());\n        assertEquals(Integer.valueOf(4), li.previous());\n        assertEquals(Integer.valueOf(4), li.next());\n        assertFalse(li.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testBugCollections447()", "name": "testBugCollections447", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBugCollections447()", "original_string": "    @Test\n    public void testBugCollections447() {\n        final List<String> treeList = new TreeList<>();\n        treeList.add(\"A\");\n        treeList.add(\"B\");\n        treeList.add(\"C\");\n        treeList.add(\"D\");\n\n        final ListIterator<String> li = treeList.listIterator();\n        assertEquals(\"A\", li.next());\n        assertEquals(\"B\", li.next());\n\n        assertEquals(\"B\", li.previous());\n\n        li.remove(); // Deletes \"B\"\n\n        // previous() after remove() should move to\n        // the element before the one just removed\n        assertEquals(\"A\", li.previous());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testIndexOf()", "name": "testIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIndexOf()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIndexOf() {\n        final List<E> l = makeObject();\n        l.add((E) \"0\");\n        l.add((E) \"1\");\n        l.add((E) \"2\");\n        l.add((E) \"3\");\n        l.add((E) \"4\");\n        l.add((E) \"5\");\n        l.add((E) \"6\");\n        assertEquals(0, l.indexOf(\"0\"));\n        assertEquals(1, l.indexOf(\"1\"));\n        assertEquals(2, l.indexOf(\"2\"));\n        assertEquals(3, l.indexOf(\"3\"));\n        assertEquals(4, l.indexOf(\"4\"));\n        assertEquals(5, l.indexOf(\"5\"));\n        assertEquals(6, l.indexOf(\"6\"));\n\n        l.set(1, (E) \"0\");\n        assertEquals(0, l.indexOf(\"0\"));\n\n        l.set(3, (E) \"3\");\n        assertEquals(3, l.indexOf(\"3\"));\n        l.set(2, (E) \"3\");\n        assertEquals(2, l.indexOf(\"3\"));\n        l.set(1, (E) \"3\");\n        assertEquals(1, l.indexOf(\"3\"));\n        l.set(0, (E) \"3\");\n        assertEquals(0, l.indexOf(\"3\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testInsertBefore()", "name": "testInsertBefore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInsertBefore()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testInsertBefore() {\n        final List<E> l = makeObject();\n        l.add((E) \"erna\");\n        l.add(0, (E) \"hugo\");\n        assertEquals(\"hugo\", l.get(0));\n        assertEquals(\"erna\", l.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testIterationOrder()", "name": "testIterationOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testIterationOrder()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testIterationOrder() {\n        // COLLECTIONS-433:\n        // ensure that the iteration order of elements is correct\n        // when initializing the TreeList with another collection\n\n        for (int size = 1; size < 1000; size++) {\n            final List<Integer> other = new ArrayList<>(size);\n            for (int i = 0; i < size; i++) {\n                other.add(i);\n            }\n            final TreeList<Integer> l = new TreeList<>(other);\n            final ListIterator<Integer> it = l.listIterator();\n            int i = 0;\n            while (it.hasNext()) {\n                final Integer val = it.next();\n                assertEquals(i++, val.intValue());\n            }\n\n            while (it.hasPrevious()) {\n                final Integer val = it.previous();\n                assertEquals(--i, val.intValue());\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testIterationOrderAfterAddAll()", "name": "testIterationOrderAfterAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testIterationOrderAfterAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public void testIterationOrderAfterAddAll() {\n        // COLLECTIONS-433:\n        // ensure that the iteration order of elements is correct\n        // when calling addAll on the TreeList\n\n        // to simulate different cases in addAll, do different runs where\n        // the number of elements already in the list and being added by addAll differ\n\n        final int size = 1000;\n        for (int i = 0; i < 100; i++) {\n            final List<Integer> other = new ArrayList<>(size);\n            for (int j = i; j < size; j++) {\n                other.add(j);\n            }\n            final TreeList<Integer> l = new TreeList<>();\n            for (int j = 0; j < i; j++) {\n                l.add(j);\n            }\n\n            l.addAll(other);\n\n            final ListIterator<Integer> it = l.listIterator();\n            int cnt = 0;\n            while (it.hasNext()) {\n                final Integer val = it.next();\n                assertEquals(cnt++, val.intValue());\n            }\n\n            while (it.hasPrevious()) {\n                final Integer val = it.previous();\n                assertEquals(--cnt, val.intValue());\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"boxing\") // OK in test code\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// OK in test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove() {\n        final List<E> l = makeObject();\n        l.add((E) \"hugo\");\n        l.add((E) \"erna\");\n        l.add((E) \"daniel\");\n        l.add((E) \"andres\");\n        l.add((E) \"harald\");\n        l.add(0, null);\n        int i = 0;\n        assertNull(l.get(i++));\n        assertEquals(\"hugo\", l.get(i++));\n        assertEquals(\"erna\", l.get(i++));\n        assertEquals(\"daniel\", l.get(i++));\n        assertEquals(\"andres\", l.get(i++));\n        assertEquals(\"harald\", l.get(i++));\n\n        l.remove(0);\n        i = 0;\n        assertEquals(\"hugo\", l.get(i++));\n        assertEquals(\"erna\", l.get(i++));\n        assertEquals(\"daniel\", l.get(i++));\n        assertEquals(\"andres\", l.get(i++));\n        assertEquals(\"harald\", l.get(i++));\n\n        i = 0;\n        l.remove(1);\n        assertEquals(\"hugo\", l.get(i++));\n        assertEquals(\"daniel\", l.get(i++));\n        assertEquals(\"andres\", l.get(i++));\n        assertEquals(\"harald\", l.get(i++));\n\n        i = 0;\n        l.remove(2);\n        assertEquals(\"hugo\", l.get(i++));\n        assertEquals(\"daniel\", l.get(i++));\n        assertEquals(\"harald\", l.get(i++));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java", "class_name": "TreeListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TreeListTest.java.TreeListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testEmptyListCompatibility()", "name": "testEmptyListCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyListCompatibility()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyListCompatibility() throws IOException, ClassNotFoundException {\n        /*\n         * Create canonical objects with this code\n        List list = makeEmptyList();\n        if (!(list instanceof Serializable)) return;\n\n        writeExternalFormToDisk((Serializable) list, getCanonicalEmptyCollectionName(list));\n        */\n\n        // test to make sure the canonical form has been preserved\n        final List<E> list = makeObject();\n        if (list instanceof Serializable && !skipSerializedCanonicalTests()\n                && isTestSerialization()) {\n            final List<E> list2 = (List<E>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(list));\n            assertEquals(0, list2.size(), \"List is empty\");\n            assertEquals(list, list2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the List\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testEmptyListSerialization()", "name": "testEmptyListSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyListSerialization()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEmptyListSerialization() throws IOException, ClassNotFoundException {\n        final List<E> list = makeObject();\n        if (!(list instanceof Serializable && isTestSerialization())) {\n            return;\n        }\n\n        final byte[] object = writeExternalFormToBytes((Serializable) list);\n        final List<E> list2 = (List<E>) readExternalFormFromBytes(object);\n\n        assertEquals(0, list.size(), \"Both lists are empty\");\n        assertEquals(0, list2.size(), \"Both lists are empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testFullListCompatibility()", "name": "testFullListCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullListCompatibility()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullListCompatibility() throws IOException, ClassNotFoundException {\n        /*\n         * Create canonical objects with this code\n        List list = makeFullList();\n        if (!(list instanceof Serializable)) return;\n\n        writeExternalFormToDisk((Serializable) list, getCanonicalFullCollectionName(list));\n        */\n\n        // test to make sure the canonical form has been preserved\n        final List<E> list = makeFullCollection();\n        if (list instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final List<E> list2 = (List<E>) readExternalFormFromDisk(getCanonicalFullCollectionName(list));\n            if (list2.size() == 4) {\n                // old serialized tests\n                return;\n            }\n            assertEquals(list.size(), list2.size(), \"List is the right size\");\n            assertEquals(list, list2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the List\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testFullListSerialization()", "name": "testFullListSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullListSerialization()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFullListSerialization() throws IOException, ClassNotFoundException {\n        final List<E> list = makeFullCollection();\n        final int size = getFullElements().length;\n        if (!(list instanceof Serializable && isTestSerialization())) {\n            return;\n        }\n\n        final byte[] object = writeExternalFormToBytes((Serializable) list);\n        final List<E> list2 = (List<E>) readExternalFormFromBytes(object);\n\n        assertEquals(size, list.size(), \"Both lists are same size\");\n        assertEquals(size, list2.size(), \"Both lists are same size\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListAddByIndex()", "name": "testListAddByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListAddByIndex()", "original_string": "    @Test\n    public void testListAddByIndex() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final E element = getOtherElements()[0];\n        final int max = getFullElements().length;\n\n        for (int i = 0; i <= max; i++) {\n            resetFull();\n            getCollection().add(i, element);\n            getConfirmed().add(i, element);\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link List#add(int,Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListAddByIndexBoundsChecking()", "name": "testListAddByIndexBoundsChecking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListAddByIndexBoundsChecking()", "original_string": "    @Test\n    public void testListAddByIndexBoundsChecking() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final E element = getOtherElements()[0];\n\n        final List<E> finalList0 = makeObject();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList0.add(Integer.MIN_VALUE, element),\n                \"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        final List<E> finalList1 = makeObject();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList1.add(-1, element),\n                \"List.add should throw IndexOutOfBoundsException [-1]\");\n\n        final List<E> finalList2 = makeObject();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList2.add(1, element),\n                \"List.add should throw IndexOutOfBoundsException [1]\");\n\n        final List<E> finalList3 = makeObject();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList3.add(Integer.MAX_VALUE, element),\n                \"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#add(int, Object)} on an\n empty list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListAddByIndexBoundsChecking2()", "name": "testListAddByIndexBoundsChecking2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListAddByIndexBoundsChecking2()", "original_string": "    @Test\n    public void testListAddByIndexBoundsChecking2() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final E element = getOtherElements()[0];\n\n        final List<E> finalList0 = makeFullCollection();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList0.add(Integer.MIN_VALUE, element),\n                \"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        final List<E> finalList1 = makeFullCollection();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList1.add(-1, element),\n                \"List.add should throw IndexOutOfBoundsException [-1]\");\n\n        final List<E> finalList2 = makeFullCollection();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList2.add(finalList2.size() + 1, element),\n                \"List.add should throw IndexOutOfBoundsException [size + 1]\");\n\n        final List<E> finalList3 = makeFullCollection();\n        assertThrows(IndexOutOfBoundsException.class, () -> finalList3.add(Integer.MAX_VALUE, element),\n                \"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#add(int, Object)} on a\n full list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListEquals()", "name": "testListEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListEquals()", "original_string": "    @Test\n    public void testListEquals() {\n        resetEmpty();\n        List<E> list = getCollection();\n        assertTrue(list.equals(getConfirmed()), \"Empty lists should be equal\");\n        verify();\n        assertTrue(list.equals(list), \"Empty list should equal self\");\n        verify();\n\n        List<E> list2 = Arrays.asList(getFullElements());\n        assertFalse(list.equals(list2), \"Empty list shouldn't equal full\");\n        verify();\n\n        list2 = Arrays.asList(getOtherElements());\n        assertFalse(list.equals(list2), \"Empty list shouldn't equal other\");\n        verify();\n\n        resetFull();\n        list = getCollection();\n        assertTrue(list.equals(getConfirmed()), \"Full lists should be equal\");\n        verify();\n        assertTrue(list.equals(list), \"Full list should equal self\");\n        verify();\n\n        list2 = makeObject();\n        assertFalse(list.equals(list2), \"Full list shouldn't equal empty\");\n        verify();\n\n        list2 = Arrays.asList(getOtherElements());\n        assertFalse(list.equals(list2), \"Full list shouldn't equal other\");\n        verify();\n\n        list2 = Arrays.asList(getFullElements());\n        if (list2.size() < 2 && isAddSupported()) {\n            // main list is only size 1, so let's add other elements to get a better list\n            list.addAll(Arrays.asList(getOtherElements()));\n            getConfirmed().addAll(Arrays.asList(getOtherElements()));\n            list2 = new ArrayList<>(list2);\n            list2.addAll(Arrays.asList(getOtherElements()));\n        }\n        if (list2.size() > 1) {\n            Collections.reverse(list2);\n            assertFalse(list.equals(list2), \"Full list shouldn't equal full list with same elements but different order\");\n            verify();\n        }\n\n        resetFull();\n        list = getCollection();\n        assertFalse(list.isEmpty(), \"List shouldn't equal String\");\n        verify();\n\n        final List<E> listForC = Arrays.asList(getFullElements());\n        final Collection<E> c = new AbstractCollection<E>() {\n            @Override\n            public Iterator<E> iterator() {\n                return listForC.iterator();\n            }\n\n            @Override\n            public int size() {\n                return listForC.size();\n            }\n        };\n\n        assertFalse(list.equals(c), \"List shouldn't equal nonlist with same elements in same order\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link List#equals(Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListGetByIndex()", "name": "testListGetByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListGetByIndex()", "original_string": "    @Test\n    public void testListGetByIndex() {\n        resetFull();\n        final List<E> list = getCollection();\n        final E[] elements = getFullElements();\n        for (int i = 0; i < elements.length; i++) {\n            assertEquals(elements[i], list.get(i), \"List should contain correct elements\");\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link List#get(int)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListGetByIndexBoundsChecking()", "name": "testListGetByIndexBoundsChecking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListGetByIndexBoundsChecking()", "original_string": "    @Test\n    public void testListGetByIndexBoundsChecking() {\n        final List<E> list = makeObject();\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(Integer.MIN_VALUE),\n                \"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(-1),\n                \"List.get should throw IndexOutOfBoundsException [-1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(0),\n                \"List.get should throw IndexOutOfBoundsException [0]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(1),\n                \"List.get should throw IndexOutOfBoundsException [1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(Integer.MAX_VALUE),\n                \"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#get(int)} on an\n empty list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListGetByIndexBoundsChecking2()", "name": "testListGetByIndexBoundsChecking2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListGetByIndexBoundsChecking2()", "original_string": "    @Test\n    public void testListGetByIndexBoundsChecking2() {\n        final List<E> list = makeFullCollection();\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(Integer.MIN_VALUE),\n                \"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(-1),\n                \"List.get should throw IndexOutOfBoundsException [-1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(getFullElements().length),\n                \"List.get should throw IndexOutOfBoundsException [size]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.get(Integer.MAX_VALUE),\n                \"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#get(int)} on a\n full list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListHashCode()", "name": "testListHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListHashCode()", "original_string": "    @Test\n    public void testListHashCode() {\n        resetEmpty();\n        int hash1 = getCollection().hashCode();\n        int hash2 = getConfirmed().hashCode();\n        assertEquals(hash1, hash2, \"Empty lists should have equal hashCodes\");\n        verify();\n\n        resetFull();\n        hash1 = getCollection().hashCode();\n        hash2 = getConfirmed().hashCode();\n        assertEquals(hash1, hash2, \"Full lists should have equal hashCodes\");\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link List#hashCode()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListIndexOf()", "name": "testListIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListIndexOf()", "original_string": "    @Test\n    public void testListIndexOf() {\n        resetFull();\n        final List<E> list1 = getCollection();\n        final List<E> list2 = getConfirmed();\n\n        for (final E element : list2) {\n            assertEquals(list1.indexOf(element),\n                    list2.indexOf(element), \"indexOf should return correct result\");\n            verify();\n        }\n\n        final E[] other = getOtherElements();\n        for (final E element : other) {\n            assertEquals(-1, list1.indexOf(element),\n                    \"indexOf should return -1 for nonexistent element\");\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link List#indexOf}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListIteratorAdd()", "name": "testListIteratorAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListIteratorAdd()", "original_string": "    @Test\n    public void testListIteratorAdd() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        resetEmpty();\n        final List<E> list1 = getCollection();\n        final List<E> list2 = getConfirmed();\n\n        final E[] elements = getFullElements();\n        ListIterator<E> iter1 = list1.listIterator();\n        ListIterator<E> iter2 = list2.listIterator();\n\n        for (final E element : elements) {\n            iter1.add(element);\n            iter2.add(element);\n            verify();\n        }\n\n        resetFull();\n        iter1 = getCollection().listIterator();\n        iter2 = getConfirmed().listIterator();\n        for (final E element : elements) {\n            iter1.next();\n            iter2.next();\n            iter1.add(element);\n            iter2.add(element);\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests the {@link ListIterator#add(Object)} method of the list\n iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListIteratorSet()", "name": "testListIteratorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListIteratorSet()", "original_string": "    @Test\n    public void testListIteratorSet() {\n        if (!isSetSupported()) {\n            return;\n        }\n\n        final E[] elements = getFullElements();\n\n        resetFull();\n        final ListIterator<E> iter1 = getCollection().listIterator();\n        final ListIterator<E> iter2 = getConfirmed().listIterator();\n        for (final E element : elements) {\n            iter1.next();\n            iter2.next();\n            iter1.set(element);\n            iter2.set(element);\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests the {@link ListIterator#set(Object)} method of the list\n iterator.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListLastIndexOf()", "name": "testListLastIndexOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListLastIndexOf()", "original_string": "    @Test\n    public void testListLastIndexOf() {\n        resetFull();\n        final List<E> list1 = getCollection();\n        final List<E> list2 = getConfirmed();\n\n        for (final E element : list2) {\n            assertEquals(list1.lastIndexOf(element), list2.lastIndexOf(element),\n                    \"lastIndexOf should return correct result\");\n            verify();\n        }\n\n        final E[] other = getOtherElements();\n        for (final E element : other) {\n            assertEquals(-1, list1.lastIndexOf(element),\n                    \"lastIndexOf should return -1 for nonexistent \" + \"element\");\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link List#lastIndexOf}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListListIterator()", "name": "testListListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListListIterator()", "original_string": "    @Test\n    public void testListListIterator() {\n        resetFull();\n        forwardTest(getCollection().listIterator(), 0);\n        backwardTest(getCollection().listIterator(), 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests the read-only bits of {@link List#listIterator()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListListIteratorByIndex()", "name": "testListListIteratorByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListListIteratorByIndex()", "original_string": "    @Test\n    public void testListListIteratorByIndex() {\n        resetFull();\n        try {\n            getCollection().listIterator(-1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        resetFull();\n        try {\n            getCollection().listIterator(getCollection().size() + 1);\n        } catch (final IndexOutOfBoundsException ex) {\n        }\n        resetFull();\n        for (int i = 0; i <= getConfirmed().size(); i++) {\n            forwardTest(getCollection().listIterator(i), i);\n            backwardTest(getCollection().listIterator(i), i);\n        }\n        resetFull();\n        for (int i = 0; i <= getConfirmed().size(); i++) {\n            backwardTest(getCollection().listIterator(i), i);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests the read-only bits of {@link List#listIterator(int)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListListIteratorNextRemoveNext()", "name": "testListListIteratorNextRemoveNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListListIteratorNextRemoveNext()", "original_string": "    @Test\n    public void testListListIteratorNextRemoveNext() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        resetFull();\n        if (getCollection().size() < 4) {\n            return;\n        }\n        final ListIterator<E> it = getCollection().listIterator();\n        final E zero = it.next();\n        final E one = it.next();\n        final E two = it.next();\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(one, getCollection().get(1));\n        assertEquals(two, getCollection().get(2));\n        final E three = getCollection().get(3);\n\n        it.remove(); // removed element at index 2 (two)\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(one, getCollection().get(1));\n        final E three2 = it.next();  // do next after remove\n        assertEquals(three, three2);\n        assertEquals(getCollection().size() > 3, it.hasNext());\n        assertTrue(it.hasPrevious());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests remove on list iterator is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListListIteratorNextRemovePrevious()", "name": "testListListIteratorNextRemovePrevious", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListListIteratorNextRemovePrevious()", "original_string": "    @Test\n    public void testListListIteratorNextRemovePrevious() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        resetFull();\n        if (getCollection().size() < 4) {\n            return;\n        }\n        final ListIterator<E> it = getCollection().listIterator();\n        final E zero = it.next();\n        final E one = it.next();\n        final E two = it.next();\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(one, getCollection().get(1));\n        assertEquals(two, getCollection().get(2));\n\n        it.remove(); // removed element at index 2 (two)\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(one, getCollection().get(1));\n        final E one2 = it.previous();  // do previous after remove\n        assertEquals(one, one2);\n        assertTrue(it.hasNext());\n        assertTrue(it.hasPrevious());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests remove on list iterator is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListListIteratorPreviousRemoveNext()", "name": "testListListIteratorPreviousRemoveNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListListIteratorPreviousRemoveNext()", "original_string": "    @Test\n    public void testListListIteratorPreviousRemoveNext() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        resetFull();\n        if (getCollection().size() < 4) {\n            return;\n        }\n        final ListIterator<E> it = getCollection().listIterator();\n        final E zero = it.next();\n        final E one = it.next();\n        final E two = it.next();\n        final E two2 = it.previous();\n        final E one2 = it.previous();\n        assertEquals(one, one2);\n        assertEquals(two, two2);\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(one, getCollection().get(1));\n        assertEquals(two, getCollection().get(2));\n\n        it.remove(); // removed element at index 1 (one)\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(two, getCollection().get(1));\n        final E two3 = it.next();  // do next after remove\n        assertEquals(two, two3);\n        assertEquals(getCollection().size() > 2, it.hasNext());\n        assertTrue(it.hasPrevious());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests remove on list iterator is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListListIteratorPreviousRemovePrevious()", "name": "testListListIteratorPreviousRemovePrevious", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListListIteratorPreviousRemovePrevious()", "original_string": "    @Test\n    public void testListListIteratorPreviousRemovePrevious() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n        resetFull();\n        if (getCollection().size() < 4) {\n            return;\n        }\n        final ListIterator<E> it = getCollection().listIterator();\n        final E zero = it.next();\n        final E one = it.next();\n        final E two = it.next();\n        final E two2 = it.previous();\n        final E one2 = it.previous();\n        assertEquals(one, one2);\n        assertEquals(two, two2);\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(one, getCollection().get(1));\n        assertEquals(two, getCollection().get(2));\n\n        it.remove(); // removed element at index 1 (one)\n        assertEquals(zero, getCollection().get(0));\n        assertEquals(two, getCollection().get(1));\n        final E zero3 = it.previous();  // do previous after remove\n        assertEquals(zero, zero3);\n        assertFalse(it.hasPrevious());\n        assertEquals(getCollection().size() > 2, it.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests remove on list iterator is correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListRemoveByIndex()", "name": "testListRemoveByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListRemoveByIndex()", "original_string": "    @Test\n    public void testListRemoveByIndex() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final int max = getFullElements().length;\n        for (int i = 0; i < max; i++) {\n            resetFull();\n            final E o1 = getCollection().remove(i);\n            final E o2 = getConfirmed().remove(i);\n            assertEquals(o1, o2, \"remove should return correct element\");\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests {@link List#remove(int)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListRemoveByIndexBoundsChecking()", "name": "testListRemoveByIndexBoundsChecking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListRemoveByIndexBoundsChecking()", "original_string": "    @Test\n    public void testListRemoveByIndexBoundsChecking() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final List<E> list = makeObject();\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(Integer.MIN_VALUE),\n                \"List.remove should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(-1),\n                \"List.remove should throw IndexOutOfBoundsException [-1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(0),\n                \"List.remove should throw IndexOutOfBoundsException [0]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(1),\n                \"List.remove should throw IndexOutOfBoundsException [1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(Integer.MAX_VALUE),\n                \"List.remove should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#remove(int)} on an\n empty list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListRemoveByIndexBoundsChecking2()", "name": "testListRemoveByIndexBoundsChecking2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListRemoveByIndexBoundsChecking2()", "original_string": "    @Test\n    public void testListRemoveByIndexBoundsChecking2() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final List<E> list = makeFullCollection();\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(Integer.MIN_VALUE),\n                \"List.remove should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(-1),\n                \"List.remove should throw IndexOutOfBoundsException [-1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(getFullElements().length),\n                \"List.remove should throw IndexOutOfBoundsException [size]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.remove(Integer.MAX_VALUE),\n                \"List.remove should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#remove(int)} on a\n full list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListSetByIndex()", "name": "testListSetByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListSetByIndex()", "original_string": "    @Test\n    public void testListSetByIndex() {\n        if (!isSetSupported()) {\n            return;\n        }\n\n        resetFull();\n        final E[] elements = getFullElements();\n        final E[] other = getOtherElements();\n\n        for (int i = 0; i < elements.length; i++) {\n            final E n = other[i % other.length];\n            final E v = getCollection().set(i, n);\n            assertEquals(elements[i], v, \"Set should return correct element\");\n            getConfirmed().set(i, n);\n            verify();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Test {@link List#set(int,Object)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListSetByIndexBoundsChecking()", "name": "testListSetByIndexBoundsChecking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListSetByIndexBoundsChecking()", "original_string": "    @Test\n    public void testListSetByIndexBoundsChecking() {\n        if (!isSetSupported()) {\n            return;\n        }\n\n        final List<E> list = makeObject();\n        final E element = getOtherElements()[0];\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(Integer.MIN_VALUE, element),\n                \"List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(-1, element),\n                \"List.set should throw IndexOutOfBoundsException [-1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(0, element),\n                \"List.set should throw IndexOutOfBoundsException [0]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(1, element),\n                \"List.set should throw IndexOutOfBoundsException [1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(Integer.MAX_VALUE, element),\n                \"List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#set(int,Object)} on an\n empty list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListSetByIndexBoundsChecking2()", "name": "testListSetByIndexBoundsChecking2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListSetByIndexBoundsChecking2()", "original_string": "    @Test\n    public void testListSetByIndexBoundsChecking2() {\n        if (!isSetSupported()) {\n            return;\n        }\n\n        final List<E> list = makeFullCollection();\n        final E element = getOtherElements()[0];\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(Integer.MIN_VALUE, element),\n                \"List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(-1, element),\n                \"List.set should throw IndexOutOfBoundsException [-1]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(getFullElements().length, element),\n                \"List.set should throw IndexOutOfBoundsException [size]\");\n\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(Integer.MAX_VALUE, element),\n                \"List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n Tests bounds checking for {@link List#set(int,Object)} on a\n full list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListSubListFailFastOnAdd()", "name": "testListSubListFailFastOnAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListSubListFailFastOnAdd()", "original_string": "    @Test\n    public void testListSubListFailFastOnAdd() {\n        if (!isFailFastSupported()) {\n            return;\n        }\n        if (!isAddSupported()) {\n            return;\n        }\n\n        resetFull();\n        final int size = getCollection().size();\n        List<E> sub = getCollection().subList(1, size);\n        getCollection().add(getOtherElements()[0]);\n        failFastAll(sub);\n\n        resetFull();\n        sub = getCollection().subList(1, size);\n        getCollection().add(0, getOtherElements()[0]);\n        failFastAll(sub);\n\n        resetFull();\n        sub = getCollection().subList(1, size);\n        getCollection().addAll(Arrays.asList(getOtherElements()));\n        failFastAll(sub);\n\n        resetFull();\n        sub = getCollection().subList(1, size);\n        getCollection().addAll(0, Arrays.asList(getOtherElements()));\n        failFastAll(sub);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\nif elements are added to the original list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testListSubListFailFastOnRemove()", "name": "testListSubListFailFastOnRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListSubListFailFastOnRemove()", "original_string": "    @Test\n    public void testListSubListFailFastOnRemove() {\n        if (!isFailFastSupported()) {\n            return;\n        }\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        resetFull();\n        final int size = getCollection().size();\n        List<E> sub = getCollection().subList(1, size);\n        getCollection().remove(0);\n        failFastAll(sub);\n\n        resetFull();\n        sub = getCollection().subList(1, size);\n        getCollection().remove(getFullElements()[2]);\n        failFastAll(sub);\n\n        resetFull();\n        sub = getCollection().subList(1, size);\n        getCollection().removeAll(Arrays.asList(getFullElements()));\n        failFastAll(sub);\n\n        resetFull();\n        sub = getCollection().subList(1, size);\n        getCollection().retainAll(Arrays.asList(getOtherElements()));\n        failFastAll(sub);\n\n        resetFull();\n        sub = getCollection().subList(1, size);\n        getCollection().clear();\n        failFastAll(sub);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\nif elements are removed from the original list.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest.[void]testUnsupportedSet()", "name": "testUnsupportedSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnsupportedSet()", "original_string": "    @Test\n    public void testUnsupportedSet() {\n        if (isSetSupported()) {\n            return;\n        }\n\n        resetFull();\n        assertThrows(UnsupportedOperationException.class, () -> getCollection().set(0, getFullElements()[0]),\n                \"Empty collection should not support set.\");\n        // make sure things didn't change even if the expected exception was\n        // thrown.\n        verify();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java", "class_name": "AbstractListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/AbstractListTest.java.AbstractListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n If {@link #isSetSupported()} returns false, tests that set operation\n raises <Code>UnsupportedOperationException.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest.[void]testIllegalAdd()", "name": "testIllegalAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd() {\n        final List<E> list = makeTestList();\n        final Integer i = Integer.valueOf(3);\n\n        assertThrows(IllegalArgumentException.class, () -> list.add((E) i),\n                \"Integer should fail string predicate.\");\n\n        assertFalse(list.contains(i), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "class_name": "PredicatedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest.[void]testIllegalAddAll()", "name": "testIllegalAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAddAll() {\n        final List<E> list = makeTestList();\n        final List<E> elements = new ArrayList<>();\n        elements.add((E) \"one\");\n        elements.add((E) \"two\");\n        elements.add((E) Integer.valueOf(3));\n        elements.add((E) \"four\");\n\n        assertThrows(IllegalArgumentException.class, () -> list.addAll(0, elements),\n                \"Integer should fail string predicate.\");\n\n        assertFalse(list.contains(\"one\"), \"List shouldn't contain illegal element\");\n        assertFalse(list.contains(\"two\"), \"List shouldn't contain illegal element\");\n        assertFalse(list.contains(Integer.valueOf(3)), \"List shouldn't contain illegal element\");\n        assertFalse(list.contains(\"four\"), \"List shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "class_name": "PredicatedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest.[void]testIllegalSet()", "name": "testIllegalSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalSet() {\n        final List<E> list = makeTestList();\n        assertThrows(IllegalArgumentException.class, () -> list.set(0, (E) Integer.valueOf(3)),\n                \"Integer should fail string predicate.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "class_name": "PredicatedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest.[void]testLegalAddAll()", "name": "testLegalAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLegalAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLegalAddAll() {\n        final List<E> list = makeTestList();\n        list.add((E) \"zero\");\n        final List<E> elements = new ArrayList<>();\n        elements.add((E) \"one\");\n        elements.add((E) \"two\");\n        elements.add((E) \"three\");\n        list.addAll(1, elements);\n        assertTrue(list.contains(\"zero\"), \"List should contain legal element\");\n        assertTrue(list.contains(\"one\"), \"List should contain legal element\");\n        assertTrue(list.contains(\"two\"), \"List should contain legal element\");\n        assertTrue(list.contains(\"three\"), \"List should contain legal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "class_name": "PredicatedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest.[void]testSubList()", "name": "testSubList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubList()", "original_string": "    @Test\n    public void testSubList() {\n        final List<E> list = makeTestList();\n        list.add((E) \"zero\");\n        //subList without any element of list\n        List<E> subList = list.subList(0, 0);\n        assertNotNull(subList);\n        assertEquals(0, subList.size());\n\n        //subList with one element oif list\n        subList = list.subList(0, 1);\n        assertEquals(1, subList.size());\n\n        final List<E> elements = new ArrayList<>();\n        elements.add((E) \"one\");\n        elements.add((E) \"two\");\n        elements.add((E) \"three\");\n        list.addAll(1, elements);\n        //subList with all elements of list\n        subList = list.subList(0, list.size());\n        assertEquals(list.size(), subList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java", "class_name": "PredicatedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java.PredicatedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java.TransformedListTest.[void]testSubList()", "name": "testSubList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubList()", "original_string": "    @Test\n    public void testSubList() {\n        final List<E> list = makeObject();\n        List<E> subList = list.subList(0, 0);\n        assertNotNull(subList);\n        list.add((E) \"zero\");\n        //subList without any element of list\n        subList = list.subList(0, 0);\n        assertNotNull(subList);\n        assertEquals(0, subList.size());\n\n        //subList with one element oif list\n        subList = list.subList(0, 1);\n        assertEquals(1, subList.size());\n\n        final List<E> elements = new ArrayList<>();\n        elements.add((E) \"one\");\n        elements.add((E) \"two\");\n        elements.add((E) \"three\");\n        list.addAll(1, elements);\n        //subList with all elements of list\n        subList = list.subList(0, list.size());\n        assertEquals(list.size(), subList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java", "class_name": "TransformedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java.TransformedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java.TransformedListTest.[void]testTransformedList()", "name": "testTransformedList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testTransformedList() {\n        final List<E> list = TransformedList.transformingList(new ArrayList<>(), (Transformer<E, E>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, list.size());\n        final E[] els = (E[]) new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        for (int i = 0; i < els.length; i++) {\n            list.add(els[i]);\n            assertEquals(i + 1, list.size());\n            assertTrue(list.contains(Integer.valueOf((String) els[i])));\n            assertFalse(list.contains(els[i]));\n        }\n\n        assertFalse(list.remove(els[0]));\n        assertTrue(list.remove(Integer.valueOf((String) els[0])));\n\n        list.clear();\n        for (int i = 0; i < els.length; i++) {\n            list.add(0, els[i]);\n            assertEquals(i + 1, list.size());\n            assertEquals(Integer.valueOf((String) els[i]), list.get(0));\n        }\n\n        list.set(0, (E) \"22\");\n        assertEquals(Integer.valueOf(22), list.get(0));\n\n        final ListIterator<E> it = list.listIterator();\n        it.next();\n        it.set((E) \"33\");\n        assertEquals(Integer.valueOf(33), list.get(0));\n        it.add((E) \"44\");\n        assertEquals(Integer.valueOf(44), list.get(1));\n\n        final List<E> adds = new ArrayList<>();\n        adds.add((E) \"1\");\n        adds.add((E) \"2\");\n        list.clear();\n        list.addAll(adds);\n        assertEquals(Integer.valueOf(1), list.get(0));\n        assertEquals(Integer.valueOf(2), list.get(1));\n\n        adds.clear();\n        adds.add((E) \"3\");\n        list.addAll(1, adds);\n        assertEquals(Integer.valueOf(1), list.get(0));\n        assertEquals(Integer.valueOf(3), list.get(1));\n        assertEquals(Integer.valueOf(2), list.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java", "class_name": "TransformedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java.TransformedListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java.TransformedListTest.[void]testTransformedList_decorateTransform()", "name": "testTransformedList_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransformedList_decorateTransform()", "original_string": "    @Test\n    public void testTransformedList_decorateTransform() {\n        final List<Object> originalList = new ArrayList<>();\n        final Object[] els = {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n        Collections.addAll(originalList, els);\n        final List<?> list = TransformedList.transformedList(originalList, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(els.length, list.size());\n        for (final Object el : els) {\n            assertTrue(list.contains(Integer.valueOf((String) el)));\n            assertFalse(list.contains(el));\n        }\n\n        assertFalse(list.remove(els[0]));\n        assertTrue(list.remove(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java", "class_name": "TransformedListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/TransformedListTest.java.TransformedListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testAddNodeAfter()", "name": "testAddNodeAfter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddNodeAfter()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddNodeAfter() {\n        resetEmpty();\n        final AbstractLinkedListForJava21<E> list = getCollection();\n        if (!isAddSupported()) {\n            try {\n                list.addFirst(null);\n            } catch (final UnsupportedOperationException ex) {\n            }\n        }\n\n        list.addFirst((E) \"value1\");\n        list.addNodeAfter(list.getNode(0, false), (E) \"value2\");\n        assertEquals(\"value1\", list.getFirst());\n        assertEquals(\"value2\", list.getLast());\n        list.removeFirst();\n        checkNodes();\n        list.addNodeAfter(list.getNode(0, false), (E) \"value3\");\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value3\", list.getLast());\n        list.addNodeAfter(list.getNode(0, false), (E) \"value4\");\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value3\", list.getLast());\n        assertEquals(\"value4\", list.get(1));\n        list.addNodeAfter(list.getNode(2, false), (E) \"value5\");\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value4\", list.get(1));\n        assertEquals(\"value3\", list.get(2));\n        assertEquals(\"value5\", list.getLast());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testGetNode()", "name": "testGetNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetNode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetNode() {\n        resetEmpty();\n        final AbstractLinkedListForJava21<E> list = getCollection();\n        // get marker\n        assertEquals(list.getNode(0, true).previous, list.getNode(0, true).next);\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(0, false), \"Expecting IndexOutOfBoundsException.\");\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        checkNodes();\n        list.addFirst((E) \"value0\");\n        checkNodes();\n        list.removeNode(list.getNode(1, false));\n        checkNodes();\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(2, false), \"Expecting IndexOutOfBoundsException.\");\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(-1, false), \"Expecting IndexOutOfBoundsException.\");\n        assertThrows(IndexOutOfBoundsException.class, () -> list.getNode(3, true), \"Expecting IndexOutOfBoundsException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testRemoveFirst()", "name": "testRemoveFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFirst()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveFirst() {\n        resetEmpty();\n        final AbstractLinkedListForJava21<E> list = getCollection();\n        if (!isRemoveSupported()) {\n            try {\n                list.removeFirst();\n            } catch (final UnsupportedOperationException ex) {\n            }\n        }\n\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        assertEquals(\"value1\", list.removeFirst());\n        checkNodes();\n        list.addLast((E) \"value3\");\n        checkNodes();\n        assertEquals(\"value2\", list.removeFirst());\n        assertEquals(\"value3\", list.removeFirst());\n        checkNodes();\n        list.addLast((E) \"value4\");\n        checkNodes();\n        assertEquals(\"value4\", list.removeFirst());\n        checkNodes();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testRemoveLast()", "name": "testRemoveLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLast()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveLast() {\n        resetEmpty();\n        final AbstractLinkedListForJava21<E> list = getCollection();\n        if (!isRemoveSupported()) {\n            try {\n                list.removeLast();\n            } catch (final UnsupportedOperationException ex) {\n            }\n        }\n\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        assertEquals(\"value2\", list.removeLast());\n        list.addFirst((E) \"value3\");\n        checkNodes();\n        assertEquals(\"value1\", list.removeLast());\n        assertEquals(\"value3\", list.removeLast());\n        list.addFirst((E) \"value4\");\n        checkNodes();\n        assertEquals(\"value4\", list.removeFirst());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testRemoveNode()", "name": "testRemoveNode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveNode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveNode() {\n        resetEmpty();\n        if (!isAddSupported() || !isRemoveSupported()) {\n            return;\n        }\n        final AbstractLinkedListForJava21<E> list = getCollection();\n\n        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n        list.removeNode(list.getNode(0, false));\n        checkNodes();\n        assertEquals(\"value2\", list.getFirst());\n        assertEquals(\"value2\", list.getLast());\n        list.addFirst((E) \"value1\");\n        list.addFirst((E) \"value0\");\n        checkNodes();\n        list.removeNode(list.getNode(1, false));\n        assertEquals(\"value0\", list.getFirst());\n        assertEquals(\"value2\", list.getLast());\n        checkNodes();\n        list.removeNode(list.getNode(1, false));\n        assertEquals(\"value0\", list.getFirst());\n        assertEquals(\"value0\", list.getLast());\n        checkNodes();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testSubList()", "name": "testSubList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubList() {\n        final List<E> list = makeObject();\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        assertEquals(\"[A, B, C, D, E]\", list.toString());\n        assertEquals(\"[A, B, C, D, E]\", list.subList(0, 5).toString());\n        assertEquals(\"[B, C, D, E]\", list.subList(1, 5).toString());\n        assertEquals(\"[C, D, E]\", list.subList(2, 5).toString());\n        assertEquals(\"[D, E]\", list.subList(3, 5).toString());\n        assertEquals(\"[E]\", list.subList(4, 5).toString());\n        assertEquals(\"[]\", list.subList(5, 5).toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testSubListAddBegin()", "name": "testSubListAddBegin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddBegin()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddBegin() {\n        final List<E> list = makeObject();\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(0, 0);\n        sublist.add((E) \"a\");\n        assertEquals(\"[a, A, B, C, D, E]\", list.toString());\n        assertEquals(\"[a]\", sublist.toString());\n        sublist.add((E) \"b\");\n        assertEquals(\"[a, b, A, B, C, D, E]\", list.toString());\n        assertEquals(\"[a, b]\", sublist.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testSubListAddEnd()", "name": "testSubListAddEnd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddEnd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddEnd() {\n        final List<E> list = makeObject();\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(5, 5);\n        sublist.add((E) \"F\");\n        assertEquals(\"[A, B, C, D, E, F]\", list.toString());\n        assertEquals(\"[F]\", sublist.toString());\n        sublist.add((E) \"G\");\n        assertEquals(\"[A, B, C, D, E, F, G]\", list.toString());\n        assertEquals(\"[F, G]\", sublist.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testSubListAddMiddle()", "name": "testSubListAddMiddle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddMiddle()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListAddMiddle() {\n        final List<E> list = makeObject();\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(1, 3);\n        sublist.add((E) \"a\");\n        assertEquals(\"[A, B, C, a, D, E]\", list.toString());\n        assertEquals(\"[B, C, a]\", sublist.toString());\n        sublist.add((E) \"b\");\n        assertEquals(\"[A, B, C, a, b, D, E]\", list.toString());\n        assertEquals(\"[B, C, a, b]\", sublist.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test.[void]testSubListRemove()", "name": "testSubListRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSubListRemove() {\n        final List<E> list = makeObject();\n        list.add((E) \"A\");\n        list.add((E) \"B\");\n        list.add((E) \"C\");\n        list.add((E) \"D\");\n        list.add((E) \"E\");\n\n        final List<E> sublist = list.subList(1, 4);\n        assertEquals(\"[B, C, D]\", sublist.toString());\n        assertEquals(\"[A, B, C, D, E]\", list.toString());\n        sublist.remove(\"C\");\n        assertEquals(\"[B, D]\", sublist.toString());\n        assertEquals(\"[A, B, D, E]\", list.toString());\n        sublist.remove(1);\n        assertEquals(\"[B]\", sublist.toString());\n        assertEquals(\"[A, B, E]\", list.toString());\n        sublist.clear();\n        assertEquals(\"[]\", sublist.toString());\n        assertEquals(\"[A, E]\", list.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java", "class_name": "DefaultAbstractLinkedListForJava21Test", "class_uri": "src/test/java/org/apache/commons/collections4/list/DefaultAbstractLinkedListForJava21Test.java.DefaultAbstractLinkedListForJava21Test", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testGrowthAdd()", "name": "testGrowthAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGrowthAdd()", "original_string": "    @Test\n    public void testGrowthAdd() {\n        final Integer one = Integer.valueOf(1);\n        final GrowthList<Integer> grower = new GrowthList<>();\n        assertEquals(0, grower.size());\n        grower.add(1, one);\n        assertEquals(2, grower.size());\n        assertNull(grower.get(0));\n        assertEquals(one, grower.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testGrowthAddAll()", "name": "testGrowthAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGrowthAddAll()", "original_string": "    @Test\n    public void testGrowthAddAll() {\n        final Integer one = Integer.valueOf(1);\n        final Integer two = Integer.valueOf(2);\n        final Collection<Integer> coll = new ArrayList<>();\n        coll.add(one);\n        coll.add(two);\n        final GrowthList<Integer> grower = new GrowthList<>();\n        assertEquals(0, grower.size());\n        grower.addAll(1, coll);\n        assertEquals(3, grower.size());\n        assertNull(grower.get(0));\n        assertEquals(one, grower.get(1));\n        assertEquals(two, grower.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testGrowthList()", "name": "testGrowthList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGrowthList()", "original_string": "    @Test\n    public void testGrowthList() {\n        final Integer zero = Integer.valueOf(0);\n        final Integer one = Integer.valueOf(1);\n        final Integer two = Integer.valueOf(2);\n        final GrowthList<Integer> grower = new GrowthList(1);\n        assertEquals(0, grower.size());\n        grower.add(0, zero);\n        assertEquals(1, grower.size());\n        grower.add(1, one);\n        assertEquals(2, grower.size());\n        grower.add(2, two);\n        assertEquals(3, grower.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testGrowthSet1()", "name": "testGrowthSet1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGrowthSet1()", "original_string": "    @Test\n    public void testGrowthSet1() {\n        final Integer one = Integer.valueOf(1);\n        final GrowthList<Integer> grower = new GrowthList<>();\n        assertEquals(0, grower.size());\n        grower.set(1, one);\n        assertEquals(2, grower.size());\n        assertNull(grower.get(0));\n        assertEquals(one, grower.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testGrowthSet2()", "name": "testGrowthSet2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGrowthSet2()", "original_string": "    @Test\n    public void testGrowthSet2() {\n        final Integer one = Integer.valueOf(1);\n        final GrowthList<Integer> grower = new GrowthList<>();\n        assertEquals(0, grower.size());\n        grower.set(0, one);\n        assertEquals(1, grower.size());\n        assertEquals(one, grower.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testListAddByIndexBoundsChecking()", "name": "testListAddByIndexBoundsChecking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testListAddByIndexBoundsChecking()", "original_string": "    @Test\n    @Override\n    public void testListAddByIndexBoundsChecking() {\n        final E element = getOtherElements()[0];\n        final List<E> list = makeObject();\n\n        final Executable testMethod = () -> list.add(-1, element);\n        final IndexOutOfBoundsException thrown = assertThrows(IndexOutOfBoundsException.class, testMethod,\n                \"List.add should throw IndexOutOfBoundsException [-1]\");\n        assertThat(thrown.getMessage(), is(equalTo(\"Index: -1, Size: 0\")));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nOverride.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testListAddByIndexBoundsChecking2()", "name": "testListAddByIndexBoundsChecking2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testListAddByIndexBoundsChecking2()", "original_string": "    @Test\n    @Override\n    public void testListAddByIndexBoundsChecking2() {\n        final E element = getOtherElements()[0];\n        final List<E> list = makeFullCollection();\n        assertThrows(IndexOutOfBoundsException.class, () -> list.add(-1, element),\n                \"List.add should throw IndexOutOfBoundsException [-1]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nOverride.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testListSetByIndexBoundsChecking()", "name": "testListSetByIndexBoundsChecking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testListSetByIndexBoundsChecking()", "original_string": "    @Test\n    @Override\n    public void testListSetByIndexBoundsChecking() {\n        final List<E> list = makeObject();\n        final E element = getOtherElements()[0];\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(-1, element),\n                \"List.set should throw IndexOutOfBoundsException [-1]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nOverride.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest.[void]testListSetByIndexBoundsChecking2()", "name": "testListSetByIndexBoundsChecking2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testListSetByIndexBoundsChecking2()", "original_string": "    @Test\n    @Override\n    public void testListSetByIndexBoundsChecking2() {\n        final List<E> list = makeFullCollection();\n        final E element = getOtherElements()[0];\n        assertThrows(IndexOutOfBoundsException.class, () -> list.set(-1, element),\n                \"List.set should throw IndexOutOfBoundsException [-1]\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java", "class_name": "GrowthListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/GrowthListTest.java.GrowthListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nOverride.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testCanonicalEmptyCollectionExists()", "name": "testCanonicalEmptyCollectionExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testCanonicalEmptyCollectionExists()", "original_string": "    @Test\n    @Override\n    public void testCanonicalEmptyCollectionExists() {\n        // Factory and Transformer are not serializable\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testCanonicalFullCollectionExists()", "name": "testCanonicalFullCollectionExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testCanonicalFullCollectionExists()", "original_string": "    @Test\n    @Override\n    public void testCanonicalFullCollectionExists() {\n        // Factory and Transformer are not serializable\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testCreateNullGapsWithFactory()", "name": "testCreateNullGapsWithFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateNullGapsWithFactory()", "original_string": "    @Test\n    public void testCreateNullGapsWithFactory() {\n        final Factory<LocalDateTime> dateFactory = LocalDateTime::now;\n        final List<LocalDateTime> list = new LazyList<>(new ArrayList<>(), dateFactory);\n\n        final LocalDateTime fourthElement = list.get(3);\n        assertFalse(list.isEmpty());\n        assertNotNull(fourthElement);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testCreateNullGapsWithTransformer()", "name": "testCreateNullGapsWithTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateNullGapsWithTransformer()", "original_string": "    @Test\n    public void testCreateNullGapsWithTransformer() {\n        final List<Integer> hours = Arrays.asList(7, 5, 8, 2);\n        final Transformer<Integer, LocalDateTime> dateFactory = input -> LocalDateTime.now().withHour(hours.get(input));\n        final List<LocalDateTime> list = new LazyList<>(new ArrayList<>(), dateFactory);\n\n        final LocalDateTime fourthElement = list.get(3);\n        assertFalse(list.isEmpty());\n        assertNotNull(fourthElement);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testElementCreationWithFactory()", "name": "testElementCreationWithFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementCreationWithFactory()", "original_string": "    @Test\n    public void testElementCreationWithFactory() {\n        final Factory<LocalDateTime> dateFactory = LocalDateTime::now;\n        final List<LocalDateTime> list = new LazyList<>(new ArrayList<>(), dateFactory);\n\n        assertTrue(list.isEmpty());\n\n        final LocalDateTime firstElement = list.get(0);\n        assertNotNull(firstElement);\n        assertFalse(list.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testElementCreationWithTransformer()", "name": "testElementCreationWithTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testElementCreationWithTransformer()", "original_string": "    @Test\n    public void testElementCreationWithTransformer() {\n        final Factory<LocalDateTime> dateFactory = LocalDateTime::now;\n        final List<LocalDateTime> list = new LazyList<>(new ArrayList<>(), dateFactory);\n\n        assertTrue(list.isEmpty());\n\n        final LocalDateTime firstElement = list.get(0);\n        assertNotNull(firstElement);\n        assertFalse(list.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testGetWithNull()", "name": "testGetWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetWithNull()", "original_string": "    @Test\n    public void testGetWithNull() {\n        final List<Integer> hours = Arrays.asList(7, 5, 8, 2);\n        final Transformer<Integer, LocalDateTime> transformer = input -> LocalDateTime.now().withHour(hours.get(input));\n        final List<LocalDateTime> list = new LazyList<>(new ArrayList<>(), transformer);\n        LocalDateTime fourthElement = list.get(3);\n        assertFalse(list.isEmpty());\n        assertNotNull(fourthElement);\n        list.remove(3);\n        list.add(3, null);\n        fourthElement = list.get(3);\n        assertNotNull(fourthElement);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testSerializeDeserializeThenCompare()", "name": "testSerializeDeserializeThenCompare", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testSerializeDeserializeThenCompare()", "original_string": "    @Test\n    @Override\n    public void testSerializeDeserializeThenCompare() {\n        // Factory and Transformer are not serializable\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testSimpleSerialization()", "name": "testSimpleSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testSimpleSerialization()", "original_string": "    @Test\n    @Override\n    public void testSimpleSerialization() {\n        // Factory and Transformer are not serializable\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testSubListWitheFactory()", "name": "testSubListWitheFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubListWitheFactory()", "original_string": "    @Test\n    public void testSubListWitheFactory() {\n        final Factory<LocalDateTime> dateFactory = LocalDateTime::now;\n        final List<LocalDateTime> list = new LazyList<>(new ArrayList<>(), dateFactory);\n        final LocalDateTime fourthElement = list.get(3);\n        assertFalse(list.isEmpty());\n        assertNotNull(fourthElement);\n        testSubList(list);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest.[void]testSubListWithTransformer()", "name": "testSubListWithTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubListWithTransformer()", "original_string": "    @Test\n    public void testSubListWithTransformer() {\n        final List<Integer> hours = Arrays.asList(7, 5, 8, 2);\n        final Transformer<Integer, LocalDateTime> transformer = input -> LocalDateTime.now().withHour(hours.get(input));\n        final List<LocalDateTime> list = new LazyList<>(new ArrayList<>(), transformer);\n        final LocalDateTime fourthElement = list.get(3);\n        assertFalse(list.isEmpty());\n        assertNotNull(fourthElement);\n        testSubList(list);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java", "class_name": "LazyListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/LazyListTest.java.LazyListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAdd() {\n        final SetUniqueList<E> lset = new SetUniqueList<>(new ArrayList<>(), new HashSet<>());\n\n        // Duplicate element\n        final E obj = (E) Integer.valueOf(1);\n        lset.add(obj);\n        lset.add(obj);\n        assertEquals(1, lset.size(), \"Duplicate element was added.\");\n\n        // Unique element\n        lset.add((E) Integer.valueOf(2));\n        assertEquals(2, lset.size(), \"Unique element was not added.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testAddAll()", "name": "testAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddAll() {\n        final SetUniqueList<E> lset = new SetUniqueList<>(new ArrayList<>(), new HashSet<>());\n\n        lset.addAll(\n            Arrays.asList((E[]) new Integer[] { Integer.valueOf(1), Integer.valueOf(1)}));\n\n        assertEquals(1, lset.size(), \"Duplicate element was added.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testCollectionAddAll()", "name": "testCollectionAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testCollectionAddAll()", "original_string": "    @Test\n    @Override\n    public void testCollectionAddAll() {\n        // override for set behavior\n        resetEmpty();\n        E[] elements = getFullElements();\n        boolean r = getCollection().addAll(Arrays.asList(elements));\n        getConfirmed().addAll(Arrays.asList(elements));\n        verify();\n        assertTrue(r, \"Empty collection should change after addAll\");\n        for (final E element : elements) {\n            assertTrue(getCollection().contains(element),\n                    \"Collection should contain added element\");\n        }\n\n        resetFull();\n        final int size = getCollection().size();\n        elements = getOtherElements();\n        r = getCollection().addAll(Arrays.asList(elements));\n        getConfirmed().addAll(Arrays.asList(elements));\n        verify();\n        assertTrue(r, \"Full collection should change after addAll\");\n        for (int i = 0; i < elements.length; i++) {\n            assertTrue(getCollection().contains(elements[i]),\n                    \"Full collection should contain added element \" + i);\n        }\n        assertEquals(size + elements.length, getCollection().size(),\n                \"Size should increase after addAll\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testCollectionIteratorRemove()", "name": "testCollectionIteratorRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testCollectionIteratorRemove()", "original_string": "    @Test\n    @Override\n    public void testCollectionIteratorRemove() {\n        try {\n            extraVerify = false;\n            super.testCollectionIteratorRemove();\n        } finally {\n            extraVerify = true;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testCollections304()", "name": "testCollections304", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollections304()", "original_string": "    @Test\n    public void testCollections304() {\n        final List<String> list = new LinkedList<>();\n        final SetUniqueList<String> decoratedList = SetUniqueList.setUniqueList(list);\n        final String s1 = \"Apple\";\n        final String s2 = \"Lemon\";\n        final String s3 = \"Orange\";\n        final String s4 = \"Strawberry\";\n\n        decoratedList.add(s1);\n        decoratedList.add(s2);\n        decoratedList.add(s3);\n        assertEquals(3, decoratedList.size());\n\n        decoratedList.set(1, s4);\n        assertEquals(3, decoratedList.size());\n\n        decoratedList.add(1, s4);\n        assertEquals(3, decoratedList.size());\n\n        decoratedList.add(1, s2);\n        assertEquals(4, decoratedList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testCollections307()", "name": "testCollections307", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCollections307()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCollections307() {\n        List<E> list = new ArrayList<>();\n        List<E> uniqueList = SetUniqueList.setUniqueList(list);\n\n        final String hello = \"Hello\";\n        final String world = \"World\";\n        uniqueList.add((E) hello);\n        uniqueList.add((E) world);\n\n        List<E> subList = list.subList(0, 0);\n        List<E> subUniqueList = uniqueList.subList(0, 0);\n\n        assertFalse(subList.contains(world)); // passes\n        assertFalse(subUniqueList.contains(world)); // fails\n\n        List<E> worldList = new ArrayList<>();\n        worldList.add((E) world);\n        assertFalse(subList.contains(\"World\")); // passes\n        assertFalse(subUniqueList.contains(\"World\")); // fails\n\n        // repeat the test with a different class than HashSet;\n        // which means subclassing SetUniqueList below\n        list = new ArrayList<>();\n        uniqueList = new SetUniqueList307(list, new TreeSet<>());\n\n        uniqueList.add((E) hello);\n        uniqueList.add((E) world);\n\n        subList = list.subList(0, 0);\n        subUniqueList = uniqueList.subList(0, 0);\n\n        assertFalse(subList.contains(world)); // passes\n        assertFalse(subUniqueList.contains(world)); // fails\n\n        worldList = new ArrayList<>();\n        worldList.add((E) world);\n        assertFalse(subList.contains(\"World\")); // passes\n        assertFalse(subUniqueList.contains(\"World\")); // fails\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testCollections701()", "name": "testCollections701", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollections701()", "original_string": "    @Test\n    public void testCollections701() {\n        final SetUniqueList<Object> uniqueList = new SetUniqueList<>(new ArrayList<>(), new HashSet<>());\n        final Integer obj1 = Integer.valueOf(1);\n        final Integer obj2 = Integer.valueOf(2);\n        uniqueList.add(obj1);\n        uniqueList.add(obj2);\n        assertEquals(2, uniqueList.size());\n        uniqueList.add(uniqueList);\n        assertEquals(3, uniqueList.size());\n        final List<Object> list = new LinkedList<>();\n        final SetUniqueList<Object> decoratedList = SetUniqueList.setUniqueList(list);\n        final String s1 = \"Apple\";\n        final String s2 = \"Lemon\";\n        final String s3 = \"Orange\";\n        final String s4 = \"Strawberry\";\n        decoratedList.add(s1);\n        decoratedList.add(s2);\n        decoratedList.add(s3);\n        assertEquals(3, decoratedList.size());\n        decoratedList.set(1, s4);\n        assertEquals(3, decoratedList.size());\n        decoratedList.add(decoratedList);\n        assertEquals(4, decoratedList.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testCreateSetBasedOnList()", "name": "testCreateSetBasedOnList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCreateSetBasedOnList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testCreateSetBasedOnList() {\n        final List<String> list = new ArrayList<>();\n        list.add(\"One\");\n        list.add(\"Two\");\n        @SuppressWarnings(\"rawtypes\") final SetUniqueList setUniqueList = (SetUniqueList) makeObject();\n\n        // Standard case with HashSet\n        final Set<String> setBasedOnList = setUniqueList.createSetBasedOnList(new HashSet<>(), list);\n        assertEquals(list.size(), setBasedOnList.size());\n        list.forEach(item -> assertTrue(setBasedOnList.contains(item)));\n\n        // Use different Set than HashSet\n        final Set<String> setBasedOnList1 = setUniqueList.createSetBasedOnList(new TreeSet<>(), list);\n        assertEquals(list.size(), setBasedOnList1.size());\n        list.forEach(item -> assertTrue(setBasedOnList1.contains(item)));\n\n        // throws internally NoSuchMethodException --> results in HashSet\n        final Set<String> setBasedOnList2 = setUniqueList.createSetBasedOnList(UnmodifiableSet.unmodifiableSet(new HashSet<>()), list);\n        assertEquals(list.size(), setBasedOnList2.size());\n        list.forEach(item -> assertTrue(setBasedOnList2.contains(item)));\n\n        // provide null values as Parameter\n        assertThrows(NullPointerException.class, () -> setUniqueList.createSetBasedOnList(null, list));\n        assertThrows(NullPointerException.class, () -> setUniqueList.createSetBasedOnList(new HashSet<>(), null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testFactory()", "name": "testFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFactory()", "original_string": "    @Test\n    public void testFactory() {\n        final Integer[] array = { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(1) };\n        final ArrayList<Integer> list = new ArrayList<>(Arrays.asList(array));\n        final SetUniqueList<Integer> lset = SetUniqueList.setUniqueList(list);\n\n        assertEquals(2, lset.size(), \"Duplicate element was added.\");\n        assertEquals(Integer.valueOf(1), lset.get(0));\n        assertEquals(Integer.valueOf(2), lset.get(1));\n        assertEquals(Integer.valueOf(1), list.get(0));\n        assertEquals(Integer.valueOf(2), list.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testIntCollectionAddAll()", "name": "testIntCollectionAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntCollectionAddAll()", "original_string": "    @Test\n    public void testIntCollectionAddAll() {\n        // make a SetUniqueList with one element\n        final List<Integer> list = new SetUniqueList<>(new ArrayList<>(), new HashSet<>());\n        final Integer existingElement = Integer.valueOf(1);\n        list.add(existingElement);\n\n        // add two new unique elements at index 0\n        final Integer firstNewElement = Integer.valueOf(2);\n        final Integer secondNewElement = Integer.valueOf(3);\n        Collection<Integer> collection = Arrays.asList(firstNewElement, secondNewElement);\n        list.addAll(0, collection);\n        assertEquals(3, list.size(), \"Unique elements should be added.\");\n        assertEquals(firstNewElement, list.get(0), \"First new element should be at index 0\");\n        assertEquals(secondNewElement, list.get(1), \"Second new element should be at index 1\");\n        assertEquals(existingElement, list.get(2), \"Existing element should shift to index 2\");\n\n        // add a duplicate element and a unique element at index 0\n        final Integer thirdNewElement = Integer.valueOf(4);\n        collection = Arrays.asList(existingElement, thirdNewElement);\n        list.addAll(0, collection);\n        assertEquals(4, list.size(),\n                \"Duplicate element should not be added, unique element should be added.\");\n        assertEquals(thirdNewElement, list.get(0), \"Third new element should be at index 0\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testListIterator()", "name": "testListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListIterator() {\n        final SetUniqueList<E> lset = new SetUniqueList<>(new ArrayList<>(), new HashSet<>());\n\n        final E obj1 = (E) Integer.valueOf(1);\n        final E obj2 = (E) Integer.valueOf(2);\n        lset.add(obj1);\n        lset.add(obj2);\n\n        // Attempts to add a duplicate object\n        for (final ListIterator<E> it = lset.listIterator(); it.hasNext();) {\n            it.next();\n\n            if (!it.hasNext()) {\n                it.add(obj1);\n                break;\n            }\n        }\n\n        assertEquals(2, lset.size(), \"Duplicate element was added\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testListIteratorAdd()", "name": "testListIteratorAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testListIteratorAdd()", "original_string": "    @Test\n    @Override\n    public void testListIteratorAdd() {\n        // override to cope with Set behavior\n        resetEmpty();\n        final List<E> list1 = getCollection();\n        final List<E> list2 = getConfirmed();\n\n        final E[] elements = getOtherElements();  // changed here\n        ListIterator<E> iter1 = list1.listIterator();\n        ListIterator<E> iter2 = list2.listIterator();\n\n        for (final E element : elements) {\n            iter1.add(element);\n            iter2.add(element);\n            super.verify();  // changed here\n        }\n\n        resetFull();\n        iter1 = getCollection().listIterator();\n        iter2 = getConfirmed().listIterator();\n        for (final E element : elements) {\n            iter1.next();\n            iter2.next();\n            iter1.add(element);\n            iter2.add(element);\n            super.verify();  // changed here\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testListIteratorSet()", "name": "testListIteratorSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testListIteratorSet()", "original_string": "    @Test\n    @Override\n    public void testListIteratorSet() {\n        // override to block\n        resetFull();\n        final ListIterator<E> it = getCollection().listIterator();\n        it.next();\n\n        assertThrows(UnsupportedOperationException.class, () -> it.set(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testListSetByIndex()", "name": "testListSetByIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testListSetByIndex()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testListSetByIndex() {\n        // override for set behavior\n        resetFull();\n        final int size = getCollection().size();\n        getCollection().set(0, (E) Long.valueOf(1000));\n        assertEquals(size, getCollection().size());\n\n        getCollection().set(2, (E) Long.valueOf(1000));\n        assertEquals(size - 1, getCollection().size());\n        assertEquals(Long.valueOf(1000), getCollection().get(1));  // set into 2, but shifted down to 1\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testRetainAll()", "name": "testRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAll() {\n        final List<E> list = new ArrayList<>(10);\n        final SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);\n        for (int i = 0; i < 10; ++i) {\n            uniqueList.add((E) Integer.valueOf(i));\n        }\n\n        final Collection<E> retained = new ArrayList<>(5);\n        for (int i = 0; i < 5; ++i) {\n            retained.add((E) Integer.valueOf(i * 2));\n        }\n\n        assertTrue(uniqueList.retainAll(retained));\n        assertEquals(5, uniqueList.size());\n        assertTrue(uniqueList.contains(Integer.valueOf(0)));\n        assertTrue(uniqueList.contains(Integer.valueOf(2)));\n        assertTrue(uniqueList.contains(Integer.valueOf(4)));\n        assertTrue(uniqueList.contains(Integer.valueOf(6)));\n        assertTrue(uniqueList.contains(Integer.valueOf(8)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testRetainAllWithInitialList()", "name": "testRetainAllWithInitialList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAllWithInitialList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRetainAllWithInitialList() {\n        // initialized with empty list\n        final List<E> list = new ArrayList<>(10);\n        for (int i = 0; i < 5; ++i) {\n            list.add((E) Integer.valueOf(i));\n        }\n        final SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);\n        for (int i = 5; i < 10; ++i) {\n            uniqueList.add((E) Integer.valueOf(i));\n        }\n\n        final Collection<E> retained = new ArrayList<>(5);\n        for (int i = 0; i < 5; ++i) {\n            retained.add((E) Integer.valueOf(i * 2));\n        }\n\n        assertTrue(uniqueList.retainAll(retained));\n        assertEquals(5, uniqueList.size());\n        assertTrue(uniqueList.contains(Integer.valueOf(0)));\n        assertTrue(uniqueList.contains(Integer.valueOf(2)));\n        assertTrue(uniqueList.contains(Integer.valueOf(4)));\n        assertTrue(uniqueList.contains(Integer.valueOf(6)));\n        assertTrue(uniqueList.contains(Integer.valueOf(8)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testSet()", "name": "testSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSet() {\n        final SetUniqueList<E> lset = new SetUniqueList<>(new ArrayList<>(), new HashSet<>());\n\n        // Duplicate element\n        final E obj1 = (E) Integer.valueOf(1);\n        final E obj2 = (E) Integer.valueOf(2);\n        final E obj3 = (E) Integer.valueOf(3);\n\n        lset.add(obj1);\n        lset.add(obj2);\n        lset.set(0, obj1);\n        assertEquals(2, lset.size());\n        assertSame(obj1, lset.get(0));\n        assertSame(obj2, lset.get(1));\n\n        lset.clear();\n        lset.add(obj1);\n        lset.add(obj2);\n        lset.set(0, obj2);\n        assertEquals(1, lset.size());\n        assertSame(obj2, lset.get(0));\n\n        lset.clear();\n        lset.add(obj1);\n        lset.add(obj2);\n        lset.set(0, obj3);\n        assertEquals(2, lset.size());\n        assertSame(obj3, lset.get(0));\n        assertSame(obj2, lset.get(1));\n\n        lset.clear();\n        lset.add(obj1);\n        lset.add(obj2);\n        lset.set(1, obj1);\n        assertEquals(1, lset.size());\n        assertSame(obj1, lset.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testSetCollections444()", "name": "testSetCollections444", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetCollections444()", "original_string": "    @Test\n    public void testSetCollections444() {\n        final SetUniqueList<Integer> lset = new SetUniqueList<>(new ArrayList<>(), new HashSet<>());\n\n        // Duplicate element\n        final Integer obj1 = Integer.valueOf(1);\n        final Integer obj2 = Integer.valueOf(2);\n\n        lset.add(obj1);\n        lset.add(obj2);\n        lset.set(0, obj1);\n        assertEquals(2, lset.size());\n        assertSame(obj1, lset.get(0));\n        assertSame(obj2, lset.get(1));\n\n        assertTrue(lset.contains(obj1));\n        assertTrue(lset.contains(obj2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testSetDownwardsInList()", "name": "testSetDownwardsInList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetDownwardsInList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetDownwardsInList() {\n        /*\n         * Checks the following semantics\n         * [a,b]\n         * set(0,b): [b]->a\n         * So UniqList contains [b] and a is returned\n         */\n        final ArrayList<E> l = new ArrayList<>();\n        final HashSet<E> s = new HashSet<>();\n        final SetUniqueList<E> ul = new SetUniqueList<>(l, s);\n\n        final E a = (E) new Object();\n        final E b = (E) new Object();\n        ul.add(a);\n        ul.add(b);\n        assertEquals(a, l.get(0));\n        assertEquals(b, l.get(1));\n        assertTrue(s.contains(a));\n        assertTrue(s.contains(b));\n\n        assertEquals(a, ul.set(0, b));\n        assertEquals(1, s.size());\n        assertEquals(1, l.size());\n        assertEquals(b, l.get(0));\n        assertTrue(s.contains(b));\n        assertFalse(s.contains(a));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testSetInBiggerList()", "name": "testSetInBiggerList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetInBiggerList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetInBiggerList() {\n        /*\n         * Checks the following semantics\n         * [a,b,c]\n         * set(0,b): [b,c]->a\n         * So UniqList contains [b,c] and a is returned\n         */\n        final ArrayList<E> l = new ArrayList<>();\n        final HashSet<E> s = new HashSet<>();\n        final SetUniqueList<E> ul = new SetUniqueList<>(l, s);\n\n        final E a = (E) new Object();\n        final E b = (E) new Object();\n        final E c = (E) new Object();\n\n        ul.add(a);\n        ul.add(b);\n        ul.add(c);\n        assertEquals(a, l.get(0));\n        assertEquals(b, l.get(1));\n        assertEquals(c, l.get(2));\n        assertTrue(s.contains(a));\n        assertTrue(s.contains(b));\n        assertTrue(s.contains(c));\n\n        assertEquals(a, ul.set(0, b));\n        assertEquals(2, s.size());\n        assertEquals(2, l.size());\n        assertEquals(b, l.get(0));\n        assertEquals(c, l.get(1));\n        assertFalse(s.contains(a));\n        assertTrue(s.contains(b));\n        assertTrue(s.contains(c));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testSetUpwardsInList()", "name": "testSetUpwardsInList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetUpwardsInList()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetUpwardsInList() {\n        /*\n         * Checks the following semantics\n         * [a,b,c]\n         * set(1,a): [a,c]->b\n         * So UniqList contains [a,c] and b is returned\n         */\n        final ArrayList<E> l = new ArrayList<>();\n        final HashSet<E> s = new HashSet<>();\n        final SetUniqueList<E> ul = new SetUniqueList<>(l, s);\n\n        final E a = (E) \"A\";\n        final E b = (E) \"B\";\n        final E c = (E) \"C\";\n\n        ul.add(a);\n        ul.add(b);\n        ul.add(c);\n        assertEquals(a, l.get(0));\n        assertEquals(b, l.get(1));\n        assertEquals(c, l.get(2));\n        assertTrue(s.contains(a));\n        assertTrue(s.contains(b));\n        assertTrue(s.contains(c));\n\n        assertEquals(b, ul.set(1, a));\n        assertEquals(2, s.size());\n        assertEquals(2, l.size());\n        assertEquals(a, l.get(0));\n        assertEquals(c, l.get(1));\n        assertTrue(s.contains(a));\n        assertFalse(s.contains(b));\n        assertTrue(s.contains(c));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testSubListIsUnmodifiable()", "name": "testSubListIsUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubListIsUnmodifiable()", "original_string": "    @Test\n    public void testSubListIsUnmodifiable() {\n        resetFull();\n        final List<E> subList = getCollection().subList(1, 3);\n        assertEquals(2, subList.size());\n        assertThrows(UnsupportedOperationException.class, () -> subList.remove(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testUniqueListDoubleInsert()", "name": "testUniqueListDoubleInsert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUniqueListDoubleInsert()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUniqueListDoubleInsert() {\n        final List<E> l = SetUniqueList.setUniqueList(new LinkedList<>());\n        l.add((E) new Object());\n        l.add((E) new Object());\n\n        // duplicate is removed\n        l.set(0, l.get(1));\n        assertEquals(1, l.size());\n\n        // duplicate should be removed again\n        l.add(1, l.get(0));\n        assertEquals(1, l.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest.[void]testUniqueListReInsert()", "name": "testUniqueListReInsert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUniqueListReInsert()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUniqueListReInsert() {\n        final List<E> l = SetUniqueList.setUniqueList(new LinkedList<>());\n        l.add((E) new Object());\n        l.add((E) new Object());\n\n        final E a = l.get(0);\n\n        // duplicate is removed\n        l.set(0, l.get(1));\n        assertEquals(1, l.size());\n\n        // old object is added back in\n        l.add(1, a);\n        assertEquals(2, l.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java", "class_name": "SetUniqueListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java.SetUniqueListTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java.UnmodifiableListTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final List<E> list = makeObject();\n        assertSame(list, UnmodifiableList.unmodifiableList(list));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableList.unmodifiableList(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java", "class_name": "UnmodifiableListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java.UnmodifiableListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java.UnmodifiableListTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        setupList();\n        verifyUnmodifiable(list);\n        verifyUnmodifiable(list.subList(0, 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java", "class_name": "UnmodifiableListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java.UnmodifiableListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that base list and sublists are not modifiable\n"}, {"uris": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java.UnmodifiableListTest.[void]testUnmodifiableIterator()", "name": "testUnmodifiableIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiableIterator()", "original_string": "    @Test\n    public void testUnmodifiableIterator() {\n        setupList();\n        final Iterator<E> iterator = list.iterator();\n        iterator.next();\n\n        assertThrows(UnsupportedOperationException.class, () -> iterator.remove(),\n                \"Expecting UnsupportedOperationException.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java", "class_name": "UnmodifiableListTest", "class_uri": "src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java.UnmodifiableListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerify that iterator is not modifiable\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testContains()", "original_string": "    @Test\n    public final void testContains() {\n        final long[] bitMaps = new long[1];\n\n        for (int i = 0; i < 64; i++) {\n            bitMaps[0] = 0L;\n            BitMaps.set(bitMaps, i);\n            for (int j = 0; j < 64; j++) {\n                if (j == i) {\n                    assertTrue(BitMaps.contains(bitMaps, j), String.format(\"Failed at index: %d for %d\", i, j));\n                } else {\n                    assertFalse(BitMaps.contains(bitMaps, j), String.format(\"Failed at index %d for %d\", i, j));\n                }\n            }\n        }\n\n        // test boundary conditions\n        long[] ary = new long[1];\n\n        final long[] aryT = ary;\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> BitMaps.contains(aryT, -1));\n        assertFalse(BitMaps.contains(ary, 0));\n        ary[0] = 0x01;\n        assertTrue(BitMaps.contains(ary, 0));\n\n        assertFalse(BitMaps.contains(ary, 63));\n        ary[0] = 1L << 63;\n        assertTrue(BitMaps.contains(ary, 63));\n        assertThrows(ArrayIndexOutOfBoundsException.class, () -> BitMaps.contains(aryT, 64));\n\n        ary = new long[2];\n        assertFalse(BitMaps.contains(ary, 64));\n        ary[1] = 1;\n        assertTrue(BitMaps.contains(ary, 64));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "class_name": "BitMapsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest.[void]testGetLongBit()", "name": "testGetLongBit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testGetLongBit()", "original_string": "    @Test\n    public final void testGetLongBit() {\n        assertEquals(1, BitMaps.getLongBit(0));\n        assertEquals(0x8000000000000000L, BitMaps.getLongBit(63));\n        assertEquals(1, BitMaps.getLongBit(64));\n        assertEquals(0x8000000000000000L, BitMaps.getLongBit(127));\n        assertEquals(1, BitMaps.getLongBit(128));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "class_name": "BitMapsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest.[void]testGetLongIndex()", "name": "testGetLongIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testGetLongIndex()", "original_string": "    @Test\n    public final void testGetLongIndex() {\n        assertEquals(0, BitMaps.getLongIndex(0));\n        assertEquals(0, BitMaps.getLongIndex(63));\n        assertEquals(1, BitMaps.getLongIndex(64));\n        assertEquals(1, BitMaps.getLongIndex(127));\n        assertEquals(2, BitMaps.getLongIndex(128));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "class_name": "BitMapsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest.[void]testMod()", "name": "testMod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMod()", "original_string": "    @Test\n    public void testMod() {\n        for (final long dividend : new long[] {0, -1, -2, -3, -6378683, -23567468136887892L,\n            Long.MIN_VALUE, 345, 678686, 67868768686878924L, Long.MAX_VALUE, Long.MAX_VALUE - 1}) {\n            for (final int divisor : new int[] {1, 2, 3, 5, 13, Integer.MAX_VALUE, Integer.MAX_VALUE - 1}) {\n                assertMod(dividend, divisor);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "class_name": "BitMapsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest.[void]testModEdgeCases()", "name": "testModEdgeCases", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testModEdgeCases()", "original_string": "    @Test\n    public void testModEdgeCases() {\n        for (final long dividend : new long[] {0, -1, 1, Long.MAX_VALUE}) {\n            assertThrows(ArithmeticException.class, () -> BitMaps.mod(dividend, 0));\n        }\n        assertNotEquals(Math.floorMod(5, -1), BitMaps.mod(5, -1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "class_name": "BitMapsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest.[void]testNumberOfBitMaps()", "name": "testNumberOfBitMaps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testNumberOfBitMaps()", "original_string": "    @Test\n    public final void testNumberOfBitMaps() {\n        assertEquals(0, BitMaps.numberOfBitMaps(0), \"Number of bits 0\");\n        for (int i = 1; i < 65; i++) {\n            assertEquals(1, BitMaps.numberOfBitMaps(i), String.format(\"Number of bits %d\", i));\n        }\n        for (int i = 65; i < 129; i++) {\n            assertEquals(2, BitMaps.numberOfBitMaps(i), String.format(\"Number of bits %d\", i));\n        }\n        assertEquals(3, BitMaps.numberOfBitMaps(129), \"Number of bits 129\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "class_name": "BitMapsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest.[void]testSet()", "name": "testSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testSet()", "original_string": "    @Test\n    public final void testSet() {\n        final long[] bitMaps = new long[BitMaps.numberOfBitMaps(129)];\n        for (int i = 0; i < 129; i++) {\n            BitMaps.set(bitMaps, i);\n            assertTrue(BitMaps.contains(bitMaps, i), String.format(\"Failed at index: %d\", i));\n        }\n        assertEquals(0xFFFFFFFFFFFFFFFFL, bitMaps[0]);\n        assertEquals(0xFFFFFFFFFFFFFFFFL, bitMaps[1]);\n        assertEquals(1L, bitMaps[2]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java", "class_name": "BitMapsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapsTest.java.BitMapsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]mergeIncrementsAllCellsTest()", "name": "mergeIncrementsAllCellsTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void mergeIncrementsAllCellsTest()", "original_string": "    @Test\n    public void mergeIncrementsAllCellsTest() {\n        final CountingBloomFilter f1 = createEmptyFilter(Shape.fromKM(1, 10));\n        final CountingBloomFilter f2 = f1.copy();\n        final CountingBloomFilter f3 = f1.copy();\n        // index extractor produces 3 two times.\n        final IndexExtractor ip = p -> {\n            p.test(3);\n            p.test(3);\n            return true;\n        };\n        // The merge should increment cell 3 by 1\n        f1.merge(ip);\n        assertCell3(f1, 1);\n\n        // The add should increment cells 3 by 2\n        f2.add(CellExtractor.from(ip));\n        assertCell3(f2, 2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]removeDecrementsAllCellsTest()", "name": "removeDecrementsAllCellsTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void removeDecrementsAllCellsTest()", "original_string": "    @Test\n    public void removeDecrementsAllCellsTest() {\n        final CountingBloomFilter f1 = createEmptyFilter(Shape.fromKM(1, 10));\n        final CellExtractor cp = p -> {\n            p.test(3, 3);\n            return true;\n        };\n        f1.add(cp);\n        final CountingBloomFilter f2 = f1.copy();\n        final CountingBloomFilter f3 = f1.copy();\n        // index extractor produces 3 two times.\n        final IndexExtractor ip = p -> {\n            p.test(3);\n            p.test(3);\n            return true;\n        };\n        // The merge should decrement cell 3 by 1\n        f1.remove(ip);\n        assertCell3(f1, 2);\n\n        // The add should decrement cells 3 by 2\n        f2.subtract(CellExtractor.from(ip));\n        assertCell3(f2, 1);\n\n        // This merge will decrement by 1 as the round-trip makes the indices unique\n        f3.remove(IndexExtractor.fromIndexArray(ip.asIndexArray()));\n        assertCell3(f3, 2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdd()", "original_string": "    @Test\n    public void testAdd() {\n        final CountingBloomFilter bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        assertTrue(bf1.add(createFilter(getTestShape(), TestingHashers.FROM11)), \"Add should work\");\n        assertTrue(bf1.contains(TestingHashers.FROM1), \"Should contain\");\n        assertTrue(bf1.contains(TestingHashers.FROM11), \"Should contain\");\n        assertCounts(bf1, bigHashCounts);\n\n        // test overflow\n\n        final CountingBloomFilter bf2 = createEmptyFilter(getTestShape());\n        assertTrue(bf2.add(getMaximumValueExtractor(bf2.getMaxCell())), \"Should add to empty\");\n        assertTrue(bf2.isValid(), \"Should be valid\");\n\n        assertFalse(bf2.add(createFilter(getTestShape(), TestingHashers.FROM1)), \"Should not add\");\n        assertFalse(bf2.isValid(), \"Should not be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that merge correctly updates the counts when a CountingBloomFilter is\npassed.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testCountingBloomFilterSpecificContains()", "name": "testCountingBloomFilterSpecificContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testCountingBloomFilterSpecificContains()", "original_string": "    @Test\n    public final void testCountingBloomFilterSpecificContains() {\n        final BloomFilter bf = new SimpleBloomFilter(getTestShape());\n        bf.merge(TestingHashers.FROM1);\n        final CountingBloomFilter bf2 = TestingHashers.populateFromHashersFrom1AndFrom11( createEmptyFilter(getTestShape()));\n\n        assertTrue(bf.contains(bf), \"BF Should contain itself\");\n        assertTrue(bf2.contains(bf2), \"BF2 Should contain itself\");\n        assertFalse(bf.contains(bf2), \"BF should not contain BF2\");\n        assertTrue(bf2.contains(bf), \"BF2 should contain BF\");\n        final BitMapExtractor extractor = bf2;\n        assertTrue(bf2.contains(extractor), \"BF2 should contain BF bitMapExtractor\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testCountingSpecificConstructor()", "name": "testCountingSpecificConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testCountingSpecificConstructor()", "original_string": "    @Test\n    public final void testCountingSpecificConstructor() {\n        // verify hasher duplicates are counted.\n        // bit hasher has duplicates for 11, 12,13,14,15,16, and 17\n        final CountingBloomFilter bf = createFilter(getTestShape(), TestingHashers.FROM1);\n        bf.add(CellExtractor.from(TestingHashers.FROM11.indices(getTestShape())));\n\n        final long[] lb = bf.asBitMapArray();\n        assertEquals(2, lb.length);\n        assertEquals(bigHashValue, lb[0]);\n\n        assertCounts(bf, bigHashCounts);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that counts are correct when a hasher with duplicates is used in the\nconstructor.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testCountingSpecificMerge()", "name": "testCountingSpecificMerge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testCountingSpecificMerge()", "original_string": "    @Test\n    public final void testCountingSpecificMerge() {\n        final BloomFilter bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n\n        final BloomFilter bf2 = new SimpleBloomFilter(getTestShape());\n        bf2.merge(TestingHashers.FROM11);\n\n        final BloomFilter bf3 = bf1.copy();\n        bf3.merge(bf2);\n        assertTrue(bf3.contains(bf1), \"Should contain\");\n        assertTrue(bf3.contains(bf2), \"Should contain\");\n\n        final BloomFilter bf4 = bf2.copy();\n        bf4.merge(bf1);\n        assertTrue(bf4.contains(bf1), \"Should contain\");\n        assertTrue(bf4.contains(bf2), \"Should contain\");\n        assertTrue(bf4.contains(bf3), \"Should contain\");\n        assertTrue(bf3.contains(bf4), \"Should contain\");\n\n        // test overflow\n\n        final CountingBloomFilter bf5 = createEmptyFilter(getTestShape());\n        assertTrue(bf5.add(getMaximumValueExtractor(bf5.getMaxCell())), \"Should add to empty\");\n        assertTrue(bf5.isValid(), \"Should be valid\");\n\n        final CountingBloomFilter bf6 = bf5.copy();\n        final BloomFilter bf7 = new SimpleBloomFilter(getTestShape());\n        bf7.merge(TestingHashers.FROM1);\n        bf6.merge(bf7);\n        assertFalse(bf6.isValid(), \"Should not be valid\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that merging bloom filters works as expected with a generic BloomFilter.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testExcludesDuplicates()", "name": "testExcludesDuplicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExcludesDuplicates()", "original_string": "    @Test\n    public void testExcludesDuplicates() {\n\n        // create a hasher that produces duplicates with the specified shape.\n        // this setup produces 5, 17, 29, 41, 53, 65 two times\n        final Shape shape = Shape.fromKM(12, 72);\n        final Hasher hasher = new IncrementingHasher(5, 12);\n\n        CountingBloomFilter bf1 = createFilter(shape, hasher);\n        assertEquals(6, bf1.cardinality());\n        bf1.processCells((x, y) -> {\n            assertEquals(1, y, \"Hasher in constructor results in value not equal to 1\");\n            return true;\n        });\n\n        bf1 = createEmptyFilter(shape);\n        bf1.merge(hasher);\n        assertEquals(6, bf1.cardinality());\n        bf1.processCells((x, y) -> {\n            assertEquals(1, y, \"Hasher in merge results in value not equal to 1\");\n            return true;\n        });\n\n        bf1 = createEmptyFilter(shape);\n        bf1.merge(hasher);\n        bf1.remove(hasher);\n        assertEquals(0, bf1.cardinality());\n        assertTrue(bf1.processCells((x, y) -> false), \"Hasher in removes results in value not equal to 0\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testGetMaxInsert()", "name": "testGetMaxInsert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetMaxInsert()", "original_string": "    @Test\n    public void testGetMaxInsert() {\n        final CountingBloomFilter bf = createEmptyFilter(getTestShape());\n        verifyMaxInsert(bf, 0, 0);\n        bf.merge(TestingHashers.FROM1);\n        verifyMaxInsert(bf, 1, 0);\n        bf.merge(TestingHashers.FROM1);\n        verifyMaxInsert(bf, 2, 0);\n        bf.merge(TestingHashers.FROM11);\n        verifyMaxInsert(bf, 2, 1);\n        bf.remove(TestingHashers.FROM1);\n        verifyMaxInsert(bf, 1, 1);\n        // verify remove false positive works\n        // Incrementing hasher 5,1 spans the single count cells for both FROM1 and FROM11\n        assertEquals(1, bf.getMaxInsert(new IncrementingHasher(5, 1)));\n        bf.remove(new IncrementingHasher(5, 1));\n        verifyMaxInsert(bf, 0, 0);\n        assertEquals(0, bf.getMaxInsert(new IncrementingHasher(5, 1)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testRemove()", "original_string": "    @Test\n    public final void testRemove() {\n        final BloomFilter simple = new SimpleBloomFilter(getTestShape());\n        simple.merge(TestingHashers.FROM11);\n\n        final CountingBloomFilter bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        bf1.add(CellExtractor.from(TestingHashers.FROM11.indices(getTestShape())));\n\n        assertTrue(bf1.remove(simple), \"Remove should work\");\n        assertFalse(bf1.contains(TestingHashers.FROM11), \"Should not contain\");\n        assertTrue(bf1.contains(TestingHashers.FROM1), \"Should contain\");\n\n        assertCounts(bf1, from1Counts);\n\n        // with hasher\n        final CountingBloomFilter bf2 = createFilter(getTestShape(), TestingHashers.FROM1);\n        bf2.add(CellExtractor.from(TestingHashers.FROM11.indices(getTestShape())));\n\n        assertTrue(bf2.remove(TestingHashers.FROM11), \"Remove should work\");\n        assertFalse(bf2.contains(TestingHashers.FROM11), \"Should not contain\");\n        assertTrue(bf2.contains(TestingHashers.FROM1), \"Should contain\");\n\n        assertCounts(bf2, from1Counts);\n\n        // test underflow\n        final CountingBloomFilter bf3 = createFilter(getTestShape(), TestingHashers.FROM1);\n        assertFalse(bf3.remove(simple), \"Subtract should not work\");\n        assertFalse(bf3.isValid(), \"isValid should return false\");\n        assertFalse(bf3.contains(TestingHashers.FROM1), \"Should not contain\");\n        assertFalse(bf3.contains(simple), \"Should not contain\");\n\n        assertCounts(bf3, new int[] {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1});\n\n        // with IndexExtractor\n        final IndexExtractor ip = TestingHashers.FROM11.indices(getTestShape());\n\n        final CountingBloomFilter bf4 = createFilter(getTestShape(), TestingHashers.FROM1);\n        bf4.add(CellExtractor.from(TestingHashers.FROM11.indices(getTestShape())));\n\n        assertTrue(bf4.remove(ip), \"Remove should work\");\n        assertFalse(bf4.contains(TestingHashers.FROM11), \"Should not contain\");\n        assertTrue(bf4.contains(TestingHashers.FROM1), \"Should contain\");\n\n        assertCounts(bf4, from1Counts);\n\n        // with BitMapExtractor\n        final BitMapExtractor bmp = BitMapExtractor.fromIndexExtractor(ip, getTestShape().getNumberOfBits());\n        final CountingBloomFilter bf5 = createFilter(getTestShape(), TestingHashers.FROM1);\n        bf5.add(CellExtractor.from(TestingHashers.FROM11.indices(getTestShape())));\n\n        assertTrue(bf5.remove(bmp), \"Remove should work\");\n        assertFalse(bf5.contains(TestingHashers.FROM11), \"Should not contain\");\n        assertTrue(bf5.contains(TestingHashers.FROM1), \"Should contain\");\n\n        assertCounts(bf5, from1Counts);\n\n        // test extractor errors\n        final IndexExtractor ip2 = IndexExtractor.fromIndexArray(1, 2, getTestShape().getNumberOfBits());\n        final CountingBloomFilter bf6 = createFilter(getTestShape(), TestingHashers.FROM1);\n        assertThrows(IllegalArgumentException.class, () -> bf6.remove(ip2));\n\n        final CountingBloomFilter bf7 = createFilter(getTestShape(), TestingHashers.FROM1);\n        final BitMapExtractor bmp2 = BitMapExtractor.fromIndexExtractor(ip2, getTestShape().getNumberOfBits());\n        assertThrows(IllegalArgumentException.class, () -> bf7.remove(bmp2));\n        assertThrows(IllegalArgumentException.class, () -> bf7.remove( new BadHasher(-1)));\n        assertThrows(IllegalArgumentException.class, () -> bf7.remove( new BadHasher(getTestShape().getNumberOfBits())));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that merge correctly updates the counts when a CountingBloomFilter is\npassed.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest.[void]testSubtract()", "name": "testSubtract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testSubtract()", "original_string": "    @Test\n    public final void testSubtract() {\n        final CountingBloomFilter bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        bf1.add(CellExtractor.from(TestingHashers.FROM11.indices(getTestShape())));\n\n        final CountingBloomFilter bf2 = createFilter(getTestShape(), TestingHashers.FROM11);\n\n        assertTrue(bf1.subtract(bf2), \"Subtract should work\");\n        assertFalse(bf1.contains( TestingHashers.populateFromHashersFrom1AndFrom11(new SimpleBloomFilter(getTestShape()))), \"Should not contain bitHasher\");\n        assertTrue(bf1.contains(TestingHashers.FROM1), \"Should contain TestingHashers.from1\");\n\n        assertCounts(bf1, from1Counts);\n\n        // test underflow\n        final CountingBloomFilter bf3 = createFilter(getTestShape(), TestingHashers.FROM1);\n\n        final CountingBloomFilter bf4 = createFilter(getTestShape(), TestingHashers.FROM11);\n\n        assertFalse(bf3.subtract(bf4), \"Subtract should not work\");\n        assertFalse(bf3.isValid(), \"isValid should return false\");\n        assertFalse(bf3.contains(TestingHashers.FROM1), \"Should not contain\");\n        assertFalse(bf3.contains(bf4), \"Should not contain\");\n\n        assertCounts(bf3, new int[] {0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0});\n\n        assertThrows(IllegalArgumentException.class, () -> bf3.remove( new BadHasher(-1)));\n        assertThrows(IllegalArgumentException.class, () -> bf3.remove( new BadHasher(getTestShape().getNumberOfBits())));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java", "class_name": "AbstractCountingBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCountingBloomFilterTest.java.AbstractCountingBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that merge correctly updates the counts when a CountingBloomFilter is\npassed.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java.DefaultIndexExtractorTest.[void]testEntries(int)", "name": "testEntries", "arg_nums": 1, "params": [{"name": "size", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {32, 33})\n    public void testEntries(final int size)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {32, 33})\n    public void testEntries(final int size) {\n        final int[] values = IntStream.range(0, size).toArray();\n        final IndexExtractor indexExtractor = predicate -> {\n            Objects.requireNonNull(predicate);\n            for (final int i : values) {\n                if (!predicate.test(i)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        final int[] other = indexExtractor.asIndexArray();\n        assertArrayEquals(values, other);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java", "class_name": "DefaultIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java.DefaultIndexExtractorTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {32, 33})\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {32, 33})", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java.DefaultIndexExtractorTest.[void]testFromBitMapExtractor()", "name": "testFromBitMapExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromBitMapExtractor()", "original_string": "    @Test\n    public void testFromBitMapExtractor() {\n        for (int i = 0; i < 5; i++) {\n            final int[] expected = generateIntArray(7, 256);\n            final long[] bits = new long[BitMaps.numberOfBitMaps(256)];\n            for (final int bitIndex : expected) {\n                BitMaps.set(bits, bitIndex);\n            }\n            final IndexExtractor ip = IndexExtractor.fromBitMapExtractor(BitMapExtractor.fromBitMapArray(bits));\n            assertArrayEquals(unique(expected), ip.asIndexArray());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java", "class_name": "DefaultIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java.DefaultIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java.DefaultIndexExtractorTest.[void]testFromIndexArray()", "name": "testFromIndexArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromIndexArray()", "original_string": "    @Test\n    public void testFromIndexArray() {\n        for (int i = 0; i < 5; i++) {\n            final int[] expected = generateIntArray(10, 256);\n            final IndexExtractor ip = IndexExtractor.fromIndexArray(expected);\n            assertArrayEquals(expected, ip.asIndexArray());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java", "class_name": "DefaultIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultIndexExtractorTest.java.DefaultIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasherTest.java.EnhancedDoubleHasherTest.[void]testByteConstructor()", "name": "testByteConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testByteConstructor()", "original_string": "    @Test\n    public void testByteConstructor() {\n        // single value become increment.\n        EnhancedDoubleHasher hasher = new EnhancedDoubleHasher(new byte[] {1});\n        assertEquals(0, hasher.getInitial());\n        assertEquals(0x01_00_00_00_00_00_00_00L, hasher.getIncrement());\n\n        // 2 bytes become initial and increment.\n        hasher = new EnhancedDoubleHasher(new byte[] {1, 2});\n        assertEquals(0x01_00_00_00_00_00_00_00L, hasher.getInitial());\n        assertEquals(0x02_00_00_00_00_00_00_00L, hasher.getIncrement());\n\n        // odd values place extra byte in increment.\n        hasher = new EnhancedDoubleHasher(new byte[] {1, 2, 3});\n        assertEquals(0x01_00_00_00_00_00_00_00L, hasher.getInitial());\n        assertEquals(0x02_03_00_00_00_00_00_00L, hasher.getIncrement());\n\n        // even short split\n        hasher = new EnhancedDoubleHasher(new byte[] {0, 1, 0, 2});\n        assertEquals(0x01_00_00_00_00_00_00L, hasher.getInitial());\n        assertEquals(0x02_00_00_00_00_00_00L, hasher.getIncrement());\n\n        // longs are parse correctly\n        hasher = new EnhancedDoubleHasher(new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2});\n        assertEquals(1, hasher.getInitial());\n        assertEquals(2, hasher.getIncrement());\n\n        // excess bytes are ignored before mid point and at end\n        hasher = new EnhancedDoubleHasher(new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 2, 5, 5});\n        assertEquals(1, hasher.getInitial());\n        assertEquals(2, hasher.getIncrement());\n\n        // odd extra bytes are accounted for correctly\n        hasher = new EnhancedDoubleHasher(new byte[] {0, 0, 0, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 0, 0, 0, 2, 5, 5});\n        assertEquals(1, hasher.getInitial());\n        assertEquals(0x01_00_00_00_00_00_00_02L, hasher.getIncrement());\n\n        // test empty buffer\n        assertThrows(IllegalArgumentException.class, () -> new EnhancedDoubleHasher(new byte[0]));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasherTest.java", "class_name": "EnhancedDoubleHasherTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/EnhancedDoubleHasherTest.java.EnhancedDoubleHasherTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayTrackerTest.java.ArrayTrackerTest.[void]testSeen()", "name": "testSeen", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSeen()", "original_string": "    @Test\n    public void testSeen() {\n        final Shape shape = Shape.fromKM(3, 12);\n        final IntPredicate tracker = new IndexFilter.ArrayTracker(shape);\n\n        assertTrue(tracker.test(0));\n        assertFalse(tracker.test(0));\n        assertTrue(tracker.test(1));\n        assertFalse(tracker.test(1));\n        assertTrue(tracker.test(2));\n        assertFalse(tracker.test(2));\n\n        assertThrows(IndexOutOfBoundsException.class, () -> tracker.test(3));\n        assertThrows(IndexOutOfBoundsException.class, () -> tracker.test(-1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayTrackerTest.java", "class_name": "ArrayTrackerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ArrayTrackerTest.java.ArrayTrackerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest.[void]testAsBitMapArray()", "name": "testAsBitMapArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testAsBitMapArray()", "original_string": "    @Test\n    public final void testAsBitMapArray() {\n        long[] array = createEmptyExtractor().asBitMapArray();\n        for (int i = 0; i < array.length; i++) {\n            assertEquals(0, array[i], \"Wrong value at \" + i);\n        }\n\n        array = createExtractor().asBitMapArray();\n        assertFalse(array.length == 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java", "class_name": "AbstractBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest.[void]testForEachBitMap()", "name": "testForEachBitMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testForEachBitMap()", "original_string": "    @Test\n    public final void testForEachBitMap() {\n        assertFalse(createExtractor().processBitMaps(FALSE_CONSUMER), \"non-empty should be false\");\n        if (emptyIsZeroLength()) {\n            assertTrue(createEmptyExtractor().processBitMaps(FALSE_CONSUMER), \"empty should be true\");\n        } else {\n            assertFalse(createEmptyExtractor().processBitMaps(FALSE_CONSUMER), \"empty should be false\");\n        }\n\n        assertTrue(createExtractor().processBitMaps(TRUE_CONSUMER), \"non-empty should be true\");\n        assertTrue(createEmptyExtractor().processBitMaps(TRUE_CONSUMER), \"empty should be true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java", "class_name": "AbstractBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest.[void]testForEachBitMapEarlyExit()", "name": "testForEachBitMapEarlyExit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachBitMapEarlyExit()", "original_string": "    @Test\n    public void testForEachBitMapEarlyExit() {\n        final int[] passes = new int[1];\n        assertFalse(createExtractor().processBitMaps(l -> {\n            passes[0]++;\n            return false;\n        }));\n        assertEquals(1, passes[0]);\n\n        passes[0] = 0;\n        if (emptyIsZeroLength()) {\n            assertTrue(createEmptyExtractor().processBitMaps(l -> {\n                passes[0]++;\n                return false;\n            }));\n            assertEquals(0, passes[0]);\n        } else {\n            assertFalse(createEmptyExtractor().processBitMaps(l -> {\n                passes[0]++;\n                return false;\n            }));\n            assertEquals(1, passes[0]);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java", "class_name": "AbstractBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest.[void]testForEachBitMapPair()", "name": "testForEachBitMapPair", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testForEachBitMapPair()", "original_string": "    @Test\n    public final void testForEachBitMapPair() {\n        final LongBiPredicate func = (x, y) -> x == y;\n        assertTrue(createEmptyExtractor().processBitMapPairs(createEmptyExtractor(), func), \"empty == empty failed\");\n        assertFalse(createEmptyExtractor().processBitMapPairs(createExtractor(), func), \"empty == not_empty failed\");\n        assertFalse(createExtractor().processBitMapPairs(createEmptyExtractor(), func), \"not_empty == empty passed\");\n        assertTrue(createExtractor().processBitMapPairs(createExtractor(), func), \"not_empty == not_empty failed\");\n\n        // test BitMapExtractors of different length send 0 for missing values.\n        final int[] count = new int[3];\n        final LongBiPredicate lbp = (x, y) -> {\n            if (x == 0) {\n                count[0]++;\n            }\n            if (y == 0) {\n                count[1]++;\n            }\n            count[2]++;\n            return true;\n        };\n        createEmptyExtractor().processBitMapPairs(createExtractor(), lbp);\n        assertEquals(count[2], count[0]);\n\n        Arrays.fill(count, 0);\n        createExtractor().processBitMapPairs(createEmptyExtractor(), lbp);\n        assertEquals(count[2], count[1]);\n\n        // test where the created extractor does not process all records because the predicate function\n        // returns false before the processing is completed.\n        final int[] limit = new int[1];\n        final LongBiPredicate shortFunc =  (x, y) -> {\n            limit[0]++;\n            return limit[0] < 2;\n        };\n        final BitMapExtractor shortExtractor = l -> true;\n        assertFalse(createExtractor().processBitMapPairs(shortExtractor, shortFunc));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java", "class_name": "AbstractBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest.[void]testForEachBitMapPairEarlyExit()", "name": "testForEachBitMapPairEarlyExit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachBitMapPairEarlyExit()", "original_string": "    @Test\n    public void testForEachBitMapPairEarlyExit() {\n\n        // test BitMapExtractir of different length send 0 for missing values.\n        final int[] count = new int[1];\n        final LongBiPredicate lbp = (x, y) -> {\n            count[0]++;\n            return false;\n        };\n        createExtractor().processBitMapPairs(createEmptyExtractor(), lbp);\n        assertEquals(1, count[0]);\n\n        Arrays.fill(count, 0);\n        createEmptyExtractor().processBitMapPairs(createExtractor(), lbp);\n        assertEquals(1, count[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java", "class_name": "AbstractBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBitMapExtractorTest.java.AbstractBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorFromBitmapExtractorTest.java.IndexExtractorFromBitmapExtractorTest.[void]testFromBitMapExtractor()", "name": "testFromBitMapExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testFromBitMapExtractor()", "original_string": "    @Test\n    public final void testFromBitMapExtractor() {\n        IndexExtractor underTest = createExtractor();\n        List<Integer> lst = new ArrayList<>();\n\n        underTest.processIndices(lst::add);\n        assertEquals(4, lst.size());\n        assertEquals(Integer.valueOf(0), lst.get(0));\n        assertEquals(Integer.valueOf(1 + 64), lst.get(1));\n        assertEquals(Integer.valueOf(0 + 128), lst.get(2));\n        assertEquals(Integer.valueOf(1 + 128), lst.get(3));\n\n        final BitMapExtractor bitMapExtractor = new TestingBitMapExtractor(new long[] {0xFFFFFFFFFFFFFFFFL});\n        underTest = IndexExtractor.fromBitMapExtractor(bitMapExtractor);\n        lst = new ArrayList<>();\n\n        underTest.processIndices(lst::add);\n\n        assertEquals(64, lst.size());\n        for (int i = 0; i < 64; i++) {\n            assertEquals(Integer.valueOf(i), lst.get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorFromBitmapExtractorTest.java", "class_name": "IndexExtractorFromBitmapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorFromBitmapExtractorTest.java.IndexExtractorFromBitmapExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testAndCardinality()", "name": "testAndCardinality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testAndCardinality()", "original_string": "    @Test\n    public final void testAndCardinality() {\n        final Shape shape = Shape.fromKM(3, 128);\n        BloomFilter filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63, 64));\n        BloomFilter filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(1, SetOperations::andCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63));\n        filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(0, SetOperations::andCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(5, 63));\n        filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(1, SetOperations::andCardinality, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testAndCardinalityWithDifferentLengthFilters()", "name": "testAndCardinalityWithDifferentLengthFilters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testAndCardinalityWithDifferentLengthFilters()", "original_string": "    @Test\n    public final void testAndCardinalityWithDifferentLengthFilters() {\n        final Shape shape = Shape.fromKM(3, 128);\n        final Shape shape2 = Shape.fromKM(3, 192);\n        BloomFilter filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63, 64));\n        BloomFilter filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(1, SetOperations::andCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63));\n        filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(0, SetOperations::andCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(5, 63));\n        filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(1, SetOperations::andCardinality, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testCommutativityOnMismatchedSizes()", "name": "testCommutativityOnMismatchedSizes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testCommutativityOnMismatchedSizes()", "original_string": "    @Test\n    public final void testCommutativityOnMismatchedSizes() {\n        final BitMapExtractor p1 = BitMapExtractor.fromBitMapArray(0x3L, 0x5L);\n        final BitMapExtractor p2 = BitMapExtractor.fromBitMapArray(0x1L);\n\n        assertEquals(SetOperations.orCardinality(p1, p2), SetOperations.orCardinality(p2, p1));\n        assertEquals(SetOperations.xorCardinality(p1, p2), SetOperations.xorCardinality(p2, p1));\n        assertEquals(SetOperations.andCardinality(p1, p2), SetOperations.andCardinality(p2, p1));\n        assertEquals(SetOperations.hammingDistance(p1, p2), SetOperations.hammingDistance(p2, p1));\n        assertEquals(SetOperations.cosineDistance(p1, p2), SetOperations.cosineDistance(p2, p1));\n        assertEquals(SetOperations.cosineSimilarity(p1, p2), SetOperations.cosineSimilarity(p2, p1));\n        assertEquals(SetOperations.jaccardDistance(p1, p2), SetOperations.jaccardDistance(p2, p1));\n        assertEquals(SetOperations.jaccardSimilarity(p1, p2), SetOperations.jaccardSimilarity(p2, p1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testCosineDistance()", "name": "testCosineDistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testCosineDistance()", "original_string": "    @Test\n    public final void testCosineDistance() {\n\n        BloomFilter filter1 = createFilter(shape, TestingHashers.FROM1);\n        BloomFilter filter2 = createFilter(shape, TestingHashers.FROM1);\n\n        // identical filters should have no distance.\n        double expected = 0;\n        assertSymmetricOperation(expected, SetOperations::cosineDistance, filter1, filter2);\n\n        final Shape shape2 = Shape.fromKM(2, 72);\n        filter1 = createFilter(shape2, TestingHashers.FROM1);\n        filter2 = createFilter(shape2, new IncrementingHasher(2, 1));\n\n        int dotProduct = /* [1,2] & [2,3] = [2] = */ 1;\n        int cardinalityA = 2;\n        int cardinalityB = 2;\n        expected = 1 - dotProduct / Math.sqrt(cardinalityA * cardinalityB);\n        assertSymmetricOperation(expected, SetOperations::cosineDistance, filter1, filter2);\n\n        filter1 = createFilter(shape, TestingHashers.FROM1);\n        filter2 = createFilter(shape, TestingHashers.FROM11);\n        dotProduct = /* [1..17] & [11..27] = [] = */ 7;\n        cardinalityA = 17;\n        cardinalityB = 17;\n        expected = 1 - dotProduct / Math.sqrt(cardinalityA * cardinalityB);\n        assertSymmetricOperation(expected, SetOperations::cosineDistance, filter1, filter2);\n\n        // test with no values\n        filter1 = createFilter(shape, TestingHashers.FROM1);\n        filter2 = new SimpleBloomFilter(shape);\n\n        dotProduct = /* [1,2] & [] = [] = */ 0;\n        cardinalityA = 2;\n        cardinalityB = 0;\n        expected = /* 1 - (dotProduct/Math.sqrt(cardinalityA * cardinalityB)) = */ 1.0;\n        assertSymmetricOperation(expected, SetOperations::cosineDistance, filter1, filter2);\n\n        dotProduct = /* [] & [] = [] = */ 0;\n        cardinalityA = 0;\n        cardinalityB = 0;\n        expected = /* 1 - (dotProduct/Math.sqrt(cardinalityA * cardinalityB)) = */ 1.0;\n        assertSymmetricOperation(expected, SetOperations::cosineDistance, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the Cosine similarity is correctly calculated.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testCosineSimilarity()", "name": "testCosineSimilarity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testCosineSimilarity()", "original_string": "    @Test\n    public final void testCosineSimilarity() {\n        BloomFilter filter1 = createFilter(shape, TestingHashers.FROM1);\n        BloomFilter filter2 = createFilter(shape, TestingHashers.FROM1);\n\n        int dotProduct = /* [1..17] & [1..17] = [1..17] = */ 17;\n        int cardinalityA = 17;\n        int cardinalityB = 17;\n        double expected = /* dotProduct/Sqrt(cardinalityA * cardinalityB) = */ 1.0;\n        assertSymmetricOperation(expected, SetOperations::cosineSimilarity, filter1, filter2);\n\n        dotProduct = /* [1..17] & [11..27] = [11..17] = */ 7;\n        cardinalityA = 17;\n        cardinalityB = 17;\n        expected = dotProduct / Math.sqrt(cardinalityA * cardinalityB);\n        filter2 = createFilter(shape, TestingHashers.FROM11);\n        assertSymmetricOperation(expected, SetOperations::cosineSimilarity, filter1, filter2);\n\n        // test no values\n        filter1 = new SimpleBloomFilter(shape);\n        filter2 = new SimpleBloomFilter(shape);\n        // build a filter\n        final BloomFilter filter3 = createFilter(shape, TestingHashers.FROM1);\n        assertSymmetricOperation(0.0, SetOperations::cosineSimilarity, filter1, filter2);\n        assertSymmetricOperation(0.0, SetOperations::cosineSimilarity, filter1, filter3);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the Cosine similarity is correctly calculated.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testHammingDistance()", "name": "testHammingDistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testHammingDistance()", "original_string": "    @Test\n    public final void testHammingDistance() {\n        final BloomFilter filter1 = createFilter(shape, TestingHashers.FROM1);\n        BloomFilter filter2 = createFilter(shape, TestingHashers.FROM1);\n\n        int hammingDistance = /* [1..17] ^ [1..17] = [] = */ 0;\n        assertSymmetricOperation(hammingDistance, SetOperations::hammingDistance, filter1, filter2);\n\n        filter2 = createFilter(shape, TestingHashers.FROM11);\n        hammingDistance = /* [1..17] ^ [11..27] = [1..10][17-27] = */ 20;\n        assertSymmetricOperation(hammingDistance, SetOperations::hammingDistance, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the Hamming distance is correctly calculated.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testJaccardDistance()", "name": "testJaccardDistance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testJaccardDistance()", "original_string": "    @Test\n    public final void testJaccardDistance() {\n        BloomFilter filter1 = createFilter(shape, TestingHashers.FROM1);\n        BloomFilter filter2 = createFilter(shape, TestingHashers.FROM1);\n\n        // 1 - jaccardSimilarity -- see jaccardSimilarityTest\n        assertSymmetricOperation(0.0, SetOperations::jaccardDistance, filter1, filter2);\n\n        filter2 = createFilter(shape, TestingHashers.FROM11);\n        final double intersection = /* [1..17] & [11..27] = [11..17] = */ 7.0;\n        final int union = /* [1..17] | [11..27] = [1..27] = */ 27;\n        final double expected = 1 - intersection / union;\n        assertSymmetricOperation(expected, SetOperations::jaccardDistance, filter1, filter2);\n\n        // test no values\n        filter1 = new SimpleBloomFilter(shape);\n        filter2 = new SimpleBloomFilter(shape);\n        final BloomFilter filter3 = createFilter(shape, TestingHashers.FROM1);\n\n        // 1 - jaccardSimilarity -- see jaccardSimilarityTest\n        assertSymmetricOperation(1.0, SetOperations::jaccardDistance, filter1, filter2);\n        assertSymmetricOperation(1.0, SetOperations::jaccardDistance, filter1, filter3);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the Jaccard distance is correctly calculated.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testJaccardSimilarity()", "name": "testJaccardSimilarity", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testJaccardSimilarity()", "original_string": "    @Test\n    public final void testJaccardSimilarity() {\n        BloomFilter filter1 = createFilter(shape, TestingHashers.FROM1);\n        BloomFilter filter2 = createFilter(shape, TestingHashers.FROM1);\n\n        double intersection = /* [1..17] & [1..17] = [1..17] = */ 17.0;\n        int union = /* [1..17] | [1..17] = [1..17] = */ 17;\n        double expected = intersection / union;\n        assertSymmetricOperation(expected, SetOperations::jaccardSimilarity, filter1, filter2);\n\n        filter2 = createFilter(shape, TestingHashers.FROM11);\n        intersection = /* [1..17] & [11..27] = [11..17] = */ 7.0;\n        union = /* [1..17] | [11..27] = [1..27] = */ 27;\n        expected = intersection / union;\n        assertSymmetricOperation(expected, SetOperations::jaccardSimilarity, filter1, filter2);\n\n        // test no values\n        filter1 = new SimpleBloomFilter(shape);\n        filter2 = new SimpleBloomFilter(shape);\n        assertSymmetricOperation(0.0, SetOperations::jaccardSimilarity, filter1, filter2);\n\n        intersection = /* [] & [1..17] = [] = */ 0.0;\n        union = /* [] | [1..17] = [] = */ 17;\n        expected = intersection / union;\n        assertSymmetricOperation(expected, SetOperations::jaccardSimilarity, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the Jaccard similarity is correctly calculated.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testOrCardinality()", "name": "testOrCardinality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testOrCardinality()", "original_string": "    @Test\n    public final void testOrCardinality() {\n        final Shape shape = Shape.fromKM(3, 128);\n        BloomFilter filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63, 64));\n        BloomFilter filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(5, SetOperations::orCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63));\n        filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(5, SetOperations::orCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(5, 63));\n        filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(4, SetOperations::orCardinality, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testOrCardinalityWithDifferentLengthFilters()", "name": "testOrCardinalityWithDifferentLengthFilters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testOrCardinalityWithDifferentLengthFilters()", "original_string": "    @Test\n    public final void testOrCardinalityWithDifferentLengthFilters() {\n        final Shape shape = Shape.fromKM(3, 128);\n        final Shape shape2 = Shape.fromKM(3, 192);\n        BloomFilter filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63, 64));\n        BloomFilter filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(5, SetOperations::orCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63));\n        filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(5, SetOperations::orCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(5, 63));\n        filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(4, SetOperations::orCardinality, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testXorCardinality()", "name": "testXorCardinality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testXorCardinality()", "original_string": "    @Test\n    public final void testXorCardinality() {\n        final Shape shape = Shape.fromKM(3, 128);\n        BloomFilter filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63, 64));\n        BloomFilter filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(4, SetOperations::xorCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63));\n        filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(5, SetOperations::xorCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(5, 63));\n        filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 64, 69));\n        assertSymmetricOperation(3, SetOperations::xorCardinality, filter1, filter2);\n\n        final Shape bigShape = Shape.fromKM(3, 192);\n        filter1 = createFilter(bigShape, IndexExtractor.fromIndexArray(1, 63, 185));\n        filter2 = createFilter(shape, IndexExtractor.fromIndexArray(5, 63, 69));\n        assertSymmetricOperation(4, SetOperations::xorCardinality, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest.[void]testXorCardinalityWithDifferentLengthFilters()", "name": "testXorCardinalityWithDifferentLengthFilters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testXorCardinalityWithDifferentLengthFilters()", "original_string": "    @Test\n    public final void testXorCardinalityWithDifferentLengthFilters() {\n        final Shape shape = Shape.fromKM(3, 128);\n        final Shape shape2 = Shape.fromKM(3, 192);\n\n        BloomFilter filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63, 64));\n        BloomFilter filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(4, SetOperations::xorCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(1, 63));\n        filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(5, SetOperations::xorCardinality, filter1, filter2);\n\n        filter1 = createFilter(shape, IndexExtractor.fromIndexArray(5, 63));\n        filter2 = createFilter(shape2, IndexExtractor.fromIndexArray(5, 64, 169));\n        assertSymmetricOperation(3, SetOperations::xorCardinality, filter1, filter2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "class_name": "SetOperationsTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java.SetOperationsTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractHasherTest.java.AbstractHasherTest.[void]testHashing(int,int)", "name": "testHashing", "arg_nums": 2, "params": [{"name": "k", "type": "int"}, {"name": "m", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @CsvSource({\n        \"17, 72\",\n        \"3, 14\",\n        \"5, 67868\",\n        \"75, 10\"\n    })\n    public void testHashing(final int k, final int m)", "original_string": "    @ParameterizedTest\n    @CsvSource({\n        \"17, 72\",\n        \"3, 14\",\n        \"5, 67868\",\n        \"75, 10\"\n    })\n    public void testHashing(final int k, final int m) {\n        final int[] count = {0};\n        final Hasher hasher = createHasher();\n        hasher.indices(Shape.fromKM(k, m)).processIndices(i -> {\n            assertTrue(i >= 0 && i < m, () -> \"Out of range: \" + i + \", m=\" + m);\n            count[0]++;\n            return true;\n        });\n        assertEquals(k * getHasherSize(hasher), count[0],\n                () -> String.format(\"Did not produce k=%d * m=%d indices\", k, getHasherSize(hasher)));\n\n        // test early exit\n        count[0] = 0;\n        hasher.indices(Shape.fromKM(k, m)).processIndices(i -> {\n            assertTrue(i >= 0 && i < m, () -> \"Out of range: \" + i + \", m=\" + m);\n            count[0]++;\n            return false;\n        });\n        assertEquals(1, count[0], \"did not exit early\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractHasherTest.java", "class_name": "AbstractHasherTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractHasherTest.java.AbstractHasherTest", "attributes": {"modifiers": "@ParameterizedTest\n    @CsvSource({\n        \"17, 72\",\n        \"3, 14\",\n        \"5, 67868\",\n        \"75, 10\"\n    })\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@CsvSource({\n        \"17, 72\",\n        \"3, 14\",\n        \"5, 67868\",\n        \"75, 10\"\n    })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapTrackerTest.java.BitMapTrackerTest.[void]testSeen()", "name": "testSeen", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSeen()", "original_string": "    @Test\n    public void testSeen() {\n        final Shape shape = Shape.fromKM(3, 12);\n        final IntPredicate tracker = new IndexFilter.BitMapTracker(shape);\n\n        assertTrue(tracker.test(0));\n        assertFalse(tracker.test(0));\n        assertTrue(tracker.test(1));\n        assertFalse(tracker.test(1));\n        assertTrue(tracker.test(2));\n        assertFalse(tracker.test(2));\n\n        assertTrue(tracker.test(4));\n        assertFalse(tracker.test(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapTrackerTest.java", "class_name": "BitMapTrackerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapTrackerTest.java.BitMapTrackerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java.DefaultBitMapExtractorTest.[void]testAsBitMapArrayLargeArray()", "name": "testAsBitMapArrayLargeArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsBitMapArrayLargeArray()", "original_string": "    @Test\n    public void testAsBitMapArrayLargeArray() {\n        final long[] expected = generateLongArray(32);\n        final BitMapExtractor bitMapExtractor = predicate -> {\n            for (final long l : expected) {\n                if (!predicate.test(l)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        final long[] ary = bitMapExtractor.asBitMapArray();\n        assertArrayEquals(expected, ary);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java", "class_name": "DefaultBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java.DefaultBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java.DefaultBitMapExtractorTest.[void]testFromBitMapArray()", "name": "testFromBitMapArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromBitMapArray()", "original_string": "    @Test\n    public void testFromBitMapArray() {\n        final int nOfBitMaps = BitMaps.numberOfBitMaps(256);\n        final long[] expected = generateLongArray(nOfBitMaps);\n        final long[] ary = BitMapExtractor.fromBitMapArray(expected).asBitMapArray();\n        assertArrayEquals(expected, ary);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java", "class_name": "DefaultBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java.DefaultBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java.DefaultBitMapExtractorTest.[void]testFromIndexExtractor()", "name": "testFromIndexExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromIndexExtractor()", "original_string": "    @Test\n    public void testFromIndexExtractor() {\n        final int[] expected = DefaultIndexExtractorTest.generateIntArray(10, 256);\n        final IndexExtractor indexExtractor = IndexExtractor.fromIndexArray(expected);\n        final long[] ary = BitMapExtractor.fromIndexExtractor(indexExtractor, 256).asBitMapArray();\n        for (final int idx : expected) {\n            assertTrue(BitMaps.contains(ary, idx));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java", "class_name": "DefaultBitMapExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBitMapExtractorTest.java.DefaultBitMapExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java.SparseBloomFilterTest.[void]testBitMapExtractorEdgeCases()", "name": "testBitMapExtractorEdgeCases", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBitMapExtractorEdgeCases()", "original_string": "    @Test\n    public void testBitMapExtractorEdgeCases() {\n        int[] values = {1, 2, 3, 4, 5, 6, 7, 8, 9, 65, 66, 67, 68, 69, 70, 71};\n        BloomFilter bf = createFilter(getTestShape(), IndexExtractor.fromIndexArray(values));\n\n        // verify exit early before bitmap boundary\n        final int[] passes = new int[1];\n        assertFalse(bf.processBitMaps(l -> {\n            passes[0]++;\n            return false;\n        }));\n        assertEquals(1, passes[0]);\n\n        // verify exit early at bitmap boundary\n        bf = createFilter(getTestShape(), IndexExtractor.fromIndexArray(values));\n        passes[0] = 0;\n        assertFalse(bf.processBitMaps(l -> {\n            final boolean result = passes[0] == 0;\n            if (result) {\n                passes[0]++;\n            }\n            return result;\n        }));\n        assertEquals(1, passes[0]);\n\n        // verify add extra if all values in first bitmap\n        values = new int[] {1, 2, 3, 4};\n        bf = createFilter(getTestShape(), IndexExtractor.fromIndexArray(values));\n        passes[0] = 0;\n        assertTrue(bf.processBitMaps(l -> {\n            passes[0]++;\n            return true;\n        }));\n        assertEquals(2, passes[0]);\n\n        // verify exit early if all values in first bitmap and predicate returns false\n        // on 2nd block\n        values = new int[] {1, 2, 3, 4};\n        bf = createFilter(getTestShape(), IndexExtractor.fromIndexArray(values));\n        passes[0] = 0;\n        assertFalse(bf.processBitMaps(l -> {\n            final boolean result = passes[0] == 0;\n            if (result) {\n                passes[0]++;\n            }\n            return result;\n        }));\n        assertEquals(1, passes[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java", "class_name": "SparseBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java.SparseBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java.SparseBloomFilterTest.[void]testBloomFilterBasedMergeEdgeCases()", "name": "testBloomFilterBasedMergeEdgeCases", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBloomFilterBasedMergeEdgeCases()", "original_string": "    @Test\n    public void testBloomFilterBasedMergeEdgeCases() {\n        final BloomFilter bf1 = createEmptyFilter(getTestShape());\n        final BloomFilter bf2 = new SimpleBloomFilter(getTestShape());\n        bf2.merge(TestingHashers.FROM1);\n        bf1.merge(bf2);\n        assertTrue(bf2.processBitMapPairs(bf1, (x, y) -> x == y));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java", "class_name": "SparseBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SparseBloomFilterTest.java.SparseBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromIndexExtractorTest.java.BitMapExtractorFromIndexExtractorTest.[void]testFromIndexExtractor()", "name": "testFromIndexExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testFromIndexExtractor()", "original_string": "    @Test\n    public final void testFromIndexExtractor() {\n        final List<Long> lst = new ArrayList<>();\n        createExtractor().processBitMaps(lst::add);\n        final long[] buckets = lst.stream().mapToLong(Long::longValue).toArray();\n        assertTrue(BitMaps.contains(buckets, 0));\n        assertTrue(BitMaps.contains(buckets, 1));\n        assertTrue(BitMaps.contains(buckets, 63));\n        assertTrue(BitMaps.contains(buckets, 64));\n        assertTrue(BitMaps.contains(buckets, 127));\n        assertTrue(BitMaps.contains(buckets, 128));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromIndexExtractorTest.java", "class_name": "BitMapExtractorFromIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromIndexExtractorTest.java.BitMapExtractorFromIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java.CountingPredicateTest.[void]testPredicateLonger()", "name": "testPredicateLonger", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicateLonger()", "original_string": "    @Test\n    public void testPredicateLonger() {\n        final List<Pair<Integer, Integer>> expected = new ArrayList<>();\n        final List<Pair<Integer, Integer>> result = new ArrayList<>();\n        expected.add(Pair.of(1, 3));\n\n        CountingPredicate<Integer> cp = new CountingPredicate<>(ary, makeFunc((x, y) -> x != null, result));\n        assertTrue(cp.test(Integer.valueOf(3)));\n        assertEquals(expected, result);\n        expected.add(Pair.of(2, null));\n        assertTrue(cp.processRemaining());\n        assertEquals(expected, result);\n\n        // if the other array is zero length then cp.test() will not be called so\n        // we can just call cp.processRemaining() here.\n        expected.clear();\n        expected.add(Pair.of(1, null));\n        expected.add(Pair.of(2, null));\n        result.clear();\n        cp = new CountingPredicate<>(ary, makeFunc((x, y) -> x != null, result));\n        assertTrue(cp.processRemaining());\n        assertEquals(expected, result);\n\n        // If a test fails then the result should be false and the rest of the list should\n        // not be processed.\n        expected.clear();\n        expected.add(Pair.of(1, null));\n        result.clear();\n        cp = new CountingPredicate<>(ary, makeFunc((x, y) -> x == Integer.valueOf(1), result));\n        assertFalse(cp.processRemaining());\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java", "class_name": "CountingPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java.CountingPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest when the predicate array is longer than other array as determined by the number\nof times cp.test() is called and all other values result in a true statement.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java.CountingPredicateTest.[void]testPredicateSameLength()", "name": "testPredicateSameLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicateSameLength()", "original_string": "    @Test\n    public void testPredicateSameLength() {\n        final List<Pair<Integer, Integer>> expected = new ArrayList<>();\n        final List<Pair<Integer, Integer>> result = new ArrayList<>();\n        expected.add( Pair.of(1, 3));\n        expected.add( Pair.of(2, 3));\n        final CountingPredicate<Integer> cp = new CountingPredicate<>(ary, makeFunc((x, y) -> true, result));\n        assertTrue(cp.test(3));\n        assertTrue(cp.test(3));\n        assertEquals(expected, result);\n        assertTrue(cp.processRemaining());\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java", "class_name": "CountingPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java.CountingPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest when the predicate array is shorter than other array as determined by the number\nof times cp.test() is called and all other values result in a true statement.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java.CountingPredicateTest.[void]testPredicateShorter()", "name": "testPredicateShorter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPredicateShorter()", "original_string": "    @Test\n    public void testPredicateShorter() {\n        final List<Pair<Integer, Integer>> expected = new ArrayList<>();\n        final List<Pair<Integer, Integer>> result = new ArrayList<>();\n        final Integer[] shortAry = {Integer.valueOf(3)};\n        expected.add(Pair.of(3, 1));\n        expected.add(Pair.of(null, 2));\n        final CountingPredicate<Integer> cp = new CountingPredicate<>(shortAry, makeFunc((x, y) -> true, result));\n        for (final Integer i : ary) {\n            assertTrue(cp.test(i));\n        }\n        assertEquals(expected, result);\n        assertTrue(cp.processRemaining());\n        assertEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java", "class_name": "CountingPredicateTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/CountingPredicateTest.java.CountingPredicateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest when the predicate array is shorter than other array as determined by the number\nof times cp.test() is called and all other values result in a true statement.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testAdvanceOnCount(int)", "name": "testAdvanceOnCount", "arg_nums": 1, "params": [{"name": "breakAt", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {4, 10, 2, 1})\n    public void testAdvanceOnCount(final int breakAt)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {4, 10, 2, 1})\n    public void testAdvanceOnCount(final int breakAt) {\n        final Predicate<LayerManager<BloomFilter>> underTest = LayerManager.ExtendCheck.advanceOnCount(breakAt);\n        final LayerManager<BloomFilter> layerManager = testingBuilder().get();\n        for (int i = 0; i < breakAt - 1; i++) {\n            assertFalse(underTest.test(layerManager), \"at \" + i);\n            layerManager.getTarget().merge(TestingHashers.FROM1);\n        }\n        assertTrue(underTest.test(layerManager));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {4, 10, 2, 1})\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {4, 10, 2, 1})", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testAdvanceOnCountInvalidArguments()", "name": "testAdvanceOnCountInvalidArguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdvanceOnCountInvalidArguments()", "original_string": "    @Test\n    public void testAdvanceOnCountInvalidArguments() {\n        assertThrows(IllegalArgumentException.class, () -> LayerManager.ExtendCheck.advanceOnCount(0));\n        assertThrows(IllegalArgumentException.class, () -> LayerManager.ExtendCheck.advanceOnCount(-1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testAdvanceOnPopulated()", "name": "testAdvanceOnPopulated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdvanceOnPopulated()", "original_string": "    @Test\n    public void testAdvanceOnPopulated() {\n        final Predicate<LayerManager<BloomFilter>> underTest = LayerManager.ExtendCheck.advanceOnPopulated();\n        final LayerManager<BloomFilter> layerManager = testingBuilder().get();\n        assertFalse(underTest.test(layerManager));\n        layerManager.getTarget().merge(TestingHashers.FROM1);\n        assertTrue(underTest.test(layerManager));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testAdvanceOnSaturation()", "name": "testAdvanceOnSaturation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdvanceOnSaturation()", "original_string": "    @Test\n    public void testAdvanceOnSaturation() {\n        final double maxN = shape.estimateMaxN();\n        int hashStart = 0;\n        final Predicate<LayerManager<BloomFilter>> underTest = LayerManager.ExtendCheck.advanceOnSaturation(maxN);\n        final LayerManager<BloomFilter> layerManager = testingBuilder().get();\n        while (layerManager.getTarget().getShape().estimateN(layerManager.getTarget().cardinality()) < maxN) {\n            assertFalse(underTest.test(layerManager));\n            layerManager.getTarget().merge(new IncrementingHasher(hashStart, shape.getNumberOfHashFunctions()));\n            hashStart += shape.getNumberOfHashFunctions();\n        }\n        assertTrue(underTest.test(layerManager));\n        assertThrows(IllegalArgumentException.class, () -> LayerManager.ExtendCheck.advanceOnSaturation(0));\n        assertThrows(IllegalArgumentException.class, () -> LayerManager.ExtendCheck.advanceOnSaturation(-1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testBuilder()", "name": "testBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder()", "original_string": "    @Test\n    public void testBuilder() {\n        final LayerManager.Builder<BloomFilter> underTest = LayerManager.builder();\n        NullPointerException npe = assertThrows(NullPointerException.class, underTest::get);\n        assertTrue(npe.getMessage().contains(\"filterSupplier\"));\n        underTest.setSupplier(() -> null).setCleanup(null);\n        npe = assertThrows(NullPointerException.class, underTest::get);\n        assertTrue(npe.getMessage().contains(\"filterCleanup\"));\n        underTest.setCleanup(x -> {\n        }).setExtendCheck(null);\n        npe = assertThrows(NullPointerException.class, underTest::get);\n        assertTrue(npe.getMessage().contains(\"extendCheck\"));\n\n        npe = assertThrows(NullPointerException.class, () -> LayerManager.builder().setSupplier(() -> null).get());\n        assertTrue(npe.getMessage().contains(\"filterSupplier.get() returned null.\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        final LayerManager<BloomFilter> underTest = LayerManager.builder().setSupplier(() -> new SimpleBloomFilter(shape)).get();\n        underTest.getTarget().merge(TestingHashers.randomHasher());\n        underTest.next();\n        underTest.getTarget().merge(TestingHashers.randomHasher());\n        underTest.next();\n        underTest.getTarget().merge(TestingHashers.randomHasher());\n        assertEquals(3, underTest.getDepth());\n        underTest.clear();\n        assertEquals(1, underTest.getDepth());\n        assertEquals(0, underTest.getTarget().cardinality());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testCopy()", "name": "testCopy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCopy()", "original_string": "    @Test\n    public void testCopy() {\n        final LayerManager<BloomFilter> underTest = LayerManager.builder().setSupplier(() -> new SimpleBloomFilter(shape)).get();\n        underTest.getTarget().merge(TestingHashers.randomHasher());\n        underTest.next();\n        underTest.getTarget().merge(TestingHashers.randomHasher());\n        underTest.next();\n        underTest.getTarget().merge(TestingHashers.randomHasher());\n        assertEquals(3, underTest.getDepth());\n\n        final LayerManager<BloomFilter> copy = underTest.copy();\n        assertNotSame(underTest, copy);\n        // object equals not implemented\n        assertNotEquals(underTest, copy);\n\n        assertEquals(underTest.getDepth(), copy.getDepth());\n        assertTrue(\n                underTest.processBloomFilterPair(copy, (x, y) -> Arrays.equals(x.asBitMapArray(), y.asBitMapArray())));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testForEachBloomFilter()", "name": "testForEachBloomFilter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachBloomFilter()", "original_string": "    @Test\n    public void testForEachBloomFilter() {\n        final LayerManager<BloomFilter> underTest = LayerManager.builder().setSupplier(() -> new SimpleBloomFilter(shape))\n                .setExtendCheck(LayerManager.ExtendCheck.advanceOnPopulated()).get();\n\n        final List<BloomFilter> lst = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            final BloomFilter bf = new SimpleBloomFilter(shape);\n            bf.merge(TestingHashers.randomHasher());\n            lst.add(bf);\n            underTest.getTarget().merge(bf);\n        }\n        final List<BloomFilter> lst2 = new ArrayList<>();\n        underTest.processBloomFilters(lst2::add);\n        assertEquals(10, lst.size());\n        assertEquals(10, lst2.size());\n        for (int i = 0; i < lst.size(); i++) {\n            assertArrayEquals(lst.get(i).asBitMapArray(), lst2.get(i).asBitMapArray());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGet()", "original_string": "    @Test\n    public void testGet() {\n        final SimpleBloomFilter f = new SimpleBloomFilter(shape);\n        final LayerManager<BloomFilter> underTest = LayerManager.builder().setSupplier(() -> f).get();\n        assertEquals(1, underTest.getDepth());\n        assertSame(f, underTest.get(0));\n        assertThrows(NoSuchElementException.class, () -> underTest.get(-1));\n        assertThrows(NoSuchElementException.class, () -> underTest.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testNeverAdvance()", "name": "testNeverAdvance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNeverAdvance()", "original_string": "    @Test\n    public void testNeverAdvance() {\n        final Predicate<LayerManager<BloomFilter>> underTest = LayerManager.ExtendCheck.neverAdvance();\n        final LayerManager<BloomFilter> layerManager = testingBuilder().get();\n        assertFalse(underTest.test(layerManager));\n        for (int i = 0; i < 10; i++) {\n            layerManager.getTarget().merge(TestingHashers.randomHasher());\n            assertFalse(underTest.test(layerManager));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testNextAndGetDepth()", "name": "testNextAndGetDepth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextAndGetDepth()", "original_string": "    @Test\n    public void testNextAndGetDepth() {\n        final LayerManager<BloomFilter> underTest = LayerManager.builder().setSupplier(() -> new SimpleBloomFilter(shape)).get();\n        assertEquals(1, underTest.getDepth());\n        underTest.getTarget().merge(TestingHashers.randomHasher());\n        assertEquals(1, underTest.getDepth());\n        underTest.next();\n        assertEquals(2, underTest.getDepth());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testNoCleanup()", "name": "testNoCleanup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoCleanup()", "original_string": "    @Test\n    public void testNoCleanup() {\n        final Consumer<Deque<BloomFilter>> underTest = LayerManager.Cleanup.noCleanup();\n        final Deque<BloomFilter> list = new LinkedList<>();\n        for (int i = 0; i < 20; i++) {\n            assertEquals(i, list.size());\n            list.add(new SimpleBloomFilter(shape));\n            underTest.accept(list);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testOnMaxSize(int)", "name": "testOnMaxSize", "arg_nums": 1, "params": [{"name": "maxSize", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {5, 100, 2, 1})\n    public void testOnMaxSize(final int maxSize)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {5, 100, 2, 1})\n    public void testOnMaxSize(final int maxSize) {\n        final Consumer<Deque<BloomFilter>> underTest = LayerManager.Cleanup.onMaxSize(maxSize);\n        final LinkedList<BloomFilter> list = new LinkedList<>();\n        for (int i = 0; i < maxSize; i++) {\n            assertEquals(i, list.size());\n            list.add(new SimpleBloomFilter(shape));\n            underTest.accept(list);\n        }\n        assertEquals(maxSize, list.size());\n\n        for (int i = 0; i < maxSize; i++) {\n            list.add(new SimpleBloomFilter(shape));\n            underTest.accept(list);\n            assertEquals(maxSize, list.size());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {5, 100, 2, 1})\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {5, 100, 2, 1})", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testOnMaxSizeIllegalValues()", "name": "testOnMaxSizeIllegalValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnMaxSizeIllegalValues()", "original_string": "    @Test\n    public void testOnMaxSizeIllegalValues() {\n        assertThrows(IllegalArgumentException.class, () -> LayerManager.Cleanup.onMaxSize(0));\n        assertThrows(IllegalArgumentException.class, () -> LayerManager.Cleanup.onMaxSize(-1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testRemoveEmptyTarget()", "name": "testRemoveEmptyTarget", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveEmptyTarget()", "original_string": "    @Test\n    public void testRemoveEmptyTarget() {\n        final Consumer<Deque<BloomFilter>> underTest = LayerManager.Cleanup.removeEmptyTarget();\n        final LinkedList<BloomFilter> list = new LinkedList<>();\n\n        // removes an empty filter\n        final BloomFilter bf = new SimpleBloomFilter(shape);\n        list.add(bf);\n        assertEquals(bf, list.get(0));\n        underTest.accept(list);\n        assertTrue(list.isEmpty());\n\n        // does not remove a populated filter.\n        bf.merge(IndexExtractor.fromIndexArray(1));\n        list.add(bf);\n        assertEquals(bf, list.get(0));\n        underTest.accept(list);\n        assertEquals(bf, list.get(0));\n\n        // does not remove an empty filter followed by a populated filter.\n        list.clear();\n        list.add(new SimpleBloomFilter(shape));\n        list.add(bf);\n        assertEquals(2, list.size());\n        underTest.accept(list);\n        assertEquals(2, list.size());\n\n        // does not remove multiple empty filters at the end of the list, just the last\n        // one.\n        list.clear();\n        list.add(bf);\n        list.add(new SimpleBloomFilter(shape));\n        list.add(new SimpleBloomFilter(shape));\n        assertEquals(3, list.size());\n        underTest.accept(list);\n        assertEquals(2, list.size());\n        assertEquals(bf, list.get(0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest.[void]testTarget()", "name": "testTarget", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTarget()", "original_string": "    @Test\n    public void testTarget() {\n        final boolean[] extendCheckCalled = { false };\n        final boolean[] cleanupCalled = { false };\n        final int[] supplierCount = { 0 };\n        final LayerManager<BloomFilter> underTest = LayerManager.builder().setSupplier(() -> {\n            supplierCount[0]++;\n            return new SimpleBloomFilter(shape);\n        }).setExtendCheck(lm -> {\n            extendCheckCalled[0] = true;\n            return true;\n        }).setCleanup(ll -> {\n            cleanupCalled[0] = true;\n        }).get();\n        assertFalse(extendCheckCalled[0]);\n        assertFalse(cleanupCalled[0]);\n        assertEquals(1, supplierCount[0]);\n        underTest.getTarget();\n        assertTrue(extendCheckCalled[0]);\n        assertTrue(cleanupCalled[0]);\n        assertEquals(2, supplierCount[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java", "class_name": "LayerManagerTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayerManagerTest.java.LayerManagerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest.[void]testDefaultBloomFilterSimpleSpecificMerge()", "name": "testDefaultBloomFilterSimpleSpecificMerge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultBloomFilterSimpleSpecificMerge()", "original_string": "    @Test\n    public void testDefaultBloomFilterSimpleSpecificMerge() {\n        final AbstractDefaultBloomFilter filter = new SparseDefaultBloomFilter(Shape.fromKM(3, 150));\n        final Hasher hasher = new IncrementingHasher(0, 1);\n        assertTrue(filter.merge(hasher));\n        assertEquals(3, filter.cardinality());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "class_name": "DefaultBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest.[void]testDefaultBloomFilterSparseSpecificMerge()", "name": "testDefaultBloomFilterSparseSpecificMerge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDefaultBloomFilterSparseSpecificMerge()", "original_string": "    @Test\n    public void testDefaultBloomFilterSparseSpecificMerge() {\n        final Shape shape = Shape.fromKM(3, 150);\n        final AbstractDefaultBloomFilter filter = new SparseDefaultBloomFilter(shape);\n        final AbstractDefaultBloomFilter filter2 = createFilter(shape, new IncrementingHasher(0, 1));\n        final BloomFilter newFilter = filter.copy();\n        newFilter.merge(filter2);\n        assertEquals(3, newFilter.cardinality());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "class_name": "DefaultBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest.[void]testEstimateLargeN()", "name": "testEstimateLargeN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEstimateLargeN()", "original_string": "    @Test\n    public void testEstimateLargeN() {\n        final Shape s = Shape.fromKM(1, Integer.MAX_VALUE);\n        // create a very large filter with Integer.MAX_VALUE-1 bits set.\n        final BloomFilter bf1 = new SimpleBloomFilter(s);\n        bf1.merge((BitMapExtractor) predicate -> {\n            int limit = Integer.MAX_VALUE - 1;\n            while (limit > 64) {\n                predicate.test(0xFFFFFFFFFFFFFFFFL);\n                limit -= 64;\n            }\n            long last = 0L;\n            for (int i = 0; i < limit; i++) {\n                last |= BitMaps.getLongBit(i);\n            }\n            predicate.test(last);\n            return true;\n        });\n        // the actual result of the calculation is: 46144189292, so the returned value\n        // should be Integer.MAX_VALUE.\n        assertEquals(Integer.MAX_VALUE, bf1.estimateN());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "class_name": "DefaultBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest.[void]testEstimateNWithBrokenCardinality()", "name": "testEstimateNWithBrokenCardinality", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEstimateNWithBrokenCardinality()", "original_string": "    @Test\n    public void testEstimateNWithBrokenCardinality() {\n        // build a filter\n        final BloomFilter filter1 = TestingHashers.populateEntireFilter(new BrokenCardinality(getTestShape()));\n        assertThrows(IllegalArgumentException.class, () -> filter1.estimateN());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "class_name": "DefaultBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest.[void]testHasherBasedMergeWithDifferingSparseness()", "name": "testHasherBasedMergeWithDifferingSparseness", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasherBasedMergeWithDifferingSparseness()", "original_string": "    @Test\n    public void testHasherBasedMergeWithDifferingSparseness() {\n        final Hasher hasher = new IncrementingHasher(1, 1);\n\n        BloomFilter bf1 = new NonSparseDefaultBloomFilter(getTestShape());\n        bf1.merge(hasher);\n        assertTrue(BitMapExtractor.fromIndexExtractor(hasher.indices(getTestShape()), getTestShape().getNumberOfBits())\n                .processBitMapPairs(bf1, (x, y) -> x == y));\n\n        bf1 = new SparseDefaultBloomFilter(getTestShape());\n        bf1.merge(hasher);\n        assertTrue(BitMapExtractor.fromIndexExtractor(hasher.indices(getTestShape()), getTestShape().getNumberOfBits())\n                .processBitMapPairs(bf1, (x, y) -> x == y));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "class_name": "DefaultBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest.[void]testIntersectionLimit()", "name": "testIntersectionLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIntersectionLimit()", "original_string": "    @Test\n    public void testIntersectionLimit() {\n        final Shape s = Shape.fromKM(1, Integer.MAX_VALUE);\n        // create a very large filter with Integer.MAX_VALUE-1 bit set.\n        final BloomFilter bf1 = new SimpleBloomFilter(s);\n        bf1.merge((BitMapExtractor) predicate -> {\n            int limit = Integer.MAX_VALUE - 1;\n            while (limit > 64) {\n                predicate.test(0xFFFFFFFFFFFFFFFFL);\n                limit -= 64;\n            }\n            long last = 0L;\n            for (int i = 0; i < limit; i++) {\n                last |= BitMaps.getLongBit(i);\n            }\n            predicate.test(last);\n            return true;\n        });\n        // the actual result of the calculation is: 46144189292\n        assertEquals(Integer.MAX_VALUE, bf1.estimateIntersection(bf1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "class_name": "DefaultBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest.[void]testSparseNonSparseMerging()", "name": "testSparseNonSparseMerging", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSparseNonSparseMerging()", "original_string": "    @Test\n    public void testSparseNonSparseMerging() {\n        final BloomFilter bf1 = new SparseDefaultBloomFilter(getTestShape());\n        bf1.merge(TestingHashers.FROM1);\n        final BloomFilter bf2 = new NonSparseDefaultBloomFilter(getTestShape());\n        bf2.merge(TestingHashers.FROM11);\n\n        BloomFilter result = bf1.copy();\n        result.merge(bf2);\n        assertEquals(27, result.cardinality());\n\n        result = bf2.copy();\n        result.merge(bf1);\n        assertEquals(27, result.cardinality());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "class_name": "DefaultBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java.DefaultBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest.[void]testBehaviourForEachCell()", "name": "testBehaviourForEachCell", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testBehaviourForEachCell()", "original_string": "    @Test\n    public final void testBehaviourForEachCell() {\n        final IntList list = new IntList();\n        createExtractor().processCells((i, j) -> list.add(i));\n        final int[] actual = list.toArray();\n        // check order\n        final int[] expected = Arrays.stream(actual).sorted().toArray();\n        assertArrayEquals(expected, actual);\n        // check distinct\n        final long count = Arrays.stream(actual).distinct().count();\n        assertEquals(count, actual.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java", "class_name": "AbstractCellExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the behavior of {@link CellExtractor#processCells(CellPredicate)} with respect\nto ordered and distinct indices. Currently the behavior is assumed to be the same as\n{@link IndexExtractor#processIndices(java.util.function.IntPredicate)}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest.[void]testEmptyCellExtractor()", "name": "testEmptyCellExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testEmptyCellExtractor()", "original_string": "    @Test\n    public final void testEmptyCellExtractor() {\n        final CellExtractor empty = createEmptyExtractor();\n        final int[] ary = empty.asIndexArray();\n        assertEquals(0, ary.length);\n        assertTrue(empty.processCells((i, j) -> {\n            fail(\"forEachCell consumer should not be called\");\n            return false;\n        }));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java", "class_name": "AbstractCellExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest.[void]testForEachCellEarlyExit()", "name": "testForEachCellEarlyExit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachCellEarlyExit()", "original_string": "    @Test\n    public void testForEachCellEarlyExit() {\n        final int[] passes = new int[1];\n        assertTrue(createEmptyExtractor().processCells((i, j) -> {\n            passes[0]++;\n            return false;\n        }));\n        assertEquals(0, passes[0]);\n\n        assertFalse(createExtractor().processCells((i, j) -> {\n            passes[0]++;\n            return false;\n        }));\n        assertEquals(1, passes[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java", "class_name": "AbstractCellExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest.[void]testForEachCellPredicates()", "name": "testForEachCellPredicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testForEachCellPredicates()", "original_string": "    @Test\n    public final void testForEachCellPredicates() {\n        final CellExtractor populated = createExtractor();\n        final CellExtractor empty = createEmptyExtractor();\n\n        assertFalse(populated.processCells(FALSE_CONSUMER), \"non-empty should be false\");\n        assertTrue(empty.processCells(FALSE_CONSUMER), \"empty should be true\");\n\n        assertTrue(populated.processCells(TRUE_CONSUMER), \"non-empty should be true\");\n        assertTrue(empty.processCells(TRUE_CONSUMER), \"empty should be true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java", "class_name": "AbstractCellExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest.[void]testForEachCellValues()", "name": "testForEachCellValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachCellValues()", "original_string": "    @Test\n    public void testForEachCellValues() {\n        final int[] expectedIdx = getExpectedIndices();\n        final int[] expectedValue = getExpectedValues();\n        assertEquals(expectedIdx.length, expectedValue.length, \"expected index length and value length do not match\");\n        final int[] idx = {0};\n        createExtractor().processCells((i, j) -> {\n            assertEquals(expectedIdx[idx[0]], i, \"bad index at \" + idx[0]);\n            assertEquals(expectedValue[idx[0]], j, \"bad value at \" + idx[0]);\n            idx[0]++;\n            return true;\n        });\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java", "class_name": "AbstractCellExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest.[void]testIndexConsistency()", "name": "testIndexConsistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testIndexConsistency()", "original_string": "    @Test\n    public final void testIndexConsistency() {\n        final CellExtractor extractor = createExtractor();\n        final BitSet bs1 = new BitSet();\n        final BitSet bs2 = new BitSet();\n        extractor.processIndices(i -> {\n            bs1.set(i);\n            return true;\n        });\n        extractor.processCells((i, j) -> {\n            bs2.set(i);\n            return true;\n        });\n        assertEquals(bs1, bs2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java", "class_name": "AbstractCellExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractCellExtractorTest.java.AbstractCellExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilterTest.java.SimpleBloomFilterTest.[void]testMergeShortBitMapExtractor()", "name": "testMergeShortBitMapExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMergeShortBitMapExtractor()", "original_string": "    @Test\n    public void testMergeShortBitMapExtractor() {\n        final SimpleBloomFilter filter = createEmptyFilter(getTestShape());\n        // create a bitMapExtractor that returns too few values\n        // shape expects 2 longs we are sending 1.\n        final BitMapExtractor bitMapExtractor = p -> p.test(2L);\n        assertTrue(filter.merge(bitMapExtractor));\n        assertEquals(1, filter.cardinality());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilterTest.java", "class_name": "SimpleBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/SimpleBloomFilterTest.java.SimpleBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testAsIndexArrayValues()", "name": "testAsIndexArrayValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testAsIndexArrayValues()", "original_string": "    @Test\n    public final void testAsIndexArrayValues() {\n        final BitSet bs = new BitSet();\n        Arrays.stream(createExtractor().asIndexArray()).forEach(bs::set);\n        for (final int i : getExpectedIndices()) {\n            assertTrue(bs.get(i), () -> \"Missing \" + i);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest to ensure that all expected values are generated at least once.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testBehaviourAsIndexArray()", "name": "testBehaviourAsIndexArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testBehaviourAsIndexArray()", "original_string": "    @Test\n    public final void testBehaviourAsIndexArray() {\n        final int flags = getAsIndexArrayBehaviour();\n        final int[] actual = createExtractor().asIndexArray();\n        if ((flags & ORDERED) != 0) {\n            final int[] expected = Arrays.stream(actual).sorted().toArray();\n            assertArrayEquals(expected, actual);\n        }\n        if ((flags & DISTINCT) != 0) {\n            final long count = Arrays.stream(actual).distinct().count();\n            assertEquals(count, actual.length);\n        } else {\n            // if the array is not distinct all expected elements must be generated\n            // This is modified so use a copy\n            final int[] expected = getExpectedIndices().clone();\n            Arrays.sort(expected);\n            Arrays.sort(actual);\n            assertArrayEquals(expected, actual);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the behavior of {@code IndexExtractor.asIndexArray()}.\nThe expected behavior is defined by the {@code getBehaviour()} method.\nThe index array may be Ordered, Distinct or both.\nIf the index array is not distinct then all elements returned by the {@code getExpectedIndices()}\nmethod, including duplicates, are expected to be returned by the {@code asIndexArray()} method.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testBehaviourForEachIndex()", "name": "testBehaviourForEachIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testBehaviourForEachIndex()", "original_string": "    @Test\n    public final void testBehaviourForEachIndex() {\n        final int flags = getForEachIndexBehaviour();\n        final IntList list = new IntList();\n        createExtractor().processIndices(list::add);\n        final int[] actual = list.toArray();\n        if ((flags & ORDERED) != 0) {\n            final int[] expected = Arrays.stream(actual).sorted().toArray();\n            assertArrayEquals(expected, actual);\n        }\n        if ((flags & DISTINCT) != 0) {\n            final long count = Arrays.stream(actual).distinct().count();\n            assertEquals(count, actual.length);\n        } else {\n            // if forEach is not distinct all expected elements must be generated\n            final int[] expected = getExpectedIndices().clone();\n            Arrays.sort(expected);\n            Arrays.sort(actual);\n            assertArrayEquals(expected, actual);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the behavior of {@code IndexExtractor.forEachIndex()}.\nThe expected behavior is defined by the {@code getBehaviour()} method.\nThe order is assumed to follow the order produced by {@code IndexExtractor.asIndexArray()}.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testConsistency()", "name": "testConsistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testConsistency()", "original_string": "    @Test\n    public final void testConsistency() {\n        final IndexExtractor extractor = createExtractor();\n        final BitSet bs1 = new BitSet();\n        final BitSet bs2 = new BitSet();\n        Arrays.stream(extractor.asIndexArray()).forEach(bs1::set);\n        extractor.processIndices(i -> {\n            bs2.set(i);\n            return true;\n        });\n        assertEquals(bs1, bs2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest the distinct indices output from the extractor are consistent.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testEmptyExtractor()", "name": "testEmptyExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testEmptyExtractor()", "original_string": "    @Test\n    public final void testEmptyExtractor() {\n        final IndexExtractor empty = createEmptyExtractor();\n        final int[] ary = empty.asIndexArray();\n        assertEquals(0, ary.length);\n        assertTrue(empty.processIndices(i -> {\n            throw new AssertionError(\"processIndices predictate should not be called\");\n        }));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testForEachIndex()", "name": "testForEachIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testForEachIndex()", "original_string": "    @Test\n    public final void testForEachIndex() {\n        final BitSet bs1 = new BitSet();\n        final BitSet bs2 = new BitSet();\n        Arrays.stream(getExpectedIndices()).forEach(bs1::set);\n        createExtractor().processIndices(i -> {\n            bs2.set(i);\n            return true;\n        });\n        assertEquals(bs1, bs2);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest to ensure that processIndices returns each expected index at least once.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testForEachIndexEarlyExit()", "name": "testForEachIndexEarlyExit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachIndexEarlyExit()", "original_string": "    @Test\n    public void testForEachIndexEarlyExit() {\n        final int[] passes = new int[1];\n        assertFalse(createExtractor().processIndices(i -> {\n            passes[0]++;\n            return false;\n        }));\n        assertEquals(1, passes[0]);\n\n        passes[0] = 0;\n        assertTrue(createEmptyExtractor().processIndices(i -> {\n            passes[0]++;\n            return false;\n        }));\n        assertEquals(0, passes[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testForEachIndexPredicates()", "name": "testForEachIndexPredicates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testForEachIndexPredicates()", "original_string": "    @Test\n    public final void testForEachIndexPredicates() {\n        final IndexExtractor populated = createExtractor();\n        final IndexExtractor empty = createEmptyExtractor();\n\n        assertFalse(populated.processIndices(FALSE_PREDICATE), \"non-empty should be false\");\n        assertTrue(empty.processIndices(FALSE_PREDICATE), \"empty should be true\");\n\n        assertTrue(populated.processIndices(TRUE_PREDICATE), \"non-empty should be true\");\n        assertTrue(empty.processIndices(TRUE_PREDICATE), \"empty should be true\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest.[void]testUniqueReturnsSelf()", "name": "testUniqueReturnsSelf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniqueReturnsSelf()", "original_string": "    @Test\n    public void testUniqueReturnsSelf() {\n        final IndexExtractor expected = createExtractor().uniqueIndices();\n        assertSame(expected, expected.uniqueIndices());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java", "class_name": "AbstractIndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractIndexExtractorTest.java.AbstractIndexExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java.IndexFilterTest.[void]testFilter(int,int)", "name": "testFilter", "arg_nums": 2, "params": [{"name": "k", "type": "int"}, {"name": "m", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @CsvSource({\n        \"1, 64\",\n        \"2, 64\",\n        \"3, 64\",\n        \"7, 357\",\n        \"7, 17\",\n    })\n    void testFilter(final int k, final int m)", "original_string": "    @ParameterizedTest\n    @CsvSource({\n        \"1, 64\",\n        \"2, 64\",\n        \"3, 64\",\n        \"7, 357\",\n        \"7, 17\",\n    })\n    void testFilter(final int k, final int m) {\n        final Shape shape = Shape.fromKM(k, m);\n        final BitSet used = new BitSet(m);\n        for (int n = 0; n < 10; n++) {\n            used.clear();\n            final List<Integer> consumer = new ArrayList<>();\n            final IntPredicate filter = IndexFilter.create(shape, consumer::add);\n\n            // Make random indices; these may be duplicates\n            final long seed = ThreadLocalRandom.current().nextLong();\n            final SplittableRandom rng = new SplittableRandom(seed);\n            for (int i = Math.min(k, m / 2); i-- > 0;) {\n                final int bit = rng.nextInt(m);\n                // duplicates should not alter the list size\n                final int newSize = consumer.size() + (used.get(bit) ? 0 : 1);\n                assertTrue(filter.test(bit));\n                assertEquals(newSize, consumer.size(), () -> String.format(\"Bad filter. Seed=%d, bit=%d\", seed, bit));\n                used.set(bit);\n            }\n\n            // The list should have unique entries\n            assertArrayEquals(used.stream().toArray(), consumer.stream().mapToInt(i -> (int) i).sorted().toArray());\n            final int size = consumer.size();\n\n            // Second observations do not change the list size\n            used.stream().forEach(bit -> {\n                assertTrue(filter.test(bit));\n                assertEquals(size, consumer.size(), () -> String.format(\"Bad filter. Seed=%d, bit=%d\", seed, bit));\n            });\n\n            assertThrows(IndexOutOfBoundsException.class, () -> filter.test(m));\n            assertThrows(IndexOutOfBoundsException.class, () -> filter.test(-1));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java", "class_name": "IndexFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java.IndexFilterTest", "attributes": {"modifiers": "@ParameterizedTest\n    @CsvSource({\n        \"1, 64\",\n        \"2, 64\",\n        \"3, 64\",\n        \"7, 357\",\n        \"7, 17\",\n    })", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@CsvSource({\n        \"1, 64\",\n        \"2, 64\",\n        \"3, 64\",\n        \"7, 357\",\n        \"7, 17\",\n    })"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java.IndexFilterTest.[void]testFiltering()", "name": "testFiltering", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFiltering()", "original_string": "    @Test\n    public void testFiltering() {\n        final Shape shape = Shape.fromKM(3, 12);\n        final List<Integer> consumer = new ArrayList<>();\n        final IntPredicate filter = IndexFilter.create(shape, consumer::add);\n\n        for (int i = 0; i < 12; i++) {\n            assertTrue(filter.test(i));\n        }\n        assertEquals(12, consumer.size());\n\n        for (int i = 0; i < 12; i++) {\n            assertTrue(filter.test(i));\n        }\n        assertEquals(12, consumer.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java", "class_name": "IndexFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexFilterTest.java.IndexFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java.IndexExtractorTest.[void]testAsIndexArray(int)", "name": "testAsIndexArray", "arg_nums": 1, "params": [{"name": "n", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {32, 33})\n    void testAsIndexArray(final int n)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {32, 33})\n    void testAsIndexArray(final int n) {\n        final IndexExtractor ip = i -> {\n            for (int j = 0; j < n; j++) {\n                // Always test index zero\n                i.test(0);\n            }\n            return true;\n        };\n        Assertions.assertArrayEquals(new int[n], ip.asIndexArray());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java", "class_name": "IndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java.IndexExtractorTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {32, 33})", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {32, 33})"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java.IndexExtractorTest.[void]testFromBitMapExtractor()", "name": "testFromBitMapExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromBitMapExtractor()", "original_string": "    @Test\n    public void testFromBitMapExtractor() {\n        TestingBitMapExtractor testingBitMapExtractor = new TestingBitMapExtractor(new long[] {1L, 2L, 3L});\n        IndexExtractor underTest = IndexExtractor.fromBitMapExtractor(testingBitMapExtractor);\n        List<Integer> lst = new ArrayList<>();\n\n        underTest.processIndices(lst::add);\n        assertEquals(4, lst.size());\n        assertEquals(Integer.valueOf(0), lst.get(0));\n        assertEquals(Integer.valueOf(1 + 64), lst.get(1));\n        assertEquals(Integer.valueOf(0 + 128), lst.get(2));\n        assertEquals(Integer.valueOf(1 + 128), lst.get(3));\n\n        testingBitMapExtractor = new TestingBitMapExtractor(new long[] {0xFFFFFFFFFFFFFFFFL});\n        underTest = IndexExtractor.fromBitMapExtractor(testingBitMapExtractor);\n        lst = new ArrayList<>();\n\n        underTest.processIndices(lst::add);\n\n        assertEquals(64, lst.size());\n        for (int i = 0; i < 64; i++) {\n            assertEquals(Integer.valueOf(i), lst.get(i));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java", "class_name": "IndexExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/IndexExtractorTest.java.IndexExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testAsBloomFilterArray()", "name": "testAsBloomFilterArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsBloomFilterArray()", "original_string": "    @Test\n    public void testAsBloomFilterArray() {\n        final BloomFilter[] result = createUnderTest().asBloomFilterArray();\n        assertEquals(2, result.length);\n        assertEquals(1, result[0].cardinality());\n        assertEquals(2, result[1].cardinality());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testFlatten()", "name": "testFlatten", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlatten()", "original_string": "    @Test\n    public void testFlatten() {\n        final BloomFilter underTest = createUnderTest().flatten();\n        final BloomFilter expected = new SimpleBloomFilter(shape);\n        expected.merge(IndexExtractor.fromIndexArray(1, 2, 3));\n        assertArrayEquals(expected.asBitMapArray(), underTest.asBitMapArray());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testForEachPairArrayTooLong()", "name": "testForEachPairArrayTooLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachPairArrayTooLong()", "original_string": "    @Test\n    public void testForEachPairArrayTooLong() {\n        assertTrue(createUnderTest().processBloomFilterPair(BloomFilterExtractor.fromBloomFilterArray(one, two, one),\n                counter));\n        assertEquals(1, nullCount[0]);\n        assertEquals(0, nullCount[1]);\n        assertEquals(2, equalityCount[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testForEachPairArrayTooShort()", "name": "testForEachPairArrayTooShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachPairArrayTooShort()", "original_string": "    @Test\n    public void testForEachPairArrayTooShort() {\n        assertTrue(createUnderTest().processBloomFilterPair(BloomFilterExtractor.fromBloomFilterArray(one), counter));\n        assertEquals(0, nullCount[0]);\n        assertEquals(1, nullCount[1]);\n        assertEquals(1, equalityCount[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testForEachPairCompleteMatch()", "name": "testForEachPairCompleteMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachPairCompleteMatch()", "original_string": "    @Test\n    public void testForEachPairCompleteMatch() {\n        assertTrue(createUnderTest().processBloomFilterPair(createUnderTest(), counter));\n        assertArrayEquals(new int[] { 0, 0 }, nullCount);\n        assertEquals(2, equalityCount[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testForEachPairReturnFalseEarly()", "name": "testForEachPairReturnFalseEarly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachPairReturnFalseEarly()", "original_string": "    @Test\n    public void testForEachPairReturnFalseEarly() {\n        assertFalse(createUnderTest().processBloomFilterPair(BloomFilterExtractor.fromBloomFilterArray(one, two, one),\n                (x, y) -> false));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testForEachPairReturnFalseLate()", "name": "testForEachPairReturnFalseLate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachPairReturnFalseLate()", "original_string": "    @Test\n    public void testForEachPairReturnFalseLate() {\n        assertFalse(createUnderTest().processBloomFilterPair(BloomFilterExtractor.fromBloomFilterArray(one, two, one),\n                counter.and((x, y) -> x != null && y != null)));\n        assertEquals(1, nullCount[0]);\n        assertEquals(0, nullCount[1]);\n        assertEquals(2, equalityCount[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest.[void]testForEachPairReturnFalseLateShortArray()", "name": "testForEachPairReturnFalseLateShortArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForEachPairReturnFalseLateShortArray()", "original_string": "    @Test\n    public void testForEachPairReturnFalseLateShortArray() {\n        assertFalse(createUnderTest().processBloomFilterPair(BloomFilterExtractor.fromBloomFilterArray(one),\n                counter.and((x, y) -> x != null && y != null)));\n        assertEquals(0, nullCount[0]);\n        assertEquals(1, nullCount[1]);\n        assertEquals(1, equalityCount[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java", "class_name": "AbstractBloomFilterExtractorTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterExtractorTest.java.AbstractBloomFilterExtractorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testBadNumberOfBits()", "name": "testBadNumberOfBits", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBadNumberOfBits()", "original_string": "    @Test\n    public void testBadNumberOfBits() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromKM(5, 0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(5, 0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNMK(5, 0, 7));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromPMK(0.035, 0, 7));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that if the number of bits is less than 1 an exception is thrown\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testBadNumberOfHashFunctions()", "name": "testBadNumberOfHashFunctions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBadNumberOfHashFunctions()", "original_string": "    @Test\n    public void testBadNumberOfHashFunctions() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromKM(0, 7));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNMK(5, 26, 0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromPMK(0.35, 26, 0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(2, 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that if the number of hash functions is less than 1 an exception is thrown.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testBadNumberOfItems()", "name": "testBadNumberOfItems", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBadNumberOfItems()", "original_string": "    @Test\n    public void testBadNumberOfItems() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(0, 24));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNMK(0, 24, 5));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(0, 0.02));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that if the number of items less than 1 an IllegalArgumentException is thrown.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testBadProbability()", "name": "testBadProbability", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBadProbability()", "original_string": "    @Test\n    public void testBadProbability() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNMK(4000, 8, 1));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(10, 0.0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(10, 1.0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(10, Double.NaN));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(10, Double.POSITIVE_INFINITY));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(10, Double.NEGATIVE_INFINITY));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that if the calculated probability is greater than or equal to 1 an IllegalArgumentException is thrown\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testEqualsAndHashCode(int,int)", "name": "testEqualsAndHashCode", "arg_nums": 2, "params": [{"name": "k", "type": "int"}, {"name": "m", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @CsvSource({\n        \"3, 24\",\n        \"1, 24\",\n        \"1, 1\",\n        \"13, 124\",\n        \"13, 224\",\n    })\n    public void testEqualsAndHashCode(final int k, final int m)", "original_string": "    @ParameterizedTest\n    @CsvSource({\n        \"3, 24\",\n        \"1, 24\",\n        \"1, 1\",\n        \"13, 124\",\n        \"13, 224\",\n    })\n    public void testEqualsAndHashCode(final int k, final int m) {\n        final Shape shape1 = Shape.fromKM(k, m);\n        assertEquals(shape1, shape1);\n        assertEquals(Arrays.hashCode(new int[] {m, k}), shape1.hashCode(),\n            \"Doesn't match Arrays.hashCode(new int[] {m, k})\");\n        assertNotEquals(shape1, null);\n        assertNotEquals(shape1, \"text\");\n        assertNotEquals(shape1, Integer.valueOf(3));\n        assertNotEquals(shape1, Shape.fromKM(k, m + 1));\n        assertNotEquals(shape1, Shape.fromKM(k + 1, m));\n\n        // Test this is reproducible\n        final Shape shape2 = Shape.fromKM(k, m);\n        assertEquals(shape1, shape2);\n        assertEquals(shape1.hashCode(), shape2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@ParameterizedTest\n    @CsvSource({\n        \"3, 24\",\n        \"1, 24\",\n        \"1, 1\",\n        \"13, 124\",\n        \"13, 224\",\n    })\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@CsvSource({\n        \"3, 24\",\n        \"1, 24\",\n        \"1, 1\",\n        \"13, 124\",\n        \"13, 224\",\n    })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest equality of shape.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testEstimateN()", "name": "testEstimateN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEstimateN()", "original_string": "    @Test\n    public void testEstimateN() {\n        for (int i = 0; i < 24; i++) {\n            final double c = i;\n            final double expected = -(24.0 / 3.0) * Math.log1p(-c / 24.0);\n            assertEquals(expected, shape.estimateN(i), \"Error on \" + i);\n        }\n\n        assertEquals(Double.POSITIVE_INFINITY, shape.estimateN(24));\n\n        assertEquals(Double.NaN, shape.estimateN(25));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nvalues from https://hur.st/bloomfilter/?n=5&p=.1&m=&k=\n\nn = 5\n\np = 0.100375138 (1 in 10)\n\nm = 24 (3B)\n\nk = 3\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testFromKM()", "name": "testFromKM", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromKM()", "original_string": "    @Test\n    public void testFromKM() {\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromKM(5, 0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromKM(0, 5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that if the number of bits less than 1 an IllegalArgumentException is thrown.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testFromNM()", "name": "testFromNM", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromNM()", "original_string": "    @Test\n    public void testFromNM() {\n        /*\n         * values from https://hur.st/bloomfilter/?n=5&m=24\n         */\n        final Shape shape = Shape.fromNM(5, 24);\n\n        assertEquals(24, shape.getNumberOfBits());\n        assertEquals(3, shape.getNumberOfHashFunctions());\n        assertEquals(0.100375138, shape.getProbability(5), 0.000001);\n\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(5, 0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNM(0, 5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the number of items and number of bits is passed the other values are calculated correctly.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testFromNMK()", "name": "testFromNMK", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromNMK()", "original_string": "    @Test\n    public void testFromNMK() {\n        /*\n         * values from https://hur.st/bloomfilter/?n=5&m=24&k=4\n         */\n        final Shape shape = Shape.fromNMK(5, 24, 4);\n\n        assertEquals(24, shape.getNumberOfBits());\n        assertEquals(4, shape.getNumberOfHashFunctions());\n        assertEquals(0.102194782, shape.getProbability(5), 0.000001);\n\n        assertThrows(IllegalArgumentException.class,\n                () -> Shape.fromNMK(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNMK(5, 5, 0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNMK(5, 0, 5));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNMK(0, 5, 5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that when the number of items, number of bits and number of hash functions is passed the values are\ncalculated correctly.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testFromNP()", "name": "testFromNP", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromNP()", "original_string": "    @Test\n    public void testFromNP() {\n        /*\n         * values from https://hur.st/bloomfilter/?n=5&p=.1&m=24&k=3\n         */\n        final double probability = 1.0 / 2000000;\n        final Shape shape = Shape.fromNP(10, probability);\n\n        assertEquals(302, shape.getNumberOfBits());\n        assertEquals(21, shape.getNumberOfHashFunctions());\n\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(Integer.MAX_VALUE, Math.nextDown(1.0)));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(0, probability));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(5, 0.0));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(Integer.MAX_VALUE, Math.nextUp(0.0)));\n        // Test that if calculated number of bits is greater than Integer.MAX_VALUE an\n        // IllegalArgumentException is thrown.\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromNP(Integer.MAX_VALUE, 0.1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the calculated values of calling the constructor with the probability, number of bits and number of hash\nfunctions.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testFromPMK()", "name": "testFromPMK", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromPMK()", "original_string": "    @Test\n    public void testFromPMK() {\n        /*\n         * values from https://hur.st/bloomfilter/?n=5&p=.1&m=24&k=3\n         */\n        Shape shape = Shape.fromPMK(0.1, 24, 3);\n\n        assertEquals(24, shape.getNumberOfBits());\n        assertEquals(3, shape.getNumberOfHashFunctions());\n        assertEquals(0.100375138, shape.getProbability(5), 0.000001);\n\n        assertThrows(IllegalArgumentException.class,\n                () -> Shape.fromPMK(Math.nextDown(1.0), Integer.MAX_VALUE, Integer.MAX_VALUE));\n        shape = Shape.fromPMK(Math.nextUp(0.0), 5, 5);\n        assertEquals(1.0, shape.getProbability(Integer.MAX_VALUE));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromPMK(Math.nextDown(1.0), 5, 5));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromPMK(0.0, 5, 5));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromPMK(0.5, 0, 5));\n        assertThrows(IllegalArgumentException.class, () -> Shape.fromPMK(0.5, 5, 0));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the calculated values of calling the constructor with the probability, number of bits and number of hash\nfunctions.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testGetProbability()", "name": "testGetProbability", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetProbability()", "original_string": "    @Test\n    public void testGetProbability() {\n        for (int i = 0; i <= 24; i++) {\n            final double expected = Math.pow(-Math.expm1(-3.0 * i / 24), 3);\n            assertEquals(expected, shape.getProbability(i), \"error at \" + i);\n        }\n\n        assertEquals(0.0, shape.getProbability(0), 0.0);\n\n        assertThrows(IllegalArgumentException.class, () -> shape.getProbability(-1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testIsSparse()", "name": "testIsSparse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsSparse()", "original_string": "    @Test\n    public void testIsSparse() {\n        final int functions = 1; // Ignored\n        for (int i = 1; i <= 3; i++) {\n            final int bits = i * Long.SIZE;\n            final Shape shape = Shape.fromKM(functions, bits);\n            for (int n = 0; n <= bits; n++) {\n                final int c = n;\n                // is sparse when number of bits stored as integers is less than 2 times the\n                // number of bitmaps\n                assertEquals(n * Integer.SIZE <= Math.ceil((double) bits / Long.SIZE) * Long.SIZE,\n                        shape.isSparse(n), () -> String.format(\"n=%d : bits=%d\", c, bits));\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testProbability()", "name": "testProbability", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testProbability()", "original_string": "    @Test\n    public void testProbability() {\n        final Shape shape = Shape.fromNMK(5, 24, 3);\n        assertEquals(24, shape.getNumberOfBits());\n        assertEquals(3, shape.getNumberOfHashFunctions());\n        assertEquals(0.100375138, shape.getProbability(5), 0.000001);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the probability is calculated correctly.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        assertEquals(\"Shape[k=3 m=5]\", Shape.fromKM(3, 5).toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java", "class_name": "ShapeTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/ShapeTest.java.ShapeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/WrappedBloomFilterTest.java.WrappedBloomFilterTest.[void]testCharacteristics(int)", "name": "testCharacteristics", "arg_nums": 1, "params": [{"name": "characteristics", "type": "int"}], "return_type": "void", "signature": "@ParameterizedTest\n    @ValueSource(ints = {0, 1, 34})\n    public void testCharacteristics(final int characteristics)", "original_string": "    @ParameterizedTest\n    @ValueSource(ints = {0, 1, 34})\n    public void testCharacteristics(final int characteristics) {\n        final Shape shape = getTestShape();\n        final BloomFilter inner = new DefaultBloomFilterTest.SparseDefaultBloomFilter(shape) {\n            @Override\n            public int characteristics() {\n                return characteristics;\n            }\n        };\n        final WrappedBloomFilter underTest = new WrappedBloomFilter(inner) {\n            @Override\n            public BloomFilter copy() {\n                final BloomFilter result = new DefaultBloomFilterTest.SparseDefaultBloomFilter(shape);\n                result.merge(getWrapped());\n                return result;\n            }\n        };\n        assertEquals(characteristics, underTest.characteristics());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/WrappedBloomFilterTest.java", "class_name": "WrappedBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/WrappedBloomFilterTest.java.WrappedBloomFilterTest", "attributes": {"modifiers": "@ParameterizedTest\n    @ValueSource(ints = {0, 1, 34})\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@ValueSource(ints = {0, 1, 34})", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java.BitMapExtractorFromLongArrayTest.[void]constructorTest()", "name": "constructorTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void constructorTest()", "original_string": "    @Test\n    public void constructorTest() {\n        final List<Long> lst = new ArrayList<>();\n        createExtractor().processBitMaps(lst::add);\n        assertEquals(Long.valueOf(1), lst.get(0));\n        assertEquals(Long.valueOf(2), lst.get(1));\n        assertEquals(Long.valueOf(3), lst.get(2));\n        assertEquals(Long.valueOf(4), lst.get(3));\n        assertEquals(Long.valueOf(5), lst.get(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java", "class_name": "BitMapExtractorFromLongArrayTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java.BitMapExtractorFromLongArrayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java.BitMapExtractorFromLongArrayTest.[void]testFromIndexExtractor()", "name": "testFromIndexExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFromIndexExtractor()", "original_string": "    @Test\n    public void testFromIndexExtractor() {\n        final int limit = Integer.SIZE + Long.SIZE;\n        final IndexExtractor indexExtractor = consumer -> {\n            for (int i = 0; i < limit; i++) {\n                if (!consumer.test(i)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        final BitMapExtractor bitMapExtractor = BitMapExtractor.fromIndexExtractor(indexExtractor, limit);\n        final List<Long> lst = new ArrayList<>();\n        bitMapExtractor.processBitMaps(lst::add);\n        long expected = ~0L;\n        assertEquals(expected, lst.get(0).longValue());\n        expected &= 0XFFFFFFFFL;\n        assertEquals(expected, lst.get(1).longValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java", "class_name": "BitMapExtractorFromLongArrayTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/BitMapExtractorFromLongArrayTest.java.BitMapExtractorFromLongArrayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testCardinalityAndIsEmpty()", "name": "testCardinalityAndIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testCardinalityAndIsEmpty()", "original_string": "    @Override\n    @Test\n    public void testCardinalityAndIsEmpty() {\n        final LayerManager<BloomFilter> layerManager = LayerManager.builder().setExtendCheck(ExtendCheck.neverAdvance())\n                .setSupplier(() -> new SimpleBloomFilter(getTestShape())).get();\n        testCardinalityAndIsEmpty(new LayeredBloomFilter<>(getTestShape(), layerManager));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testCleanup()", "name": "testCleanup", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCleanup()", "original_string": "    @Test\n    public void testCleanup() {\n        final int[] sequence = {1};\n        final LayerManager layerManager = LayerManager.builder()\n                .setSupplier(() -> new NumberedBloomFilter(getTestShape(), 3, sequence[0]++))\n                .setExtendCheck(ExtendCheck.neverAdvance())\n                .setCleanup(ll -> ll.removeIf( f -> (((NumberedBloomFilter) f).value-- == 0))).get();\n        final LayeredBloomFilter underTest = new LayeredBloomFilter(getTestShape(), layerManager );\n        assertEquals(1, underTest.getDepth());\n        underTest.merge(TestingHashers.randomHasher());\n        underTest.cleanup(); // first count == 2\n        assertEquals(1, underTest.getDepth());\n        underTest.next(); // first count == 1\n        assertEquals(2, underTest.getDepth());\n        underTest.merge(TestingHashers.randomHasher());\n        underTest.cleanup(); // first count == 0\n        NumberedBloomFilter f = (NumberedBloomFilter) underTest.get(0);\n        assertEquals(1, f.sequence);\n\n        assertEquals(2, underTest.getDepth());\n        underTest.cleanup(); // should be removed ; second is now 1st with value 1\n        assertEquals(1, underTest.getDepth());\n        f = (NumberedBloomFilter) underTest.get(0);\n        assertEquals(2, f.sequence);\n\n        underTest.cleanup(); // first count == 0\n        underTest.cleanup(); // should be removed.  But there is always at least one\n        assertEquals(1, underTest.getDepth());\n        f = (NumberedBloomFilter) underTest.get(0);\n        assertEquals(3, f.sequence);  // it is a new one.\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " ***** TESTS THAT CHECK LAYERED PROCESSING ******"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testEstimateUnionCrossTypes()", "name": "testEstimateUnionCrossTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testEstimateUnionCrossTypes()", "original_string": "    @Test\n    public final void testEstimateUnionCrossTypes() {\n        final BloomFilter bf = createFilter(getTestShape(), TestingHashers.FROM1);\n        final BloomFilter bf2 = new DefaultBloomFilterTest.SparseDefaultBloomFilter(getTestShape());\n        bf2.merge(TestingHashers.FROM11);\n\n        assertEquals(2, bf.estimateUnion(bf2));\n        assertEquals(2, bf2.estimateUnion(bf));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the estimated union calculations are correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testExpiration()", "name": "testExpiration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExpiration()", "original_string": "    @Test\n    public void testExpiration() throws InterruptedException {\n        // this test uses the instrumentation noted above to track changes for debugging\n        // purposes.\n\n        // list of timestamps that are expected to be expired.\n        final List<Instant> lst = new ArrayList<>();\n        final Shape shape = Shape.fromNM(4, 64);\n\n        // create a filter that removes filters that are 4 seconds old\n        // and quantises time to 1 second intervals.\n        final LayeredBloomFilter<TimestampedBloomFilter> underTest = createTimedLayeredFilter(shape, Duration.ofMillis(600), Duration.ofMillis(150));\n\n        for (int i = 0; i < 10; i++) {\n            underTest.merge(TestingHashers.randomHasher());\n        }\n        underTest.processBloomFilters(dbg.and(x -> lst.add(((TimestampedBloomFilter) x).timestamp)));\n        assertTrue(underTest.getDepth() > 1);\n\n        Thread.sleep(300);\n        for (int i = 0; i < 10; i++) {\n            underTest.merge(TestingHashers.randomHasher());\n        }\n        dbgInstrument.add(\"=== AFTER 300 milliseconds ====\\n\");\n        underTest.processBloomFilters(dbg);\n\n        Thread.sleep(150);\n        for (int i = 0; i < 10; i++) {\n            underTest.merge(TestingHashers.randomHasher());\n        }\n        dbgInstrument.add(\"=== AFTER 450 milliseconds ====\\n\");\n        underTest.processBloomFilters(dbg);\n\n        // sleep 200 milliseconds to ensure we cross the 600 millisecond boundary\n        Thread.sleep(200);\n        underTest.merge(TestingHashers.randomHasher());\n        dbgInstrument.add(\"=== AFTER 600 milliseconds ====\\n\");\n        assertTrue(underTest.processBloomFilters(dbg.and(x -> !lst.contains(((TimestampedBloomFilter) x).timestamp))),\n                \"Found filter that should have been deleted: \" + dbgInstrument.get(dbgInstrument.size() - 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testFindBitMapExtractor()", "name": "testFindBitMapExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindBitMapExtractor()", "original_string": "    @Test\n    public void testFindBitMapExtractor() {\n        final LayeredBloomFilter<BloomFilter> filter = setupFindTest();\n\n        IndexExtractor indexExtractor = TestingHashers.FROM1.indices(getTestShape());\n        BitMapExtractor bitMapExtractor = BitMapExtractor.fromIndexExtractor(indexExtractor, getTestShape().getNumberOfBits());\n\n        int[] expected = {0, 3};\n        int[] result = filter.find(bitMapExtractor);\n        assertArrayEquals(expected, result);\n\n        expected = new int[]{1, 3};\n        indexExtractor = TestingHashers.FROM11.indices(getTestShape());\n        bitMapExtractor = BitMapExtractor.fromIndexExtractor(indexExtractor, getTestShape().getNumberOfBits());\n        result = filter.find(bitMapExtractor);\n        assertArrayEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testFindBloomFilter()", "name": "testFindBloomFilter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindBloomFilter()", "original_string": "    @Test\n    public void testFindBloomFilter() {\n        final LayeredBloomFilter<BloomFilter> filter = setupFindTest();\n        int[] expected = {0, 3};\n        int[] result = filter.find(TestingHashers.FROM1);\n        assertArrayEquals(expected, result);\n        expected = new int[] {1, 3};\n        result = filter.find(TestingHashers.FROM11);\n        assertArrayEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testFindIndexExtractor()", "name": "testFindIndexExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindIndexExtractor()", "original_string": "    @Test\n    public void testFindIndexExtractor() {\n        IndexExtractor indexExtractor = TestingHashers.FROM1.indices(getTestShape());\n        final LayeredBloomFilter<BloomFilter> filter = setupFindTest();\n\n        int[] expected = {0, 3};\n        int[] result = filter.find(indexExtractor);\n        assertArrayEquals(expected, result);\n\n        expected = new int[] {1, 3};\n        indexExtractor = TestingHashers.FROM11.indices(getTestShape());\n        result = filter.find(indexExtractor);\n        assertArrayEquals(expected, result);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testGetLayer()", "name": "testGetLayer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testGetLayer()", "original_string": "    @Test\n    public final void testGetLayer() {\n        final BloomFilter bf = new SimpleBloomFilter(getTestShape());\n        bf.merge(TestingHashers.FROM11);\n        final LayeredBloomFilter<BloomFilter> filter = LayeredBloomFilterTest.fixed(getTestShape(), 10);\n        filter.merge(TestingHashers.FROM1);\n        filter.merge(TestingHashers.FROM11);\n        filter.merge(new IncrementingHasher(11, 2));\n        filter.merge(TestingHashers.populateFromHashersFrom1AndFrom11(new SimpleBloomFilter(getTestShape())));\n        assertArrayEquals(bf.asBitMapArray(), filter.get(1).asBitMapArray());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testMultipleFilters()", "name": "testMultipleFilters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleFilters()", "original_string": "    @Test\n    public void testMultipleFilters() {\n        final LayeredBloomFilter<BloomFilter> filter = LayeredBloomFilterTest.fixed(getTestShape(), 10);\n        filter.merge(TestingHashers.FROM1);\n        filter.merge(TestingHashers.FROM11);\n        assertEquals(2, filter.getDepth());\n        assertTrue(filter.contains(makeFilter(TestingHashers.FROM1)));\n        assertTrue(filter.contains(makeFilter(TestingHashers.FROM11)));\n        final BloomFilter t1 = makeFilter(6, 7, 17, 18, 19);\n        assertFalse(filter.contains(t1));\n        assertFalse(filter.copy().contains(t1));\n        assertTrue(filter.flatten().contains(t1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest.[void]testNext()", "name": "testNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testNext()", "original_string": "    @Test\n    public final void testNext() {\n        final LayerManager<BloomFilter> layerManager = LayerManager.builder().setSupplier(() -> new SimpleBloomFilter(getTestShape()))\n                .get();\n\n        final LayeredBloomFilter<BloomFilter> filter = new LayeredBloomFilter<>(getTestShape(), layerManager);\n        filter.merge(TestingHashers.FROM1);\n        filter.merge(TestingHashers.FROM11);\n        assertEquals(1, filter.getDepth());\n        filter.next();\n        filter.merge(new IncrementingHasher(11, 2));\n        assertEquals(2, filter.getDepth());\n        assertTrue(filter.get(0).contains(TestingHashers.FROM1));\n        assertTrue(filter.get(0).contains(TestingHashers.FROM11));\n        assertFalse(filter.get(0).contains(new IncrementingHasher(11, 2)));\n        assertFalse(filter.get(1).contains(TestingHashers.FROM1));\n        assertFalse(filter.get(1).contains(TestingHashers.FROM11));\n        assertTrue(filter.get(1).contains(new IncrementingHasher(11, 2)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java", "class_name": "LayeredBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/LayeredBloomFilterTest.java.LayeredBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testAsBitMapArray()", "name": "testAsBitMapArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testAsBitMapArray()", "original_string": "    @Test\n    public final void testAsBitMapArray() {\n\n        // test when multiple long values are returned.\n        final IncrementingHasher hasher = new IncrementingHasher(63, 1);\n        final BloomFilter bf = createFilter(Shape.fromKM(2, 72), hasher);\n        final long[] lb = bf.asBitMapArray();\n        assertEquals(2, lb.length);\n        assertEquals(0x8000000000000000L, lb[0]);\n        assertEquals(0x1, lb[1]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that asBitMapArray works correctly.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testBitMapExtractorSize()", "name": "testBitMapExtractorSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBitMapExtractorSize()", "original_string": "    @Test\n    public void testBitMapExtractorSize() {\n        final int[] idx = new int[1];\n        createFilter(getTestShape(), TestingHashers.FROM1).processBitMaps(i -> {\n            idx[0]++;\n            return true;\n        });\n        assertEquals(BitMaps.numberOfBitMaps(getTestShape().getNumberOfBits()), idx[0]);\n\n        idx[0] = 0;\n        createEmptyFilter(getTestShape()).processBitMaps(i -> {\n            idx[0]++;\n            return true;\n        });\n        assertEquals(BitMaps.numberOfBitMaps(getTestShape().getNumberOfBits()), idx[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testCardinalityAndIsEmpty()", "name": "testCardinalityAndIsEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCardinalityAndIsEmpty()", "original_string": "    @Test\n    public void testCardinalityAndIsEmpty() {\n        testCardinalityAndIsEmpty(createEmptyFilter(getTestShape()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testClear()", "name": "testClear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClear()", "original_string": "    @Test\n    public void testClear() {\n        final BloomFilter bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        assertNotEquals(0, bf1.cardinality());\n        bf1.clear();\n        assertEquals(0, bf1.cardinality());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testContains()", "name": "testContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testContains()", "original_string": "    @Test\n    public final void testContains() {\n        BloomFilter bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        final BloomFilter bf2 = TestingHashers.populateFromHashersFrom1AndFrom11(createEmptyFilter(getTestShape()));\n\n        assertTrue(bf1.contains(bf1), \"BF1 Should contain itself\");\n        assertTrue(bf2.contains(bf2), \"BF2 Should contain itself\");\n        assertFalse(bf1.contains(bf2), \"BF1 should not contain BF2\");\n        assertTrue(bf2.contains(bf1), \"BF2 should contain BF1\");\n\n        assertTrue(bf2.contains(new IncrementingHasher(1, 1)), \"BF2 Should contain this hasher\");\n        assertFalse(bf2.contains(new IncrementingHasher(1, 3)), \"BF2 Should not contain this hasher\");\n\n        IndexExtractor indexExtractor = new IncrementingHasher(1, 1).indices(getTestShape());\n        assertTrue(bf2.contains(indexExtractor), \"BF2 Should contain this hasher\");\n        indexExtractor = new IncrementingHasher(1, 3).indices(getTestShape());\n        assertFalse(bf2.contains(indexExtractor), \"BF2 Should not contain this hasher\");\n\n        BitMapExtractor bitMapExtractor = BitMapExtractor.fromIndexExtractor(new IncrementingHasher(1, 1).indices(getTestShape()),\n                getTestShape().getNumberOfBits());\n        assertTrue(bf2.contains(bitMapExtractor), \"BF2 Should contain this hasher\");\n        bitMapExtractor = BitMapExtractor.fromIndexExtractor(new IncrementingHasher(1, 3).indices(getTestShape()), getTestShape().getNumberOfBits());\n        assertFalse(bf2.contains(bitMapExtractor), \"BF2 Should not contain this hasher\");\n\n        // Test different lengths\n        bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        final BloomFilter bf3 = createFilter(Shape.fromKM(getTestShape().getNumberOfHashFunctions(), Long.SIZE - 1), TestingHashers.FROM1);\n        assertTrue(bf1.contains(bf3));\n        assertTrue(bf3.contains(bf1));\n\n        final BloomFilter bf4 = TestingHashers.populateRange(createEmptyFilter(Shape.fromKM(getTestShape().getNumberOfHashFunctions(), Long.SIZE - 1)), 1,\n                11 + getTestShape().getNumberOfHashFunctions());\n\n        assertFalse(bf1.contains(bf4));\n        assertTrue(bf4.contains(bf1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testEmptyAfterMergeWithNothing()", "name": "testEmptyAfterMergeWithNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyAfterMergeWithNothing()", "original_string": "    @Test\n    public void testEmptyAfterMergeWithNothing() {\n        // test the case where is empty after merge\n        // in this case the internal cardinality == -1\n        final BloomFilter bf = createEmptyFilter(getTestShape());\n        bf.merge(IndexExtractor.fromIndexArray());\n        assertTrue(bf.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testEstimateIntersection()", "name": "testEstimateIntersection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testEstimateIntersection()", "original_string": "    @Test\n    public final void testEstimateIntersection() {\n        final BloomFilter bf = createFilter(getTestShape(), TestingHashers.FROM1);\n        final BloomFilter bf2 = TestingHashers.populateFromHashersFrom1AndFrom11(createEmptyFilter(getTestShape()));\n\n        final BloomFilter bf3 = TestingHashers.populateEntireFilter(createEmptyFilter(getTestShape()));\n\n        assertEquals(1, bf.estimateIntersection(bf2));\n        assertEquals(1, bf2.estimateIntersection(bf));\n        assertEquals(1, bf.estimateIntersection(bf3));\n        assertEquals(1, bf2.estimateIntersection(bf));\n        assertEquals(2, bf3.estimateIntersection(bf2));\n\n        final BloomFilter bf4 = createEmptyFilter(getTestShape());\n\n        assertEquals(0, bf.estimateIntersection(bf4));\n        assertEquals(0, bf4.estimateIntersection(bf));\n\n        final int midPoint = getTestShape().getNumberOfBits() / 2;\n        final BloomFilter bf5 = TestingHashers.populateRange(createEmptyFilter(getTestShape()), 0, midPoint);\n        final BloomFilter bf6 = TestingHashers.populateRange(createEmptyFilter(getTestShape()), midPoint + 1, getTestShape().getNumberOfBits() - 1);\n        assertThrows(IllegalArgumentException.class, () -> bf5.estimateIntersection(bf6));\n\n        // infinite with infinite\n        assertEquals(Integer.MAX_VALUE, bf3.estimateIntersection(bf3));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the estimated intersection calculations are correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testEstimateN()", "name": "testEstimateN", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testEstimateN()", "original_string": "    @Test\n    public final void testEstimateN() {\n        // build a filter\n        BloomFilter filter1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        assertEquals(1, filter1.estimateN());\n\n        // the data provided above do not generate an estimate that is equivalent to the\n        // actual.\n        filter1.merge(new IncrementingHasher(4, 1));\n        assertEquals(1, filter1.estimateN());\n\n        filter1.merge(new IncrementingHasher(17, 1));\n\n        assertEquals(3, filter1.estimateN());\n\n        filter1 = TestingHashers.populateEntireFilter(createEmptyFilter(getTestShape()));\n        assertEquals(Integer.MAX_VALUE, filter1.estimateN());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the size estimate is correctly calculated.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testEstimateUnion()", "name": "testEstimateUnion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testEstimateUnion()", "original_string": "    @Test\n    public final void testEstimateUnion() {\n        final BloomFilter bf = createFilter(getTestShape(), TestingHashers.FROM1);\n        final BloomFilter bf2 = createFilter(getTestShape(), TestingHashers.FROM11);\n\n        assertEquals(2, bf.estimateUnion(bf2));\n        assertEquals(2, bf2.estimateUnion(bf));\n\n        final BloomFilter bf3 = createEmptyFilter(getTestShape());\n\n        assertEquals(1, bf.estimateUnion(bf3));\n        assertEquals(1, bf3.estimateUnion(bf));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that the estimated union calculations are correct.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testIndexExtractorMerge()", "name": "testIndexExtractorMerge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexExtractorMerge()", "original_string": "    @Test\n    public void testIndexExtractorMerge() {\n        final Shape shape = Shape.fromKM(5, 10);\n\n        assertIndexExtractorMerge(shape, new int[] {0, 2, 4, 6, 8}, new int[] {0, 2, 4, 6, 8});\n        // test duplicate values\n        assertIndexExtractorMerge(shape, new int[] {0, 2, 4, 2, 8}, new int[] {0, 2, 4, 8});\n        // test negative values\n        assertFailedIndexExtractorConstructor(shape, new int[] {0, 2, 4, -2, 8});\n        // test index too large\n        assertFailedIndexExtractorConstructor(shape, new int[] {0, 2, 4, 12, 8});\n        // test no indices\n        assertIndexExtractorMerge(shape, new int[0], new int[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testIsFull()", "name": "testIsFull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testIsFull()", "original_string": "    @Test\n    public final void testIsFull() {\n\n        // create empty filter\n        BloomFilter filter = createEmptyFilter(getTestShape());\n        assertFalse(filter.isFull(), \"Should not be full\");\n\n        filter = TestingHashers.populateEntireFilter(filter);\n        assertTrue(filter.isFull(), \"Should be full\");\n\n        filter = createFilter(getTestShape(), new IncrementingHasher(1, 3));\n        assertFalse(filter.isFull(), \"Should not be full\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that isFull() returns the proper values.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testMerge()", "name": "testMerge", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testMerge()", "original_string": "    @Test\n    public final void testMerge() {\n\n        final BloomFilter bf1 = createFilter(getTestShape(), TestingHashers.FROM1);\n        final BloomFilter bf2 = createFilter(getTestShape(), TestingHashers.FROM11);\n        final BloomFilter bf3 = bf1.copy();\n        bf3.merge(bf2);\n\n        // test with BloomFilter\n\n        final long[] bf1Val = bf1.asBitMapArray();\n        final long[] bf2Val = bf2.asBitMapArray();\n        for (int i = 0; i < bf1Val.length; i++) {\n            bf1Val[i] |= bf2Val[i];\n        }\n        bf1.merge(bf2);\n\n        final long[] bf1New = bf1.asBitMapArray();\n        for (int i = 0; i < bf1Val.length; i++) {\n            assertEquals(bf1Val[i], bf1New[i], \"Bad value at \" + i);\n        }\n\n        assertTrue(bf1.contains(bf2), \"Should contain bf2\");\n        assertTrue(bf1.contains(bf3), \"Should contain bf3\");\n\n        // test with hasher\n\n        final BloomFilter bf4 = createFilter(getTestShape(), TestingHashers.FROM1);\n        bf4.merge(TestingHashers.FROM11);\n\n        assertTrue(bf4.contains(bf2), \"Should contain Bf2\");\n        assertTrue(bf4.contains(bf3), \"Should contain Bf3\");\n\n        // test with hasher returning numbers out of range\n        assertThrows(IllegalArgumentException.class,\n                () -> bf1.merge(new BadHasher(bf1.getShape().getNumberOfBits())));\n        assertThrows(IllegalArgumentException.class, () -> bf1.merge(new BadHasher(-1)));\n\n        // test error when bloom filter returns values out of range\n        final Shape s = Shape.fromKM(getTestShape().getNumberOfHashFunctions(), getTestShape().getNumberOfBits() * 3);\n        final Hasher h = new IncrementingHasher(getTestShape().getNumberOfBits() * 2, 1);\n        final BloomFilter bf5 = new SimpleBloomFilter(s);\n        bf5.merge(h);\n        assertThrows(IllegalArgumentException.class, () -> bf1.merge(bf5));\n\n        final BloomFilter bf6 = new SparseBloomFilter(s);\n        bf6.merge(h);\n        assertThrows(IllegalArgumentException.class, () -> bf1.merge(bf6));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests that merging bloom filters works as expected with a generic BloomFilter.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testMergeWithBadHasher()", "name": "testMergeWithBadHasher", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMergeWithBadHasher()", "original_string": "    @Test\n    public void testMergeWithBadHasher() {\n        // value too large\n        final BloomFilter f = createEmptyFilter(getTestShape());\n        assertThrows(IllegalArgumentException.class,\n                () -> f.merge(new BadHasher(getTestShape().getNumberOfBits())));\n        // negative value\n        final BloomFilter f2 = createEmptyFilter(getTestShape());\n        assertThrows(IllegalArgumentException.class, () -> f2.merge(new BadHasher(-1)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testMergeWithBitMapExtractor()", "name": "testMergeWithBitMapExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMergeWithBitMapExtractor()", "original_string": "    @Test\n    public void testMergeWithBitMapExtractor() {\n        final int bitMapCount = BitMaps.numberOfBitMaps(getTestShape().getNumberOfBits());\n        for (int i = 0; i < 5; i++) {\n            final long[] values = new long[bitMapCount];\n            for (final int idx : DefaultIndexExtractorTest.generateIntArray(getTestShape().getNumberOfHashFunctions(), getTestShape().getNumberOfBits())) {\n                BitMaps.set(values, idx);\n            }\n            final BloomFilter f = createFilter(getTestShape(), BitMapExtractor.fromBitMapArray(values));\n            final List<Long> lst = new ArrayList<>();\n            for (final long l : values) {\n                lst.add(l);\n            }\n            assertTrue(f.processBitMaps(l -> lst.remove(Long.valueOf(l))));\n            assertTrue(lst.isEmpty());\n        }\n        // values too large\n        final long[] values = new long[bitMapCount];\n        Arrays.fill(values, Long.MAX_VALUE);\n        final BitMapExtractor badExtractor = BitMapExtractor.fromBitMapArray(values);\n        final BloomFilter bf = createEmptyFilter(getTestShape());\n        assertThrows(IllegalArgumentException.class, () -> bf.merge(badExtractor));\n\n        // test where merged bits exceed expected bits but both bitmaps are the same length.\n        final BitMapExtractor badExtractor2 = BitMapExtractor.fromBitMapArray(0x80_00_00_00_00_00_00_00L);\n        final BloomFilter bf2 = createEmptyFilter(Shape.fromKM(3, 32));\n        assertThrows(IllegalArgumentException.class, () -> bf2.merge(badExtractor2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testMergeWithHasher()", "name": "testMergeWithHasher", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMergeWithHasher()", "original_string": "    @Test\n    public void testMergeWithHasher() {\n        for (int i = 0; i < 5; i++) {\n            final BloomFilter f = createEmptyFilter(getTestShape());\n            final int[] expected = DefaultIndexExtractorTest.generateIntArray(getTestShape().getNumberOfHashFunctions(), getTestShape().getNumberOfBits());\n            final Hasher hasher = new ArrayHasher(expected);\n            f.merge(hasher);\n            // create sorted unique array of expected values\n            assertArrayEquals(DefaultIndexExtractorTest.unique(expected), f.asIndexArray());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testMergeWithIndexExtractor()", "name": "testMergeWithIndexExtractor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMergeWithIndexExtractor()", "original_string": "    @Test\n    public void testMergeWithIndexExtractor() {\n        for (int i = 0; i < 5; i++) {\n            final int[] values = DefaultIndexExtractorTest.generateIntArray(getTestShape().getNumberOfHashFunctions(), getTestShape().getNumberOfBits());\n            final BloomFilter f = createFilter(getTestShape(), IndexExtractor.fromIndexArray(values));\n            final BitSet uniqueValues = DefaultIndexExtractorTest.uniqueSet(values);\n            assertTrue(f.processIndices(idx -> {\n                final boolean result = uniqueValues.get(idx);\n                uniqueValues.clear(idx);\n                return result;\n            }));\n            assertTrue(uniqueValues.isEmpty());\n        }\n        // value to large\n        final BloomFilter f1 = createEmptyFilter(getTestShape());\n        assertThrows(IllegalArgumentException.class,\n                () -> f1.merge(IndexExtractor.fromIndexArray(getTestShape().getNumberOfBits())));\n        // negative value\n        final BloomFilter f2 = createEmptyFilter(getTestShape());\n        assertThrows(IllegalArgumentException.class,\n                () -> f2.merge(IndexExtractor.fromIndexArray(-1)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest.[void]testNegativeIntersection()", "name": "testNegativeIntersection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public final void testNegativeIntersection()", "original_string": "    @Test\n    public final void testNegativeIntersection() {\n        final IndexExtractor p1 = IndexExtractor.fromIndexArray(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 26, 28, 30, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71);\n        final IndexExtractor p2 = IndexExtractor.fromIndexArray(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27);\n\n        final BloomFilter filter1 = createEmptyFilter(Shape.fromKM(17, 72));\n        filter1.merge(p1);\n        final BloomFilter filter2 = createEmptyFilter(Shape.fromKM(17, 72));\n        filter2.merge(p2);\n        assertEquals(0, filter1.estimateIntersection(filter2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java", "class_name": "AbstractBloomFilterTest", "class_uri": "src/test/java/org/apache/commons/collections4/bloomfilter/AbstractBloomFilterTest.java.AbstractBloomFilterTest", "attributes": {"modifiers": "@Test\n    public final", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest.[void]testHashSetValuedHashMap_2()", "name": "testHashSetValuedHashMap_2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashSetValuedHashMap_2()", "original_string": "    @Test\n    public void testHashSetValuedHashMap_2() {\n        final Map<K, V> map = new HashMap<>();\n        final SetValuedMap<K, V> map1;\n        final SetValuedMap<K, V> map2;\n\n        map.put((K) \"A\", (V) \"W\");\n        map.put((K) \"B\", (V) \"X\");\n        map.put((K) \"C\", (V) \"F\");\n        map1 = new HashSetValuedHashMap<>(map);\n        assertEquals(1, map1.get((K) \"A\").size());\n\n        map.remove(\"A\");\n        map.remove(\"B\");\n        map.remove(\"C\");\n        map2 = new HashSetValuedHashMap<>(map);\n        assertEquals(\"{}\", map2.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "class_name": "HashSetValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest.[void]testHashSetValueHashMap()", "name": "testHashSetValueHashMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashSetValueHashMap()", "original_string": "    @Test\n    public void testHashSetValueHashMap() {\n        final SetValuedMap<K, V> setMap = new HashSetValuedHashMap<>(4);\n        assertEquals(0, setMap.get((K) \"whatever\").size());\n\n        final Set<V> set = setMap.get((K) \"A\");\n        set.add((V) \"W\");\n        set.add((V) \"X\");\n        set.add((V) \"F\");\n        assertEquals(3, setMap.get((K) \"A\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "class_name": "HashSetValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest.[void]testHashSetValueHashMap_1()", "name": "testHashSetValueHashMap_1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashSetValueHashMap_1()", "original_string": "    @Test\n    public void testHashSetValueHashMap_1() {\n        final MultiValuedMap<K, V> map = new ArrayListValuedHashMap<>();\n        final SetValuedMap<K, V> map1;\n        final SetValuedMap<K, V> map2 = makeObject();\n        final SetValuedMap<K, V> map3;\n\n        map.put((K) \"A\", (V) \"W\");\n        map.put((K) \"A\", (V) \"X\");\n        map.put((K) \"A\", (V) \"F\");\n        map1 = new HashSetValuedHashMap<>(map);\n        assertEquals(3, map1.get((K) \"A\").size());\n        map2.put((K) \"A\", (V) \"X\");\n        map2.put((K) \"A\", (V) \"F\");\n        map2.put((K) \"A\", (V) \"W\");\n        assertEquals(map1, map2);\n        assertEquals(map1.hashCode(), map2.hashCode());\n\n        map.remove(\"A\");\n        map3 = new HashSetValuedHashMap<>(map);\n        assertEquals(\"{}\", map3.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "class_name": "HashSetValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest.[void]testSetValuedMapAdd()", "name": "testSetValuedMapAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValuedMapAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValuedMapAdd() {\n        final SetValuedMap<K, V> setMap = makeObject();\n        assertTrue(setMap.get((K) \"whatever\") instanceof Set);\n\n        final Set<V> set = setMap.get((K) \"A\");\n        assertTrue(set.add((V) \"a1\"));\n        assertTrue(set.add((V) \"a2\"));\n        assertFalse(set.add((V) \"a1\"));\n        assertEquals(2, setMap.size());\n        assertTrue(setMap.containsKey(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "class_name": "HashSetValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest.[void]testSetValuedMapEqualsHashCodeContract()", "name": "testSetValuedMapEqualsHashCodeContract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testSetValuedMapEqualsHashCodeContract()", "original_string": "    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testSetValuedMapEqualsHashCodeContract() {\n        final SetValuedMap map1 = makeObject();\n        final SetValuedMap map2 = makeObject();\n\n        map1.put(\"a\", \"a1\");\n        map1.put(\"a\", \"a2\");\n        map2.put(\"a\", \"a2\");\n        map2.put(\"a\", \"a1\");\n        assertEquals(map1, map2);\n        assertEquals(map1.hashCode(), map2.hashCode());\n\n        map2.put(\"a\", \"a2\");\n        assertEquals(map1, map2);\n        assertEquals(map1.hashCode(), map2.hashCode());\n\n        map2.put(\"a\", \"a3\");\n        assertNotSame(map1, map2);\n        assertNotSame(map1.hashCode(), map2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "class_name": "HashSetValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest", "attributes": {"modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"rawtypes\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest.[void]testSetValuedMapRemove()", "name": "testSetValuedMapRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValuedMapRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValuedMapRemove() {\n        final SetValuedMap<K, V> setMap = makeObject();\n        assertTrue(setMap.get((K) \"whatever\") instanceof Set);\n\n        final Set<V> set = setMap.get((K) \"A\");\n        assertTrue(set.add((V) \"a1\"));\n        assertTrue(set.add((V) \"a2\"));\n        assertFalse(set.add((V) \"a1\"));\n        assertEquals(2, setMap.size());\n        assertTrue(setMap.containsKey(\"A\"));\n\n        assertTrue(set.remove(\"a1\"));\n        assertTrue(set.remove(\"a2\"));\n        assertFalse(set.remove(\"a1\"));\n\n        assertEquals(0, setMap.size());\n        assertFalse(setMap.containsKey(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "class_name": "HashSetValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest.[void]testSetValuedMapRemoveViaIterator()", "name": "testSetValuedMapRemoveViaIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValuedMapRemoveViaIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValuedMapRemoveViaIterator() {\n        final SetValuedMap<K, V> setMap = makeObject();\n        assertTrue(setMap.get((K) \"whatever\") instanceof Set);\n\n        final Set<V> set = setMap.get((K) \"A\");\n        set.add((V) \"a1\");\n        set.add((V) \"a2\");\n        set.add((V) \"a1\");\n\n        final Iterator<V> it = set.iterator();\n        while (it.hasNext()) {\n            it.next();\n            it.remove();\n        }\n        assertEquals(0, setMap.size());\n        assertFalse(setMap.containsKey(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java", "class_name": "HashSetValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/HashSetValuedHashMapTest.java.HashSetValuedHashMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testAddException()", "name": "testAddException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddException()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddException() {\n        final MultiValuedMap<K, V> map = makeObject();\n        assertThrows(UnsupportedOperationException.class, () -> map.put((K) \"one\", (V) \"uno\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testClearException()", "name": "testClearException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testClearException()", "original_string": "    @Test\n    public void testClearException() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        assertThrows(UnsupportedOperationException.class, () -> map.clear(),\n                \"expected, not support clear() method UnmodifiableMultiValuedMap does not support change\");\n        this.assertMapContainsAllValues(map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        assertSame(map, UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(map));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testDecoratorFactoryNullMap()", "name": "testDecoratorFactoryNullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecoratorFactoryNullMap()", "original_string": "    @Test\n    public void testDecoratorFactoryNullMap() {\n        assertThrows(NullPointerException.class, () -> UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(null),\n                \"map must not be null\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testPutAllException()", "name": "testPutAllException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPutAllException()", "original_string": "    @Test\n    public void testPutAllException() {\n        final MultiValuedMap<K, V> map = makeObject();\n        final MultiValuedMap<K, V> original = new ArrayListValuedHashMap<>();\n        final Map<K, V> originalMap = new HashMap<>();\n        final Collection<V> coll = (Collection<V>) Arrays.asList(\"X\", \"Y\", \"Z\");\n        original.put((K) \"key\", (V) \"object1\");\n        original.put((K) \"key\", (V) \"object2\");\n        originalMap.put((K) \"keyX\", (V) \"object1\");\n        originalMap.put((K) \"keyY\", (V) \"object2\");\n\n        assertThrows(UnsupportedOperationException.class, () -> map.putAll(original),\n                \"expected, not support putAll() method UnmodifiableMultiValuedMap does not support change\");\n        assertEquals(\"{}\", map.toString());\n\n        assertThrows(UnsupportedOperationException.class, () -> map.putAll(originalMap));\n        assertEquals(\"{}\", map.toString());\n\n        assertThrows(UnsupportedOperationException.class, () -> map.putAll((K) \"A\", coll));\n        assertEquals(\"{}\", map.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testRemoveException()", "name": "testRemoveException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveException()", "original_string": "    @Test\n    public void testRemoveException() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        assertThrows(UnsupportedOperationException.class, () -> map.remove(\"one\"),\n                \"not support remove() method UnmodifiableMultiValuedMap does not support change\");\n        this.assertMapContainsAllValues(map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testRemoveMappingException()", "name": "testRemoveMappingException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingException()", "original_string": "    @Test\n    public void testRemoveMappingException() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        assertThrows(UnsupportedOperationException.class, () -> map.removeMapping(\"one\", \"uno\"),\n                \"expected, not support removeMapping() method UnmodifiableMultiValuedMap does not support change\");\n        this.assertMapContainsAllValues(map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullMap() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testUnmodifiableAsMap()", "name": "testUnmodifiableAsMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableAsMap()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableAsMap() {\n        resetFull();\n        final Map<K, Collection<V>> mapCol = getMap().asMap();\n        assertThrows(UnsupportedOperationException.class, () -> mapCol.put((K) \"four\", (Collection<V>) Arrays.asList(\"four\")));\n\n        assertThrows(UnsupportedOperationException.class, () -> mapCol.remove(\"four\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> mapCol.clear());\n\n        assertThrows(UnsupportedOperationException.class, () -> mapCol.clear());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testUnmodifiableEntries()", "name": "testUnmodifiableEntries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableEntries()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableEntries() {\n        resetFull();\n        final Collection<Entry<K, V>> entries = getMap().entries();\n        assertThrows(UnsupportedOperationException.class, () -> entries.clear());\n\n        final Iterator<Entry<K, V>> it = entries.iterator();\n        final Entry<K, V> entry = it.next();\n        assertThrows(UnsupportedOperationException.class, () -> it.remove());\n\n        assertThrows(UnsupportedOperationException.class, () -> entry.setValue((V) \"three\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testUnmodifiableKeys()", "name": "testUnmodifiableKeys", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableKeys()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableKeys() {\n        resetFull();\n        final MultiSet<K> keys = getMap().keys();\n        assertThrows(UnsupportedOperationException.class, () -> keys.add((K) \"four\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> keys.remove(\"four\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> keys.clear());\n\n        final Iterator<K> it = keys.iterator();\n        assertThrows(UnsupportedOperationException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testUnmodifiableKeySet()", "name": "testUnmodifiableKeySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableKeySet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableKeySet() {\n        resetFull();\n        final Set<K> keySet = getMap().keySet();\n        assertThrows(UnsupportedOperationException.class, () -> keySet.add((K) \"four\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> keySet.remove(\"four\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> keySet.clear());\n\n        final Iterator<K> it = keySet.iterator();\n        assertThrows(UnsupportedOperationException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testUnmodifiableMapIterator()", "name": "testUnmodifiableMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableMapIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableMapIterator() {\n        resetFull();\n        final MapIterator<K, V> mapIt = getMap().mapIterator();\n        assertThrows(UnsupportedOperationException.class, () -> mapIt.remove());\n\n        assertThrows(UnsupportedOperationException.class, () -> mapIt.setValue((V) \"three\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest.[void]testUnmodifiableValues()", "name": "testUnmodifiableValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableValues()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testUnmodifiableValues() {\n        resetFull();\n        final Collection<V> values = getMap().values();\n        assertThrows(UnsupportedOperationException.class, () -> values.add((V) \"four\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> values.remove(\"four\"));\n\n        assertThrows(UnsupportedOperationException.class, () -> values.clear());\n\n        final Iterator<V> it = values.iterator();\n        assertThrows(UnsupportedOperationException.class, () -> it.remove());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java", "class_name": "UnmodifiableMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMapTest.java.UnmodifiableMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testArrayListValuedHashMap()", "name": "testArrayListValuedHashMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testArrayListValuedHashMap()", "original_string": "    @Test\n    public void testArrayListValuedHashMap() {\n        final ListValuedMap<K, V> listMap;\n        final ListValuedMap<K, V> listMap1;\n        final Map<K, V> map = new HashMap<>();\n        final Map<K, V> map1 = new HashMap<>();\n        map.put((K) \"A\", (V) \"W\");\n        map.put((K) \"B\", (V) \"X\");\n        map.put((K) \"C\", (V) \"F\");\n\n        listMap = new ArrayListValuedHashMap<>(map);\n        assertEquals(1, listMap.get((K) \"A\").size());\n        assertEquals(1, listMap.get((K) \"B\").size());\n        assertEquals(1, listMap.get((K) \"C\").size());\n\n        listMap1 = new ArrayListValuedHashMap<>(map1);\n        assertEquals(\"{}\", listMap1.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testEqualsHashCodeContract()", "name": "testEqualsHashCodeContract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testEqualsHashCodeContract()", "original_string": "    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testEqualsHashCodeContract() {\n        final MultiValuedMap map1 = makeObject();\n        final MultiValuedMap map2 = makeObject();\n\n        map1.put(\"a\", \"a1\");\n        map1.put(\"a\", \"a2\");\n        map2.put(\"a\", \"a1\");\n        map2.put(\"a\", \"a2\");\n        assertEquals(map1, map2);\n        assertEquals(map1.hashCode(), map2.hashCode());\n\n        map2.put(\"a\", \"a2\");\n        assertNotSame(map1, map2);\n        assertNotSame(map1.hashCode(), map2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"rawtypes\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testListValuedMapAdd()", "name": "testListValuedMapAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapAdd() {\n        final ListValuedMap<K, V> listMap = makeObject();\n        assertTrue(listMap.get((K) \"whatever\") instanceof List);\n        final List<V> list = listMap.get((K) \"A\");\n        list.add((V) \"a1\");\n        assertEquals(1, listMap.size());\n        assertTrue(listMap.containsKey(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testListValuedMapAddViaListIterator()", "name": "testListValuedMapAddViaListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapAddViaListIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapAddViaListIterator() {\n        final ListValuedMap<K, V> listMap = makeObject();\n        final ListIterator<V> listIt = listMap.get((K) \"B\").listIterator();\n        assertFalse(listIt.hasNext());\n        listIt.add((V) \"b1\");\n        listIt.add((V) \"b2\");\n        listIt.add((V) \"b3\");\n        assertEquals(3, listMap.size());\n        assertTrue(listMap.containsKey(\"B\"));\n        // As ListIterator always adds before the current cursor\n        assertFalse(listIt.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testListValuedMapEqualsHashCodeContract()", "name": "testListValuedMapEqualsHashCodeContract", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testListValuedMapEqualsHashCodeContract()", "original_string": "    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public void testListValuedMapEqualsHashCodeContract() {\n        final ListValuedMap map1 = makeObject();\n        final ListValuedMap map2 = makeObject();\n\n        map1.put(\"a\", \"a1\");\n        map1.put(\"a\", \"a2\");\n        map2.put(\"a\", \"a1\");\n        map2.put(\"a\", \"a2\");\n        assertEquals(map1, map2);\n        assertEquals(map1.hashCode(), map2.hashCode());\n\n        map1.put(\"b\", \"b1\");\n        map1.put(\"b\", \"b2\");\n        map2.put(\"b\", \"b2\");\n        map2.put(\"b\", \"b1\");\n        assertNotSame(map1, map2);\n        assertNotSame(map1.hashCode(), map2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"rawtypes\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testListValuedMapRemove()", "name": "testListValuedMapRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapRemove() {\n        final ListValuedMap<K, V> listMap = makeObject();\n        final List<V> list = listMap.get((K) \"A\");\n        list.add((V) \"a1\");\n        list.add((V) \"a2\");\n        list.add((V) \"a3\");\n        assertEquals(3, listMap.size());\n        assertEquals(\"a1\", list.remove(0));\n        assertEquals(2, listMap.size());\n        assertEquals(\"a2\", list.remove(0));\n        assertEquals(1, listMap.size());\n        assertEquals(\"a3\", list.remove(0));\n        assertEquals(0, listMap.size());\n        assertFalse(listMap.containsKey(\"A\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testListValuedMapRemoveViaListIterator()", "name": "testListValuedMapRemoveViaListIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapRemoveViaListIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testListValuedMapRemoveViaListIterator() {\n        final ListValuedMap<K, V> listMap = makeObject();\n        ListIterator<V> listIt = listMap.get((K) \"B\").listIterator();\n        listIt.add((V) \"b1\");\n        listIt.add((V) \"b2\");\n        assertEquals(2, listMap.size());\n        assertTrue(listMap.containsKey(\"B\"));\n        listIt = listMap.get((K) \"B\").listIterator();\n        while (listIt.hasNext()) {\n            listIt.next();\n            listIt.remove();\n        }\n        assertFalse(listMap.containsKey(\"B\"));\n        listIt.add((V) \"b1\");\n        listIt.add((V) \"b2\");\n        assertTrue(listMap.containsKey(\"B\"));\n        assertEquals(2, listMap.get((K) \"B\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testTrimToSize()", "name": "testTrimToSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTrimToSize()", "original_string": "    @Test\n    public void testTrimToSize() {\n        final ArrayListValuedHashMap<K, V> listMap = new ArrayListValuedHashMap<>(4);\n\n        assertEquals(\"{}\", listMap.toString());\n        listMap.put((K) \"A\", (V) \"W\");\n        listMap.put((K) \"A\", (V) \"X\");\n        listMap.put((K) \"B\", (V) \"F\");\n        assertEquals(2, listMap.get((K) \"A\").size());\n        assertEquals(1, listMap.get((K) \"B\").size());\n\n        listMap.trimToSize();\n        assertEquals(2, listMap.get((K) \"A\").size());\n        assertEquals(1, listMap.get((K) \"B\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testValuesListIteratorMethods()", "name": "testValuesListIteratorMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testValuesListIteratorMethods()", "original_string": "    @Test\n    public void testValuesListIteratorMethods() {\n        final ListValuedMap<K, V> listMap = makeObject();\n        final List<V> listA = listMap.get((K) \"A\");\n        final List<V> list = Arrays.asList((V) \"W\", (V) \"X\", (V) \"F\", (V) \"Q\", (V) \"Q\", (V) \"F\");\n        listA.addAll(0, list);\n        final ListIterator<V> it = listMap.get((K) \"A\").listIterator(1);\n        assertTrue(it.hasNext());\n        assertEquals(\"X\", it.next());\n        assertEquals(\"F\", it.next());\n        assertTrue(it.hasPrevious());\n        assertEquals(\"F\", it.previous());\n        assertEquals(2, it.nextIndex());\n        assertEquals(1, it.previousIndex());\n        it.set((V) \"Z\");\n        assertEquals(\"Z\", it.next());\n        assertEquals(\"Q\", it.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testWrappedListAdd()", "name": "testWrappedListAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWrappedListAdd()", "original_string": "    @Test\n    public void testWrappedListAdd() {\n        final ListValuedMap<K, V> listMap = makeObject();\n        final List<V> listA = listMap.get((K) \"A\");\n        listA.add(0, (V) \"W\");\n        listA.add(1, (V) \"X\");\n        listA.add(2, (V) \"F\");\n        assertEquals(\"{A=[W, X, F]}\", listMap.toString());\n        listMap.get((K) \"A\").set(1, (V) \"Q\");\n        assertEquals(\"{A=[W, Q, F]}\", listMap.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest.[void]testWrappedListAddAll()", "name": "testWrappedListAddAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWrappedListAddAll()", "original_string": "    @Test\n    public void testWrappedListAddAll() {\n        final ListValuedMap<K, V> listMap = makeObject();\n        final List<V> listA = listMap.get((K) \"A\");\n        final List<V> list = Arrays.asList((V) \"W\", (V) \"X\", (V) \"F\");\n        listA.addAll(0, list);\n        assertEquals(\"{A=[W, X, F]}\", listMap.toString());\n\n        final List<V> list1 = Arrays.asList((V) \"Q\", (V) \"Q\", (V) \"L\");\n        listA.addAll(3, list1);\n        assertEquals(\"{A=[W, X, F, Q, Q, L]}\", listMap.toString());\n        assertEquals(\"W\", listMap.get((K) \"A\").get(0));\n        assertEquals(\"X\", listMap.get((K) \"A\").get(1));\n        assertEquals(\"F\", listMap.get((K) \"A\").get(2));\n        assertEquals(\"Q\", listMap.get((K) \"A\").get(3));\n        assertEquals(\"Q\", listMap.get((K) \"A\").get(4));\n        assertEquals(\"L\", listMap.get((K) \"A\").get(5));\n        assertEquals(0, listMap.get((K) \"A\").indexOf(\"W\"));\n        assertEquals(2, listMap.get((K) \"A\").indexOf(\"F\"));\n        assertEquals(-1, listMap.get((K) \"A\").indexOf(\"C\"));\n        assertEquals(3, listMap.get((K) \"A\").indexOf(\"Q\"));\n        assertEquals(4, listMap.get((K) \"A\").lastIndexOf(\"Q\"));\n        assertEquals(-1, listMap.get((K) \"A\").lastIndexOf(\"A\"));\n\n        final List<V> list2 = new ArrayList<>();\n        listMap.get((K) \"B\").addAll(0, list2);\n        assertEquals(\"{A=[W, X, F, Q, Q, L]}\", listMap.toString());\n        final List<V> list3 = listMap.get((K) \"A\").subList(1, 4);\n        assertEquals(3, list3.size());\n        assertEquals(\"Q\", list3.get(2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java", "class_name": "ArrayListValuedHashMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/ArrayListValuedHashMapTest.java.ArrayListValuedHashMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testAddMappingThroughGet()", "name": "testAddMappingThroughGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddMappingThroughGet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAddMappingThroughGet() {\n        assumeTrue(isAddSupported());\n        resetEmpty();\n        final MultiValuedMap<K, V> map = getMap();\n        final Collection<V> col1 = map.get((K) \"k0\");\n        final Collection<V> col2 = map.get((K) \"k0\");\n        assertTrue(col1.isEmpty());\n        assertTrue(col2.isEmpty());\n        assertEquals(0, map.size());\n        col1.add((V) \"v1_1\");\n        col2.add((V) \"v0_1\");\n        assertTrue(map.containsKey(\"k0\"));\n        assertTrue(map.containsMapping(\"k0\", \"v1_1\"));\n        assertTrue(map.containsMapping(\"k0\", \"v0_1\"));\n        assertTrue(map.containsValue(\"v1_1\"));\n        assertTrue(map.containsValue(\"v0_1\"));\n        assertTrue(col1.contains(\"v0_1\"));\n        assertTrue(col2.contains(\"v1_1\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testAsMapGet_Empty()", "name": "testAsMapGet_Empty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsMapGet_Empty()", "original_string": "    @Test\n    public void testAsMapGet_Empty() {\n        resetEmpty();\n        final Map<K, Collection<V>> mapCol = getMap().asMap();\n        assertNull(mapCol.get(\"k0\"));\n        assertEquals(0, mapCol.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testAsMapGet_Full()", "name": "testAsMapGet_Full", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsMapGet_Full()", "original_string": "    @Test\n    public void testAsMapGet_Full() {\n        resetFull();\n        final Map<K, Collection<V>> mapCol = getMap().asMap();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        for (int k = 0; k < maxK; k++) {\n            final Collection<V> col = mapCol.get(makeKey(k));\n            for (int v = 0; v < maxV; v++) {\n                assertTrue(col.contains(makeValue(k, v)));\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testAsMapRemove()", "name": "testAsMapRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAsMapRemove()", "original_string": "    @Test\n    public void testAsMapRemove() {\n        assumeTrue(isRemoveSupported());\n        resetFull();\n        final Map<K, Collection<V>> mapCol = getMap().asMap();\n        final int maxK = getSampleKeySize();\n        int expectedSize = getMap().size();\n        for (int k = 0; k < maxK; k++) {\n            final K key = makeKey(k);\n            mapCol.remove(key);\n            assertFalse(getMap().containsKey(key));\n            expectedSize -= getSampleCountPerKey();\n            assertEquals(expectedSize, getMap().size());\n        }\n        assertFalse(getMap().containsKey(\"k0\"));\n        assertEquals(0, getMap().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testContainsValue()", "name": "testContainsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testContainsValue()", "original_string": "    @Test\n    public void testContainsValue() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        for (int k = 0; k < maxK; k++) {\n            for (int v = 0; v < maxV; v++) {\n                assertTrue(map.containsValue(makeValue(k, v)));\n            }\n        }\n        assertFalse(map.containsValue(\"quatro\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testContainsValue_Key()", "name": "testContainsValue_Key", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsValue_Key()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testContainsValue_Key() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        for (int k = 0; k < maxK; k++) {\n            for (int v = 0; v < maxV; v++) {\n                assertTrue(map.containsMapping(makeKey(k), makeValue(k, v)));            }\n        }\n        assertFalse(map.containsMapping(\"k1\", \"2\"));\n        if (!isAddSupported()) {\n            return;\n        }\n        map.put((K) \"A\", (V) \"AA\");\n        assertTrue(map.containsMapping(\"A\", \"AA\"));\n        assertFalse(map.containsMapping(\"A\", \"AB\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testEmptyMapCompatibility()", "name": "testEmptyMapCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyMapCompatibility()", "original_string": "    @Test\n    public void testEmptyMapCompatibility() throws Exception {\n        final MultiValuedMap<?, ?> map = makeObject();\n        final MultiValuedMap<?, ?> map2 =\n                (MultiValuedMap<?, ?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n        assertEquals(0, map2.size(), \"Map is empty\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nManual serialization testing as this class cannot easily extend the AbstractTestMap\n"}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testEntriesCollectionIterator()", "name": "testEntriesCollectionIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntriesCollectionIterator()", "original_string": "    @Test\n    public void testEntriesCollectionIterator() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final Collection<V> values = new ArrayList<>(map.values());\n        for (final Entry<K, V> entry : map.entries()) {\n            assertTrue(map.containsMapping(entry.getKey(), entry.getValue()));\n            assertTrue(values.contains(entry.getValue()));\n            if (isRemoveSupported()) {\n                assertTrue(values.remove(entry.getValue()));\n            }\n        }\n        if (isRemoveSupported()) {\n            assertTrue(values.isEmpty());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testFullMapCompatibility()", "name": "testFullMapCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    @Disabled(\"There is no code to create this test fixture?\")\n    public void testFullMapCompatibility()", "original_string": "    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    @Disabled(\"There is no code to create this test fixture?\")\n    public void testFullMapCompatibility() throws Exception {\n        final MultiValuedMap map = makeFullMap();\n        final MultiValuedMap map2 =\n                (MultiValuedMap) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n        assertEquals(map.size(), map2.size(), \"Map is the right size\");\n        for (final Object key : map.keySet()) {\n            assertTrue(CollectionUtils.isEqualCollection(map.get(key), map2.get(key)),\n                    \"Map had inequal elements\");\n            if (isRemoveSupported()) {\n                map2.remove(key);\n            }\n        }\n        if (isRemoveSupported()) {\n            assertEquals(0, map2.size(), \"Map had extra values\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Test\n    @Disabled(\"There is no code to create this test fixture?\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"rawtypes\", \"unchecked\" })", "@Disabled(\"There is no code to create this test fixture?\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testGet()", "name": "testGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGet() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        for (int k = 0; k < maxK; k++) {\n            for (int v = 0; v < maxV; v++) {\n                assertTrue(map.get((K) makeKey(k)).contains(makeValue(k, v)));\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "    }"}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testKeyContainsValue()", "name": "testKeyContainsValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeyContainsValue()", "original_string": "    @Test\n    public void testKeyContainsValue() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        for (int k = 0; k < maxK; k++) {\n            for (int v = 0; v < maxV; v++) {\n                assertTrue(map.containsMapping(makeKey(k), makeValue(k, v)));\n            }\n        }\n        assertFalse(map.containsMapping(\"k\", \"v\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testKeysBagContainsAll()", "name": "testKeysBagContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings({ \"unchecked\", \"cast\" })\n    public void testKeysBagContainsAll()", "original_string": "    @Test\n    @SuppressWarnings({ \"unchecked\", \"cast\" })\n    public void testKeysBagContainsAll() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final MultiSet<K> keyMultiSet = map.keys();\n\n        final List<String> col = new ArrayList<>();\n        final int maxK = getSampleKeySize();\n        for (int k = 0; k < maxK; k++) {\n            col.add(makeKey(k));\n        }\n        for (int k = 0; k < maxK; k++) {\n            col.add(makeKey(k));\n        }\n        // Make sure we test Collection API\n        assertTrue(keyMultiSet.containsAll((Collection<K>) col));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings({ \"unchecked\", \"cast\" })\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings({ \"unchecked\", \"cast\" })", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testKeysBagIterator1()", "name": "testKeysBagIterator1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeysBagIterator1()", "original_string": "    @Test\n    public void testKeysBagIterator1() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final Collection<K> col = new ArrayList<>(map.keys());\n        final Bag<K> bag = new HashBag<>(col);\n        final int maxK = getSampleKeySize();\n        for (int k = 0; k < maxK; k++) {\n            assertEquals(getSampleCountPerKey(), bag.getCount(makeKey(k)));\n        }\n        assertEquals(getSampleTotalValueCount(), bag.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testKeysBagIterator2()", "name": "testKeysBagIterator2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeysBagIterator2()", "original_string": "    @Test\n    public void testKeysBagIterator2() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final Iterable<K> iterable = new ArrayList<>(map.keys());\n        final Bag<K> bag = new HashBag<>(iterable);\n        final int maxK = getSampleKeySize();\n        for (int k = 0; k < maxK; k++) {\n            assertEquals(getSampleCountPerKey(), bag.getCount(makeKey(k)));\n        }\n        assertEquals(getSampleTotalValueCount(), bag.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testKeySetSize()", "name": "testKeySetSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeySetSize()", "original_string": "    @Test\n    public void testKeySetSize() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        assertEquals(getSampleKeySize(), map.keySet().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testKeysMultiSet()", "name": "testKeysMultiSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKeysMultiSet()", "original_string": "    @Test\n    public void testKeysMultiSet() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final MultiSet<K> keyMultiSet = map.keys();\n        final int maxK = getSampleKeySize();\n        for (int k = 0; k < maxK; k++) {\n            assertEquals(getSampleCountPerKey(), keyMultiSet.getCount(makeKey(k)));\n        }\n        assertEquals(0, keyMultiSet.getCount(\"conut\"));\n        assertEquals(getSampleTotalValueCount(), keyMultiSet.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testMapEquals()", "name": "testMapEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapEquals()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapEquals() {\n        assumeTrue(isAddSupported());\n        final MultiValuedMap<K, V> one = makeObject();\n        final Integer value = Integer.valueOf(1);\n        one.put((K) \"One\", (V) value);\n        one.removeMapping(\"One\", value);\n\n        final MultiValuedMap<K, V> two = makeObject();\n        assertEquals(two, one);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testMapIterator()", "name": "testMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIterator()", "original_string": "    @Test\n    public void testMapIterator() {\n        resetEmpty();\n        MapIterator<K, V> mapIt  = getMap().mapIterator();\n        assertFalse(mapIt.hasNext());\n\n        resetFull();\n        mapIt = getMap().mapIterator();\n        while (mapIt.hasNext()) {\n            final K key = mapIt.next();\n            final V value = mapIt.getValue();\n            assertTrue(getMap().containsMapping(key, value));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testMapIteratorRemove()", "name": "testMapIteratorRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMapIteratorRemove()", "original_string": "    @Test\n    public void testMapIteratorRemove() {\n        assumeTrue(isRemoveSupported());\n        resetFull();\n        final MapIterator<K, V> mapIt = getMap().mapIterator();\n        while (mapIt.hasNext()) {\n            mapIt.next();\n            mapIt.remove();\n        }\n        assertTrue(getMap().isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testMapIteratorUnsupportedSet()", "name": "testMapIteratorUnsupportedSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorUnsupportedSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMapIteratorUnsupportedSet() {\n        resetFull();\n        final MapIterator<K, V> mapIt = getMap().mapIterator();\n        mapIt.next();\n        assertThrows(UnsupportedOperationException.class, () -> mapIt.setValue((V) \"some value\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testMultipleValues()", "name": "testMultipleValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultipleValues()", "original_string": "    @Test\n    public void testMultipleValues() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        for (int k = 0; k < maxK; k++) {\n            final Collection<V> col = map.get(makeKey(k));\n            for (int v = 0; v < maxV; v++) {\n                assertTrue(col.contains(makeValue(k, v)));\n            }\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testMultiValuedMapIterator()", "name": "testMultiValuedMapIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMultiValuedMapIterator()", "original_string": "    @Test\n    public void testMultiValuedMapIterator() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final MapIterator<K, V> it = map.mapIterator();\n        assertThrows(IllegalStateException.class, () -> it.getKey());\n        assertThrows(IllegalStateException.class, () -> it.getValue());\n        if (isAddSupported()) {\n            assertThrows(IllegalStateException.class, () -> it.setValue((V) \"V\"));\n        }\n        if (!isHashSetValue() && isAddSupported()) {\n            assertTrue(it.hasNext());\n            final MultiValuedMap<K, V> dejaVu = makeObject();\n            while (it.hasNext()) {\n                final K next = it.next();\n                assertNotNull(next);\n                final K itKey = it.getKey();\n                assertEquals(next, itKey);\n                final V itValue = it.getValue();\n                dejaVu.put(itKey, itValue);\n                assertThrows(UnsupportedOperationException.class, () -> it.setValue((V) \"threetrois\"));\n            }\n            assertEquals(map, dejaVu);\n            assertEquals(dejaVu, map);\n            assertThrows(UnsupportedOperationException.class, () -> it.setValue((V) \"threetrois\"));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testNoMappingReturnsEmptyCol()", "name": "testNoMappingReturnsEmptyCol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNoMappingReturnsEmptyCol()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testNoMappingReturnsEmptyCol() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        assertTrue(map.get((K) \"whatever\").isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testPutAll_KeyIterable()", "name": "testPutAll_KeyIterable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_KeyIterable()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_KeyIterable() {\n        assumeTrue(isAddSupported());\n        final MultiValuedMap<K, V> map = makeObject();\n        Collection<V> coll = (Collection<V>) Arrays.asList(\"X\", \"Y\", \"Z\");\n\n        assertTrue(map.putAll((K) \"A\", coll));\n        assertEquals(3, map.get((K) \"A\").size());\n        assertTrue(map.containsMapping(\"A\", \"X\"));\n        assertTrue(map.containsMapping(\"A\", \"Y\"));\n        assertTrue(map.containsMapping(\"A\", \"Z\"));\n\n        assertThrows(NullPointerException.class, () -> map.putAll((K) \"A\", null),\n                \"expecting NullPointerException\");\n\n        assertEquals(3, map.get((K) \"A\").size());\n        assertTrue(map.containsMapping(\"A\", \"X\"));\n        assertTrue(map.containsMapping(\"A\", \"Y\"));\n        assertTrue(map.containsMapping(\"A\", \"Z\"));\n\n        assertFalse(map.putAll((K) \"A\", new ArrayList<>()));\n        assertEquals(3, map.get((K) \"A\").size());\n        assertTrue(map.containsMapping(\"A\", \"X\"));\n        assertTrue(map.containsMapping(\"A\", \"Y\"));\n        assertTrue(map.containsMapping(\"A\", \"Z\"));\n\n        coll = (Collection<V>) Arrays.asList(\"M\");\n        assertTrue(map.putAll((K) \"A\", coll));\n        assertEquals(4, map.get((K) \"A\").size());\n        assertTrue(map.containsMapping(\"A\", \"X\"));\n        assertTrue(map.containsMapping(\"A\", \"Y\"));\n        assertTrue(map.containsMapping(\"A\", \"Z\"));\n        assertTrue(map.containsMapping(\"A\", \"M\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testPutAll_Map1()", "name": "testPutAll_Map1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map1()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map1() {\n        assumeTrue(isAddSupported());\n        final MultiValuedMap<K, V> original = makeObject();\n        original.put((K) \"key\", (V) \"object1\");\n        original.put((K) \"key\", (V) \"object2\");\n\n        final MultiValuedMap<K, V> test = makeObject();\n        test.put((K) \"keyA\", (V) \"objectA\");\n        test.put((K) \"key\", (V) \"object0\");\n        test.putAll(original);\n\n        final MultiValuedMap<K, V> originalNull = null;\n        assertThrows(NullPointerException.class, () -> test.putAll(originalNull),\n                \"expecting NullPointerException\");\n\n        assertEquals(2, test.keySet().size());\n        assertEquals(4, test.size());\n        assertEquals(1, test.get((K) \"keyA\").size());\n        assertEquals(3, test.get((K) \"key\").size());\n        assertTrue(test.containsValue(\"objectA\"));\n        assertTrue(test.containsValue(\"object0\"));\n        assertTrue(test.containsValue(\"object1\"));\n        assertTrue(test.containsValue(\"object2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testPutAll_Map2()", "name": "testPutAll_Map2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map2()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testPutAll_Map2() {\n        assumeTrue(isAddSupported());\n        final Map<K, V> original = new HashMap<>();\n        original.put((K) \"keyX\", (V) \"object1\");\n        original.put((K) \"keyY\", (V) \"object2\");\n\n        final MultiValuedMap<K, V> test = makeObject();\n        test.put((K) \"keyA\", (V) \"objectA\");\n        test.put((K) \"keyX\", (V) \"object0\");\n        test.putAll(original);\n\n        final Map<K, V> originalNull = null;\n        assertThrows(NullPointerException.class, () -> test.putAll(originalNull),\n                \"expecting NullPointerException\");\n\n        assertEquals(3, test.keySet().size());\n        assertEquals(4, test.size());\n        assertEquals(1, test.get((K) \"keyA\").size());\n        assertEquals(2, test.get((K) \"keyX\").size());\n        assertEquals(1, test.get((K) \"keyY\").size());\n        assertTrue(test.containsValue(\"objectA\"));\n        assertTrue(test.containsValue(\"object0\"));\n        assertTrue(test.containsValue(\"object1\"));\n        assertTrue(test.containsValue(\"object2\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testRemove_KeyItem()", "name": "testRemove_KeyItem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove_KeyItem()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemove_KeyItem() {\n        assumeTrue(isAddSupported());\n        assumeTrue(isRemoveSupported());\n        final MultiValuedMap<K, V> map = makeObject();\n        map.put((K) \"A\", (V) \"AA\");\n        map.put((K) \"A\", (V) \"AB\");\n        map.put((K) \"A\", (V) \"AC\");\n        assertFalse(map.removeMapping(\"C\", \"CA\"));\n        assertFalse(map.removeMapping(\"A\", \"AD\"));\n        assertTrue(map.removeMapping(\"A\", \"AC\"));\n        assertTrue(map.removeMapping(\"A\", \"AB\"));\n        assertTrue(map.removeMapping(\"A\", \"AA\"));\n        //assertEquals(new MultiValuedHashMap<K, V>(), map);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testRemoveAllViaEntriesIterator()", "name": "testRemoveAllViaEntriesIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAllViaEntriesIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAllViaEntriesIterator() {\n        assumeTrue(isRemoveSupported());\n        final MultiValuedMap<K, V> map = makeFullMap();\n        for (final Iterator<?> i = map.entries().iterator(); i.hasNext();) {\n            i.next();\n            i.remove();\n        }\n        assertTrue(map.get((K) \"k0\").isEmpty());\n        assertEquals(0, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testRemoveAllViaValuesIterator()", "name": "testRemoveAllViaValuesIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAllViaValuesIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testRemoveAllViaValuesIterator() {\n        assumeTrue(isRemoveSupported());\n        final MultiValuedMap<K, V> map = makeFullMap();\n        for (final Iterator<?> i = map.values().iterator(); i.hasNext();) {\n            i.next();\n            i.remove();\n        }\n        assertTrue(map.get((K) \"k0\").isEmpty());\n        assertTrue(map.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testRemoveMappingThroughGet()", "name": "testRemoveMappingThroughGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingThroughGet()", "original_string": "    @Test\n    public void testRemoveMappingThroughGet() {\n        assumeTrue(isRemoveSupported());\n        resetFull();\n        final MultiValuedMap<K, V> map = getMap();\n        final int cpk = getSampleCountPerKey();\n        int expectedCount = getSampleTotalValueCount();\n        assertEquals(expectedCount, map.size());\n        for (int k = 0; k < getSampleKeySize(); k++) {\n            final Object key = makeKey(k);\n            @SuppressWarnings(\"unchecked\")\n            Collection<V> col = map.get((K) key);\n            assertEquals(cpk, col.size());\n            for (int i = 0; i < cpk; i++) {\n                final Object value = makeValue(k, i);\n                assertTrue(col.remove(value), () -> value.toString());\n            }\n            for (int i = 0; i < cpk; i++) {\n                assertFalse(col.remove(makeValue(k, i)));\n            }\n            assertFalse(map.containsKey(key));\n            for (int i = 0; i < cpk; i++) {\n                assertFalse(map.containsMapping(key, i));\n            }\n            for (int i = 0; i < cpk; i++) {\n                assertFalse(map.containsValue(makeValue(k, i)));\n            }\n            expectedCount -= cpk;\n            assertEquals(expectedCount, map.size());\n            col = map.remove(key);\n            assertNotNull(col);\n            assertEquals(0, col.size());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testRemoveMappingThroughGetIterator()", "name": "testRemoveMappingThroughGetIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveMappingThroughGetIterator()", "original_string": "    @Test\n    public void testRemoveMappingThroughGetIterator() {\n        assumeTrue(isRemoveSupported());\n        resetFull();\n        final MultiValuedMap<K, V> map = getMap();\n        int expectedSize = map.size();\n        final int maxK = getSampleKeySize();\n        for (int k = 0; k < maxK; k++) {\n            final String key = makeKey(k);\n            final int cpk = getSampleCountPerKey();\n            @SuppressWarnings(\"unchecked\")\n            final Iterator<V> it = map.get((K) key).iterator();\n            while (it.hasNext()) {\n                it.next();\n                it.remove();\n            }\n            assertFalse(map.containsKey(key));\n            for (int j = 0; j < cpk; j++) {\n                assertFalse(map.containsMapping(key, makeValue(k + 1, j)));\n                final Object value = makeValue(k, j);\n                assertFalse(map.containsMapping(key, value));\n                assertFalse(map.containsValue(value));\n            }\n            expectedSize -= cpk;\n            assertEquals(expectedSize, map.size());\n            final Collection<V> coll = map.remove(\"k0\");\n            assertNotNull(coll);\n            assertEquals(0, coll.size());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testRemoveViaValuesRemove()", "name": "testRemoveViaValuesRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveViaValuesRemove()", "original_string": "    @Test\n    public void testRemoveViaValuesRemove() {\n        assumeTrue(isRemoveSupported());\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final Collection<V> values = map.values();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        int expectedSize = map.size();\n        for (int k = 0; k < maxK; k++) {\n            for (int v = 0; v < maxV; v++) {\n                values.remove(makeValue(k, v));\n            }\n            assertFalse(map.containsKey(makeKey(k)));\n            expectedSize -= maxV;\n            assertEquals(expectedSize, map.size());\n        }\n        assertEquals(0, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        assertEquals(getSampleTotalValueCount(), makeFullMap().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testSize_Key()", "name": "testSize_Key", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize_Key()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSize_Key() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final int maxK = getSampleKeySize();\n        for (int k = 0; k < maxK; k++) {\n            assertEquals(getSampleCountPerKey(), map.get((K) makeKey(k)).size());\n        }\n        if (!isAddSupported()) {\n            return;\n        }\n        map.put((K) \"A\", (V) \"AA\");\n        assertEquals(1, map.get((K) \"A\").size());\n        // assertEquals(0, map.get(\"B\").size());\n        map.put((K) \"B\", (V) \"BA\");\n        assertEquals(1, map.get((K) \"A\").size());\n        assertEquals(1, map.get((K) \"B\").size());\n        map.put((K) \"B\", (V) \"BB\");\n        assertEquals(1, map.get((K) \"A\").size());\n        assertEquals(2, map.get((K) \"B\").size());\n        map.put((K) \"B\", (V) \"BC\");\n        assertEquals(1, map.get((K) \"A\").size());\n        assertEquals(3, map.get((K) \"B\").size());\n        if (!isRemoveSupported()) {\n            return;\n        }\n        map.remove(\"A\");\n        // assertEquals(0, map.get(\"A\").size());\n        assertEquals(3, map.get((K) \"B\").size());\n        map.removeMapping(\"B\", \"BC\");\n        // assertEquals(0, map.get(\"A\").size());\n        assertEquals(2, map.get((K) \"B\").size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testSizeWithPutRemove()", "name": "testSizeWithPutRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSizeWithPutRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSizeWithPutRemove() {\n        assumeTrue(isAddSupported());\n        assumeTrue(isRemoveSupported());\n        final MultiValuedMap<K, V> map = makeObject();\n        assertEquals(0, map.size());\n        map.put((K) \"A\", (V) \"AA\");\n        assertEquals(1, map.size());\n        map.put((K) \"B\", (V) \"BA\");\n        assertEquals(2, map.size());\n        map.put((K) \"B\", (V) \"BB\");\n        assertEquals(3, map.size());\n        map.put((K) \"B\", (V) \"BC\");\n        assertEquals(4, map.size());\n        map.remove(\"A\");\n        assertEquals(3, map.size());\n        map.removeMapping(\"B\", \"BC\");\n        assertEquals(2, map.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToString()", "original_string": "    @Test\n    public void testToString() {\n        assumeTrue(isAddSupported());\n        final MultiValuedMap<K, V> map = makeObject();\n        map.put((K) \"A\", (V) \"X\");\n        map.put((K) \"A\", (V) \"Y\");\n        map.put((K) \"A\", (V) \"Z\");\n        map.put((K) \"B\", (V) \"U\");\n        map.put((K) \"B\", (V) \"V\");\n        map.put((K) \"B\", (V) \"W\");\n        assertTrue(\"{A=[X, Y, Z], B=[U, V, W]}\".equals(map.toString()) || \"{B=[U, V, W], A=[X, Y, Z]}\".equals(map.toString()));\n\n        final MultiValuedMap<K, V> originalNull = null;\n        assertThrows(NullPointerException.class, () -> map.putAll(originalNull), \"expecting NullPointerException\");\n        assertTrue(\"{A=[X, Y, Z], B=[U, V, W]}\".equals(map.toString()) || \"{B=[U, V, W], A=[X, Y, Z]}\".equals(map.toString()));\n\n        map.remove(\"A\");\n        map.remove(\"B\");\n        assertEquals(\"{}\", map.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest.[void]testValues()", "name": "testValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValues()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValues() {\n        final MultiValuedMap<K, V> map = makeFullMap();\n        final HashSet<V> expected = new HashSet<>();\n        final int maxK = getSampleKeySize();\n        final int maxV = getSampleCountPerKey();\n        for (int k = 0; k < maxK; k++) {\n            for (int v = 0; v < maxV; v++) {\n                expected.add((V) makeValue(k, v));\n            }\n        }\n        final Collection<V> c = map.values();\n        assertEquals(getSampleTotalValueCount(), c.size());\n        assertEquals(expected, new HashSet<>(c));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java", "class_name": "AbstractMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapTest.java.AbstractMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest.[void]testFactory_Decorate()", "name": "testFactory_Decorate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_Decorate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_Decorate() {\n        final MultiValuedMap<K, V> base = new ArrayListValuedHashMap<>();\n        base.put((K) \"A\", (V) \"1\");\n        base.put((K) \"B\", (V) \"2\");\n        base.put((K) \"C\", (V) \"3\");\n\n        final MultiValuedMap<K, V> trans = TransformedMultiValuedMap\n                .transformingMap(\n                        base,\n                        null,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(3, trans.size());\n        assertTrue(trans.get((K) \"A\").contains(\"1\"));\n        assertTrue(trans.get((K) \"B\").contains(\"2\"));\n        assertTrue(trans.get((K) \"C\").contains(\"3\"));\n        trans.put((K) \"D\", (V) \"4\");\n        assertTrue(trans.get((K) \"D\").contains(Integer.valueOf(4)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java", "class_name": "TransformedMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest.[void]testFactory_decorateTransform()", "name": "testFactory_decorateTransform", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_decorateTransform()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testFactory_decorateTransform() {\n        final MultiValuedMap<K, V> base = new ArrayListValuedHashMap<>();\n        base.put((K) \"A\", (V) \"1\");\n        base.put((K) \"B\", (V) \"2\");\n        base.put((K) \"C\", (V) \"3\");\n\n        final MultiValuedMap<K, V> trans = TransformedMultiValuedMap\n                .transformedMap(\n                        base,\n                        null,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(3, trans.size());\n        assertTrue(trans.get((K) \"A\").contains(Integer.valueOf(1)));\n        assertTrue(trans.get((K) \"B\").contains(Integer.valueOf(2)));\n        assertTrue(trans.get((K) \"C\").contains(Integer.valueOf(3)));\n        trans.put((K) \"D\", (V) \"4\");\n        assertTrue(trans.get((K) \"D\").contains(Integer.valueOf(4)));\n\n        final MultiValuedMap<K, V> baseMap = new ArrayListValuedHashMap<>();\n        final MultiValuedMap<K, V> transMap = TransformedMultiValuedMap\n                .transformedMap(\n                        baseMap,\n                        null,\n                        (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, transMap.size());\n        transMap.put((K) \"D\", (V) \"4\");\n        assertEquals(1, transMap.size());\n        assertTrue(transMap.get((K) \"D\").contains(Integer.valueOf(4)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java", "class_name": "TransformedMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest.[void]testKeyTransformedMap()", "name": "testKeyTransformedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testKeyTransformedMap()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testKeyTransformedMap() {\n        final Object[] els = { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n\n        final MultiValuedMap<K, V> map = TransformedMultiValuedMap.transformingMap(\n                new ArrayListValuedHashMap<>(),\n                (Transformer<? super K, ? extends K>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,\n                null);\n        assertEquals(0, map.size());\n        for (int i = 0; i < els.length; i++) {\n            map.put((K) els[i], (V) els[i]);\n            assertEquals(i + 1, map.size());\n            assertTrue(map.containsKey(Integer.valueOf((String) els[i])));\n            assertFalse(map.containsKey(els[i]));\n            assertTrue(map.containsValue(els[i]));\n            assertTrue(map.get((K) Integer.valueOf((String) els[i])).contains(els[i]));\n        }\n\n        final Collection<V> coll = map.remove(els[0]);\n        assertNotNull(coll);\n        assertEquals(0, coll.size());\n        assertTrue(map.remove(Integer.valueOf((String) els[0])).contains(els[0]));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java", "class_name": "TransformedMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest.[void]testValueTransformedMap()", "name": "testValueTransformedMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValueTransformedMap()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testValueTransformedMap() {\n        final Object[] els = { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n\n        final MultiValuedMap<K, V> map = TransformedMultiValuedMap.transformingMap(\n                new ArrayListValuedHashMap<>(), null,\n                (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n        assertEquals(0, map.size());\n        for (int i = 0; i < els.length; i++) {\n            map.put((K) els[i], (V) els[i]);\n            assertEquals(i + 1, map.size());\n            assertTrue(map.containsValue(Integer.valueOf((String) els[i])));\n            assertFalse(map.containsValue(els[i]));\n            assertTrue(map.containsKey(els[i]));\n            assertTrue(map.get((K) els[i]).contains(Integer.valueOf((String) els[i])));\n        }\n        assertTrue(map.remove(els[0]).contains(Integer.valueOf((String) els[0])));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java", "class_name": "TransformedMultiValuedMapTest", "class_uri": "src/test/java/org/apache/commons/collections4/multimap/TransformedMultiValuedMapTest.java.TransformedMultiValuedMapTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java.PredicatedMultiSetTest.[void]testIllegalAdd()", "name": "testIllegalAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalAdd() {\n        final MultiSet<T> multiset = makeTestMultiSet();\n        final Integer i = Integer.valueOf(3);\n        assertThrows(IllegalArgumentException.class, () -> multiset.add((T) i),\n                \"Integer should fail string predicate.\");\n        assertFalse(multiset.contains(i), \"Collection shouldn't contain illegal element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java", "class_name": "PredicatedMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java.PredicatedMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java.PredicatedMultiSetTest.[void]testIllegalDecorate()", "name": "testIllegalDecorate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalDecorate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testIllegalDecorate() {\n        final HashMultiSet<Object> elements = new HashMultiSet<>();\n        elements.add(\"one\");\n        elements.add(\"two\");\n        elements.add(Integer.valueOf(3));\n        elements.add(\"four\");\n        assertThrows(IllegalArgumentException.class, () -> decorateMultiSet((HashMultiSet<T>) elements, stringPredicate()),\n                \"MultiSet contains an element that should fail the predicate.\");\n        assertThrows(NullPointerException.class, () -> decorateMultiSet(new HashMultiSet<>(), null),\n                \"Expecting NullPointerException for null predicate.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java", "class_name": "PredicatedMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java.PredicatedMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java.PredicatedMultiSetTest.[void]testLegalAddRemove()", "name": "testLegalAddRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLegalAddRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testLegalAddRemove() {\n        final MultiSet<T> multiset = makeTestMultiSet();\n        assertEquals(0, multiset.size());\n        final T[] els = (T[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\" };\n        for (int i = 0; i < els.length; i++) {\n            multiset.add(els[i]);\n            assertEquals(i + 1, multiset.size());\n            assertTrue(multiset.contains(els[i]));\n        }\n        Set<T> set = ((PredicatedMultiSet<T>) multiset).uniqueSet();\n        assertTrue(set.contains(els[0]), \"Unique set contains the first element\");\n        assertTrue(multiset.remove(els[0]));\n        set = ((PredicatedMultiSet<T>) multiset).uniqueSet();\n        assertTrue(set.contains(els[0]),\n            \"Unique set does not contain anymore the first element\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java", "class_name": "PredicatedMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/PredicatedMultiSetTest.java.PredicatedMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testEmptyMultiSetCompatibility()", "name": "testEmptyMultiSetCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyMultiSetCompatibility()", "original_string": "    @Test\n    public void testEmptyMultiSetCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final MultiSet<T> multiset = makeObject();\n        if (multiset instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final MultiSet<?> multiset2 = (MultiSet<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(multiset));\n            assertTrue(multiset2.isEmpty(), \"MultiSet is empty\");\n            assertEquals(multiset, multiset2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the MultiSet\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testFullMultiSetCompatibility()", "name": "testFullMultiSetCompatibility", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFullMultiSetCompatibility()", "original_string": "    @Test\n    public void testFullMultiSetCompatibility() throws IOException, ClassNotFoundException {\n        // test to make sure the canonical form has been preserved\n        final MultiSet<T> multiset = makeFullCollection();\n        if (multiset instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n            final MultiSet<?> multiset2 = (MultiSet<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(multiset));\n            assertEquals(multiset.size(), multiset2.size(), \"MultiSet is the right size\");\n            assertEquals(multiset, multiset2);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare the current serialized form of the MultiSet\nagainst the canonical version in SCM.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetAdd()", "name": "testMultiSetAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetAdd()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetAdd() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        assertTrue(multiset.contains(\"A\"), \"Should contain 'A'\");\n        assertEquals(1, multiset.getCount(\"A\"), \"Should have count of 1\");\n        multiset.add((T) \"A\");\n        assertTrue(multiset.contains(\"A\"), \"Should contain 'A'\");\n        assertEquals(2, multiset.getCount(\"A\"), \"Should have count of 2\");\n        multiset.add((T) \"B\");\n        assertTrue(multiset.contains(\"A\"));\n        assertTrue(multiset.contains(\"B\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetContains()", "name": "testMultiSetContains", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetContains()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetContains() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n\n        assertFalse(multiset.contains(\"A\"), \"MultiSet does not have at least 1 'A'\");\n        assertFalse(multiset.contains(\"B\"), \"MultiSet does not have at least 1 'B'\");\n\n        multiset.add((T) \"A\");  // multiset 1A\n        assertTrue(multiset.contains(\"A\"), \"MultiSet has at least 1 'A'\");\n        assertFalse(multiset.contains(\"B\"), \"MultiSet does not have at least 1 'B'\");\n\n        multiset.add((T) \"A\");  // multiset 2A\n        assertTrue(multiset.contains(\"A\"), \"MultiSet has at least 1 'A'\");\n        assertFalse(multiset.contains(\"B\"), \"MultiSet does not have at least 1 'B'\");\n\n        multiset.add((T) \"B\");  // multiset 2A,1B\n        assertTrue(multiset.contains(\"A\"), \"MultiSet has at least 1 'A'\");\n        assertTrue(multiset.contains(\"B\"), \"MultiSet has at least 1 'B'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetContainsAll()", "name": "testMultiSetContainsAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetContainsAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetContainsAll() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        final List<String> known = new ArrayList<>();\n        final List<String> known1A = new ArrayList<>();\n        known1A.add(\"A\");\n        final List<String> known2A = new ArrayList<>();\n        known2A.add(\"A\");\n        known2A.add(\"A\");\n        final List<String> known1B = new ArrayList<>();\n        known1B.add(\"B\");\n        final List<String> known1A1B = new ArrayList<>();\n        known1A1B.add(\"A\");\n        known1A1B.add(\"B\");\n\n        assertTrue(multiset.containsAll(known), \"MultiSet containsAll of empty\");\n        assertFalse(multiset.containsAll(known1A), \"MultiSet does not containsAll of 1 'A'\");\n        assertFalse(multiset.containsAll(known2A), \"MultiSet does not containsAll of 2 'A'\");\n        assertFalse(multiset.containsAll(known1B), \"MultiSet does not containsAll of 1 'B'\");\n        assertFalse(multiset.containsAll(known1A1B), \"MultiSet does not containsAll of 1 'A' 1 'B'\");\n\n        multiset.add((T) \"A\");  // multiset 1A\n        assertTrue(multiset.containsAll(known), \"MultiSet containsAll of empty\");\n        assertTrue(multiset.containsAll(known1A), \"MultiSet containsAll of 1 'A'\");\n        assertTrue(multiset.containsAll(known2A), \"MultiSet does not containsAll 'A'\");\n        assertFalse(multiset.containsAll(known1B), \"MultiSet does not containsAll of 1 'B'\");\n        assertFalse(multiset.containsAll(known1A1B), \"MultiSet does not containsAll of 1 'A' 1 'B'\");\n\n        multiset.add((T) \"A\");  // multiset 2A\n        assertTrue(multiset.containsAll(known), \"MultiSet containsAll of empty\");\n        assertTrue(multiset.containsAll(known1A), \"MultiSet containsAll of 1 'A'\");\n        assertTrue(multiset.containsAll(known2A), \"MultiSet containsAll of 2 'A'\");\n        assertFalse(multiset.containsAll(known1B), \"MultiSet does not containsAll of 1 'B'\");\n        assertFalse(multiset.containsAll(known1A1B), \"MultiSet does not containsAll of 1 'A' 1 'B'\");\n\n        multiset.add((T) \"A\");  // multiset 3A\n        assertTrue(multiset.containsAll(known), \"MultiSet containsAll of empty\");\n        assertTrue(multiset.containsAll(known1A), \"MultiSet containsAll of 1 'A'\");\n        assertTrue(multiset.containsAll(known2A), \"MultiSet containsAll of 2 'A'\");\n        assertFalse(multiset.containsAll(known1B), \"MultiSet does not containsAll of 1 'B'\");\n        assertFalse(multiset.containsAll(known1A1B), \"MultiSet does not containsAll of 1 'A' 1 'B'\");\n\n        multiset.add((T) \"B\");  // multiset 3A1B\n        assertTrue(multiset.containsAll(known), \"MultiSet containsAll of empty\");\n        assertTrue(multiset.containsAll(known1A), \"MultiSet containsAll of 1 'A'\");\n        assertTrue(multiset.containsAll(known2A), \"MultiSet containsAll of 2 'A'\");\n        assertTrue(multiset.containsAll(known1B), \"MultiSet containsAll of 1 'B'\");\n        assertTrue(multiset.containsAll(known1A1B), \"MultiSet containsAll of 1 'A' 1 'B'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetEntrySetUpdatedToZero()", "name": "testMultiSetEntrySetUpdatedToZero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEntrySetUpdatedToZero()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEntrySetUpdatedToZero() {\n        if (!isAddSupported()) {\n            return;\n        }\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        final MultiSet.Entry<T> entry = multiset.entrySet().iterator().next();\n        assertEquals(2, entry.getCount());\n        multiset.remove(\"A\");\n        assertEquals(1, entry.getCount());\n        multiset.remove(\"A\");\n        assertEquals(0, entry.getCount());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetEquals()", "name": "testMultiSetEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEquals()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEquals() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        final MultiSet<T> multiset2 = makeObject();\n        assertTrue(multiset.equals(multiset2));\n        multiset.add((T) \"A\");\n        assertFalse(multiset.equals(multiset2));\n        multiset2.add((T) \"A\");\n        assertTrue(multiset.equals(multiset2));\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"C\");\n        multiset2.add((T) \"A\");\n        multiset2.add((T) \"B\");\n        multiset2.add((T) \"B\");\n        multiset2.add((T) \"C\");\n        assertTrue(multiset.equals(multiset2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetEqualsHashMultiSet()", "name": "testMultiSetEqualsHashMultiSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEqualsHashMultiSet()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEqualsHashMultiSet() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        final MultiSet<T> multiset2 = new HashMultiSet<>();\n        assertTrue(multiset.equals(multiset2));\n        multiset.add((T) \"A\");\n        assertFalse(multiset.equals(multiset2));\n        multiset2.add((T) \"A\");\n        assertTrue(multiset.equals(multiset2));\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"C\");\n        multiset2.add((T) \"A\");\n        multiset2.add((T) \"B\");\n        multiset2.add((T) \"B\");\n        multiset2.add((T) \"C\");\n        assertTrue(multiset.equals(multiset2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetEqualsSelf()", "name": "testMultiSetEqualsSelf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEqualsSelf()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetEqualsSelf() {\n        final MultiSet<T> multiset = makeObject();\n        assertEquals(multiset, multiset);\n\n        if (!isAddSupported()) {\n            return;\n        }\n\n        multiset.add((T) \"elt\");\n        assertEquals(multiset, multiset);\n        multiset.add((T) \"elt\"); // again\n        assertEquals(multiset, multiset);\n        multiset.add((T) \"elt2\");\n        assertEquals(multiset, multiset);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetHashCode()", "name": "testMultiSetHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetHashCode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetHashCode() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        final MultiSet<T> multiset2 = makeObject();\n        assertEquals(0, multiset.hashCode());\n        assertEquals(0, multiset2.hashCode());\n        assertEquals(multiset.hashCode(), multiset2.hashCode());\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"C\");\n        multiset2.add((T) \"A\");\n        multiset2.add((T) \"A\");\n        multiset2.add((T) \"B\");\n        multiset2.add((T) \"B\");\n        multiset2.add((T) \"C\");\n        assertEquals(multiset.hashCode(), multiset2.hashCode());\n\n        int total = 0;\n        total += \"A\".hashCode() ^ 2;\n        total += \"B\".hashCode() ^ 2;\n        total += \"C\".hashCode() ^ 1;\n        assertEquals(total, multiset.hashCode());\n        assertEquals(total, multiset2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetIterator()", "name": "testMultiSetIterator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIterator()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIterator() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        assertEquals(3, multiset.size(), \"MultiSet should have 3 items\");\n        final Iterator<T> i = multiset.iterator();\n\n        boolean foundA = false;\n        while (i.hasNext()) {\n            final String element = (String) i.next();\n            // ignore the first A, remove the second via Iterator.remove()\n            if (element.equals(\"A\")) {\n                if (!foundA) {\n                    foundA = true;\n                } else {\n                    i.remove();\n                }\n            }\n        }\n\n        assertTrue(multiset.contains(\"A\"), \"MultiSet should still contain 'A'\");\n        assertEquals(2, multiset.size(), \"MultiSet should have 2 items\");\n        assertEquals(1, multiset.getCount(\"A\"), \"MultiSet should have 1 'A'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetIteratorFail()", "name": "testMultiSetIteratorFail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorFail()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorFail() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        final Iterator<T> it = multiset.iterator();\n        it.next();\n        multiset.remove(\"A\");\n        assertThrows(ConcurrentModificationException.class, () -> it.next(),\n                \"Should throw ConcurrentModificationException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetIteratorFailDoubleRemove()", "name": "testMultiSetIteratorFailDoubleRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorFailDoubleRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorFailDoubleRemove() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        final Iterator<T> it = multiset.iterator();\n        it.next();\n        it.next();\n        assertEquals(3, multiset.size());\n        it.remove();\n        assertEquals(2, multiset.size());\n        assertThrows(IllegalStateException.class, () -> it.remove(),\n                \"Should throw IllegalStateException\");\n        assertEquals(2, multiset.size());\n        it.next();\n        it.remove();\n        assertEquals(1, multiset.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetIteratorFailNoMore()", "name": "testMultiSetIteratorFailNoMore", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorFailNoMore()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorFailNoMore() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        final Iterator<T> it = multiset.iterator();\n        it.next();\n        it.next();\n        it.next();\n        assertThrows(NoSuchElementException.class, () -> it.next(),\n                \"Should throw NoSuchElementException\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetIteratorRemoveProtectsInvariants()", "name": "testMultiSetIteratorRemoveProtectsInvariants", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorRemoveProtectsInvariants()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetIteratorRemoveProtectsInvariants() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        assertEquals(2, multiset.size());\n        final Iterator<T> it = multiset.iterator();\n        assertEquals(\"A\", it.next());\n        assertTrue(it.hasNext());\n        it.remove();\n        assertEquals(1, multiset.size());\n        assertTrue(it.hasNext());\n        assertEquals(\"A\", it.next());\n        assertFalse(it.hasNext());\n        it.remove();\n        assertEquals(0, multiset.size());\n        assertFalse(it.hasNext());\n\n        final Iterator<T> it2 = multiset.iterator();\n        assertFalse(it2.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetRemove()", "name": "testMultiSetRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetRemove()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetRemove() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        assertEquals(1, multiset.getCount(\"A\"), \"Should have count of 1\");\n        multiset.remove(\"A\");\n        assertEquals(0, multiset.getCount(\"A\"), \"Should have count of 0\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        assertEquals(4, multiset.getCount(\"A\"), \"Should have count of 4\");\n        multiset.remove(\"A\", 0);\n        assertEquals(4, multiset.getCount(\"A\"), \"Should have count of 4\");\n        multiset.remove(\"A\", 2);\n        assertEquals(2, multiset.getCount(\"A\"), \"Should have count of 2\");\n        multiset.remove(\"A\");\n        assertEquals(1, multiset.getCount(\"A\"), \"Should have count of 1\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetRemoveAll()", "name": "testMultiSetRemoveAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetRemoveAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetRemoveAll() {\n        if (!isRemoveSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\", 2);\n        assertEquals(2, multiset.getCount(\"A\"), \"Should have count of 2\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"C\");\n        assertEquals(4, multiset.size(), \"Should have count of 4\");\n        final List<String> delete = new ArrayList<>();\n        delete.add(\"A\");\n        delete.add(\"B\");\n        multiset.removeAll(delete);\n        assertEquals(0, multiset.getCount(\"A\"), \"Should have count of 0\");\n        assertEquals(0, multiset.getCount(\"B\"), \"Should have count of 0\");\n        assertEquals(1, multiset.getCount(\"C\"), \"Should have count of 1\");\n        assertEquals(1, multiset.size(), \"Should have count of 1\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetRetainAll()", "name": "testMultiSetRetainAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetRetainAll()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetRetainAll() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"C\");\n        final List<String> retains = new ArrayList<>();\n        retains.add(\"B\");\n        retains.add(\"C\");\n        multiset.retainAll(retains);\n        assertEquals(3, multiset.size(), \"Should have 3 total items\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetSize()", "name": "testMultiSetSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetSize()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetSize() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        assertEquals(0, multiset.size(), \"Should have 0 total items\");\n        multiset.add((T) \"A\");\n        assertEquals(1, multiset.size(), \"Should have 1 total items\");\n        multiset.add((T) \"A\");\n        assertEquals(2, multiset.size(), \"Should have 2 total items\");\n        multiset.add((T) \"A\");\n        assertEquals(3, multiset.size(), \"Should have 3 total items\");\n        multiset.add((T) \"B\");\n        assertEquals(4, multiset.size(), \"Should have 4 total items\");\n        multiset.add((T) \"B\");\n        assertEquals(5, multiset.size(), \"Should have 5 total items\");\n        multiset.remove(\"A\", 2);\n        assertEquals(1, multiset.getCount(\"A\"), \"Should have 1 'A'\");\n        assertEquals(3, multiset.size(), \"Should have 3 total items\");\n        multiset.remove(\"B\");\n        assertEquals(2, multiset.size(), \"Should have 2 total item\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetToArray()", "name": "testMultiSetToArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetToArray()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetToArray() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"C\");\n        final Object[] array = multiset.toArray();\n        int a = 0, b = 0, c = 0;\n        for (final Object element : array) {\n            a += element.equals(\"A\") ? 1 : 0;\n            b += element.equals(\"B\") ? 1 : 0;\n            c += element.equals(\"C\") ? 1 : 0;\n        }\n        assertEquals(2, a);\n        assertEquals(2, b);\n        assertEquals(1, c);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest.[void]testMultiSetToArrayPopulate()", "name": "testMultiSetToArrayPopulate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetToArrayPopulate()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testMultiSetToArrayPopulate() {\n        if (!isAddSupported()) {\n            return;\n        }\n\n        final MultiSet<T> multiset = makeObject();\n        multiset.add((T) \"A\");\n        multiset.add((T) \"A\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"B\");\n        multiset.add((T) \"C\");\n        final String[] array = multiset.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n        int a = 0, b = 0, c = 0;\n        for (final String element : array) {\n            a += element.equals(\"A\") ? 1 : 0;\n            b += element.equals(\"B\") ? 1 : 0;\n            c += element.equals(\"C\") ? 1 : 0;\n        }\n        assertEquals(2, a);\n        assertEquals(2, b);\n        assertEquals(1, c);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java", "class_name": "AbstractMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/AbstractMultiSetTest.java.AbstractMultiSetTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest.[void]testAdd()", "name": "testAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdd()", "original_string": "    @Test\n    public void testAdd() {\n        final MultiSet<E> multiset = makeFullCollection();\n        final MultiSet<E> unmodifiableMultiSet =  UnmodifiableMultiSet.unmodifiableMultiSet(multiset);\n        assertThrows(UnsupportedOperationException.class, () -> unmodifiableMultiSet.add((E) \"One\", 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "class_name": "UnmodifiableMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest.[void]testDecorateFactory()", "name": "testDecorateFactory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDecorateFactory()", "original_string": "    @Test\n    public void testDecorateFactory() {\n        final MultiSet<E> multiset = makeFullCollection();\n        assertSame(multiset, UnmodifiableMultiSet.unmodifiableMultiSet(multiset));\n\n        assertThrows(NullPointerException.class, () -> UnmodifiableMultiSet.unmodifiableMultiSet(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "class_name": "UnmodifiableMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest.[void]testEntrySet()", "name": "testEntrySet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEntrySet()", "original_string": "    @Test\n    public void testEntrySet() {\n        final MultiSet<E> multiset = makeFullCollection();\n        final MultiSet<E> unmodifiableMultiSet =  UnmodifiableMultiSet.unmodifiableMultiSet(multiset);\n        assertSame( unmodifiableMultiSet.entrySet().size(), multiset.entrySet().size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "class_name": "UnmodifiableMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest.[void]testRemove()", "name": "testRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemove()", "original_string": "    @Test\n    public void testRemove() {\n        final MultiSet<E> multiset = makeFullCollection();\n        final MultiSet<E> unmodifiableMultiSet =  UnmodifiableMultiSet.unmodifiableMultiSet(multiset);\n        assertThrows(UnsupportedOperationException.class, () -> unmodifiableMultiSet.remove(\"One\", 1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "class_name": "UnmodifiableMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest.[void]testSetCount()", "name": "testSetCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetCount()", "original_string": "    @Test\n    public void testSetCount() {\n        final MultiSet<E> multiset = makeFullCollection();\n        final MultiSet<E> unmodifiableMultiSet =  UnmodifiableMultiSet.unmodifiableMultiSet(multiset);\n        assertThrows(UnsupportedOperationException.class, () -> unmodifiableMultiSet.setCount((E) \"One\", 2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "class_name": "UnmodifiableMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        assertTrue(makeObject() instanceof Unmodifiable);\n        assertTrue(makeFullCollection() instanceof Unmodifiable);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java", "class_name": "UnmodifiableMultiSetTest", "class_uri": "src/test/java/org/apache/commons/collections4/multiset/UnmodifiableMultiSetTest.java.UnmodifiableMultiSetTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java.TiedMapEntryTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testConstructors()", "original_string": "    @Test\n    @Override\n    public void testConstructors() {\n        // ignore\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java", "class_name": "TiedMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java.TiedMapEntryTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the constructors.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java.TiedMapEntryTest.[void]testSetValue()", "name": "testSetValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValue()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSetValue() {\n        final Map<K, V> map = new HashMap<>();\n        map.put((K) \"A\", (V) \"a\");\n        map.put((K) \"B\", (V) \"b\");\n        map.put((K) \"C\", (V) \"c\");\n        Map.Entry<K, V> entry = new TiedMapEntry<>(map, (K) \"A\");\n        assertSame(\"A\", entry.getKey());\n        assertSame(\"a\", entry.getValue());\n        assertSame(\"a\", entry.setValue((V) \"x\"));\n        assertSame(\"A\", entry.getKey());\n        assertSame(\"x\", entry.getValue());\n\n        entry = new TiedMapEntry<>(map, (K) \"B\");\n        assertSame(\"B\", entry.getKey());\n        assertSame(\"b\", entry.getValue());\n        assertSame(\"b\", entry.setValue((V) \"y\"));\n        assertSame(\"B\", entry.getKey());\n        assertSame(\"y\", entry.getValue());\n\n        entry = new TiedMapEntry<>(map, (K) \"C\");\n        assertSame(\"C\", entry.getKey());\n        assertSame(\"c\", entry.getValue());\n        assertSame(\"c\", entry.setValue((V) \"z\"));\n        assertSame(\"C\", entry.getKey());\n        assertSame(\"z\", entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java", "class_name": "TiedMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/TiedMapEntryTest.java.TiedMapEntryTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the constructors.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java.DefaultMapEntryTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testConstructors()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testConstructors() {\n        // 1. test key-value constructor\n        final Map.Entry<K, V> entry = new DefaultMapEntry<>((K) key, (V) value);\n        assertSame(key, entry.getKey());\n        assertSame(value, entry.getValue());\n\n        // 2. test pair constructor\n        final KeyValue<K, V> pair = new DefaultKeyValue<>((K) key, (V) value);\n        assertSame(key, pair.getKey());\n        assertSame(value, pair.getValue());\n\n        // 3. test copy constructor\n        final Map.Entry<K, V> entry2 = new DefaultMapEntry<>(entry);\n        assertSame(key, entry2.getKey());\n        assertSame(value, entry2.getValue());\n\n        // test that the objects are independent\n        entry.setValue(null);\n        assertSame(value, entry2.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java", "class_name": "DefaultMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java.DefaultMapEntryTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSubclasses should override this method.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java.DefaultMapEntryTest.[void]testSelfReferenceHandling()", "name": "testSelfReferenceHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testSelfReferenceHandling()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testSelfReferenceHandling() {\n        final Map.Entry<K, V> entry = makeMapEntry();\n\n        entry.setValue((V) entry);\n        assertSame(entry, entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java", "class_name": "DefaultMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultMapEntryTest.java.DefaultMapEntryTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest.[void]testAccessorsAndMutators()", "name": "testAccessorsAndMutators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAccessorsAndMutators()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAccessorsAndMutators() {\n        final DefaultKeyValue<K, V> kv = makeDefaultKeyValue();\n\n        kv.setKey((K) key);\n        assertSame(key, kv.getKey());\n\n        kv.setValue((V) value);\n        assertSame(value, kv.getValue());\n\n        // check that null doesn't do anything funny\n        kv.setKey(null);\n        assertNull(kv.getKey());\n\n        kv.setValue(null);\n        assertNull(kv.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "class_name": "DefaultKeyValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testConstructors()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testConstructors() {\n        // 1. test default constructor\n        DefaultKeyValue<K, V> kv = new DefaultKeyValue<>();\n        assertTrue(kv.getKey() == null && kv.getValue() == null);\n\n        // 2. test key-value constructor\n        kv = new DefaultKeyValue<>((K) key, (V) value);\n        assertTrue(kv.getKey() == key && kv.getValue() == value);\n\n        // 3. test copy constructor\n        final DefaultKeyValue<K, V> kv2 = new DefaultKeyValue<>(kv);\n        assertTrue(kv2.getKey() == key && kv2.getValue() == value);\n\n        // test that the KVPs are independent\n        kv.setKey(null);\n        kv.setValue(null);\n\n        assertTrue(kv2.getKey() == key && kv2.getValue() == value);\n\n        // 4. test Map.Entry constructor\n        final Map<K, V> map = new HashMap<>();\n        map.put((K) key, (V) value);\n        final Map.Entry<K, V> entry = map.entrySet().iterator().next();\n\n        kv = new DefaultKeyValue<>(entry);\n        assertTrue(kv.getKey() == key && kv.getValue() == value);\n\n        // test that the KVP is independent of the Map.Entry\n        entry.setValue(null);\n        assertSame(value, kv.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "class_name": "DefaultKeyValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSubclasses should override this method to test their own constructors.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest.[void]testEqualsAndHashCode()", "name": "testEqualsAndHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEqualsAndHashCode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEqualsAndHashCode() {\n        // 1. test with object data\n        DefaultKeyValue<K, V> kv = makeDefaultKeyValue((K) key, (V) value);\n        DefaultKeyValue<K, V> kv2 = makeDefaultKeyValue((K) key, (V) value);\n\n        assertEquals(kv, kv);\n        assertEquals(kv, kv2);\n        assertEquals(kv.hashCode(), kv2.hashCode());\n\n        // 2. test with nulls\n        kv = makeDefaultKeyValue(null, null);\n        kv2 = makeDefaultKeyValue(null, null);\n\n        assertEquals(kv, kv);\n        assertEquals(kv, kv2);\n        assertEquals(kv.hashCode(), kv2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "class_name": "DefaultKeyValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest.[void]testSelfReferenceHandling()", "name": "testSelfReferenceHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSelfReferenceHandling()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSelfReferenceHandling() {\n        // test that #setKey and #setValue do not permit\n        //  the KVP to contain itself (and thus cause infinite recursion\n        //  in #hashCode and #toString)\n\n        final DefaultKeyValue<K, V> kv = makeDefaultKeyValue();\n\n        assertThrows(IllegalArgumentException.class, () -> kv.setKey((K) kv));\n        // check that the KVP's state has not changed\n        assertTrue(kv.getKey() == null && kv.getValue() == null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "class_name": "DefaultKeyValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest.[void]testToMapEntry()", "name": "testToMapEntry", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToMapEntry()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToMapEntry() {\n        final DefaultKeyValue<K, V> kv = makeDefaultKeyValue((K) key, (V) value);\n\n        final Map<K, V> map = new HashMap<>();\n        map.put(kv.getKey(), kv.getValue());\n        final Map.Entry<K, V> entry = map.entrySet().iterator().next();\n\n        assertEquals(entry, kv.toMapEntry());\n        assertEquals(entry.hashCode(), kv.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "class_name": "DefaultKeyValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToString()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToString() {\n        DefaultKeyValue<K, V> kv = makeDefaultKeyValue((K) key, (V) value);\n        assertEquals(kv.toString(), kv.getKey() + \"=\" + kv.getValue());\n\n        // test with nulls\n        kv = makeDefaultKeyValue(null, null);\n        assertEquals(kv.toString(), kv.getKey() + \"=\" + kv.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java", "class_name": "DefaultKeyValueTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/DefaultKeyValueTest.java.DefaultKeyValueTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest.[void]testAccessorsAndMutators()", "name": "testAccessorsAndMutators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAccessorsAndMutators()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testAccessorsAndMutators() {\n        Map.Entry<K, V> entry = makeMapEntry((K) key, (V) value);\n\n        assertSame(key, entry.getKey());\n\n        entry.setValue((V) value);\n        assertSame(value, entry.getValue());\n\n        // check that null doesn't do anything funny\n        entry = makeMapEntry(null, null);\n        assertNull(entry.getKey());\n\n        entry.setValue(null);\n        assertNull(entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java", "class_name": "AbstractMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest.[void]testEqualsAndHashCode()", "name": "testEqualsAndHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEqualsAndHashCode()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testEqualsAndHashCode() {\n        // 1. test with object data\n        Map.Entry<K, V> e1 = makeMapEntry((K) key, (V) value);\n        Map.Entry<K, V> e2 = makeKnownMapEntry((K) key, (V) value);\n\n        assertEquals(e1, e1);\n        assertEquals(e2, e1);\n        assertEquals(e1, e2);\n        assertEquals(e1.hashCode(), e2.hashCode());\n\n        // 2. test with nulls\n        e1 = makeMapEntry();\n        e2 = makeKnownMapEntry();\n\n        assertEquals(e1, e1);\n        assertEquals(e2, e1);\n        assertEquals(e1, e2);\n        assertEquals(e1.hashCode(), e2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java", "class_name": "AbstractMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest.[void]testSelfReferenceHandling()", "name": "testSelfReferenceHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSelfReferenceHandling()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testSelfReferenceHandling() {\n        // test that #setValue does not permit\n        //  the MapEntry to contain itself (and thus cause infinite recursion\n        //  in #hashCode and #toString)\n\n        final Map.Entry<K, V> entry = makeMapEntry();\n\n        assertThrows(IllegalArgumentException.class, () -> entry.setValue((V) entry));\n\n        // check that the KVP's state has not changed\n        assertTrue(entry.getKey() == null && entry.getValue() == null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java", "class_name": "AbstractMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSubclasses should override this method to test the\ndesired behavior of the class with respect to\nhandling of self-references.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToString()", "original_string": "    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testToString() {\n        Map.Entry<K, V> entry = makeMapEntry((K) key, (V) value);\n        assertEquals(entry.toString(), entry.getKey() + \"=\" + entry.getValue());\n\n        // test with nulls\n        entry = makeMapEntry();\n        assertEquals(entry.toString(), entry.getKey() + \"=\" + entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java", "class_name": "AbstractMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryTest.java.AbstractMapEntryTest", "attributes": {"modifiers": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest.[void]testAccessorsAndMutators()", "name": "testAccessorsAndMutators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testAccessorsAndMutators()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testAccessorsAndMutators() {\n        Map.Entry<K, V> entry = makeMapEntry((K) key, (V) value);\n\n        assertSame(key, entry.getKey());\n        assertSame(value, entry.getValue());\n\n        // check that null doesn't do anything funny\n        entry = makeMapEntry(null, null);\n        assertSame(null, entry.getKey());\n        assertSame(null, entry.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java", "class_name": "UnmodifiableMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testConstructors()", "original_string": "    @Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public void testConstructors() {\n        // 1. test key-value constructor\n        Map.Entry<K, V> entry = new UnmodifiableMapEntry<>((K) key, (V) value);\n        assertSame(key, entry.getKey());\n        assertSame(value, entry.getValue());\n\n        // 2. test pair constructor\n        final KeyValue<K, V> pair = new DefaultKeyValue<>((K) key, (V) value);\n        entry = new UnmodifiableMapEntry<>(pair);\n        assertSame(key, entry.getKey());\n        assertSame(value, entry.getValue());\n\n        // 3. test copy constructor\n        final Map.Entry<K, V> entry2 = new UnmodifiableMapEntry<>(entry);\n        assertSame(key, entry2.getKey());\n        assertSame(value, entry2.getValue());\n\n        assertInstanceOf(Unmodifiable.class, entry);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java", "class_name": "UnmodifiableMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest", "attributes": {"modifiers": "@Test\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSubclasses should override this method.\n"}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest.[void]testSelfReferenceHandling()", "name": "testSelfReferenceHandling", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    @Override\n    public void testSelfReferenceHandling()", "original_string": "    @Test\n    @Override\n    public void testSelfReferenceHandling() {\n        // block\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java", "class_name": "UnmodifiableMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest", "attributes": {"modifiers": "@Test\n    @Override\n    public", "marker_annotations": ["@Test", "@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest.[void]testUnmodifiable()", "name": "testUnmodifiable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnmodifiable()", "original_string": "    @Test\n    public void testUnmodifiable() {\n        final Map.Entry<K, V> entry = makeMapEntry();\n\n        assertThrows(UnsupportedOperationException.class, () -> entry.setValue(null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java", "class_name": "UnmodifiableMapEntryTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/UnmodifiableMapEntryTest.java.UnmodifiableMapEntryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testConstructors()", "name": "testConstructors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructors()", "original_string": "    @Test\n    public void testConstructors() throws Exception {\n        MultiKey<Integer> mk;\n        mk = new MultiKey<>(ONE, TWO);\n        assertArrayEquals(new Object[]{ONE, TWO}, mk.getKeys());\n\n        mk = new MultiKey<>(ONE, TWO, THREE);\n        assertArrayEquals(new Object[]{ONE, TWO, THREE}, mk.getKeys());\n\n        mk = new MultiKey<>(ONE, TWO, THREE, FOUR);\n        assertArrayEquals(new Object[]{ONE, TWO, THREE, FOUR}, mk.getKeys());\n\n        mk = new MultiKey<>(ONE, TWO, THREE, FOUR, FIVE);\n        assertArrayEquals(new Object[]{ONE, TWO, THREE, FOUR, FIVE}, mk.getKeys());\n\n        mk = new MultiKey<>(new Integer[] { THREE, FOUR, ONE, TWO }, false);\n        assertArrayEquals(new Object[]{THREE, FOUR, ONE, TWO}, mk.getKeys());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testConstructorsByArray()", "name": "testConstructorsByArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructorsByArray()", "original_string": "    @Test\n    public void testConstructorsByArray() throws Exception {\n        MultiKey<Integer> mk;\n        Integer[] keys = { THREE, FOUR, ONE, TWO };\n        mk = new MultiKey<>(keys);\n        assertArrayEquals(new Object[]{THREE, FOUR, ONE, TWO}, mk.getKeys());\n        keys[3] = FIVE;  // no effect\n        assertArrayEquals(new Object[]{THREE, FOUR, ONE, TWO}, mk.getKeys());\n\n        keys = new Integer[] {};\n        mk = new MultiKey<>(keys);\n        assertArrayEquals(new Object[]{}, mk.getKeys());\n\n        keys = new Integer[] { THREE, FOUR, ONE, TWO };\n        mk = new MultiKey<>(keys, true);\n        assertArrayEquals(new Object[]{THREE, FOUR, ONE, TWO}, mk.getKeys());\n        keys[3] = FIVE;  // no effect\n        assertArrayEquals(new Object[]{THREE, FOUR, ONE, TWO}, mk.getKeys());\n\n        keys = new Integer[] { THREE, FOUR, ONE, TWO };\n        mk = new MultiKey<>(keys, false);\n        assertArrayEquals(new Object[]{THREE, FOUR, ONE, TWO}, mk.getKeys());\n        // change key - don't do this!\n        // the hash code of the MultiKey is now broken\n        keys[3] = FIVE;\n        assertArrayEquals(new Object[]{THREE, FOUR, ONE, FIVE}, mk.getKeys());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testEquals()", "name": "testEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEquals()", "original_string": "    @Test\n    public void testEquals() {\n        final MultiKey<Integer> mk1 = new MultiKey<>(ONE, TWO);\n        final MultiKey<Integer> mk2 = new MultiKey<>(ONE, TWO);\n        final MultiKey<Object> mk3 = new MultiKey<>(ONE, \"TWO\");\n\n        assertEquals(mk1, mk1);\n        assertEquals(mk1, mk2);\n        assertNotEquals(mk1, mk3);\n        assertNotEquals(StringUtils.EMPTY, mk1);\n        assertNotEquals(null, mk1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testEqualsAfterSerialization()", "name": "testEqualsAfterSerialization", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsAfterSerialization()", "original_string": "    @Test\n    public void testEqualsAfterSerialization() throws IOException, ClassNotFoundException {\n        SystemHashCodeSimulatingKey sysKey = new SystemHashCodeSimulatingKey(\"test\");\n        final MultiKey<?> mk = new MultiKey<Object>(ONE, sysKey);\n        final Map<MultiKey<?>, Integer> map = new HashMap<>();\n        map.put(mk, TWO);\n\n        // serialize\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final ObjectOutputStream out = new ObjectOutputStream(baos);\n        out.writeObject(sysKey);\n        out.writeObject(map);\n        out.close();\n\n        // deserialize\n        final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n        final ObjectInputStream in = new ObjectInputStream(bais);\n        sysKey = (SystemHashCodeSimulatingKey) in.readObject(); // simulate deserialization in another process\n        final Map<?, ?> map2 = (Map<?, ?>) in.readObject();\n        in.close();\n\n        assertEquals(2, sysKey.hashCode()); // different hashCode now\n\n        final MultiKey<?> mk2 = new MultiKey<Object>(ONE, sysKey);\n        assertEquals(TWO, map2.get(mk2));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testEqualsAfterSerializationOfDerivedClass()", "name": "testEqualsAfterSerializationOfDerivedClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEqualsAfterSerializationOfDerivedClass()", "original_string": "    @Test\n    public void testEqualsAfterSerializationOfDerivedClass() throws IOException, ClassNotFoundException {\n        final DerivedMultiKey<?> mk = new DerivedMultiKey<>(\"A\", \"B\");\n\n        // serialize\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final ObjectOutputStream out = new ObjectOutputStream(baos);\n        out.writeObject(mk);\n        out.close();\n\n        // deserialize\n        final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n        final ObjectInputStream in = new ObjectInputStream(bais);\n        final DerivedMultiKey<?> mk2 = (DerivedMultiKey<?>) in.readObject();\n        in.close();\n\n        assertEquals(mk.hashCode(), mk2.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testGetKeysArrayConstructorCloned()", "name": "testGetKeysArrayConstructorCloned", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetKeysArrayConstructorCloned()", "original_string": "    @Test\n    public void testGetKeysArrayConstructorCloned() {\n        final Integer[] keys = { ONE, TWO };\n        final MultiKey<Integer> mk = new MultiKey<>(keys, true);\n        final Object[] array = mk.getKeys();\n        assertNotSame(array, keys);\n        assertArrayEquals(array, keys);\n        assertSame(ONE, array[0]);\n        assertSame(TWO, array[1]);\n        assertEquals(2, array.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testGetKeysArrayConstructorNonCloned()", "name": "testGetKeysArrayConstructorNonCloned", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetKeysArrayConstructorNonCloned()", "original_string": "    @Test\n    public void testGetKeysArrayConstructorNonCloned() {\n        final Integer[] keys = { ONE, TWO };\n        final MultiKey<Integer> mk = new MultiKey<>(keys, false);\n        final Object[] array = mk.getKeys();\n        assertNotSame(array, keys);  // still not equal\n        assertArrayEquals(array, keys);\n        assertSame(ONE, array[0]);\n        assertSame(TWO, array[1]);\n        assertEquals(2, array.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testGetKeysSimpleConstructor()", "name": "testGetKeysSimpleConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetKeysSimpleConstructor()", "original_string": "    @Test\n    public void testGetKeysSimpleConstructor() {\n        final MultiKey<Integer> mk = new MultiKey<>(ONE, TWO);\n        final Object[] array = mk.getKeys();\n        assertSame(ONE, array[0]);\n        assertSame(TWO, array[1]);\n        assertEquals(2, array.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashCode()", "original_string": "    @Test\n    public void testHashCode() {\n        final MultiKey<Integer> mk1 = new MultiKey<>(ONE, TWO);\n        final MultiKey<Integer> mk2 = new MultiKey<>(ONE, TWO);\n        final MultiKey<Object> mk3 = new MultiKey<>(ONE, \"TWO\");\n\n        assertEquals(mk1.hashCode(), mk1.hashCode());\n        assertEquals(mk1.hashCode(), mk2.hashCode());\n        assertTrue(mk1.hashCode() != mk3.hashCode());\n\n        final int total = 0 ^ ONE.hashCode() ^ TWO.hashCode();\n        assertEquals(total, mk1.hashCode());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testSize()", "name": "testSize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSize()", "original_string": "    @Test\n    public void testSize() {\n        assertEquals(2, new MultiKey<>(ONE, TWO).size());\n        assertEquals(2, new MultiKey<>(null, null).size());\n        assertEquals(3, new MultiKey<>(ONE, TWO, THREE).size());\n        assertEquals(3, new MultiKey<>(null, null, null).size());\n        assertEquals(4, new MultiKey<>(ONE, TWO, THREE, FOUR).size());\n        assertEquals(4, new MultiKey<>(null, null, null, null).size());\n        assertEquals(5, new MultiKey<>(ONE, TWO, THREE, FOUR, FIVE).size());\n        assertEquals(5, new MultiKey<>(null, null, null, null, null).size());\n\n        assertEquals(0, new MultiKey<>(new Object[] {}).size());\n        assertEquals(1, new MultiKey<>(new Integer[] { ONE }).size());\n        assertEquals(2, new MultiKey<>(new Integer[] { ONE, TWO }).size());\n        assertEquals(7, new MultiKey<>(new Integer[] { ONE, TWO, ONE, TWO, ONE, TWO, ONE }).size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest.[void]testTwoArgCtor()", "name": "testTwoArgCtor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwoArgCtor()", "original_string": "    @Test\n    public void testTwoArgCtor() {\n        final MultiKeyTest key1 = new MultiKeyTest();\n        final MultiKeyTest key2 = new MultiKeyTest();\n        final MultiKeyTest[] keys = new MultiKey<>(key1, key2).getKeys();\n        assertNotNull(keys);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java", "class_name": "MultiKeyTest", "class_uri": "src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java.MultiKeyTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]