[{"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getCollectionTest.java", "testclass_name": "MultiMapUtils_getCollectionTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Collection;"]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_elementTest.java", "testclass_name": "SynchronizedQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SynchronizedQueue_elementTest", "description": "Unit test for the element method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testElement", "primary_tested": ["SynchronizedQueue.element()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the element method of SynchronizedQueue to ensure it retrieves the head element without removing it."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_toListTest.java", "testclass_name": "EnumerationUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.StringTokenizer;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EnumerationUtils_toListTest", "description": "Unit tests for the EnumerationUtils.toList method using a StringTokenizer.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testToListWithStringTokenizer", "primary_tested": ["EnumerationUtils.toList(Enumeration)"], "external_dependencies": {"modules": ["EnumerationUtils", "StringTokenizer", "List"]}, "category": "unit", "description": "Tests the EnumerationUtils.toList method with a StringTokenizer, verifying the conversion of tokens to a list and their correctness."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_peekTest.java", "testclass_name": "SynchronizedQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SynchronizedQueue_peekTest", "description": "Unit test for the peek method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPeek", "primary_tested": ["SynchronizedQueue.peek()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the peek functionality of the SynchronizedQueue to ensure it returns the correct element without removing it."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_chainedIteratorTest.java", "testclass_name": "IteratorUtils_chainedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "IteratorUtils_chainedIteratorTest", "description": "Unit tests for the chainedIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testChainedIterator", "primary_tested": ["IteratorUtils.chainedIterator(Iterator,Iterator)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.Iterator", "java.util.List", "org.apache.commons.collections4.IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedIterator functionality of IteratorUtils by chaining two iterators and verifying the sequence of elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashSetTest.java", "testclass_name": "SetUtils_hashSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SetUtils_hashSetTest", "description": "Unit tests for the SetUtils.hashSet method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashSetWithItems", "primary_tested": ["SetUtils.hashSet(String[])"], "external_dependencies": {"modules": ["SetUtils", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with an array of items."}, {"name": "testHashSetWithNull", "primary_tested": ["SetUtils.hashSet(String[])"], "external_dependencies": {"modules": ["SetUtils", "HashSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the SetUtils.hashSet method with a null array."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_zippingIteratorTest.java", "testclass_name": "IteratorUtils_zippingIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import org.apache.commons.collections4.iterators.ZippingIterator;"], "name": "IteratorUtils_zippingIteratorTest", "description": "Unit tests for the ZippingIterator functionality in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testZippingIterator", "primary_tested": ["IteratorUtils.zippingIterator(Iterator,Iterator,Iterator)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "ZippingIterator", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a ZippingIterator using IteratorUtils."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_removeTest.java", "testclass_name": "SynchronizedQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SynchronizedQueue_removeTest", "description": "Unit test for the remove method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testRemove", "primary_tested": ["SynchronizedQueue.remove()"], "external_dependencies": {"modules": ["java.util.LinkedList", "java.util.Queue", "org.apache.commons.collections4.queue.SynchronizedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the remove functionality of the SynchronizedQueue, ensuring the correct element is removed and the queue is empty after removal."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_pollTest.java", "testclass_name": "SynchronizedQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SynchronizedQueue_pollTest", "description": "Unit test for the poll method of SynchronizedQueue.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPoll", "primary_tested": ["SynchronizedQueue.poll()"], "associated_methods": ["SynchronizedQueue.peek()"], "external_dependencies": {"modules": ["java.util.LinkedList", "java.util.Queue", "org.apache.commons.collections4.queue.SynchronizedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the poll functionality of the SynchronizedQueue, ensuring it correctly retrieves and removes the head of the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/UnmodifiableBag_uniqueSetTest.java", "testclass_name": "UnmodifiableBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableBag_uniqueSetTest", "description": "Test suite for the uniqueSet method of the UnmodifiableBag class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["UnmodifiableBag.uniqueSet()"], "associated_methods": ["UnmodifiableSet.contains(Object)"], "external_dependencies": {"modules": ["Bag", "HashBag", "UnmodifiableBag", "Set", "UnmodifiableSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of the UnmodifiableBag class to ensure it returns an UnmodifiableSet containing unique elements from the bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_uniqueSetTest.java", "testclass_name": "TransformedBag_uniqueSetTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.set.TransformedSet;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.HashSet;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.when;"], "name": "TransformedBag_uniqueSetTest", "description": "Unit tests for the uniqueSet method in TransformedBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUniqueSet", "primary_tested": ["TransformedBag.uniqueSet()"], "associated_methods": ["TransformedSet.equals(Object)", "TransformedSet.hashCode()"], "external_dependencies": {"modules": ["Bag", "Transformer", "TransformedBag", "TransformedSet", "Mockito"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the uniqueSet method of TransformedBag to ensure it returns a TransformedSet."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addAllTest.java", "testclass_name": "CollectionBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;"], "name": "CollectionBag_addAllTest", "description": "Unit test for the addAll method of the CollectionBag class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll", "primary_tested": ["CollectionBag.addAll(Collection)"], "associated_methods": ["CollectionBag.containsAll(Collection)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Bag", "org.apache.commons.collections4.bag.CollectionBag", "org.apache.commons.collections4.bag.HashBag", "java.util.Arrays", "java.util.Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll functionality of the CollectionBag, ensuring that elements are added and the bag contains all added elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_transformedComparatorTest.java", "testclass_name": "ComparatorUtils_transformedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.comparators.TransformingComparator;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "ComparatorUtils_transformedComparatorTest", "description": "Unit tests for the transformedComparator method in ComparatorUtils.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedComparatorWithNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator,Transformer)"], "external_dependencies": {"modules": ["ComparatorUtils", "TransformingComparator", "ConstantTransformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformingComparator with a null comparator."}, {"name": "testTransformedComparatorWithNonNullComparator", "primary_tested": ["ComparatorUtils.transformedComparator(Comparator,Transformer)"], "external_dependencies": {"modules": ["ComparatorUtils", "TransformingComparator", "ConstantTransformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformingComparator with a non-null comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_hashCodeTest.java", "testclass_name": "SynchronizedQueue_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Queue;"], "name": "SynchronizedQueue_hashCodeTest", "description": "Unit test for the hashCode method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}]}, "fixtures": [], "test_cases": [{"name": "testHashCode", "primary_tested": ["SynchronizedQueue.hashCode()"], "associated_methods": ["Queue.hashCode()"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the hashCode method of SynchronizedQueue to ensure it returns the same hash code as the underlying queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueue_unmodifiableQueueTest.java", "testclass_name": "UnmodifiableQueue_unmodifiableQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import java.util.Queue;", "import java.util.LinkedList;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableQueue_unmodifiableQueueTest", "description": "Tests for the UnmodifiableQueue class, specifically focusing on the unmodifiableQueue method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableQueueWithModifiableQueue", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue)"], "external_dependencies": {"modules": ["Queue", "LinkedList", "UnmodifiableQueue"]}, "category": "unit", "description": "Tests the creation of an UnmodifiableQueue from a modifiable Queue and verifies its properties."}, {"name": "testUnmodifiableQueueWithUnmodifiableQueue", "primary_tested": ["UnmodifiableQueue.unmodifiableQueue(Queue)"], "external_dependencies": {"modules": ["Queue", "LinkedList", "UnmodifiableQueue"]}, "category": "unit", "description": "Tests the creation of an UnmodifiableQueue from an already unmodifiable Queue and verifies that the same instance is returned."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/EnumerationUtils_getTest.java", "testclass_name": "EnumerationUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Enumeration;", "import java.util.Vector;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EnumerationUtils_getTest", "description": "Unit tests for the EnumerationUtils.get method.", "class_members": {"variables": [{"name": "vector", "type": "Vector<String>"}, {"name": "enumeration", "type": "Enumeration<String>"}]}, "fixtures": [], "test_cases": [{"name": "testGet_ValidIndex", "primary_tested": ["EnumerationUtils.get(Enumeration<String>,int)"], "external_dependencies": {"modules": ["Vector", "Enumeration", "EnumerationUtils"], "class_members": [{"name": "vector", "type": "variable"}, {"name": "enumeration", "type": "variable"}]}, "category": "unit", "description": "Tests the EnumerationUtils.get method with a valid index."}, {"name": "testGet_InvalidIndex", "primary_tested": ["EnumerationUtils.get(Enumeration<String>,int)"], "external_dependencies": {"modules": ["Vector", "Enumeration", "EnumerationUtils"], "class_members": [{"name": "vector", "type": "variable"}, {"name": "enumeration", "type": "variable"}]}, "category": "unit", "description": "Tests the EnumerationUtils.get method with an invalid index, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_offerTest.java", "testclass_name": "SynchronizedQueue_offerTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;", "import java.util.Queue;"], "name": "SynchronizedQueue_offerTest", "description": "Unit test for the offer method of SynchronizedQueue.", "class_members": {"variables": [{"name": "mockQueue", "type": "Queue<String>"}, {"name": "synchronizedQueue", "type": "SynchronizedQueue<String>"}, {"name": "element", "type": "String"}]}, "test_cases": [{"name": "testOffer", "primary_tested": ["SynchronizedQueue.offer(String)"], "associated_methods": ["Queue.offer(String)"], "external_dependencies": {"modules": ["Queue", "SynchronizedQueue", "org.mockito.Mockito"], "class_members": [{"name": "mockQueue", "type": "variable"}, {"name": "synchronizedQueue", "type": "variable"}, {"name": "element", "type": "variable"}]}, "category": "unit", "description": "Tests the offer method of SynchronizedQueue, verifying that it correctly delegates to the underlying Queue and returns the expected result."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toListTest.java", "testclass_name": "IteratorUtils_toListTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_toListTest", "description": "Unit tests for the IteratorUtils.toList method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToList_SuccessfulConversion", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "ArrayList", "Iterator", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful conversion of an iterator to a list."}, {"name": "testToList_NullIterator", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the toList method when a null iterator is provided, expecting a NullPointerException."}, {"name": "testToList_InvalidEstimatedSize", "primary_tested": ["IteratorUtils.toList(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "ArrayList", "Iterator", "List"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the toList method when an invalid estimated size is provided, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/SynchronizedQueue_equalsTest.java", "testclass_name": "SynchronizedQueue_equalsTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.Test;", "import java.util.Queue;", "import java.util.LinkedList;"], "name": "SynchronizedQueue_equalsTest", "description": "Unit tests for the equals method of the SynchronizedQueue class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["SynchronizedQueue.equals(Object)"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue"]}, "category": "unit", "description": "Tests the equals method with the same instance of SynchronizedQueue."}, {"name": "testEquals_DifferentInstancesWithSameElements", "primary_tested": ["SynchronizedQueue.decorated().equals(Object)"], "associated_methods": ["SynchronizedQueue.decorated()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue"]}, "category": "unit", "description": "Tests the equals method with different instances of SynchronizedQueue having the same elements."}, {"name": "testEquals_DifferentInstancesWithDifferentElements", "primary_tested": ["SynchronizedQueue.decorated().equals(Object)"], "associated_methods": ["SynchronizedQueue.decorated()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "SynchronizedQueue"]}, "category": "unit", "description": "Tests the equals method with different instances of SynchronizedQueue having different elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_maxTest.java", "testclass_name": "ComparatorUtils_maxTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_maxTest", "description": "Unit tests for the max functionality of ComparatorUtils with different comparators.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "reverseComparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMaxWithDefaultComparator", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a default comparator."}, {"name": "testMaxWithCustomComparator", "primary_tested": ["ComparatorUtils.max(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "reverseComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the max functionality of ComparatorUtils with a custom reverse comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_filteredListIteratorTest.java", "testclass_name": "IteratorUtils_filteredListIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.ListIterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_filteredListIteratorTest", "description": "Unit tests for the filteredListIterator method in IteratorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFilteredListIterator_Success", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator<String>,Predicate<String>)"], "external_dependencies": {"modules": ["Arrays", "List", "ListIterator", "Predicate", "TruePredicate", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful creation of a filtered list iterator."}, {"name": "testFilteredListIterator_NullListIterator", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator<String>,Predicate<String>)"], "external_dependencies": {"modules": ["Predicate", "TruePredicate", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when a null list iterator is passed to the filteredListIterator method."}, {"name": "testFilteredListIterator_NullPredicate", "primary_tested": ["IteratorUtils.filteredListIterator(ListIterator<String>,Predicate<String>)"], "external_dependencies": {"modules": ["Arrays", "List", "ListIterator", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior when a null predicate is passed to the filteredListIterator method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_transformedIteratorTest.java", "testclass_name": "IteratorUtils_transformedIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_transformedIteratorTest", "description": "Unit tests for the transformedIterator method in IteratorUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedIterator_Success", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "ConstantTransformer", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful transformation of an iterator using a constant transformer."}, {"name": "testTransformedIterator_NullIterator", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "ConstantTransformer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedIterator method when the input iterator is null, expecting a NullPointerException."}, {"name": "testTransformedIterator_NullTransformer", "primary_tested": ["IteratorUtils.transformedIterator(Iterator<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the transformedIterator method when the transformer is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_sizeTest.java", "testclass_name": "IteratorUtils_sizeTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Iterator;"], "name": "IteratorUtils_sizeTest", "description": "Unit tests for the size method of IteratorUtils.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testSizeWithNullIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with a null iterator, expecting a size of 0."}, {"name": "testSizeWithEmptyIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "associated_methods": ["IteratorUtils.emptyIterator()"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with an empty iterator, expecting a size of 0."}, {"name": "testSizeWithSingletonIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "associated_methods": ["IteratorUtils.singletonIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with a singleton iterator, expecting a size of 1."}, {"name": "testSizeWithArrayIterator", "primary_tested": ["IteratorUtils.size(Iterator)"], "associated_methods": ["IteratorUtils.arrayIterator(Object[])"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the size method of IteratorUtils with an array iterator, expecting a size of 3."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_addTest.java", "testclass_name": "CollectionBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_addTest", "description": "Unit tests for the add method of CollectionBag.", "class_members": {"variables": [{"name": "mockBag", "type": "Bag<String>"}, {"name": "collectionBag", "type": "CollectionBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionBag.add(String,int)"], "associated_methods": ["Bag.add(String,int)"], "external_dependencies": {"modules": ["Bag", "CollectionBag", "Mockito"], "class_members": [{"name": "mockBag", "type": "variable"}, {"name": "collectionBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CollectionBag, verifying that the underlying Bag's add method is called and the result is true."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addTest.java", "testclass_name": "CollectionSortedBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_addTest", "description": "Unit tests for the add method of CollectionSortedBag.", "class_members": {"variables": [{"name": "mockSortedBag", "type": "SortedBag<String>"}, {"name": "collectionSortedBag", "type": "CollectionSortedBag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAdd", "primary_tested": ["CollectionSortedBag.add(String,int)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag"], "class_members": [{"name": "mockSortedBag", "type": "variable"}, {"name": "collectionSortedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the add functionality of the CollectionSortedBag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_retainAllTest.java", "testclass_name": "CollectionBag_retainAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_retainAllTest", "description": "Unit tests for the retainAll method in CollectionBag.", "class_members": {"variables": [{"name": "bag", "type": "CollectionBag<String>"}, {"name": "decoratedBag", "type": "Bag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAll_NonEmptyCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.iterator()", "Iterator.hasNext()", "Iterator.next()", "Bag.contains(Object)", "Iterator.remove()"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Iterator", "Arrays", "Mockito"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a non-empty collection, ensuring that elements not in the collection are removed."}, {"name": "testRetainAll_NullCollection", "primary_tested": ["CollectionBag.retainAll(Collection)"], "associated_methods": ["Bag.retainAll(Collection)"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Mockito"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection, ensuring that the method handles null gracefully."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_findTest.java", "testclass_name": "IteratorUtils_findTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_findTest", "description": "Unit tests for the find method in IteratorUtils class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFind_ElementFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the find method when the element is found in the iterator."}, {"name": "testFind_ElementNotFound", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the find method when the element is not found in the iterator."}, {"name": "testFind_NullIterator", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the find method when the iterator is null."}, {"name": "testFind_NullPredicate", "primary_tested": ["IteratorUtils.find(Iterator<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["IteratorUtils", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the find method when the predicate is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionBag_removeAllTest.java", "testclass_name": "CollectionBag_removeAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.mockito.Mockito;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.mockito.Mockito.*;"], "name": "CollectionBag_removeAllTest", "description": "Unit tests for the removeAll method in the CollectionBag class.", "class_members": {"variables": [{"name": "bag", "type": "CollectionBag<String>"}, {"name": "decoratedBag", "type": "Bag<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAll_WithNonNullCollection", "primary_tested": ["CollectionBag.removeAll(Collection<String>)"], "associated_methods": ["Bag.remove(String,int)", "Bag.getCount(String)"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Mockito", "Arrays"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a non-null collection, verifying the removal of elements from the bag."}, {"name": "testRemoveAll_WithNullCollection", "primary_tested": ["CollectionBag.removeAll(Collection<String>)"], "associated_methods": ["Bag.removeAll(Collection<String>)"], "external_dependencies": {"modules": ["CollectionBag", "Bag", "Mockito"], "class_members": [{"name": "bag", "type": "variable"}, {"name": "decoratedBag", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll method with a null collection, verifying the behavior when the collection is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_forEachTest.java", "testclass_name": "IteratorUtils_forEachTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.NOPClosure;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.mockito.Mockito.*;"], "name": "IteratorUtils_forEachTest", "description": "Unit tests for the forEach method in IteratorUtils, focusing on various edge cases and behaviors.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEach_NullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<Object>,Closure<Object>)"], "external_dependencies": {"modules": ["IteratorUtils", "NOPClosure"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a null iterator. No exception should be thrown."}, {"name": "testForEach_NonNullIterator", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "Closure.accept(String)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Closure", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a non-null iterator and verifies the closure is called correctly."}, {"name": "testForEach_NullClosure", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "NullPointerException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method with a null closure, expecting a NullPointerException."}, {"name": "testForEach_IteratorThrowsException", "primary_tested": ["IteratorUtils.forEach(Iterator<String>,Closure<String>)"], "associated_methods": ["Iterator.hasNext()", "Iterator.next()", "NoSuchElementException"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Closure", "NoSuchElementException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method when the iterator throws a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/CollectionSortedBag_addAllTest.java", "testclass_name": "CollectionSortedBag_addAllTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.SortedBag;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollectionSortedBag_addAllTest", "description": "Unit tests for the addAll method of CollectionSortedBag.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAddAll_WithNonEmptyCollection", "primary_tested": ["CollectionSortedBag.addAll(Collection)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Arrays", "Collections", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method with a non-empty collection."}, {"name": "testAddAll_WithEmptyCollection", "primary_tested": ["CollectionSortedBag.addAll(Collection)"], "associated_methods": ["SortedBag.add(String,int)"], "external_dependencies": {"modules": ["SortedBag", "CollectionSortedBag", "Collections", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method with an empty collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TreeBag_addTest.java", "testclass_name": "TreeBag_addTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TreeBag_addTest", "description": "Unit tests for the add method of the TreeBag class, including scenarios with Comparable and non-Comparable objects.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testAddWithComparableObject", "primary_tested": ["TreeBag.add(String)"], "external_dependencies": {"modules": ["TreeBag"]}, "category": "unit", "description": "Tests the add method of TreeBag with a Comparable object (String)."}, {"name": "testAddWithNonComparableObjectAndNoComparator", "primary_tested": ["TreeBag.add(Object)"], "external_dependencies": {"modules": ["TreeBag"]}, "category": "unit", "description": "Tests the add method of TreeBag with a non-Comparable object and no custom comparator, expecting an IllegalArgumentException."}, {"name": "testAddWithNonComparableObjectAndCustomComparator", "primary_tested": ["TreeBag.add(Object)"], "associated_methods": ["Comparator.compare(Object,Object)"], "external_dependencies": {"modules": ["TreeBag", "Comparator"]}, "category": "unit", "description": "Tests the add method of TreeBag with a non-Comparable object and a custom comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_hashCodeForSetTest.java", "testclass_name": "SetUtils_hashCodeForSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SetUtils_hashCodeForSetTest", "description": "Unit tests for the SetUtils.hashCodeForSet method, which calculates the hash code for a given set.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHashCodeForSet_NullSet", "primary_tested": ["SetUtils.hashCodeForSet(Collection<Object>)"], "external_dependencies": {"modules": ["SetUtils", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hash code calculation for a null set, expecting a result of 0."}, {"name": "testHashCodeForSet_EmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Collection<Object>)"], "external_dependencies": {"modules": ["SetUtils", "Collection", "Collections"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hash code calculation for an empty set, expecting a result of 0."}, {"name": "testHashCodeForSet_NonEmptySet", "primary_tested": ["SetUtils.hashCodeForSet(Collection<Object>)"], "external_dependencies": {"modules": ["SetUtils", "Collection", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hash code calculation for a non-empty set, expecting the sum of the hash codes of its elements."}, {"name": "testHashCodeForSet_SetWithNullElements", "primary_tested": ["SetUtils.hashCodeForSet(Collection<Object>)"], "external_dependencies": {"modules": ["SetUtils", "Collection", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hash code calculation for a set containing null elements, expecting the sum of the hash codes of the non-null elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/MultiMapUtils_getValuesAsSetTest.java", "testclass_name": "MultiMapUtils_getValuesAsSetTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Set;", "import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;", "import org.apache.commons.collections4.multimap.HashSetValuedHashMap;", "import org.junit.jupiter.api.Test;"], "name": "MultiMapUtils_getValuesAsSetTest", "description": "Unit tests for the MultiMapUtils.getValuesAsSet method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetValuesAsSet_WithNullMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils"]}, "category": "unit", "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map is null."}, {"name": "testGetValuesAsSet_WithEmptyMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils"]}, "category": "unit", "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the map is empty."}, {"name": "testGetValuesAsSet_WithArrayListValuedHashMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the behavior of MultiMapUtils.getValuesAsSet with an ArrayListValuedHashMap."}, {"name": "testGetValuesAsSet_WithHashSetValuedHashMap", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "HashSetValuedHashMap"]}, "category": "unit", "description": "Tests the behavior of MultiMapUtils.getValuesAsSet with a HashSetValuedHashMap."}, {"name": "testGetValuesAsSet_WithNonExistentKey", "primary_tested": ["MultiMapUtils.getValuesAsSet(MultiValuedMap<String,String>,String)"], "external_dependencies": {"modules": ["MultiValuedMap", "MultiMapUtils", "ArrayListValuedHashMap"]}, "category": "unit", "description": "Tests the behavior of MultiMapUtils.getValuesAsSet when the key does not exist in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_minTest.java", "testclass_name": "ComparatorUtils_minTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ComparatorUtils_minTest", "description": "Unit tests for the min method in ComparatorUtils.", "class_members": {"variables": [{"name": "o1", "type": "Integer"}, {"name": "o2", "type": "Integer"}, {"name": "customComparator", "type": "Comparator<Integer>"}]}, "test_cases": [{"name": "testMinWithDefaultComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}]}, "category": "unit", "description": "Tests the min method with the default comparator."}, {"name": "testMinWithCustomComparator", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}, {"name": "customComparator", "type": "variable"}]}, "category": "unit", "description": "Tests the min method with a custom comparator."}, {"name": "testMinWithEqualObjects", "primary_tested": ["ComparatorUtils.min(Integer,Integer,Comparator)"], "external_dependencies": {"modules": ["ComparatorUtils", "Integer", "Comparator"], "class_members": [{"name": "o1", "type": "variable"}, {"name": "o2", "type": "variable"}]}, "category": "unit", "description": "Tests the min method with equal objects."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ComparatorUtils_chainedComparatorTest.java", "testclass_name": "ComparatorUtils_chainedComparatorTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Comparator;", "import org.apache.commons.collections4.comparators.ComparatorChain;", "import org.junit.jupiter.api.Test;"], "name": "ComparatorUtils_chainedComparatorTest", "description": "Unit tests for the chainedComparator functionality in ComparatorUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testChainedComparatorWithValidComparators", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "associated_methods": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils", "ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedComparator functionality with valid comparators."}, {"name": "testChainedComparatorWithNullComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator,Comparator)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedComparator functionality with a null comparator, expecting a NullPointerException."}, {"name": "testChainedComparatorWithEmptyComparators", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator[])"], "associated_methods": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils", "ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedComparator functionality with an empty array of comparators."}, {"name": "testChainedComparatorWithSingleComparator", "primary_tested": ["ComparatorUtils.chainedComparator(Comparator)"], "associated_methods": ["ComparatorChain.compare(Integer,Integer)"], "external_dependencies": {"modules": ["Comparator", "ComparatorUtils", "ComparatorChain"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the chainedComparator functionality with a single comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_indexOfTest.java", "testclass_name": "IteratorUtils_indexOfTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "IteratorUtils_indexOfTest", "description": "Unit tests for the indexOf method in IteratorUtils, which finds the index of an element in an iterator based on a predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIndexOf_ElementFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the element is found in the iterator."}, {"name": "testIndexOf_ElementNotFound", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the element is not found in the iterator."}, {"name": "testIndexOf_NullIterator", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Predicate", "IteratorUtils", "org.apache.commons.collections4.Predicate", "CollectionUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the iterator is null."}, {"name": "testIndexOf_NullPredicate", "primary_tested": ["IteratorUtils.indexOf(Iterator<Integer>,org.apache.commons.collections4.Predicate<Integer>)"], "external_dependencies": {"modules": ["Arrays", "Iterator", "IteratorUtils"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the indexOf method when the predicate is null, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchMapTransformerTest.java", "testclass_name": "TransformerUtils_switchMapTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TransformerUtils_switchMapTransformerTest", "description": "Unit tests for the switchMapTransformer method in TransformerUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSwitchMapTransformer_WithDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer, Transformer<Integer, String>>)"], "external_dependencies": {"modules": ["ConstantTransformer", "TransformerUtils", "HashMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the switchMapTransformer method with a default transformer."}, {"name": "testSwitchMapTransformer_WithoutDefaultTransformer", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer, Transformer<Integer, String>>)"], "external_dependencies": {"modules": ["ConstantTransformer", "TransformerUtils", "HashMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the switchMapTransformer method without a default transformer."}, {"name": "testSwitchMapTransformer_WithNullInput", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer, Transformer<Integer, String>>)"], "external_dependencies": {"modules": ["ConstantTransformer", "TransformerUtils", "HashMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the switchMapTransformer method with a null input."}, {"name": "testSwitchMapTransformer_WithEmptyMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer, Transformer<Integer, String>>)"], "external_dependencies": {"modules": ["TransformerUtils", "HashMap", "Map"], "class_members": []}, "category": "unit", "description": "Tests the switchMapTransformer method with an empty map."}, {"name": "testSwitchMapTransformer_WithNullMap", "primary_tested": ["TransformerUtils.switchMapTransformer(Map<Integer, Transformer<Integer, String>>)"], "external_dependencies": {"modules": ["TransformerUtils"], "class_members": []}, "category": "unit", "description": "Tests the switchMapTransformer method with a null map, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/bag/TransformedBag_transformedBagTest.java", "testclass_name": "TransformedBag_transformedBagTest", "dependencies": ["package org.apache.commons.collections4.bag;", "import org.apache.commons.collections4.Bag;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "TransformedBag_transformedBagTest", "description": "Unit tests for the TransformedBag class, specifically focusing on the transformedBag method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTransformedBagWithNonEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()", "Bag.toArray()", "Transformer.apply(String)", "Bag.clear()", "Bag.add(String)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Bag", "org.apache.commons.collections4.Transformer", "org.mockito.Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedBag method with a non-empty Bag, verifying that the transformer is applied to each element and added to the result Bag."}, {"name": "testTransformedBagWithEmptyBag", "primary_tested": ["TransformedBag.transformedBag(Bag<String>,Transformer<String,String>)"], "associated_methods": ["Bag.isEmpty()", "Bag.clear()", "Bag.add(String)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Bag", "org.apache.commons.collections4.Transformer", "org.mockito.Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedBag method with an empty Bag, verifying that no elements are added to the result Bag."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/TransformedQueue_transformedQueueTest.java", "testclass_name": "TransformedQueue_transformedQueueTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.LinkedList;", "import java.util.Queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "TransformedQueue_transformedQueueTest", "description": "Unit tests for the TransformedQueue class, focusing on the transformedQueue method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedQueueWithNonEmptyQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "associated_methods": ["TransformedQueue.size()", "TransformedQueue.poll()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedQueue method with a non-empty queue, ensuring the queue is transformed correctly."}, {"name": "testTransformedQueueWithEmptyQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "associated_methods": ["TransformedQueue.size()"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedQueue method with an empty queue, ensuring the queue remains empty."}, {"name": "testTransformedQueueWithNullQueue", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["Queue", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedQueue method with a null queue, expecting a NullPointerException."}, {"name": "testTransformedQueueWithNullTransformer", "primary_tested": ["TransformedQueue.transformedQueue(Queue<String>,Transformer<String,String>)"], "external_dependencies": {"modules": ["Queue", "LinkedList", "Transformer", "TransformedQueue"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedQueue method with a null transformer, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_clearTest.java", "testclass_name": "CircularFifoQueue_clearTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_clearTest", "description": "Unit tests for the clear functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClearWithElements", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when it contains elements."}, {"name": "testClearEmptyQueue", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.isEmpty()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when it is empty."}, {"name": "testClearFullQueue", "primary_tested": ["CircularFifoQueue.clear()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isAtFullCapacity()", "CircularFifoQueue.isEmpty()", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CircularFifoQueue when it is full."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_getTest.java", "testclass_name": "IteratorUtils_getTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "IteratorUtils_getTest", "description": "Unit tests for the IteratorUtils.get method.", "class_members": {"variables": [{"name": "list", "type": "List<String>"}, {"name": "iterator", "type": "Iterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "List"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the IteratorUtils.get method with a valid index."}, {"name": "testGetInvalidIndex", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "List"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the IteratorUtils.get method with an invalid index, expecting an IndexOutOfBoundsException."}, {"name": "testGetFromEmptyIterator", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "List"]}, "category": "unit", "description": "Tests the IteratorUtils.get method with an empty iterator, expecting an IndexOutOfBoundsException."}, {"name": "testGetNegativeIndex", "primary_tested": ["IteratorUtils.get(Iterator<String>,int)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "List"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the IteratorUtils.get method with a negative index, expecting an IndexOutOfBoundsException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollection_unmodifiableCollectionTest.java", "testclass_name": "UnmodifiableCollection_unmodifiableCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableCollection_unmodifiableCollectionTest", "description": "Tests for the UnmodifiableCollection class, specifically focusing on the unmodifiableCollection method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableCollectionWithUnmodifiableCollection", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection)"], "associated_methods": ["UnmodifiableCollection.decorated()"], "external_dependencies": {"modules": ["UnmodifiableCollection", "Collection", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableCollection method returns an instance of UnmodifiableCollection and that the original collection is not modified."}, {"name": "testUnmodifiableCollectionWithAlreadyUnmodifiableCollection", "primary_tested": ["UnmodifiableCollection.unmodifiableCollection(Collection)"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableCollection", "Collection", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the unmodifiableCollection method returns the same instance when called with an already unmodifiable collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/SetUtils_isEqualSetTest.java", "testclass_name": "SetUtils_isEqualSetTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SetUtils_isEqualSetTest", "description": "Unit tests for the SetUtils.isEqualSet method, which checks if two sets are equal.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIsEqualSet_SameReference", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the isEqualSet method returns true when comparing a set to itself."}, {"name": "testIsEqualSet_NullAndNonNull", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the isEqualSet method returns false when comparing a null set to a non-null set and vice versa."}, {"name": "testIsEqualSet_DifferentSizes", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the isEqualSet method returns false when comparing sets of different sizes."}, {"name": "testIsEqualSet_EqualSets", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the isEqualSet method returns true when comparing sets with the same elements but in different orders."}, {"name": "testIsEqualSet_DifferentSets", "primary_tested": ["SetUtils.isEqualSet(Collection,Collection)"], "external_dependencies": {"modules": ["SetUtils", "HashSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests if the isEqualSet method returns false when comparing sets with different elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addAllTest.java", "testclass_name": "PredicatedCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PredicatedCollection_addAllTest", "description": "Unit tests for the addAll method of PredicatedCollection, ensuring it handles both valid and invalid elements correctly.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddAll_ValidElements", "primary_tested": ["PredicatedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "Collection", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method with valid elements, ensuring they are added successfully."}, {"name": "testAddAll_InvalidElement", "primary_tested": ["PredicatedCollection.addAll(Collection)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "Collection", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addAll method with an invalid element (null), ensuring it throws an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_switchTransformerTest.java", "testclass_name": "TransformerUtils_switchTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.NOPTransformer;", "import org.apache.commons.collections4.functors.StringValueTransformer;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TransformerUtils_switchTransformerTest", "description": "Unit tests for the switchTransformer functionality in TransformerUtils.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSwitchTransformerWithTruePredicate", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "external_dependencies": {"modules": ["TruePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": []}, "category": "unit", "description": "Tests the switchTransformer functionality with TruePredicate, ensuring it returns the trueTransformer result."}, {"name": "testSwitchTransformerWithFalsePredicate", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "external_dependencies": {"modules": ["FalsePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": []}, "category": "unit", "description": "Tests the switchTransformer functionality with FalsePredicate, ensuring it returns the falseTransformer result."}, {"name": "testSwitchTransformerWithEqualPredicate", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "external_dependencies": {"modules": ["EqualPredicate", "ConstantTransformer", "TransformerUtils"], "class_members": []}, "category": "unit", "description": "Tests the switchTransformer functionality with EqualPredicate, ensuring it returns the correct transformer result based on the predicate match."}, {"name": "testSwitchTransformerWithExceptionTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "external_dependencies": {"modules": ["TruePredicate", "ExceptionTransformer", "ConstantTransformer", "TransformerUtils"], "class_members": []}, "category": "unit", "description": "Tests the switchTransformer functionality with ExceptionTransformer, ensuring it throws a FunctorException."}, {"name": "testSwitchTransformerWithNullDefaultTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "external_dependencies": {"modules": ["FalsePredicate", "ConstantTransformer", "TransformerUtils"], "class_members": []}, "category": "unit", "description": "Tests the switchTransformer functionality with a null default transformer, ensuring it returns null."}, {"name": "testSwitchTransformerWithNOPTransformer", "primary_tested": ["TransformerUtils.switchTransformer(Predicate,Transformer,Transformer)"], "external_dependencies": {"modules": ["TruePredicate", "NOPTransformer", "StringValueTransformer", "TransformerUtils"], "class_members": []}, "category": "unit", "description": "Tests the switchTransformer functionality with NOPTransformer, ensuring it returns the input unchanged."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_toStringTest.java", "testclass_name": "IteratorUtils_toStringTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.iterators.ArrayIterator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "IteratorUtils_toStringTest", "description": "Unit tests for the IteratorUtils.toString method.", "class_members": {"variables": [{"name": "iterator", "type": "Iterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithDefaultDelimiter", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "ArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the IteratorUtils.toString method with the default delimiter."}, {"name": "testToStringWithEmptyIterator", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "ArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.toString method with an empty iterator."}, {"name": "testToStringWithSingleElement", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "ArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.toString method with a single element in the iterator."}, {"name": "testToStringWithNullElement", "primary_tested": ["IteratorUtils.toString(Iterator<String>)"], "external_dependencies": {"modules": ["IteratorUtils", "ArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the IteratorUtils.toString method with a null element in the iterator."}, {"name": "testToStringWithCustomDelimiter", "primary_tested": ["IteratorUtils.toString(Iterator<String>, Transformer<Object, String>, String, String, String)"], "external_dependencies": {"modules": ["IteratorUtils", "ArrayIterator", "TransformerUtils"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the IteratorUtils.toString method with a custom delimiter."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_peekTest.java", "testclass_name": "ArrayStack_peekTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_peekTest", "description": "Unit tests for the peek functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWithNonEmptyStack", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality with a non-empty stack."}, {"name": "testPeekWithEmptyStack", "primary_tested": ["ArrayStack.peek()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality with an empty stack, expecting an EmptyStackException."}, {"name": "testPeekAfterPop", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after a pop operation."}, {"name": "testPeekWithSingleItemStack", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality with a stack containing a single item."}, {"name": "testPeekWithMultiplePushesAndPops", "primary_tested": ["ArrayStack.peek()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after multiple push and pop operations."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/TransformerUtils_ifTransformerTest.java", "testclass_name": "TransformerUtils_ifTransformerTest", "dependencies": ["package org.apache.commons.collections4;", "import org.apache.commons.collections4.functors.ConstantTransformer;", "import org.apache.commons.collections4.functors.EqualPredicate;", "import org.apache.commons.collections4.functors.ExceptionTransformer;", "import org.apache.commons.collections4.functors.FalsePredicate;", "import org.apache.commons.collections4.functors.TruePredicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TransformerUtils_ifTransformerTest", "description": "Unit tests for the ifTransformer method in TransformerUtils, which tests different predicates and transformers.", "class_members": {"variables": [{"name": "CONSTANT_VALUE", "type": "static final Object"}]}, "fixtures": [], "test_cases": [{"name": "testIfTransformerWithTruePredicate", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)", "TruePredicate.truePredicate()"], "external_dependencies": {"modules": ["ConstantTransformer", "TruePredicate", "TransformerUtils"], "class_members": [{"name": "CONSTANT_VALUE", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with TruePredicate, ensuring it returns the constant value when the predicate is true."}, {"name": "testIfTransformerWithFalsePredicate", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)", "FalsePredicate.falsePredicate()"], "external_dependencies": {"modules": ["ConstantTransformer", "FalsePredicate", "TransformerUtils"], "class_members": [{"name": "CONSTANT_VALUE", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with FalsePredicate, ensuring it returns null when the predicate is false."}, {"name": "testIfTransformerWithEqualPredicate", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)", "EqualPredicate.equalPredicate(Object)"], "external_dependencies": {"modules": ["ConstantTransformer", "EqualPredicate", "TransformerUtils"], "class_members": [{"name": "CONSTANT_VALUE", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with EqualPredicate, ensuring it returns the constant value when the input matches the predicate's value."}, {"name": "testIfTransformerWithExceptionTransformer", "primary_tested": ["TransformerUtils.ifTransformer(Predicate,Transformer,Transformer)"], "associated_methods": ["ConstantTransformer.constantTransformer(Object)", "ExceptionTransformer.exceptionTransformer()", "TruePredicate.truePredicate()"], "external_dependencies": {"modules": ["ConstantTransformer", "ExceptionTransformer", "TruePredicate", "TransformerUtils"], "class_members": [{"name": "CONSTANT_VALUE", "type": "variable"}]}, "category": "unit", "description": "Tests the ifTransformer method with ExceptionTransformer, ensuring it throws a FunctorException when the predicate is true."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_entrySetTest.java", "testclass_name": "UnmodifiableMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableMap_entrySetTest", "description": "Unit tests for the entrySet method of the UnmodifiableMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableMap.entrySet()"], "external_dependencies": {"modules": ["UnmodifiableMap", "HashMap", "Map", "Set", "Map.Entry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of the UnmodifiableMap to ensure it returns an unmodifiable set of entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_getTest.java", "testclass_name": "CircularFifoQueue_getTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_getTest", "description": "Unit tests for the get method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetValidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with valid indices."}, {"name": "testGetInvalidIndex", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with invalid indices, expecting NoSuchElementException."}, {"name": "testGetAfterWrapAround", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after the queue has wrapped around."}, {"name": "testGetEmptyQueue", "primary_tested": ["CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method on an empty queue, expecting NoSuchElementException."}, {"name": "testGetAfterClear", "primary_tested": ["CircularFifoQueue.get(int)"], "associated_methods": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after clearing the queue, expecting NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_removeTest.java", "testclass_name": "CircularFifoQueue_removeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;"], "name": "CircularFifoQueue_removeTest", "description": "Unit tests for the remove functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element from the queue."}, {"name": "testRemoveFromEmptyQueue", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element from an empty queue, expecting a NoSuchElementException."}, {"name": "testRemoveWithWrapAround", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element from the queue after it has wrapped around."}, {"name": "testRemoveAllElements", "primary_tested": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of all elements from the queue."}, {"name": "testRemoveAfterClear", "primary_tested": ["CircularFifoQueue.remove()"], "associated_methods": ["CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element from the queue after it has been cleared, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_headMapTest.java", "testclass_name": "LazySortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "LazySortedMap_headMapTest", "description": "Unit tests for the headMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHeadMap", "primary_tested": ["LazySortedMap.headMap(Integer)"], "associated_methods": ["SortedMap.size()", "SortedMap.containsKey(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Factory", "LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the headMap functionality of the LazySortedMap, ensuring it returns the correct sub-map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_elementTest.java", "testclass_name": "CircularFifoQueue_elementTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_elementTest", "description": "Unit tests for the element method of CircularFifoQueue.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue", "NoSuchElementException"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of the element method when the queue is empty, expecting a NoSuchElementException."}, {"name": "testElementWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue has one element, expecting the element to be returned."}, {"name": "testElementWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.element()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method when the queue is full, expecting the first element to be returned."}, {"name": "testElementAfterRemovingElement", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after removing an element from the queue, expecting the next element to be returned."}, {"name": "testElementAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.element()"], "associated_methods": ["CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element method after adding and removing elements from the queue, expecting the correct element to be returned."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_sizeTest.java", "testclass_name": "StaticBucketMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StaticBucketMap_sizeTest", "description": "Unit tests for the size method of the StaticBucketMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSize", "primary_tested": ["StaticBucketMap.size()"], "associated_methods": ["StaticBucketMap.put(Integer,String)", "StaticBucketMap.remove(Integer)", "StaticBucketMap.clear()"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the size method of the StaticBucketMap class under various conditions: with one entry, after removing an entry, and after clearing all entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_popTest.java", "testclass_name": "ArrayStack_popTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_popTest", "description": "Unit tests for the pop functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPopWithItems", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack when there are items in the stack."}, {"name": "testPopOnEmptyStack", "primary_tested": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack", "EmptyStackException"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack when the stack is empty, expecting an EmptyStackException."}, {"name": "testPopAfterPeek", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.peek()", "ArrayStack.empty()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack after a peek operation."}, {"name": "testPopAndSearch", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack in conjunction with the search method."}, {"name": "testPopAndEmpty", "primary_tested": ["ArrayStack.pop()"], "associated_methods": ["ArrayStack.push(String)", "ArrayStack.empty()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the pop functionality of the ArrayStack and checks if the stack becomes empty after the pop operation."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/PredicatedCollection_addTest.java", "testclass_name": "PredicatedCollection_addTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PredicatedCollection_addTest", "description": "Unit tests for the add method of PredicatedCollection, focusing on valid and invalid element additions.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddValidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of a valid element to the PredicatedCollection."}, {"name": "testAddInvalidElement", "primary_tested": ["PredicatedCollection.add(String)"], "external_dependencies": {"modules": ["Predicate", "NotNullPredicate", "PredicatedCollection", "ArrayList"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addition of an invalid (null) element to the PredicatedCollection, expecting an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_valuesTest.java", "testclass_name": "UnmodifiableOrderedMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_valuesTest", "description": "Tests the values method of the UnmodifiableOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testValues", "primary_tested": ["OrderedMap.values()"], "associated_methods": [], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "LinkedMap", "UnmodifiableCollection", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the values method of UnmodifiableOrderedMap returns an unmodifiable collection and contains the expected values."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_peekTest.java", "testclass_name": "CircularFifoQueue_peekTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_peekTest", "description": "Unit tests for the peek functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPeekWithEmptyQueue", "primary_tested": ["CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality when the queue is empty."}, {"name": "testPeekWithNonEmptyQueue", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality when the queue is non-empty."}, {"name": "testPeekAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after adding and removing elements from the queue."}, {"name": "testPeekAfterFullQueue", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after the queue is full and new elements are added."}, {"name": "testPeekAfterClear", "primary_tested": ["CircularFifoQueue.peek()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the peek functionality after clearing the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_keySetTest.java", "testclass_name": "UnmodifiableMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.set.UnmodifiableSet;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableMap_keySetTest", "description": "Unit tests for the keySet method of the UnmodifiableMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testKeySet", "primary_tested": ["UnmodifiableMap.keySet()"], "associated_methods": ["UnmodifiableSet.contains(String)"], "external_dependencies": {"modules": ["UnmodifiableMap", "UnmodifiableSet", "HashMap", "Map", "Set"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the keySet method of the UnmodifiableMap to ensure it returns an instance of UnmodifiableSet and contains the expected keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_subMapTest.java", "testclass_name": "LazySortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_subMapTest", "description": "Unit tests for the subMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSubMap", "primary_tested": ["LazySortedMap.subMap(int,int)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Factory", "java.util.SortedMap", "java.util.TreeMap", "org.apache.commons.collections4.map.LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the subMap functionality of the LazySortedMap, ensuring that the subMap is correctly created and contains the expected entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_pollTest.java", "testclass_name": "CircularFifoQueue_pollTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_pollTest", "description": "Unit tests for the poll method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPollWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.poll()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is empty."}, {"name": "testPollWhenQueueHasOneElement", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue has one element."}, {"name": "testPollWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method when the queue is full."}, {"name": "testPollAfterAddingAndRemovingMultipleElements", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.isEmpty()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after adding and removing multiple elements."}, {"name": "testPollAfterClear", "primary_tested": ["CircularFifoQueue.poll()"], "associated_methods": ["CircularFifoQueue.add(String)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the poll method after clearing the queue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeIfTest.java", "testclass_name": "CompositeCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIf_AllElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when all elements are removed."}, {"name": "testRemoveIf_NoElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when no elements are removed."}, {"name": "testRemoveIf_SomeElementsRemoved", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Predicate"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when some elements are removed."}, {"name": "testRemoveIf_NullFilter", "primary_tested": ["CompositeCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf functionality when the filter is null."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_retainAllTest.java", "testclass_name": "IndexedCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with matching elements, ensuring the collection is updated correctly."}, {"name": "testRetainAllWithNoMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with no matching elements, ensuring the collection is emptied."}, {"name": "testRetainAllWithAllMatchingElements", "primary_tested": ["IndexedCollection.retainAll(Collection<String>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll functionality with all elements matching, ensuring the collection remains unchanged."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_lastKeyTest.java", "testclass_name": "ListOrderedMap_lastKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_lastKeyTest", "description": "Unit tests for the lastKey method of the ListOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testLastKey_EmptyMap", "primary_tested": ["ListOrderedMap.lastKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"]}, "category": "unit", "description": "Tests the lastKey method when the map is empty, expecting a NoSuchElementException."}, {"name": "testLastKey_NonEmptyMap", "primary_tested": ["ListOrderedMap.lastKey()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap"]}, "category": "unit", "description": "Tests the lastKey method when the map is non-empty, expecting the last key added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_uniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_uniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_uniqueIndexedCollectionTest", "description": "Unit tests for the uniqueIndexedCollection method of the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testUniqueIndexedCollectionWithUniqueKeys", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a collection of unique keys."}, {"name": "testUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a collection containing duplicate keys, expecting an IllegalArgumentException."}, {"name": "testUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with an empty collection."}, {"name": "testUniqueIndexedCollectionWithNullKeyTransformer", "primary_tested": ["IndexedCollection.uniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueIndexedCollection method with a null key transformer, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/TransformedCollection_transformedCollectionTest.java", "testclass_name": "TransformedCollection_transformedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedCollection_transformedCollectionTest", "description": "Unit tests for the TransformedCollection class, specifically testing the transformedCollection method with different types of collections.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedCollectionWithNonEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.size()", "TransformedCollection.contains(String)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.ArrayList", "java.util.Arrays", "java.util.Collection", "java.util.Collections", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with a non-empty collection, ensuring the transformation is applied correctly and the transformed collection contains the expected elements."}, {"name": "testTransformedCollectionWithEmptyCollection", "primary_tested": ["TransformedCollection.transformedCollection(Collection<String>,Transformer<String,String>)"], "associated_methods": ["TransformedCollection.isEmpty()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.Collections", "org.apache.commons.collections4.collection.TransformedCollection"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedCollection method with an empty collection, ensuring the transformed collection is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeTest.java", "testclass_name": "CompositeCollection_removeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeTest", "description": "Tests for the remove functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testRemoveMutator", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.setMutator(CompositeCollection.CollectionMutator<String>)", "CompositeCollection.addComposited(Collection<String>)", "Collection.add(String)", "Collection.contains(Object)", "Collection.remove(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet", "List"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the remove functionality of the CompositeCollection when a mutator is set."}, {"name": "testRemoveWithoutMutator", "primary_tested": ["CompositeCollection.remove(Object)"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "Collection.add(String)", "Collection.contains(Object)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the remove functionality of the CompositeCollection when no mutator is set, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putAllTest.java", "testclass_name": "MultiKeyMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "MultiKeyMap_putAllTest", "description": "Unit tests for the putAll method of MultiKeyMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAll_WithValidKeys", "primary_tested": ["MultiKeyMap.putAll(Map<MultiKey<? extends String>, String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method of MultiKeyMap with valid keys."}, {"name": "testPutAll_WithNullKey", "primary_tested": ["MultiKeyMap.putAll(Map<MultiKey<? extends String>, String>)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method of MultiKeyMap with a null key, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_setValueTest.java", "testclass_name": "SingletonMap_setValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_setValueTest", "description": "Unit test for the setValue method of SingletonMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSetValue", "primary_tested": ["SingletonMap.setValue(String)"], "associated_methods": ["SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the setValue method of SingletonMap, ensuring it correctly updates the value and returns the old value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_cloneTest.java", "testclass_name": "MultiKeyMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_cloneTest", "description": "Unit test for the clone functionality of the MultiKeyMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["MultiKeyMap.clone()"], "associated_methods": ["MultiKeyMap.put(String,String,String)", "MultiKeyMap.get(String,String)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the cloning functionality of the MultiKeyMap, ensuring that the cloned map contains the same values as the original map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_nonUniqueIndexedCollectionTest.java", "testclass_name": "IndexedCollection_nonUniqueIndexedCollectionTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_nonUniqueIndexedCollectionTest", "description": "Tests for the non-unique indexed collection functionality in the IndexedCollection class.", "class_members": {"variables": [{"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNonUniqueIndexedCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with a non-empty collection."}, {"name": "testNonUniqueIndexedCollectionWithEmptyCollection", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with an empty collection."}, {"name": "testNonUniqueIndexedCollectionWithDuplicateKeys", "primary_tested": ["IndexedCollection.nonUniqueIndexedCollection(Collection<String>,Transformer<String,Integer>)"], "associated_methods": ["IndexedCollection.size()", "IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer", "Arrays"], "class_members": [{"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation and basic operations of a non-unique indexed collection with a collection containing duplicate keys."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_previousKeyTest.java", "testclass_name": "ListOrderedMap_previousKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "ListOrderedMap_previousKeyTest", "description": "Unit tests for the previousKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "map", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousKey_existingKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method for an existing key in the ListOrderedMap."}, {"name": "testPreviousKey_firstKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method for the first key in the ListOrderedMap."}, {"name": "testPreviousKey_nonExistingKey", "primary_tested": ["ListOrderedMap.previousKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previousKey method for a non-existing key in the ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_removeAllTest.java", "testclass_name": "CompositeCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty collection."}, {"name": "testRemoveAllWithNonEmptyCollection", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-empty collection."}, {"name": "testRemoveAllWithPartialMatch", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a partial match."}, {"name": "testRemoveAllWithNoMatch", "primary_tested": ["CompositeCollection.removeAll(Collection<? extends E>)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with no match."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_containsTest.java", "testclass_name": "IndexedCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_containsTest", "description": "Unit tests for the contains functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}, {"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsReturnsTrueForExistingObject", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that contains returns true for an existing object in the IndexedCollection."}, {"name": "testContainsReturnsFalseForNonExistingObject", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that contains returns false for a non-existing object in the IndexedCollection."}, {"name": "testContainsReturnsTrueAfterAddingObject", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that contains returns true after adding a new object to the IndexedCollection."}, {"name": "testContainsReturnsFalseAfterRemovingObject", "primary_tested": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that contains returns false after removing an object from the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsKeyTest.java", "testclass_name": "StaticBucketMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StaticBucketMap_containsKeyTest", "description": "Unit tests for the containsKey method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyExists", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key exists in the map."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method when the key does not exist in the map."}, {"name": "testContainsKey_KeyRemoved", "primary_tested": ["StaticBucketMap.containsKey(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsKey method after the key has been removed from the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_addTest.java", "testclass_name": "CircularFifoQueue_addTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;"], "name": "CircularFifoQueue_addTest", "description": "Unit tests for the add functionality of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddElementSuccess", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an element to the CircularFifoQueue."}, {"name": "testAddElementNull", "primary_tested": ["CircularFifoQueue.add(String)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when attempting to add a null element to the CircularFifoQueue."}, {"name": "testAddElementAtFullCapacity", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.isAtFullCapacity()", "CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding an element when the CircularFifoQueue is at full capacity."}, {"name": "testAddElementWrapAround", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.size()", "CircularFifoQueue.peek()", "CircularFifoQueue.get(int)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding an element when the CircularFifoQueue wraps around."}, {"name": "testAddElementAfterClear", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.clear()", "CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding an element after clearing the CircularFifoQueue."}, {"name": "testAddElementAfterRemove", "primary_tested": ["CircularFifoQueue.add(String)"], "associated_methods": ["CircularFifoQueue.remove()", "CircularFifoQueue.size()", "CircularFifoQueue.peek()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding an element after removing an element from the CircularFifoQueue."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_isEmptyTest.java", "testclass_name": "CompositeCollection_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_isEmptyTest", "description": "Unit tests for the isEmpty functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmptyWhenEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the CompositeCollection is empty."}, {"name": "testIsEmptyWhenNotEmpty", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when the CompositeCollection is not empty."}, {"name": "testIsEmptyAfterClear", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeCollection."}, {"name": "testIsEmptyAfterAddAndRemove", "primary_tested": ["CompositeCollection.isEmpty()"], "associated_methods": ["CompositeCollection.addComposited(Collection<String>)", "Collection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after adding and then removing elements from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeAllTest.java", "testclass_name": "IndexedCollection_removeAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeAllTest", "description": "Unit tests for the removeAll functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllRemovesAllElements", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll removes all specified elements from the IndexedCollection."}, {"name": "testRemoveAllReturnsFalseIfNoElementsRemoved", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.contains(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that removeAll returns false if no elements are removed from the IndexedCollection."}, {"name": "testRemoveAllReindexesAfterRemoval", "primary_tested": ["IndexedCollection.removeAll(Collection<String>)"], "associated_methods": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the IndexedCollection reindexes correctly after elements are removed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addAllTest.java", "testclass_name": "CompositeCollection_addAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addAllTest", "description": "Tests for the addAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAllWithMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.CollectionMutator.addAll(CompositeCollection<String>, List<Collection<String>>, Collection<? extends String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeCollection with a custom mutator."}, {"name": "testAddAllWithoutMutator", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeCollection without a mutator, expecting an UnsupportedOperationException."}, {"name": "testAddAllWithEmptyCollection", "primary_tested": ["CompositeCollection.addAll(Collection<? extends String>)"], "associated_methods": ["CompositeCollection.CollectionMutator.addAll(CompositeCollection<String>, List<Collection<String>>, Collection<? extends String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection", "List", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAll functionality of the CompositeCollection with an empty collection and a custom mutator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazySortedMap_tailMapTest.java", "testclass_name": "LazySortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "LazySortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of LazySortedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testTailMap", "primary_tested": ["LazySortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.get(Integer)"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Factory", "java.util.SortedMap", "java.util.TreeMap", "org.apache.commons.collections4.map.LazySortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the tailMap functionality of the LazySortedMap, ensuring it returns the correct subset of the map starting from the specified key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putTest.java", "testclass_name": "TransformedMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedMap_putTest", "description": "Unit tests for the put method of TransformedMap, testing both with and without transformers.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutWithTransformers", "primary_tested": ["TransformedMap.put(String,String)"], "associated_methods": ["Transformer.apply(String)"], "external_dependencies": {"modules": ["Transformer", "TransformedMap", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of TransformedMap when transformers are applied to both key and value."}, {"name": "testPutWithoutTransformers", "primary_tested": ["TransformedMap.put(String,String)"], "external_dependencies": {"modules": ["TransformedMap", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method of TransformedMap when no transformers are applied."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsValueTest.java", "testclass_name": "PassiveExpiringMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.map.PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PassiveExpiringMap_containsValueTest", "description": "Unit tests for the containsValue method in PassiveExpiringMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["PassiveExpiringMap.containsValue(Object)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ConstantTimeToLiveExpirationPolicy", "HashMap"]}, "category": "unit", "description": "Tests that the containsValue method returns true when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["PassiveExpiringMap.containsValue(Object)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ConstantTimeToLiveExpirationPolicy", "HashMap"]}, "category": "unit", "description": "Tests that the containsValue method returns false when the value is not present in the map."}, {"name": "testContainsValue_ExpiredValue", "primary_tested": ["PassiveExpiringMap.containsValue(Object)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ConstantTimeToLiveExpirationPolicy", "HashMap"]}, "category": "unit", "description": "Tests that the containsValue method returns false when the value is expired in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_clearTest.java", "testclass_name": "CompositeCollection_clearTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_clearTest", "description": "Unit tests for the clear functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection when it contains multiple collections."}, {"name": "testClearWithEmptyComposite", "primary_tested": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection"]}, "category": "unit", "description": "Tests the clear functionality of the CompositeCollection when it is empty."}, {"name": "testClearWithSingleCollection", "primary_tested": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "one", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of the CompositeCollection when it contains a single collection."}, {"name": "testClearWithMultipleCollections", "primary_tested": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeCollection when it contains multiple collections, including an additional one."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_entrySetTest.java", "testclass_name": "PassiveExpiringMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.map.PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "PassiveExpiringMap_entrySetTest", "description": "Unit tests for the entrySet method of PassiveExpiringMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["PassiveExpiringMap.entrySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ConstantTimeToLiveExpirationPolicy", "HashMap", "Map", "Set"]}, "category": "unit", "description": "Tests the entrySet method of PassiveExpiringMap to ensure it returns the correct number of entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_putAllTest.java", "testclass_name": "ListOrderedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_putAllTest", "description": "Unit tests for the putAll method of the ListOrderedMap class.", "class_members": {"variables": [{"name": "map", "type": "ListOrderedMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_IndexOutOfBounds", "primary_tested": ["ListOrderedMap.putAll(int,Map<Integer,String>)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map", "IndexOutOfBoundsException"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the putAll method throws an IndexOutOfBoundsException when given an invalid index."}, {"name": "testPutAll_AddNewEntries", "primary_tested": ["ListOrderedMap.putAll(int,Map<Integer,String>)"], "associated_methods": ["ListOrderedMap.size()", "ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the putAll method correctly adds new entries to the map."}, {"name": "testPutAll_ReplaceExistingEntries", "primary_tested": ["ListOrderedMap.putAll(int,Map<Integer,String>)"], "associated_methods": ["ListOrderedMap.put(Integer,String)", "ListOrderedMap.size()", "ListOrderedMap.getValue(int)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap", "Map"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the putAll method correctly replaces existing entries in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/IteratorUtils_getIteratorTest.java", "testclass_name": "IteratorUtils_getIteratorTest", "dependencies": ["package org.apache.commons.collections4;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.w3c.dom.DOMException;", "import org.w3c.dom.Document;", "import org.w3c.dom.NamedNodeMap;", "import org.w3c.dom.UserDataHandler;", "import java.util.*;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "IteratorUtils_getIteratorTest", "description": "Tests for the IteratorUtils.getIterator method with various input types.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testGetIterator_nullInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is null."}, {"name": "testGetIterator_iteratorInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is an Iterator."}, {"name": "testGetIterator_iterableInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is an Iterable."}, {"name": "testGetIterator_objectArrayInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is an Object array."}, {"name": "testGetIterator_enumerationInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Vector", "Arrays"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is an Enumeration."}, {"name": "testGetIterator_mapInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "HashMap"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is a Map."}, {"name": "testGetIterator_nodeListInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "NodeList", "Node"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is a NodeList."}, {"name": "testGetIterator_nodeInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Node", "NodeList"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is a Node."}, {"name": "testGetIterator_dictionaryInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Hashtable"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is a Dictionary."}, {"name": "testGetIterator_arrayInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is a primitive array."}, {"name": "testGetIterator_objectWithIteratorMethodInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator", "Arrays"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is an object with an iterator method."}, {"name": "testGetIterator_singletonIteratorInput", "primary_tested": ["IteratorUtils.getIterator(Object)"], "external_dependencies": {"modules": ["IteratorUtils", "Iterator"]}, "category": "unit", "description": "Tests the behavior of IteratorUtils.getIterator when the input is a singleton object."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putTest.java", "testclass_name": "SingletonMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_putTest", "description": "Unit tests for the put method of the SingletonMap class.", "class_members": {"variables": [{"name": "map", "type": "SingletonMap<String, String>"}]}, "fixtures": [], "test_cases": [{"name": "testPutWithMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "associated_methods": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of SingletonMap with a matching key, ensuring the old value is returned and the new value is set."}, {"name": "testPutWithNonMatchingKey", "primary_tested": ["SingletonMap.put(String,String)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "description": "Tests the put method of SingletonMap with a non-matching key, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_toStringTest.java", "testclass_name": "ListOrderedMap_toStringTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ListOrderedMap_toStringTest", "description": "Unit tests for the toString method of the ListOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testToStringEmptyMap", "primary_tested": ["ListOrderedMap.toString()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "description": "Tests the toString method of an empty ListOrderedMap."}, {"name": "testToStringNonEmptyMap", "primary_tested": ["ListOrderedMap.toString()"], "associated_methods": ["ListOrderedMap.put(String,String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "description": "Tests the toString method of a non-empty ListOrderedMap."}, {"name": "testToStringWithSelfReference", "primary_tested": ["ListOrderedMap.toString()"], "associated_methods": ["ListOrderedMap.put(String,Object)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "description": "Tests the toString method of a ListOrderedMap with a self-referencing entry."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeTest.java", "testclass_name": "IndexedCollection_removeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeTest", "description": "Unit tests for the remove functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveElementFromCollection", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.contains(String)", "IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing element from the IndexedCollection."}, {"name": "testRemoveNonExistentElementFromCollection", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existent element from the IndexedCollection."}, {"name": "testRemoveElementAndReindex", "primary_tested": ["IndexedCollection.remove(String)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.contains(String)", "IndexedCollection.size()"], "external_dependencies": {"modules": ["IndexedCollection", "Collection"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an element and subsequent reindexing in the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsTest.java", "testclass_name": "CompositeCollection_containsTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.List;", "import org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsTest", "description": "Unit tests for the contains functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsWithSingleCollection", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains functionality with a single collection."}, {"name": "testContainsWithMultipleCollections", "primary_tested": ["CompositeCollection.contains(String)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains functionality with multiple collections."}, {"name": "testContainsAfterAdd", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.setMutator(CollectionMutator<String>)", "CompositeCollection.add(String)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList", "CollectionMutator"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains functionality after adding an element."}, {"name": "testContainsAfterRemove", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.setMutator(CollectionMutator<String>)", "CompositeCollection.remove(String)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList", "CollectionMutator"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains functionality after removing an element."}, {"name": "testContainsAfterClear", "primary_tested": ["CompositeCollection.contains(String)"], "associated_methods": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the contains functionality after clearing the collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_clearTest.java", "testclass_name": "PassiveExpiringMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "PassiveExpiringMap_clearTest", "description": "Unit test for the clear method of PassiveExpiringMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["PassiveExpiringMap.clear()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the PassiveExpiringMap, ensuring that all entries are removed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_removeIfTest.java", "testclass_name": "IndexedCollection_removeIfTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.function.Predicate;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_removeIfTest", "description": "Unit tests for the removeIf functionality of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "originalCollection", "type": "Collection<String>"}], "methods": [{"name": "decorateUniqueCollection", "signature": "IndexedCollection<Integer, String> decorateUniqueCollection(Collection<String> original)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveIfWithNullFilter", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a null filter."}, {"name": "testRemoveIfWithNoMatches", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that does not match any elements."}, {"name": "testRemoveIfWithMatches", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches some elements."}, {"name": "testRemoveIfWithAllMatches", "primary_tested": ["IndexedCollection.removeIf(Predicate<String>)"], "associated_methods": ["IndexedCollection.reindex()", "IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Predicate"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "originalCollection", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeIf method with a filter that matches all elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_containsKeyTest.java", "testclass_name": "PassiveExpiringMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PassiveExpiringMap_containsKeyTest", "description": "Unit tests for the containsKey method of PassiveExpiringMap.", "class_members": {"variables": [{"name": "map", "type": "PassiveExpiringMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyExistsAndNotExpired", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the containsKey method returns true when the key exists and is not expired."}, {"name": "testContainsKey_KeyExistsButExpired", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the containsKey method returns false when the key exists but is expired."}, {"name": "testContainsKey_KeyDoesNotExist", "primary_tested": ["PassiveExpiringMap.containsKey(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the containsKey method returns false when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_hashCodeTest.java", "testclass_name": "SingletonMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_hashCodeTest", "description": "Unit tests for the hashCode method of the SingletonMap class.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of SingletonMap with non-null key and value."}, {"name": "testHashCodeWithNullKey", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "description": "Tests the hashCode method of SingletonMap with a null key."}, {"name": "testHashCodeWithNullValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "description": "Tests the hashCode method of SingletonMap with a null value."}, {"name": "testHashCodeWithNullKeyAndValue", "primary_tested": ["SingletonMap.hashCode()"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "description": "Tests the hashCode method of SingletonMap with both null key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_retainAllTest.java", "testclass_name": "CompositeCollection_retainAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_retainAllTest", "description": "Unit tests for the retainAll functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRetainAllWithNullCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a null collection."}, {"name": "testRetainAllWithEmptyCollection", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with an empty collection."}, {"name": "testRetainAllWithMatchingElements", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing all matching elements."}, {"name": "testRetainAllWithNonMatchingElements", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing no matching elements."}, {"name": "testRetainAllWithPartialMatchingElements", "primary_tested": ["CompositeCollection.retainAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retainAll method with a collection containing some matching elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_clearTest.java", "testclass_name": "ListOrderedMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ListOrderedMap_clearTest", "description": "Unit test for the clear method of ListOrderedMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["ListOrderedMap.clear()"], "associated_methods": ["ListOrderedMap.isEmpty()", "ListOrderedMap.size()"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the ListOrderedMap, ensuring that the map is empty and has a size of 0 after clearing."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_addCompositedTest.java", "testclass_name": "CompositeCollection_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.function.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_addCompositedTest", "description": "Tests for the addComposited method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testAddCompositedSingleCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding a single collection to the CompositeCollection."}, {"name": "testAddCompositedNullCollection", "primary_tested": ["CompositeCollection.addComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding a null collection to the CompositeCollection."}, {"name": "testAddCompositedMultipleCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>[])"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding multiple collections to the CompositeCollection."}, {"name": "testAddCompositedArrayOfCollections", "primary_tested": ["CompositeCollection.addComposited(Collection<String>[])"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding an array of collections to the CompositeCollection."}, {"name": "testAddCompositedWithClear", "primary_tested": ["CompositeCollection.addComposited(Collection<String>[])", "CompositeCollection.clear()"], "associated_methods": ["Collection.isEmpty()"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding multiple collections and then clearing the CompositeCollection."}, {"name": "testAddCompositedWithRemoveComposited", "primary_tested": ["CompositeCollection.addComposited(Collection<String>[])", "CompositeCollection.removeComposited(Collection<String>)"], "external_dependencies": {"modules": ["CompositeCollection", "Collection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests adding multiple collections and then removing one from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableMap_valuesTest.java", "testclass_name": "UnmodifiableMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.apache.commons.collections4.collection.UnmodifiableCollection;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableMap_valuesTest", "description": "Tests the behavior of the values() method in UnmodifiableMap to ensure it returns an unmodifiable collection.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testValuesReturnsUnmodifiableCollection", "primary_tested": ["UnmodifiableMap.values()"], "external_dependencies": {"modules": ["UnmodifiableMap", "UnmodifiableCollection", "HashMap", "Map", "Collection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the values() method of UnmodifiableMap returns an instance of UnmodifiableCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMap_unmodifiableSortedMapTest.java", "testclass_name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertSame;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableSortedMap_unmodifiableSortedMapTest", "description": "Tests for the UnmodifiableSortedMap class, specifically focusing on the unmodifiableSortedMap method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableSortedMap_WithUnmodifiableMap", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableSortedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that passing an unmodifiable map to unmodifiableSortedMap returns the same map."}, {"name": "testUnmodifiableSortedMap_WithModifiableMap", "primary_tested": ["UnmodifiableSortedMap.unmodifiableSortedMap(SortedMap)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "UnmodifiableSortedMap", "Unmodifiable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that passing a modifiable map to unmodifiableSortedMap returns an instance of UnmodifiableSortedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/IndexedCollection_getTest.java", "testclass_name": "IndexedCollection_getTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static java.util.Arrays.asList;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.MultiValueMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "IndexedCollection_getTest", "description": "Unit tests for the get method of the IndexedCollection class.", "class_members": {"variables": [{"name": "indexedCollection", "type": "IndexedCollection<Integer, String>"}, {"name": "keyTransformer", "type": "Transformer<String, Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetWithExistingKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with existing keys in the IndexedCollection."}, {"name": "testGetWithNonExistingKey", "primary_tested": ["IndexedCollection.get(Integer)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a non-existing key in the IndexedCollection."}, {"name": "testGetAfterReindex", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.reindex()"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after reindexing the IndexedCollection."}, {"name": "testGetAfterAddToIndex", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.add(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after adding a new element to the IndexedCollection."}, {"name": "testGetAfterRemoveFromIndex", "primary_tested": ["IndexedCollection.get(Integer)"], "associated_methods": ["IndexedCollection.remove(String)"], "external_dependencies": {"modules": ["IndexedCollection", "Transformer"], "class_members": [{"name": "indexedCollection", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing an element from the IndexedCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/ArrayStack_searchTest.java", "testclass_name": "ArrayStack_searchTest", "dependencies": ["package org.apache.commons.collections4;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.EmptyStackException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ArrayStack_searchTest", "description": "Unit tests for the search functionality of the ArrayStack class.", "class_members": {"variables": [{"name": "stack", "type": "ArrayStack<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSearchTopItem", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for the top item in the stack."}, {"name": "testSearchMiddleItem", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a middle item in the stack."}, {"name": "testSearchBottomItem", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for the bottom item in the stack."}, {"name": "testSearchMissingItem", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a missing item in the stack."}, {"name": "testSearchEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for an item in an empty stack."}, {"name": "testSearchNullItem", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a null item in the stack."}, {"name": "testSearchNullInEmptyStack", "primary_tested": ["ArrayStack.search(String)"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality for a null item in an empty stack."}, {"name": "testSearchAfterPop", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after popping an item from the stack."}, {"name": "testSearchAfterMultiplePops", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after multiple pops from the stack."}, {"name": "testSearchAfterPushAndPop", "primary_tested": ["ArrayStack.search(String)"], "associated_methods": ["ArrayStack.pop()"], "external_dependencies": {"modules": ["ArrayStack"], "class_members": [{"name": "stack", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the search functionality after pushing and popping items from the stack."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_putAllTest.java", "testclass_name": "TransformedMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformedMap_putAllTest", "description": "Unit tests for the putAll method of TransformedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "Map<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}, {"name": "transformedMap", "type": "TransformedMap<String, String>"}, {"name": "expectedMap", "type": "Map<String, String>"}]}, "test_cases": [{"name": "testPutAll", "primary_tested": ["TransformedMap.putAll(Map<String, String>)"], "associated_methods": ["TransformedMap.decorated()"], "external_dependencies": {"modules": ["org.apache.commons.collections4.Transformer", "java.util.HashMap", "java.util.Map", "org.mockito.Mockito"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}, {"name": "transformedMap", "type": "variable"}, {"name": "expectedMap", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "description": "Tests the putAll method of TransformedMap, ensuring that keys and values are transformed as expected."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_getTest.java", "testclass_name": "PassiveExpiringMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.apache.commons.collections4.map.PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy;"], "name": "PassiveExpiringMap_getTest", "description": "Unit tests for the get method of PassiveExpiringMap, testing scenarios where entries exist and are not expired, exist but are expired, and do not exist.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGet_EntryExistsAndNotExpired", "primary_tested": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ConstantTimeToLiveExpirationPolicy", "HashMap"]}, "category": "unit", "description": "Tests the get method when an entry exists and is not expired."}, {"name": "testGet_EntryExistsButExpired", "primary_tested": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ConstantTimeToLiveExpirationPolicy", "HashMap"]}, "category": "unit", "description": "Tests the get method when an entry exists but is expired."}, {"name": "testGet_EntryDoesNotExist", "primary_tested": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "ConstantTimeToLiveExpirationPolicy", "HashMap"]}, "category": "unit", "description": "Tests the get method when an entry does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMap_entrySetTest.java", "testclass_name": "UnmodifiableOrderedMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.map.UnmodifiableOrderedMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "UnmodifiableOrderedMap_entrySetTest", "description": "Unit tests for the entrySet method of the UnmodifiableOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEntrySet", "primary_tested": ["UnmodifiableOrderedMap.entrySet()"], "external_dependencies": {"modules": ["UnmodifiableOrderedMap", "LinkedMap", "Map", "Set", "Map.Entry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the entrySet method of the UnmodifiableOrderedMap to ensure it returns the correct set of entries."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_containsAllTest.java", "testclass_name": "CompositeCollection_containsAllTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.apache.commons.collections4.CollectionUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_containsAllTest", "description": "Unit tests for the containsAll method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testContainsAllWithNullCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a null collection."}, {"name": "testContainsAllWithEmptyCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "ArrayList"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with an empty collection."}, {"name": "testContainsAllWithAllElementsPresent", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a collection containing all elements present in the composite collection."}, {"name": "testContainsAllWithSomeElementsMissing", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method with a collection containing some elements missing in the composite collection."}, {"name": "testContainsAllAfterAddingElements", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "Arrays", "HashSet"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method after adding new elements to the composite collection."}, {"name": "testContainsAllAfterClearingCollection", "primary_tested": ["CompositeCollection.containsAll(Collection)"], "associated_methods": ["CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection", "Arrays"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the containsAll method after clearing the composite collection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_valuesTest.java", "testclass_name": "PassiveExpiringMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "PassiveExpiringMap_valuesTest", "description": "Tests for the values method of PassiveExpiringMap, focusing on expired and non-expired entries.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testValuesWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.values()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "TimeUnit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the values method of PassiveExpiringMap when all entries have expired."}, {"name": "testValuesWithoutExpiredEntries", "primary_tested": ["PassiveExpiringMap.values()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "TimeUnit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the values method of PassiveExpiringMap when no entries have expired."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_clearTest.java", "testclass_name": "StaticBucketMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StaticBucketMap_clearTest", "description": "Unit test for the clear method of StaticBucketMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testClear", "primary_tested": ["StaticBucketMap.clear()"], "associated_methods": ["StaticBucketMap.put(Integer,String)", "StaticBucketMap.size()", "StaticBucketMap.get(Integer)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the clear functionality of the StaticBucketMap, ensuring that all entries are removed and the size is reset to zero."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putAllTest.java", "testclass_name": "StaticBucketMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "StaticBucketMap_putAllTest", "description": "Unit test for the putAll method of StaticBucketMap.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPutAll", "primary_tested": ["StaticBucketMap.putAll(Map<Integer,String>)"], "external_dependencies": {"modules": ["StaticBucketMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll functionality of the StaticBucketMap, ensuring that all entries from the input map are correctly added to the StaticBucketMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_iteratorTest.java", "testclass_name": "CompositeCollection_iteratorTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import org.apache.commons.collections4.CollectionUtils;", "import org.apache.commons.collections4.collection.CompositeCollection.CollectionMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_iteratorTest", "description": "Unit tests for the iterator functionality of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUpTest"], "test_cases": [{"name": "testIteratorWithEmptyComposite", "primary_tested": ["CompositeCollection.iterator()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality when the CompositeCollection is empty."}, {"name": "testIteratorWithSingleCollection", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality when the CompositeCollection contains a single collection."}, {"name": "testIteratorWithMultipleCollections", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)"], "external_dependencies": {"modules": ["CompositeCollection", "HashSet", "Arrays"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality when the CompositeCollection contains multiple collections."}, {"name": "testIteratorAfterClear", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection)", "CompositeCollection.clear()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality after clearing the CompositeCollection."}, {"name": "testIteratorAfterRemoveComposited", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.addComposited(Collection,Collection)", "CompositeCollection.removeComposited(Collection)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality after removing a collection from the CompositeCollection."}, {"name": "testIteratorAfterAddElement", "primary_tested": ["CompositeCollection.iterator()"], "associated_methods": ["CompositeCollection.setMutator(CollectionMutator)", "CompositeCollection.addComposited(Collection)", "CompositeCollection.add(String)"], "external_dependencies": {"modules": ["CompositeCollection", "CollectionMutator"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUpTest"], "description": "Tests the iterator functionality after adding an element to the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_removeTest.java", "testclass_name": "StaticBucketMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_removeTest", "description": "Unit tests for the remove functionality of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the StaticBucketMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the StaticBucketMap."}, {"name": "testRemoveNullKey", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a null key from the StaticBucketMap."}, {"name": "testRemoveFromEmptyMap", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from an empty StaticBucketMap."}, {"name": "testRemoveWithMultipleEntriesInBucket", "primary_tested": ["StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.put(String,String)", "StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key when multiple entries are present in the same bucket of the StaticBucketMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/queue/CircularFifoQueue_sizeTest.java", "testclass_name": "CircularFifoQueue_sizeTest", "dependencies": ["package org.apache.commons.collections4.queue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CircularFifoQueue_sizeTest", "description": "Unit tests for the size method of the CircularFifoQueue class.", "class_members": {"variables": [{"name": "queue", "type": "CircularFifoQueue<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWhenQueueIsEmpty", "primary_tested": ["CircularFifoQueue.size()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is empty."}, {"name": "testSizeWhenQueueIsFull", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue is full."}, {"name": "testSizeWhenQueueHasElementsButNotFull", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the queue has elements but is not full."}, {"name": "testSizeAfterAddingAndRemovingElements", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding and removing elements from the queue."}, {"name": "testSizeAfterClearingQueue", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)", "CircularFifoQueue.clear()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing the queue."}, {"name": "testSizeWhenEndIsLessThanStart", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()", "CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the end index is less than the start index."}, {"name": "testSizeWhenEndEqualsStartAndQueueIsFull", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)", "CircularFifoQueue.add(Integer)"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the end index equals the start index and the queue is full."}, {"name": "testSizeWhenEndEqualsStartAndQueueIsEmpty", "primary_tested": ["CircularFifoQueue.size()"], "associated_methods": ["CircularFifoQueue.add(Integer)", "CircularFifoQueue.remove()"], "external_dependencies": {"modules": ["CircularFifoQueue"], "class_members": [{"name": "queue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the end index equals the start index and the queue is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_removeTest.java", "testclass_name": "CompositeMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.map.CompositeMap.MapMutator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_removeTest", "description": "Unit tests for the remove functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the CompositeMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the CompositeMap."}, {"name": "testRemoveFromSecondMap", "primary_tested": ["CompositeMap.remove(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key from the second map in the CompositeMap."}, {"name": "testRemoveAfterAddComposited", "primary_tested": ["CompositeMap.remove(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key after adding a new map to the CompositeMap."}, {"name": "testRemoveAfterPut", "primary_tested": ["CompositeMap.remove(String)"], "associated_methods": ["CompositeMap.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a key after adding a new entry to the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_subMapTest.java", "testclass_name": "PredicatedSortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "PredicatedSortedMap_subMapTest", "description": "Tests the subMap functionality of PredicatedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<Integer, String>"}, {"name": "keyPredicate", "type": "Predicate<Integer>"}, {"name": "valuePredicate", "type": "Predicate<String>"}, {"name": "predicatedMap", "type": "PredicatedSortedMap<Integer, String>"}]}, "test_cases": [{"name": "testSubMap", "primary_tested": ["PredicatedSortedMap.subMap(int,int)"], "associated_methods": ["PredicatedSortedMap.predicatedSortedMap(SortedMap<Integer, String>, Predicate<Integer>, Predicate<String>)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Predicate", "PredicatedSortedMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyPredicate", "type": "variable"}, {"name": "valuePredicate", "type": "variable"}, {"name": "predicatedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the subMap functionality of PredicatedSortedMap, ensuring that the subMap method returns the correct subset of the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putTest.java", "testclass_name": "PassiveExpiringMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.concurrent.TimeUnit;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;"], "name": "PassiveExpiringMap_putTest", "description": "Unit tests for the put method of PassiveExpiringMap, which tests the behavior of entries based on their expiration settings.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPut_EntryNeverExpires", "primary_tested": ["PassiveExpiringMap.put(String,String)"], "associated_methods": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "java.util.HashMap", "java.util.Map", "java.util.concurrent.TimeUnit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when entries never expire."}, {"name": "testPut_EntryAlwaysExpires", "primary_tested": ["PassiveExpiringMap.put(String,String)"], "associated_methods": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "java.util.HashMap", "java.util.Map", "java.util.concurrent.TimeUnit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when entries always expire immediately."}, {"name": "testPut_EntryExpiresAfterTime", "primary_tested": ["PassiveExpiringMap.put(String,String)"], "associated_methods": ["PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "java.util.HashMap", "java.util.Map", "java.util.concurrent.TimeUnit"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the put method when entries expire after a specified time."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_transformedSortedMapTest.java", "testclass_name": "TransformedSortedMap_transformedSortedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedSortedMap_transformedSortedMapTest", "description": "Unit tests for the TransformedSortedMap class, specifically testing the transformedSortedMap method with both non-empty and empty maps.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedSortedMapWithNonEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedSortedMap.size()", "TransformedSortedMap.get(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSortedMap method with a non-empty map, ensuring the key and value transformations are applied correctly."}, {"name": "testTransformedSortedMapWithEmptyMap", "primary_tested": ["TransformedSortedMap.transformedSortedMap(SortedMap<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedSortedMap.isEmpty()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformedSortedMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedSortedMap method with an empty map, ensuring the resulting map is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_containsValueTest.java", "testclass_name": "MultiValueMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_containsValueTest", "description": "Unit tests for the containsValue method of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["MultiValueMap.containsValue(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the map is empty."}, {"name": "testContainsValue_AfterRemove", "primary_tested": ["MultiValueMap.containsValue(String)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method after removing a mapping from the map."}, {"name": "testContainsValue_AfterClear", "primary_tested": ["MultiValueMap.containsValue(String)"], "associated_methods": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method after clearing the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_addCompositedTest.java", "testclass_name": "CompositeMap_addCompositedTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_addCompositedTest", "description": "Tests for the addComposited method of the CompositeMap class, including scenarios with and without key collisions.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}, {"name": "map3", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddCompositedSuccess", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map3", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of a map without key collisions to the CompositeMap."}, {"name": "testAddCompositedKeyCollisionWithoutMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "IllegalArgumentException"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a map with key collisions to the CompositeMap without a mutator, expecting an IllegalArgumentException."}, {"name": "testAddCompositedKeyCollisionWithMutator", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "CompositeMap.MapMutator"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a map with key collisions to the CompositeMap with a mutator, expecting successful addition."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_cloneTest.java", "testclass_name": "SingletonMap_cloneTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SingletonMap_cloneTest", "description": "Unit tests for the clone functionality of the SingletonMap class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testClone", "primary_tested": ["SingletonMap.clone()"], "associated_methods": ["SingletonMap.getKey()", "SingletonMap.getValue()"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the clone functionality of the SingletonMap, ensuring that the cloned instance is not the same object but has the same key and value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_getTest.java", "testclass_name": "MultiKeyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.apache.commons.collections4.keyvalue.MultiKey;"], "name": "MultiKeyMap_getTest", "description": "Unit tests for the get method of MultiKeyMap.", "class_members": {"variables": [{"name": "multiKeyMap", "type": "MultiKeyMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["MultiKeyMap.get(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap for an existing key."}, {"name": "testGetNonExistingKey", "primary_tested": ["MultiKeyMap.get(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap for a non-existing key."}, {"name": "testGetAfterRemove", "primary_tested": ["MultiKeyMap.get(Integer,Integer)"], "associated_methods": ["MultiKeyMap.removeMultiKey(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap after removing a key."}, {"name": "testGetWithNullKeys", "primary_tested": ["MultiKeyMap.get(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with null keys."}, {"name": "testGetWithMixedKeys", "primary_tested": ["MultiKeyMap.get(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with mixed keys (some null, some not)."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["MultiKeyMap.get(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap with multiple entries."}, {"name": "testGetWithOverwrittenEntry", "primary_tested": ["MultiKeyMap.get(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap"], "class_members": [{"name": "multiKeyMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of MultiKeyMap after overwriting an entry."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedMap_transformedMapTest.java", "testclass_name": "TransformedMap_transformedMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "TransformedMap_transformedMapTest", "description": "Unit tests for the TransformedMap class, specifically testing the transformedMap method with both non-empty and empty maps.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformedMapWithNonEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedMap.size()", "TransformedMap.containsKey(String)", "TransformedMap.get(String)"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with a non-empty map, verifying the transformation of keys and values."}, {"name": "testTransformedMapWithEmptyMap", "primary_tested": ["TransformedMap.transformedMap(Map<String, Integer>, Transformer<String, String>, Transformer<Integer, Integer>)"], "associated_methods": ["TransformedMap.isEmpty()"], "external_dependencies": {"modules": ["TransformedMap", "Transformer", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformedMap method with an empty map, verifying that the resulting map is also empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_containsValueTest.java", "testclass_name": "StaticBucketMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StaticBucketMap_containsValueTest", "description": "Unit tests for the containsValue method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is present in the map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the value is not present in the map."}, {"name": "testContainsValue_EmptyMap", "primary_tested": ["StaticBucketMap.containsValue(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the containsValue method when the map is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_iteratorTest.java", "testclass_name": "MultiValueMap_iteratorTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.MultiMap;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Iterator;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiValueMap_iteratorTest", "description": "Unit tests for the iterator functionality of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIteratorWithSingleEntry", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap", "Map.Entry", "Iterator"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality with a single entry in the MultiValueMap."}, {"name": "testIteratorWithMultipleEntries", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap", "Map.Entry", "Iterator"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality with multiple entries in the MultiValueMap."}, {"name": "testIteratorWithEmptyMap", "primary_tested": ["MultiValueMap.iterator()"], "external_dependencies": {"modules": ["MultiValueMap", "Map.Entry", "Iterator"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality with an empty MultiValueMap."}, {"name": "testIteratorAfterRemove", "primary_tested": ["MultiValueMap.iterator()"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap", "Map.Entry", "Iterator"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality after removing an entry from the MultiValueMap."}, {"name": "testIteratorAfterClear", "primary_tested": ["MultiValueMap.iterator()"], "associated_methods": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap", "Map.Entry", "Iterator"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the iterator functionality after clearing the MultiValueMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_getTest.java", "testclass_name": "SingletonMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_getTest", "description": "Unit tests for the get method of the SingletonMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGet_KeyExists", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method of SingletonMap when the key exists."}, {"name": "testGet_KeyDoesNotExist", "primary_tested": ["SingletonMap.get(String)"], "external_dependencies": {"modules": ["SingletonMap"]}, "category": "unit", "description": "Tests the get method of SingletonMap when the key does not exist."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/sequence/SequencesComparator_getScriptTest.java", "testclass_name": "SequencesComparator_getScriptTest", "dependencies": ["package org.apache.commons.collections4.sequence;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SequencesComparator_getScriptTest", "description": "Unit test for the getScript method of the SequencesComparator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGetScript", "primary_tested": ["SequencesComparator.getScript()"], "external_dependencies": {"modules": ["SequencesComparator", "EditScript", "Arrays", "List"]}, "category": "unit", "description": "Tests the getScript method of the SequencesComparator class, verifying the number of modifications and the length of the Longest Common Subsequence (LCS)."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_nextKeyTest.java", "testclass_name": "ListOrderedMap_nextKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ListOrderedMap_nextKeyTest", "description": "Unit tests for the nextKey method in ListOrderedMap.", "class_members": {"variables": [{"name": "listOrderedMap", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextKey_ValidKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with valid keys in the ListOrderedMap."}, {"name": "testNextKey_LastKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with the last key in the ListOrderedMap."}, {"name": "testNextKey_NonExistentKey", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with a non-existent key in the ListOrderedMap."}, {"name": "testNextKey_EmptyMap", "primary_tested": ["ListOrderedMap.nextKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method with an empty ListOrderedMap."}, {"name": "testNextKey_AfterRemove", "primary_tested": ["ListOrderedMap.nextKey(String)"], "associated_methods": ["ListOrderedMap.remove(String)"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": [{"name": "listOrderedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextKey method after removing a key from the ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/DefaultedMap_getTest.java", "testclass_name": "DefaultedMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "DefaultedMap_getTest", "description": "Unit tests for the get method of DefaultedMap, which tests the behavior when a key exists in the map, when a key exists in the map as null, and when a key does not exist in the map but the transformer returns a value.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testGet_KeyExistsInMap", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer"], "class_members": []}, "category": "unit", "description": "Tests the get method of DefaultedMap when the key exists in the map."}, {"name": "testGet_KeyNotInMapButExistsInMapAsNull", "primary_tested": ["DefaultedMap.get(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer"], "class_members": []}, "category": "unit", "description": "Tests the get method of DefaultedMap when the key exists in the map as null."}, {"name": "testGet_KeyNotInMapAndTransformerReturnsValue", "primary_tested": ["DefaultedMap.get(String)"], "associated_methods": ["Transformer.apply(String)"], "external_dependencies": {"modules": ["DefaultedMap", "HashMap", "Transformer"], "class_members": []}, "category": "unit", "description": "Tests the get method of DefaultedMap when the key does not exist in the map but the transformer returns a value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/collection/CompositeCollection_sizeTest.java", "testclass_name": "CompositeCollection_sizeTest", "dependencies": ["package org.apache.commons.collections4.collection;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.List;", "import org.apache.commons.collections4.CollectionUtils;", "import org.apache.commons.collections4.collection.CompositeCollection;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeCollection_sizeTest", "description": "Unit tests for the size method of the CompositeCollection class.", "class_members": {"variables": [{"name": "c", "type": "CompositeCollection<String>"}, {"name": "one", "type": "Collection<String>"}, {"name": "two", "type": "Collection<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWithEmptyComposite", "primary_tested": ["CompositeCollection.size()"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when the CompositeCollection is empty."}, {"name": "testSizeWithSingleCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection<E>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when a single collection is added to the CompositeCollection."}, {"name": "testSizeWithMultipleCollections", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection<E>,Collection<E>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method when multiple collections are added to the CompositeCollection."}, {"name": "testSizeAfterAddingElement", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection<E>)", "CompositeCollection.removeComposited(Collection<E>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after adding an element to one of the collections in the CompositeCollection."}, {"name": "testSizeAfterRemovingElement", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection<E>)", "CompositeCollection.removeComposited(Collection<E>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after removing an element from one of the collections in the CompositeCollection."}, {"name": "testSizeAfterRemovingCollection", "primary_tested": ["CompositeCollection.size()"], "associated_methods": ["CompositeCollection.addComposited(Collection<E>,Collection<E>)", "CompositeCollection.removeComposited(Collection<E>)"], "external_dependencies": {"modules": ["CompositeCollection"], "class_members": [{"name": "c", "type": "variable"}, {"name": "one", "type": "variable"}, {"name": "two", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after removing a collection from the CompositeCollection."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LinkedMap_indexOfTest.java", "testclass_name": "LinkedMap_indexOfTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.CollectionUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "LinkedMap_indexOfTest", "description": "Unit tests for the indexOf method in the LinkedMap class.", "class_members": {"variables": [{"name": "linkedMap", "type": "LinkedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIndexOfKeyExists", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": [{"name": "linkedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method when the key exists in the LinkedMap."}, {"name": "testIndexOfKeyNotExists", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method when the key does not exist in the LinkedMap."}, {"name": "testIndexOfAfterRemove", "primary_tested": ["LinkedMap.indexOf(String)"], "associated_methods": ["LinkedMap.remove(int)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method after removing an element from the LinkedMap."}, {"name": "testIndexOfAfterAdd", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap"], "class_members": [{"name": "linkedMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method after adding a new element to the LinkedMap."}, {"name": "testIndexOfEmptyMap", "primary_tested": ["LinkedMap.indexOf(String)"], "external_dependencies": {"modules": ["LinkedMap", "CollectionUtils"], "class_members": [{"name": "linkedMap", "type": "variable"}], "project_specific_resources": ["CollectionUtils.INDEX_NOT_FOUND"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the indexOf method on an empty LinkedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_keySetTest.java", "testclass_name": "PassiveExpiringMap_keySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import java.util.concurrent.TimeUnit;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PassiveExpiringMap_keySetTest", "description": "Unit tests for the keySet method of PassiveExpiringMap, focusing on behavior with and without expired entries.", "class_members": {"variables": [{"name": "map", "type": "PassiveExpiringMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testKeySetWithExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method of PassiveExpiringMap when all entries have expired."}, {"name": "testKeySetWithoutExpiredEntries", "primary_tested": ["PassiveExpiringMap.keySet()"], "external_dependencies": {"modules": ["PassiveExpiringMap", "Set"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the keySet method of PassiveExpiringMap when no entries have expired."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PassiveExpiringMap_putAllTest.java", "testclass_name": "PassiveExpiringMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "PassiveExpiringMap_putAllTest", "description": "Unit test for the putAll method of PassiveExpiringMap.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAll", "primary_tested": ["PassiveExpiringMap.putAll(Map)"], "associated_methods": ["PassiveExpiringMap.size()", "PassiveExpiringMap.get(String)"], "external_dependencies": {"modules": ["PassiveExpiringMap", "HashMap", "Map"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method of PassiveExpiringMap to ensure it correctly adds all entries from a given map and retrieves them correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_firstKeyTest.java", "testclass_name": "ListOrderedMap_firstKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_firstKeyTest", "description": "Unit tests for the firstKey method of the ListOrderedMap class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testFirstKey_MapNotEmpty", "primary_tested": ["ListOrderedMap.firstKey()"], "external_dependencies": {"modules": ["ListOrderedMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the firstKey method when the map is not empty."}, {"name": "testFirstKey_MapEmpty", "primary_tested": ["ListOrderedMap.firstKey()"], "external_dependencies": {"modules": ["ListOrderedMap", "NoSuchElementException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the firstKey method when the map is empty, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/PredicatedSortedMap_tailMapTest.java", "testclass_name": "PredicatedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "PredicatedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of PredicatedSortedMap.", "class_members": {"variables": [{"name": "originalMap", "type": "SortedMap<Integer, String>"}, {"name": "keyPredicate", "type": "Predicate<Integer>"}, {"name": "valuePredicate", "type": "Predicate<String>"}, {"name": "predicatedMap", "type": "PredicatedSortedMap<Integer, String>"}]}, "test_cases": [{"name": "testTailMap", "primary_tested": ["PredicatedSortedMap.tailMap(Integer)"], "associated_methods": ["SortedMap.put(Integer,String)", "SortedMap.size()", "SortedMap.containsKey(Integer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Predicate", "PredicatedSortedMap"], "class_members": [{"name": "originalMap", "type": "variable"}, {"name": "keyPredicate", "type": "variable"}, {"name": "valuePredicate", "type": "variable"}, {"name": "predicatedMap", "type": "variable"}]}, "category": "unit", "description": "Tests the tailMap functionality of the PredicatedSortedMap, ensuring it returns the correct subset of the map starting from the specified key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_putAllTest.java", "testclass_name": "SingletonMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;"], "name": "SingletonMap_putAllTest", "description": "Tests for the putAll method of the SingletonMap class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPutAllWithEmptyMap", "primary_tested": ["SingletonMap.putAll(Map<String,String>)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with an empty map, ensuring the SingletonMap remains unchanged."}, {"name": "testPutAllWithSingleEntryMap", "primary_tested": ["SingletonMap.putAll(Map<String,String>)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing a single entry, ensuring the SingletonMap updates its value."}, {"name": "testPutAllWithMultipleEntriesMap", "primary_tested": ["SingletonMap.putAll(Map<String,String>)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the putAll method with a map containing multiple entries, ensuring an IllegalArgumentException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/ListOrderedMap_removeTest.java", "testclass_name": "ListOrderedMap_removeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ListOrderedMap_removeTest", "description": "Unit tests for the remove functionality of the ListOrderedMap class.", "class_members": {"variables": [{"name": "map", "type": "ListOrderedMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.containsKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of an existing key from the ListOrderedMap."}, {"name": "testRemoveNonExistingKey", "primary_tested": ["ListOrderedMap.remove(String)"], "associated_methods": ["ListOrderedMap.containsKey(String)"], "external_dependencies": {"modules": ["ListOrderedMap", "HashMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a non-existing key from the ListOrderedMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_equalPredicateTest.java", "testclass_name": "EqualPredicate_equalPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "EqualPredicate_equalPredicateTest", "description": "Unit tests for the EqualPredicate class, specifically focusing on the equalPredicate method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testEqualPredicateWithNonNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"]}, "category": "unit", "description": "Tests the EqualPredicate with a non-null object, ensuring it correctly identifies equality."}, {"name": "testEqualPredicateWithNullObject", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["EqualPredicate", "Predicate"]}, "category": "unit", "description": "Tests the EqualPredicate with a null object, ensuring it correctly identifies equality."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_removeMappingTest.java", "testclass_name": "MultiValueMap_removeMappingTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;"], "name": "MultiValueMap_removeMappingTest", "description": "Unit tests for the removeMapping functionality of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveMappingSuccess", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.containsValue(String,String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of a mapping from the MultiValueMap."}, {"name": "testRemoveMappingNonExistentValue", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a mapping with a non-existent value from the MultiValueMap."}, {"name": "testRemoveMappingNonExistentKey", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a mapping with a non-existent key from the MultiValueMap."}, {"name": "testRemoveMappingLastValue", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.containsKey(String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of the last value associated with a key from the MultiValueMap."}, {"name": "testRemoveMappingAndClear", "primary_tested": ["MultiValueMap.removeMapping(String,String)"], "associated_methods": ["MultiValueMap.clear()", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a mapping after clearing the MultiValueMap."}, {"name": "testRemoveMappingAndIterator", "primary_tested": ["MultiValueMap.iterator(String)"], "associated_methods": ["MultiValueMap.containsValue(String,String)", "MultiValueMap.totalSize()"], "external_dependencies": {"modules": ["MultiValueMap", "Iterator"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removal of a mapping using an iterator from the MultiValueMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_testTest.java", "testclass_name": "AllPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "AllPredicate_testTest", "description": "Unit tests for the AllPredicate class in Apache Commons Collections, focusing on the behavior of the AllPredicate when all or some predicates return true or false.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicatesTrue", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when all predicates return true."}, {"name": "testOnePredicateFalse", "primary_tested": ["AllPredicate.test(String)"], "associated_methods": ["Predicate.test(String)"], "external_dependencies": {"modules": ["Predicate", "AllPredicate"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the AllPredicate functionality when one predicate returns false."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_clearTest.java", "testclass_name": "CompositeMap_clearTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_clearTest", "description": "Unit tests for the clear functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the CompositeMap, ensuring that all maps within the composite map are cleared."}, {"name": "testClearWithEmptyCompositeMap", "primary_tested": ["CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap"]}, "category": "unit", "description": "Tests the clear functionality of an empty CompositeMap, ensuring that it remains empty after the clear operation."}, {"name": "testClearWithSingleMap", "primary_tested": ["CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "map1", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of a CompositeMap containing a single map, ensuring that the single map is cleared."}, {"name": "testClearWithMultipleMaps", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of a CompositeMap containing multiple maps, ensuring that all maps are cleared."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsValueTest.java", "testclass_name": "CompositeMap_containsValueTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsValueTest", "description": "Unit tests for the containsValue method in CompositeMap.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsValue_ValuePresentInFirstMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the first map."}, {"name": "testContainsValue_ValuePresentInSecondMap", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value present in the second map."}, {"name": "testContainsValue_ValueNotPresent", "primary_tested": ["CompositeMap.containsValue(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value that is not present in any map."}, {"name": "testContainsValue_AfterAddingNewMap", "primary_tested": ["CompositeMap.containsValue(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value after adding a new map to the composite map."}, {"name": "testContainsValue_AfterRemovingValue", "primary_tested": ["CompositeMap.containsValue(String)"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value after removing it from the composite map."}, {"name": "testContainsValue_AfterPuttingNewValue", "primary_tested": ["CompositeMap.containsValue(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the containsValue method correctly identifies a value after adding a new map with a new value to the composite map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_subMapTest.java", "testclass_name": "TransformedSortedMap_subMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_subMapTest", "description": "Unit tests for the subMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "baseMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSubMap", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "associated_methods": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with no-operation transformers."}, {"name": "testSubMapWithTransformers", "primary_tested": ["TransformedSortedMap.subMap(String,String)"], "associated_methods": ["TransformedSortedMap.transformingSortedMap(SortedMap,Transformer,Transformer)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}], "project_specific_resources": ["TransformerUtils.stringValueTransformer()"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the subMap functionality of TransformedSortedMap with string value transformers."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putTest.java", "testclass_name": "CompositeMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_putTest", "description": "Tests for the put operation in CompositeMap with and without a MapMutator.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutWithMutator", "primary_tested": ["CompositeMap.put(String,String)"], "associated_methods": ["CompositeMap.containsKey(String)", "CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put operation in CompositeMap with a MapMutator, including adding a new key-value pair and updating an existing one."}, {"name": "testPutWithoutMutator", "primary_tested": ["CompositeMap.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put operation in CompositeMap without a MapMutator, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_addComparatorTest.java", "testclass_name": "ComparatorChain_addComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_addComparatorTest", "description": "Unit tests for the addComparator method of the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAddComparator", "primary_tested": ["ComparatorChain.addComparator(Comparator,boolean)"], "associated_methods": ["ComparatorChain.size()"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the addComparator method of the ComparatorChain class, ensuring that the comparator is added correctly and the size of the chain is updated accordingly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_equalsTest.java", "testclass_name": "SingletonMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.apache.commons.collections4.KeyValue;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_equalsTest", "description": "Unit tests for the equals method of the SingletonMap class.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_DifferentSizeMap", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a map of different size."}, {"name": "testEquals_SameKeyDifferentValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same key but different value."}, {"name": "testEquals_DifferentKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different key but same value."}, {"name": "testEquals_SameKeySameValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same key and same value."}, {"name": "testEquals_NullKey", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a null key."}, {"name": "testEquals_NullValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a null value."}, {"name": "testEquals_NullKeyAndValue", "primary_tested": ["SingletonMap.equals(Object)"], "external_dependencies": {"modules": ["SingletonMap", "HashMap"]}, "category": "unit", "description": "Tests the equals method with a null key and null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/EqualPredicate_testTest.java", "testclass_name": "EqualPredicate_testTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Equator;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "EqualPredicate_testTest", "description": "Unit tests for the EqualPredicate class in Apache Commons Collections, focusing on the behavior with and without an Equator.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testWithEquator", "primary_tested": ["EqualPredicate.equalPredicate(String,Equator)"], "associated_methods": ["Equator.equate(String,String)"], "external_dependencies": {"modules": ["Equator", "Predicate", "EqualPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the EqualPredicate functionality when an Equator is provided, ensuring the predicate correctly uses the Equator for comparison."}, {"name": "testWithoutEquator", "primary_tested": ["EqualPredicate.equalPredicate(String)"], "external_dependencies": {"modules": ["Predicate", "EqualPredicate"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the EqualPredicate functionality when no Equator is provided, ensuring the predicate uses default equality comparison."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_hashCodeTest.java", "testclass_name": "BooleanComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_hashCodeTest", "description": "Unit tests for the hashCode method of BooleanComparator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testHashCodeTrueFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when true is first."}, {"name": "testHashCodeFalseFirst", "primary_tested": ["BooleanComparator.hashCode()"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the hashCode method of BooleanComparator when false is first."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LazyMap_getTest.java", "testclass_name": "LazyMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.Factory;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "LazyMap_getTest", "description": "Unit tests for the get method of LazyMap.", "class_members": {"variables": [{"name": "map", "type": "Map<String, String>"}, {"name": "factory", "type": "Factory<String>"}, {"name": "lazyMap", "type": "LazyMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGet_KeyNotInMap", "primary_tested": ["LazyMap.get(String)"], "associated_methods": ["Factory.create()"], "external_dependencies": {"modules": ["LazyMap", "Factory", "Map", "HashMap"], "class_members": [{"name": "lazyMap", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is not present in the map. Verifies that the factory's create method is called and the value is added to the map."}, {"name": "testGet_KeyInMap", "primary_tested": ["LazyMap.get(String)"], "external_dependencies": {"modules": ["LazyMap", "Factory", "Map", "HashMap"], "class_members": [{"name": "lazyMap", "type": "variable"}, {"name": "factory", "type": "variable"}, {"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of LazyMap when the key is already present in the map. Verifies that the factory's create method is not called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMap_transformingMapTest.java", "testclass_name": "TransformedSplitMap_transformingMapTest", "dependencies": ["package org.apache.commons.collections4.splitmap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.map.LinkedMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertNotNull;"], "name": "TransformedSplitMap_transformingMapTest", "description": "Unit tests for the TransformedSplitMap transformingMap functionality.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformingMap", "primary_tested": ["TransformedSplitMap.transformingMap(Map,Transformer,Transformer)"], "external_dependencies": {"modules": ["LinkedMap", "Transformer", "TransformedSplitMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a TransformedSplitMap using transformingMap method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/AllPredicate_allPredicateTest.java", "testclass_name": "AllPredicate_allPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.when;", "import java.util.Arrays;", "import java.util.Collection;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;"], "name": "AllPredicate_allPredicateTest", "description": "Unit tests for the AllPredicate class, specifically testing the allPredicate method with various scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllPredicate_EmptyCollection", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with an empty collection of predicates."}, {"name": "testAllPredicate_SinglePredicate", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "associated_methods": ["Predicate.test(Object)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with a single predicate."}, {"name": "testAllPredicate_MultiplePredicates", "primary_tested": ["AllPredicate.allPredicate(Collection<Predicate<Object>>)"], "associated_methods": ["Predicate.test(Object)"], "external_dependencies": {"modules": ["AllPredicate", "Predicate", "Arrays", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the allPredicate method with multiple predicates."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_entrySetTest.java", "testclass_name": "CompositeMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.AbstractMap;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_entrySetTest", "description": "Unit tests for the entrySet functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEntrySet", "primary_tested": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap."}, {"name": "testEntrySetAfterAddComposited", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after adding a new map."}, {"name": "testEntrySetAfterRemoveComposited", "primary_tested": ["CompositeMap.removeComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after removing a map."}, {"name": "testEntrySetAfterClear", "primary_tested": ["CompositeMap.clear()"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after clearing it."}, {"name": "testEntrySetAfterPut", "primary_tested": ["CompositeMap.addComposited(Map<String, String>)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set", "AbstractMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after adding a new map with a specific entry."}, {"name": "testEntrySetAfterRemove", "primary_tested": ["CompositeMap.remove(String)"], "associated_methods": ["CompositeMap.entrySet()"], "external_dependencies": {"modules": ["CompositeMap", "Map", "Set", "AbstractMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet functionality of the CompositeMap after removing a specific entry."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_setComparatorTest.java", "testclass_name": "ComparatorChain_setComparatorTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ComparatorChain_setComparatorTest", "description": "Unit tests for the setComparator method in the ComparatorChain class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testSetComparator_ForwardSort", "primary_tested": ["ComparatorChain.setComparator(int,Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests setting a comparator in forward sort order in the ComparatorChain."}, {"name": "testSetComparator_ReverseSort", "primary_tested": ["ComparatorChain.setComparator(int,Comparator,boolean)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests setting a comparator in reverse sort order in the ComparatorChain."}, {"name": "testSetComparator_LockedChain", "primary_tested": ["ComparatorChain.setComparator(int,Comparator,boolean)"], "associated_methods": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests setting a comparator in a locked ComparatorChain, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_equalsTest.java", "testclass_name": "CompositeMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_equalsTest", "description": "Unit tests for the equals method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsWithEqualMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeMaps containing equal maps."}, {"name": "testEqualsWithDifferentMaps", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two CompositeMaps containing different maps."}, {"name": "testEqualsWithNonMapObject", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a non-map object."}, {"name": "testEqualsAfterModification", "primary_tested": ["CompositeMap.equals(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method after modifying one of the maps in a CompositeMap."}, {"name": "testEqualsAfterRemoval", "primary_tested": ["CompositeMap.equals(Object)"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method after removing an entry from a CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addTest.java", "testclass_name": "FixedOrderComparator_addTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FixedOrderComparator_addTest", "description": "Unit tests for the add method of FixedOrderComparator.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddNewObject", "primary_tested": ["FixedOrderComparator.add(String)"], "associated_methods": ["FixedOrderComparator.isLocked()"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a new object to the FixedOrderComparator and checks if it is locked before and after addition."}, {"name": "testAddWhenLocked", "primary_tested": ["FixedOrderComparator.add(String)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addition of a new object to the FixedOrderComparator when it is locked, expecting an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_tailMapTest.java", "testclass_name": "TransformedSortedMap_tailMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_tailMapTest", "description": "Unit tests for the tailMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "baseMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testTailMap", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "associated_methods": ["SortedMap.size()", "SortedMap.get(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap with an existing key."}, {"name": "testTailMapWithNonExistentKey", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "associated_methods": ["SortedMap.size()"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap with a non-existent key."}, {"name": "testTailMapWithNullKey", "primary_tested": ["TransformedSortedMap.tailMap(String)"], "external_dependencies": {"modules": ["SortedMap", "TreeMap", "Transformer", "TransformerUtils", "TransformedSortedMap"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the tailMap functionality of TransformedSortedMap with a null key, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_compareTest.java", "testclass_name": "BooleanComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "BooleanComparator_compareTest", "description": "Unit tests for the compare method of BooleanComparator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCompareTrueFirst", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator with true values first."}, {"name": "testCompareFalseFirst", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator with false values first."}, {"name": "testCompareNullArguments", "primary_tested": ["BooleanComparator.compare(Boolean,Boolean)"], "external_dependencies": {"modules": ["BooleanComparator", "Boolean"]}, "category": "unit", "description": "Tests the compare method of BooleanComparator with null arguments, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SkippingIterator_nextTest.java", "testclass_name": "SkippingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SkippingIterator_nextTest", "description": "Unit tests for the next method of SkippingIterator.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNext", "primary_tested": ["SkippingIterator.next()"], "external_dependencies": {"modules": ["Arrays", "Iterator", "SkippingIterator"]}, "category": "unit", "description": "Tests the next method of SkippingIterator to ensure it correctly skips the specified number of elements and returns the next element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_valuesTest.java", "testclass_name": "MultiValueMap_valuesTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "MultiValueMap_valuesTest", "description": "Unit tests for the values method of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testValuesWithEmptyMap", "primary_tested": ["MultiValueMap.values()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method when the map is empty."}, {"name": "testValuesWithSingleEntry", "primary_tested": ["MultiValueMap.values()"], "associated_methods": ["MultiValueMap.put(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method with a single entry in the map."}, {"name": "testValuesWithMultipleEntries", "primary_tested": ["MultiValueMap.values()"], "associated_methods": ["MultiValueMap.put(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method with multiple entries in the map."}, {"name": "testValuesAfterClear", "primary_tested": ["MultiValueMap.values()"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method after clearing the map."}, {"name": "testValuesAfterRemove", "primary_tested": ["MultiValueMap.values()"], "associated_methods": ["MultiValueMap.put(String,String)", "MultiValueMap.remove(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method after removing an entry from the map."}, {"name": "testValuesWithCustomCollection", "primary_tested": ["MultiValueMap.values()"], "associated_methods": ["MultiValueMap.multiValueMap(Map<String,Collection<String>>,java.util.function.Supplier<Collection<String>>)"], "external_dependencies": {"modules": ["MultiValueMap", "HashMap", "ArrayList"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the values method with a custom collection in the map."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_sizeTest.java", "testclass_name": "MultiValueMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.HashSet;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_sizeTest", "description": "Unit tests for the size method of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWithExistingKey", "primary_tested": ["MultiValueMap.size(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method with an existing key in the MultiValueMap."}, {"name": "testSizeWithNonExistingKey", "primary_tested": ["MultiValueMap.size(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method with a non-existing key in the MultiValueMap."}, {"name": "testSizeAfterRemoveMapping", "primary_tested": ["MultiValueMap.size(String)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after removing a mapping from the MultiValueMap."}, {"name": "testSizeAfterClear", "primary_tested": ["MultiValueMap.size(String)"], "associated_methods": ["MultiValueMap.clear()"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method after clearing the MultiValueMap."}, {"name": "testSizeWithMultipleKeys", "primary_tested": ["MultiValueMap.size(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method with multiple keys in the MultiValueMap."}, {"name": "testSizeWithEmptyCollection", "primary_tested": ["MultiValueMap.size(String)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method with an empty collection in the MultiValueMap."}, {"name": "testSizeWithNullKey", "primary_tested": ["MultiValueMap.size(String)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size method with a null key in the MultiValueMap."}, {"name": "testSizeWithDifferentCollectionTypes", "primary_tested": ["MultiValueMap.size(String)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "HashSet"]}, "category": "unit", "description": "Tests the size method with different collection types in the MultiValueMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ReverseComparator_equalsTest.java", "testclass_name": "ReverseComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ReverseComparator_equalsTest", "description": "Unit tests for the equals method of the ReverseComparator class.", "class_members": {"variables": [{"name": "naturalOrder", "type": "Comparator<Integer>"}, {"name": "rc1", "type": "ReverseComparator<Integer>"}, {"name": "rc2", "type": "ReverseComparator<Integer>"}, {"name": "rc3", "type": "ReverseComparator<Integer>"}]}, "test_cases": [{"name": "testEquals", "primary_tested": ["ReverseComparator.equals(Object)"], "external_dependencies": {"modules": ["Comparator", "ReverseComparator"], "class_members": [{"name": "naturalOrder", "type": "variable"}, {"name": "rc1", "type": "variable"}, {"name": "rc2", "type": "variable"}, {"name": "rc3", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method of the ReverseComparator class, including same instance, null comparison, different class comparison, same class with same comparator, and same class with different comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_putTest.java", "testclass_name": "StaticBucketMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_putTest", "description": "Unit tests for the put method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutNewKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a new key, ensuring the key is added and retrievable."}, {"name": "testPutExistingKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with an existing key, ensuring the value is updated and retrievable."}, {"name": "testPutNullKey", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null key, ensuring the null key is added and retrievable."}, {"name": "testPutNullValue", "primary_tested": ["StaticBucketMap.put(String,String)"], "associated_methods": ["StaticBucketMap.containsKey(String)", "StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method with a null value, ensuring the key is added and the value is retrievable as null."}, {"name": "testPutRemoveKey", "primary_tested": ["StaticBucketMap.put(String,String)", "StaticBucketMap.remove(String)"], "associated_methods": ["StaticBucketMap.containsKey(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the put method followed by the remove method, ensuring the key is added and then removed."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/SingletonMap_entrySetTest.java", "testclass_name": "SingletonMap_entrySetTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertInstanceOf;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import java.util.Set;", "import org.apache.commons.collections4.BoundedMap;", "import org.apache.commons.collections4.KeyValue;", "import org.apache.commons.collections4.OrderedMap;", "import org.apache.commons.collections4.keyvalue.TiedMapEntry;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonMap_entrySetTest", "description": "Unit tests for the entrySet method of the SingletonMap class.", "class_members": {"variables": [{"name": "singletonMap", "type": "SingletonMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEntrySet", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["TiedMapEntry.getKey()", "TiedMapEntry.getValue()"], "external_dependencies": {"modules": ["SingletonMap", "TiedMapEntry", "Map"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method of SingletonMap, ensuring it returns a set with one entry and that the entry is of type TiedMapEntry with the correct key and value."}, {"name": "testEntrySetAfterPut", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["SingletonMap.put(String,String)", "TiedMapEntry.getKey()", "TiedMapEntry.getValue()"], "external_dependencies": {"modules": ["SingletonMap", "TiedMapEntry", "Map"], "class_members": [{"name": "singletonMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the entrySet method of SingletonMap after updating the value, ensuring it returns a set with one entry and that the entry is of type TiedMapEntry with the correct key and updated value."}, {"name": "testEntrySetWithNullKey", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["TiedMapEntry.getKey()", "TiedMapEntry.getValue()"], "external_dependencies": {"modules": ["SingletonMap", "TiedMapEntry", "Map"]}, "category": "unit", "description": "Tests the entrySet method of SingletonMap with a null key, ensuring it returns a set with one entry and that the entry is of type TiedMapEntry with the null key and correct value."}, {"name": "testEntrySetWithNullValue", "primary_tested": ["SingletonMap.entrySet()"], "associated_methods": ["TiedMapEntry.getKey()", "TiedMapEntry.getValue()"], "external_dependencies": {"modules": ["SingletonMap", "TiedMapEntry", "Map"]}, "category": "unit", "description": "Tests the entrySet method of SingletonMap with a null value, ensuring it returns a set with one entry and that the entry is of type TiedMapEntry with the correct key and null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_addAsEqualTest.java", "testclass_name": "FixedOrderComparator_addAsEqualTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FixedOrderComparator_addAsEqualTest", "description": "Unit tests for the addAsEqual method of FixedOrderComparator.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddAsEqual_NewObjectAdded", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAsEqual method when a new object is added successfully."}, {"name": "testAddAsEqual_ExistingObjectNotKnown", "primary_tested": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator", "Arrays"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the addAsEqual method when an existing object is not known, resulting in an IllegalArgumentException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PushbackIterator_pushbackIteratorTest.java", "testclass_name": "PushbackIterator_pushbackIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "PushbackIterator_pushbackIteratorTest", "description": "Unit tests for the PushbackIterator class, specifically focusing on the pushbackIterator method.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPushbackIteratorWithNonNullIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"]}, "category": "unit", "description": "Tests the creation of a PushbackIterator with a non-null Iterator."}, {"name": "testPushbackIteratorWithPushbackIteratorInstance", "primary_tested": ["PushbackIterator.pushbackIterator(PushbackIterator)"], "external_dependencies": {"modules": ["PushbackIterator"]}, "category": "unit", "description": "Tests the creation of a PushbackIterator with an instance of PushbackIterator."}, {"name": "testPushbackIteratorWithNullIterator", "primary_tested": ["PushbackIterator.pushbackIterator(Iterator)"], "external_dependencies": {"modules": ["PushbackIterator", "Iterator"]}, "category": "unit", "description": "Tests the behavior of the pushbackIterator method when a null Iterator is provided, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/BooleanComparator_equalsTest.java", "testclass_name": "BooleanComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.Test;"], "name": "BooleanComparator_equalsTest", "description": "Unit tests for the equals method of the BooleanComparator class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testEqualsWithSameInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equals method with the same instance of BooleanComparator."}, {"name": "testEqualsWithDifferentInstanceSameOrder", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equals method with different instances of BooleanComparator having the same order."}, {"name": "testEqualsWithDifferentInstanceDifferentOrder", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equals method with different instances of BooleanComparator having different orders."}, {"name": "testEqualsWithNonBooleanComparatorInstance", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator", "Object"]}, "category": "unit", "description": "Tests the equals method with a non-BooleanComparator instance."}, {"name": "testEqualsWithNull", "primary_tested": ["BooleanComparator.equals(Object)"], "external_dependencies": {"modules": ["BooleanComparator"]}, "category": "unit", "description": "Tests the equals method with a null reference."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_compareTest.java", "testclass_name": "TransformingComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.apache.commons.collections4.Transformer;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.mockito.Mockito.*;"], "name": "TransformingComparator_compareTest", "description": "Unit tests for the compare method of TransformingComparator.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<Integer, String>"}, {"name": "decorated", "type": "Comparator<String>"}, {"name": "comparator", "type": "TransformingComparator<Integer, String>"}, {"name": "obj1", "type": "Integer"}, {"name": "obj2", "type": "Integer"}, {"name": "transformedValue1", "type": "String"}, {"name": "transformedValue2", "type": "String"}]}, "test_cases": [{"name": "testCompare", "primary_tested": ["TransformingComparator.compare(Integer,Integer)"], "associated_methods": ["Transformer.apply(Integer)", "Comparator.compare(String,String)"], "external_dependencies": {"modules": ["Transformer", "Comparator", "TransformingComparator"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "decorated", "type": "variable"}, {"name": "comparator", "type": "variable"}, {"name": "obj1", "type": "variable"}, {"name": "obj2", "type": "variable"}, {"name": "transformedValue1", "type": "variable"}, {"name": "transformedValue2", "type": "variable"}]}, "category": "unit", "description": "Tests the compare functionality of the TransformingComparator by mocking the transformer and decorated comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/functors/ComparatorPredicate_comparatorPredicateTest.java", "testclass_name": "ComparatorPredicate_comparatorPredicateTest", "dependencies": ["package org.apache.commons.collections4.functors;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ComparatorPredicate_comparatorPredicateTest", "description": "Unit tests for the ComparatorPredicate class, focusing on the comparatorPredicate method.", "class_members": {"variables": [{"name": "object", "type": "Integer"}, {"name": "comparator", "type": "Comparator<Integer>"}, {"name": "criterion", "type": "ComparatorPredicate.Criterion"}]}, "test_cases": [{"name": "testComparatorPredicate_WithNonNullComparatorAndCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["ComparatorPredicate", "Predicate", "Comparator"], "class_members": [{"name": "object", "type": "variable"}, {"name": "comparator", "type": "variable"}, {"name": "criterion", "type": "variable"}]}, "category": "unit", "description": "Tests the comparatorPredicate method with a non-null comparator and criterion."}, {"name": "testComparatorPredicate_WithNullComparator", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["ComparatorPredicate", "Predicate", "Comparator"], "class_members": [{"name": "object", "type": "variable"}, {"name": "comparator", "type": "variable"}, {"name": "criterion", "type": "variable"}]}, "category": "unit", "description": "Tests the comparatorPredicate method with a null comparator, expecting a NullPointerException."}, {"name": "testComparatorPredicate_WithNullCriterion", "primary_tested": ["ComparatorPredicate.comparatorPredicate(Integer,Comparator<Integer>,ComparatorPredicate.Criterion)"], "external_dependencies": {"modules": ["ComparatorPredicate", "Predicate", "Comparator"], "class_members": [{"name": "object", "type": "variable"}, {"name": "comparator", "type": "variable"}, {"name": "criterion", "type": "variable"}]}, "category": "unit", "description": "Tests the comparatorPredicate method with a null criterion, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_containsKeyTest.java", "testclass_name": "CompositeMap_containsKeyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_containsKeyTest", "description": "Unit tests for the containsKey method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testContainsKey_KeyInFirstMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeMap contains a key that is present in the first map."}, {"name": "testContainsKey_KeyInSecondMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeMap contains a key that is present in the second map."}, {"name": "testContainsKey_KeyNotPresent", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeMap does not contain a key that is not present in any map."}, {"name": "testContainsKey_AfterAddingNewMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeMap contains a key after adding a new map to it."}, {"name": "testContainsKey_AfterRemovingKey", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeMap does not contain a key after removing it."}, {"name": "testContainsKey_AfterRemovingCompositedMap", "primary_tested": ["CompositeMap.containsKey(String)"], "associated_methods": ["CompositeMap.removeComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeMap does not contain a key after removing a composited map."}, {"name": "testContainsKey_NullKey", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests if the CompositeMap does not contain a null key."}, {"name": "testContainsKey_EmptyCompositeMap", "primary_tested": ["CompositeMap.containsKey(String)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "description": "Tests if the CompositeMap does not contain a key when it is empty."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/LRUMap_getTest.java", "testclass_name": "LRUMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "LRUMap_getTest", "description": "Unit tests for the get method of LRUMap, focusing on the behavior of retrieving keys with and without updating to the Most Recently Used (MRU) position.", "class_members": {"variables": [{"name": "lruMap", "type": "LRUMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKeyWithUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "associated_methods": ["LRUMap.put(String,String)", "LRUMap.get(String)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an existing key and ensures it updates to the MRU position."}, {"name": "testGetExistingKeyWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "associated_methods": ["LRUMap.put(String,String)", "LRUMap.get(String)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an existing key and ensures it does not update to the MRU position."}, {"name": "testGetNonExistingKey", "primary_tested": ["LRUMap.get(String,boolean)"], "associated_methods": ["LRUMap.put(String,String)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a non-existing key and ensures it returns null."}, {"name": "testGetWithEmptyMap", "primary_tested": ["LRUMap.get(String,boolean)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map and ensures it returns null."}, {"name": "testGetWithFullMapAndUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "associated_methods": ["LRUMap.put(String,String)", "LRUMap.get(String)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a full map and ensures it updates to the MRU position."}, {"name": "testGetWithFullMapWithoutUpdateToMRU", "primary_tested": ["LRUMap.get(String,boolean)"], "associated_methods": ["LRUMap.put(String,String)", "LRUMap.get(String)"], "external_dependencies": {"modules": ["LRUMap"], "class_members": [{"name": "lruMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a full map and ensures it does not update to the MRU position."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_sizeTest.java", "testclass_name": "CompositeMap_sizeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_sizeTest", "description": "Unit tests for the size functionality of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSizeWithInitialMaps", "primary_tested": ["CompositeMap.size()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap with initial maps."}, {"name": "testSizeAfterAddingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after adding another map."}, {"name": "testSizeAfterRemovingMap", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after removing a map."}, {"name": "testSizeAfterAddingKeyValue", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after adding key-value pairs from another map."}, {"name": "testSizeAfterRemovingKeyValue", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.remove(Object)"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after removing a key-value pair."}, {"name": "testSizeAfterClearingMaps", "primary_tested": ["CompositeMap.size()"], "associated_methods": ["CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the size of the CompositeMap after clearing all maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/TransformedSortedMap_headMapTest.java", "testclass_name": "TransformedSortedMap_headMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.SortedMap;", "import java.util.TreeMap;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformedSortedMap_headMapTest", "description": "Unit tests for the headMap functionality of TransformedSortedMap.", "class_members": {"variables": [{"name": "baseMap", "type": "SortedMap<String, String>"}, {"name": "keyTransformer", "type": "Transformer<String, String>"}, {"name": "valueTransformer", "type": "Transformer<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHeadMap", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with a non-empty map."}, {"name": "testHeadMapWithEmptyMap", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with an empty map."}, {"name": "testHeadMapWithNullKey", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with a null key, expecting a NullPointerException."}, {"name": "testHeadMapWithNonExistentKey", "primary_tested": ["TransformedSortedMap.headMap(String)"], "external_dependencies": {"modules": ["TransformedSortedMap", "SortedMap", "TransformerUtils"], "class_members": [{"name": "baseMap", "type": "variable"}, {"name": "keyTransformer", "type": "variable"}, {"name": "valueTransformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the headMap functionality of TransformedSortedMap with a non-existent key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_getTest.java", "testclass_name": "CompositeMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_getTest", "description": "Unit tests for the get method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of CompositeMap for existing keys in the composed maps."}, {"name": "testGetNonExistingKey", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of CompositeMap for a non-existing key."}, {"name": "testGetAfterAddComposited", "primary_tested": ["CompositeMap.get(String)"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of CompositeMap after adding a new map to the composite."}, {"name": "testGetAfterPut", "primary_tested": ["CompositeMap.get(String)"], "external_dependencies": {"modules": ["CompositeMap", "Map", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method of CompositeMap after putting a new key-value pair in one of the composed maps."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_putTest.java", "testclass_name": "MultiKeyMap_putTest", "dependencies": ["package org.apache.commons.collections4.map;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "MultiKeyMap_putTest", "description": "Unit tests for the put functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "map", "type": "MultiKeyMap<String, String>"}, {"name": "key1", "type": "String"}, {"name": "key2", "type": "String"}, {"name": "key3", "type": "String"}, {"name": "key4", "type": "String"}, {"name": "key5", "type": "String"}, {"name": "value", "type": "String"}, {"name": "value1", "type": "String"}, {"name": "value2", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "testPutNewEntry", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "associated_methods": ["MultiKeyMap.get(String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "map", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}, {"name": "key3", "type": "variable"}, {"name": "key4", "type": "variable"}, {"name": "key5", "type": "variable"}, {"name": "value", "type": "variable"}]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap when adding a new entry."}, {"name": "testPutExistingEntry", "primary_tested": ["MultiKeyMap.put(String,String,String,String,String,String)"], "associated_methods": ["MultiKeyMap.get(String,String,String,String,String)"], "external_dependencies": {"modules": ["MultiKeyMap", "MultiKey"], "class_members": [{"name": "map", "type": "variable"}, {"name": "key1", "type": "variable"}, {"name": "key2", "type": "variable"}, {"name": "key3", "type": "variable"}, {"name": "key4", "type": "variable"}, {"name": "key5", "type": "variable"}, {"name": "value1", "type": "variable"}, {"name": "value2", "type": "variable"}]}, "category": "unit", "description": "Tests the put functionality of the MultiKeyMap when updating an existing entry."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiKeyMap_removeAllTest.java", "testclass_name": "MultiKeyMap_removeAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.keyvalue.MultiKey;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiKeyMap_removeAllTest", "description": "Unit tests for the removeAll functionality of the MultiKeyMap class.", "class_members": {"variables": [{"name": "I1", "type": "static final Integer"}, {"name": "I2", "type": "static final Integer"}, {"name": "I3", "type": "static final Integer"}, {"name": "I4", "type": "static final Integer"}, {"name": "I5", "type": "static final Integer"}, {"name": "map", "type": "MultiKeyMap<Integer, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllWithExistingKey", "primary_tested": ["MultiKeyMap.removeAll(Integer)"], "associated_methods": ["MultiKeyMap.put(Integer,Integer,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap", "Integer", "String"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNonExistingKey", "primary_tested": ["MultiKeyMap.removeAll(Integer)"], "associated_methods": ["MultiKeyMap.put(Integer,Integer,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap", "Integer", "String"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a non-existing key in the MultiKeyMap."}, {"name": "testRemoveAllWithNullKey", "primary_tested": ["MultiKeyMap.removeAll(Integer)"], "associated_methods": ["MultiKeyMap.put(Integer,Integer,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap", "Integer", "String"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with a null key in the MultiKeyMap."}, {"name": "testRemoveAllWithEmptyMap", "primary_tested": ["MultiKeyMap.removeAll(Integer)"], "associated_methods": ["MultiKeyMap.size()"], "external_dependencies": {"modules": ["MultiKeyMap", "Integer"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with an empty MultiKeyMap."}, {"name": "testRemoveAllWithMultipleKeys", "primary_tested": ["MultiKeyMap.removeAll(Integer)"], "associated_methods": ["MultiKeyMap.put(Integer,Integer,String)", "MultiKeyMap.size()", "MultiKeyMap.containsKey(Integer,Integer)"], "external_dependencies": {"modules": ["MultiKeyMap", "Integer", "String"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the removeAll functionality with multiple keys in the MultiKeyMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_isEmptyTest.java", "testclass_name": "CompositeMap_isEmptyTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_isEmptyTest", "description": "Unit tests for the isEmpty method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testIsEmptyWhenAllMapsAreEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "external_dependencies": {"modules": ["CompositeMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when all maps in the CompositeMap are empty."}, {"name": "testIsEmptyWhenOneMapIsNotEmpty", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method when one map in the CompositeMap is not empty."}, {"name": "testIsEmptyAfterClear", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.clear()"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after clearing the CompositeMap."}, {"name": "testIsEmptyAfterAddingAndRemovingMap", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)", "CompositeMap.removeComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method after adding and then removing a map from the CompositeMap."}, {"name": "testIsEmptyWithMultipleMaps", "primary_tested": ["CompositeMap.isEmpty()"], "associated_methods": ["CompositeMap.addComposited(Map<String, String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap"], "class_members": [{"name": "compositeMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the isEmpty method with multiple maps in the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/IteratorIterable_iteratorTest.java", "testclass_name": "IteratorIterable_iteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.ResettableIterator;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.mockito.Mockito.*;"], "name": "IteratorIterable_iteratorTest", "description": "Tests for the IteratorIterable class, focusing on the iterator method with different types of iterators.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testIteratorWithResettableIterator", "primary_tested": ["IteratorIterable.iterator()"], "associated_methods": ["ResettableIterator.reset()"], "external_dependencies": {"modules": ["ResettableIterator", "IteratorIterable", "Iterator"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iterator method of IteratorIterable with a ResettableIterator, ensuring the iterator is not null and the reset method is called."}, {"name": "testIteratorWithNonResettableIterator", "primary_tested": ["IteratorIterable.iterator()"], "associated_methods": [], "external_dependencies": {"modules": ["Iterator", "IteratorIterable"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iterator method of IteratorIterable with a non-ResettableIterator, ensuring the iterator is not null and no interactions occur with the mock iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/ComparatorChain_compareTest.java", "testclass_name": "ComparatorChain_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Comparator;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "ComparatorChain_compareTest", "description": "Unit tests for the ComparatorChain class, focusing on the compare method with various configurations of comparators.", "class_members": {"variables": [{"name": "comparatorChain", "type": "ComparatorChain<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompare_SingleComparator_ForwardOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in forward order."}, {"name": "testCompare_SingleComparator_ReverseOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with a single comparator in reverse order."}, {"name": "testCompare_MultipleComparators_MixedOrder", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain", "Comparator"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the compare method with multiple comparators in mixed order."}, {"name": "testCompare_NoComparators_ThrowsException", "primary_tested": ["ComparatorChain.compare(String,String)"], "external_dependencies": {"modules": ["ComparatorChain"], "class_members": [{"name": "comparatorChain", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the compare method throws an exception when no comparators are added."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/MultiValueMap_putAllTest.java", "testclass_name": "MultiValueMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "MultiValueMap_putAllTest", "description": "Unit tests for the putAll method of the MultiValueMap class.", "class_members": {"variables": [{"name": "multiValueMap", "type": "MultiValueMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAll_NewKey", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a new key, ensuring the values are added correctly."}, {"name": "testPutAll_ExistingKey", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with an existing key, ensuring additional values are added correctly."}, {"name": "testPutAll_NullValues", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "external_dependencies": {"modules": ["MultiValueMap"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with null values, ensuring the operation fails and the key is not added."}, {"name": "testPutAll_EmptyValues", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with empty values, ensuring the operation fails and the key is not added."}, {"name": "testPutAll_AfterRemoveMapping", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.removeMapping(String,String)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method after a removeMapping operation, ensuring additional values are added correctly."}, {"name": "testPutAll_WithPut", "primary_tested": ["MultiValueMap.putAll(String,Collection<String>)"], "associated_methods": ["MultiValueMap.put(String,String)"], "external_dependencies": {"modules": ["MultiValueMap", "ArrayList", "Arrays"], "class_members": [{"name": "multiValueMap", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method after a put operation, ensuring additional values are added correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_removeTest.java", "testclass_name": "CollatingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.Iterator;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_removeTest", "description": "Unit tests for the remove functionality of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "collatingIterator", "type": "CollatingIterator<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWithoutNext", "primary_tested": ["CollatingIterator.remove()"], "external_dependencies": {"modules": ["CollatingIterator", "IllegalStateException"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when remove() is called before next()."}, {"name": "testRemoveAfterNext", "primary_tested": ["CollatingIterator.remove()"], "associated_methods": ["CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "Iterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}, {"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the CollatingIterator after next() has been called."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_hashCodeTest.java", "testclass_name": "CompositeMap_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNotEquals;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_hashCodeTest", "description": "Unit tests for the hashCode method of the CompositeMap class.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "map1", "type": "Map<String, String>"}, {"name": "map2", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithEmptyMap", "primary_tested": ["CompositeMap.hashCode()"], "external_dependencies": {"modules": ["CompositeMap"]}, "category": "unit", "description": "Tests the hashCode method of an empty CompositeMap."}, {"name": "testHashCodeWithNonEmptyMap", "primary_tested": ["CompositeMap.hashCode()"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of a non-empty CompositeMap."}, {"name": "testHashCodeAfterAddingMap", "primary_tested": ["CompositeMap.hashCode()"], "associated_methods": ["CompositeMap.addComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method after adding a map to the CompositeMap."}, {"name": "testHashCodeAfterRemovingMap", "primary_tested": ["CompositeMap.hashCode()"], "associated_methods": ["CompositeMap.removeComposited(Map)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method after removing a map from the CompositeMap."}, {"name": "testHashCodeAfterModifyingMap", "primary_tested": ["CompositeMap.hashCode()"], "associated_methods": ["Map.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method after modifying one of the maps in the CompositeMap."}, {"name": "testHashCodeConsistency", "primary_tested": ["CompositeMap.hashCode()"], "associated_methods": ["Map.put(String,String)"], "external_dependencies": {"modules": ["CompositeMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "map1", "type": "variable"}, {"name": "map2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consistency of the hashCode method after modifying the CompositeMap."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator_unmodifiableListIteratorTest.java", "testclass_name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableListIterator_unmodifiableListIteratorTest", "description": "Unit tests for the UnmodifiableListIterator class, specifically focusing on the unmodifiableListIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableListIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of an UnmodifiableListIterator from an unmodifiable iterator."}, {"name": "testUnmodifiableListIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of an UnmodifiableListIterator from a modifiable iterator."}, {"name": "testUnmodifiableListIteratorWithNullIterator", "primary_tested": ["UnmodifiableListIterator.unmodifiableListIterator(ListIterator)"], "external_dependencies": {"modules": ["ListIterator", "UnmodifiableListIterator", "NullPointerException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of the unmodifiableListIterator method when a null iterator is provided."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIterator_nextTest.java", "testclass_name": "ObjectArrayIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectArrayIterator_nextTest", "description": "Unit tests for the next() method of ObjectArrayIterator.", "class_members": {"variables": [{"name": "testArray", "type": "String[]"}, {"name": "iterator", "type": "ObjectArrayIterator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ObjectArrayIterator when there are elements in the array."}, {"name": "testNextWithoutElements", "primary_tested": ["ObjectArrayIterator.next()"], "external_dependencies": {"modules": ["ObjectArrayIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ObjectArrayIterator when there are no more elements in the array, expecting a NoSuchElementException."}, {"name": "testNextAfterReset", "primary_tested": ["ObjectArrayIterator.next()"], "associated_methods": ["ObjectArrayIterator.reset()"], "external_dependencies": {"modules": ["ObjectArrayIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of ObjectArrayIterator after resetting the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_setIteratorTest.java", "testclass_name": "CollatingIterator_setIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "CollatingIterator_setIteratorTest", "description": "Unit tests for the setIterator method of the CollatingIterator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSetIterator_Success", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "org.mockito.Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the successful setting of an iterator in the CollatingIterator."}, {"name": "testSetIterator_NullIterator", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that setting a null iterator in the CollatingIterator throws a NullPointerException."}, {"name": "testSetIterator_IterationStarted", "primary_tested": ["CollatingIterator.setIterator(int,Iterator)"], "associated_methods": ["CollatingIterator.addIterator(Iterator)", "CollatingIterator.next()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "org.mockito.Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that setting an iterator in the CollatingIterator after iteration has started throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_hasNextTest.java", "testclass_name": "BoundedIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "BoundedIterator_hasNextTest", "description": "Unit tests for the hasNext method of the BoundedIterator class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testHasNextWithinBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method of BoundedIterator when the iterator is within bounds."}, {"name": "testHasNextOutOfBounds", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method of BoundedIterator when the iterator is out of bounds."}, {"name": "testHasNextWithNoElements", "primary_tested": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["Iterator", "BoundedIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the hasNext method of BoundedIterator when there are no elements in the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/CompositeMap_putAllTest.java", "testclass_name": "CompositeMap_putAllTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.Map;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CompositeMap_putAllTest", "description": "Unit tests for the putAll method in CompositeMap, including scenarios with and without a mutator, and with modifications like clear and removeComposited.", "class_members": {"variables": [{"name": "compositeMap", "type": "CompositeMap<String, String>"}, {"name": "mapOne", "type": "Map<String, String>"}, {"name": "mapTwo", "type": "Map<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPutAllWithMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)", "CompositeMap.containsKey(Object)", "CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method with a mutator set, ensuring that the new entries are added to the composite map."}, {"name": "testPutAllWithoutMutator", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method without a mutator, expecting an UnsupportedOperationException."}, {"name": "testPutAllWithClear", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["CompositeMap.clear()", "CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)", "CompositeMap.containsKey(Object)", "CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method after clearing the composite map, ensuring that the new entries are added with a mutator set."}, {"name": "testPutAllWithRemoveComposited", "primary_tested": ["CompositeMap.putAll(Map<? extends String, ? extends String>)"], "associated_methods": ["CompositeMap.removeComposited(Map<String, String>)", "CompositeMap.setMutator(CompositeMap.MapMutator<String, String>)", "CompositeMap.containsKey(Object)", "CompositeMap.get(Object)"], "external_dependencies": {"modules": ["CompositeMap", "HashMap", "Map"], "class_members": [{"name": "compositeMap", "type": "variable"}, {"name": "mapOne", "type": "variable"}, {"name": "mapTwo", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the putAll method after removing one of the composited maps, ensuring that the new entries are added with a mutator set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_hashCodeTest.java", "testclass_name": "TransformingComparator_hashCodeTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TransformingComparator_hashCodeTest", "description": "Unit tests for the hashCode method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHashCodeWithNonNullDecoratedAndTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.hashCode()", "Transformer.hashCode()"], "external_dependencies": {"modules": ["TransformingComparator", "Transformer", "TransformerUtils"], "class_members": [{"name": "transformer", "type": "variable"}, {"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with non-null decorated comparator and transformer."}, {"name": "testHashCodeWithNullDecorated", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["Transformer.hashCode()"], "external_dependencies": {"modules": ["TransformingComparator", "Transformer", "TransformerUtils"], "class_members": [{"name": "transformer", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null decorated comparator."}, {"name": "testHashCodeWithNullTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "associated_methods": ["TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null transformer."}, {"name": "testHashCodeWithNullDecoratedAndTransformer", "primary_tested": ["TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hashCode method of TransformingComparator with null decorated comparator and transformer."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PermutationIterator_nextTest.java", "testclass_name": "PermutationIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.HashSet;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.Set;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PermutationIterator_nextTest", "description": "Unit tests for the next method of the PermutationIterator class.", "class_members": {"variables": [{"name": "permutationIterator", "type": "PermutationIterator<Character>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextPermutation", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "Arrays", "List"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of the PermutationIterator to ensure it returns the correct permutations in the expected order."}, {"name": "testNextPermutationThrowsNoSuchElementException", "primary_tested": ["PermutationIterator.next()"], "associated_methods": ["PermutationIterator.hasNext()"], "external_dependencies": {"modules": ["PermutationIterator", "ArrayList", "List", "NoSuchElementException"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the next method of the PermutationIterator throws a NoSuchElementException when called on an empty iterator."}, {"name": "testRemoveNotSupported", "primary_tested": ["PermutationIterator.remove()"], "external_dependencies": {"modules": ["PermutationIterator", "UnsupportedOperationException"], "class_members": [{"name": "permutationIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove method of the PermutationIterator throws an UnsupportedOperationException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_nextTest.java", "testclass_name": "FilterListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_nextTest", "description": "Unit tests for the next() method of FilterListIterator.", "class_members": {"variables": [{"name": "list", "type": "ArrayList<Integer>"}, {"name": "fours", "type": "ArrayList<Integer>"}, {"name": "fourPred", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithValidElement", "primary_tested": ["FilterListIterator.next()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterListIterator when there is a valid element."}, {"name": "testNextWithNoValidElement", "primary_tested": ["FilterListIterator.next()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterListIterator when there are no valid elements, expecting a NoSuchElementException."}, {"name": "testNextWithMultipleValidElements", "primary_tested": ["FilterListIterator.next()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate", "ListIterator"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fours", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterListIterator when there are multiple valid elements."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_peekingIteratorTest.java", "testclass_name": "PeekingIterator_peekingIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "PeekingIterator_peekingIteratorTest", "description": "Unit tests for the PeekingIterator class, specifically focusing on the peekingIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPeekingIteratorWithNullIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator)"], "external_dependencies": {"modules": ["PeekingIterator", "NullPointerException"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a NullPointerException is thrown when a null iterator is passed to the peekingIterator method."}, {"name": "testPeekingIteratorWithNonPeekingIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator)"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a new PeekingIterator instance is created when a non-peeking iterator is passed to the peekingIterator method."}, {"name": "testPeekingIteratorWithPeekingIterator", "primary_tested": ["PeekingIterator.peekingIterator(Iterator)"], "external_dependencies": {"modules": ["PeekingIterator", "Mockito"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the same PeekingIterator instance is returned when a PeekingIterator is passed to the peekingIterator method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_setTest.java", "testclass_name": "SingletonListIterator_setTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_setTest", "description": "Unit tests for the set method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testSetSuccess", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful setting of a new value after calling next."}, {"name": "testSetWithoutNextCall", "primary_tested": ["SingletonListIterator.set(Object)"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a value without calling next throws an IllegalStateException."}, {"name": "testSetAfterRemove", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a value after calling remove throws an IllegalStateException."}, {"name": "testSetAfterReset", "primary_tested": ["SingletonListIterator.set(Object)"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that setting a value after calling reset throws an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_getIteratorIndexTest.java", "testclass_name": "CollatingIterator_getIteratorIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Comparator;", "import java.util.Iterator;", "import org.apache.commons.collections4.comparators.ComparableComparator;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "CollatingIterator_getIteratorIndexTest", "description": "Unit tests for the getIteratorIndex method of the CollatingIterator class.", "class_members": {"variables": [{"name": "comparator", "type": "Comparator<Integer>"}, {"name": "evens", "type": "ArrayList<Integer>"}, {"name": "collatingIterator", "type": "CollatingIterator<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetIteratorIndexSuccess", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "Comparator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method when a value has been returned by the iterator."}, {"name": "testGetIteratorIndexNoValueReturnedYet", "primary_tested": ["CollatingIterator.getIteratorIndex()"], "external_dependencies": {"modules": ["CollatingIterator", "ArrayList", "Comparator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the getIteratorIndex method when no value has been returned by the iterator, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_addIteratorTest.java", "testclass_name": "CollatingIterator_addIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CollatingIterator_addIteratorTest", "description": "Unit tests for the addIterator method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testAddIterator_Success", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.getIterators()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful addition of an iterator to the CollatingIterator."}, {"name": "testAddIterator_NullIterator", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior when a null iterator is added to the CollatingIterator, expecting a NullPointerException."}, {"name": "testAddIterator_AfterStart", "primary_tested": ["CollatingIterator.addIterator(Iterator<Integer>)"], "associated_methods": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator", "Iterator", "Arrays"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of adding an iterator after the CollatingIterator has started, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIterator_removeTest.java", "testclass_name": "ObjectGraphIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ObjectGraphIterator_removeTest", "description": "Unit tests for the remove functionality of the ObjectGraphIterator class.", "class_members": {"variables": [{"name": "list1", "type": "List<String>"}, {"name": "list2", "type": "List<String>"}, {"name": "list3", "type": "List<String>"}, {"name": "iteratorList", "type": "List<Iterator<String>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveWithoutNext", "primary_tested": ["ObjectGraphIterator.remove()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Iterator"], "class_members": [{"name": "iteratorList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove on ObjectGraphIterator without calling next throws an IllegalStateException."}, {"name": "testRemoveAfterNext", "primary_tested": ["ObjectGraphIterator.remove()"], "associated_methods": ["ObjectGraphIterator.hasNext()", "ObjectGraphIterator.next()"], "external_dependencies": {"modules": ["ObjectGraphIterator", "Iterator"], "class_members": [{"name": "iteratorList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling remove on ObjectGraphIterator after calling next successfully removes an element."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator_unmodifiableMapIteratorTest.java", "testclass_name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.MapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "UnmodifiableMapIterator_unmodifiableMapIteratorTest", "description": "Unit tests for the UnmodifiableMapIterator class, focusing on the unmodifiableMapIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "MockUnmodifiableMapIterator", "description": "Mock implementation of UnmodifiableMapIterator for testing"}, {"name": "HashMapIterator", "description": "Mock implementation of MapIterator for testing"}]}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": [{"name": "mockIterator", "type": "variable"}]}, "category": "unit", "description": "Tests the unmodifiableMapIterator method with an unmodifiable iterator, ensuring the same instance is returned."}, {"name": "testUnmodifiableMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "external_dependencies": {"modules": ["Map", "HashMap", "MapIterator", "UnmodifiableMapIterator"], "class_members": [{"name": "map", "type": "variable"}, {"name": "modifiableIterator", "type": "variable"}]}, "category": "unit", "description": "Tests the unmodifiableMapIterator method with a modifiable iterator, ensuring an UnmodifiableMapIterator instance is returned."}, {"name": "testUnmodifiableMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableMapIterator.unmodifiableMapIterator(MapIterator)"], "external_dependencies": {"modules": ["MapIterator", "UnmodifiableMapIterator"], "class_members": [{"name": "nullIterator", "type": "variable"}]}, "category": "unit", "description": "Tests the unmodifiableMapIterator method with a null iterator, ensuring a NullPointerException is thrown."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_previousTest.java", "testclass_name": "SingletonListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_previousTest", "description": "Unit tests for the previous method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousSuccess", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "Object"], "class_members": [{"name": "iterator", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful retrieval of the previous element after moving to the next element."}, {"name": "testPreviousBeforeFirst", "primary_tested": ["SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling previous before moving to the first element throws NoSuchElementException."}, {"name": "testPreviousAfterRemove", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling previous after removing the element throws NoSuchElementException."}, {"name": "testPreviousAfterReset", "primary_tested": ["SingletonListIterator.previous()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that calling previous after resetting the iterator throws NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextIndexTest.java", "testclass_name": "LoopingListIterator_nextIndexTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextIndexTest", "description": "Unit tests for the nextIndex method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextIndexWithElements", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method with a list containing elements."}, {"name": "testNextIndexWithEmptyList", "primary_tested": ["LoopingListIterator.nextIndex()"], "external_dependencies": {"modules": ["LoopingListIterator", "List", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the nextIndex method with an empty list, expecting a NoSuchElementException."}, {"name": "testNextIndexAfterReset", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method after resetting the iterator."}, {"name": "testNextIndexAfterFullIteration", "primary_tested": ["LoopingListIterator.nextIndex()"], "associated_methods": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "List"], "class_members": [{"name": "loopingListIterator", "type": "variable"}, {"name": "list", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the nextIndex method after completing a full iteration through the list."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest.java", "testclass_name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.apache.commons.collections4.OrderedMapIterator;", "import org.apache.commons.collections4.Unmodifiable;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.mockito.Mockito.*;"], "name": "UnmodifiableOrderedMapIterator_unmodifiableOrderedMapIteratorTest", "description": "Unit tests for the UnmodifiableOrderedMapIterator class, specifically testing the unmodifiableOrderedMapIterator method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnmodifiableOrderedMapIteratorWithUnmodifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with an unmodifiable iterator, ensuring the result is an instance of UnmodifiableOrderedMapIterator."}, {"name": "testUnmodifiableOrderedMapIteratorWithModifiableIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with a modifiable iterator, ensuring the result is an instance of UnmodifiableOrderedMapIterator."}, {"name": "testUnmodifiableOrderedMapIteratorWithNullIterator", "primary_tested": ["UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(OrderedMapIterator)"], "external_dependencies": {"modules": ["OrderedMapIterator", "UnmodifiableOrderedMapIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the unmodifiableOrderedMapIterator method with a null iterator, expecting a NullPointerException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/LoopingListIterator_nextTest.java", "testclass_name": "LoopingListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "LoopingListIterator_nextTest", "description": "Unit tests for the next() method of the LoopingListIterator class.", "class_members": {"variables": [{"name": "loopingListIterator", "type": "LoopingListIterator<String>"}, {"name": "list", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of LoopingListIterator with elements in the list, ensuring it loops back to the start."}, {"name": "testNextWithEmptyList", "primary_tested": ["LoopingListIterator.next()"], "external_dependencies": {"modules": ["LoopingListIterator", "NoSuchElementException"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of LoopingListIterator with an empty list, expecting a NoSuchElementException."}, {"name": "testNextWithReset", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.reset()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of LoopingListIterator after resetting the iterator, ensuring it starts from the beginning."}, {"name": "testNextWithHasNext", "primary_tested": ["LoopingListIterator.next()"], "associated_methods": ["LoopingListIterator.hasNext()"], "external_dependencies": {"modules": ["LoopingListIterator"], "class_members": [{"name": "loopingListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of LoopingListIterator in conjunction with the hasNext() method, ensuring it loops correctly."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_removeTest.java", "testclass_name": "PeekingIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_removeTest", "description": "Unit tests for the remove functionality of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAfterNext", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.hasNext()", "PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator after calling next."}, {"name": "testRemoveWithoutPeekOrElement", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator without calling peek or element, expecting an IllegalStateException."}, {"name": "testRemoveAfterPeek", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.hasNext()", "PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator after calling peek, expecting an IllegalStateException."}, {"name": "testRemoveAfterElement", "primary_tested": ["PeekingIterator.remove()"], "associated_methods": ["PeekingIterator.hasNext()", "PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Arrays"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the remove functionality of the PeekingIterator after calling element, expecting an IllegalStateException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_equalsTest.java", "testclass_name": "FixedOrderComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_equalsTest", "description": "Unit tests for the equals method of the FixedOrderComparator class.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameInstance", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEqualsNull", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an object of a different class."}, {"name": "testEqualsDifferentCounter", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different counter."}, {"name": "testEqualsDifferentIsLocked", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different lock status."}, {"name": "testEqualsDifferentMap", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different map."}, {"name": "testEqualsDifferentUnknownObjectBehavior", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a comparator having a different unknown object behavior."}, {"name": "testEqualsIdentical", "primary_tested": ["FixedOrderComparator.equals(Object)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with an identical comparator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_getTest.java", "testclass_name": "StaticBucketMap_getTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_getTest", "description": "Unit tests for the get method of StaticBucketMap.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testGetExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for an existing key in the map."}, {"name": "testGetNonExistingKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a non-existing key in the map."}, {"name": "testGetNullKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method for a null key in the map."}, {"name": "testGetAfterRemove", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method after removing a key from the map."}, {"name": "testGetWithMultipleEntries", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with multiple entries in the map."}, {"name": "testGetWithSameHashDifferentKey", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that hash to the same bucket but are different."}, {"name": "testGetWithCollision", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with keys that collide and hash to the same bucket."}, {"name": "testGetWithNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null value in the map."}, {"name": "testGetWithNullKeyAndNullValue", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with a null key and null value in the map."}, {"name": "testGetWithEmptyMap", "primary_tested": ["StaticBucketMap.get(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with an empty map."}, {"name": "testGetWithConcurrentModification", "primary_tested": ["StaticBucketMap.get(String)"], "associated_methods": ["StaticBucketMap.remove(String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the get method with concurrent modification by removing a key."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/map/StaticBucketMap_equalsTest.java", "testclass_name": "StaticBucketMap_equalsTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "StaticBucketMap_equalsTest", "description": "Unit tests for the equals method of the StaticBucketMap class.", "class_members": {"variables": [{"name": "map", "type": "StaticBucketMap<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentType", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a different type."}, {"name": "testEquals_EmptyMaps", "primary_tested": ["StaticBucketMap.equals(Object)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two empty maps."}, {"name": "testEquals_NonEmptyMapsEqual", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps that are equal."}, {"name": "testEquals_NonEmptyMapsNotEqual", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two non-empty maps that are not equal."}, {"name": "testEquals_DifferentSizeMaps", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with two maps of different sizes."}, {"name": "testEquals_NullKey", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null key."}, {"name": "testEquals_NullValue", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null value."}, {"name": "testEquals_NullKeyAndValue", "primary_tested": ["StaticBucketMap.equals(Object)"], "associated_methods": ["StaticBucketMap.put(String,String)"], "external_dependencies": {"modules": ["StaticBucketMap"], "class_members": [{"name": "map", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method with a null key and null value."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/NodeListIterator_nextTest.java", "testclass_name": "NodeListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.easymock.EasyMock.createMock;", "import static org.easymock.EasyMock.expect;", "import static org.easymock.EasyMock.replay;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Element;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.w3c.dom.Text;"], "name": "NodeListIterator_nextTest", "description": "Unit tests for the next() method of the NodeListIterator class.", "class_members": {"variables": [{"name": "nodeListIterator", "type": "NodeListIterator"}, {"name": "nodes", "type": "Node[]"}, {"name": "createIteratorWithStandardConstr", "type": "boolean"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithElements", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["NodeList.getLength()", "NodeList.item(int)"], "external_dependencies": {"modules": ["NodeListIterator", "NodeList", "Node"], "class_members": [{"name": "nodeListIterator", "type": "variable"}, {"name": "nodes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when there are elements in the NodeList."}, {"name": "testNextWithNoElements", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["NodeList.getLength()"], "external_dependencies": {"modules": ["NodeListIterator", "NodeList"], "class_members": [{"name": "nodeListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when there are no elements in the NodeList, expecting a NoSuchElementException."}, {"name": "testNextWithNodeConstructor", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["Node.getChildNodes()", "NodeList.getLength()", "NodeList.item(int)"], "external_dependencies": {"modules": ["NodeListIterator", "Node", "NodeList"], "class_members": [{"name": "nodeListIterator", "type": "variable"}, {"name": "nodes", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when initialized with a Node, expecting elements in the NodeList."}, {"name": "testNextWithNodeConstructorNoElements", "primary_tested": ["NodeListIterator.next()"], "associated_methods": ["Node.getChildNodes()", "NodeList.getLength()"], "external_dependencies": {"modules": ["NodeListIterator", "Node", "NodeList"], "class_members": [{"name": "nodeListIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of NodeListIterator when initialized with a Node, expecting no elements in the NodeList and a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/TransformingComparator_equalsTest.java", "testclass_name": "TransformingComparator_equalsTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.apache.commons.collections4.Transformer;", "import org.apache.commons.collections4.TransformerUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "TransformingComparator_equalsTest", "description": "Unit tests for the equals method of the TransformingComparator class.", "class_members": {"variables": [{"name": "transformer", "type": "Transformer<String, String>"}, {"name": "comparator1", "type": "TransformingComparator<String, String>"}, {"name": "comparator2", "type": "TransformingComparator<String, String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testEqualsSameObject", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing the same object."}, {"name": "testEqualsNullObject", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with a null object."}, {"name": "testEqualsDifferentClass", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing with an object of a different class."}, {"name": "testEqualsSameAttributes", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing two objects with the same attributes."}, {"name": "testEqualsDifferentTransformer", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator", "TransformerUtils"], "class_members": [{"name": "comparator1", "type": "variable"}], "project_specific_resources": ["TransformerUtils.constantTransformer(String)"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with different transformers."}, {"name": "testEqualsDifferentDecorated", "primary_tested": ["TransformingComparator.equals(Object)"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the equals method when comparing objects with different decorated comparators."}, {"name": "testEqualsHashCodeConsistency", "primary_tested": ["TransformingComparator.equals(Object)", "TransformingComparator.hashCode()"], "external_dependencies": {"modules": ["TransformingComparator"], "class_members": [{"name": "comparator1", "type": "variable"}, {"name": "comparator2", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the consistency between the equals method and the hashCode method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_elementTest.java", "testclass_name": "PeekingIterator_elementTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_elementTest", "description": "Unit tests for the PeekingIterator class, focusing on the element() method.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testElementWithValidIterator", "primary_tested": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element() method when the iterator is valid and has elements."}, {"name": "testElementWithExhaustedIterator", "primary_tested": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element() method when the iterator is exhausted and throws NoSuchElementException."}, {"name": "testElementAfterPeek", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element() method after a peek() operation."}, {"name": "testElementAfterNext", "primary_tested": ["PeekingIterator.element()"], "associated_methods": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the element() method after a next() operation."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/BoundedIterator_nextTest.java", "testclass_name": "BoundedIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "BoundedIterator_nextTest", "description": "Unit tests for the next method of the BoundedIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithinBounds", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator within the bounds."}, {"name": "testNextOutOfBounds", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator when out of bounds, expecting a NoSuchElementException."}, {"name": "testNextWithOffsetGreaterThanSize", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator with an offset greater than the size of the list, expecting a NoSuchElementException."}, {"name": "testNextWithMaxZero", "primary_tested": ["BoundedIterator.next()"], "associated_methods": ["BoundedIterator.hasNext()"], "external_dependencies": {"modules": ["BoundedIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of BoundedIterator with max set to zero, expecting a NoSuchElementException."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterIterator_nextTest.java", "testclass_name": "FilterIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.apache.commons.collections4.functors.TruePredicate.truePredicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.apache.commons.collections4.functors.NotNullPredicate;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.AfterEach;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterIterator_nextTest", "description": "Unit tests for the next() method of the FilterIterator class.", "class_members": {"variables": [{"name": "iterator", "type": "FilterIterator<String>"}, {"name": "array", "type": "String[]"}], "methods": [{"name": "initIterator", "signature": "void initIterator()"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithValidElement", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator", "TruePredicate"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterIterator with valid elements."}, {"name": "testNextWithNoSuchElementException", "primary_tested": ["FilterIterator.next()"], "external_dependencies": {"modules": ["FilterIterator", "TruePredicate", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the next() method of FilterIterator when NoSuchElementException is expected."}, {"name": "testNextAfterHasNext", "primary_tested": ["FilterIterator.next()"], "associated_methods": ["FilterIterator.hasNext()"], "external_dependencies": {"modules": ["FilterIterator", "TruePredicate", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next() method of FilterIterator after checking hasNext()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/ZippingIterator_hasNextTest.java", "testclass_name": "ZippingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "ZippingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the ZippingIterator class.", "class_members": {"variables": [{"name": "evens", "type": "List<Integer>"}, {"name": "odds", "type": "List<Integer>"}, {"name": "fib", "type": "List<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithSingleIterator", "primary_tested": ["ZippingIterator.hasNext()"], "associated_methods": ["ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with a single iterator."}, {"name": "testHasNextWithMultipleIterators", "primary_tested": ["ZippingIterator.hasNext()"], "associated_methods": ["ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}, {"name": "odds", "type": "variable"}, {"name": "fib", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with multiple iterators."}, {"name": "testHasNextWithExhaustedIterator", "primary_tested": ["ZippingIterator.hasNext()"], "associated_methods": ["ZippingIterator.next()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"], "class_members": [{"name": "evens", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with an exhausted iterator."}, {"name": "testHasNextWithAllExhaustedIterators", "primary_tested": ["ZippingIterator.hasNext()"], "external_dependencies": {"modules": ["ZippingIterator", "List", "Iterator"]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method with all exhausted iterators."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/CollatingIterator_hasNextTest.java", "testclass_name": "CollatingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Comparator;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "CollatingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the CollatingIterator class.", "class_members": {"variables": [{"name": "collatingIterator", "type": "CollatingIterator<Integer>"}, {"name": "iterators", "type": "List<Iterator<Integer>>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNext_WithNoIterators", "primary_tested": ["CollatingIterator.hasNext()"], "external_dependencies": {"modules": ["CollatingIterator"], "class_members": [{"name": "collatingIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when no iterators are added to the CollatingIterator."}, {"name": "testHasNext_WithEmptyIterators", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}, {"name": "iterators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when empty iterators are added to the CollatingIterator."}, {"name": "testHasNext_WithNonEmptyIterators", "primary_tested": ["CollatingIterator.hasNext()"], "associated_methods": ["CollatingIterator.addIterator(Iterator<Integer>)"], "external_dependencies": {"modules": ["CollatingIterator", "Arrays", "List"], "class_members": [{"name": "collatingIterator", "type": "variable"}, {"name": "iterators", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when non-empty iterators are added to the CollatingIterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_hasNextTest.java", "testclass_name": "PeekingIterator_hasNextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.Collections;"], "name": "PeekingIterator_hasNextTest", "description": "Unit tests for the hasNext method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}], "methods": [{"name": "setUp", "signature": "void setUp() throws Exception"}, {"name": "makeObject", "signature": "PeekingIterator<String> makeObject()"}, {"name": "validate", "signature": "void validate(Iterator<String> iter, String... items)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextWithElements", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method when there are elements in the iterator."}, {"name": "testHasNextWithNoElements", "primary_tested": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "Collections", "Iterator"]}, "category": "unit", "description": "Tests the hasNext method when there are no elements in the iterator."}, {"name": "testHasNextAfterPeek", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after calling peek on the iterator."}, {"name": "testHasNextAfterElement", "primary_tested": ["PeekingIterator.hasNext()"], "associated_methods": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}, {"name": "makeObject", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the hasNext method after calling element on the iterator."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonIterator_removeTest.java", "testclass_name": "SingletonIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonIterator_removeTest", "description": "Unit tests for the remove functionality of the SingletonIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the iterator can remove the element when allowed."}, {"name": "testRemoveNotAllowed", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests that the iterator throws UnsupportedOperationException when removal is not allowed."}, {"name": "testRemoveBeforeNext", "primary_tested": ["SingletonIterator.remove()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the iterator throws IllegalStateException when remove is called before next."}, {"name": "testRemoveAfterAlreadyRemoved", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the iterator throws IllegalStateException when remove is called after the element has already been removed."}, {"name": "testRemoveAfterReset", "primary_tested": ["SingletonIterator.remove()"], "associated_methods": ["SingletonIterator.next()", "SingletonIterator.reset()"], "external_dependencies": {"modules": ["SingletonIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the iterator throws IllegalStateException when remove is called after the iterator has been reset."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/PeekingIterator_nextTest.java", "testclass_name": "PeekingIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "PeekingIterator_nextTest", "description": "Unit tests for the next method of the PeekingIterator class.", "class_members": {"variables": [{"name": "testList", "type": "List<String>"}, {"name": "testArray", "type": "static final String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextWithPeek", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator while using peek."}, {"name": "testNextWithoutPeek", "primary_tested": ["PeekingIterator.next()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator without using peek."}, {"name": "testNextThrowsNoSuchElementException", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.hasNext()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator", "NoSuchElementException"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the next method of PeekingIterator throws NoSuchElementException when there are no more elements."}, {"name": "testNextAfterElement", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.element()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after accessing the current element."}, {"name": "testNextAfterPeek", "primary_tested": ["PeekingIterator.next()"], "associated_methods": ["PeekingIterator.peek()"], "external_dependencies": {"modules": ["PeekingIterator", "List", "Iterator"], "class_members": [{"name": "testList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method of PeekingIterator after using peek."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_nextTest.java", "testclass_name": "SingletonListIterator_nextTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import java.util.NoSuchElementException;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_nextTest", "description": "Unit tests for the next method of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testNextSuccess", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.hasNext()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful iteration and value retrieval using the next method."}, {"name": "testNextAfterReset", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.hasNext()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after resetting the iterator."}, {"name": "testNextAfterRemove", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.hasNext()", "SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after removing an element from the iterator."}, {"name": "testNextWithoutHasNext", "primary_tested": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method without checking hasNext, expecting a NoSuchElementException."}, {"name": "testNextAfterPrevious", "primary_tested": ["SingletonListIterator.next()"], "associated_methods": ["SingletonListIterator.hasNext()", "SingletonListIterator.previous()"], "external_dependencies": {"modules": ["SingletonListIterator", "NoSuchElementException"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the next method after moving back using the previous method."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/comparators/FixedOrderComparator_compareTest.java", "testclass_name": "FixedOrderComparator_compareTest", "dependencies": ["package org.apache.commons.collections4.comparators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.Arrays;", "import java.util.LinkedList;", "import org.apache.commons.lang3.ArrayUtils;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FixedOrderComparator_compareTest", "description": "Unit tests for the compare method of FixedOrderComparator.", "class_members": {"variables": [{"name": "comparator", "type": "FixedOrderComparator<String>"}, {"name": "topCities", "type": "String[]"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testCompareKnownObjects", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the comparison of known objects in FixedOrderComparator."}, {"name": "testCompareUnknownObjectBehaviorException", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of FixedOrderComparator when comparing unknown objects, expecting an exception."}, {"name": "testCompareUnknownObjectBehaviorBefore", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of FixedOrderComparator when comparing unknown objects set to be placed before known objects."}, {"name": "testCompareUnknownObjectBehaviorAfter", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the behavior of FixedOrderComparator when comparing unknown objects set to be placed after known objects."}, {"name": "testAddAndCompare", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.add(String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an unknown object to FixedOrderComparator and then comparing it."}, {"name": "testAddAsEqualAndCompare", "primary_tested": ["FixedOrderComparator.compare(String,String)"], "associated_methods": ["FixedOrderComparator.addAsEqual(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests adding an unknown object as equal to a known object in FixedOrderComparator and then comparing it."}, {"name": "testIsLocked", "primary_tested": ["FixedOrderComparator.isLocked()"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the locking behavior of FixedOrderComparator after a comparison."}, {"name": "testSetUnknownObjectBehaviorLocked", "primary_tested": ["FixedOrderComparator.setUnknownObjectBehavior(UnknownObjectBehavior)"], "associated_methods": ["FixedOrderComparator.compare(String,String)"], "external_dependencies": {"modules": ["FixedOrderComparator"], "class_members": [{"name": "comparator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests setting the unknown object behavior of a locked FixedOrderComparator, expecting an exception."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_removeTest.java", "testclass_name": "SingletonListIterator_removeTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_removeTest", "description": "Unit tests for the remove functionality of SingletonListIterator.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element after calling next."}, {"name": "testRemoveWithoutNextCall", "primary_tested": ["SingletonListIterator.remove()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when remove is called without calling next first."}, {"name": "testRemoveTwice", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when remove is called twice in a row."}, {"name": "testRemoveAfterReset", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.reset()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that an IllegalStateException is thrown when remove is called after reset."}, {"name": "testRemoveAfterSet", "primary_tested": ["SingletonListIterator.remove()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.set(Object)"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of an element after calling set."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/SingletonListIterator_resetTest.java", "testclass_name": "SingletonListIterator_resetTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.*;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "SingletonListIterator_resetTest", "description": "Unit tests for the reset functionality of the SingletonListIterator class.", "class_members": {"variables": [{"name": "testValue", "type": "static final Object"}, {"name": "iterator", "type": "SingletonListIterator<Object>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testResetAfterInitialization", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality immediately after initialization."}, {"name": "testResetAfterNextCall", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality after calling next()."}, {"name": "testResetAfterRemove", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.remove()", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality after calling remove()."}, {"name": "testResetAfterSet", "primary_tested": ["SingletonListIterator.reset()"], "associated_methods": ["SingletonListIterator.next()", "SingletonListIterator.set(Object)", "SingletonListIterator.hasNext()", "SingletonListIterator.hasPrevious()", "SingletonListIterator.nextIndex()", "SingletonListIterator.previousIndex()"], "external_dependencies": {"modules": ["SingletonListIterator"], "class_members": [{"name": "iterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the reset functionality after calling set()."}]}, {"file_path": "src/test/java/org/apache/commons/collections4/iterators/FilterListIterator_previousTest.java", "testclass_name": "FilterListIterator_previousTest", "dependencies": ["package org.apache.commons.collections4.iterators;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.ArrayList;", "import java.util.ListIterator;", "import java.util.NoSuchElementException;", "import org.apache.commons.collections4.Predicate;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;"], "name": "FilterListIterator_previousTest", "description": "Unit tests for the previous method of FilterListIterator with various predicates.", "class_members": {"variables": [{"name": "list", "type": "ArrayList<Integer>"}, {"name": "truePred", "type": "Predicate<Integer>"}, {"name": "falsePred", "type": "Predicate<Integer>"}, {"name": "evenPred", "type": "Predicate<Integer>"}, {"name": "oddPred", "type": "Predicate<Integer>"}, {"name": "threePred", "type": "Predicate<Integer>"}, {"name": "fourPred", "type": "Predicate<Integer>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPreviousWithTruePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "truePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a true predicate, expecting the first element."}, {"name": "testPreviousWithFalsePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate", "NoSuchElementException"], "class_members": [{"name": "list", "type": "variable"}, {"name": "falsePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a false predicate, expecting a NoSuchElementException."}, {"name": "testPreviousWithEvenPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "evenPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with an even predicate, expecting the first even element."}, {"name": "testPreviousWithOddPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "oddPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with an odd predicate, expecting the first odd element."}, {"name": "testPreviousWithThreePredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "threePred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a predicate for multiples of 3, expecting the first multiple of 3."}, {"name": "testPreviousWithFourPredicate", "primary_tested": ["FilterListIterator.previous()"], "external_dependencies": {"modules": ["FilterListIterator", "ArrayList", "Predicate"], "class_members": [{"name": "list", "type": "variable"}, {"name": "fourPred", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the previous method with a predicate for multiples of 4, expecting the first multiple of 4."}]}]