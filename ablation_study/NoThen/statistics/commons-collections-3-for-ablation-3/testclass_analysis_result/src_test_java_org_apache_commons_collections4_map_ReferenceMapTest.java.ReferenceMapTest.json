{"file_path": "src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java", "testclass_name": "ReferenceMapTest", "dependencies": ["package org.apache.commons.collections4.map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.fail;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.IOException;", "import java.io.ObjectInputStream;", "import java.io.ObjectOutputStream;", "import java.io.Serializable;", "import java.lang.ref.WeakReference;", "import java.util.ArrayList;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.function.Consumer;", "import org.apache.commons.collections4.map.AbstractHashedMap.HashEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceEntry;", "import org.apache.commons.collections4.map.AbstractReferenceMap.ReferenceStrength;", "import org.junit.jupiter.api.Test;"], "name": "ReferenceMapTest", "description": "Unit tests for the ReferenceMap class, focusing on various functionalities such as purging, serialization, and iterator behavior.", "class_members": {"variables": [{"name": "keyReference", "type": "WeakReference<K>"}, {"name": "valueReference", "type": "WeakReference<V>"}], "methods": [{"name": "buildRefMap", "signature": "Map<K, V> buildRefMap()"}, {"name": "gc", "signature": "void gc()"}], "nested_classes": [{"name": "AccessibleEntry", "description": "Internal helper class extending ReferenceEntry to provide custom purge behavior."}]}, "fixtures": [], "test_cases": [{"name": "testCustomPurge", "primary_tested": ["ReferenceMap.createEntry(HashEntry<Integer, Integer>,int,Integer,Integer)"], "associated_methods": ["AccessibleEntry.onPurge()"], "external_dependencies": {"modules": ["ReferenceMap", "AccessibleEntry", "ArrayList", "Consumer", "Serializable"], "class_members": [{"name": "AccessibleEntry", "type": "nested_class"}]}, "category": "unit", "description": "Tests custom purge behavior by checking if expired values are added to a list."}, {"name": "testDataSizeAfterSerialization", "primary_tested": ["ReferenceMap.size()"], "associated_methods": ["ReferenceMap.put(String,String)", "ReferenceMap.data.length"], "external_dependencies": {"modules": ["ReferenceMap", "ByteArrayOutputStream", "ObjectOutputStream", "ByteArrayInputStream", "ObjectInputStream"]}, "category": "unit", "description": "Tests whether the 'data' HashEntry array size remains the same after serialization."}, {"name": "testIteratorLastEntryCanBeRemovedAfterHasNext", "primary_tested": ["ReferenceMap.entrySet().iterator()"], "associated_methods": ["ReferenceMap.put(Integer,Integer)", "ReferenceMap.isEmpty()"], "external_dependencies": {"modules": ["ReferenceMap", "Iterator", "Map.Entry"]}, "category": "unit", "description": "Tests whether the last entry can be removed after calling hasNext on the iterator."}, {"name": "testNullHandling", "primary_tested": ["ReferenceMap.get(null)", "ReferenceMap.containsKey(null)", "ReferenceMap.containsValue(null)", "ReferenceMap.remove(null)", "ReferenceMap.entrySet().contains(null)", "ReferenceMap.put(null,null)", "ReferenceMap.put(Object,null)", "ReferenceMap.put(null,Object)"], "external_dependencies": {"modules": ["ReferenceMap", "NullPointerException"]}, "category": "unit", "description": "Tests the handling of null values and keys in the ReferenceMap."}, {"name": "testPurgeValues", "primary_tested": ["ReferenceMap.isEmpty()"], "associated_methods": ["ReferenceMap.buildRefMap()"], "external_dependencies": {"modules": ["ReferenceMap", "WeakReference"], "class_members": [{"name": "buildRefMap", "type": "method"}]}, "category": "unit", "description": "Tests whether the purge values setting works by checking if references are released after garbage collection."}]}