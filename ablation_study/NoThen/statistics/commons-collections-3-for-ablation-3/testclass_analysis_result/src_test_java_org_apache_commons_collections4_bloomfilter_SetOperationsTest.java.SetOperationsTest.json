{"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/SetOperationsTest.java", "testclass_name": "SetOperationsTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import java.util.function.ToDoubleBiFunction;", "import java.util.function.ToIntBiFunction;", "import org.junit.jupiter.api.Test;"], "name": "SetOperationsTest", "description": "Unit tests for various set operations on BloomFilter objects.", "class_members": {"variables": [{"name": "shape", "type": "Shape"}], "methods": [{"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(double, ToDoubleBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "assertSymmetricOperation", "signature": "static void assertSymmetricOperation(int, ToIntBiFunction<BloomFilter, BloomFilter>, BloomFilter, BloomFilter)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, Hasher)"}, {"name": "createFilter", "signature": "BloomFilter createFilter(Shape, IndexExtractor)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAndCardinality", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects."}, {"name": "testAndCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.andCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the AND cardinality operation on BloomFilter objects with different lengths."}, {"name": "testCommutativityOnMismatchedSizes", "primary_tested": ["SetOperations.orCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.xorCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.andCardinality(BitMapExtractor,BitMapExtractor)", "SetOperations.hammingDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.cosineSimilarity(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardDistance(BitMapExtractor,BitMapExtractor)", "SetOperations.jaccardSimilarity(BitMapExtractor,BitMapExtractor)"], "external_dependencies": {"modules": ["BitMapExtractor", "SetOperations"], "class_members": []}, "category": "unit", "description": "Tests the commutativity of various set operations on BitMapExtractor objects with mismatched sizes."}, {"name": "testCosineDistance", "primary_tested": ["SetOperations.cosineDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine distance on BloomFilter objects."}, {"name": "testCosineSimilarity", "primary_tested": ["SetOperations.cosineSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Cosine similarity on BloomFilter objects."}, {"name": "testHammingDistance", "primary_tested": ["SetOperations.hammingDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Hamming distance on BloomFilter objects."}, {"name": "testJaccardDistance", "primary_tested": ["SetOperations.jaccardDistance(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard distance on BloomFilter objects."}, {"name": "testJaccardSimilarity", "primary_tested": ["SetOperations.jaccardSimilarity(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(double,ToDoubleBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "TestingHashers", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the calculation of Jaccard similarity on BloomFilter objects."}, {"name": "testOrCardinality", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects."}, {"name": "testOrCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.orCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the OR cardinality operation on BloomFilter objects with different lengths."}, {"name": "testXorCardinality", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects."}, {"name": "testXorCardinalityWithDifferentLengthFilters", "primary_tested": ["SetOperations.xorCardinality(BloomFilter,BloomFilter)"], "associated_methods": ["SetOperationsTest.assertSymmetricOperation(int,ToIntBiFunction<BloomFilter,BloomFilter>,BloomFilter,BloomFilter)"], "external_dependencies": {"modules": ["Shape", "BloomFilter", "IndexExtractor", "SetOperations"], "class_members": [{"name": "shape", "type": "variable"}, {"name": "createFilter", "type": "method"}]}, "category": "unit", "description": "Tests the XOR cardinality operation on BloomFilter objects with different lengths."}]}