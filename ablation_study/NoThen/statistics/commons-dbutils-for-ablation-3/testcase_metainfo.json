[{"uris": "src/test/java/org/apache/commons/dbutils/BaseResultSetHandlerTest.java.BaseResultSetHandlerTest.[void]testHandleWithoutExplicitResultSetInvocation()", "name": "testHandleWithoutExplicitResultSetInvocation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHandleWithoutExplicitResultSetInvocation()", "original_string": "    @Test\n    public void testHandleWithoutExplicitResultSetInvocation() throws Exception {\n        final Collection<Map<String, Object>> result = new ToMapCollectionHandler().handle(createMockResultSet());\n\n        assertFalse(result.isEmpty());\n\n        for (final Map<String, Object> current : result) {\n            assertTrue(current.containsKey(\"one\"));\n            assertTrue(current.containsKey(\"two\"));\n            assertTrue(current.containsKey(\"three\"));\n            assertTrue(current.containsKey(\"notInBean\"));\n            assertTrue(current.containsKey(\"intTest\"));\n            assertTrue(current.containsKey(\"integerTest\"));\n            assertTrue(current.containsKey(\"nullObjectTest\"));\n            assertTrue(current.containsKey(\"nullPrimitiveTest\"));\n            assertTrue(current.containsKey(\"notDate\"));\n            assertTrue(current.containsKey(\"columnProcessorDoubleTest\"));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseResultSetHandlerTest.java", "class_name": "BaseResultSetHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseResultSetHandlerTest.java.BaseResultSetHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java.ResultSetIterator_removeTest.[void]testRemoveSuccess()", "name": "testRemoveSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRemoveSuccess()", "original_string": "    @Test\n    public void testRemoveSuccess() throws SQLException {\n        when(mockResultSet.isLast()).thenReturn(false);\n        when(mockResultSet.next()).thenReturn(true);\n        resultSetIterator.next();\n\n        resultSetIterator.remove();\n\n        verify(mockResultSet).deleteRow();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java", "class_name": "ResultSetIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java.ResultSetIterator_removeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java.ResultSetIterator_removeTest.[void]testRemoveThrowsSQLException()", "name": "testRemoveThrowsSQLException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testRemoveThrowsSQLException()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testRemoveThrowsSQLException() throws SQLException {\n        when(mockResultSet.isLast()).thenReturn(false);\n        when(mockResultSet.next()).thenReturn(true);\n        resultSetIterator.next();\n\n        doThrow(new SQLException(\"Mocked SQLException\")).when(mockResultSet).deleteRow();\n\n        resultSetIterator.remove();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java", "class_name": "ResultSetIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java.ResultSetIterator_removeTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testAddBatchExceptionOnAdd()", "name": "testAddBatchExceptionOnAdd", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddBatchExceptionOnAdd()", "original_string": "    @Test\n    public void testAddBatchExceptionOnAdd() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        doThrow(new SQLException()).when(prepStmt).addBatch();\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testBadPrepareConnection()", "name": "testBadPrepareConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testBadPrepareConnection()", "original_string": "    @Test(expected = SQLException.class)\n    public void testBadPrepareConnection() throws Exception {\n        runner = new QueryRunner();\n        runner.update(\"update blah set unit = test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testExecuteBatchExceptionOnExec()", "name": "testExecuteBatchExceptionOnExec", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteBatchExceptionOnExec()", "original_string": "    @Test\n    public void testExecuteBatchExceptionOnExec() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        doThrow(new SQLException()).when(prepStmt).executeBatch();\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testExecuteException()", "name": "testExecuteException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteException()", "original_string": "    @Test\n    public void testExecuteException() throws Exception {\n        callExecuteWithException(handler, \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testExecuteQueryException()", "name": "testExecuteQueryException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteQueryException()", "original_string": "    @Test\n    public void testExecuteQueryException() throws Exception {\n        callQueryWithException(handler, \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testExecuteUpdateException()", "name": "testExecuteUpdateException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteUpdateException()", "original_string": "    @Test\n    public void testExecuteUpdateException() throws Exception {\n        doThrow(new SQLException()).when(prepStmt).executeUpdate();\n\n        callUpdateWithException(\"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testExecuteWithMultipleResultSets()", "name": "testExecuteWithMultipleResultSets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteWithMultipleResultSets()", "original_string": "    @Test\n    public void testExecuteWithMultipleResultSets() throws Exception {\n        when(call.execute()).thenReturn(true);\n        when(call.getMoreResults()).thenAnswer(new Answer<Boolean>() {\n            private int count = 1;\n            @Override\n            public Boolean answer(final InvocationOnMock invocation) {\n                return ++count <= 3;\n            }\n        });\n        when(meta.getParameterCount()).thenReturn(0);\n        final List<Object[]> objects = runner.execute(\"{call my_proc()}\", handler);\n\n        Assert.assertEquals(3, objects.size());\n        verify(call, times(1)).execute();\n        verify(results, times(3)).close();\n        verify(call, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we close the connection\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testExecuteWithResultSetException()", "name": "testExecuteWithResultSetException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteWithResultSetException()", "original_string": "    @Test\n    public void testExecuteWithResultSetException() throws Exception {\n        callExecuteWithResultSetWithException(handler, \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testFillStatementWithBean()", "name": "testFillStatementWithBean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFillStatementWithBean()", "original_string": "    @Test\n    public void testFillStatementWithBean() throws Exception {\n        final MyBean bean = new MyBean();\n        when(meta.getParameterCount()).thenReturn(3);\n        runner.fillStatementWithBean(prepStmt, bean, \"a\", \"b\", \"c\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testFillStatementWithBeanNullNames()", "name": "testFillStatementWithBeanNullNames", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = NullPointerException.class)\n    public void testFillStatementWithBeanNullNames()", "original_string": "    @Test(expected = NullPointerException.class)\n    public void testFillStatementWithBeanNullNames() throws Exception {\n        final MyBean bean = new MyBean();\n        runner.fillStatementWithBean(prepStmt, bean, \"a\", \"b\", null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = NullPointerException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = NullPointerException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodBatch()", "name": "testGoodBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodBatch()", "original_string": "    @Test\n    public void testGoodBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callGoodBatch(params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodBatchDefaultConstructor()", "name": "testGoodBatchDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodBatchDefaultConstructor()", "original_string": "    @Test\n    public void testGoodBatchDefaultConstructor() throws Exception {\n        runner = new QueryRunner();\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callGoodBatch(conn, params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodBatchInsert()", "name": "testGoodBatchInsert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodBatchInsert()", "original_string": "    @Test\n    public void testGoodBatchInsert() throws Exception {\n        results = mock(ResultSet.class);\n        resultsMeta = mock(ResultSetMetaData.class);\n\n        when(meta.getParameterCount()).thenReturn(2);\n        when(conn.prepareStatement(any(String.class), eq(Statement.RETURN_GENERATED_KEYS))).thenReturn(prepStmt);\n        when(prepStmt.getGeneratedKeys()).thenReturn(results);\n        when(results.next()).thenReturn(true).thenReturn(true).thenReturn(false);\n\n        final ResultSetHandler<List<Object>> handler = rs -> {\n            final List<Object> objects = new ArrayList<>();\n            while (rs.next()) {\n                objects.add(new Object());\n            }\n            return objects;\n        };\n\n        final Object[][] params = new Object[2][2];\n        params[0][0] = \"Test\";\n        params[0][1] = \"Blah\";\n        params[1][0] = \"Test2\";\n        params[1][1] = \"Blah2\";\n\n        final List<Object> generatedKeys = runner.insertBatch(\"INSERT INTO blah(col1, col2) VALUES(?,?)\", handler, params);\n\n        verify(prepStmt, times(2)).addBatch();\n        verify(prepStmt, times(1)).executeBatch();\n        verify(prepStmt, times(1)).close(); // make sure we closed the statement\n        verify(conn, times(1)).close(); // make sure we closed the connection\n\n        Assert.assertEquals(2, generatedKeys.size());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodBatchPmdTrue()", "name": "testGoodBatchPmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodBatchPmdTrue()", "original_string": "    @Test\n    public void testGoodBatchPmdTrue() throws Exception {\n        runner = new QueryRunner(dataSource, true);\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callGoodBatch(params, false);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodExecute()", "name": "testGoodExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodExecute()", "original_string": "    @Test\n    public void testGoodExecute() throws Exception {\n        callGoodExecute();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodExecuteDefaultConstructor()", "name": "testGoodExecuteDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodExecuteDefaultConstructor()", "original_string": "    @Test\n    public void testGoodExecuteDefaultConstructor() throws Exception {\n        runner = new QueryRunner();\n        callGoodExecute(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodExecutePmdTrue()", "name": "testGoodExecutePmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodExecutePmdTrue()", "original_string": "    @Test\n    public void testGoodExecutePmdTrue() throws Exception {\n        runner = new QueryRunner(true);\n        callGoodExecute(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodExecuteWithResultSet()", "name": "testGoodExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodExecuteWithResultSet()", "original_string": "    @Test\n    public void testGoodExecuteWithResultSet() throws Exception {\n        callGoodExecuteWithResultSet();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodExecuteWithResultSetDefaultConstructor()", "name": "testGoodExecuteWithResultSetDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodExecuteWithResultSetDefaultConstructor()", "original_string": "    @Test\n    public void testGoodExecuteWithResultSetDefaultConstructor() throws Exception {\n        runner = new QueryRunner();\n        callGoodExecuteWithResultSet(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodExecuteWithResultSetPmdTrue()", "name": "testGoodExecuteWithResultSetPmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodExecuteWithResultSetPmdTrue()", "original_string": "    @Test\n    public void testGoodExecuteWithResultSetPmdTrue() throws Exception {\n        runner = new QueryRunner(true);\n        callGoodExecuteWithResultSet(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodInsert()", "name": "testGoodInsert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodInsert()", "original_string": "    @Test\n    public void testGoodInsert() throws Exception {\n        results = mock(ResultSet.class);\n\n        when(meta.getParameterCount()).thenReturn(2);\n        when(conn.prepareStatement(any(String.class), eq(Statement.RETURN_GENERATED_KEYS))).thenReturn(prepStmt);\n        when(prepStmt.getGeneratedKeys()).thenReturn(results);\n        when(results.next()).thenReturn(true).thenReturn(false);\n        when(results.getObject(1)).thenReturn(1L);\n\n        final Long generatedKey = runner.insert(\"INSERT INTO blah(col1, col2) VALUES(?,?)\", new ScalarHandler<>(), \"unit\", \"test\");\n\n        verify(prepStmt, times(1)).executeUpdate();\n        verify(prepStmt, times(1)).close(); // make sure we closed the statement\n        verify(conn, times(1)).close(); // make sure we closed the connection\n\n        Assert.assertEquals(1L, generatedKey.longValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodQuery()", "name": "testGoodQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodQuery()", "original_string": "    @Test\n    public void testGoodQuery() throws Exception {\n        callGoodQuery();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodQueryDefaultConstructor()", "name": "testGoodQueryDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodQueryDefaultConstructor()", "original_string": "    @Test\n    public void testGoodQueryDefaultConstructor() throws Exception {\n        runner = new QueryRunner();\n        callGoodQuery(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodQueryPmdTrue()", "name": "testGoodQueryPmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodQueryPmdTrue()", "original_string": "    @Test\n    public void testGoodQueryPmdTrue() throws Exception {\n        runner = new QueryRunner(true);\n        callGoodQuery(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodUpdate()", "name": "testGoodUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodUpdate()", "original_string": "    @Test\n    public void testGoodUpdate() throws Exception {\n        callGoodUpdate();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodUpdateDefaultConstructor()", "name": "testGoodUpdateDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodUpdateDefaultConstructor()", "original_string": "    @Test\n    public void testGoodUpdateDefaultConstructor() throws Exception {\n        runner = new QueryRunner();\n        callGoodUpdate(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testGoodUpdatePmdTrue()", "name": "testGoodUpdatePmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodUpdatePmdTrue()", "original_string": "    @Test\n    public void testGoodUpdatePmdTrue() throws Exception {\n        runner = new QueryRunner(true);\n        callGoodUpdate(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNoParamsExecute()", "name": "testNoParamsExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoParamsExecute()", "original_string": "    @Test\n    public void testNoParamsExecute() throws Exception {\n        callGoodExecute();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNoParamsExecuteWithResultSet()", "name": "testNoParamsExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoParamsExecuteWithResultSet()", "original_string": "    @Test\n    public void testNoParamsExecuteWithResultSet() throws Exception {\n        callExecuteWithResultSetWithException();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNoParamsQuery()", "name": "testNoParamsQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoParamsQuery()", "original_string": "    @Test\n    public void testNoParamsQuery() throws Exception {\n        callGoodQuery();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNoParamsUpdate()", "name": "testNoParamsUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoParamsUpdate()", "original_string": "    @Test\n    public void testNoParamsUpdate() throws Exception {\n        callGoodUpdate();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullConnectionBatch()", "name": "testNullConnectionBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullConnectionBatch()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullConnectionBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.batch(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullConnectionExecute()", "name": "testNullConnectionExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullConnectionExecute()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullConnectionExecute() throws Exception {\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.execute(\"{call my_proc(?, ?)}\", \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullConnectionExecuteWithResultSet()", "name": "testNullConnectionExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullConnectionExecuteWithResultSet()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullConnectionExecuteWithResultSet() throws Exception {\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.execute(\"{call my_proc(?, ?)}\", handler, \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullConnectionQuery()", "name": "testNullConnectionQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullConnectionQuery()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullConnectionQuery() throws Exception {\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.query(\"select * from blah where ? = ?\", handler, \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullConnectionUpdate()", "name": "testNullConnectionUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullConnectionUpdate()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullConnectionUpdate() throws Exception {\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.update(\"select * from blah where ? = ?\", \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullHandlerExecute()", "name": "testNullHandlerExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullHandlerExecute()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullHandlerExecute() throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n\n        runner.execute(\"{call my_proc(?, ?)}\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullHandlerExecuteWithResultSet()", "name": "testNullHandlerExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullHandlerExecuteWithResultSet()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullHandlerExecuteWithResultSet() throws Exception {\n        runner.execute(\"{call my_proc(?, ?)}\", (ResultSetHandler) null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullHandlerQuery()", "name": "testNullHandlerQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullHandlerQuery()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullHandlerQuery() throws Exception {\n        runner.query(\"select * from blah where ? = ?\", null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullParamsArgBatch()", "name": "testNullParamsArgBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullParamsArgBatch()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullParamsArgBatch() throws Exception {\n        runner.batch(\"select * from blah where ? = ?\", null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullParamsBatch()", "name": "testNullParamsBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullParamsBatch()", "original_string": "    @Test\n    public void testNullParamsBatch() throws Exception {\n        final String[][] params = { { null, \"unit\" }, { \"test\", null } };\n\n        callGoodBatch(params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullSqlBatch()", "name": "testNullSqlBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullSqlBatch()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullSqlBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        runner.batch(null, params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullSqlExecute()", "name": "testNullSqlExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullSqlExecute()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullSqlExecute() throws Exception {\n        runner.execute(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullSqlExecuteWithResultSet()", "name": "testNullSqlExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullSqlExecuteWithResultSet()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullSqlExecuteWithResultSet() throws Exception {\n        runner.execute(null, handler);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullSqlQuery()", "name": "testNullSqlQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullSqlQuery()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullSqlQuery() throws Exception {\n        runner.query(null, handler);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testNullSqlUpdate()", "name": "testNullSqlUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = SQLException.class)\n    public void testNullSqlUpdate()", "original_string": "    @Test(expected = SQLException.class)\n    public void testNullSqlUpdate() throws Exception {\n        runner.update(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test(expected = SQLException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = SQLException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testStatementConfiguration()", "name": "testStatementConfiguration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStatementConfiguration()", "original_string": "    @Test\n    public void testStatementConfiguration() throws Exception {\n        final StatementConfiguration stmtConfig = new StatementConfiguration(1, 2, 3, 4, 5);\n        final QueryRunner queryRunner = new QueryRunner(stmtConfig);\n        queryRunner.prepareStatement(conn, \"select 1\");\n\n        verify(prepStmt).setFetchDirection(eq(1));\n        verify(prepStmt).setFetchSize(eq(2));\n        verify(prepStmt).setMaxFieldSize(eq(3));\n        verify(prepStmt).setMaxRows(eq(4));\n        verify(prepStmt).setQueryTimeout(eq(5));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooFewParamsBatch()", "name": "testTooFewParamsBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsBatch()", "original_string": "    @Test\n    public void testTooFewParamsBatch() throws Exception {\n        final String[][] params = { { \"unit\" }, { \"test\" } };\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooFewParamsExecute()", "name": "testTooFewParamsExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsExecute()", "original_string": "    @Test\n    public void testTooFewParamsExecute() throws Exception {\n        callExecuteWithException(\"unit\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooFewParamsExecuteWithResultSet()", "name": "testTooFewParamsExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsExecuteWithResultSet()", "original_string": "    @Test\n    public void testTooFewParamsExecuteWithResultSet() throws Exception {\n        callExecuteWithResultSetWithException(\"unit\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooFewParamsQuery()", "name": "testTooFewParamsQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsQuery()", "original_string": "    @Test\n    public void testTooFewParamsQuery() throws Exception {\n        callQueryWithException(\"unit\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooFewParamsUpdate()", "name": "testTooFewParamsUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsUpdate()", "original_string": "    @Test\n    public void testTooFewParamsUpdate() throws Exception {\n        callUpdateWithException(\"unit\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooManyParamsBatch()", "name": "testTooManyParamsBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsBatch()", "original_string": "    @Test\n    public void testTooManyParamsBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\", \"unit\" }, { \"test\", \"test\", \"test\" } };\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooManyParamsExecute()", "name": "testTooManyParamsExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsExecute()", "original_string": "    @Test\n    public void testTooManyParamsExecute() throws Exception {\n        callExecuteWithException(\"unit\", \"test\", \"fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooManyParamsExecuteWithResultSet()", "name": "testTooManyParamsExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsExecuteWithResultSet()", "original_string": "    @Test\n    public void testTooManyParamsExecuteWithResultSet() throws Exception {\n        callExecuteWithResultSetWithException(\"unit\", \"test\", \"fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooManyParamsQuery()", "name": "testTooManyParamsQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsQuery()", "original_string": "    @Test\n    public void testTooManyParamsQuery() throws Exception {\n        callQueryWithException(\"unit\", \"test\", \"fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]testTooManyParamsUpdate()", "name": "testTooManyParamsUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsUpdate()", "original_string": "    @Test\n    public void testTooManyParamsUpdate() throws Exception {\n        callUpdateWithException(\"unit\", \"test\", \"fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java.StatementConfigurationTest.[void]testBuilder()", "name": "testBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuilder()", "original_string": "    @Test\n    public void testBuilder() {\n        final StatementConfiguration.Builder builder = new StatementConfiguration.Builder().fetchDirection(1).fetchSize(2).maxFieldSize(3).maxRows(4)\n                .queryTimeout(5);\n        final StatementConfiguration config = builder.build();\n\n        assertTrue(config.isFetchDirectionSet());\n        assertEquals(Integer.valueOf(1), config.getFetchDirection());\n\n        assertTrue(config.isFetchSizeSet());\n        assertEquals(Integer.valueOf(2), config.getFetchSize());\n\n        assertTrue(config.isMaxFieldSizeSet());\n        assertEquals(Integer.valueOf(3), config.getMaxFieldSize());\n\n        assertTrue(config.isMaxRowsSet());\n        assertEquals(Integer.valueOf(4), config.getMaxRows());\n\n        assertTrue(config.isQueryTimeoutSet());\n        assertEquals(Integer.valueOf(5), config.getQueryTimeout());\n\n        assertTrue(config.isQueryTimeoutSet());\n        assertEquals(Duration.ofSeconds(5), config.getQueryTimeoutDuration());\n\n        final StatementConfiguration config2 = builder.queryTimeout(Duration.ofSeconds(3)).build();\n\n        assertTrue(config2.isQueryTimeoutSet());\n        assertEquals(Integer.valueOf(3), config2.getQueryTimeout());\n\n        assertTrue(config2.isQueryTimeoutSet());\n        assertEquals(Duration.ofSeconds(3), config2.getQueryTimeoutDuration());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java", "class_name": "StatementConfigurationTest", "class_uri": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java.StatementConfigurationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that a builder with all values set yields like values in the constructed configuration.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java.StatementConfigurationTest.[void]testConstructor()", "name": "testConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testConstructor()", "original_string": "    @Test\n    public void testConstructor() {\n        final StatementConfiguration config = new StatementConfiguration(1, 2, 3, 4, 5);\n\n        assertEquals(Integer.valueOf(1), config.getFetchDirection());\n        assertEquals(Integer.valueOf(2), config.getFetchSize());\n        assertEquals(Integer.valueOf(3), config.getMaxFieldSize());\n        assertEquals(Integer.valueOf(4), config.getMaxRows());\n        assertEquals(Integer.valueOf(5), config.getQueryTimeout());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java", "class_name": "StatementConfigurationTest", "class_uri": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java.StatementConfigurationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that the constructor of {@code StatementConfiguration} correctly sets all values.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java.StatementConfigurationTest.[void]testEmptyBuilder()", "name": "testEmptyBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyBuilder()", "original_string": "    @Test\n    public void testEmptyBuilder() {\n        final StatementConfiguration config = new StatementConfiguration.Builder().build();\n\n        assertFalse(config.isFetchDirectionSet());\n        assertFalse(config.isFetchSizeSet());\n        assertFalse(config.isMaxFieldSizeSet());\n        assertFalse(config.isMaxRowsSet());\n        assertFalse(config.isQueryTimeoutSet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java", "class_name": "StatementConfigurationTest", "class_uri": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java.StatementConfigurationTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest that an empty builder yields null values for all configuration settings.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java.ResultSetIteratorTest.[void]testCreatesResultSetIteratorTakingThreeArgumentsAndCallsRemove()", "name": "testCreatesResultSetIteratorTakingThreeArgumentsAndCallsRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreatesResultSetIteratorTakingThreeArgumentsAndCallsRemove()", "original_string": "    @Test\n    public void testCreatesResultSetIteratorTakingThreeArgumentsAndCallsRemove() {\n\n        final ResultSet resultSet = mock(ResultSet.class);\n        final ResultSetIterator resultSetIterator = new ResultSetIterator(resultSet, null);\n        resultSetIterator.remove();\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java", "class_name": "ResultSetIteratorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java.ResultSetIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java.ResultSetIteratorTest.[void]testRethrowThrowsRuntimeException()", "name": "testRethrowThrowsRuntimeException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRethrowThrowsRuntimeException()", "original_string": "    @Test\n    public void testRethrowThrowsRuntimeException() {\n\n        final ResultSetIterator resultSetIterator = new ResultSetIterator((ResultSet) null);\n        final Throwable throwable = new Throwable();\n        final SQLException sqlException = new SQLException(throwable);\n\n        try {\n            resultSetIterator.rethrow(sqlException);\n            fail(\"Expecting exception: RuntimeException\");\n        } catch (final RuntimeException e) {\n            assertEquals(ResultSetIterator.class.getName(), e.getStackTrace()[0].getClassName());\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java", "class_name": "ResultSetIteratorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java.ResultSetIteratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseConnection()", "name": "testCloseConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseConnection()", "original_string": "    @Test\n    public void testCloseConnection() throws Exception {\n        final Connection mockCon = mock(Connection.class);\n        DbUtils.close(mockCon);\n        verify(mockCon).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseNullConnection()", "name": "testCloseNullConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseNullConnection()", "original_string": "    @Test\n    public void testCloseNullConnection() throws Exception {\n        DbUtils.close((Connection) null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseNullResultSet()", "name": "testCloseNullResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseNullResultSet()", "original_string": "    @Test\n    public void testCloseNullResultSet() throws Exception {\n        DbUtils.close((ResultSet) null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseNullStatement()", "name": "testCloseNullStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseNullStatement()", "original_string": "    @Test\n    public void testCloseNullStatement() throws Exception {\n        DbUtils.close((Statement) null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyConnection()", "name": "testCloseQuietlyConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyConnection()", "original_string": "    @Test\n    public void testCloseQuietlyConnection() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        DbUtils.closeQuietly(mockConnection);\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyConnectionResultSetStatement()", "name": "testCloseQuietlyConnectionResultSetStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyConnectionResultSetStatement()", "original_string": "    @Test\n    public void testCloseQuietlyConnectionResultSetStatement() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        final ResultSet mockResultSet = mock(ResultSet.class);\n        final Statement mockStatement = mock(Statement.class);\n        DbUtils.closeQuietly(mockConnection, mockStatement, mockResultSet);\n        verify(mockConnection).close();\n        verify(mockResultSet).close();\n        verify(mockStatement).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyConnectionResultSetStatementThrowingException()", "name": "testCloseQuietlyConnectionResultSetStatementThrowingException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyConnectionResultSetStatementThrowingException()", "original_string": "    @Test\n    public void testCloseQuietlyConnectionResultSetStatementThrowingException() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        final ResultSet mockResultSet = mock(ResultSet.class);\n        final Statement mockStatement = mock(Statement.class);\n        doThrow(SQLException.class).when(mockStatement).close();\n        DbUtils.closeQuietly(mockConnection, mockStatement, mockResultSet);\n        verify(mockConnection).close();\n        verify(mockResultSet).close();\n        verify(mockStatement).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyConnectionResultSetThrowingExceptionStatement()", "name": "testCloseQuietlyConnectionResultSetThrowingExceptionStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyConnectionResultSetThrowingExceptionStatement()", "original_string": "    @Test\n    public void testCloseQuietlyConnectionResultSetThrowingExceptionStatement() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        final ResultSet mockResultSet = mock(ResultSet.class);\n        doThrow(SQLException.class).when(mockResultSet).close();\n        final Statement mockStatement = mock(Statement.class);\n        DbUtils.closeQuietly(mockConnection, mockStatement, mockResultSet);\n        verify(mockConnection).close();\n        verify(mockResultSet).close();\n        verify(mockStatement).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyConnectionThrowingException()", "name": "testCloseQuietlyConnectionThrowingException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyConnectionThrowingException()", "original_string": "    @Test\n    public void testCloseQuietlyConnectionThrowingException() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        doThrow(SQLException.class).when(mockConnection).close();\n        DbUtils.closeQuietly(mockConnection);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyConnectionThrowingExceptionResultSetStatement()", "name": "testCloseQuietlyConnectionThrowingExceptionResultSetStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyConnectionThrowingExceptionResultSetStatement()", "original_string": "    @Test\n    public void testCloseQuietlyConnectionThrowingExceptionResultSetStatement() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        doThrow(SQLException.class).when(mockConnection).close();\n        final ResultSet mockResultSet = mock(ResultSet.class);\n        final Statement mockStatement = mock(Statement.class);\n        DbUtils.closeQuietly(mockConnection, mockStatement, mockResultSet);\n        verify(mockConnection).close();\n        verify(mockResultSet).close();\n        verify(mockStatement).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyNullConnection()", "name": "testCloseQuietlyNullConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyNullConnection()", "original_string": "    @Test\n    public void testCloseQuietlyNullConnection() throws Exception {\n        DbUtils.closeQuietly((Connection) null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyNullResultSet()", "name": "testCloseQuietlyNullResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyNullResultSet()", "original_string": "    @Test\n    public void testCloseQuietlyNullResultSet() throws Exception {\n        DbUtils.closeQuietly((ResultSet) null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyNullStatement()", "name": "testCloseQuietlyNullStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyNullStatement()", "original_string": "    @Test\n    public void testCloseQuietlyNullStatement() throws Exception {\n        DbUtils.closeQuietly((Statement) null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyResultSet()", "name": "testCloseQuietlyResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyResultSet()", "original_string": "    @Test\n    public void testCloseQuietlyResultSet() throws Exception {\n        final ResultSet mockResultSet = mock(ResultSet.class);\n        DbUtils.closeQuietly(mockResultSet);\n        verify(mockResultSet).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyResultSetThrowingException()", "name": "testCloseQuietlyResultSetThrowingException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyResultSetThrowingException()", "original_string": "    @Test\n    public void testCloseQuietlyResultSetThrowingException() throws Exception {\n        final ResultSet mockResultSet = mock(ResultSet.class);\n        doThrow(SQLException.class).when(mockResultSet).close();\n        DbUtils.closeQuietly(mockResultSet);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyStatement()", "name": "testCloseQuietlyStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyStatement()", "original_string": "    @Test\n    public void testCloseQuietlyStatement() throws Exception {\n        final Statement mockStatement = mock(Statement.class);\n        DbUtils.closeQuietly(mockStatement);\n        verify(mockStatement).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseQuietlyStatementThrowingException()", "name": "testCloseQuietlyStatementThrowingException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseQuietlyStatementThrowingException()", "original_string": "    @Test\n    public void testCloseQuietlyStatementThrowingException() throws Exception {\n        final Statement mockStatement = mock(Statement.class);\n        doThrow(SQLException.class).when(mockStatement).close();\n        DbUtils.closeQuietly(mockStatement);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseResultSet()", "name": "testCloseResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseResultSet()", "original_string": "    @Test\n    public void testCloseResultSet() throws Exception {\n        final ResultSet mockResultSet = mock(ResultSet.class);\n        DbUtils.close(mockResultSet);\n        verify(mockResultSet).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCloseStatement()", "name": "testCloseStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseStatement()", "original_string": "    @Test\n    public void testCloseStatement() throws Exception {\n        final Statement mockStatement = mock(Statement.class);\n        DbUtils.close(mockStatement);\n        verify(mockStatement).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCommitAndClose()", "name": "testCommitAndClose", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCommitAndClose()", "original_string": "    @Test\n    public void testCommitAndClose() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        DbUtils.commitAndClose(mockConnection);\n        verify(mockConnection).commit();\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCommitAndCloseQuietly()", "name": "testCommitAndCloseQuietly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCommitAndCloseQuietly()", "original_string": "    @Test\n    public void testCommitAndCloseQuietly() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        DbUtils.commitAndClose(mockConnection);\n        verify(mockConnection).commit();\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCommitAndCloseQuietlyWithException()", "name": "testCommitAndCloseQuietlyWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCommitAndCloseQuietlyWithException()", "original_string": "    @Test\n    public void testCommitAndCloseQuietlyWithException() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        doThrow(SQLException.class).when(mockConnection).close();\n        DbUtils.commitAndCloseQuietly(mockConnection);\n        verify(mockConnection).commit();\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCommitAndCloseQuietlyWithNullDoesNotThrowAnSQLException()", "name": "testCommitAndCloseQuietlyWithNullDoesNotThrowAnSQLException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCommitAndCloseQuietlyWithNullDoesNotThrowAnSQLException()", "original_string": "    @Test\n    public void testCommitAndCloseQuietlyWithNullDoesNotThrowAnSQLException() {\n\n        DbUtils.commitAndCloseQuietly(null);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testCommitAndCloseWithException()", "name": "testCommitAndCloseWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCommitAndCloseWithException()", "original_string": "    @Test\n    public void testCommitAndCloseWithException() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        doThrow(SQLException.class).when(mockConnection).commit();\n        try {\n            DbUtils.commitAndClose(mockConnection);\n            fail(\"DbUtils.commitAndClose() swallowed SQLEception!\");\n        } catch (final SQLException e) {\n            // we expect this exception\n        }\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testLoadDriverReturnsFalse()", "name": "testLoadDriverReturnsFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoadDriverReturnsFalse()", "original_string": "    @Test\n    public void testLoadDriverReturnsFalse() {\n\n        assertFalse(DbUtils.loadDriver(\"\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollback()", "name": "testRollback", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollback()", "original_string": "    @Test\n    public void testRollback() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        DbUtils.rollback(mockConnection);\n        verify(mockConnection).rollback();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackAndClose()", "name": "testRollbackAndClose", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackAndClose()", "original_string": "    @Test\n    public void testRollbackAndClose() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        DbUtils.rollbackAndClose(mockConnection);\n        verify(mockConnection).rollback();\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackAndCloseNull()", "name": "testRollbackAndCloseNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackAndCloseNull()", "original_string": "    @Test\n    public void testRollbackAndCloseNull() throws Exception {\n        DbUtils.rollbackAndClose(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackAndCloseQuietly()", "name": "testRollbackAndCloseQuietly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackAndCloseQuietly()", "original_string": "    @Test\n    public void testRollbackAndCloseQuietly() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        DbUtils.rollbackAndCloseQuietly(mockConnection);\n        verify(mockConnection).rollback();\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackAndCloseQuietlyNull()", "name": "testRollbackAndCloseQuietlyNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackAndCloseQuietlyNull()", "original_string": "    @Test\n    public void testRollbackAndCloseQuietlyNull() throws Exception {\n        DbUtils.rollbackAndCloseQuietly(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackAndCloseQuietlyWithException()", "name": "testRollbackAndCloseQuietlyWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackAndCloseQuietlyWithException()", "original_string": "    @Test\n    public void testRollbackAndCloseQuietlyWithException() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        doThrow(SQLException.class).when(mockConnection).rollback();\n        DbUtils.rollbackAndCloseQuietly(mockConnection);\n        verify(mockConnection).rollback();\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackAndCloseWithException()", "name": "testRollbackAndCloseWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackAndCloseWithException()", "original_string": "    @Test\n    public void testRollbackAndCloseWithException() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        doThrow(SQLException.class).when(mockConnection).rollback();\n        try {\n            DbUtils.rollbackAndClose(mockConnection);\n            fail(\"DbUtils.rollbackAndClose() swallowed SQLException!\");\n        } catch (final SQLException e) {\n            // we expect this exception\n        }\n        verify(mockConnection).rollback();\n        verify(mockConnection).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackNull()", "name": "testRollbackNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackNull()", "original_string": "    @Test\n    public void testRollbackNull() throws Exception {\n        DbUtils.rollback(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackQuietly()", "name": "testRollbackQuietly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackQuietly()", "original_string": "    @Test\n    public void testRollbackQuietly() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        DbUtils.rollbackQuietly(mockConnection);\n        verify(mockConnection).rollback();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackQuietlyNull()", "name": "testRollbackQuietlyNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackQuietlyNull()", "original_string": "    @Test\n    public void testRollbackQuietlyNull() throws Exception {\n        DbUtils.rollbackQuietly(null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest.[void]testRollbackQuietlyWithException()", "name": "testRollbackQuietlyWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRollbackQuietlyWithException()", "original_string": "    @Test\n    public void testRollbackQuietlyWithException() throws Exception {\n        final Connection mockConnection = mock(Connection.class);\n        doThrow(SQLException.class).when(mockConnection).rollback();\n        DbUtils.rollbackQuietly(mockConnection);\n        verify(mockConnection).rollback();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "class_name": "DbUtilsTest", "class_uri": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java.DbUtilsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest.[void]testRegister()", "name": "testRegister", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRegister()", "original_string": "    @Test\n    public void testRegister() throws Exception {\n        parameter.register(stmt, INDEX);\n        verify(stmt, times(1)).registerOutParameter(INDEX, Types.INTEGER);\n        verify(stmt, times(0)).setObject(eq(INDEX), any(Number.class));\n\n        parameter.setValue(VALUE);\n        parameter.register(stmt, INDEX);\n        verify(stmt, times(2)).registerOutParameter(INDEX, Types.INTEGER);\n        verify(stmt, times(1)).setObject(INDEX, VALUE);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java", "class_name": "OutParameterTest", "class_uri": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest.[void]testRegisterAlternateConstructor()", "name": "testRegisterAlternateConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRegisterAlternateConstructor()", "original_string": "    @Test\n    public void testRegisterAlternateConstructor() throws Exception {\n        parameter = new OutParameter<>(Types.INTEGER, Number.class, VALUE);\n        parameter.register(stmt, INDEX);\n        verify(stmt, times(1)).registerOutParameter(INDEX, Types.INTEGER);\n        verify(stmt, times(1)).setObject(INDEX, VALUE);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java", "class_name": "OutParameterTest", "class_uri": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest.[void]testSetValue()", "name": "testSetValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetValue()", "original_string": "    @Test\n    public void testSetValue() throws Exception {\n        when(stmt.getObject(INDEX)).thenReturn(VALUE);\n\n        parameter.setValue(stmt, INDEX);\n\n        assertEquals(VALUE, parameter.getValue());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java", "class_name": "OutParameterTest", "class_uri": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java.OutParameter_toStringTest.[void]testToStringWithNullValue()", "name": "testToStringWithNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithNullValue()", "original_string": "    @Test\n    public void testToStringWithNullValue() {\n        String expected = \"OutParameter{sqlType=4, javaType=class java.lang.Number, value=null}\";\n        assertEquals(expected, parameter.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java", "class_name": "OutParameter_toStringTest", "class_uri": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java.OutParameter_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java.OutParameter_toStringTest.[void]testToStringWithValue()", "name": "testToStringWithValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testToStringWithValue()", "original_string": "    @Test\n    public void testToStringWithValue() {\n        parameter.setValue(123);\n        String expected = \"OutParameter{sqlType=4, javaType=class java.lang.Number, value=123}\";\n        assertEquals(expected, parameter.toString());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java", "class_name": "OutParameter_toStringTest", "class_uri": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java.OutParameter_toStringTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest.[void]testMapColumnsToPropertiesColumnLabelIsNull()", "name": "testMapColumnsToPropertiesColumnLabelIsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesColumnLabelIsNull()", "original_string": "    @SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesColumnLabelIsNull() throws Exception {\n        when(metaData.getColumnCount()).thenReturn(1);\n        when(metaData.getColumnName(1)).thenReturn(\"juhu\");\n        when(metaData.getColumnLabel(1)).thenReturn(null);\n\n        final int[] ret = processor.mapColumnsToProperties(metaData, propDescriptors);\n\n        assertNotNull(ret);\n        assertEquals(2, ret.length);\n        assertEquals(-1, ret[0]);\n        assertEquals(-1, ret[1]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java", "class_name": "GenerousBeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest", "attributes": {"modifiers": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest.[void]testMapColumnsToPropertiesMixedCase()", "name": "testMapColumnsToPropertiesMixedCase", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesMixedCase()", "original_string": "    @SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesMixedCase() throws Exception {\n        when(metaData.getColumnCount()).thenReturn(3);\n\n        when(metaData.getColumnLabel(1)).thenReturn(\"tHree\");\n        when(metaData.getColumnLabel(2)).thenReturn(\"One\");\n        when(metaData.getColumnLabel(3)).thenReturn(\"tWO\");\n\n        final int[] ret = processor.mapColumnsToProperties(metaData, propDescriptors);\n\n        assertNotNull(ret);\n        assertEquals(4, ret.length);\n        assertEquals(-1, ret[0]);\n        assertEquals(2, ret[1]);\n        assertEquals(0, ret[2]);\n        assertEquals(1, ret[3]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java", "class_name": "GenerousBeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest", "attributes": {"modifiers": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest.[void]testMapColumnsToPropertiesWithOutUnderscores()", "name": "testMapColumnsToPropertiesWithOutUnderscores", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesWithOutUnderscores()", "original_string": "    @SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesWithOutUnderscores() throws Exception {\n        when(metaData.getColumnCount()).thenReturn(3);\n\n        when(metaData.getColumnLabel(1)).thenReturn(\"three\");\n        when(metaData.getColumnLabel(2)).thenReturn(\"one\");\n        when(metaData.getColumnLabel(3)).thenReturn(\"two\");\n\n        final int[] ret = processor.mapColumnsToProperties(metaData, propDescriptors);\n\n        assertNotNull(ret);\n        assertEquals(4, ret.length);\n        assertEquals(-1, ret[0]);\n        assertEquals(2, ret[1]);\n        assertEquals(0, ret[2]);\n        assertEquals(1, ret[3]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java", "class_name": "GenerousBeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest", "attributes": {"modifiers": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest.[void]testMapColumnsToPropertiesWithSpaces()", "name": "testMapColumnsToPropertiesWithSpaces", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesWithSpaces()", "original_string": "    @SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesWithSpaces() throws Exception {\n        when(metaData.getColumnCount()).thenReturn(3);\n\n        when(metaData.getColumnLabel(1)).thenReturn(\"th ree\");\n        when(metaData.getColumnLabel(2)).thenReturn(\"o n e\");\n        when(metaData.getColumnLabel(3)).thenReturn(\"t wo\");\n\n        final int[] ret = processor.mapColumnsToProperties(metaData, propDescriptors);\n\n        assertNotNull(ret);\n        assertEquals(4, ret.length);\n        assertEquals(-1, ret[0]);\n        assertEquals(2, ret[1]);\n        assertEquals(0, ret[2]);\n        assertEquals(1, ret[3]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java", "class_name": "GenerousBeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest", "attributes": {"modifiers": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest.[void]testMapColumnsToPropertiesWithUnderscores()", "name": "testMapColumnsToPropertiesWithUnderscores", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesWithUnderscores()", "original_string": "    @SuppressWarnings(\"boxing\") // test code\n    @Test\n    public void testMapColumnsToPropertiesWithUnderscores() throws Exception {\n        when(metaData.getColumnCount()).thenReturn(3);\n\n        when(metaData.getColumnLabel(1)).thenReturn(\"t_h_r_e_e\");\n        when(metaData.getColumnLabel(2)).thenReturn(\"o_n_e\");\n        when(metaData.getColumnLabel(3)).thenReturn(\"t_w_o\");\n\n        final int[] ret = processor.mapColumnsToProperties(metaData, propDescriptors);\n\n        assertNotNull(ret);\n        assertEquals(4, ret.length);\n        assertEquals(-1, ret[0]);\n        assertEquals(2, ret[1]);\n        assertEquals(0, ret[2]);\n        assertEquals(1, ret[3]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java", "class_name": "GenerousBeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest", "attributes": {"modifiers": "@SuppressWarnings(\"boxing\") // test code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"boxing\")", "public"], "comments": ["// test code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testAddBatchException()", "name": "testAddBatchException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddBatchException()", "original_string": "    @Test\n    public void testAddBatchException() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testBadPrepareConnection()", "name": "testBadPrepareConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testBadPrepareConnection()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testBadPrepareConnection() throws Exception {\n        runner = new AsyncQueryRunner(Executors.newFixedThreadPool(1));\n        runner.update(\"update blah set unit = test\").get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testExecuteBatchException()", "name": "testExecuteBatchException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteBatchException()", "original_string": "    @Test\n    public void testExecuteBatchException() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testExecuteQueryException()", "name": "testExecuteQueryException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteQueryException()", "original_string": "    @Test\n    public void testExecuteQueryException() throws Exception {\n        callQueryWithException(handler, \"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testExecuteUpdateException()", "name": "testExecuteUpdateException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExecuteUpdateException()", "original_string": "    @Test\n    public void testExecuteUpdateException() throws Exception {\n        doThrow(new SQLException()).when(prepStmt).executeUpdate();\n\n        callUpdateWithException(\"unit\", \"test\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodBatch()", "name": "testGoodBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodBatch()", "original_string": "    @Test\n    public void testGoodBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callGoodBatch(params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodBatchDefaultConstructor()", "name": "testGoodBatchDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodBatchDefaultConstructor()", "original_string": "    @Test\n    public void testGoodBatchDefaultConstructor() throws Exception {\n        runner = new AsyncQueryRunner(Executors.newFixedThreadPool(1));\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callGoodBatch(conn, params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodBatchPmdTrue()", "name": "testGoodBatchPmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public void testGoodBatchPmdTrue()", "original_string": "    @SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public void testGoodBatchPmdTrue() throws Exception {\n        runner = new AsyncQueryRunner(dataSource, true, Executors.newFixedThreadPool(1));\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        callGoodBatch(params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"deprecation\")", "public"], "comments": ["// deliberate test of deprecated code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodQuery()", "name": "testGoodQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodQuery()", "original_string": "    @Test\n    public void testGoodQuery() throws Exception {\n        callGoodQuery();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodQueryDefaultConstructor()", "name": "testGoodQueryDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodQueryDefaultConstructor()", "original_string": "    @Test\n    public void testGoodQueryDefaultConstructor() throws Exception {\n        runner = new AsyncQueryRunner(Executors.newFixedThreadPool(1));\n        callGoodQuery(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodQueryPmdTrue()", "name": "testGoodQueryPmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public void testGoodQueryPmdTrue()", "original_string": "    @SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public void testGoodQueryPmdTrue() throws Exception {\n        runner = new AsyncQueryRunner(true, Executors.newFixedThreadPool(1));\n        callGoodQuery(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"deprecation\")", "public"], "comments": ["// deliberate test of deprecated code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodUpdate()", "name": "testGoodUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodUpdate()", "original_string": "    @Test\n    public void testGoodUpdate() throws Exception {\n        callGoodUpdate();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodUpdateDefaultConstructor()", "name": "testGoodUpdateDefaultConstructor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGoodUpdateDefaultConstructor()", "original_string": "    @Test\n    public void testGoodUpdateDefaultConstructor() throws Exception {\n        runner = new AsyncQueryRunner(Executors.newFixedThreadPool(1));\n        callGoodUpdate(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testGoodUpdatePmdTrue()", "name": "testGoodUpdatePmdTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public void testGoodUpdatePmdTrue()", "original_string": "    @SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public void testGoodUpdatePmdTrue() throws Exception {\n        runner = new AsyncQueryRunner(true, Executors.newFixedThreadPool(1));\n        callGoodUpdate(conn);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@SuppressWarnings(\"deprecation\") // deliberate test of deprecated code\n    @Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@SuppressWarnings(\"deprecation\")", "public"], "comments": ["// deliberate test of deprecated code"], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testInsertUsesGivenQueryRunner()", "name": "testInsertUsesGivenQueryRunner", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInsertUsesGivenQueryRunner()", "original_string": "    @Test\n    public void testInsertUsesGivenQueryRunner() throws Exception {\n        final QueryRunner mockQueryRunner = mock(QueryRunner.class, org.mockito.Mockito.withSettings().verboseLogging() // debug for Continuum\n        );\n        runner = new AsyncQueryRunner(Executors.newSingleThreadExecutor(), mockQueryRunner);\n\n        runner.insert(\"1\", handler);\n        runner.insert(\"2\", handler, \"param1\");\n        runner.insert(conn, \"3\", handler);\n        runner.insert(conn, \"4\", handler, \"param1\");\n\n        // give the Executor time to submit all insert statements. Otherwise the following verify statements will fail from time to time.\n        TimeUnit.MILLISECONDS.sleep(50);\n\n        verify(mockQueryRunner).insert(\"1\", handler);\n        verify(mockQueryRunner).insert(\"2\", handler, \"param1\");\n        verify(mockQueryRunner).insert(conn, \"3\", handler);\n        verify(mockQueryRunner).insert(conn, \"4\", handler, \"param1\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNoParamsQuery()", "name": "testNoParamsQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoParamsQuery()", "original_string": "    @Test\n    public void testNoParamsQuery() throws Exception {\n        callGoodQuery();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNoParamsUpdate()", "name": "testNoParamsUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoParamsUpdate()", "original_string": "    @Test\n    public void testNoParamsUpdate() throws Exception {\n        callGoodUpdate();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullConnectionBatch()", "name": "testNullConnectionBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullConnectionBatch()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullConnectionBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.batch(\"select * from blah where ? = ?\", params).get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullConnectionQuery()", "name": "testNullConnectionQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullConnectionQuery()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullConnectionQuery() throws Exception {\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.query(\"select * from blah where ? = ?\", handler, \"unit\", \"test\").get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullConnectionUpdate()", "name": "testNullConnectionUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullConnectionUpdate()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullConnectionUpdate() throws Exception {\n        when(dataSource.getConnection()).thenReturn(null);\n\n        runner.update(\"select * from blah where ? = ?\", \"unit\", \"test\").get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullHandlerQuery()", "name": "testNullHandlerQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullHandlerQuery()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullHandlerQuery() throws Exception {\n        runner.query(\"select * from blah where ? = ?\", null).get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullParamsArgBatch()", "name": "testNullParamsArgBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullParamsArgBatch()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullParamsArgBatch() throws Exception {\n        runner.batch(\"select * from blah where ? = ?\", null).get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullParamsBatch()", "name": "testNullParamsBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullParamsBatch()", "original_string": "    @Test\n    public void testNullParamsBatch() throws Exception {\n        final String[][] params = { { null, \"unit\" }, { \"test\", null } };\n\n        callGoodBatch(params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullSqlBatch()", "name": "testNullSqlBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullSqlBatch()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullSqlBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\" }, { \"test\", \"test\" } };\n\n        runner.batch(null, params).get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullSqlQuery()", "name": "testNullSqlQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullSqlQuery()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullSqlQuery() throws Exception {\n        runner.query(null, handler).get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testNullSqlUpdate()", "name": "testNullSqlUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = ExecutionException.class)\n    public void testNullSqlUpdate()", "original_string": "    @Test(expected = ExecutionException.class)\n    public void testNullSqlUpdate() throws Exception {\n        runner.update(null).get();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test(expected = ExecutionException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = ExecutionException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testTooFewParamsBatch()", "name": "testTooFewParamsBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsBatch()", "original_string": "    @Test\n    public void testTooFewParamsBatch() throws Exception {\n        final String[][] params = { { \"unit\" }, { \"test\" } };\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testTooFewParamsQuery()", "name": "testTooFewParamsQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsQuery()", "original_string": "    @Test\n    public void testTooFewParamsQuery() throws Exception {\n        callQueryWithException(\"unit\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testTooFewParamsUpdate()", "name": "testTooFewParamsUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooFewParamsUpdate()", "original_string": "    @Test\n    public void testTooFewParamsUpdate() throws Exception {\n        callUpdateWithException(\"unit\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testTooManyParamsBatch()", "name": "testTooManyParamsBatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsBatch()", "original_string": "    @Test\n    public void testTooManyParamsBatch() throws Exception {\n        final String[][] params = { { \"unit\", \"unit\", \"unit\" }, { \"test\", \"test\", \"test\" } };\n\n        callBatchWithException(\"select * from blah where ? = ?\", params);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testTooManyParamsQuery()", "name": "testTooManyParamsQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsQuery()", "original_string": "    @Test\n    public void testTooManyParamsQuery() throws Exception {\n        callQueryWithException(\"unit\", \"test\", \"fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]testTooManyParamsUpdate()", "name": "testTooManyParamsUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTooManyParamsUpdate()", "original_string": "    @Test\n    public void testTooManyParamsUpdate() throws Exception {\n        callUpdateWithException(\"unit\", \"test\", \"fail\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest.[void]testFindMoreThanLocalColumns()", "name": "testFindMoreThanLocalColumns", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindMoreThanLocalColumns()", "original_string": "    @Test\n    public void testFindMoreThanLocalColumns() {\n        int count = 0;\n        for (final ColumnHandler<?> handler : columns) {\n            count++;\n        }\n\n        assertTrue(count > 1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java", "class_name": "ServiceLoaderTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerifying 'more than 1' shows that we found more than we loaded locally which assumes the core handlers were loaded, too.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest.[void]testFindMoreThanLocalProperties()", "name": "testFindMoreThanLocalProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindMoreThanLocalProperties()", "original_string": "    @Test\n    public void testFindMoreThanLocalProperties() {\n        int count = 0;\n        for (final PropertyHandler handler : properties) {\n            count++;\n        }\n\n        assertTrue(count > 1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java", "class_name": "ServiceLoaderTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerifying 'more than 1' shows that we found more than we loaded locally which assumes the core handlers were loaded, too.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest.[void]testFindsLocalColumnHandler()", "name": "testFindsLocalColumnHandler", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindsLocalColumnHandler()", "original_string": "    @Test\n    public void testFindsLocalColumnHandler() {\n        boolean found = false;\n        for (final ColumnHandler<?> handler : columns) {\n            // this class is defined outside of the main classes in dbutils\n            if (handler instanceof TestColumnHandler) {\n                found = true;\n            }\n        }\n\n        assertTrue(found);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java", "class_name": "ServiceLoaderTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest.[void]testFindsLocalPropertyHandler()", "name": "testFindsLocalPropertyHandler", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFindsLocalPropertyHandler()", "original_string": "    @Test\n    public void testFindsLocalPropertyHandler() {\n        boolean found = false;\n        for (final PropertyHandler handler : properties) {\n            // this class is defined outside of the main classes in dbutils\n            if (handler instanceof TestPropertyHandler) {\n                found = true;\n            }\n        }\n\n        assertTrue(found);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java", "class_name": "ServiceLoaderTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest.[void]testHasNextReturnsTrueWhenNotLast()", "name": "testHasNextReturnsTrueWhenNotLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextReturnsTrueWhenNotLast()", "original_string": "    @Test\n    public void testHasNextReturnsTrueWhenNotLast() throws SQLException {\n        when(resultSet.isLast()).thenReturn(false);\n        assertTrue(resultSetIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java", "class_name": "ResultSetIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest.[void]testHasNextReturnsFalseWhenLast()", "name": "testHasNextReturnsFalseWhenLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHasNextReturnsFalseWhenLast()", "original_string": "    @Test\n    public void testHasNextReturnsFalseWhenLast() throws SQLException {\n        when(resultSet.isLast()).thenReturn(true);\n        assertFalse(resultSetIterator.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java", "class_name": "ResultSetIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest.[void]testHasNextThrowsRuntimeExceptionOnSQLException()", "name": "testHasNextThrowsRuntimeExceptionOnSQLException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = RuntimeException.class)\n    public void testHasNextThrowsRuntimeExceptionOnSQLException()", "original_string": "    @Test(expected = RuntimeException.class)\n    public void testHasNextThrowsRuntimeExceptionOnSQLException() throws SQLException {\n        when(resultSet.isLast()).thenThrow(new SQLException(\"Mocked SQLException\"));\n        resultSetIterator.hasNext();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java", "class_name": "ResultSetIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest", "attributes": {"modifiers": "@Test(expected = RuntimeException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = RuntimeException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest.[void]testBeanMapHandlerClassOfV()", "name": "testBeanMapHandlerClassOfV", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBeanMapHandlerClassOfV()", "original_string": "    @Test\n    public void testBeanMapHandlerClassOfV() throws Exception {\n        bmh = new BeanMapHandler<>(TestBean.class);\n        handle();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "class_name": "BeanMapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest.[void]testBeanMapHandlerClassOfVInt()", "name": "testBeanMapHandlerClassOfVInt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBeanMapHandlerClassOfVInt()", "original_string": "    @Test\n    public void testBeanMapHandlerClassOfVInt() throws Exception {\n        bmh = new BeanMapHandler<>(TestBean.class, 2);\n        handle();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "class_name": "BeanMapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest.[void]testBeanMapHandlerClassOfVRowProcessor()", "name": "testBeanMapHandlerClassOfVRowProcessor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBeanMapHandlerClassOfVRowProcessor()", "original_string": "    @Test\n    public void testBeanMapHandlerClassOfVRowProcessor() throws Exception {\n        bmh = new BeanMapHandler<>(TestBean.class, rp);\n        handle();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "class_name": "BeanMapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest.[void]testBeanMapHandlerClassOfVString()", "name": "testBeanMapHandlerClassOfVString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBeanMapHandlerClassOfVString()", "original_string": "    @Test\n    public void testBeanMapHandlerClassOfVString() throws Exception {\n        bmh = new BeanMapHandler<>(TestBean.class, \"id\");\n        handle();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "class_name": "BeanMapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest.[void]testEmptyResultSet()", "name": "testEmptyResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEmptyResultSet()", "original_string": "    @Test\n    public void testEmptyResultSet() throws Exception {\n        when(Boolean.valueOf(rs.next())).thenReturn(Boolean.FALSE);\n        bmh = new BeanMapHandler<>(TestBean.class);\n        res = bmh.handle(rs);\n        assertNull(res.get(Long.valueOf(23L)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "class_name": "BeanMapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandlerTest.java.StringColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        when(getResultSet().getString(1)).thenReturn(\"tester\");\n        assertEquals(String.class, getColumnHandler().apply(getResultSet(), 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandlerTest.java", "class_name": "StringColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandlerTest.java.StringColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandlerTest.java.ShortColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        when(getResultSet().getShort(1)).thenReturn(Short.MIN_VALUE);\n        assertEquals(Short.class, getColumnHandler().apply(getResultSet(), 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandlerTest.java", "class_name": "ShortColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandlerTest.java.ShortColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandlerTest.java.TimestampColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        when(getResultSet().getTimestamp(1)).thenReturn(new Timestamp(new Date().getTime()));\n        assertEquals(Timestamp.class, getColumnHandler().apply(getResultSet(), 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandlerTest.java", "class_name": "TimestampColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandlerTest.java.TimestampColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandlerTest.java.BooleanColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        final ResultSet rs = getResultSet();\n        when(rs.getBoolean(1)).thenReturn(Boolean.TRUE);\n        assertEquals(Boolean.class, getColumnHandler().apply(rs, 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandlerTest.java", "class_name": "BooleanColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandlerTest.java.BooleanColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public abstract void testApplyType()", "original_string": "    @Test\n    public abstract void testApplyType() throws Exception;", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "class_name": "AbstractTestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "attributes": {"modifiers": "@Test\n    public abstract", "marker_annotations": ["@Test"], "non_marker_annotations": ["public", "abstract"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[void]testMatch()", "name": "testMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatch()", "original_string": "    @Test\n    public void testMatch() {\n        assertTrue(handler.match(matchingType));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "class_name": "AbstractTestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[void]testMatchNegative()", "name": "testMatchNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchNegative()", "original_string": "    @Test\n    public void testMatchNegative() {\n        assertFalse(handler.match(Integer.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "class_name": "AbstractTestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandlerTest.java.DoubleColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        final ResultSet rs = getResultSet();\n        when(rs.getDouble(1)).thenReturn(Double.MIN_VALUE);\n        assertEquals(Double.class, getColumnHandler().apply(rs, 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandlerTest.java", "class_name": "DoubleColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandlerTest.java.DoubleColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandlerTest.java.LongColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        when(getResultSet().getLong(1)).thenReturn(Long.MIN_VALUE);\n        assertEquals(Long.class, getColumnHandler().apply(getResultSet(), 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandlerTest.java", "class_name": "LongColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandlerTest.java.LongColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandlerTest.java.SQLXMLColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        when(getResultSet().getSQLXML(1)).thenReturn(sqlxml);\n        assertTrue(SQLXML.class.isAssignableFrom(getColumnHandler().apply(getResultSet(), 1).getClass()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandlerTest.java", "class_name": "SQLXMLColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandlerTest.java.SQLXMLColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandlerTest.java.ByteColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        final ResultSet rs = getResultSet();\n        when(rs.getByte(1)).thenReturn(Byte.MIN_VALUE);\n        assertEquals(Byte.class, getColumnHandler().apply(rs, 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandlerTest.java", "class_name": "ByteColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandlerTest.java.ByteColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java.IntegerColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        when(getResultSet().getInt(1)).thenReturn(Integer.MIN_VALUE);\n        assertEquals(Integer.class, getColumnHandler().apply(getResultSet(), 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java", "class_name": "IntegerColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java.IntegerColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java.IntegerColumnHandlerTest.[void]testMatchNegative()", "name": "testMatchNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testMatchNegative()", "original_string": "    @Override\n    @Test\n    public void testMatchNegative() {\n        assertFalse(getColumnHandler().match(Float.class));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java", "class_name": "IntegerColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java.IntegerColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandlerTest.java.FloatColumnHandlerTest.[void]testApplyType()", "name": "testApplyType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @Test\n    public void testApplyType()", "original_string": "    @Override\n    @Test\n    public void testApplyType() throws Exception {\n        final ResultSet rs = getResultSet();\n        when(rs.getFloat(1)).thenReturn(Float.MIN_VALUE);\n        assertEquals(Float.class, getColumnHandler().apply(rs, 1).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandlerTest.java", "class_name": "FloatColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandlerTest.java.FloatColumnHandlerTest", "attributes": {"modifiers": "@Override\n    @Test\n    public", "marker_annotations": ["@Override", "@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java.PropertyHandlerTest.[void]testFoundMoreThanLocal()", "name": "testFoundMoreThanLocal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFoundMoreThanLocal()", "original_string": "    @Test\n    public void testFoundMoreThanLocal() {\n        int count = 0;\n        for (final PropertyHandler handler : loader) {\n            count++;\n        }\n\n        assertTrue(count > 1);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java", "class_name": "PropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java.PropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nVerifying 'more than 1' shows that we found more than we loaded locally which assumes the core handlers were loaded, too.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java.PropertyHandlerTest.[void]testServiceLoaderFindsMultipleRegistries()", "name": "testServiceLoaderFindsMultipleRegistries", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testServiceLoaderFindsMultipleRegistries()", "original_string": "    @Test\n    public void testServiceLoaderFindsMultipleRegistries() {\n        boolean found = false;\n        for (final PropertyHandler handler : loader) {\n            // this class is defined outside of the main classes of dbutils\n            if (handler instanceof TestPropertyHandler) {\n                found = true;\n            }\n        }\n\n        assertTrue(found);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java", "class_name": "PropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java.PropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java.StringEnumPropertyHandlerTest.[void]testMatch()", "name": "testMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatch()", "original_string": "    @Test\n    public void testMatch() {\n        assertTrue(handler.match(TestEnum.class, \"test\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java", "class_name": "StringEnumPropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java.StringEnumPropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java.StringEnumPropertyHandlerTest.[void]testMatchNegative()", "name": "testMatchNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchNegative()", "original_string": "    @Test\n    public void testMatchNegative() {\n        assertFalse(handler.match(TestEnum.class, Double.valueOf(1)));\n\n        assertFalse(handler.match(Integer.class, \"\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java", "class_name": "StringEnumPropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java.StringEnumPropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest.[void]testApplyTypeOfDate()", "name": "testApplyTypeOfDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApplyTypeOfDate()", "original_string": "    @Test\n    public void testApplyTypeOfDate() throws Exception {\n        assertEquals(java.sql.Date.class, handler.apply(java.sql.Date.class, testValue).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "class_name": "DatePropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest.[void]testApplyTypeOfTime()", "name": "testApplyTypeOfTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApplyTypeOfTime()", "original_string": "    @Test\n    public void testApplyTypeOfTime() throws Exception {\n        assertEquals(Time.class, handler.apply(java.sql.Time.class, testValue).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "class_name": "DatePropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest.[void]testApplyTypeOfTimestamp()", "name": "testApplyTypeOfTimestamp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApplyTypeOfTimestamp()", "original_string": "    @Test\n    public void testApplyTypeOfTimestamp() throws Exception {\n        assertEquals(Timestamp.class, handler.apply(java.sql.Timestamp.class, testValue).getClass());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "class_name": "DatePropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest.[void]testMatch()", "name": "testMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatch()", "original_string": "    @Test\n    public void testMatch() {\n        assertTrue(handler.match(java.sql.Date.class, testValue));\n        assertTrue(handler.match(java.sql.Time.class, testValue));\n        assertTrue(handler.match(java.sql.Timestamp.class, testValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "class_name": "DatePropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest.[void]testMatchNegative()", "name": "testMatchNegative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMatchNegative()", "original_string": "    @Test\n    public void testMatchNegative() {\n        assertFalse(handler.match(Float.class, null));\n        assertFalse(handler.match(Float.class, testValue));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "class_name": "DatePropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest.[void]testNotMatch()", "name": "testNotMatch", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNotMatch()", "original_string": "    @Test\n    public void testNotMatch() {\n        final Timestamp ts = new Timestamp(testValue.getTime());\n        assertFalse(handler.match(java.sql.Timestamp.class, ts));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "class_name": "DatePropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]