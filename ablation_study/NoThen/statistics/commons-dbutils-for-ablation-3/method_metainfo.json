[{"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testCheckAnnotationOnMissingReadMethod()", "name": "testCheckAnnotationOnMissingReadMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCheckAnnotationOnMissingReadMethod()", "original_string": "    public void testCheckAnnotationOnMissingReadMethod() throws Exception {\n        final String[] colNames = { \"testField\" };\n        final ResultSetMetaData metaData = MockResultSetMetaData.create(colNames);\n\n        final String testField = \"first\";\n        final Object[][] rows = { new Object[] { testField } };\n\n        final ResultSet rs = MockResultSet.create(metaData, rows);\n        assertTrue(rs.next());\n        TestNoGetter testCls = new TestNoGetter();\n        testCls = beanProc.populateBean(rs, testCls);\n        assertEquals(testCls.testField, \"first\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testIndexedPropertyDescriptor()", "name": "testIndexedPropertyDescriptor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testIndexedPropertyDescriptor()", "original_string": "    public void testIndexedPropertyDescriptor() throws Exception {\n        final String[] colNames = { \"name\", \"things\", \"stuff\" };\n        final ResultSetMetaData metaData = MockResultSetMetaData.create(colNames);\n\n        final String name = \"first\";\n        final List<String> things = Arrays.asList(\"1\", \"2\", \"3\", \"4\");\n        final List<String> stuff = things;\n        final Object[][] rows = { new Object[] { name, things, stuff } };\n\n        final ResultSet rs = MockResultSet.create(metaData, rows);\n        assertTrue(rs.next());\n        IndexedPropertyTestClass testCls = new IndexedPropertyTestClass();\n        testCls = beanProc.populateBean(rs, testCls);\n        assertEquals(name, testCls.getName());\n        assertArrayEquals(things.toArray(), testCls.getThings().toArray());\n        assertArrayEquals(stuff.toArray(), testCls.getStuff().toArray());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nBased on the report in DBUTILS-150. This test validates that indexed property descriptors are not used, and indexed getter/setter methods are not\ninspected.\n\n@throws Exception\n@see <a href=\"https://issues.apache.org/jira/browse/DBUTILS-150\">DBUTILS-150</a>\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testMapColumnToAnnotationField()", "name": "testMapColumnToAnnotationField", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testMapColumnToAnnotationField()", "original_string": "    public void testMapColumnToAnnotationField() throws Exception {\n        final String[] columnNames = { \"test\", \"test\", \"three_\" };\n        final String[] columnLabels = { \"one\", \"two\", null };\n        final ResultSetMetaData rsmd = ProxyFactory.instance().createResultSetMetaData(new MockResultSetMetaData(columnNames, columnLabels));\n        final PropertyDescriptor[] props = Introspector.getBeanInfo(MapColumnToAnnotationFieldBean.class).getPropertyDescriptors();\n\n        final int[] columns = beanProc.mapColumnsToProperties(rsmd, props);\n        for (int i = 1; i < columns.length; i++) {\n            assertTrue(columns[i] != BeanProcessor.PROPERTY_NOT_FOUND);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testMapColumnToProperties()", "name": "testMapColumnToProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testMapColumnToProperties()", "original_string": "    public void testMapColumnToProperties() throws Exception {\n        final String[] columnNames = { \"test\", \"test\", \"three\" };\n        final String[] columnLabels = { \"one\", \"two\", null };\n        final ResultSetMetaData rsmd = ProxyFactory.instance().createResultSetMetaData(new MockResultSetMetaData(columnNames, columnLabels));\n        final PropertyDescriptor[] props = Introspector.getBeanInfo(MapColumnToPropertiesBean.class).getPropertyDescriptors();\n\n        final int[] columns = beanProc.mapColumnsToProperties(rsmd, props);\n        for (int i = 1; i < columns.length; i++) {\n            assertTrue(columns[i] != BeanProcessor.PROPERTY_NOT_FOUND);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testMapColumnToPropertiesWithOverrides()", "name": "testMapColumnToPropertiesWithOverrides", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testMapColumnToPropertiesWithOverrides()", "original_string": "    public void testMapColumnToPropertiesWithOverrides() throws Exception {\n        final Map<String, String> columnToPropertyOverrides = new HashMap<>();\n        columnToPropertyOverrides.put(\"five\", \"four\");\n        final BeanProcessor beanProc = new BeanProcessor(columnToPropertyOverrides);\n        final String[] columnNames = { \"test\", \"test\", \"three\", \"five\" };\n        final String[] columnLabels = { \"one\", \"two\", null, null };\n        final ResultSetMetaData rsmd = ProxyFactory.instance().createResultSetMetaData(new MockResultSetMetaData(columnNames, columnLabels));\n        final PropertyDescriptor[] props = Introspector.getBeanInfo(MapColumnToPropertiesBean.class).getPropertyDescriptors();\n\n        final int[] columns = beanProc.mapColumnsToProperties(rsmd, props);\n        for (int i = 1; i < columns.length; i++) {\n            assertTrue(columns[i] != BeanProcessor.PROPERTY_NOT_FOUND);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testProcessWithPopulateBean()", "name": "testProcessWithPopulateBean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testProcessWithPopulateBean()", "original_string": "    public void testProcessWithPopulateBean() throws SQLException {\n        TestBean b = new TestBean();\n        final ResultSet rs = getResultSet();\n        assertTrue(rs.next());\n        b = beanProc.populateBean(rs, b);\n        assertEquals(13.0, b.getColumnProcessorDoubleTest(), 0);\n        assertEquals(b.getThree(), TestBean.Ordinal.THREE);\n\n        assertTrue(rs.next());\n        b = beanProc.populateBean(rs, b);\n        assertEquals(13.0, b.getColumnProcessorDoubleTest(), 0);\n        assertEquals(b.getThree(), TestBean.Ordinal.SIX);\n\n        assertFalse(rs.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testProcessWithToBean()", "name": "testProcessWithToBean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testProcessWithToBean()", "original_string": "    public void testProcessWithToBean() throws SQLException {\n        final ResultSet rs = getResultSet();\n        assertTrue(rs.next());\n        TestBean b = beanProc.toBean(rs, TestBean.class);\n        assertEquals(13.0, b.getColumnProcessorDoubleTest(), 0);\n        assertEquals(b.getThree(), TestBean.Ordinal.THREE);\n\n        assertTrue(rs.next());\n        b = beanProc.toBean(rs, TestBean.class);\n        assertEquals(13.0, b.getColumnProcessorDoubleTest(), 0);\n        assertEquals(b.getThree(), TestBean.Ordinal.SIX);\n\n        assertFalse(rs.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest.[void]testWrongSetterParamCount()", "name": "testWrongSetterParamCount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testWrongSetterParamCount()", "original_string": "    public void testWrongSetterParamCount() throws Exception {\n        final String[] colNames = { \"testField\" };\n        final ResultSetMetaData metaData = MockResultSetMetaData.create(colNames);\n\n        final Integer testField = 1;\n        final Object[][] rows = { new Object[] { testField } };\n\n        final ResultSet rs = MockResultSet.create(metaData, rows);\n        assertTrue(rs.next());\n        TestWrongSetter testCls = new TestWrongSetter();\n        testCls = beanProc.populateBean(rs, testCls);\n        assertNull(testCls.testField);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java", "class_name": "BeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BeanProcessorTest.java.BeanProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[ResultSet]create(ResultSetMetaData,Object[][])", "name": "create", "arg_nums": 2, "params": [{"name": "metaData", "type": "ResultSetMetaData"}, {"name": "rows", "type": "Object[][]"}], "return_type": "ResultSet", "signature": "public static ResultSet create(final ResultSetMetaData metaData, final Object[][] rows)", "original_string": "    public static ResultSet create(final ResultSetMetaData metaData, final Object[][] rows) {\n        return ProxyFactory.instance().createResultSet(new MockResultSet(metaData, rows));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": "\nCreate a {@code MockResultSet} proxy object. This is equivalent to:\n\n<pre>\nProxyFactory.instance().createResultSet(new MockResultSet(metaData, rows));\n</pre>\n\n@param metaData\n@param rows     A null value indicates an empty {@code ResultSet}.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[]MockResultSet(ResultSetMetaData,Object[][])", "name": "MockResultSet", "arg_nums": 2, "params": [{"name": "metaData", "type": "ResultSetMetaData"}, {"name": "rows", "type": "Object[][]"}], "return_type": "", "signature": "public MockResultSet(final ResultSetMetaData metaData, final Object[][] rows)", "original_string": "    public MockResultSet(final ResultSetMetaData metaData, final Object[][] rows) {\n        this.metaData = metaData;\n        if (rows == null) {\n            final List<Object[]> empty = Collections.emptyList();\n            this.iter = empty.iterator();\n        } else {\n            this.iter = Arrays.asList(rows).iterator();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nMockResultSet constructor.\n\n@param metaData\n@param rows     A null value indicates an empty {@code ResultSet}.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[int]columnIndex(Object[])", "name": "columnIndex", "arg_nums": 1, "params": [{"name": "args", "type": "Object[]"}], "return_type": "int", "signature": "private int columnIndex(final Object[] args)", "original_string": "    private int columnIndex(final Object[] args) throws SQLException {\n\n        if (args[0] instanceof Integer) {\n            return ((Integer) args[0]).intValue();\n\n        }\n        if (args[0] instanceof String) {\n            return columnNameToIndex((String) args[0]);\n\n        }\n        throw new SQLException(args[0] + \" must be Integer or String\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nThe get* methods can have an int column index or a String column name as the parameter. This method handles both cases and returns the column index that\nthe client is trying to get at.\n\n@param args\n@return A column index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[int]columnNameToIndex(String)", "name": "columnNameToIndex", "arg_nums": 1, "params": [{"name": "columnName", "type": "String"}], "return_type": "int", "signature": "private int columnNameToIndex(final String columnName)", "original_string": "    private int columnNameToIndex(final String columnName) throws SQLException {\n        for (int i = 0; i < this.currentRow.length; i++) {\n            final int c = i + 1;\n            if (this.metaData.getColumnName(c).equalsIgnoreCase(columnName)) {\n                return c;\n            }\n        }\n\n        throw new SQLException(columnName + \" is not a valid column name.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns the column index for the given column name.\n\n@return A 1 based index\n@throws SQLException if the column name is invalid\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getBoolean(int)", "name": "getBoolean", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getBoolean(final int columnIndex)", "original_string": "    protected Object getBoolean(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n\n        try {\n            return obj == null ? Boolean.FALSE : Boolean.valueOf(obj.toString());\n\n        } catch (final NumberFormatException e) {\n            throw new SQLException(e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the boolean value at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getByte(int)", "name": "getByte", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getByte(final int columnIndex)", "original_string": "    protected Object getByte(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n\n        try {\n            return obj == null ? Byte.valueOf((byte) 0) : Byte.valueOf(obj.toString());\n\n        } catch (final NumberFormatException e) {\n            throw new SQLException(e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the byte value at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getDouble(int)", "name": "getDouble", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getDouble(final int columnIndex)", "original_string": "    protected Object getDouble(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n\n        try {\n            return obj == null ? Double.valueOf(0) : Double.valueOf(obj.toString());\n\n        } catch (final NumberFormatException e) {\n            throw new SQLException(e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the double value at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getFloat(int)", "name": "getFloat", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getFloat(final int columnIndex)", "original_string": "    protected Object getFloat(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n\n        try {\n            return obj == null ? Float.valueOf(0) : Float.valueOf(obj.toString());\n\n        } catch (final NumberFormatException e) {\n            throw new SQLException(e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the float value at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getInt(int)", "name": "getInt", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getInt(final int columnIndex)", "original_string": "    protected Object getInt(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n\n        try {\n            return obj == null ? Integer.valueOf(0) : Integer.valueOf(obj.toString());\n\n        } catch (final NumberFormatException e) {\n            throw new SQLException(e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the int value at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getLong(int)", "name": "getLong", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getLong(final int columnIndex)", "original_string": "    protected Object getLong(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n\n        try {\n            return obj == null ? Long.valueOf(0) : Long.valueOf(obj.toString());\n\n        } catch (final NumberFormatException e) {\n            throw new SQLException(e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the long value at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[ResultSetMetaData]getMetaData()", "name": "getMetaData", "arg_nums": 0, "params": [], "return_type": "ResultSetMetaData", "signature": "protected ResultSetMetaData getMetaData()", "original_string": "    protected ResultSetMetaData getMetaData() throws SQLException {\n        return this.metaData;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "ResultSetMetaData", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getObject(int)", "name": "getObject", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getObject(final int columnIndex)", "original_string": "    protected Object getObject(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n        return obj;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the object at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]getShort(int)", "name": "getShort", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected Object getShort(final int columnIndex)", "original_string": "    protected Object getShort(final int columnIndex) throws SQLException {\n        final Object obj = this.currentRow[columnIndex - 1];\n        setWasNull(obj);\n\n        try {\n            return obj == null ? Short.valueOf((short) 0) : Short.valueOf(obj.toString());\n\n        } catch (final NumberFormatException e) {\n            throw new SQLException(e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the short value at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[String]getString(int)", "name": "getString", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "String", "signature": "protected String getString(final int columnIndex)", "original_string": "    protected String getString(final int columnIndex) throws SQLException {\n        final Object obj = getObject(columnIndex);\n        setWasNull(obj);\n        return Objects.toString(obj, null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the String at the given column index.\n\n@param columnIndex A 1 based index.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]handleColumnMethod(String,Object[])", "name": "handleColumnMethod", "arg_nums": 2, "params": [{"name": "methodName", "type": "String"}, {"name": "args", "type": "Object[]"}], "return_type": "Object", "signature": "private Object handleColumnMethod(final String methodName, final Object[] args)", "original_string": "    private Object handleColumnMethod(final String methodName, final Object[] args) throws SQLException {\n        switch (methodName) {\n            case \"getBoolean\":\n                return getBoolean(columnIndex(args));\n            case \"getByte\":\n                return getByte(columnIndex(args));\n            case \"getDouble\":\n                return getDouble(columnIndex(args));\n            case \"getFloat\":\n                return getFloat(columnIndex(args));\n            case \"getInt\":\n                return getInt(columnIndex(args));\n            case \"getLong\":\n                return getLong(columnIndex(args));\n            case \"getObject\":\n                return getObject(columnIndex(args));\n            case \"getShort\":\n                return getShort(columnIndex(args));\n            case \"getString\":\n                return getString(columnIndex(args));\n            case \"wasNull\":\n                return wasNull();\n            default:\n                throw new UnsupportedOperationException(\"Unsupported column method: \" + methodName);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]handleNonColumnMethod(String,Object,Object[])", "name": "handleNonColumnMethod", "arg_nums": 3, "params": [{"name": "methodName", "type": "String"}, {"name": "proxy", "type": "Object"}, {"name": "args", "type": "Object[]"}], "return_type": "Object", "signature": "private Object handleNonColumnMethod(final String methodName, final Object proxy, final Object[] args)", "original_string": "    private Object handleNonColumnMethod(final String methodName, final Object proxy, final Object[] args) throws SQLException {\n        switch (methodName) {\n            case \"isLast\":\n                return isLast();\n            case \"hashCode\":\n                return Integer.valueOf(System.identityHashCode(proxy));\n            case \"toString\":\n                return \"MockResultSet \" + System.identityHashCode(proxy);\n            case \"equals\":\n                return Boolean.valueOf(proxy == args[0]);\n            default:\n                throw new UnsupportedOperationException(\"Unsupported non-column method: \" + methodName);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Object]invoke(Object,Method,Object[])", "name": "invoke", "arg_nums": 3, "params": [{"name": "proxy", "type": "Object"}, {"name": "method", "type": "Method"}, {"name": "args", "type": "Object[]"}], "return_type": "Object", "signature": "@Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)", "original_string": "    @Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)\n        throws Throwable {\n\n        final String methodName = method.getName();\n        switch (methodName) {\n        case \"getMetaData\":\n            return getMetaData();\n        case \"next\":\n            return next();\n        case \"previous\":\n            break;\n        case \"close\":\n            break;\n        default:\n            if (isColumnMethod(methodName)) {\n                return handleColumnMethod(methodName, args);\n            } else if (METHOD_NAMES.contains(methodName)) {\n                return handleNonColumnMethod(methodName, proxy, args);\n            }\n            break;\n        }\n        throw new UnsupportedOperationException(\"Unsupported method: \" + methodName);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[boolean]isColumnMethod(String)", "name": "isColumnMethod", "arg_nums": 1, "params": [{"name": "methodName", "type": "String"}], "return_type": "boolean", "signature": "private boolean isColumnMethod(final String methodName)", "original_string": "    private boolean isColumnMethod(final String methodName) {\n        return methodName.startsWith(\"get\") || methodName.equals(\"wasNull\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Boolean]isLast()", "name": "isLast", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "protected Boolean isLast()", "original_string": "    protected Boolean isLast() throws SQLException {\n        return this.iter.hasNext() ? Boolean.FALSE : Boolean.TRUE;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Boolean]next()", "name": "next", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "protected Boolean next()", "original_string": "    protected Boolean next() throws SQLException {\n        if (!this.iter.hasNext()) {\n            return Boolean.FALSE;\n        }\n        this.currentRow = iter.next();\n        return Boolean.TRUE;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[void]setWasNull(Object)", "name": "setWasNull", "arg_nums": 1, "params": [{"name": "isNull", "type": "Object"}], "return_type": "void", "signature": "private void setWasNull(final Object isNull)", "original_string": "    private void setWasNull(final Object isNull) {\n        this.wasNull = isNull == null ? Boolean.TRUE : Boolean.FALSE;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAssigns this.wasNull a Boolean value based on the object passed in.\n\n@param isNull\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet.[Boolean]wasNull()", "name": "wasNull", "arg_nums": 0, "params": [], "return_type": "Boolean", "signature": "protected Boolean wasNull()", "original_string": "    protected Boolean wasNull() throws SQLException {\n        return this.wasNull;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSet.java", "class_name": "MockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSet.java.MockResultSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java.ResultSetIterator_removeTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() throws SQLException {\n        mockResultSet = mock(ResultSet.class);\n        when(mockResultSet.getMetaData()).thenReturn(mock(java.sql.ResultSetMetaData.class));\n        resultSetIterator = new ResultSetIterator(mockResultSet);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java", "class_name": "ResultSetIterator_removeTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java.ResultSetIterator_removeTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callBatchWithException(String,Object[][])", "name": "callBatchWithException", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "params", "type": "Object[][]"}], "return_type": "void", "signature": "private void callBatchWithException(final String sql, final Object[][] params)", "original_string": "    private void callBatchWithException(final String sql, final Object[][] params) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        boolean caught = false;\n\n        try {\n            runner.batch(sql, params);\n\n            verify(prepStmt, times(1)).getParameterMetaData();\n            verify(prepStmt, times(2)).addBatch();\n            verify(prepStmt, times(1)).executeBatch();\n            verify(prepStmt, times(1)).close();    // make sure the statement is closed\n            verify(conn, times(1)).close();    // make sure the connection is closed\n        } catch (final SQLException e) {\n            System.out.println(\"[TEST] The following exception is expected:\");\n            System.out.println(e);\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " helper method for calling batch when an exception is expected"}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callExecuteWithException()", "name": "callExecuteWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callExecuteWithException(final Object... params)", "original_string": "    private void callExecuteWithException(final Object... params) throws Exception {\n        boolean caught = false;\n\n        try {\n            when(meta.getParameterCount()).thenReturn(2);\n            runner.query(\"{call my_proc(?, ?)}\", handler, params);\n\n        } catch (final SQLException e) {\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " helper method for calling execute when an exception is expected"}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callExecuteWithResultSetWithException()", "name": "callExecuteWithResultSetWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callExecuteWithResultSetWithException(final Object... params)", "original_string": "    private void callExecuteWithResultSetWithException(final Object... params) throws Exception {\n        boolean caught = false;\n\n        try {\n            when(meta.getParameterCount()).thenReturn(2);\n            runner.execute(\"{call my_proc(?, ?)}\", handler, params);\n\n        } catch (final SQLException e) {\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " helper method for calling execute when an exception is expected"}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodBatch(Connection,Object[][])", "name": "callGoodBatch", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "params", "type": "Object[][]"}], "return_type": "void", "signature": "private void callGoodBatch(final Connection conn, final Object[][] params)", "original_string": "    private void callGoodBatch(final Connection conn, final Object[][] params) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        runner.batch(conn, \"select * from blah where ? = ?\", params);\n\n        verify(prepStmt, times(1)).getParameterMetaData();\n        verify(prepStmt, times(2)).addBatch();\n        verify(prepStmt, times(1)).executeBatch();\n        // make sure we closed the statement\n        verify(prepStmt, times(1)).close();\n        // make sure we do not close the connection, since QueryRunner.batch(Connection, String, Object[][]) does not close connections\n        verify(conn, times(0)).close();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodBatch(Object[][])", "name": "callGoodBatch", "arg_nums": 1, "params": [{"name": "params", "type": "Object[][]"}], "return_type": "void", "signature": "private void callGoodBatch(final Object[][] params)", "original_string": "    private void callGoodBatch(final Object[][] params) throws Exception {\n        callGoodBatch(params, true);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodBatch(Object[][],boolean)", "name": "callGoodBatch", "arg_nums": 2, "params": [{"name": "params", "type": "Object[][]"}, {"name": "pmdCheck", "type": "boolean"}], "return_type": "void", "signature": "private void callGoodBatch(final Object[][] params, final boolean pmdCheck)", "original_string": "    private void callGoodBatch(final Object[][] params, final boolean pmdCheck) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        runner.batch(\"select * from blah where ? = ?\", params);\n\n        verify(prepStmt, times(pmdCheck ? 1 : 0)).getParameterMetaData();\n        verify(prepStmt, times(2)).addBatch();\n        verify(prepStmt, times(1)).executeBatch();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodExecute()", "name": "callGoodExecute", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callGoodExecute()", "original_string": "    private void callGoodExecute() throws Exception {\n        when(call.execute()).thenReturn(false);\n        when(call.getUpdateCount()).thenReturn(3);\n\n        when(meta.getParameterCount()).thenReturn(2);\n        int result = runner.execute(\"{call my_proc(?, ?)}\", \"unit\", \"test\");\n\n        Assert.assertEquals(3, result);\n\n        verify(call, times(1)).execute();\n        verify(call, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we do not close the connection\n\n        // call the other variation of query\n        when(meta.getParameterCount()).thenReturn(0);\n        result = runner.execute(\"{call my_proc()}\");\n\n        Assert.assertEquals(3, result);\n\n        verify(call, times(2)).execute();\n        verify(call, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(2)).close();    // make sure we do not close the connection\n\n        // Test single OUT parameter\n        when(meta.getParameterCount()).thenReturn(1);\n        when(call.getObject(1)).thenReturn(42);\n        final OutParameter<Integer> intParam =\n            new OutParameter<>(Types.INTEGER, Integer.class);\n        result = runner.execute(\"{?= call my_proc()}\", intParam);\n\n        Assert.assertEquals(42, intParam.getValue().intValue());\n        Assert.assertEquals(3, result);\n\n        verify(call, times(3)).execute();\n        verify(call, times(3)).close();    // make sure we closed the statement\n        verify(conn, times(3)).close();    // make sure we do not close the connection\n\n        // Test OUT parameters with IN parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(4242);\n        intParam.setValue(null);\n        result = runner.execute(\"{?= call my_proc(?, ?)}\", intParam, \"unit\", \"test\");\n\n        Assert.assertEquals(4242, intParam.getValue().intValue());\n        Assert.assertEquals(3, result);\n\n        verify(call, times(4)).execute();\n        verify(call, times(4)).close();    // make sure we closed the statement\n        verify(conn, times(4)).close();    // make sure we do not close the connection\n\n        // Test INOUT parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(24);\n        when(call.getObject(3)).thenReturn(\"out\");\n        intParam.setValue(null);\n        final OutParameter<String> stringParam =\n            new OutParameter<>(Types.VARCHAR, String.class, \"in\");\n        result = runner.execute(\"{?= call my_proc(?, ?)}\", intParam, \"test\", stringParam);\n\n        Assert.assertEquals(24, intParam.getValue().intValue());\n        Assert.assertEquals(\"out\", stringParam.getValue());\n        Assert.assertEquals(3, result);\n\n        verify(call, times(5)).execute();\n        verify(call, times(5)).close();    // make sure we closed the statement\n        verify(conn, times(5)).close();    // make sure we do not close the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodExecute(Connection)", "name": "callGoodExecute", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "private void callGoodExecute(final Connection conn)", "original_string": "    private void callGoodExecute(final Connection conn) throws Exception {\n        when(call.execute()).thenReturn(false);\n        when(call.getUpdateCount()).thenReturn(3);\n\n        when(meta.getParameterCount()).thenReturn(2);\n        int result = runner.execute(conn, \"{call my_proc(?, ?)}\", \"unit\", \"test\");\n\n        Assert.assertEquals(3, result);\n\n        verify(call, times(1)).execute();\n        verify(call, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // call the other variation of query\n        when(meta.getParameterCount()).thenReturn(0);\n        result = runner.execute(conn, \"{call my_proc()}\");\n\n        Assert.assertEquals(3, result);\n\n        verify(call, times(2)).execute();\n        verify(call, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // Test single OUT parameter\n        when(meta.getParameterCount()).thenReturn(1);\n        when(call.getObject(1)).thenReturn(42);\n        final OutParameter<Integer> intParam =\n            new OutParameter<>(Types.INTEGER, Integer.class);\n        result = runner.execute(conn, \"{?= call my_proc()}\", intParam);\n\n        Assert.assertEquals(42, intParam.getValue().intValue());\n        Assert.assertEquals(3, result);\n\n        verify(call, times(3)).execute();\n        verify(call, times(3)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // Test OUT parameters with IN parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(4242);\n        intParam.setValue(null);\n        result = runner.execute(conn, \"{?= call my_proc(?, ?)}\", intParam, \"unit\", \"test\");\n\n        Assert.assertEquals(4242, intParam.getValue().intValue());\n        Assert.assertEquals(3, result);\n\n        verify(call, times(4)).execute();\n        verify(call, times(4)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // Test INOUT parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(24);\n        when(call.getObject(3)).thenReturn(\"out\");\n        intParam.setValue(null);\n        final OutParameter<String> stringParam =\n            new OutParameter<>(Types.VARCHAR, String.class, \"in\");\n        result = runner.execute(conn, \"{?= call my_proc(?, ?)}\", intParam, \"test\", stringParam);\n\n        Assert.assertEquals(24, intParam.getValue().intValue());\n        Assert.assertEquals(\"out\", stringParam.getValue());\n        Assert.assertEquals(3, result);\n\n        verify(call, times(5)).execute();\n        verify(call, times(5)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodExecuteWithResultSet()", "name": "callGoodExecuteWithResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callGoodExecuteWithResultSet()", "original_string": "    private void callGoodExecuteWithResultSet() throws Exception {\n        when(call.execute()).thenReturn(true);\n\n        when(meta.getParameterCount()).thenReturn(2);\n        runner.execute(\"{call my_proc(?, ?)}\", handler, \"unit\", \"test\");\n\n        verify(call, times(1)).execute();\n        verify(results, times(1)).close();\n        verify(call, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we do not close the connection\n\n        // call the other variation of query\n        when(meta.getParameterCount()).thenReturn(0);\n        runner.execute(\"{call my_proc()}\", handler);\n\n        verify(call, times(2)).execute();\n        verify(results, times(2)).close();\n        verify(call, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(2)).close();    // make sure we do not close the connection\n\n        // Test single OUT parameter\n        when(meta.getParameterCount()).thenReturn(1);\n        when(call.getObject(1)).thenReturn(42);\n        final OutParameter<Integer> intParam =\n            new OutParameter<>(Types.INTEGER, Integer.class);\n        runner.execute(\"{?= call my_proc()}\", handler, intParam);\n\n        Assert.assertEquals(42, intParam.getValue().intValue());\n\n        verify(call, times(3)).execute();\n        verify(results, times(3)).close();\n        verify(call, times(3)).close();    // make sure we closed the statement\n        verify(conn, times(3)).close();    // make sure we do not close the connection\n\n        // Test OUT parameters with IN parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(4242);\n        intParam.setValue(null);\n        runner.execute(\"{?= call my_proc(?, ?)}\", handler, intParam, \"unit\", \"test\");\n\n        Assert.assertEquals(4242, intParam.getValue().intValue());\n\n        verify(call, times(4)).execute();\n        verify(results, times(4)).close();\n        verify(call, times(4)).close();    // make sure we closed the statement\n        verify(conn, times(4)).close();    // make sure we do not close the connection\n\n        // Test INOUT parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(24);\n        when(call.getObject(3)).thenReturn(\"out\");\n        intParam.setValue(null);\n        final OutParameter<String> stringParam =\n            new OutParameter<>(Types.VARCHAR, String.class, \"in\");\n        runner.execute(\"{?= call my_proc(?, ?)}\", handler, intParam, \"test\", stringParam);\n\n        Assert.assertEquals(24, intParam.getValue().intValue());\n        Assert.assertEquals(\"out\", stringParam.getValue());\n\n        verify(call, times(5)).execute();\n        verify(results, times(5)).close();\n        verify(call, times(5)).close();    // make sure we closed the statement\n        verify(conn, times(5)).close();    // make sure we do not close the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodExecuteWithResultSet(Connection)", "name": "callGoodExecuteWithResultSet", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "private void callGoodExecuteWithResultSet(final Connection conn)", "original_string": "    private void callGoodExecuteWithResultSet(final Connection conn) throws Exception {\n        when(call.execute()).thenReturn(true);\n\n        when(meta.getParameterCount()).thenReturn(2);\n        runner.execute(conn, \"{call my_proc(?, ?)}\", handler, \"unit\", \"test\");\n\n        verify(call, times(1)).execute();\n        verify(results, times(1)).close();\n        verify(call, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // call the other variation of query\n        when(meta.getParameterCount()).thenReturn(0);\n        runner.execute(conn, \"{call my_proc()}\", handler);\n\n        verify(call, times(2)).execute();\n        verify(results, times(2)).close();\n        verify(call, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // Test single OUT parameter\n        when(meta.getParameterCount()).thenReturn(1);\n        when(call.getObject(1)).thenReturn(42);\n        final OutParameter<Integer> intParam =\n            new OutParameter<>(Types.INTEGER, Integer.class);\n        runner.execute(conn, \"{?= call my_proc()}\", handler, intParam);\n\n        Assert.assertEquals(42, intParam.getValue().intValue());\n\n        verify(call, times(3)).execute();\n        verify(results, times(3)).close();\n        verify(call, times(3)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // Test OUT parameters with IN parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(4242);\n        intParam.setValue(null);\n        runner.execute(conn, \"{?= call my_proc(?, ?)}\", handler, intParam, \"unit\", \"test\");\n\n        Assert.assertEquals(4242, intParam.getValue().intValue());\n\n        verify(call, times(4)).execute();\n        verify(results, times(4)).close();\n        verify(call, times(4)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n\n        // Test INOUT parameters\n        when(meta.getParameterCount()).thenReturn(3);\n        when(call.getObject(1)).thenReturn(24);\n        when(call.getObject(3)).thenReturn(\"out\");\n        intParam.setValue(null);\n        final OutParameter<String> stringParam =\n            new OutParameter<>(Types.VARCHAR, String.class, \"in\");\n        runner.execute(conn, \"{?= call my_proc(?, ?)}\", handler, intParam, \"test\", stringParam);\n\n        Assert.assertEquals(24, intParam.getValue().intValue());\n        Assert.assertEquals(\"out\", stringParam.getValue());\n\n        verify(call, times(5)).execute();\n        verify(results, times(5)).close();\n        verify(call, times(5)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodQuery()", "name": "callGoodQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callGoodQuery()", "original_string": "    private void callGoodQuery() throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        String sql = \"select * from blah where ? = ?\";\n        runner.query(sql, handler, \"unit\", \"test\");\n\n        verify(prepStmt, times(1)).executeQuery();\n        verify(results, times(1)).close();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we closed the connection\n\n        // call the other variation of query\n        sql = \"select * from blah\";\n        runner.query(sql, handler);\n\n        verify(stmt, times(1)).executeQuery(sql);\n        verify(results, times(2)).close();\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(2)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodQuery(Connection)", "name": "callGoodQuery", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "private void callGoodQuery(final Connection conn)", "original_string": "    private void callGoodQuery(final Connection conn) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        String sql = \"select * from blah where ? = ?\";\n        runner.query(conn, sql, handler, \"unit\", \"test\");\n\n        verify(prepStmt, times(1)).executeQuery();\n        verify(results, times(1)).close();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        // make sure we do not close the connection, since QueryRunner.query(Connection, String, ResultSetHandler<T>, Object...) does not close connections\n        verify(conn, times(0)).close();\n        // call the other variation of query\n        sql = \"select * from blah\";\n        runner.query(conn, sql, handler);\n\n        verify(stmt, times(1)).executeQuery(sql);\n        verify(results, times(2)).close();\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection, see above\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodUpdate()", "name": "callGoodUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callGoodUpdate()", "original_string": "    private void callGoodUpdate() throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        String sql = \"update blah set ? = ?\";\n        runner.update(sql, \"unit\", \"test\");\n\n        verify(prepStmt, times(1)).executeUpdate();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we closed the connection\n\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(0);\n        sql = \"update blah set unit = test\";\n        runner.update(sql);\n\n        verify(stmt, times(1)).executeUpdate(sql);\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(2)).close();    // make sure we closed the connection\n\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(1);\n        sql = \"update blah set unit = ?\";\n        runner.update(sql, \"test\");\n\n        verify(prepStmt, times(2)).executeUpdate();\n        verify(prepStmt, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(3)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callGoodUpdate(Connection)", "name": "callGoodUpdate", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "private void callGoodUpdate(final Connection conn)", "original_string": "    private void callGoodUpdate(final Connection conn) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        runner.update(conn, \"update blah set ? = ?\", \"unit\", \"test\");\n\n        verify(prepStmt, times(1)).executeUpdate();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        // make sure we do not close the connection, since QueryRunner.update(Connection, String, Object...) does not close connections\n        verify(conn, times(0)).close();\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(0);\n        final String sql = \"update blah set unit = test\";\n        runner.update(conn, sql);\n\n        verify(stmt, times(1)).executeUpdate(sql);\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection, see above\n\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(1);\n        runner.update(conn, \"update blah set unit = ?\", \"test\");\n\n        verify(prepStmt, times(2)).executeUpdate();\n        verify(prepStmt, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we do not close the connection, see above\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callQueryWithException()", "name": "callQueryWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callQueryWithException(final Object... params)", "original_string": "    private void callQueryWithException(final Object... params) throws Exception {\n        boolean caught = false;\n\n        try {\n            when(meta.getParameterCount()).thenReturn(2);\n            final String sql = \"select * from blah where ? = ?\";\n            runner.query(sql, handler, params);\n\n            verify(prepStmt, never()).close(); // make sure the statement is still open\n            verify(prepStmt, times(1)).executeQuery();\n            verify(prepStmt, times(1)).close(); // make sure we closed the statement\n            verify(results, times(1)).close();\n            verify(conn, times(1)).close(); // make sure we closed the connection\n        } catch (final SQLException e) {\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Helper method for calling batch when an exception is expected."}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]callUpdateWithException()", "name": "callUpdateWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callUpdateWithException(final Object... params)", "original_string": "    private void callUpdateWithException(final Object... params) throws Exception {\n        boolean caught = false;\n\n        try {\n            when(meta.getParameterCount()).thenReturn(2);\n            final String sql = \"select * from blah where ? = ?\";\n            runner.update(sql, params);\n\n            verify(prepStmt, times(1)).executeUpdate();\n            verify(prepStmt, times(1)).close(); // make sure we closed the statement\n            verify(conn, times(1)).close(); // make sure we closed the connection\n        } catch (final SQLException e) {\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " helper method for calling batch when an exception is expected"}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() throws Exception {\n        when(dataSource.getConnection()).thenReturn(conn);\n\n        when(conn.prepareStatement(any(String.class))).thenReturn(prepStmt);\n        when(prepStmt.getParameterMetaData()).thenReturn(meta);\n        when(prepStmt.executeQuery()).thenReturn(results);\n\n        when(conn.createStatement()).thenReturn(stmt);\n        when(stmt.executeQuery(any(String.class))).thenReturn(results);\n\n        when(conn.prepareCall(any(String.class))).thenReturn(call);\n        when(call.getParameterMetaData()).thenReturn(meta);\n        when(call.getResultSet()).thenReturn(results);\n        when(call.getMoreResults()).thenReturn(false);\n\n        when(results.next()).thenReturn(false);\n\n         handler = new ArrayHandler();\n         runner = new QueryRunner(dataSource);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "class_name": "QueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java.QueryRunnerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest.[void]testCreateCallableStatement()", "name": "testCreateCallableStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCreateCallableStatement()", "original_string": "    public void testCreateCallableStatement() {\n        assertNotNull(ProxyFactory.instance().createCallableStatement(stub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java", "class_name": "ProxyFactoryTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest.[void]testCreateConnection()", "name": "testCreateConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCreateConnection()", "original_string": "    public void testCreateConnection() {\n        assertNotNull(ProxyFactory.instance().createConnection(stub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java", "class_name": "ProxyFactoryTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest.[void]testCreateDriver()", "name": "testCreateDriver", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCreateDriver()", "original_string": "    public void testCreateDriver() {\n        assertNotNull(ProxyFactory.instance().createDriver(stub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java", "class_name": "ProxyFactoryTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest.[void]testCreatePreparedStatement()", "name": "testCreatePreparedStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCreatePreparedStatement()", "original_string": "    public void testCreatePreparedStatement() {\n        assertNotNull(ProxyFactory.instance().createPreparedStatement(stub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java", "class_name": "ProxyFactoryTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest.[void]testCreateResultSet()", "name": "testCreateResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCreateResultSet()", "original_string": "    public void testCreateResultSet() {\n        assertNotNull(ProxyFactory.instance().createResultSet(stub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java", "class_name": "ProxyFactoryTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest.[void]testCreateResultSetMetaData()", "name": "testCreateResultSetMetaData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCreateResultSetMetaData()", "original_string": "    public void testCreateResultSetMetaData() {\n        assertNotNull(ProxyFactory.instance().createResultSetMetaData(stub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java", "class_name": "ProxyFactoryTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest.[void]testCreateStatement()", "name": "testCreateStatement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCreateStatement()", "original_string": "    public void testCreateStatement() {\n        assertNotNull(ProxyFactory.instance().createStatement(stub));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java", "class_name": "ProxyFactoryTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ProxyFactoryTest.java.ProxyFactoryTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase.[ResultSet]createMockResultSet()", "name": "createMockResultSet", "arg_nums": 0, "params": [], "return_type": "ResultSet", "signature": "protected ResultSet createMockResultSet()", "original_string": "    protected ResultSet createMockResultSet() {\n        return MockResultSet.create(metaData, rows);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java", "class_name": "BaseTestCase", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": "\nCreates a freshly initialized ResultSet.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase.[ResultSet]getEmptyResultSet()", "name": "getEmptyResultSet", "arg_nums": 0, "params": [], "return_type": "ResultSet", "signature": "public ResultSet getEmptyResultSet()", "original_string": "    public ResultSet getEmptyResultSet() {\n        return this.emptyResultSet;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java", "class_name": "BaseTestCase", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase.[ResultSet]getResultSet()", "name": "getResultSet", "arg_nums": 0, "params": [], "return_type": "ResultSet", "signature": "public ResultSet getResultSet()", "original_string": "    public ResultSet getResultSet() {\n        return this.rs;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java", "class_name": "BaseTestCase", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase.[void]setResultSet(ResultSet)", "name": "setResultSet", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "void", "signature": "public void setResultSet(final ResultSet resultSet)", "original_string": "    public void setResultSet(final ResultSet resultSet) {\n        this.rs = resultSet;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java", "class_name": "BaseTestCase", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    protected void setUp()", "original_string": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        rs = createMockResultSet();\n        emptyResultSet = MockResultSet.create(metaData, null);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java", "class_name": "BaseTestCase", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nThis is called before each test method so ResultSet will be fresh each time.\n\n@see junit.framework.TestCase#setUp()\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase.[void]testCheckDataSizes()", "name": "testCheckDataSizes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testCheckDataSizes()", "original_string": "    public void testCheckDataSizes() {\n        assertEquals(\"Row 1 must contain correct number of columns\", columnNames.length, row1.length);\n        assertEquals(\"Row 1 must contain correct number of columns\", columnNames.length, row2.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java", "class_name": "BaseTestCase", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " check that the rows are valid for the column definition"}, {"uris": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase.[void]testResultSets()", "name": "testResultSets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testResultSets()", "original_string": "    public void testResultSets() throws Exception {\n        assertFalse(\"emptyResultSet should be empty\", emptyResultSet.next());\n        // fails in SqlNullCheckedResultSetTest assertTrue(\"rs should not be empty\", rs.next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java", "class_name": "BaseTestCase", "class_uri": "src/test/java/org/apache/commons/dbutils/BaseTestCase.java.BaseTestCase", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest.[void]testPutAllContainsKeyAndRemove()", "name": "testPutAllContainsKeyAndRemove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testPutAllContainsKeyAndRemove()", "original_string": "    public void testPutAllContainsKeyAndRemove() throws Exception {\n        final Map<String, Object> test = new HashMap<>(3);\n        test.put(\"fiRst\", \"thing\");\n        test.put(\"seCond\", \"another\");\n        test.put(\"thIrd\", \"more\");\n        final Map<String, Object> brpMap = BasicRowProcessor.createCaseInsensitiveHashMap(3);\n        brpMap.putAll(test);\n\n        assertEquals(test, brpMap);\n        assertTrue(brpMap.containsKey(\"fiRst\"));\n        assertTrue(brpMap.containsKey(\"first\"));\n\n        brpMap.remove(\"first\");\n        assertFalse(brpMap.containsKey(\"first\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java", "class_name": "BasicRowProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest.[void]testToArray()", "name": "testToArray", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testToArray()", "original_string": "    public void testToArray() throws SQLException {\n\n        Object[] a;\n        assertTrue(getResultSet().next());\n        a = processor.toArray(getResultSet());\n        assertEquals(COLS, a.length);\n        assertEquals(\"1\", a[0]);\n        assertEquals(\"2\", a[1]);\n        assertEquals(\"THREE\", a[2]);\n\n        assertTrue(getResultSet().next());\n        a = processor.toArray(getResultSet());\n        assertEquals(COLS, a.length);\n\n        assertEquals(\"4\", a[0]);\n        assertEquals(\"5\", a[1]);\n        assertEquals(\"SIX\", a[2]);\n\n        assertFalse(getResultSet().next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java", "class_name": "BasicRowProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest.[void]testToBean()", "name": "testToBean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testToBean()", "original_string": "    public void testToBean() throws SQLException, ParseException {\n\n        assertTrue(getResultSet().next());\n        TestBean row = processor.toBean(getResultSet(), TestBean.class);\n        assertEquals(\"1\", row.getOne());\n        assertEquals(\"2\", row.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n\n        assertTrue(getResultSet().next());\n        row = processor.toBean(getResultSet(), TestBean.class);\n\n        assertEquals(\"4\", row.getOne());\n        assertEquals(\"5\", row.getTwo());\n        assertEquals(TestBean.Ordinal.SIX, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n        assertEquals(3, row.getIntTest());\n        assertEquals(Integer.valueOf(4), row.getIntegerTest());\n        assertNull(row.getNullObjectTest());\n        assertEquals(0, row.getNullPrimitiveTest());\n        // test date -> string handling\n        assertNotNull(row.getNotDate());\n        assertTrue(!\"not a date\".equals(row.getNotDate()));\n        assertTrue(row.getNotDate().endsWith(\"789456123\"));\n\n        assertFalse(getResultSet().next());\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java", "class_name": "BasicRowProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest.[void]testToBeanList()", "name": "testToBeanList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testToBeanList()", "original_string": "    public void testToBeanList() throws SQLException, ParseException {\n\n        final List<TestBean> list = processor.toBeanList(getResultSet(), TestBean.class);\n        assertNotNull(list);\n        assertEquals(ROWS, list.size());\n\n        TestBean b = list.get(0);\n        assertEquals(\"1\", b.getOne());\n        assertEquals(\"2\", b.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, b.getThree());\n        assertEquals(\"not set\", b.getDoNotSet());\n        datef.parse(b.getNotDate());\n\n        b = list.get(1);\n        assertEquals(\"4\", b.getOne());\n        assertEquals(\"5\", b.getTwo());\n        assertEquals(TestBean.Ordinal.SIX, b.getThree());\n        assertEquals(\"not set\", b.getDoNotSet());\n        assertEquals(3, b.getIntTest());\n        assertEquals(Integer.valueOf(4), b.getIntegerTest());\n        assertNull(b.getNullObjectTest());\n        assertEquals(0, b.getNullPrimitiveTest());\n        // test date -> string handling\n        assertNotNull(b.getNotDate());\n        assertTrue(!\"not a date\".equals(b.getNotDate()));\n        assertTrue(b.getNotDate().endsWith(\"789456123\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java", "class_name": "BasicRowProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest.[void]testToMap()", "name": "testToMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testToMap()", "original_string": "    public void testToMap() throws SQLException {\n\n        assertTrue(getResultSet().next());\n        Map<String, Object> m = processor.toMap(getResultSet());\n        assertEquals(COLS, m.size());\n        assertEquals(\"1\", m.get(\"one\"));\n        assertEquals(\"2\", m.get(\"TWO\"));\n        assertEquals(\"THREE\", m.get(\"Three\"));\n\n        assertTrue(getResultSet().next());\n        m = processor.toMap(getResultSet());\n        assertEquals(COLS, m.size());\n\n        assertEquals(\"4\", m.get(\"One\")); // case shouldn't matter\n        assertEquals(\"5\", m.get(\"two\"));\n        assertEquals(\"SIX\", m.get(\"THREE\"));\n\n        assertFalse(getResultSet().next());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java", "class_name": "BasicRowProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest.[void]testToMapOrdering()", "name": "testToMapOrdering", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testToMapOrdering()", "original_string": "    public void testToMapOrdering() throws SQLException {\n\n        assertTrue(getResultSet().next());\n        final Map<String, Object> m = processor.toMap(getResultSet());\n\n        final Iterator<String> itr = m.keySet().iterator();\n        assertEquals(\"one\", itr.next());\n        assertEquals(\"two\", itr.next());\n        assertEquals(\"three\", itr.next());\n        assertEquals(\"notInBean\", itr.next());\n        assertEquals(\"intTest\", itr.next());\n        assertEquals(\"integerTest\", itr.next());\n        assertEquals(\"nullObjectTest\", itr.next());\n        assertEquals(\"nullPrimitiveTest\", itr.next());\n        assertEquals(\"notDate\", itr.next());\n        assertEquals(\"columnProcessorDoubleTest\", itr.next());\n        assertEquals(\"11\", itr.next());\n\n        assertFalse(itr.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java", "class_name": "BasicRowProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/BasicRowProcessorTest.java.BasicRowProcessorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java.ResultSetIteratorTest.[void]testNext()", "name": "testNext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testNext()", "original_string": "    public void testNext() {\n\n        final Iterator<Object[]> iter = new ResultSetIterator(getResultSet());\n\n        assertTrue(iter.hasNext());\n        Object[] row = iter.next();\n        assertEquals(COLS, row.length);\n        assertEquals(\"1\", row[0]);\n        assertEquals(\"2\", row[1]);\n        assertEquals(\"THREE\", row[2]);\n\n        assertTrue(iter.hasNext());\n        row = iter.next();\n        assertEquals(COLS, row.length);\n\n        assertEquals(\"4\", row[0]);\n        assertEquals(\"5\", row[1]);\n        assertEquals(\"SIX\", row[2]);\n\n        assertFalse(iter.hasNext());\n        assertTrue(iter.next().length == 0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java", "class_name": "ResultSetIteratorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java.ResultSetIteratorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryLoaderTest.java.QueryLoaderTest.[void]testLoad()", "name": "testLoad", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testLoad()", "original_string": "    public void testLoad() throws IOException {\n        final QueryLoader loader = QueryLoader.instance();\n        final Map<String, String> q = loader.load(QUERIES);\n        final Map<String, String> q2 = loader.load(QUERIES);\n        assertSame(q, q2); // pointer comparison should return true\n        assertEquals(\"SELECT * FROM SomeTable\", q.get(\"test.query\"));\n\n        loader.unload(QUERIES);\n        final Map<String, String> q3 = loader.load(QUERIES);\n        assertTrue(q != q3); // pointer comparison should return false\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryLoaderTest.java", "class_name": "QueryLoaderTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryLoaderTest.java.QueryLoaderTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/QueryLoaderTest.java.QueryLoaderTest.[void]testLoadThrowsIllegalArgumentException()", "name": "testLoadThrowsIllegalArgumentException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testLoadThrowsIllegalArgumentException()", "original_string": "    public void testLoadThrowsIllegalArgumentException() throws IOException {\n\n        final QueryLoader queryLoader = QueryLoader.instance();\n\n        try {\n            queryLoader.load(\"e\");\n            fail(\"Expecting exception: IllegalArgumentException\");\n        } catch (final IllegalArgumentException e) {\n            assertEquals(\"e not found.\", e.getMessage());\n            assertEquals(QueryLoader.class.getName(), e.getStackTrace()[0].getClassName());\n        }\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/QueryLoaderTest.java", "class_name": "QueryLoaderTest", "class_uri": "src/test/java/org/apache/commons/dbutils/QueryLoaderTest.java.QueryLoaderTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() throws Exception {\n        parameter = new OutParameter<>(Types.INTEGER, Number.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java", "class_name": "OutParameterTest", "class_uri": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java.OutParameterTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java.OutParameter_toStringTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        parameter = new OutParameter<>(Types.INTEGER, Number.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java", "class_name": "OutParameter_toStringTest", "class_uri": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java.OutParameter_toStringTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() throws Exception {\n        propDescriptors = new PropertyDescriptor[3];\n\n        propDescriptors[0] = new PropertyDescriptor(\"one\", TestBean.class);\n        propDescriptors[1] = new PropertyDescriptor(\"two\", TestBean.class);\n        propDescriptors[2] = new PropertyDescriptor(\"three\", TestBean.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java", "class_name": "GenerousBeanProcessorTest", "class_uri": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java.GenerousBeanProcessorTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData.[ResultSetMetaData]create(String[])", "name": "create", "arg_nums": 1, "params": [{"name": "columnNames", "type": "String[]"}], "return_type": "ResultSetMetaData", "signature": "public static ResultSetMetaData create(final String[] columnNames)", "original_string": "    public static ResultSetMetaData create(final String[] columnNames) {\n        return ProxyFactory.instance().createResultSetMetaData(new MockResultSetMetaData(columnNames));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java", "class_name": "MockResultSetMetaData", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ResultSetMetaData", "classes": []}, "docstring": "\nCreate a {@code MockResultSetMetaData} proxy object. This is equivalent to:\n\n<pre>\nProxyFactory.instance().createResultSetMetaData(new MockResultSetMetaData(columnNames));\n</pre>\n\n@param columnNames\n@return the proxy object\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData.[]MockResultSetMetaData(String[])", "name": "MockResultSetMetaData", "arg_nums": 1, "params": [{"name": "columnNames", "type": "String[]"}], "return_type": "", "signature": "public MockResultSetMetaData(final String[] columnNames)", "original_string": "    public MockResultSetMetaData(final String[] columnNames) {\n        this.columnNames = columnNames;\n        this.columnLabels = new String[columnNames.length];\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java", "class_name": "MockResultSetMetaData", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData.[]MockResultSetMetaData(String[],String[])", "name": "MockResultSetMetaData", "arg_nums": 2, "params": [{"name": "columnNames", "type": "String[]"}, {"name": "columnLabels", "type": "String[]"}], "return_type": "", "signature": "public MockResultSetMetaData(final String[] columnNames, final String[] columnLabels)", "original_string": "    public MockResultSetMetaData(final String[] columnNames, final String[] columnLabels) {\n        this.columnNames = columnNames;\n        this.columnLabels = columnLabels;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java", "class_name": "MockResultSetMetaData", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData.[Object]invoke(Object,Method,Object[])", "name": "invoke", "arg_nums": 3, "params": [{"name": "proxy", "type": "Object"}, {"name": "method", "type": "Method"}, {"name": "args", "type": "Object[]"}], "return_type": "Object", "signature": "@Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)", "original_string": "    @Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n        final String methodName = method.getName();\n        switch (methodName) {\n        case \"getColumnCount\":\n            return Integer.valueOf(this.columnNames.length);\n        case \"getColumnName\":\n            final int col1 = ((Integer) args[0]).intValue() - 1;\n            return this.columnNames[col1];\n        case \"getColumnLabel\":\n            final int col2 = ((Integer) args[0]).intValue() - 1;\n            return this.columnLabels[col2];\n        case \"hashCode\":\n            return Integer.valueOf(System.identityHashCode(proxy));\n        case \"toString\":\n            return \"MockResultSetMetaData \" + System.identityHashCode(proxy);\n        case \"equals\":\n            return Boolean.valueOf(proxy == args[0]);\n        default:\n            break;\n        }\n        throw new UnsupportedOperationException(\"Unsupported method: \" + methodName);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java", "class_name": "MockResultSetMetaData", "class_uri": "src/test/java/org/apache/commons/dbutils/MockResultSetMetaData.java.MockResultSetMetaData", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callBatchWithException(String,Object[][])", "name": "callBatchWithException", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "params", "type": "Object[][]"}], "return_type": "void", "signature": "private void callBatchWithException(final String sql, final Object[][] params)", "original_string": "    private void callBatchWithException(final String sql, final Object[][] params) throws Exception {\n        Future<int[]> future = null;\n        boolean caught = false;\n\n        try {\n            future = runner.batch(sql, params);\n\n            future.get();\n\n            verify(prepStmt, times(2)).addBatch();\n            verify(prepStmt, times(1)).executeBatch();\n            verify(prepStmt, times(1)).close(); // make sure the statement is closed\n            verify(conn, times(1)).close(); // make sure the connection is closed\n        } catch (final Exception e) {\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " helper method for calling batch when an exception is expected"}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callGoodBatch(Connection,Object[][])", "name": "callGoodBatch", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "params", "type": "Object[][]"}], "return_type": "void", "signature": "private void callGoodBatch(final Connection conn, final Object[][] params)", "original_string": "    private void callGoodBatch(final Connection conn, final Object[][] params) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        final Future<int[]> future = runner.batch(conn, \"select * from blah where ? = ?\", params);\n\n        future.get();\n\n        verify(prepStmt, times(2)).addBatch();\n        verify(prepStmt, times(1)).executeBatch();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callGoodBatch(Object[][])", "name": "callGoodBatch", "arg_nums": 1, "params": [{"name": "params", "type": "Object[][]"}], "return_type": "void", "signature": "private void callGoodBatch(final Object[][] params)", "original_string": "    private void callGoodBatch(final Object[][] params) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        final Future<int[]> future = runner.batch(\"select * from blah where ? = ?\", params);\n\n        future.get();\n\n        verify(prepStmt, times(2)).addBatch();\n        verify(prepStmt, times(1)).executeBatch();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callGoodQuery()", "name": "callGoodQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callGoodQuery()", "original_string": "    private void callGoodQuery() throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        String sql = \"select * from blah where ? = ?\";\n        runner.query(sql, handler, \"unit\", \"test\").get();\n\n        verify(prepStmt, times(1)).executeQuery();\n        verify(results, times(1)).close();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we closed the connection\n\n        // call the other variation of query\n        sql = \"select * from blah\";\n        runner.query(sql, handler).get();\n\n        verify(stmt, times(1)).executeQuery(sql);\n        verify(results, times(2)).close();\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(2)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callGoodQuery(Connection)", "name": "callGoodQuery", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "private void callGoodQuery(final Connection conn)", "original_string": "    private void callGoodQuery(final Connection conn) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        String sql = \"select * from blah where ? = ?\";\n        runner.query(conn, sql, handler, \"unit\", \"test\").get();\n\n        verify(prepStmt, times(1)).executeQuery();\n        verify(results, times(1)).close();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we closed the connection\n\n        // call the other variation of query\n        sql = \"select * from blah\";\n        runner.query(conn, sql, handler).get();\n\n        verify(stmt, times(1)).executeQuery(sql);\n        verify(results, times(2)).close();\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callGoodUpdate()", "name": "callGoodUpdate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callGoodUpdate()", "original_string": "    private void callGoodUpdate() throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        String sql = \"update blah set ? = ?\";\n        runner.update(sql, \"unit\", \"test\").get();\n\n        verify(prepStmt, times(1)).executeUpdate();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(1)).close();    // make sure we closed the connection\n\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(0);\n        sql = \"update blah set unit = test\";\n        runner.update(sql).get();\n\n        verify(stmt, times(1)).executeUpdate(sql);\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(2)).close();    // make sure we closed the connection\n\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(1);\n        runner.update(\"update blah set unit = ?\", \"test\").get();\n\n        verify(prepStmt, times(2)).executeUpdate();\n        verify(prepStmt, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(3)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callGoodUpdate(Connection)", "name": "callGoodUpdate", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "private void callGoodUpdate(final Connection conn)", "original_string": "    private void callGoodUpdate(final Connection conn) throws Exception {\n        when(meta.getParameterCount()).thenReturn(2);\n        String sql = \"update blah set ? = ?\";\n        runner.update(conn, sql, \"unit\", \"test\").get();\n\n        verify(prepStmt, times(1)).executeUpdate();\n        verify(prepStmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we closed the connection\n\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(0);\n        sql = \"update blah set unit = test\";\n        runner.update(conn, sql).get();\n\n        verify(stmt, times(1)).executeUpdate(sql);\n        verify(stmt, times(1)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we closed the connection\n\n        // call the other variation\n        when(meta.getParameterCount()).thenReturn(1);\n        sql = \"update blah set unit = ?\";\n        runner.update(conn, sql, \"test\").get();\n\n        verify(prepStmt, times(2)).executeUpdate();\n        verify(prepStmt, times(2)).close();    // make sure we closed the statement\n        verify(conn, times(0)).close();    // make sure we closed the connection\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callQueryWithException()", "name": "callQueryWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callQueryWithException(final Object... params)", "original_string": "    private void callQueryWithException(final Object... params) throws Exception {\n        boolean caught = false;\n\n        try {\n            when(meta.getParameterCount()).thenReturn(2);\n            runner.query(\"select * from blah where ? = ?\", handler, params).get();\n\n            verify(prepStmt, times(1)).executeQuery();\n            verify(results, times(1)).close();\n            verify(prepStmt, times(1)).close(); // make sure we closed the statement\n            verify(conn, times(1)).close(); // make sure we closed the connection\n        } catch (final Exception e) {\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " helper method for calling batch when an exception is expected"}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]callUpdateWithException()", "name": "callUpdateWithException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void callUpdateWithException(final Object... params)", "original_string": "    private void callUpdateWithException(final Object... params) throws Exception {\n        boolean caught = false;\n\n        try {\n            when(meta.getParameterCount()).thenReturn(2);\n            runner.update(\"select * from blah where ? = ?\", params).get();\n\n            verify(prepStmt, times(1)).executeUpdate();\n            verify(prepStmt, times(1)).close(); // make sure we closed the statement\n            verify(conn, times(1)).close(); // make sure we closed the connection\n        } catch (final Exception e) {\n            caught = true;\n        }\n\n        if (!caught) {\n            fail(\"Exception never thrown, but expected\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": " helper method for calling batch when an exception is expected"}, {"uris": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() throws Exception {\n        when(dataSource.getConnection()).thenReturn(conn);\n\n        when(conn.prepareStatement(any(String.class))).thenReturn(prepStmt);\n        when(prepStmt.getParameterMetaData()).thenReturn(meta);\n        when(prepStmt.executeQuery()).thenReturn(results);\n\n        when(conn.createStatement()).thenReturn(stmt);\n        when(stmt.executeQuery(any(String.class))).thenReturn(results);\n\n        when(results.next()).thenReturn(false);\n\n         handler = new ArrayHandler();\n         runner = new AsyncQueryRunner(Executors.newFixedThreadPool(1), new QueryRunner(dataSource));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "class_name": "AsyncQueryRunnerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java.AsyncQueryRunnerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        columns = ServiceLoader.load(ColumnHandler.class);\n        properties = ServiceLoader.load(PropertyHandler.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java", "class_name": "ServiceLoaderTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java.ServiceLoaderTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[]TestBean()", "name": "TestBean", "arg_nums": 0, "params": [], "return_type": "", "signature": "public TestBean()", "original_string": "    public TestBean() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for TestBean.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[double]getColumnProcessorDoubleTest()", "name": "getColumnProcessorDoubleTest", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double getColumnProcessorDoubleTest()", "original_string": "    public double getColumnProcessorDoubleTest() {\n        return columnProcessorDoubleTest;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[String]getDoNotSet()", "name": "getDoNotSet", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getDoNotSet()", "original_string": "    public String getDoNotSet() {\n        return doNotSet;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[Integer]getIntegerTest()", "name": "getIntegerTest", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "public Integer getIntegerTest()", "original_string": "    public Integer getIntegerTest() {\n        return integerTest;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[int]getIntTest()", "name": "getIntTest", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getIntTest()", "original_string": "    public int getIntTest() {\n        return intTest;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[String]getNotDate()", "name": "getNotDate", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getNotDate()", "original_string": "    public String getNotDate() {\n        return notDate;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[Object]getNullObjectTest()", "name": "getNullObjectTest", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "public Object getNullObjectTest()", "original_string": "    public Object getNullObjectTest() {\n        return nullObjectTest;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[int]getNullPrimitiveTest()", "name": "getNullPrimitiveTest", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getNullPrimitiveTest()", "original_string": "    public int getNullPrimitiveTest() {\n        return nullPrimitiveTest;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[String]getOne()", "name": "getOne", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getOne()", "original_string": "    public String getOne() {\n        return one;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[Ordinal]getThree()", "name": "getThree", "arg_nums": 0, "params": [], "return_type": "Ordinal", "signature": "public Ordinal getThree()", "original_string": "    public Ordinal getThree() {\n        return three;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Ordinal", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[String]getTwo()", "name": "getTwo", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getTwo()", "original_string": "    public String getTwo() {\n        return two;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setColumnProcessorDoubleTest(double)", "name": "setColumnProcessorDoubleTest", "arg_nums": 1, "params": [{"name": "d", "type": "double"}], "return_type": "void", "signature": "public void setColumnProcessorDoubleTest(final double d)", "original_string": "    public void setColumnProcessorDoubleTest(final double d) {\n        columnProcessorDoubleTest = d;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setDoNotSet(String)", "name": "setDoNotSet", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "void", "signature": "public void setDoNotSet(final String string)", "original_string": "    public void setDoNotSet(final String string) {\n        doNotSet = string;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setIntegerTest(Integer)", "name": "setIntegerTest", "arg_nums": 1, "params": [{"name": "integer", "type": "Integer"}], "return_type": "void", "signature": "public void setIntegerTest(final Integer integer)", "original_string": "    public void setIntegerTest(final Integer integer) {\n        integerTest = integer;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setIntTest(int)", "name": "setIntTest", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "void", "signature": "public void setIntTest(final int i)", "original_string": "    public void setIntTest(final int i) {\n        intTest = i;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setNotDate(String)", "name": "setNotDate", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "void", "signature": "public void setNotDate(final String string)", "original_string": "    public void setNotDate(final String string) {\n        notDate = string;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setNullObjectTest(Object)", "name": "setNullObjectTest", "arg_nums": 1, "params": [{"name": "object", "type": "Object"}], "return_type": "void", "signature": "public void setNullObjectTest(final Object object)", "original_string": "    public void setNullObjectTest(final Object object) {\n        nullObjectTest = object;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setNullPrimitiveTest(int)", "name": "setNullPrimitiveTest", "arg_nums": 1, "params": [{"name": "i", "type": "int"}], "return_type": "void", "signature": "public void setNullPrimitiveTest(final int i)", "original_string": "    public void setNullPrimitiveTest(final int i) {\n        nullPrimitiveTest = i;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setOne(String)", "name": "setOne", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "void", "signature": "public void setOne(final String string)", "original_string": "    public void setOne(final String string) {\n        one = string;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setThree(Ordinal)", "name": "setThree", "arg_nums": 1, "params": [{"name": "ordinal", "type": "Ordinal"}], "return_type": "void", "signature": "public void setThree(final Ordinal ordinal)", "original_string": "    public void setThree(final Ordinal ordinal) {\n        three = ordinal;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean.[void]setTwo(String)", "name": "setTwo", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "void", "signature": "public void setTwo(final String string)", "original_string": "    public void setTwo(final String string) {\n        two = string;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/TestBean.java", "class_name": "TestBean", "class_uri": "src/test/java/org/apache/commons/dbutils/TestBean.java.TestBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() throws SQLException {\n        resultSet = mock(ResultSet.class);\n        resultSetIterator = new ResultSetIterator(resultSet);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java", "class_name": "ResultSetIterator_hasNextTest", "class_uri": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java.ResultSetIterator_hasNextTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ArrayHandlerTest.java.ArrayHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<Object[]> h = new ArrayHandler();\n        final Object[] results = h.handle(getEmptyResultSet());\n\n        assertEquals(0, results.length);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ArrayHandlerTest.java", "class_name": "ArrayHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ArrayHandlerTest.java.ArrayHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ArrayHandlerTest.java.ArrayHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<Object[]> h = new ArrayHandler();\n        final Object[] results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(COLS, results.length);\n        assertEquals(\"1\", results[0]);\n        assertEquals(\"2\", results[1]);\n        assertEquals(\"THREE\", results[2]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ArrayHandlerTest.java", "class_name": "ArrayHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ArrayHandlerTest.java.ArrayHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<TestBean> h = new BeanHandler<>(TestBean.class);\n        final TestBean results = h.handle(getEmptyResultSet());\n\n        assertNull(results);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java", "class_name": "BeanHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<TestBean> h = new BeanHandler<>(TestBean.class);\n        final TestBean results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(\"1\", results.getOne());\n        assertEquals(\"2\", results.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, results.getThree());\n        assertEquals(\"not set\", results.getDoNotSet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java", "class_name": "BeanHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest.[void]testHandleToInterface()", "name": "testHandleToInterface", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandleToInterface()", "original_string": "    public void testHandleToInterface() throws SQLException {\n        final ResultSetHandler<SubTestBeanInterface> h = new BeanHandler<>(SubTestBean.class);\n        final SubTestBeanInterface results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(\"1\", results.getOne());\n        assertEquals(\"2\", results.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, results.getThree());\n        assertEquals(\"not set\", results.getDoNotSet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java", "class_name": "BeanHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest.[void]testHandleToSuperClass()", "name": "testHandleToSuperClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandleToSuperClass()", "original_string": "    public void testHandleToSuperClass() throws SQLException {\n        final ResultSetHandler<TestBean> h = new BeanHandler<>(SubTestBean.class);\n        final TestBean results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(\"1\", results.getOne());\n        assertEquals(\"2\", results.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, results.getThree());\n        assertEquals(\"not set\", results.getDoNotSet());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java", "class_name": "BeanHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanHandlerTest.java.BeanHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/MapHandlerTest.java.MapHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<Map<String, Object>> h = new MapHandler();\n        final Map<String, Object> results = h.handle(getEmptyResultSet());\n\n        assertNull(results);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/MapHandlerTest.java", "class_name": "MapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/MapHandlerTest.java.MapHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/MapHandlerTest.java.MapHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<Map<String, Object>> h = new MapHandler();\n        final Map<String, Object> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(COLS, results.size());\n        assertEquals(\"1\", results.get(\"ONE\"));\n        assertEquals(\"2\", results.get(\"two\"));\n        assertEquals(\"THREE\", results.get(\"Three\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/MapHandlerTest.java", "class_name": "MapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/MapHandlerTest.java.MapHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest.[void]handle()", "name": "handle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void handle()", "original_string": "    private void handle() throws Exception {\n        res = bmh.handle(rs);\n        assertNotNull(res.get(Long.valueOf(23L)));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "class_name": "BeanMapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() throws Exception {\n        when(Boolean.valueOf(rs.next())).thenReturn(Boolean.TRUE, Boolean.FALSE);\n        when(rs.getObject(1)).thenReturn(Long.valueOf(23L));\n        when(rs.getObject(2)).thenReturn(Long.valueOf(23L));\n        when(rs.getObject(\"id\")).thenReturn(Long.valueOf(23L));\n        when(rs.getMetaData()).thenReturn(rsmd);\n        when(rp.toBean(rs, TestBean.class)).thenReturn(new TestBean());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "class_name": "BeanMapHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java.BeanMapHandlerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest.[void]testColumnIndexHandle()", "name": "testColumnIndexHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testColumnIndexHandle()", "original_string": "    public void testColumnIndexHandle() throws SQLException {\n        final ResultSetHandler<Map<String, Map<String, Object>>> h = new KeyedHandler<>(2);\n        final Map<String, Map<String, Object>> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        Map<String, Object> row = null;\n        for (final Entry<String, Map<String, Object>> entry : results.entrySet()) {\n            final Object key = entry.getKey();\n            assertNotNull(key);\n            row = entry.getValue();\n            assertNotNull(row);\n            assertEquals(COLS, row.size());\n        }\n        row = results.get(\"5\");\n        assertEquals(\"4\", row.get(\"one\"));\n        assertEquals(\"5\", row.get(\"TWO\"));\n        assertEquals(\"SIX\", row.get(\"Three\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java", "class_name": "KeyedHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest.[void]testColumnNameHandle()", "name": "testColumnNameHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testColumnNameHandle()", "original_string": "    public void testColumnNameHandle() throws SQLException {\n        final ResultSetHandler<Map<Integer, Map<String, Object>>> h = new KeyedHandler<>(\"intTest\");\n        final Map<Integer, Map<String, Object>> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        Map<String, Object> row = null;\n        for (final Entry<Integer, Map<String, Object>> entry : results.entrySet()) {\n            final Object key = entry.getKey();\n            assertNotNull(key);\n            row = entry.getValue();\n            assertNotNull(row);\n            assertEquals(COLS, row.size());\n        }\n        row = results.get(Integer.valueOf(3));\n        assertEquals(\"4\", row.get(\"one\"));\n        assertEquals(\"5\", row.get(\"TWO\"));\n        assertEquals(\"SIX\", row.get(\"Three\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java", "class_name": "KeyedHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<Map<String, Map<String, Object>>> h = new KeyedHandler<>();\n        final Map<String, Map<String, Object>> results = h.handle(getEmptyResultSet());\n        assertNotNull(results);\n        assertTrue(results.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java", "class_name": "KeyedHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<Map<String, Map<String, Object>>> h = new KeyedHandler<>();\n\n        final Map<String, Map<String, Object>> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        Map<String, Object> row = null;\n        for (final Entry<String, Map<String, Object>> entry : results.entrySet()) {\n            final Object key = entry.getKey();\n            assertNotNull(key);\n            row = entry.getValue();\n            assertNotNull(row);\n            assertEquals(COLS, row.size());\n        }\n        row = results.get(\"1\");\n        assertEquals(\"1\", row.get(\"one\"));\n        assertEquals(\"2\", row.get(\"TWO\"));\n        assertEquals(\"THREE\", row.get(\"Three\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java", "class_name": "KeyedHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest.[void]testInjectedRowProcess()", "name": "testInjectedRowProcess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testInjectedRowProcess()", "original_string": "    public void testInjectedRowProcess() throws Exception {\n        final RowProcessor mockProc = mock(RowProcessor.class);\n        final ResultSetHandler<Map<String, Map<String, Object>>> h = new KeyedHandler<>(mockProc);\n        final Map<String, Map<String, Object>> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        Map<String, Object> row = null;\n        for (final Entry<String, Map<String, Object>> entry : results.entrySet()) {\n            row = entry.getValue();\n            assertNotNull(row);\n            assertTrue(row.isEmpty());\n            assertEquals(0, row.size());\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java", "class_name": "KeyedHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/KeyedHandlerTest.java.KeyedHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ArrayListHandlerTest.java.ArrayListHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<List<Object[]>> h = new ArrayListHandler();\n        final List<Object[]> results = h.handle(getEmptyResultSet());\n\n        assertNotNull(results);\n        assertTrue(results.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ArrayListHandlerTest.java", "class_name": "ArrayListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ArrayListHandlerTest.java.ArrayListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ArrayListHandlerTest.java.ArrayListHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<List<Object[]>> h = new ArrayListHandler();\n        final List<Object[]> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        final Iterator<Object[]> iter = results.iterator();\n        assertTrue(iter.hasNext());\n        Object[] row = iter.next();\n        assertEquals(COLS, row.length);\n        assertEquals(\"1\", row[0]);\n        assertEquals(\"2\", row[1]);\n        assertEquals(\"THREE\", row[2]);\n\n        assertTrue(iter.hasNext());\n        row = iter.next();\n        assertEquals(COLS, row.length);\n\n        assertEquals(\"4\", row[0]);\n        assertEquals(\"5\", row[1]);\n        assertEquals(\"SIX\", row[2]);\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ArrayListHandlerTest.java", "class_name": "ArrayListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ArrayListHandlerTest.java.ArrayListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest.[void]testColumnIndexHandle()", "name": "testColumnIndexHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testColumnIndexHandle()", "original_string": "    public void testColumnIndexHandle() throws SQLException {\n        final ResultSetHandler<List<String>> h = new ColumnListHandler<>(2);\n        final List<String> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        assertEquals(\"2\", results.get(0));\n        assertEquals(\"5\", results.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java", "class_name": "ColumnListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest.[void]testColumnNameHandle()", "name": "testColumnNameHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testColumnNameHandle()", "original_string": "    public void testColumnNameHandle() throws SQLException {\n        final ResultSetHandler<List<Integer>> h = new ColumnListHandler<>(\"intTest\");\n        final List<Integer> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        assertEquals(Integer.valueOf(1), results.get(0));\n        assertEquals(Integer.valueOf(3), results.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java", "class_name": "ColumnListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<List<String>> h = new ColumnListHandler<>();\n        final List<String> results = h.handle(getEmptyResultSet());\n\n        assertNotNull(results);\n        assertTrue(results.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java", "class_name": "ColumnListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<List<String>> h = new ColumnListHandler<>();\n        final List<String> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        assertEquals(\"1\", results.get(0));\n        assertEquals(\"4\", results.get(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java", "class_name": "ColumnListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ColumnListHandlerTest.java.ColumnListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest.[void]testColumnIndexHandle()", "name": "testColumnIndexHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testColumnIndexHandle()", "original_string": "    public void testColumnIndexHandle() throws SQLException {\n        final ResultSetHandler<String> h = new ScalarHandler<>(2);\n        final Object results = h.handle(getResultSet());\n        assertNotNull(results);\n        assertEquals(\"2\", results);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java", "class_name": "ScalarHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest.[void]testColumnNameHandle()", "name": "testColumnNameHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testColumnNameHandle()", "original_string": "    public void testColumnNameHandle() throws SQLException {\n        final ResultSetHandler<Integer> h = new ScalarHandler<>(\"intTest\");\n        final Object results = h.handle(getResultSet());\n        assertNotNull(results);\n        assertEquals(Integer.valueOf(1), results);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java", "class_name": "ScalarHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<String> h = new ScalarHandler<>();\n        final Object results = h.handle(getEmptyResultSet());\n        assertNull(results);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java", "class_name": "ScalarHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<String> h = new ScalarHandler<>();\n        final Object results = h.handle(getResultSet());\n        assertNotNull(results);\n        assertEquals(\"1\", results);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java", "class_name": "ScalarHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/ScalarHandlerTest.java.ScalarHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<List<TestBean>> h = new BeanListHandler<>(TestBean.class);\n        final List<TestBean> results = h.handle(getEmptyResultSet());\n\n        assertNotNull(results);\n        assertTrue(results.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java", "class_name": "BeanListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<List<TestBean>> h = new BeanListHandler<>(TestBean.class);\n        final List<TestBean> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        final Iterator<TestBean> iter = results.iterator();\n        TestBean row;\n        assertTrue(iter.hasNext());\n        row = iter.next();\n        assertEquals(\"1\", row.getOne());\n        assertEquals(\"2\", row.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n\n        assertTrue(iter.hasNext());\n        row = iter.next();\n\n        assertEquals(\"4\", row.getOne());\n        assertEquals(\"5\", row.getTwo());\n        assertEquals(TestBean.Ordinal.SIX, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java", "class_name": "BeanListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest.[void]testHandleToInterface()", "name": "testHandleToInterface", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandleToInterface()", "original_string": "    public void testHandleToInterface() throws SQLException {\n        final ResultSetHandler<List<SubTestBeanInterface>> h = new BeanListHandler<>(SubTestBean.class);\n        final List<SubTestBeanInterface> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        final Iterator<SubTestBeanInterface> iter = results.iterator();\n        SubTestBeanInterface row;\n        assertTrue(iter.hasNext());\n        row = iter.next();\n        assertSame(SubTestBean.class, row.getClass());\n\n        assertEquals(\"1\", row.getOne());\n        assertEquals(\"2\", row.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n\n        assertTrue(iter.hasNext());\n        row = iter.next();\n        assertSame(SubTestBean.class, row.getClass());\n\n        assertEquals(\"4\", row.getOne());\n        assertEquals(\"5\", row.getTwo());\n        assertEquals(TestBean.Ordinal.SIX, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java", "class_name": "BeanListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest.[void]testHandleToSuperClass()", "name": "testHandleToSuperClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandleToSuperClass()", "original_string": "    public void testHandleToSuperClass() throws SQLException {\n        final ResultSetHandler<List<TestBean>> h = new BeanListHandler<>(SubTestBean.class);\n        final List<TestBean> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        final Iterator<TestBean> iter = results.iterator();\n        assertTrue(iter.hasNext());\n        TestBean row = iter.next();\n        assertSame(SubTestBean.class, row.getClass());\n\n        assertEquals(\"1\", row.getOne());\n        assertEquals(\"2\", row.getTwo());\n        assertEquals(TestBean.Ordinal.THREE, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n\n        assertTrue(iter.hasNext());\n        row = iter.next();\n        assertSame(SubTestBean.class, row.getClass());\n\n        assertEquals(\"4\", row.getOne());\n        assertEquals(\"5\", row.getTwo());\n        assertEquals(TestBean.Ordinal.SIX, row.getThree());\n        assertEquals(\"not set\", row.getDoNotSet());\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java", "class_name": "BeanListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/BeanListHandlerTest.java.BeanListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/MapListHandlerTest.java.MapListHandlerTest.[void]testEmptyResultSetHandle()", "name": "testEmptyResultSetHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testEmptyResultSetHandle()", "original_string": "    public void testEmptyResultSetHandle() throws SQLException {\n        final ResultSetHandler<List<Map<String, Object>>> h = new MapListHandler();\n        final List<Map<String, Object>> results = h.handle(getEmptyResultSet());\n\n        assertNotNull(results);\n        assertTrue(results.isEmpty());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/MapListHandlerTest.java", "class_name": "MapListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/MapListHandlerTest.java.MapListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/MapListHandlerTest.java.MapListHandlerTest.[void]testHandle()", "name": "testHandle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testHandle()", "original_string": "    public void testHandle() throws SQLException {\n        final ResultSetHandler<List<Map<String, Object>>> h = new MapListHandler();\n        final List<Map<String, Object>> results = h.handle(getResultSet());\n\n        assertNotNull(results);\n        assertEquals(ROWS, results.size());\n\n        final Iterator<Map<String, Object>> iter = results.iterator();\n        assertTrue(iter.hasNext());\n        Map<String, Object> row = iter.next();\n        assertEquals(COLS, row.size());\n        assertEquals(\"1\", row.get(\"one\"));\n        assertEquals(\"2\", row.get(\"TWO\"));\n        assertEquals(\"THREE\", row.get(\"Three\"));\n\n        assertTrue(iter.hasNext());\n        row = iter.next();\n        assertEquals(COLS, row.size());\n\n        assertEquals(\"4\", row.get(\"one\"));\n        assertEquals(\"5\", row.get(\"TWO\"));\n        assertEquals(\"SIX\", row.get(\"Three\"));\n\n        assertFalse(iter.hasNext());\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/MapListHandlerTest.java", "class_name": "MapListHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/MapListHandlerTest.java.MapListHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandlerTest.java.StringColumnHandlerTest.[]StringColumnHandlerTest()", "name": "StringColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public StringColumnHandlerTest()", "original_string": "    public StringColumnHandlerTest() {\n        super(new StringColumnHandler(), String.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandlerTest.java", "class_name": "StringColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandlerTest.java.StringColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandlerTest.java.ShortColumnHandlerTest.[]ShortColumnHandlerTest()", "name": "ShortColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ShortColumnHandlerTest()", "original_string": "    public ShortColumnHandlerTest() {\n        super(new ShortColumnHandler(), Short.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandlerTest.java", "class_name": "ShortColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandlerTest.java.ShortColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/TestColumnHandler.java.TestColumnHandler.[Object]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "rs", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "@Override\n    public Object apply(final ResultSet rs, final int columnIndex)", "original_string": "    @Override\n    public Object apply(final ResultSet rs, final int columnIndex) throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/TestColumnHandler.java", "class_name": "TestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/TestColumnHandler.java.TestColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/TestColumnHandler.java.TestColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return false;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/TestColumnHandler.java", "class_name": "TestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/TestColumnHandler.java.TestColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandlerTest.java.TimestampColumnHandlerTest.[]TimestampColumnHandlerTest()", "name": "TimestampColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public TimestampColumnHandlerTest()", "original_string": "    public TimestampColumnHandlerTest() {\n        super(new TimestampColumnHandler(), Timestamp.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandlerTest.java", "class_name": "TimestampColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandlerTest.java.TimestampColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandlerTest.java.BooleanColumnHandlerTest.[]BooleanColumnHandlerTest()", "name": "BooleanColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public BooleanColumnHandlerTest()", "original_string": "    public BooleanColumnHandlerTest() {\n        super(new BooleanColumnHandler(), Boolean.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandlerTest.java", "class_name": "BooleanColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandlerTest.java.BooleanColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[]AbstractTestColumnHandler(ColumnHandler<T>,Class<?>)", "name": "AbstractTestColumnHandler", "arg_nums": 2, "params": [{"name": "handler", "type": "ColumnHandler<T>"}, {"name": "matchingType", "type": "Class<?>"}], "return_type": "", "signature": "public AbstractTestColumnHandler(final ColumnHandler<T> handler, final Class<?> matchingType)", "original_string": "    public AbstractTestColumnHandler(final ColumnHandler<T> handler, final Class<?> matchingType) {\n        this.handler = handler;\n        this.matchingType = matchingType;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "class_name": "AbstractTestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[ColumnHandler<T>]getColumnHandler()", "name": "getColumnHandler", "arg_nums": 0, "params": [], "return_type": "ColumnHandler<T>", "signature": "public ColumnHandler<T> getColumnHandler()", "original_string": "    public ColumnHandler<T> getColumnHandler() {\n        return this.handler;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "class_name": "AbstractTestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ColumnHandler<T>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[Class<?>]getMatchingType()", "name": "getMatchingType", "arg_nums": 0, "params": [], "return_type": "Class<?>", "signature": "public Class<?> getMatchingType()", "original_string": "    public Class<?> getMatchingType() {\n        return this.matchingType;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "class_name": "AbstractTestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Class<?>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler.[ResultSet]getResultSet()", "name": "getResultSet", "arg_nums": 0, "params": [], "return_type": "ResultSet", "signature": "public ResultSet getResultSet()", "original_string": "    public ResultSet getResultSet() {\n        return this.rs;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java", "class_name": "AbstractTestColumnHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/AbstractTestColumnHandler.java.AbstractTestColumnHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandlerTest.java.DoubleColumnHandlerTest.[]DoubleColumnHandlerTest()", "name": "DoubleColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public DoubleColumnHandlerTest()", "original_string": "    public DoubleColumnHandlerTest() {\n        super(new DoubleColumnHandler(), Double.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandlerTest.java", "class_name": "DoubleColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandlerTest.java.DoubleColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandlerTest.java.LongColumnHandlerTest.[]LongColumnHandlerTest()", "name": "LongColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public LongColumnHandlerTest()", "original_string": "    public LongColumnHandlerTest() {\n        super(new LongColumnHandler(), Long.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandlerTest.java", "class_name": "LongColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandlerTest.java.LongColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandlerTest.java.SQLXMLColumnHandlerTest.[]SQLXMLColumnHandlerTest()", "name": "SQLXMLColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public SQLXMLColumnHandlerTest()", "original_string": "    public SQLXMLColumnHandlerTest() {\n        super(new SQLXMLColumnHandler(), SQLXML.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandlerTest.java", "class_name": "SQLXMLColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandlerTest.java.SQLXMLColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandlerTest.java.ByteColumnHandlerTest.[]ByteColumnHandlerTest()", "name": "ByteColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ByteColumnHandlerTest()", "original_string": "    public ByteColumnHandlerTest() {\n        super(new ByteColumnHandler(), Byte.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandlerTest.java", "class_name": "ByteColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandlerTest.java.ByteColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java.IntegerColumnHandlerTest.[]IntegerColumnHandlerTest()", "name": "IntegerColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public IntegerColumnHandlerTest()", "original_string": "    public IntegerColumnHandlerTest() {\n        super(new IntegerColumnHandler(), Integer.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java", "class_name": "IntegerColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java.IntegerColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandlerTest.java.FloatColumnHandlerTest.[]FloatColumnHandlerTest()", "name": "FloatColumnHandlerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public FloatColumnHandlerTest()", "original_string": "    public FloatColumnHandlerTest() {\n        super(new FloatColumnHandler(), Float.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandlerTest.java", "class_name": "FloatColumnHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandlerTest.java.FloatColumnHandlerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java.PropertyHandlerTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        loader = ServiceLoader.load(PropertyHandler.class);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java", "class_name": "PropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java.PropertyHandlerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java.StringEnumPropertyHandlerTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        this.handler = new StringEnumPropertyHandler();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java", "class_name": "StringEnumPropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java.StringEnumPropertyHandlerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/TestPropertyHandler.java.TestPropertyHandler.[Object]apply(Class<?>,Object)", "name": "apply", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "Object", "signature": "@Override\n    public Object apply(final Class<?> parameter, final Object value)", "original_string": "    @Override\n    public Object apply(final Class<?> parameter, final Object value) {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/TestPropertyHandler.java", "class_name": "TestPropertyHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/TestPropertyHandler.java.TestPropertyHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/TestPropertyHandler.java.TestPropertyHandler.[boolean]match(Class<?>,Object)", "name": "match", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> parameter, final Object value)", "original_string": "    @Override\n    public boolean match(final Class<?> parameter, final Object value) {\n        return false;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/TestPropertyHandler.java", "class_name": "TestPropertyHandler", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/TestPropertyHandler.java.TestPropertyHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        this.handler = new DatePropertyHandler();\n        this.testValue = new Date();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "class_name": "DatePropertyHandlerTest", "class_uri": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java.DatePropertyHandlerTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[void]free()", "name": "free", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void free()", "original_string": "    @Override\n    public void free() throws SQLException {\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[InputStream]getBinaryStream()", "name": "getBinaryStream", "arg_nums": 0, "params": [], "return_type": "InputStream", "signature": "@Override\n    public InputStream getBinaryStream()", "original_string": "    @Override\n    public InputStream getBinaryStream() throws SQLException {\n        return new ByteArrayInputStream(new byte[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[InputStream]getBinaryStream(long,long)", "name": "getBinaryStream", "arg_nums": 2, "params": [{"name": "pos", "type": "long"}, {"name": "length", "type": "long"}], "return_type": "InputStream", "signature": "@Override\n    public InputStream getBinaryStream(final long pos, final long length)", "original_string": "    @Override\n    public InputStream getBinaryStream(final long pos, final long length) throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[byte[]]getBytes(long,int)", "name": "getBytes", "arg_nums": 2, "params": [{"name": "param", "type": "long"}, {"name": "param1", "type": "int"}], "return_type": "byte[]", "signature": "@Override\n    public byte[] getBytes(final long param, final int param1)", "original_string": "    @Override\n    public byte[] getBytes(final long param, final int param1) throws SQLException {\n        return new byte[0];\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[long]length()", "name": "length", "arg_nums": 0, "params": [], "return_type": "long", "signature": "@Override\n    public long length()", "original_string": "    @Override\n    public long length() throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[long]position(Blob,long)", "name": "position", "arg_nums": 2, "params": [{"name": "blob", "type": "Blob"}, {"name": "param", "type": "long"}], "return_type": "long", "signature": "@Override\n    public long position(final Blob blob, final long param)", "original_string": "    @Override\n    public long position(final Blob blob, final long param) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[long]position(byte[],long)", "name": "position", "arg_nums": 2, "params": [{"name": "values", "type": "byte[]"}, {"name": "param", "type": "long"}], "return_type": "long", "signature": "@Override\n    public long position(final byte[] values, final long param)", "original_string": "    @Override\n    public long position(final byte[] values, final long param) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[OutputStream]setBinaryStream(long)", "name": "setBinaryStream", "arg_nums": 1, "params": [{"name": "pos", "type": "long"}], "return_type": "OutputStream", "signature": "@Override\n    public OutputStream setBinaryStream(final long pos)", "original_string": "    @Override\n    public OutputStream setBinaryStream(final long pos) throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "OutputStream", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[int]setBytes(long,byte[])", "name": "setBytes", "arg_nums": 2, "params": [{"name": "pos", "type": "long"}, {"name": "bytes", "type": "byte[]"}], "return_type": "int", "signature": "@Override\n    public int setBytes(final long pos, final byte[] bytes)", "original_string": "    @Override\n    public int setBytes(final long pos, final byte[] bytes) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[int]setBytes(long,byte[],int,int)", "name": "setBytes", "arg_nums": 4, "params": [{"name": "pos", "type": "long"}, {"name": "bytes", "type": "byte[]"}, {"name": "offset", "type": "int"}, {"name": "len", "type": "int"}], "return_type": "int", "signature": "@Override\n    public int setBytes(final long pos, final byte[] bytes, final int offset, final int len)", "original_string": "    @Override\n    public int setBytes(final long pos, final byte[] bytes, final int offset, final int len) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob.[void]truncate(long)", "name": "truncate", "arg_nums": 1, "params": [{"name": "len", "type": "long"}], "return_type": "void", "signature": "@Override\n    public void truncate(final long len)", "original_string": "    @Override\n    public void truncate(final long len) throws SQLException {\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockBlob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockBlob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[void]free()", "name": "free", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void free()", "original_string": "    @Override\n    public void free() throws SQLException {\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[InputStream]getAsciiStream()", "name": "getAsciiStream", "arg_nums": 0, "params": [], "return_type": "InputStream", "signature": "@Override\n    public InputStream getAsciiStream()", "original_string": "    @Override\n    public InputStream getAsciiStream() throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[Reader]getCharacterStream()", "name": "getCharacterStream", "arg_nums": 0, "params": [], "return_type": "Reader", "signature": "@Override\n    public Reader getCharacterStream()", "original_string": "    @Override\n    public Reader getCharacterStream() throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Reader", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[Reader]getCharacterStream(long,long)", "name": "getCharacterStream", "arg_nums": 2, "params": [{"name": "pos", "type": "long"}, {"name": "length", "type": "long"}], "return_type": "Reader", "signature": "@Override\n    public Reader getCharacterStream(final long pos, final long length)", "original_string": "    @Override\n    public Reader getCharacterStream(final long pos, final long length) throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Reader", "classes": []}, "docstring": "\n@throws SQLException\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[String]getSubString(long,int)", "name": "getSubString", "arg_nums": 2, "params": [{"name": "param", "type": "long"}, {"name": "param1", "type": "int"}], "return_type": "String", "signature": "@Override\n    public String getSubString(final long param, final int param1)", "original_string": "    @Override\n    public String getSubString(final long param, final int param1) throws SQLException {\n        return \"\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[long]length()", "name": "length", "arg_nums": 0, "params": [], "return_type": "long", "signature": "@Override\n    public long length()", "original_string": "    @Override\n    public long length() throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[long]position(Clob,long)", "name": "position", "arg_nums": 2, "params": [{"name": "clob", "type": "Clob"}, {"name": "param", "type": "long"}], "return_type": "long", "signature": "@Override\n    public long position(final Clob clob, final long param)", "original_string": "    @Override\n    public long position(final Clob clob, final long param) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[long]position(String,long)", "name": "position", "arg_nums": 2, "params": [{"name": "str", "type": "String"}, {"name": "param", "type": "long"}], "return_type": "long", "signature": "@Override\n    public long position(final String str, final long param)", "original_string": "    @Override\n    public long position(final String str, final long param) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[OutputStream]setAsciiStream(long)", "name": "setAsciiStream", "arg_nums": 1, "params": [{"name": "pos", "type": "long"}], "return_type": "OutputStream", "signature": "@Override\n    public OutputStream setAsciiStream(final long pos)", "original_string": "    @Override\n    public OutputStream setAsciiStream(final long pos) throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "OutputStream", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[Writer]setCharacterStream(long)", "name": "setCharacterStream", "arg_nums": 1, "params": [{"name": "pos", "type": "long"}], "return_type": "Writer", "signature": "@Override\n    public Writer setCharacterStream(final long pos)", "original_string": "    @Override\n    public Writer setCharacterStream(final long pos) throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Writer", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[int]setString(long,String)", "name": "setString", "arg_nums": 2, "params": [{"name": "pos", "type": "long"}, {"name": "str", "type": "String"}], "return_type": "int", "signature": "@Override\n    public int setString(final long pos, final String str)", "original_string": "    @Override\n    public int setString(final long pos, final String str) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[int]setString(long,String,int,int)", "name": "setString", "arg_nums": 4, "params": [{"name": "pos", "type": "long"}, {"name": "str", "type": "String"}, {"name": "offset", "type": "int"}, {"name": "len", "type": "int"}], "return_type": "int", "signature": "@Override\n    public int setString(final long pos, final String str, final int offset, final int len)", "original_string": "    @Override\n    public int setString(final long pos, final String str, final int offset, final int len) throws SQLException {\n        return 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob.[void]truncate(long)", "name": "truncate", "arg_nums": 1, "params": [{"name": "len", "type": "long"}], "return_type": "void", "signature": "@Override\n    public void truncate(final long len)", "original_string": "    @Override\n    public void truncate(final long len) throws SQLException {\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockClob", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockClob", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef.[String]getBaseTypeName()", "name": "getBaseTypeName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String getBaseTypeName()", "original_string": "    @Override\n    public String getBaseTypeName() throws SQLException {\n        return \"\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockRef", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef.[Object]getObject()", "name": "getObject", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "@Override\n    public Object getObject()", "original_string": "    @Override\n    public Object getObject() throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockRef", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef.[Object]getObject(Map<String, Class<?>>)", "name": "getObject", "arg_nums": 1, "params": [{"name": "map", "type": "Map<String, Class<?>>"}], "return_type": "Object", "signature": "@Override\n    public Object getObject(final Map<String, Class<?>> map)", "original_string": "    @Override\n    public Object getObject(final Map<String, Class<?>> map) throws SQLException {\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockRef", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef.[void]setObject(Object)", "name": "setObject", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "void", "signature": "@Override\n    public void setObject(final Object value)", "original_string": "    @Override\n    public void setObject(final Object value) throws SQLException {\n        // no-op\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetMockRef", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetMockRef", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]assertArrayEquals(byte[],byte[])", "name": "assertArrayEquals", "arg_nums": 2, "params": [{"name": "expected", "type": "byte[]"}, {"name": "actual", "type": "byte[]"}], "return_type": "void", "signature": "private static void assertArrayEquals(final byte[] expected, final byte[] actual)", "original_string": "    private static void assertArrayEquals(final byte[] expected, final byte[] actual) {\n        if (expected == actual) {\n            return;\n        }\n        if (expected.length != actual.length) {\n            failNotEquals(null, Arrays.toString(expected), Arrays.toString(actual));\n        }\n        for (int i = 0; i < expected.length; i++) {\n            final byte expectedItem = expected[i];\n            final byte actualItem = actual[i];\n            assertEquals(\"Array not equal at index \" + i, expectedItem, actualItem);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void setUp()", "original_string": "    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n        rs2 = new SqlNullCheckedResultSet(ProxyFactory.instance().createResultSet(new SqlNullUncheckedMockResultSet()));\n\n        setResultSet(ProxyFactory.instance().createResultSet(rs2)); // Override superclass field\n        rs = getResultSet();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up instance variables required by this test case.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetAsciiStream()", "name": "testGetAsciiStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetAsciiStream()", "original_string": "    public void testGetAsciiStream() throws SQLException {\n\n        assertNull(rs.getAsciiStream(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getAsciiStream(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final InputStream stream = new ByteArrayInputStream(new byte[0]);\n        rs2.setNullAsciiStream(stream);\n        assertNotNull(rs.getAsciiStream(1));\n        assertEquals(stream, rs.getAsciiStream(1));\n        assertNotNull(rs.getAsciiStream(\"column\"));\n        assertEquals(stream, rs.getAsciiStream(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getAsciiStream implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetBigDecimal()", "name": "testGetBigDecimal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetBigDecimal()", "original_string": "    public void testGetBigDecimal() throws SQLException {\n\n        assertNull(rs.getBigDecimal(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getBigDecimal(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final BigDecimal bd = new BigDecimal(5.0);\n        rs2.setNullBigDecimal(bd);\n        assertNotNull(rs.getBigDecimal(1));\n        assertEquals(bd, rs.getBigDecimal(1));\n        assertNotNull(rs.getBigDecimal(\"column\"));\n        assertEquals(bd, rs.getBigDecimal(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getBigDecimal implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetBinaryStream()", "name": "testGetBinaryStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetBinaryStream()", "original_string": "    public void testGetBinaryStream() throws SQLException {\n\n        assertNull(rs.getBinaryStream(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getBinaryStream(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final InputStream stream = new ByteArrayInputStream(new byte[0]);\n        rs2.setNullBinaryStream(stream);\n        assertNotNull(rs.getBinaryStream(1));\n        assertEquals(stream, rs.getBinaryStream(1));\n        assertNotNull(rs.getBinaryStream(\"column\"));\n        assertEquals(stream, rs.getBinaryStream(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getBinaryStream implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetBlob()", "name": "testGetBlob", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetBlob()", "original_string": "    public void testGetBlob() throws SQLException {\n\n        assertNull(rs.getBlob(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getBlob(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final Blob blob = new SqlNullCheckedResultSetMockBlob();\n        rs2.setNullBlob(blob);\n        assertNotNull(rs.getBlob(1));\n        assertEquals(blob, rs.getBlob(1));\n        assertNotNull(rs.getBlob(\"column\"));\n        assertEquals(blob, rs.getBlob(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getBlob implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetBoolean()", "name": "testGetBoolean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetBoolean()", "original_string": "    public void testGetBoolean() throws SQLException {\n\n        assertFalse(rs.getBoolean(1));\n        assertTrue(rs.wasNull());\n        assertFalse(rs.getBoolean(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        rs2.setNullBoolean(true);\n        assertTrue( rs.getBoolean(1));\n        assertTrue( rs.getBoolean(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getBoolean implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetByte()", "name": "testGetByte", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetByte()", "original_string": "    public void testGetByte() throws SQLException {\n\n        assertEquals((byte) 0, rs.getByte(1));\n        assertTrue(rs.wasNull());\n        assertEquals((byte) 0, rs.getByte(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final byte b = (byte) 10;\n        rs2.setNullByte(b);\n        assertEquals(b, rs.getByte(1));\n        assertEquals(b, rs.getByte(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getByte implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetBytes()", "name": "testGetBytes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetBytes()", "original_string": "    public void testGetBytes() throws SQLException {\n\n        assertNull(rs.getBytes(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getBytes(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final byte[] b = new byte[5];\n        for (int i = 0; i < 5; i++) {\n            b[0] = (byte) i;\n        }\n        rs2.setNullBytes(b);\n        assertNotNull(rs.getBytes(1));\n        assertArrayEquals(b, rs.getBytes(1));\n        assertNotNull(rs.getBytes(\"column\"));\n        assertArrayEquals(b, rs.getBytes(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getByte implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetCharacterStream()", "name": "testGetCharacterStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetCharacterStream()", "original_string": "    public void testGetCharacterStream() throws SQLException {\n\n        assertNull(rs.getCharacterStream(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getCharacterStream(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final Reader reader = new CharArrayReader(\"this is a string\".toCharArray());\n        rs2.setNullCharacterStream(reader);\n        assertNotNull(rs.getCharacterStream(1));\n        assertEquals(reader, rs.getCharacterStream(1));\n        assertNotNull(rs.getCharacterStream(\"column\"));\n        assertEquals(reader, rs.getCharacterStream(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getCharacterStream implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetClob()", "name": "testGetClob", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetClob()", "original_string": "    public void testGetClob() throws SQLException {\n\n        assertNull(rs.getClob(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getClob(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final Clob clob = new SqlNullCheckedResultSetMockClob();\n        rs2.setNullClob(clob);\n        assertNotNull(rs.getClob(1));\n        assertEquals(clob, rs.getClob(1));\n        assertNotNull(rs.getClob(\"column\"));\n        assertEquals(clob, rs.getClob(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getClob implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetDate()", "name": "testGetDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetDate()", "original_string": "    public void testGetDate() throws SQLException {\n\n        assertNull(rs.getDate(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getDate(\"column\"));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getDate(1, Calendar.getInstance()));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getDate(\"column\", Calendar.getInstance()));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final java.sql.Date date = new java.sql.Date(new java.util.Date().getTime());\n        rs2.setNullDate(date);\n        assertNotNull(rs.getDate(1));\n        assertEquals(date, rs.getDate(1));\n        assertNotNull(rs.getDate(\"column\"));\n        assertEquals(date, rs.getDate(\"column\"));\n        assertNotNull(rs.getDate(1, Calendar.getInstance()));\n        assertEquals(date, rs.getDate(1, Calendar.getInstance()));\n        assertNotNull(rs.getDate(\"column\", Calendar.getInstance()));\n        assertEquals(date, rs.getDate(\"column\", Calendar.getInstance()));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getDate implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetDouble()", "name": "testGetDouble", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetDouble()", "original_string": "    public void testGetDouble() throws SQLException {\n\n        assertEquals(0.0, rs.getDouble(1), 0.0);\n        assertTrue(rs.wasNull());\n        assertEquals(0.0, rs.getDouble(\"column\"), 0.0);\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final double d = 10.0;\n        rs2.setNullDouble(d);\n        assertEquals(d, rs.getDouble(1), 0.0);\n        assertEquals(d, rs.getDouble(\"column\"), 0.0);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getDouble implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetFloat()", "name": "testGetFloat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetFloat()", "original_string": "    public void testGetFloat() throws SQLException {\n        assertEquals(0, rs.getFloat(1), 0.0);\n        assertTrue(rs.wasNull());\n        assertEquals(0, rs.getFloat(\"column\"), 0.0);\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final float f = 10;\n        rs2.setNullFloat(f);\n        assertEquals(f, rs.getFloat(1), 0.0);\n        assertEquals(f, rs.getFloat(\"column\"), 0.0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getFloat implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetInt()", "name": "testGetInt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetInt()", "original_string": "    public void testGetInt() throws SQLException {\n        assertEquals(0, rs.getInt(1));\n        assertTrue(rs.wasNull());\n        assertEquals(0, rs.getInt(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final int i = 10;\n        rs2.setNullInt(i);\n        assertEquals(i, rs.getInt(1));\n        assertEquals(i, rs.getInt(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getInt implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetLong()", "name": "testGetLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetLong()", "original_string": "    public void testGetLong() throws SQLException {\n        assertEquals(0, rs.getLong(1));\n        assertTrue(rs.wasNull());\n        assertEquals(0, rs.getLong(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final long l = 10;\n        rs2.setNullLong(l);\n        assertEquals(l, rs.getLong(1));\n        assertEquals(l, rs.getLong(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getLong implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetObject()", "name": "testGetObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetObject()", "original_string": "    public void testGetObject() throws SQLException {\n\n        assertNull(rs.getObject(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getObject(\"column\"));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getObject(1, (Map<String, Class<?>>) null));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getObject(\"column\", (Map<String, Class<?>>) null));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final Object o = new Object();\n        rs2.setNullObject(o);\n        assertNotNull(rs.getObject(1));\n        assertEquals(o, rs.getObject(1));\n        assertNotNull(rs.getObject(\"column\"));\n        assertEquals(o, rs.getObject(\"column\"));\n        assertNotNull(rs.getObject(1, (Map<String, Class<?>>) null));\n        assertEquals(o, rs.getObject(1, (Map<String, Class<?>>) null));\n        assertNotNull(rs.getObject(\"column\", (Map<String, Class<?>>) null));\n        assertEquals(o, rs.getObject(\"column\", (Map<String, Class<?>>) null));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getObject implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetRef()", "name": "testGetRef", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetRef()", "original_string": "    public void testGetRef() throws SQLException {\n\n        assertNull(rs.getRef(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getRef(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final Ref ref = new SqlNullCheckedResultSetMockRef();\n        rs2.setNullRef(ref);\n        assertNotNull(rs.getRef(1));\n        assertEquals(ref, rs.getRef(1));\n        assertNotNull(rs.getRef(\"column\"));\n        assertEquals(ref, rs.getRef(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getRef implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetShort()", "name": "testGetShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetShort()", "original_string": "    public void testGetShort() throws SQLException {\n\n        assertEquals((short) 0, rs.getShort(1));\n        assertTrue(rs.wasNull());\n        assertEquals((short) 0, rs.getShort(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final short s = (short) 10;\n        rs2.setNullShort(s);\n        assertEquals(s, rs.getShort(1));\n        assertEquals(s, rs.getShort(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getShort implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetString()", "name": "testGetString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetString()", "original_string": "    public void testGetString() throws SQLException {\n        assertNull(rs.getString(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getString(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final String s = \"hello, world\";\n        rs2.setNullString(s);\n        assertEquals(s, rs.getString(1));\n        assertEquals(s, rs.getString(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getString implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetTime()", "name": "testGetTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetTime()", "original_string": "    public void testGetTime() throws SQLException {\n\n        assertNull(rs.getTime(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getTime(\"column\"));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getTime(1, Calendar.getInstance()));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getTime(\"column\", Calendar.getInstance()));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final Time time = new Time(new java.util.Date().getTime());\n        rs2.setNullTime(time);\n        assertNotNull(rs.getTime(1));\n        assertEquals(time, rs.getTime(1));\n        assertNotNull(rs.getTime(\"column\"));\n        assertEquals(time, rs.getTime(\"column\"));\n        assertNotNull(rs.getTime(1, Calendar.getInstance()));\n        assertEquals(time, rs.getTime(1, Calendar.getInstance()));\n        assertNotNull(rs.getTime(\"column\", Calendar.getInstance()));\n        assertEquals(time, rs.getTime(\"column\", Calendar.getInstance()));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getTime implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testGetTimestamp()", "name": "testGetTimestamp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetTimestamp()", "original_string": "    public void testGetTimestamp() throws SQLException {\n\n        assertNull(rs.getTimestamp(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getTimestamp(\"column\"));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getTimestamp(1, Calendar.getInstance()));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getTimestamp(\"column\", Calendar.getInstance()));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final Timestamp ts = new Timestamp(new java.util.Date().getTime());\n        rs2.setNullTimestamp(ts);\n        assertNotNull(rs.getTimestamp(1));\n        assertEquals(ts, rs.getTimestamp(1));\n        assertNotNull(rs.getTimestamp(\"column\"));\n        assertEquals(ts, rs.getTimestamp(\"column\"));\n        assertNotNull(rs.getTimestamp(1, Calendar.getInstance()));\n        assertEquals(ts, rs.getTimestamp(1, Calendar.getInstance()));\n        assertNotNull(rs.getTimestamp(\"column\", Calendar.getInstance()));\n        assertEquals(ts, rs.getTimestamp(\"column\", Calendar.getInstance()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getTimestamp implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullAsciiStream()", "name": "testSetNullAsciiStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullAsciiStream()", "original_string": "    public void testSetNullAsciiStream() throws SQLException {\n\n        assertNull(rs2.getNullAsciiStream());\n        // Set what gets returned to something other than the default\n        final InputStream stream = new ByteArrayInputStream(new byte[0]);\n        rs2.setNullAsciiStream(stream);\n        assertNotNull(rs.getAsciiStream(1));\n        assertEquals(stream, rs.getAsciiStream(1));\n        assertNotNull(rs.getAsciiStream(\"column\"));\n        assertEquals(stream, rs.getAsciiStream(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullAsciiStream implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullBigDecimal()", "name": "testSetNullBigDecimal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullBigDecimal()", "original_string": "    public void testSetNullBigDecimal() throws SQLException {\n\n        assertNull(rs2.getNullBigDecimal());\n        // Set what gets returned to something other than the default\n        final BigDecimal bd = new BigDecimal(5.0);\n        rs2.setNullBigDecimal(bd);\n        assertNotNull(rs.getBigDecimal(1));\n        assertEquals(bd, rs.getBigDecimal(1));\n        assertNotNull(rs.getBigDecimal(\"column\"));\n        assertEquals(bd, rs.getBigDecimal(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullBigDecimal implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullBinaryStream()", "name": "testSetNullBinaryStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullBinaryStream()", "original_string": "    public void testSetNullBinaryStream() throws SQLException {\n\n        assertNull(rs2.getNullBinaryStream());\n        // Set what gets returned to something other than the default\n        final InputStream stream = new ByteArrayInputStream(new byte[0]);\n        rs2.setNullBinaryStream(stream);\n        assertNotNull(rs.getBinaryStream(1));\n        assertEquals(stream, rs.getBinaryStream(1));\n        assertNotNull(rs.getBinaryStream(\"column\"));\n        assertEquals(stream, rs.getBinaryStream(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullBinaryStream implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullBlob()", "name": "testSetNullBlob", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullBlob()", "original_string": "    public void testSetNullBlob() throws SQLException {\n\n        assertNull(rs2.getNullBlob());\n        // Set what gets returned to something other than the default\n        final Blob blob = new SqlNullCheckedResultSetMockBlob();\n        rs2.setNullBlob(blob);\n        assertNotNull(rs.getBlob(1));\n        assertEquals(blob, rs.getBlob(1));\n        assertNotNull(rs.getBlob(\"column\"));\n        assertEquals(blob, rs.getBlob(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullBlob implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullBoolean()", "name": "testSetNullBoolean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullBoolean()", "original_string": "    public void testSetNullBoolean() throws SQLException {\n\n        assertFalse(rs2.getNullBoolean());\n        // Set what gets returned to something other than the default\n        rs2.setNullBoolean(true);\n        assertTrue( rs.getBoolean(1));\n        assertTrue( rs.getBoolean(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullBoolean implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullByte()", "name": "testSetNullByte", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullByte()", "original_string": "    public void testSetNullByte() throws SQLException {\n\n        assertEquals((byte) 0, rs2.getNullByte());\n        // Set what gets returned to something other than the default\n        final byte b = (byte) 10;\n        rs2.setNullByte(b);\n        assertEquals(b, rs.getByte(1));\n        assertEquals(b, rs.getByte(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullByte implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullBytes()", "name": "testSetNullBytes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullBytes()", "original_string": "    public void testSetNullBytes() throws SQLException {\n        // test the default, unset value\n        assertNull(rs2.getNullBytes());\n\n        // test that setting null is safe\n        rs2.setNullBytes(null);\n        assertNull(rs2.getNullBytes());\n\n        // Set what gets returned to something other than the default\n        final byte[] b = new byte[5];\n        for (int i = 0; i < 5; i++) {\n            b[0] = (byte) i;\n        }\n        rs2.setNullBytes(b);\n        assertNotNull(rs.getBytes(1));\n        assertArrayEquals(b, rs.getBytes(1));\n        assertNotNull(rs.getBytes(\"column\"));\n        assertArrayEquals(b, rs.getBytes(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullByte implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullCharacterStream()", "name": "testSetNullCharacterStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullCharacterStream()", "original_string": "    public void testSetNullCharacterStream() throws SQLException {\n\n        assertNull(rs2.getNullCharacterStream());\n        // Set what gets returned to something other than the default\n        final Reader reader = new CharArrayReader(\"this is a string\".toCharArray());\n        rs2.setNullCharacterStream(reader);\n        assertNotNull(rs.getCharacterStream(1));\n        assertEquals(reader, rs.getCharacterStream(1));\n        assertNotNull(rs.getCharacterStream(\"column\"));\n        assertEquals(reader, rs.getCharacterStream(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullCharacterStream implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullClob()", "name": "testSetNullClob", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullClob()", "original_string": "    public void testSetNullClob() throws SQLException {\n\n        assertNull(rs2.getNullClob());\n        // Set what gets returned to something other than the default\n        final Clob clob = new SqlNullCheckedResultSetMockClob();\n        rs2.setNullClob(clob);\n        assertNotNull(rs.getClob(1));\n        assertEquals(clob, rs.getClob(1));\n        assertNotNull(rs.getClob(\"column\"));\n        assertEquals(clob, rs.getClob(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullClob implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullDate()", "name": "testSetNullDate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullDate()", "original_string": "    public void testSetNullDate() throws SQLException {\n        // test the default, unset value\n        assertNull(rs2.getNullDate());\n\n        // test that setting null is safe\n        rs2.setNullDate(null);\n        assertNull(rs2.getNullDate());\n\n        // Set what gets returned to something other than the default\n        final java.sql.Date date = new java.sql.Date(new java.util.Date().getTime());\n        rs2.setNullDate(date);\n        assertNotNull(rs.getDate(1));\n        assertEquals(date, rs.getDate(1));\n        assertNotNull(rs.getDate(\"column\"));\n        assertEquals(date, rs.getDate(\"column\"));\n        assertNotNull(rs.getDate(1, Calendar.getInstance()));\n        assertEquals(date, rs.getDate(1, Calendar.getInstance()));\n        assertNotNull(rs.getDate(\"column\", Calendar.getInstance()));\n        assertEquals(date, rs.getDate(\"column\", Calendar.getInstance()));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullDate implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullDouble()", "name": "testSetNullDouble", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullDouble()", "original_string": "    public void testSetNullDouble() throws SQLException {\n        assertEquals(0.0, rs2.getNullDouble(), 0.0);\n        // Set what gets returned to something other than the default\n        final double d = 10.0;\n        rs2.setNullDouble(d);\n        assertEquals(d, rs.getDouble(1), 0.0);\n        assertEquals(d, rs.getDouble(\"column\"), 0.0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullDouble implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullFloat()", "name": "testSetNullFloat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullFloat()", "original_string": "    public void testSetNullFloat() throws SQLException {\n        assertEquals((float) 0.0, rs2.getNullFloat(), 0.0);\n        // Set what gets returned to something other than the default\n        final float f = (float) 10.0;\n        rs2.setNullFloat(f);\n        assertEquals(f, rs.getFloat(1), 0.0);\n        assertEquals(f, rs.getFloat(\"column\"), 0.0);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullFloat implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullInt()", "name": "testSetNullInt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullInt()", "original_string": "    public void testSetNullInt() throws SQLException {\n        assertEquals(0, rs2.getNullInt());\n        assertEquals(0, rs.getInt(1));\n        assertTrue(rs.wasNull());\n        assertEquals(0, rs.getInt(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final int i = 10;\n        rs2.setNullInt(i);\n        assertEquals(i, rs.getInt(1));\n        assertEquals(i, rs.getInt(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullInt implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullLong()", "name": "testSetNullLong", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullLong()", "original_string": "    public void testSetNullLong() throws SQLException {\n        assertEquals(0, rs2.getNullLong());\n        // Set what gets returned to something other than the default\n        final long l = 10;\n        rs2.setNullLong(l);\n        assertEquals(l, rs.getLong(1));\n        assertEquals(l, rs.getLong(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullLong implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullObject()", "name": "testSetNullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullObject()", "original_string": "    public void testSetNullObject() throws SQLException {\n        assertNull(rs2.getNullObject());\n        // Set what gets returned to something other than the default\n        final Object o = new Object();\n        rs2.setNullObject(o);\n        assertNotNull(rs.getObject(1));\n        assertEquals(o, rs.getObject(1));\n        assertNotNull(rs.getObject(\"column\"));\n        assertEquals(o, rs.getObject(\"column\"));\n        assertNotNull(rs.getObject(1, (Map<String, Class<?>>) null));\n        assertEquals(o, rs.getObject(1, (Map<String, Class<?>>) null));\n        assertNotNull(rs.getObject(\"column\", (Map<String, Class<?>>) null));\n        assertEquals(o, rs.getObject(\"column\", (Map<String, Class<?>>) null));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullObject implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullRef()", "name": "testSetNullRef", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullRef()", "original_string": "    public void testSetNullRef() throws SQLException {\n        assertNull(rs2.getNullRef());\n        // Set what gets returned to something other than the default\n        final Ref ref = new SqlNullCheckedResultSetMockRef();\n        rs2.setNullRef(ref);\n        assertNotNull(rs.getRef(1));\n        assertEquals(ref, rs.getRef(1));\n        assertNotNull(rs.getRef(\"column\"));\n        assertEquals(ref, rs.getRef(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullRef implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullShort()", "name": "testSetNullShort", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullShort()", "original_string": "    public void testSetNullShort() throws SQLException {\n\n        assertEquals((short) 0, rs2.getNullShort());\n        // Set what gets returned to something other than the default\n        final short s = (short) 10;\n        rs2.setNullShort(s);\n        assertEquals(s, rs.getShort(1));\n        assertEquals(s, rs.getShort(\"column\"));\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullShort implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullString()", "name": "testSetNullString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullString()", "original_string": "    public void testSetNullString() throws SQLException {\n        assertNull(rs2.getNullString());\n        // Set what gets returned to something other than the default\n        final String s = \"hello, world\";\n        rs2.setNullString(s);\n        assertEquals(s, rs.getString(1));\n        assertEquals(s, rs.getString(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullString implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullTime()", "name": "testSetNullTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullTime()", "original_string": "    public void testSetNullTime() throws SQLException {\n        // test the default, unset value\n        assertNull(rs2.getNullTime());\n\n        // test that setting null is safe\n        rs2.setNullTime(null);\n        assertNull(rs2.getNullTime());\n\n        // Set what gets returned to something other than the default\n        final Time time = new Time(new java.util.Date().getTime());\n        rs2.setNullTime(time);\n        assertNotNull(rs.getTime(1));\n        assertEquals(time, rs.getTime(1));\n        assertNotNull(rs.getTime(\"column\"));\n        assertEquals(time, rs.getTime(\"column\"));\n        assertNotNull(rs.getTime(1, Calendar.getInstance()));\n        assertEquals(time, rs.getTime(1, Calendar.getInstance()));\n        assertNotNull(rs.getTime(\"column\", Calendar.getInstance()));\n        assertEquals(time, rs.getTime(\"column\", Calendar.getInstance()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullTime implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testSetNullTimestamp()", "name": "testSetNullTimestamp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testSetNullTimestamp()", "original_string": "    public void testSetNullTimestamp() throws SQLException {\n        // test the default, unset value\n        assertNull(rs2.getNullTimestamp());\n\n        // test that setting null is safe\n        rs2.setNullTimestamp(null);\n        assertNull(rs2.getNullTimestamp());\n\n        // Set what gets returned to something other than the default\n        final Timestamp ts = new Timestamp(new java.util.Date().getTime());\n        rs2.setNullTimestamp(ts);\n        assertNotNull(rs.getTimestamp(1));\n        assertEquals(ts, rs.getTimestamp(1));\n        assertNotNull(rs.getTimestamp(\"column\"));\n        assertEquals(ts, rs.getTimestamp(\"column\"));\n        assertNotNull(rs.getTimestamp(1, Calendar.getInstance()));\n        assertEquals(ts, rs.getTimestamp(1, Calendar.getInstance()));\n        assertNotNull(rs.getTimestamp(\"column\", Calendar.getInstance()));\n        assertEquals(ts, rs.getTimestamp(\"column\", Calendar.getInstance()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the setNullTimestamp implementation.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testURL()", "name": "testURL", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testURL()", "original_string": "    public void testURL() throws SQLException, MalformedURLException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n        assertNull(rs.getURL(1));\n        assertTrue(rs.wasNull());\n        assertNull(rs.getURL(\"column\"));\n        assertTrue(rs.wasNull());\n        // Set what gets returned to something other than the default\n        final URL u = new URL(\"http://www.apache.org\");\n        rs2.setNullURL(u);\n        assertEquals(u, rs.getURL(1));\n        assertEquals(u, rs.getURL(\"column\"));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests the getURL and setNullURL implementations.\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest.[void]testWrapResultSet()", "name": "testWrapResultSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testWrapResultSet()", "original_string": "    public void testWrapResultSet() throws SQLException {\n        final ResultSet wrappedRs = mock(ResultSet.class);\n        final ResultSet rs = SqlNullCheckedResultSet.wrap(wrappedRs);\n        rs.beforeFirst();\n        verify(wrappedRs).beforeFirst();\n        rs.next();\n        verify(wrappedRs).next();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullCheckedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullCheckedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullUncheckedMockResultSet.[Object]invoke(Object,Method,Object[])", "name": "invoke", "arg_nums": 3, "params": [{"name": "proxy", "type": "Object"}, {"name": "method", "type": "Method"}, {"name": "args", "type": "Object[]"}], "return_type": "Object", "signature": "@Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)", "original_string": "    @Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n\n        final Class<?> returnType = method.getReturnType();\n\n        if (method.getName().equals(\"wasNull\")) {\n            return Boolean.TRUE;\n\n        }\n        if (returnType.equals(Boolean.TYPE)) {\n            return Boolean.FALSE;\n\n        }\n        if (returnType.equals(Integer.TYPE)) {\n            return Integer.valueOf(0);\n\n        }\n        if (returnType.equals(Short.TYPE)) {\n            return Short.valueOf((short) 0);\n\n        }\n        if (returnType.equals(Double.TYPE)) {\n            return Double.valueOf(0);\n\n        }\n        if (returnType.equals(Long.TYPE)) {\n            return Long.valueOf(0);\n\n        }\n        if (returnType.equals(Byte.TYPE)) {\n            return Byte.valueOf((byte) 0);\n\n        }\n        if (returnType.equals(Float.TYPE)) {\n            return Float.valueOf(0);\n\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java", "class_name": "SqlNullUncheckedMockResultSet", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSetTest.java.SqlNullUncheckedMockResultSet", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nAlways return false for booleans, 0 for numerics, and null for Objects.\n\n@see java.lang.reflect.InvocationHandler#invoke(Object, java.lang.reflect.Method, Object[])\n"}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void setUp()", "original_string": "    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n        setResultSet(StringTrimmedResultSet.wrap(getResultSet()));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java", "class_name": "StringTrimmedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest.[void]testGetObject()", "name": "testGetObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetObject()", "original_string": "    public void testGetObject() throws SQLException {\n        getResultSet().next();\n        assertEquals(\"notInBean\", getResultSet().getObject(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java", "class_name": "StringTrimmedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest.[void]testGetString()", "name": "testGetString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testGetString()", "original_string": "    public void testGetString() throws SQLException {\n        getResultSet().next();\n        assertEquals(\"notInBean\", getResultSet().getString(4));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java", "class_name": "StringTrimmedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest.[void]testMultipleWrappers()", "name": "testMultipleWrappers", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void testMultipleWrappers()", "original_string": "    public void testMultipleWrappers() throws Exception {\n        // Create a ResultSet with data\n        final Object[][] rows = { { null } };\n        ResultSet rs = MockResultSet.create(metaData, rows);\n\n        // Wrap the ResultSet with a null checked version\n        final SqlNullCheckedResultSet ncrs = new SqlNullCheckedResultSet(rs);\n        ncrs.setNullString(\"   trim this   \");\n        rs = ProxyFactory.instance().createResultSet(ncrs);\n\n        // Wrap the wrapper with a string trimmed version\n        rs = StringTrimmedResultSet.wrap(rs);\n\n        rs.next();\n        assertEquals(\"trim this\", rs.getString(1));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java", "class_name": "StringTrimmedResultSetTest", "class_uri": "src/test/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSetTest.java.StringTrimmedResultSetTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nMake sure 2 wrappers work together.\n\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[]StatementConfiguration(Integer,Integer,Integer,Integer,Duration)", "name": "StatementConfiguration", "arg_nums": 5, "params": [{"name": "fetchDirection", "type": "Integer"}, {"name": "fetchSize", "type": "Integer"}, {"name": "maxFieldSize", "type": "Integer"}, {"name": "maxRows", "type": "Integer"}, {"name": "queryTimeout", "type": "Duration"}], "return_type": "", "signature": "public StatementConfiguration(final Integer fetchDirection, final Integer fetchSize,\n                                  final Integer maxFieldSize, final Integer maxRows,\n                                  final Duration queryTimeout)", "original_string": "    public StatementConfiguration(final Integer fetchDirection, final Integer fetchSize,\n                                  final Integer maxFieldSize, final Integer maxRows,\n                                  final Duration queryTimeout) {\n        this.fetchDirection = fetchDirection;\n        this.fetchSize = fetchSize;\n        this.maxFieldSize = maxFieldSize;\n        this.maxRows = maxRows;\n        if (queryTimeout != null && queryTimeout.getSeconds() > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException(String.format(\"queryTimeout overflow: %d > %,d\", queryTimeout.getSeconds(), Integer.MAX_VALUE));\n        }\n        this.queryTimeout = queryTimeout;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for {@code StatementConfiguration}.  For more flexibility, use {@link Builder}.\n\n@param fetchDirection The direction for fetching rows from database tables.\n@param fetchSize The number of rows that should be fetched from the database when more rows are needed.\n@param maxFieldSize The maximum number of bytes that can be returned for character and binary column values.\n@param maxRows The maximum number of rows that a {@code ResultSet} can produce.\n@param queryTimeout The number of seconds the driver will wait for execution.\n@since 1.8.0\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[]StatementConfiguration(Integer,Integer,Integer,Integer,Integer)", "name": "StatementConfiguration", "arg_nums": 5, "params": [{"name": "fetchDirection", "type": "Integer"}, {"name": "fetchSize", "type": "Integer"}, {"name": "maxFieldSize", "type": "Integer"}, {"name": "maxRows", "type": "Integer"}, {"name": "queryTimeout", "type": "Integer"}], "return_type": "", "signature": "@Deprecated\n    public StatementConfiguration(final Integer fetchDirection, final Integer fetchSize,\n                                  final Integer maxFieldSize, final Integer maxRows,\n                                  final Integer queryTimeout)", "original_string": "    @Deprecated\n    public StatementConfiguration(final Integer fetchDirection, final Integer fetchSize,\n                                  final Integer maxFieldSize, final Integer maxRows,\n                                  final Integer queryTimeout) {\n        this(fetchDirection, fetchSize, maxFieldSize, maxRows, Duration.ofSeconds(queryTimeout));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for {@code StatementConfiguration}.  For more flexibility, use {@link Builder}.\n\n@param fetchDirection The direction for fetching rows from database tables.\n@param fetchSize The number of rows that should be fetched from the database when more rows are needed.\n@param maxFieldSize The maximum number of bytes that can be returned for character and binary column values.\n@param maxRows The maximum number of rows that a {@code ResultSet} can produce.\n@param queryTimeout The number of seconds the driver will wait for execution.\n@deprecated Use {@link StatementConfiguration#StatementConfiguration(Integer, Integer, Integer, Integer, Duration)}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[void]finalize()", "name": "finalize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    protected final void finalize()", "original_string": "    @Override\n    protected final void finalize() {\n        // SpotBugs CT_CONSTRUCTOR_THROW\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "@Override\n    protected final", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Does nothing."}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[Integer]getFetchDirection()", "name": "getFetchDirection", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "public Integer getFetchDirection()", "original_string": "    public Integer getFetchDirection() {\n        return fetchDirection;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nGets the fetch direction.\n\n@return The direction to fetch or null if not set.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[Integer]getFetchSize()", "name": "getFetchSize", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "public Integer getFetchSize()", "original_string": "    public Integer getFetchSize() {\n        return fetchSize;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nGets the fetch size.\n\n@return The fetch size or null if not set.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[Integer]getMaxFieldSize()", "name": "getMaxFieldSize", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "public Integer getMaxFieldSize()", "original_string": "    public Integer getMaxFieldSize() {\n        return maxFieldSize;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nGets the max field size.\n\n@return The max field size or null if not set.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[Integer]getMaxRows()", "name": "getMaxRows", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "public Integer getMaxRows()", "original_string": "    public Integer getMaxRows() {\n        return maxRows;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nGets the max rows.\n\n@return The max rows or null if not set.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[Integer]getQueryTimeout()", "name": "getQueryTimeout", "arg_nums": 0, "params": [], "return_type": "Integer", "signature": "@Deprecated\n    public Integer getQueryTimeout()", "original_string": "    @Deprecated\n    public Integer getQueryTimeout() {\n        return queryTimeout != null ? (int) queryTimeout.getSeconds() : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nGets the query timeout.\n\n@return The query timeout or null if not set.\n@deprecated Use {@link #getQueryTimeoutDuration()}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[Duration]getQueryTimeoutDuration()", "name": "getQueryTimeoutDuration", "arg_nums": 0, "params": [], "return_type": "Duration", "signature": "public Duration getQueryTimeoutDuration()", "original_string": "    public Duration getQueryTimeoutDuration() {\n        return queryTimeout;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Duration", "classes": []}, "docstring": "\nGets the query timeout.\n\n@return The query timeout or null if not set.\n@since 1.8.0\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[boolean]isFetchDirectionSet()", "name": "isFetchDirectionSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isFetchDirectionSet()", "original_string": "    public boolean isFetchDirectionSet() {\n        return fetchDirection != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nWhether fetch direction is set.\n\n@return true if set, false otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[boolean]isFetchSizeSet()", "name": "isFetchSizeSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isFetchSizeSet()", "original_string": "    public boolean isFetchSizeSet() {\n        return fetchSize != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nWhether fetch size is set.\n\n@return true if set, false otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[boolean]isMaxFieldSizeSet()", "name": "isMaxFieldSizeSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isMaxFieldSizeSet()", "original_string": "    public boolean isMaxFieldSizeSet() {\n        return maxFieldSize != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nWhether max field size is set.\n\n@return true if set, false otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[boolean]isMaxRowsSet()", "name": "isMaxRowsSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isMaxRowsSet()", "original_string": "    public boolean isMaxRowsSet() {\n        return maxRows != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nWhether max rows is set.\n\n@return true if set, false otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration.[boolean]isQueryTimeoutSet()", "name": "isQueryTimeoutSet", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isQueryTimeoutSet()", "original_string": "    public boolean isQueryTimeoutSet() {\n        return queryTimeout != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java", "class_name": "StatementConfiguration", "class_uri": "src/main/java/org/apache/commons/dbutils/StatementConfiguration.java.StatementConfiguration", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nWhether query timeout is set.\n\n@return true if set, false otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java.ColumnHandler.[T]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "T", "signature": "T apply(ResultSet resultSet, int columnIndex)", "original_string": "    T apply(ResultSet resultSet, int columnIndex) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java", "class_name": "ColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java.ColumnHandler", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nRetrieves the current row's column value from a {@link ResultSet} and stores it into an instance of {@code propType}. This method is only called if\n{@link #match(Class)} returns true.\n\n@param resultSet   The source result set. This must be on the correct row.\n@param columnIndex The position of the column to retrieve, a 1-based index.\n@return The converted value or the original value if something doesn't work out.\n@throws SQLException if the columnIndex is not valid; if a database access error occurs or this method is called on a closed result set\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java.ColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "boolean match(Class<?> propType)", "original_string": "    boolean match(Class<?> propType);", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java", "class_name": "ColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/ColumnHandler.java.ColumnHandler", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether to handle a column targeted for a value type matching {@code propType}.\n\n@param propType The type of the target parameter.\n@return true is this property handler handles this {@code propType}; false otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator.[Iterable<Object[]>]iterable(ResultSet)", "name": "iterable", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Iterable<Object[]>", "signature": "public static Iterable<Object[]> iterable(final ResultSet resultSet)", "original_string": "    public static Iterable<Object[]> iterable(final ResultSet resultSet) {\n        return () -> new ResultSetIterator(resultSet);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java", "class_name": "ResultSetIterator", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Iterable<Object[]>", "classes": []}, "docstring": "\nGenerates an {@code Iterable}, suitable for use in for-each loops.\n\n@param resultSet Wrap this {@code ResultSet} in an {@code Iterator}.\n@return an {@code Iterable}, suitable for use in for-each loops.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator.[]ResultSetIterator(ResultSet)", "name": "ResultSetIterator", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "", "signature": "public ResultSetIterator(final ResultSet resultSet)", "original_string": "    public ResultSetIterator(final ResultSet resultSet) {\n        this(resultSet, new BasicRowProcessor());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java", "class_name": "ResultSetIterator", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for ResultSetIterator.\n@param resultSet Wrap this {@code ResultSet} in an {@code Iterator}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator.[]ResultSetIterator(ResultSet,RowProcessor)", "name": "ResultSetIterator", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public ResultSetIterator(final ResultSet resultSet, final RowProcessor convert)", "original_string": "    public ResultSetIterator(final ResultSet resultSet, final RowProcessor convert) {\n        this.resultSet = resultSet;\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java", "class_name": "ResultSetIterator", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for ResultSetIterator.\n@param resultSet Wrap this {@code ResultSet} in an {@code Iterator}.\n@param convert The processor to use when converting a row into an\n{@code Object[]}.  Defaults to a\n{@code BasicRowProcessor}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator.[boolean]hasNext()", "name": "hasNext", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "@Override\n    public boolean hasNext()", "original_string": "    @Override\n    public boolean hasNext() {\n        try {\n            return !resultSet.isLast();\n        } catch (final SQLException e) {\n            rethrow(e);\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java", "class_name": "ResultSetIterator", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if there are more rows in the ResultSet.\n@return boolean {@code true} if there are more rows\n@throws RuntimeException if an SQLException occurs.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator.[Object[]]next()", "name": "next", "arg_nums": 0, "params": [], "return_type": "Object[]", "signature": "@Override\n    public Object[] next()", "original_string": "    @Override\n    public Object[] next() {\n        try {\n            return resultSet.next() ? this.convert.toArray(resultSet) : new Object[0];\n        } catch (final SQLException e) {\n            rethrow(e);\n            return null;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java", "class_name": "ResultSetIterator", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nReturns the next row as an {@code Object[]}.\n@return An {@code Object[]} with the same number of elements as\ncolumns in the {@code ResultSet}.\n@see java.util.Iterator#next()\n@throws RuntimeException if an SQLException occurs.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator.[void]remove()", "name": "remove", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    public void remove()", "original_string": "    @Override\n    public void remove() {\n        try {\n            this.resultSet.deleteRow();\n        } catch (final SQLException e) {\n            rethrow(e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java", "class_name": "ResultSetIterator", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nDeletes the current row from the {@code ResultSet}.\n@see java.util.Iterator#remove()\n@throws RuntimeException if an SQLException occurs.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator.[void]rethrow(SQLException)", "name": "rethrow", "arg_nums": 1, "params": [{"name": "e", "type": "SQLException"}], "return_type": "void", "signature": "protected void rethrow(final SQLException e)", "original_string": "    protected void rethrow(final SQLException e) {\n        throw new RuntimeException(e.getMessage());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java", "class_name": "ResultSetIterator", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetIterator.java.ResultSetIterator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nRethrow the SQLException as a RuntimeException.  This implementation\ncreates a new RuntimeException with the SQLException's error message.\n@param e SQLException to rethrow\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[ProxyFactory]instance()", "name": "instance", "arg_nums": 0, "params": [], "return_type": "ProxyFactory", "signature": "public static ProxyFactory instance()", "original_string": "    public static ProxyFactory instance() {\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ProxyFactory", "classes": []}, "docstring": "\nReturns the Singleton instance of this class.\n\n@return singleton instance\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[]ProxyFactory()", "name": "ProxyFactory", "arg_nums": 0, "params": [], "return_type": "", "signature": "protected ProxyFactory()", "original_string": "    protected ProxyFactory() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nProtected constructor for ProxyFactory subclasses to use.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[CallableStatement]createCallableStatement(InvocationHandler)", "name": "createCallableStatement", "arg_nums": 1, "params": [{"name": "handler", "type": "InvocationHandler"}], "return_type": "CallableStatement", "signature": "public CallableStatement createCallableStatement(final InvocationHandler handler)", "original_string": "    public CallableStatement createCallableStatement(final InvocationHandler handler) {\n        return newProxyInstance(CallableStatement.class, handler);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CallableStatement", "classes": []}, "docstring": "\nCreates a new proxy {@code CallableStatement} object.\n@param handler The handler that intercepts/overrides method calls.\n@return proxied CallableStatement\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[Connection]createConnection(InvocationHandler)", "name": "createConnection", "arg_nums": 1, "params": [{"name": "handler", "type": "InvocationHandler"}], "return_type": "Connection", "signature": "public Connection createConnection(final InvocationHandler handler)", "original_string": "    public Connection createConnection(final InvocationHandler handler) {\n        return newProxyInstance(Connection.class, handler);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Connection", "classes": []}, "docstring": "\nCreates a new proxy {@code Connection} object.\n@param handler The handler that intercepts/overrides method calls.\n@return proxied Connection\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[Driver]createDriver(InvocationHandler)", "name": "createDriver", "arg_nums": 1, "params": [{"name": "handler", "type": "InvocationHandler"}], "return_type": "Driver", "signature": "public Driver createDriver(final InvocationHandler handler)", "original_string": "    public Driver createDriver(final InvocationHandler handler) {\n        return newProxyInstance(Driver.class, handler);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Driver", "classes": []}, "docstring": "\nCreates a new proxy {@code Driver} object.\n@param handler The handler that intercepts/overrides method calls.\n@return proxied Driver\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[PreparedStatement]createPreparedStatement(InvocationHandler)", "name": "createPreparedStatement", "arg_nums": 1, "params": [{"name": "handler", "type": "InvocationHandler"}], "return_type": "PreparedStatement", "signature": "public PreparedStatement createPreparedStatement(final InvocationHandler handler)", "original_string": "    public PreparedStatement createPreparedStatement(final InvocationHandler handler) {\n        return newProxyInstance(PreparedStatement.class, handler);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "PreparedStatement", "classes": []}, "docstring": "\nCreates a new proxy {@code PreparedStatement} object.\n@param handler The handler that intercepts/overrides method calls.\n@return proxied PreparedStatement\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[ResultSet]createResultSet(InvocationHandler)", "name": "createResultSet", "arg_nums": 1, "params": [{"name": "handler", "type": "InvocationHandler"}], "return_type": "ResultSet", "signature": "public ResultSet createResultSet(final InvocationHandler handler)", "original_string": "    public ResultSet createResultSet(final InvocationHandler handler) {\n        return newProxyInstance(ResultSet.class, handler);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": "\nCreates a new proxy {@code ResultSet} object.\n@param handler The handler that intercepts/overrides method calls.\n@return proxied ResultSet\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[ResultSetMetaData]createResultSetMetaData(InvocationHandler)", "name": "createResultSetMetaData", "arg_nums": 1, "params": [{"name": "handler", "type": "InvocationHandler"}], "return_type": "ResultSetMetaData", "signature": "public ResultSetMetaData createResultSetMetaData(final InvocationHandler handler)", "original_string": "    public ResultSetMetaData createResultSetMetaData(final InvocationHandler handler) {\n        return newProxyInstance(ResultSetMetaData.class, handler);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ResultSetMetaData", "classes": []}, "docstring": "\nCreates a new proxy {@code ResultSetMetaData} object.\n@param handler The handler that intercepts/overrides method calls.\n@return proxied ResultSetMetaData\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[Statement]createStatement(InvocationHandler)", "name": "createStatement", "arg_nums": 1, "params": [{"name": "handler", "type": "InvocationHandler"}], "return_type": "Statement", "signature": "public Statement createStatement(final InvocationHandler handler)", "original_string": "    public Statement createStatement(final InvocationHandler handler) {\n        return newProxyInstance(Statement.class, handler);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Statement", "classes": []}, "docstring": "\nCreates a new proxy {@code Statement} object.\n@param handler The handler that intercepts/overrides method calls.\n@return proxied Statement\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory.[T]newProxyInstance(Class<T>,InvocationHandler)", "name": "newProxyInstance", "arg_nums": 2, "params": [{"name": "type", "type": "Class<T>"}, {"name": "handler", "type": "InvocationHandler"}], "return_type": "T", "signature": "public <T> T newProxyInstance(final Class<T> type, final InvocationHandler handler)", "original_string": "    public <T> T newProxyInstance(final Class<T> type, final InvocationHandler handler) {\n        return type.cast(Proxy.newProxyInstance(handler.getClass().getClassLoader(), new Class<?>[] {type}, handler));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java", "class_name": "ProxyFactory", "class_uri": "src/main/java/org/apache/commons/dbutils/ProxyFactory.java.ProxyFactory", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nConvenience method to generate a single-interface proxy using the handler's classloader\n\n@param <T> The type of object to proxy\n@param type The type of object to proxy\n@param handler The handler that intercepts/overrides method calls.\n@return proxied object\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[]QueryRunner()", "name": "QueryRunner", "arg_nums": 0, "params": [], "return_type": "", "signature": "public QueryRunner()", "original_string": "    public QueryRunner() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[]QueryRunner(boolean)", "name": "QueryRunner", "arg_nums": 1, "params": [{"name": "pmdKnownBroken", "type": "boolean"}], "return_type": "", "signature": "public QueryRunner(final boolean pmdKnownBroken)", "original_string": "    public QueryRunner(final boolean pmdKnownBroken) {\n        super(pmdKnownBroken);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that controls the use of {@code ParameterMetaData}.\n\n@param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int) };\nif {@code pmdKnownBroken} is set to true, we won't even try it; if false, we'll try it,\nand if it breaks, we'll remember not to use it again.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[]QueryRunner(DataSource)", "name": "QueryRunner", "arg_nums": 1, "params": [{"name": "ds", "type": "DataSource"}], "return_type": "", "signature": "public QueryRunner(final DataSource ds)", "original_string": "    public QueryRunner(final DataSource ds) {\n        super(ds);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code DataSource} to use.\n\nMethods that do not take a {@code Connection} parameter will retrieve connections from this\n{@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[]QueryRunner(DataSource,boolean)", "name": "QueryRunner", "arg_nums": 2, "params": [{"name": "ds", "type": "DataSource"}, {"name": "pmdKnownBroken", "type": "boolean"}], "return_type": "", "signature": "public QueryRunner(final DataSource ds, final boolean pmdKnownBroken)", "original_string": "    public QueryRunner(final DataSource ds, final boolean pmdKnownBroken) {\n        super(ds, pmdKnownBroken);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code DataSource} and controls the use of {@code ParameterMetaData}.\nMethods that do not take a {@code Connection} parameter will retrieve connections from this\n{@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n@param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int) };\nif {@code pmdKnownBroken} is set to true, we won't even try it; if false, we'll try it,\nand if it breaks, we'll remember not to use it again.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[]QueryRunner(DataSource,boolean,StatementConfiguration)", "name": "QueryRunner", "arg_nums": 3, "params": [{"name": "ds", "type": "DataSource"}, {"name": "pmdKnownBroken", "type": "boolean"}, {"name": "stmtConfig", "type": "StatementConfiguration"}], "return_type": "", "signature": "public QueryRunner(final DataSource ds, final boolean pmdKnownBroken, final StatementConfiguration stmtConfig)", "original_string": "    public QueryRunner(final DataSource ds, final boolean pmdKnownBroken, final StatementConfiguration stmtConfig) {\n        super(ds, pmdKnownBroken, stmtConfig);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code DataSource}, a {@code StatementConfiguration}, and\ncontrols the use of {@code ParameterMetaData}.  Methods that do not take a {@code Connection} parameter\nwill retrieve connections from this {@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n@param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int) };\nif {@code pmdKnownBroken} is set to true, we won't even try it; if false, we'll try it,\nand if it breaks, we'll remember not to use it again.\n@param stmtConfig The configuration to apply to statements when they are prepared.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[]QueryRunner(DataSource,StatementConfiguration)", "name": "QueryRunner", "arg_nums": 2, "params": [{"name": "ds", "type": "DataSource"}, {"name": "stmtConfig", "type": "StatementConfiguration"}], "return_type": "", "signature": "public QueryRunner(final DataSource ds, final StatementConfiguration stmtConfig)", "original_string": "    public QueryRunner(final DataSource ds, final StatementConfiguration stmtConfig) {\n        super(ds, stmtConfig);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code DataSource} to use and a {@code StatementConfiguration}.\n\nMethods that do not take a {@code Connection} parameter will retrieve connections from this\n{@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n@param stmtConfig The configuration to apply to statements when they are prepared.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[]QueryRunner(StatementConfiguration)", "name": "QueryRunner", "arg_nums": 1, "params": [{"name": "stmtConfig", "type": "StatementConfiguration"}], "return_type": "", "signature": "public QueryRunner(final StatementConfiguration stmtConfig)", "original_string": "    public QueryRunner(final StatementConfiguration stmtConfig) {\n        super(stmtConfig);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code StatementConfiguration} to configure statements when\npreparing them.\n\n@param stmtConfig The configuration to apply to statements when they are prepared.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int[]]batch(Connection,String,Object[][])", "name": "batch", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "params", "type": "Object[][]"}], "return_type": "int[]", "signature": "public int[] batch(final Connection conn, final String sql, final Object[][] params)", "original_string": "    public int[] batch(final Connection conn, final String sql, final Object[][] params) throws SQLException {\n        if (conn == null) {\n            throw new SQLException(\"Null connection\");\n        }\n\n        if (sql == null) {\n            throw new SQLException(\"Null SQL statement\");\n        }\n\n        if (params == null) {\n            throw new SQLException(\"Null parameters. If parameters aren't need, pass an empty array.\");\n        }\n\n        PreparedStatement stmt = null;\n        ParameterMetaData pmd = null;\n        int[] rows = null;\n        try {\n            stmt = this.prepareStatement(conn, sql);\n            // When the batch size is large, prefetching parameter metadata before filling\n            // the statement can reduce lots of JDBC communications.\n            pmd = getParameterMetaData(stmt);\n\n            for (final Object[] param : params) {\n                this.fillStatement(stmt, pmd, param);\n                stmt.addBatch();\n            }\n            rows = stmt.executeBatch();\n\n        } catch (final SQLException e) {\n            rethrow(e, sql, (Object[])params);\n        } finally {\n            close(stmt);\n        }\n\n        return rows;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int[]", "classes": []}, "docstring": "\nExecute a batch of SQL INSERT, UPDATE, or DELETE queries.\n\n@param conn The Connection to use to run the query.  The caller is\nresponsible for closing this Connection.\n@param sql The SQL to execute.\n@param params An array of query replacement parameters.  Each row in\nthis array is one set of batch replacement values.\n@return The number of rows updated per statement.\n@throws SQLException if a database access error occurs\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int[]]batch(String,Object[][])", "name": "batch", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "params", "type": "Object[][]"}], "return_type": "int[]", "signature": "public int[] batch(final String sql, final Object[][] params)", "original_string": "    public int[] batch(final String sql, final Object[][] params) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.batch(conn, sql, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int[]", "classes": []}, "docstring": "\nExecute a batch of SQL INSERT, UPDATE, or DELETE queries.  The\n{@code Connection} is retrieved from the {@code DataSource}\nset in the constructor.  This {@code Connection} must be in\nauto-commit mode or the update will not be saved.\n\n@param sql The SQL to execute.\n@param params An array of query replacement parameters.  Each row in\nthis array is one set of batch replacement values.\n@return The number of rows updated per statement.\n@throws SQLException if a database access error occurs\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]execute(Connection,String)", "name": "execute", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}], "return_type": "int", "signature": "public int execute(final Connection conn, final String sql, final Object... params)", "original_string": "    public int execute(final Connection conn, final String sql, final Object... params) throws SQLException {\n        if (conn == null) {\n            throw new SQLException(\"Null connection\");\n        }\n\n        if (sql == null) {\n            throw new SQLException(\"Null SQL statement\");\n        }\n\n        CallableStatement stmt = null;\n        int rows = 0;\n\n        try {\n            stmt = prepareCall(conn, sql);\n            this.fillStatement(stmt, params);\n            stmt.execute();\n            rows = stmt.getUpdateCount();\n            retrieveOutParameters(stmt, params);\n\n        } catch (final SQLException e) {\n            rethrow(e, sql, params);\n\n        } finally {\n            close(stmt);\n        }\n\n        return rows;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecute an SQL statement, including a stored procedure call, which does\nnot return any result sets.\nAny parameters which are instances of {@link OutParameter} will be\nregistered as OUT parameters.\n<p>\nUse this method when invoking a stored procedure with OUT parameters\nthat does not return any result sets.  If you are not invoking a stored\nprocedure, or the stored procedure has no OUT parameters, consider using\n{@link #update(java.sql.Connection, String, Object...) }.\nIf the stored procedure returns result sets, use\n{@link #execute(java.sql.Connection, String, org.apache.commons.dbutils.ResultSetHandler, Object...) }.\n\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param params The query replacement parameters.\n@return The number of rows updated.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[List<T>]execute(Connection,String,ResultSetHandler<T>)", "name": "execute", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "List<T>", "signature": "public <T> List<T> execute(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> List<T> execute(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        if (conn == null) {\n            throw new SQLException(\"Null connection\");\n        }\n\n        if (sql == null) {\n            throw new SQLException(\"Null SQL statement\");\n        }\n\n        if (rsh == null) {\n            throw new SQLException(\"Null ResultSetHandler\");\n        }\n\n        CallableStatement stmt = null;\n        final List<T> results = new LinkedList<>();\n\n        try {\n            stmt = prepareCall(conn, sql);\n            this.fillStatement(stmt, params);\n            boolean moreResultSets = stmt.execute();\n            // Handle multiple result sets by passing them through the handler\n            // retaining the final result\n            while (moreResultSets) {\n                try (@SuppressWarnings(\"resource\")\n                // assume the ResultSet wrapper properly closes\n                ResultSet resultSet = wrap(stmt.getResultSet())) {\n                    results.add(rsh.handle(resultSet));\n                    moreResultSets = stmt.getMoreResults();\n                }\n            }\n            retrieveOutParameters(stmt, params);\n\n        } catch (final SQLException e) {\n            rethrow(e, sql, params);\n\n        } finally {\n            close(stmt);\n        }\n\n        return results;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\nExecute an SQL statement, including a stored procedure call, which\nreturns one or more result sets.\nAny parameters which are instances of {@link OutParameter} will be\nregistered as OUT parameters.\n<p>\nUse this method when: a) running SQL statements that return multiple\nresult sets; b) invoking a stored procedure that return result\nsets and OUT parameters.  Otherwise you may wish to use\n{@link #query(java.sql.Connection, String, org.apache.commons.dbutils.ResultSetHandler, Object...) }\n(if there are no OUT parameters) or\n{@link #execute(java.sql.Connection, String, Object...) }\n(if there are no result sets).\n\n@param <T> The type of object that the handler returns\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param rsh The result set handler\n@param params The query replacement parameters.\n@return A list of objects generated by the handler\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]execute(String)", "name": "execute", "arg_nums": 1, "params": [{"name": "sql", "type": "String"}], "return_type": "int", "signature": "public int execute(final String sql, final Object... params)", "original_string": "    public int execute(final String sql, final Object... params) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.execute(conn, sql, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecute an SQL statement, including a stored procedure call, which does\nnot return any result sets.\nAny parameters which are instances of {@link OutParameter} will be\nregistered as OUT parameters.\n<p>\nUse this method when invoking a stored procedure with OUT parameters\nthat does not return any result sets.  If you are not invoking a stored\nprocedure, or the stored procedure has no OUT parameters, consider using\n{@link #update(String, Object...) }.\nIf the stored procedure returns result sets, use\n{@link #execute(String, org.apache.commons.dbutils.ResultSetHandler, Object...) }.\n<p>\nThe {@code Connection} is retrieved from the {@code DataSource}\nset in the constructor.  This {@code Connection} must be in\nauto-commit mode or the update will not be saved.\n\n@param sql The SQL statement to execute.\n@param params Initializes the CallableStatement's parameters (i.e. '?').\n@throws SQLException if a database access error occurs\n@return The number of rows updated.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[List<T>]execute(String,ResultSetHandler<T>)", "name": "execute", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "List<T>", "signature": "public <T> List<T> execute(final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> List<T> execute(final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.execute(conn, sql, rsh, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\nExecute an SQL statement, including a stored procedure call, which\nreturns one or more result sets.\nAny parameters which are instances of {@link OutParameter} will be\nregistered as OUT parameters.\n<p>\nUse this method when: a) running SQL statements that return multiple\nresult sets; b) invoking a stored procedure that return result\nsets and OUT parameters.  Otherwise you may wish to use\n{@link #query(String, org.apache.commons.dbutils.ResultSetHandler, Object...) }\n(if there are no OUT parameters) or\n{@link #execute(String, Object...) }\n(if there are no result sets).\n\n@param <T> The type of object that the handler returns\n@param sql The SQL to execute.\n@param rsh The result set handler\n@param params The query replacement parameters.\n@return A list of objects generated by the handler\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]insert(Connection,String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> T insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        return insert(conn, sql, rsh, (Object[]) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecute an SQL INSERT query without replacement parameters.\n@param <T> The type of object that the handler returns\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet} of auto-generated keys.\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]insert(Connection,String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> T insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        if (conn == null) {\n            throw new SQLException(\"Null connection\");\n        }\n\n        if (sql == null) {\n            throw new SQLException(\"Null SQL statement\");\n        }\n\n        if (rsh == null) {\n            throw new SQLException(\"Null ResultSetHandler\");\n        }\n\n        Statement stmt = null;\n        T generatedKeys = null;\n\n        try {\n            if (params != null && params.length > 0) {\n                final PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);\n                stmt = ps;\n                this.fillStatement(ps, params);\n                ps.executeUpdate();\n            } else {\n                stmt = conn.createStatement();\n                stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);\n            }\n            try (ResultSet resultSet = stmt.getGeneratedKeys()) {\n                generatedKeys = rsh.handle(resultSet);\n            }\n        } catch (final SQLException e) {\n            rethrow(e, sql, params);\n        } finally {\n            close(stmt);\n        }\n\n        return generatedKeys;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecute an SQL INSERT query.\n@param <T> The type of object that the handler returns\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet} of auto-generated keys.\n@param params The query replacement parameters.\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]insert(String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T insert(final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> T insert(final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return insert(conn, sql, rsh, (Object[]) null);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given INSERT SQL without any replacement parameters.\nThe {@code Connection} is retrieved from the\n{@code DataSource} set in the constructor.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet} of auto-generated keys.\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]insert(String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T insert(final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> T insert(final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return insert(conn, sql, rsh, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given INSERT SQL statement. The\n{@code Connection} is retrieved from the {@code DataSource}\nset in the constructor.  This {@code Connection} must be in\nauto-commit mode or the insert will not be saved.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet} of auto-generated keys.\n@param params Initializes the PreparedStatement's IN (i.e. '?')\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]insertBatch(Connection,String,ResultSetHandler<T>,Object[][])", "name": "insertBatch", "arg_nums": 4, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}, {"name": "params", "type": "Object[][]"}], "return_type": "T", "signature": "public <T> T insertBatch(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object[][] params)", "original_string": "    public <T> T insertBatch(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object[][] params) throws SQLException {\n        if (conn == null) {\n            throw new SQLException(\"Null connection\");\n        }\n\n        if (sql == null) {\n            throw new SQLException(\"Null SQL statement\");\n        }\n\n        if (params == null) {\n            throw new SQLException(\"Null parameters. If parameters aren't need, pass an empty array.\");\n        }\n\n        PreparedStatement stmt = null;\n        T generatedKeys = null;\n        try {\n            stmt = this.prepareStatement(conn, sql, Statement.RETURN_GENERATED_KEYS);\n\n            for (final Object[] param : params) {\n                this.fillStatement(stmt, param);\n                stmt.addBatch();\n            }\n            stmt.executeBatch();\n            try (ResultSet resultSet = stmt.getGeneratedKeys()) {\n                generatedKeys = rsh.handle(resultSet);\n            }\n        } catch (final SQLException e) {\n            rethrow(e, sql, (Object[])params);\n        } finally {\n            close(stmt);\n        }\n\n        return generatedKeys;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given batch of INSERT SQL statements.\n@param <T> The type of object that the handler returns\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet} of auto-generated keys.\n@param params The query replacement parameters.\n@return The result generated by the handler.\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]insertBatch(String,ResultSetHandler<T>,Object[][])", "name": "insertBatch", "arg_nums": 3, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}, {"name": "params", "type": "Object[][]"}], "return_type": "T", "signature": "public <T> T insertBatch(final String sql, final ResultSetHandler<T> rsh, final Object[][] params)", "original_string": "    public <T> T insertBatch(final String sql, final ResultSetHandler<T> rsh, final Object[][] params) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return insertBatch(conn, sql, rsh, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given batch of INSERT SQL statements. The\n{@code Connection} is retrieved from the {@code DataSource}\nset in the constructor.  This {@code Connection} must be in\nauto-commit mode or the insert will not be saved.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet} of auto-generated keys.\n@param params Initializes the PreparedStatement's IN (i.e. '?')\n@return The result generated by the handler.\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(Connection,String,Object,ResultSetHandler<T>)", "name": "query", "arg_nums": 4, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "param", "type": "Object"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "@Deprecated\n    public <T> T query(final Connection conn, final String sql, final Object param, final ResultSetHandler<T> rsh)", "original_string": "    @Deprecated\n    public <T> T query(final Connection conn, final String sql, final Object param, final ResultSetHandler<T> rsh) throws SQLException {\n        return this.<T>query(conn, sql, rsh, param);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecute an SQL SELECT query with a single replacement parameter. The\ncaller is responsible for closing the connection.\n@param <T> The type of object that the handler returns\n@param conn The connection to execute the query in.\n@param sql The query to execute.\n@param param The replacement parameter.\n@param rsh The handler that converts the results into an object.\n@return The object returned by the handler.\n@throws SQLException if a database access error occurs\n@deprecated Use {@link #query(Connection, String, ResultSetHandler, Object...)}\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(Connection,String,Object[],ResultSetHandler<T>)", "name": "query", "arg_nums": 4, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "params", "type": "Object[]"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "@Deprecated\n    public <T> T query(final Connection conn, final String sql, final Object[] params, final ResultSetHandler<T> rsh)", "original_string": "    @Deprecated\n    public <T> T query(final Connection conn, final String sql, final Object[] params, final ResultSetHandler<T> rsh) throws SQLException {\n        return this.<T>query(conn, sql, rsh, params);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecute an SQL SELECT query with replacement parameters.  The\ncaller is responsible for closing the connection.\n@param <T> The type of object that the handler returns\n@param conn The connection to execute the query in.\n@param sql The query to execute.\n@param params The replacement parameters.\n@param rsh The handler that converts the results into an object.\n@return The object returned by the handler.\n@throws SQLException if a database access error occurs\n@deprecated Use {@link #query(Connection,String,ResultSetHandler,Object...)} instead\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(Connection,String,ResultSetHandler<T>)", "name": "query", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T query(final Connection conn, final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> T query(final Connection conn, final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        return this.<T>query(conn, sql, rsh, (Object[]) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecute an SQL SELECT query without any replacement parameters.  The\ncaller is responsible for closing the connection.\n@param <T> The type of object that the handler returns\n@param conn The connection to execute the query in.\n@param sql The query to execute.\n@param rsh The handler that converts the results into an object.\n@return The object returned by the handler.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(Connection,String,ResultSetHandler<T>)", "name": "query", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T query(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> T query(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        if (conn == null) {\n            throw new SQLException(\"Null connection\");\n        }\n\n        if (sql == null) {\n            throw new SQLException(\"Null SQL statement\");\n        }\n\n        if (rsh == null) {\n            throw new SQLException(\"Null ResultSetHandler\");\n        }\n\n        Statement stmt = null;\n        ResultSet resultSet = null;\n        T result = null;\n\n        try {\n            if (params != null && params.length > 0) {\n                final PreparedStatement ps = this.prepareStatement(conn, sql);\n                stmt = ps;\n                this.fillStatement(ps, params);\n                resultSet = wrap(ps.executeQuery());\n            } else {\n                stmt = conn.createStatement();\n                resultSet = wrap(stmt.executeQuery(sql));\n            }\n            result = rsh.handle(resultSet);\n\n        } catch (final SQLException e) {\n            rethrow(e, sql, params);\n\n        } finally {\n            closeQuietly(resultSet);\n            closeQuietly(stmt);\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecute an SQL SELECT query with replacement parameters.  The\ncaller is responsible for closing the connection.\n@param <T> The type of object that the handler returns\n@param conn The connection to execute the query in.\n@param sql The query to execute.\n@param rsh The handler that converts the results into an object.\n@param params The replacement parameters.\n@return The object returned by the handler.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(String,Object,ResultSetHandler<T>)", "name": "query", "arg_nums": 3, "params": [{"name": "sql", "type": "String"}, {"name": "param", "type": "Object"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "@Deprecated\n    public <T> T query(final String sql, final Object param, final ResultSetHandler<T> rsh)", "original_string": "    @Deprecated\n    public <T> T query(final String sql, final Object param, final ResultSetHandler<T> rsh) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.<T>query(conn, sql, rsh, param);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given SELECT SQL with a single replacement parameter.\nThe {@code Connection} is retrieved from the\n{@code DataSource} set in the constructor.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param param The replacement parameter.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet}.\n\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n@deprecated Use {@link #query(String, ResultSetHandler, Object...)}\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(String,Object[],ResultSetHandler<T>)", "name": "query", "arg_nums": 3, "params": [{"name": "sql", "type": "String"}, {"name": "params", "type": "Object[]"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "@Deprecated\n    public <T> T query(final String sql, final Object[] params, final ResultSetHandler<T> rsh)", "original_string": "    @Deprecated\n    public <T> T query(final String sql, final Object[] params, final ResultSetHandler<T> rsh) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.<T>query(conn, sql, rsh, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given SELECT SQL query and returns a result object.\nThe {@code Connection} is retrieved from the\n{@code DataSource} set in the constructor.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param params Initialize the PreparedStatement's IN parameters with\nthis array.\n\n@param rsh The handler used to create the result object from\nthe {@code ResultSet}.\n\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n@deprecated Use {@link #query(String, ResultSetHandler, Object...)}\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(String,ResultSetHandler<T>)", "name": "query", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T query(final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> T query(final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.<T>query(conn, sql, rsh, (Object[]) null);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given SELECT SQL without any replacement parameters.\nThe {@code Connection} is retrieved from the\n{@code DataSource} set in the constructor.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet}.\n\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[T]query(String,ResultSetHandler<T>)", "name": "query", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "T", "signature": "public <T> T query(final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> T query(final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.<T>query(conn, sql, rsh, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nExecutes the given SELECT SQL query and returns a result object.\nThe {@code Connection} is retrieved from the\n{@code DataSource} set in the constructor.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet}.\n@param params Initialize the PreparedStatement's IN parameters with\nthis array.\n@return An object generated by the handler.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[void]retrieveOutParameters(CallableStatement,Object[])", "name": "retrieveOutParameters", "arg_nums": 2, "params": [{"name": "stmt", "type": "CallableStatement"}, {"name": "params", "type": "Object[]"}], "return_type": "void", "signature": "private void retrieveOutParameters(final CallableStatement stmt, final Object[] params)", "original_string": "    private void retrieveOutParameters(final CallableStatement stmt, final Object[] params) throws SQLException {\n        if (params != null) {\n            for (int i = 0; i < params.length; i++) {\n                if (params[i] instanceof OutParameter) {\n                    ((OutParameter<?>) params[i]).setValue(stmt, i + 1);\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSet the value on all the {@link OutParameter} instances in the\n{@code params} array using the OUT parameter values from the\n{@code stmt}.\n@param stmt the statement from which to retrieve OUT parameter values\n@param params the parameter array for the statement invocation\n@throws SQLException when the value could not be retrieved from the\nstatement.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]update(Connection,String)", "name": "update", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}], "return_type": "int", "signature": "public int update(final Connection conn, final String sql)", "original_string": "    public int update(final Connection conn, final String sql) throws SQLException {\n        return this.update(conn, sql, (Object[]) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecute an SQL INSERT, UPDATE, or DELETE query without replacement\nparameters.\n\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@return The number of rows updated.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]update(Connection,String,Object)", "name": "update", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "param", "type": "Object"}], "return_type": "int", "signature": "public int update(final Connection conn, final String sql, final Object param)", "original_string": "    public int update(final Connection conn, final String sql, final Object param) throws SQLException {\n        return this.update(conn, sql, new Object[] { param });\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecute an SQL INSERT, UPDATE, or DELETE query with a single replacement\nparameter.\n\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param param The replacement parameter.\n@return The number of rows updated.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]update(Connection,String)", "name": "update", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}], "return_type": "int", "signature": "public int update(final Connection conn, final String sql, final Object... params)", "original_string": "    public int update(final Connection conn, final String sql, final Object... params) throws SQLException {\n        if (conn == null) {\n            throw new SQLException(\"Null connection\");\n        }\n\n        if (sql == null) {\n            throw new SQLException(\"Null SQL statement\");\n        }\n\n        Statement stmt = null;\n        int rows = 0;\n\n        try {\n            if (params != null && params.length > 0) {\n                final PreparedStatement ps = this.prepareStatement(conn, sql);\n                stmt = ps;\n                this.fillStatement(ps, params);\n                rows = ps.executeUpdate();\n            } else {\n                stmt = conn.createStatement();\n                rows = stmt.executeUpdate(sql);\n            }\n\n        } catch (final SQLException e) {\n            rethrow(e, sql, params);\n\n        } finally {\n            close(stmt);\n        }\n\n        return rows;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecute an SQL INSERT, UPDATE, or DELETE query.\n\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param params The query replacement parameters.\n@return The number of rows updated.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]update(String)", "name": "update", "arg_nums": 1, "params": [{"name": "sql", "type": "String"}], "return_type": "int", "signature": "public int update(final String sql)", "original_string": "    public int update(final String sql) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.update(conn, sql, (Object[]) null);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecutes the given INSERT, UPDATE, or DELETE SQL statement without\nany replacement parameters. The {@code Connection} is retrieved\nfrom the {@code DataSource} set in the constructor.  This\n{@code Connection} must be in auto-commit mode or the update will\nnot be saved.\n\n@param sql The SQL statement to execute.\n@throws SQLException if a database access error occurs\n@return The number of rows updated.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]update(String,Object)", "name": "update", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "param", "type": "Object"}], "return_type": "int", "signature": "public int update(final String sql, final Object param)", "original_string": "    public int update(final String sql, final Object param) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.update(conn, sql, param);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecutes the given INSERT, UPDATE, or DELETE SQL statement with\na single replacement parameter.  The {@code Connection} is\nretrieved from the {@code DataSource} set in the constructor.\nThis {@code Connection} must be in auto-commit mode or the\nupdate will not be saved.\n\n@param sql The SQL statement to execute.\n@param param The replacement parameter.\n@throws SQLException if a database access error occurs\n@return The number of rows updated.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner.[int]update(String)", "name": "update", "arg_nums": 1, "params": [{"name": "sql", "type": "String"}], "return_type": "int", "signature": "public int update(final String sql, final Object... params)", "original_string": "    public int update(final String sql, final Object... params) throws SQLException {\n        try (Connection conn = prepareConnection()) {\n            return this.update(conn, sql, params);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryRunner.java", "class_name": "QueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryRunner.java.QueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nExecutes the given INSERT, UPDATE, or DELETE SQL statement.  The\n{@code Connection} is retrieved from the {@code DataSource}\nset in the constructor.  This {@code Connection} must be in\nauto-commit mode or the update will not be saved.\n\n@param sql The SQL statement to execute.\n@param params Initializes the PreparedStatement's IN (i.e. '?')\nparameters.\n@throws SQLException if a database access error occurs\n@return The number of rows updated.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java.PropertyHandler.[Object]apply(Class<?>,Object)", "name": "apply", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "Object", "signature": "Object apply(Class<?> parameter, Object value)", "original_string": "    Object apply(Class<?> parameter, Object value);", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java", "class_name": "PropertyHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java.PropertyHandler", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nStores the given {@code value} into an instance of type {@code parameter}. This method is only called if {@link #match(Class, Object)} return true.\n\n@param parameter The type of the target parameter.\n@param value     The value to set.\n@return The converted value or the original value if something doesn't work out.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java.PropertyHandler.[boolean]match(Class<?>,Object)", "name": "match", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "boolean", "signature": "boolean match(Class<?> parameter, Object value)", "original_string": "    boolean match(Class<?> parameter, Object value);", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java", "class_name": "PropertyHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/PropertyHandler.java.PropertyHandler", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether to handle setting {@code value} into an instance of {@code parameter}.\n\n@param parameter The type of the target parameter.\n@param value     The value to be set.\n@return true is this property handler can/wants to handle this value; false otherwise.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]absolute(int)", "name": "absolute", "arg_nums": 1, "params": [{"name": "row", "type": "int"}], "return_type": "boolean", "signature": "protected final boolean absolute(final int row)", "original_string": "    protected final boolean absolute(final int row) throws SQLException {\n        return resultSet.absolute(row);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO. A\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]afterLast()", "name": "afterLast", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void afterLast()", "original_string": "    protected final void afterLast() throws SQLException {\n        resultSet.afterLast();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]beforeFirst()", "name": "beforeFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void beforeFirst()", "original_string": "    protected final void beforeFirst() throws SQLException {\n        resultSet.beforeFirst();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]cancelRowUpdates()", "name": "cancelRowUpdates", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void cancelRowUpdates()", "original_string": "    protected final void cancelRowUpdates() throws SQLException {\n        resultSet.cancelRowUpdates();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]clearWarnings()", "name": "clearWarnings", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void clearWarnings()", "original_string": "    protected final void clearWarnings() throws SQLException {\n        resultSet.clearWarnings();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]close()", "name": "close", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void close()", "original_string": "    protected final void close() throws SQLException {\n        resultSet.close();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]deleteRow()", "name": "deleteRow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void deleteRow()", "original_string": "    protected final void deleteRow() throws SQLException {\n        resultSet.deleteRow();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]findColumn(String)", "name": "findColumn", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "int", "signature": "protected final int findColumn(final String columnLabel)", "original_string": "    protected final int findColumn(final String columnLabel) throws SQLException {\n        return resultSet.findColumn(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]first()", "name": "first", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean first()", "original_string": "    protected final boolean first() throws SQLException {\n        return resultSet.first();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[ResultSet]getAdaptedResultSet()", "name": "getAdaptedResultSet", "arg_nums": 0, "params": [], "return_type": "ResultSet", "signature": "protected final ResultSet getAdaptedResultSet()", "original_string": "    protected final ResultSet getAdaptedResultSet() {\n        return resultSet;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Array]getArray(int)", "name": "getArray", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Array", "signature": "protected final Array getArray(final int columnIndex)", "original_string": "    protected final Array getArray(final int columnIndex) throws SQLException {\n        return resultSet.getArray(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Array", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Array]getArray(String)", "name": "getArray", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Array", "signature": "protected final Array getArray(final String columnLabel)", "original_string": "    protected final Array getArray(final String columnLabel) throws SQLException {\n        return resultSet.getArray(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Array", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getAsciiStream(int)", "name": "getAsciiStream", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "InputStream", "signature": "protected final InputStream getAsciiStream(final int columnIndex)", "original_string": "    protected final InputStream getAsciiStream(final int columnIndex) throws SQLException {\n        return resultSet.getAsciiStream(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getAsciiStream(String)", "name": "getAsciiStream", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "InputStream", "signature": "protected final InputStream getAsciiStream(final String columnLabel)", "original_string": "    protected final InputStream getAsciiStream(final String columnLabel) throws SQLException {\n        return resultSet.getAsciiStream(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(int)", "name": "getBigDecimal", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "BigDecimal", "signature": "protected final BigDecimal getBigDecimal(final int columnIndex)", "original_string": "    protected final BigDecimal getBigDecimal(final int columnIndex) throws SQLException {\n        return resultSet.getBigDecimal(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(int,int)", "name": "getBigDecimal", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "scale", "type": "int"}], "return_type": "BigDecimal", "signature": "@Deprecated\n    protected final BigDecimal getBigDecimal(final int columnIndex, final int scale)", "original_string": "    @Deprecated\n    protected final BigDecimal getBigDecimal(final int columnIndex, final int scale) throws SQLException {\n        return resultSet.getBigDecimal(columnIndex, scale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "@Deprecated\n    protected final", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(String)", "name": "getBigDecimal", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "BigDecimal", "signature": "protected final BigDecimal getBigDecimal(final String columnLabel)", "original_string": "    protected final BigDecimal getBigDecimal(final String columnLabel) throws SQLException {\n        return resultSet.getBigDecimal(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[BigDecimal]getBigDecimal(String,int)", "name": "getBigDecimal", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "scale", "type": "int"}], "return_type": "BigDecimal", "signature": "@Deprecated\n    protected final BigDecimal getBigDecimal(final String columnLabel, final int scale)", "original_string": "    @Deprecated\n    protected final BigDecimal getBigDecimal(final String columnLabel, final int scale) throws SQLException {\n        return resultSet.getBigDecimal(columnLabel, scale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "@Deprecated\n    protected final", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getBinaryStream(int)", "name": "getBinaryStream", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "InputStream", "signature": "protected final InputStream getBinaryStream(final int columnIndex)", "original_string": "    protected final InputStream getBinaryStream(final int columnIndex) throws SQLException {\n        return resultSet.getBinaryStream(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getBinaryStream(String)", "name": "getBinaryStream", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "InputStream", "signature": "protected final InputStream getBinaryStream(final String columnLabel)", "original_string": "    protected final InputStream getBinaryStream(final String columnLabel) throws SQLException {\n        return resultSet.getBinaryStream(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Blob]getBlob(int)", "name": "getBlob", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Blob", "signature": "protected final Blob getBlob(final int columnIndex)", "original_string": "    protected final Blob getBlob(final int columnIndex) throws SQLException {\n        return resultSet.getBlob(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Blob", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Blob]getBlob(String)", "name": "getBlob", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Blob", "signature": "protected final Blob getBlob(final String columnLabel)", "original_string": "    protected final Blob getBlob(final String columnLabel) throws SQLException {\n        return resultSet.getBlob(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Blob", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]getBoolean(int)", "name": "getBoolean", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "boolean", "signature": "protected final boolean getBoolean(final int columnIndex)", "original_string": "    protected final boolean getBoolean(final int columnIndex) throws SQLException {\n        return resultSet.getBoolean(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]getBoolean(String)", "name": "getBoolean", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "boolean", "signature": "protected final boolean getBoolean(final String columnLabel)", "original_string": "    protected final boolean getBoolean(final String columnLabel) throws SQLException {\n        return resultSet.getBoolean(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte]getByte(int)", "name": "getByte", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "byte", "signature": "protected final byte getByte(final int columnIndex)", "original_string": "    protected final byte getByte(final int columnIndex) throws SQLException {\n        return resultSet.getByte(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "byte", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte]getByte(String)", "name": "getByte", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "byte", "signature": "protected final byte getByte(final String columnLabel)", "original_string": "    protected final byte getByte(final String columnLabel) throws SQLException {\n        return resultSet.getByte(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "byte", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte[]]getBytes(int)", "name": "getBytes", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "byte[]", "signature": "protected final byte[] getBytes(final int columnIndex)", "original_string": "    protected final byte[] getBytes(final int columnIndex) throws SQLException {\n        return resultSet.getBytes(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[byte[]]getBytes(String)", "name": "getBytes", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "byte[]", "signature": "protected final byte[] getBytes(final String columnLabel)", "original_string": "    protected final byte[] getBytes(final String columnLabel) throws SQLException {\n        return resultSet.getBytes(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getCharacterStream(int)", "name": "getCharacterStream", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Reader", "signature": "protected final Reader getCharacterStream(final int columnIndex)", "original_string": "    protected final Reader getCharacterStream(final int columnIndex) throws SQLException {\n        return resultSet.getCharacterStream(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Reader", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getCharacterStream(String)", "name": "getCharacterStream", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Reader", "signature": "protected final Reader getCharacterStream(final String columnLabel)", "original_string": "    protected final Reader getCharacterStream(final String columnLabel) throws SQLException {\n        return resultSet.getCharacterStream(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Reader", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Clob]getClob(int)", "name": "getClob", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Clob", "signature": "protected final Clob getClob(final int columnIndex)", "original_string": "    protected final Clob getClob(final int columnIndex) throws SQLException {\n        return resultSet.getClob(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Clob", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Clob]getClob(String)", "name": "getClob", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Clob", "signature": "protected final Clob getClob(final String columnLabel)", "original_string": "    protected final Clob getClob(final String columnLabel) throws SQLException {\n        return resultSet.getClob(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Clob", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getConcurrency()", "name": "getConcurrency", "arg_nums": 0, "params": [], "return_type": "int", "signature": "protected final int getConcurrency()", "original_string": "    protected final int getConcurrency() throws SQLException {\n        return resultSet.getConcurrency();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getCursorName()", "name": "getCursorName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "protected final String getCursorName()", "original_string": "    protected final String getCursorName() throws SQLException {\n        return resultSet.getCursorName();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(int)", "name": "getDate", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Date", "signature": "protected final Date getDate(final int columnIndex)", "original_string": "    protected final Date getDate(final int columnIndex) throws SQLException {\n        return resultSet.getDate(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(int,Calendar)", "name": "getDate", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "cal", "type": "Calendar"}], "return_type": "Date", "signature": "protected final Date getDate(final int columnIndex, final Calendar cal)", "original_string": "    protected final Date getDate(final int columnIndex, final Calendar cal) throws SQLException {\n        return resultSet.getDate(columnIndex, cal);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(String)", "name": "getDate", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Date", "signature": "protected final Date getDate(final String columnLabel)", "original_string": "    protected final Date getDate(final String columnLabel) throws SQLException {\n        return resultSet.getDate(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Date]getDate(String,Calendar)", "name": "getDate", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "cal", "type": "Calendar"}], "return_type": "Date", "signature": "protected final Date getDate(final String columnLabel, final Calendar cal)", "original_string": "    protected final Date getDate(final String columnLabel, final Calendar cal) throws SQLException {\n        return resultSet.getDate(columnLabel, cal);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[double]getDouble(int)", "name": "getDouble", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "double", "signature": "protected final double getDouble(final int columnIndex)", "original_string": "    protected final double getDouble(final int columnIndex) throws SQLException {\n        return resultSet.getDouble(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[double]getDouble(String)", "name": "getDouble", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "double", "signature": "protected final double getDouble(final String columnLabel)", "original_string": "    protected final double getDouble(final String columnLabel) throws SQLException {\n        return resultSet.getDouble(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getFetchDirection()", "name": "getFetchDirection", "arg_nums": 0, "params": [], "return_type": "int", "signature": "protected final int getFetchDirection()", "original_string": "    protected final int getFetchDirection() throws SQLException {\n        return resultSet.getFetchDirection();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getFetchSize()", "name": "getFetchSize", "arg_nums": 0, "params": [], "return_type": "int", "signature": "protected final int getFetchSize()", "original_string": "    protected final int getFetchSize() throws SQLException {\n        return resultSet.getFetchSize();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[float]getFloat(int)", "name": "getFloat", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "float", "signature": "protected final float getFloat(final int columnIndex)", "original_string": "    protected final float getFloat(final int columnIndex) throws SQLException {\n        return resultSet.getFloat(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "float", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[float]getFloat(String)", "name": "getFloat", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "float", "signature": "protected final float getFloat(final String columnLabel)", "original_string": "    protected final float getFloat(final String columnLabel) throws SQLException {\n        return resultSet.getFloat(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "float", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getHoldability()", "name": "getHoldability", "arg_nums": 0, "params": [], "return_type": "int", "signature": "protected final int getHoldability()", "original_string": "    protected final int getHoldability() throws SQLException {\n        return resultSet.getHoldability();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getInt(int)", "name": "getInt", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "int", "signature": "protected final int getInt(final int columnIndex)", "original_string": "    protected final int getInt(final int columnIndex) throws SQLException {\n        return resultSet.getInt(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getInt(String)", "name": "getInt", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "int", "signature": "protected final int getInt(final String columnLabel)", "original_string": "    protected final int getInt(final String columnLabel) throws SQLException {\n        return resultSet.getInt(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[long]getLong(int)", "name": "getLong", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "long", "signature": "protected final long getLong(final int columnIndex)", "original_string": "    protected final long getLong(final int columnIndex) throws SQLException {\n        return resultSet.getLong(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[long]getLong(String)", "name": "getLong", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "long", "signature": "protected final long getLong(final String columnLabel)", "original_string": "    protected final long getLong(final String columnLabel) throws SQLException {\n        return resultSet.getLong(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[ResultSetMetaData]getMetaData()", "name": "getMetaData", "arg_nums": 0, "params": [], "return_type": "ResultSetMetaData", "signature": "protected final ResultSetMetaData getMetaData()", "original_string": "    protected final ResultSetMetaData getMetaData() throws SQLException {\n        return resultSet.getMetaData();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "ResultSetMetaData", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getNCharacterStream(int)", "name": "getNCharacterStream", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Reader", "signature": "protected final Reader getNCharacterStream(final int columnIndex)", "original_string": "    protected final Reader getNCharacterStream(final int columnIndex) throws SQLException {\n        return resultSet.getNCharacterStream(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Reader", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Reader]getNCharacterStream(String)", "name": "getNCharacterStream", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Reader", "signature": "protected final Reader getNCharacterStream(final String columnLabel)", "original_string": "    protected final Reader getNCharacterStream(final String columnLabel) throws SQLException {\n        return resultSet.getNCharacterStream(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Reader", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[NClob]getNClob(int)", "name": "getNClob", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "NClob", "signature": "protected final NClob getNClob(final int columnIndex)", "original_string": "    protected final NClob getNClob(final int columnIndex) throws SQLException {\n        return resultSet.getNClob(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "NClob", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[NClob]getNClob(String)", "name": "getNClob", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "NClob", "signature": "protected final NClob getNClob(final String columnLabel)", "original_string": "    protected final NClob getNClob(final String columnLabel) throws SQLException {\n        return resultSet.getNClob(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "NClob", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getNString(int)", "name": "getNString", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "String", "signature": "protected final String getNString(final int columnIndex)", "original_string": "    protected final String getNString(final int columnIndex) throws SQLException {\n        return resultSet.getNString(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getNString(String)", "name": "getNString", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "String", "signature": "protected final String getNString(final String columnLabel)", "original_string": "    protected final String getNString(final String columnLabel) throws SQLException {\n        return resultSet.getNString(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(int)", "name": "getObject", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Object", "signature": "protected final Object getObject(final int columnIndex)", "original_string": "    protected final Object getObject(final int columnIndex) throws SQLException {\n        return resultSet.getObject(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(int,Map<String, Class<?>>)", "name": "getObject", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "map", "type": "Map<String, Class<?>>"}], "return_type": "Object", "signature": "protected final Object getObject(final int columnIndex, final Map<String, Class<?>> map)", "original_string": "    protected final Object getObject(final int columnIndex, final Map<String, Class<?>> map) throws SQLException {\n        return resultSet.getObject(columnIndex, map);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(String)", "name": "getObject", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Object", "signature": "protected final Object getObject(final String columnLabel)", "original_string": "    protected final Object getObject(final String columnLabel) throws SQLException {\n        return resultSet.getObject(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Object]getObject(String,Map<String, Class<?>>)", "name": "getObject", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "map", "type": "Map<String, Class<?>>"}], "return_type": "Object", "signature": "protected final Object getObject(final String columnLabel, final Map<String, Class<?>> map)", "original_string": "    protected final Object getObject(final String columnLabel, final Map<String, Class<?>> map) throws SQLException {\n        return resultSet.getObject(columnLabel, map);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Ref]getRef(int)", "name": "getRef", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Ref", "signature": "protected final Ref getRef(final int columnIndex)", "original_string": "    protected final Ref getRef(final int columnIndex) throws SQLException {\n        return resultSet.getRef(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Ref", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Ref]getRef(String)", "name": "getRef", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Ref", "signature": "protected final Ref getRef(final String columnLabel)", "original_string": "    protected final Ref getRef(final String columnLabel) throws SQLException {\n        return resultSet.getRef(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Ref", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getRow()", "name": "getRow", "arg_nums": 0, "params": [], "return_type": "int", "signature": "protected final int getRow()", "original_string": "    protected final int getRow() throws SQLException {\n        return resultSet.getRow();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[RowId]getRowId(int)", "name": "getRowId", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "RowId", "signature": "protected final RowId getRowId(final int columnIndex)", "original_string": "    protected final RowId getRowId(final int columnIndex) throws SQLException {\n        return resultSet.getRowId(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "RowId", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[RowId]getRowId(String)", "name": "getRowId", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "RowId", "signature": "protected final RowId getRowId(final String columnLabel)", "original_string": "    protected final RowId getRowId(final String columnLabel) throws SQLException {\n        return resultSet.getRowId(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "RowId", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[short]getShort(int)", "name": "getShort", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "short", "signature": "protected final short getShort(final int columnIndex)", "original_string": "    protected final short getShort(final int columnIndex) throws SQLException {\n        return resultSet.getShort(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "short", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[short]getShort(String)", "name": "getShort", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "short", "signature": "protected final short getShort(final String columnLabel)", "original_string": "    protected final short getShort(final String columnLabel) throws SQLException {\n        return resultSet.getShort(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "short", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[SQLXML]getSQLXML(int)", "name": "getSQLXML", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "SQLXML", "signature": "protected final SQLXML getSQLXML(final int columnIndex)", "original_string": "    protected final SQLXML getSQLXML(final int columnIndex) throws SQLException {\n        return resultSet.getSQLXML(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "SQLXML", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[SQLXML]getSQLXML(String)", "name": "getSQLXML", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "SQLXML", "signature": "protected final SQLXML getSQLXML(final String columnLabel)", "original_string": "    protected final SQLXML getSQLXML(final String columnLabel) throws SQLException {\n        return resultSet.getSQLXML(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "SQLXML", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Statement]getStatement()", "name": "getStatement", "arg_nums": 0, "params": [], "return_type": "Statement", "signature": "protected final Statement getStatement()", "original_string": "    protected final Statement getStatement() throws SQLException {\n        return resultSet.getStatement();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Statement", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getString(int)", "name": "getString", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "String", "signature": "protected final String getString(final int columnIndex)", "original_string": "    protected final String getString(final int columnIndex) throws SQLException {\n        return resultSet.getString(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[String]getString(String)", "name": "getString", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "String", "signature": "protected final String getString(final String columnLabel)", "original_string": "    protected final String getString(final String columnLabel) throws SQLException {\n        return resultSet.getString(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(int)", "name": "getTime", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Time", "signature": "protected final Time getTime(final int columnIndex)", "original_string": "    protected final Time getTime(final int columnIndex) throws SQLException {\n        return resultSet.getTime(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Time", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(int,Calendar)", "name": "getTime", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "cal", "type": "Calendar"}], "return_type": "Time", "signature": "protected final Time getTime(final int columnIndex, final Calendar cal)", "original_string": "    protected final Time getTime(final int columnIndex, final Calendar cal) throws SQLException {\n        return resultSet.getTime(columnIndex, cal);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Time", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(String)", "name": "getTime", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Time", "signature": "protected final Time getTime(final String columnLabel)", "original_string": "    protected final Time getTime(final String columnLabel) throws SQLException {\n        return resultSet.getTime(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Time", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Time]getTime(String,Calendar)", "name": "getTime", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "cal", "type": "Calendar"}], "return_type": "Time", "signature": "protected final Time getTime(final String columnLabel, final Calendar cal)", "original_string": "    protected final Time getTime(final String columnLabel, final Calendar cal) throws SQLException {\n        return resultSet.getTime(columnLabel, cal);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Time", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(int)", "name": "getTimestamp", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "Timestamp", "signature": "protected final Timestamp getTimestamp(final int columnIndex)", "original_string": "    protected final Timestamp getTimestamp(final int columnIndex) throws SQLException {\n        return resultSet.getTimestamp(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(int,Calendar)", "name": "getTimestamp", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "cal", "type": "Calendar"}], "return_type": "Timestamp", "signature": "protected final Timestamp getTimestamp(final int columnIndex, final Calendar cal)", "original_string": "    protected final Timestamp getTimestamp(final int columnIndex, final Calendar cal) throws SQLException {\n        return resultSet.getTimestamp(columnIndex, cal);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(String)", "name": "getTimestamp", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "Timestamp", "signature": "protected final Timestamp getTimestamp(final String columnLabel)", "original_string": "    protected final Timestamp getTimestamp(final String columnLabel) throws SQLException {\n        return resultSet.getTimestamp(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[Timestamp]getTimestamp(String,Calendar)", "name": "getTimestamp", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "cal", "type": "Calendar"}], "return_type": "Timestamp", "signature": "protected final Timestamp getTimestamp(final String columnLabel, final Calendar cal)", "original_string": "    protected final Timestamp getTimestamp(final String columnLabel, final Calendar cal) throws SQLException {\n        return resultSet.getTimestamp(columnLabel, cal);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[int]getType()", "name": "getType", "arg_nums": 0, "params": [], "return_type": "int", "signature": "protected final int getType()", "original_string": "    protected final int getType() throws SQLException {\n        return resultSet.getType();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getUnicodeStream(int)", "name": "getUnicodeStream", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "InputStream", "signature": "@Deprecated\n    protected final InputStream getUnicodeStream(final int columnIndex)", "original_string": "    @Deprecated\n    protected final InputStream getUnicodeStream(final int columnIndex) throws SQLException {\n        return resultSet.getUnicodeStream(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "@Deprecated\n    protected final", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[InputStream]getUnicodeStream(String)", "name": "getUnicodeStream", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "InputStream", "signature": "@Deprecated\n    protected final InputStream getUnicodeStream(final String columnLabel)", "original_string": "    @Deprecated\n    protected final InputStream getUnicodeStream(final String columnLabel) throws SQLException {\n        return resultSet.getUnicodeStream(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "@Deprecated\n    protected final", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[URL]getURL(int)", "name": "getURL", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "URL", "signature": "protected final URL getURL(final int columnIndex)", "original_string": "    protected final URL getURL(final int columnIndex) throws SQLException {\n        return resultSet.getURL(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "URL", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[URL]getURL(String)", "name": "getURL", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "URL", "signature": "protected final URL getURL(final String columnLabel)", "original_string": "    protected final URL getURL(final String columnLabel) throws SQLException {\n        return resultSet.getURL(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "URL", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[SQLWarning]getWarnings()", "name": "getWarnings", "arg_nums": 0, "params": [], "return_type": "SQLWarning", "signature": "protected final SQLWarning getWarnings()", "original_string": "    protected final SQLWarning getWarnings() throws SQLException {\n        return resultSet.getWarnings();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "SQLWarning", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[T]handle()", "name": "handle", "arg_nums": 0, "params": [], "return_type": "T", "signature": "protected abstract T handle()", "original_string": "    protected abstract T handle() throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nTurn the {@code ResultSet} into an Object.\n\n@return An Object initialized with {@code ResultSet} data\n@throws SQLException if a database access error occurs\n@see ResultSetHandler#handle(ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[T]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "rs", "type": "ResultSet"}], "return_type": "T", "signature": "@Override\n    public final T handle(final ResultSet rs)", "original_string": "    @Override\n    public final T handle(final ResultSet rs) throws SQLException {\n        if (this.resultSet != null) {\n            throw new IllegalStateException(\"Re-entry not allowed!\");\n        }\n\n        this.resultSet = rs;\n\n        try {\n            return handle();\n        } finally {\n            this.resultSet = null;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "@Override\n    public final", "marker_annotations": ["@Override"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]insertRow()", "name": "insertRow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void insertRow()", "original_string": "    protected final void insertRow() throws SQLException {\n        resultSet.insertRow();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isAfterLast()", "name": "isAfterLast", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean isAfterLast()", "original_string": "    protected final boolean isAfterLast() throws SQLException {\n        return resultSet.isAfterLast();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isBeforeFirst()", "name": "isBeforeFirst", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean isBeforeFirst()", "original_string": "    protected final boolean isBeforeFirst() throws SQLException {\n        return resultSet.isBeforeFirst();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isClosed()", "name": "isClosed", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean isClosed()", "original_string": "    protected final boolean isClosed() throws SQLException {\n        return resultSet.isClosed();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isFirst()", "name": "isFirst", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean isFirst()", "original_string": "    protected final boolean isFirst() throws SQLException {\n        return resultSet.isFirst();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isLast()", "name": "isLast", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean isLast()", "original_string": "    protected final boolean isLast() throws SQLException {\n        return resultSet.isLast();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]isWrapperFor(Class<?>)", "name": "isWrapperFor", "arg_nums": 1, "params": [{"name": "iface", "type": "Class<?>"}], "return_type": "boolean", "signature": "protected final boolean isWrapperFor(final Class<?> iface)", "original_string": "    protected final boolean isWrapperFor(final Class<?> iface) throws SQLException {\n        return resultSet.isWrapperFor(iface);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]last()", "name": "last", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean last()", "original_string": "    protected final boolean last() throws SQLException {\n        return resultSet.last();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]moveToCurrentRow()", "name": "moveToCurrentRow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void moveToCurrentRow()", "original_string": "    protected final void moveToCurrentRow() throws SQLException {\n        resultSet.moveToCurrentRow();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]moveToInsertRow()", "name": "moveToInsertRow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void moveToInsertRow()", "original_string": "    protected final void moveToInsertRow() throws SQLException {\n        resultSet.moveToInsertRow();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]next()", "name": "next", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean next()", "original_string": "    protected final boolean next() throws SQLException {\n        return resultSet.next();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]previous()", "name": "previous", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean previous()", "original_string": "    protected final boolean previous() throws SQLException {\n        return resultSet.previous();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]refreshRow()", "name": "refreshRow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void refreshRow()", "original_string": "    protected final void refreshRow() throws SQLException {\n        resultSet.refreshRow();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]relative(int)", "name": "relative", "arg_nums": 1, "params": [{"name": "rows", "type": "int"}], "return_type": "boolean", "signature": "protected final boolean relative(final int rows)", "original_string": "    protected final boolean relative(final int rows) throws SQLException {\n        return resultSet.relative(rows);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]rowDeleted()", "name": "rowDeleted", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean rowDeleted()", "original_string": "    protected final boolean rowDeleted() throws SQLException {\n        return resultSet.rowDeleted();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]rowInserted()", "name": "rowInserted", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean rowInserted()", "original_string": "    protected final boolean rowInserted() throws SQLException {\n        return resultSet.rowInserted();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]rowUpdated()", "name": "rowUpdated", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean rowUpdated()", "original_string": "    protected final boolean rowUpdated() throws SQLException {\n        return resultSet.rowUpdated();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]setFetchDirection(int)", "name": "setFetchDirection", "arg_nums": 1, "params": [{"name": "direction", "type": "int"}], "return_type": "void", "signature": "protected final void setFetchDirection(final int direction)", "original_string": "    protected final void setFetchDirection(final int direction) throws SQLException {\n        resultSet.setFetchDirection(direction);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]setFetchSize(int)", "name": "setFetchSize", "arg_nums": 1, "params": [{"name": "rows", "type": "int"}], "return_type": "void", "signature": "protected final void setFetchSize(final int rows)", "original_string": "    protected final void setFetchSize(final int rows) throws SQLException {\n        resultSet.setFetchSize(rows);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[E]unwrap(Class<E>)", "name": "unwrap", "arg_nums": 1, "params": [{"name": "iface", "type": "Class<E>"}], "return_type": "E", "signature": "protected final <E> E unwrap(final Class<E> iface)", "original_string": "    protected final <E> E unwrap(final Class<E> iface) throws SQLException {\n        return resultSet.unwrap(iface);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "E", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateArray(int,Array)", "name": "updateArray", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Array"}], "return_type": "void", "signature": "protected final void updateArray(final int columnIndex, final Array x)", "original_string": "    protected final void updateArray(final int columnIndex, final Array x) throws SQLException {\n        resultSet.updateArray(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateArray(String,Array)", "name": "updateArray", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Array"}], "return_type": "void", "signature": "protected final void updateArray(final String columnLabel, final Array x)", "original_string": "    protected final void updateArray(final String columnLabel, final Array x) throws SQLException {\n        resultSet.updateArray(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(int,InputStream)", "name": "updateAsciiStream", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "InputStream"}], "return_type": "void", "signature": "protected final void updateAsciiStream(final int columnIndex, final InputStream x)", "original_string": "    protected final void updateAsciiStream(final int columnIndex, final InputStream x) throws SQLException {\n        resultSet.updateAsciiStream(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(int,InputStream,int)", "name": "updateAsciiStream", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "int"}], "return_type": "void", "signature": "protected final void updateAsciiStream(final int columnIndex, final InputStream x, final int length)", "original_string": "    protected final void updateAsciiStream(final int columnIndex, final InputStream x, final int length) throws SQLException {\n        resultSet.updateAsciiStream(columnIndex, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(int,InputStream,long)", "name": "updateAsciiStream", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateAsciiStream(final int columnIndex, final InputStream x, final long length)", "original_string": "    protected final void updateAsciiStream(final int columnIndex, final InputStream x, final long length) throws SQLException {\n        resultSet.updateAsciiStream(columnIndex, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(String,InputStream)", "name": "updateAsciiStream", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "InputStream"}], "return_type": "void", "signature": "protected final void updateAsciiStream(final String columnLabel, final InputStream x)", "original_string": "    protected final void updateAsciiStream(final String columnLabel, final InputStream x) throws SQLException {\n        resultSet.updateAsciiStream(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(String,InputStream,int)", "name": "updateAsciiStream", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "int"}], "return_type": "void", "signature": "protected final void updateAsciiStream(final String columnLabel, final InputStream x, final int length)", "original_string": "    protected final void updateAsciiStream(final String columnLabel, final InputStream x, final int length) throws SQLException {\n        resultSet.updateAsciiStream(columnLabel, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateAsciiStream(String,InputStream,long)", "name": "updateAsciiStream", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateAsciiStream(final String columnLabel, final InputStream x, final long length)", "original_string": "    protected final void updateAsciiStream(final String columnLabel, final InputStream x, final long length) throws SQLException {\n        resultSet.updateAsciiStream(columnLabel, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBigDecimal(int,BigDecimal)", "name": "updateBigDecimal", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "BigDecimal"}], "return_type": "void", "signature": "protected final void updateBigDecimal(final int columnIndex, final BigDecimal x)", "original_string": "    protected final void updateBigDecimal(final int columnIndex, final BigDecimal x) throws SQLException {\n        resultSet.updateBigDecimal(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBigDecimal(String,BigDecimal)", "name": "updateBigDecimal", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "BigDecimal"}], "return_type": "void", "signature": "protected final void updateBigDecimal(final String columnLabel, final BigDecimal x)", "original_string": "    protected final void updateBigDecimal(final String columnLabel, final BigDecimal x) throws SQLException {\n        resultSet.updateBigDecimal(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(int,InputStream)", "name": "updateBinaryStream", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "InputStream"}], "return_type": "void", "signature": "protected final void updateBinaryStream(final int columnIndex, final InputStream x)", "original_string": "    protected final void updateBinaryStream(final int columnIndex, final InputStream x) throws SQLException {\n        resultSet.updateBinaryStream(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(int,InputStream,int)", "name": "updateBinaryStream", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "int"}], "return_type": "void", "signature": "protected final void updateBinaryStream(final int columnIndex, final InputStream x, final int length)", "original_string": "    protected final void updateBinaryStream(final int columnIndex, final InputStream x, final int length) throws SQLException {\n        resultSet.updateBinaryStream(columnIndex, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(int,InputStream,long)", "name": "updateBinaryStream", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateBinaryStream(final int columnIndex, final InputStream x, final long length)", "original_string": "    protected final void updateBinaryStream(final int columnIndex, final InputStream x, final long length) throws SQLException {\n        resultSet.updateBinaryStream(columnIndex, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(String,InputStream)", "name": "updateBinaryStream", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "InputStream"}], "return_type": "void", "signature": "protected final void updateBinaryStream(final String columnLabel, final InputStream x)", "original_string": "    protected final void updateBinaryStream(final String columnLabel, final InputStream x) throws SQLException {\n        resultSet.updateBinaryStream(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(String,InputStream,int)", "name": "updateBinaryStream", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "int"}], "return_type": "void", "signature": "protected final void updateBinaryStream(final String columnLabel, final InputStream x, final int length)", "original_string": "    protected final void updateBinaryStream(final String columnLabel, final InputStream x, final int length) throws SQLException {\n        resultSet.updateBinaryStream(columnLabel, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBinaryStream(String,InputStream,long)", "name": "updateBinaryStream", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "InputStream"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateBinaryStream(final String columnLabel, final InputStream x, final long length)", "original_string": "    protected final void updateBinaryStream(final String columnLabel, final InputStream x, final long length) throws SQLException {\n        resultSet.updateBinaryStream(columnLabel, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(int,Blob)", "name": "updateBlob", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Blob"}], "return_type": "void", "signature": "protected final void updateBlob(final int columnIndex, final Blob x)", "original_string": "    protected final void updateBlob(final int columnIndex, final Blob x) throws SQLException {\n        resultSet.updateBlob(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(int,InputStream)", "name": "updateBlob", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "inputStream", "type": "InputStream"}], "return_type": "void", "signature": "protected final void updateBlob(final int columnIndex, final InputStream inputStream)", "original_string": "    protected final void updateBlob(final int columnIndex, final InputStream inputStream) throws SQLException {\n        resultSet.updateBlob(columnIndex, inputStream);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(int,InputStream,long)", "name": "updateBlob", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "inputStream", "type": "InputStream"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateBlob(final int columnIndex, final InputStream inputStream, final long length)", "original_string": "    protected final void updateBlob(final int columnIndex, final InputStream inputStream, final long length) throws SQLException {\n        resultSet.updateBlob(columnIndex, inputStream, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(String,Blob)", "name": "updateBlob", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Blob"}], "return_type": "void", "signature": "protected final void updateBlob(final String columnLabel, final Blob x)", "original_string": "    protected final void updateBlob(final String columnLabel, final Blob x) throws SQLException {\n        resultSet.updateBlob(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(String,InputStream)", "name": "updateBlob", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "inputStream", "type": "InputStream"}], "return_type": "void", "signature": "protected final void updateBlob(final String columnLabel, final InputStream inputStream)", "original_string": "    protected final void updateBlob(final String columnLabel, final InputStream inputStream) throws SQLException {\n        resultSet.updateBlob(columnLabel, inputStream);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBlob(String,InputStream,long)", "name": "updateBlob", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "inputStream", "type": "InputStream"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateBlob(final String columnLabel, final InputStream inputStream, final long length)", "original_string": "    protected final void updateBlob(final String columnLabel, final InputStream inputStream, final long length) throws SQLException {\n        resultSet.updateBlob(columnLabel, inputStream, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBoolean(int,boolean)", "name": "updateBoolean", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "boolean"}], "return_type": "void", "signature": "protected final void updateBoolean(final int columnIndex, final boolean x)", "original_string": "    protected final void updateBoolean(final int columnIndex, final boolean x) throws SQLException {\n        resultSet.updateBoolean(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBoolean(String,boolean)", "name": "updateBoolean", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "boolean"}], "return_type": "void", "signature": "protected final void updateBoolean(final String columnLabel, final boolean x)", "original_string": "    protected final void updateBoolean(final String columnLabel, final boolean x) throws SQLException {\n        resultSet.updateBoolean(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateByte(int,byte)", "name": "updateByte", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "byte"}], "return_type": "void", "signature": "protected final void updateByte(final int columnIndex, final byte x)", "original_string": "    protected final void updateByte(final int columnIndex, final byte x) throws SQLException {\n        resultSet.updateByte(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateByte(String,byte)", "name": "updateByte", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "byte"}], "return_type": "void", "signature": "protected final void updateByte(final String columnLabel, final byte x)", "original_string": "    protected final void updateByte(final String columnLabel, final byte x) throws SQLException {\n        resultSet.updateByte(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBytes(int,byte[])", "name": "updateBytes", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "byte[]"}], "return_type": "void", "signature": "protected final void updateBytes(final int columnIndex, final byte[] x)", "original_string": "    protected final void updateBytes(final int columnIndex, final byte[] x) throws SQLException {\n        resultSet.updateBytes(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateBytes(String,byte[])", "name": "updateBytes", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "byte[]"}], "return_type": "void", "signature": "protected final void updateBytes(final String columnLabel, final byte[] x)", "original_string": "    protected final void updateBytes(final String columnLabel, final byte[] x) throws SQLException {\n        resultSet.updateBytes(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(int,Reader)", "name": "updateCharacterStream", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateCharacterStream(final int columnIndex, final Reader x)", "original_string": "    protected final void updateCharacterStream(final int columnIndex, final Reader x) throws SQLException {\n        resultSet.updateCharacterStream(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(int,Reader,int)", "name": "updateCharacterStream", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Reader"}, {"name": "length", "type": "int"}], "return_type": "void", "signature": "protected final void updateCharacterStream(final int columnIndex, final Reader x, final int length)", "original_string": "    protected final void updateCharacterStream(final int columnIndex, final Reader x, final int length) throws SQLException {\n        resultSet.updateCharacterStream(columnIndex, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(int,Reader,long)", "name": "updateCharacterStream", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateCharacterStream(final int columnIndex, final Reader x, final long length)", "original_string": "    protected final void updateCharacterStream(final int columnIndex, final Reader x, final long length) throws SQLException {\n        resultSet.updateCharacterStream(columnIndex, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(String,Reader)", "name": "updateCharacterStream", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateCharacterStream(final String columnLabel, final Reader reader)", "original_string": "    protected final void updateCharacterStream(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateCharacterStream(columnLabel, reader);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(String,Reader,int)", "name": "updateCharacterStream", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}, {"name": "length", "type": "int"}], "return_type": "void", "signature": "protected final void updateCharacterStream(final String columnLabel, final Reader reader, final int length)", "original_string": "    protected final void updateCharacterStream(final String columnLabel, final Reader reader, final int length) throws SQLException {\n        resultSet.updateCharacterStream(columnLabel, reader, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateCharacterStream(String,Reader,long)", "name": "updateCharacterStream", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateCharacterStream(final String columnLabel, final Reader reader, final long length)", "original_string": "    protected final void updateCharacterStream(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateCharacterStream(columnLabel, reader, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(int,Clob)", "name": "updateClob", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Clob"}], "return_type": "void", "signature": "protected final void updateClob(final int columnIndex, final Clob x)", "original_string": "    protected final void updateClob(final int columnIndex, final Clob x) throws SQLException {\n        resultSet.updateClob(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(int,Reader)", "name": "updateClob", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "reader", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateClob(final int columnIndex, final Reader reader)", "original_string": "    protected final void updateClob(final int columnIndex, final Reader reader) throws SQLException {\n        resultSet.updateClob(columnIndex, reader);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(int,Reader,long)", "name": "updateClob", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "reader", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateClob(final int columnIndex, final Reader reader, final long length)", "original_string": "    protected final void updateClob(final int columnIndex, final Reader reader, final long length) throws SQLException {\n        resultSet.updateClob(columnIndex, reader, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(String,Clob)", "name": "updateClob", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Clob"}], "return_type": "void", "signature": "protected final void updateClob(final String columnLabel, final Clob x)", "original_string": "    protected final void updateClob(final String columnLabel, final Clob x) throws SQLException {\n        resultSet.updateClob(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(String,Reader)", "name": "updateClob", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateClob(final String columnLabel, final Reader reader)", "original_string": "    protected final void updateClob(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateClob(columnLabel, reader);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateClob(String,Reader,long)", "name": "updateClob", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateClob(final String columnLabel, final Reader reader, final long length)", "original_string": "    protected final void updateClob(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateClob(columnLabel, reader, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDate(int,Date)", "name": "updateDate", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Date"}], "return_type": "void", "signature": "protected final void updateDate(final int columnIndex, final Date x)", "original_string": "    protected final void updateDate(final int columnIndex, final Date x) throws SQLException {\n        resultSet.updateDate(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDate(String,Date)", "name": "updateDate", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Date"}], "return_type": "void", "signature": "protected final void updateDate(final String columnLabel, final Date x)", "original_string": "    protected final void updateDate(final String columnLabel, final Date x) throws SQLException {\n        resultSet.updateDate(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDouble(int,double)", "name": "updateDouble", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "double"}], "return_type": "void", "signature": "protected final void updateDouble(final int columnIndex, final double x)", "original_string": "    protected final void updateDouble(final int columnIndex, final double x) throws SQLException {\n        resultSet.updateDouble(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateDouble(String,double)", "name": "updateDouble", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "double"}], "return_type": "void", "signature": "protected final void updateDouble(final String columnLabel, final double x)", "original_string": "    protected final void updateDouble(final String columnLabel, final double x) throws SQLException {\n        resultSet.updateDouble(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateFloat(int,float)", "name": "updateFloat", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "float"}], "return_type": "void", "signature": "protected final void updateFloat(final int columnIndex, final float x)", "original_string": "    protected final void updateFloat(final int columnIndex, final float x) throws SQLException {\n        resultSet.updateFloat(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateFloat(String,float)", "name": "updateFloat", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "float"}], "return_type": "void", "signature": "protected final void updateFloat(final String columnLabel, final float x)", "original_string": "    protected final void updateFloat(final String columnLabel, final float x) throws SQLException {\n        resultSet.updateFloat(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateInt(int,int)", "name": "updateInt", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "int"}], "return_type": "void", "signature": "protected final void updateInt(final int columnIndex, final int x)", "original_string": "    protected final void updateInt(final int columnIndex, final int x) throws SQLException {\n        resultSet.updateInt(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateInt(String,int)", "name": "updateInt", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "int"}], "return_type": "void", "signature": "protected final void updateInt(final String columnLabel, final int x)", "original_string": "    protected final void updateInt(final String columnLabel, final int x) throws SQLException {\n        resultSet.updateInt(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateLong(int,long)", "name": "updateLong", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "long"}], "return_type": "void", "signature": "protected final void updateLong(final int columnIndex, final long x)", "original_string": "    protected final void updateLong(final int columnIndex, final long x) throws SQLException {\n        resultSet.updateLong(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateLong(String,long)", "name": "updateLong", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "long"}], "return_type": "void", "signature": "protected final void updateLong(final String columnLabel, final long x)", "original_string": "    protected final void updateLong(final String columnLabel, final long x) throws SQLException {\n        resultSet.updateLong(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(int,Reader)", "name": "updateNCharacterStream", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateNCharacterStream(final int columnIndex, final Reader x)", "original_string": "    protected final void updateNCharacterStream(final int columnIndex, final Reader x) throws SQLException {\n        resultSet.updateNCharacterStream(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(int,Reader,long)", "name": "updateNCharacterStream", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateNCharacterStream(final int columnIndex, final Reader x, final long length)", "original_string": "    protected final void updateNCharacterStream(final int columnIndex, final Reader x, final long length) throws SQLException {\n        resultSet.updateNCharacterStream(columnIndex, x, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(String,Reader)", "name": "updateNCharacterStream", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateNCharacterStream(final String columnLabel, final Reader reader)", "original_string": "    protected final void updateNCharacterStream(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateNCharacterStream(columnLabel, reader);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNCharacterStream(String,Reader,long)", "name": "updateNCharacterStream", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateNCharacterStream(final String columnLabel, final Reader reader, final long length)", "original_string": "    protected final void updateNCharacterStream(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateNCharacterStream(columnLabel, reader, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(int,NClob)", "name": "updateNClob", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "nClob", "type": "NClob"}], "return_type": "void", "signature": "protected final void updateNClob(final int columnIndex, final NClob nClob)", "original_string": "    protected final void updateNClob(final int columnIndex, final NClob nClob) throws SQLException {\n        resultSet.updateNClob(columnIndex, nClob);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(int,Reader)", "name": "updateNClob", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "reader", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateNClob(final int columnIndex, final Reader reader)", "original_string": "    protected final void updateNClob(final int columnIndex, final Reader reader) throws SQLException {\n        resultSet.updateNClob(columnIndex, reader);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(int,Reader,long)", "name": "updateNClob", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "reader", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateNClob(final int columnIndex, final Reader reader, final long length)", "original_string": "    protected final void updateNClob(final int columnIndex, final Reader reader, final long length) throws SQLException {\n        resultSet.updateNClob(columnIndex, reader, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(String,NClob)", "name": "updateNClob", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "nClob", "type": "NClob"}], "return_type": "void", "signature": "protected final void updateNClob(final String columnLabel, final NClob nClob)", "original_string": "    protected final void updateNClob(final String columnLabel, final NClob nClob) throws SQLException {\n        resultSet.updateNClob(columnLabel, nClob);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(String,Reader)", "name": "updateNClob", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}], "return_type": "void", "signature": "protected final void updateNClob(final String columnLabel, final Reader reader)", "original_string": "    protected final void updateNClob(final String columnLabel, final Reader reader) throws SQLException {\n        resultSet.updateNClob(columnLabel, reader);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNClob(String,Reader,long)", "name": "updateNClob", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "reader", "type": "Reader"}, {"name": "length", "type": "long"}], "return_type": "void", "signature": "protected final void updateNClob(final String columnLabel, final Reader reader, final long length)", "original_string": "    protected final void updateNClob(final String columnLabel, final Reader reader, final long length) throws SQLException {\n        resultSet.updateNClob(columnLabel, reader, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNString(int,String)", "name": "updateNString", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "nString", "type": "String"}], "return_type": "void", "signature": "protected final void updateNString(final int columnIndex, final String nString)", "original_string": "    protected final void updateNString(final int columnIndex, final String nString) throws SQLException {\n        resultSet.updateNString(columnIndex, nString);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNString(String,String)", "name": "updateNString", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "nString", "type": "String"}], "return_type": "void", "signature": "protected final void updateNString(final String columnLabel, final String nString)", "original_string": "    protected final void updateNString(final String columnLabel, final String nString) throws SQLException {\n        resultSet.updateNString(columnLabel, nString);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNull(int)", "name": "updateNull", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "void", "signature": "protected final void updateNull(final int columnIndex)", "original_string": "    protected final void updateNull(final int columnIndex) throws SQLException {\n        resultSet.updateNull(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateNull(String)", "name": "updateNull", "arg_nums": 1, "params": [{"name": "columnLabel", "type": "String"}], "return_type": "void", "signature": "protected final void updateNull(final String columnLabel)", "original_string": "    protected final void updateNull(final String columnLabel) throws SQLException {\n        resultSet.updateNull(columnLabel);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(int,Object)", "name": "updateObject", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Object"}], "return_type": "void", "signature": "protected final void updateObject(final int columnIndex, final Object x)", "original_string": "    protected final void updateObject(final int columnIndex, final Object x) throws SQLException {\n        resultSet.updateObject(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(int,Object,int)", "name": "updateObject", "arg_nums": 3, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Object"}, {"name": "scaleOrLength", "type": "int"}], "return_type": "void", "signature": "protected final void updateObject(final int columnIndex, final Object x, final int scaleOrLength)", "original_string": "    protected final void updateObject(final int columnIndex, final Object x, final int scaleOrLength) throws SQLException {\n        resultSet.updateObject(columnIndex, x, scaleOrLength);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(String,Object)", "name": "updateObject", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Object"}], "return_type": "void", "signature": "protected final void updateObject(final String columnLabel, final Object x)", "original_string": "    protected final void updateObject(final String columnLabel, final Object x) throws SQLException {\n        resultSet.updateObject(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateObject(String,Object,int)", "name": "updateObject", "arg_nums": 3, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Object"}, {"name": "scaleOrLength", "type": "int"}], "return_type": "void", "signature": "protected final void updateObject(final String columnLabel, final Object x, final int scaleOrLength)", "original_string": "    protected final void updateObject(final String columnLabel, final Object x, final int scaleOrLength) throws SQLException {\n        resultSet.updateObject(columnLabel, x, scaleOrLength);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRef(int,Ref)", "name": "updateRef", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Ref"}], "return_type": "void", "signature": "protected final void updateRef(final int columnIndex, final Ref x)", "original_string": "    protected final void updateRef(final int columnIndex, final Ref x) throws SQLException {\n        resultSet.updateRef(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRef(String,Ref)", "name": "updateRef", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Ref"}], "return_type": "void", "signature": "protected final void updateRef(final String columnLabel, final Ref x)", "original_string": "    protected final void updateRef(final String columnLabel, final Ref x) throws SQLException {\n        resultSet.updateRef(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRow()", "name": "updateRow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected final void updateRow()", "original_string": "    protected final void updateRow() throws SQLException {\n        resultSet.updateRow();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRowId(int,RowId)", "name": "updateRowId", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "RowId"}], "return_type": "void", "signature": "protected final void updateRowId(final int columnIndex, final RowId x)", "original_string": "    protected final void updateRowId(final int columnIndex, final RowId x) throws SQLException {\n        resultSet.updateRowId(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateRowId(String,RowId)", "name": "updateRowId", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "RowId"}], "return_type": "void", "signature": "protected final void updateRowId(final String columnLabel, final RowId x)", "original_string": "    protected final void updateRowId(final String columnLabel, final RowId x) throws SQLException {\n        resultSet.updateRowId(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateShort(int,short)", "name": "updateShort", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "short"}], "return_type": "void", "signature": "protected final void updateShort(final int columnIndex, final short x)", "original_string": "    protected final void updateShort(final int columnIndex, final short x) throws SQLException {\n        resultSet.updateShort(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateShort(String,short)", "name": "updateShort", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "short"}], "return_type": "void", "signature": "protected final void updateShort(final String columnLabel, final short x)", "original_string": "    protected final void updateShort(final String columnLabel, final short x) throws SQLException {\n        resultSet.updateShort(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateSQLXML(int,SQLXML)", "name": "updateSQLXML", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "xmlObject", "type": "SQLXML"}], "return_type": "void", "signature": "protected final void updateSQLXML(final int columnIndex, final SQLXML xmlObject)", "original_string": "    protected final void updateSQLXML(final int columnIndex, final SQLXML xmlObject) throws SQLException {\n        resultSet.updateSQLXML(columnIndex, xmlObject);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateSQLXML(String,SQLXML)", "name": "updateSQLXML", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "xmlObject", "type": "SQLXML"}], "return_type": "void", "signature": "protected final void updateSQLXML(final String columnLabel, final SQLXML xmlObject)", "original_string": "    protected final void updateSQLXML(final String columnLabel, final SQLXML xmlObject) throws SQLException {\n        resultSet.updateSQLXML(columnLabel, xmlObject);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateString(int,String)", "name": "updateString", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "String"}], "return_type": "void", "signature": "protected final void updateString(final int columnIndex, final String x)", "original_string": "    protected final void updateString(final int columnIndex, final String x) throws SQLException {\n        resultSet.updateString(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateString(String,String)", "name": "updateString", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "String"}], "return_type": "void", "signature": "protected final void updateString(final String columnLabel, final String x)", "original_string": "    protected final void updateString(final String columnLabel, final String x) throws SQLException {\n        resultSet.updateString(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTime(int,Time)", "name": "updateTime", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Time"}], "return_type": "void", "signature": "protected final void updateTime(final int columnIndex, final Time x)", "original_string": "    protected final void updateTime(final int columnIndex, final Time x) throws SQLException {\n        resultSet.updateTime(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTime(String,Time)", "name": "updateTime", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Time"}], "return_type": "void", "signature": "protected final void updateTime(final String columnLabel, final Time x)", "original_string": "    protected final void updateTime(final String columnLabel, final Time x) throws SQLException {\n        resultSet.updateTime(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTimestamp(int,Timestamp)", "name": "updateTimestamp", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "x", "type": "Timestamp"}], "return_type": "void", "signature": "protected final void updateTimestamp(final int columnIndex, final Timestamp x)", "original_string": "    protected final void updateTimestamp(final int columnIndex, final Timestamp x) throws SQLException {\n        resultSet.updateTimestamp(columnIndex, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[void]updateTimestamp(String,Timestamp)", "name": "updateTimestamp", "arg_nums": 2, "params": [{"name": "columnLabel", "type": "String"}, {"name": "x", "type": "Timestamp"}], "return_type": "void", "signature": "protected final void updateTimestamp(final String columnLabel, final Timestamp x)", "original_string": "    protected final void updateTimestamp(final String columnLabel, final Timestamp x) throws SQLException {\n        resultSet.updateTimestamp(columnLabel, x);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler.[boolean]wasNull()", "name": "wasNull", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected final boolean wasNull()", "original_string": "    protected final boolean wasNull() throws SQLException {\n        return resultSet.wasNull();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java", "class_name": "BaseResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/BaseResultSetHandler.java.BaseResultSetHandler", "attributes": {"modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTODO.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[Object[]]toArray(ResultSet)", "name": "toArray", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Object[]", "signature": "Object[] toArray(ResultSet resultSet)", "original_string": "    Object[] toArray(ResultSet resultSet) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/RowProcessor.java", "class_name": "RowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nCreate an {@code Object[]} from the column values in one\n{@code ResultSet} row.  The {@code ResultSet} should be\npositioned on a valid row before passing it to this method.\nImplementations of this method must not alter the row position of\nthe {@code ResultSet}.\n\n@param resultSet ResultSet that supplies the array data\n@throws SQLException if a database access error occurs\n@return the newly created array\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[T]toBean(ResultSet,Class<? extends T>)", "name": "toBean", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "type", "type": "Class<? extends T>"}], "return_type": "T", "signature": "<T> T toBean(ResultSet resultSet, Class<? extends T> type)", "original_string": "    <T> T toBean(ResultSet resultSet, Class<? extends T> type) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/RowProcessor.java", "class_name": "RowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nCreate a JavaBean from the column values in one {@code ResultSet}\nrow.  The {@code ResultSet} should be positioned on a valid row before\npassing it to this method.  Implementations of this method must not\nalter the row position of the {@code ResultSet}.\n@param <T> The type of bean to create\n@param resultSet ResultSet that supplies the bean data\n@param type Class from which to create the bean instance\n@throws SQLException if a database access error occurs\n@return the newly created bean\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[List<T>]toBeanList(ResultSet,Class<? extends T>)", "name": "toBeanList", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "type", "type": "Class<? extends T>"}], "return_type": "List<T>", "signature": "<T> List<T> toBeanList(ResultSet resultSet, Class<? extends T> type)", "original_string": "    <T> List<T> toBeanList(ResultSet resultSet, Class<? extends T> type) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/RowProcessor.java", "class_name": "RowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\nCreate a {@code List} of JavaBeans from the column values in all\n{@code ResultSet} rows.  {@code ResultSet.next()} should\n<strong>not</strong> be called before passing it to this method.\n@param <T> The type of bean to create\n@param resultSet ResultSet that supplies the bean data\n@param type Class from which to create the bean instance\n@throws SQLException if a database access error occurs\n@return A {@code List} of beans with the given type in the order\nthey were returned by the {@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor.[Map<String, Object>]toMap(ResultSet)", "name": "toMap", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Map<String, Object>", "signature": "Map<String, Object> toMap(ResultSet resultSet)", "original_string": "    Map<String, Object> toMap(ResultSet resultSet) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/RowProcessor.java", "class_name": "RowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/RowProcessor.java.RowProcessor", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": "\nCreate a {@code Map} from the column values in one\n{@code ResultSet} row.  The {@code ResultSet} should be\npositioned on a valid row before\npassing it to this method.  Implementations of this method must not\nalter the row position of the {@code ResultSet}.\n\n@param resultSet ResultSet that supplies the map data\n@throws SQLException if a database access error occurs\n@return the newly created Map\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]close(Connection)", "name": "close", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void close(final Connection conn)", "original_string": "    public static void close(final Connection conn) throws SQLException {\n        if (conn != null) {\n            conn.close();\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code Connection}, avoid closing if null.\n\n@param conn Connection to close.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]close(ResultSet)", "name": "close", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "void", "signature": "public static void close(final ResultSet resultSet)", "original_string": "    public static void close(final ResultSet resultSet) throws SQLException {\n        if (resultSet != null) {\n            resultSet.close();\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code ResultSet}, avoid closing if null.\n\n@param resultSet ResultSet to close.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]close(Statement)", "name": "close", "arg_nums": 1, "params": [{"name": "stmt", "type": "Statement"}], "return_type": "void", "signature": "public static void close(final Statement stmt)", "original_string": "    public static void close(final Statement stmt) throws SQLException {\n        if (stmt != null) {\n            stmt.close();\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code Statement}, avoid closing if null.\n\n@param stmt Statement to close.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]closeQuietly(Connection)", "name": "closeQuietly", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void closeQuietly(final Connection conn)", "original_string": "    public static void closeQuietly(final Connection conn) {\n        try {\n            close(conn);\n        } catch (final SQLException e) { // NOPMD\n            // quiet\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code Connection}, avoid closing if null and hide\nany SQLExceptions that occur.\n\n@param conn Connection to close.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]closeQuietly(Connection,Statement,ResultSet)", "name": "closeQuietly", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "stmt", "type": "Statement"}, {"name": "rs", "type": "ResultSet"}], "return_type": "void", "signature": "public static void closeQuietly(final Connection conn, final Statement stmt,\n            final ResultSet rs)", "original_string": "    public static void closeQuietly(final Connection conn, final Statement stmt,\n            final ResultSet rs) {\n\n        try {\n            closeQuietly(rs);\n        } finally {\n            try {\n                closeQuietly(stmt);\n            } finally {\n                closeQuietly(conn);\n            }\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code Connection}, {@code Statement} and\n{@code ResultSet}.  Avoid closing if null and hide any\nSQLExceptions that occur.\n\n@param conn Connection to close.\n@param stmt Statement to close.\n@param rs ResultSet to close.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]closeQuietly(ResultSet)", "name": "closeQuietly", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "void", "signature": "public static void closeQuietly(final ResultSet resultSet)", "original_string": "    public static void closeQuietly(final ResultSet resultSet) {\n        try {\n            close(resultSet);\n        } catch (final SQLException e) { // NOPMD\n            // quiet\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code ResultSet}, avoid closing if null and hide any\nSQLExceptions that occur.\n\n@param resultSet ResultSet to close.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]closeQuietly(Statement)", "name": "closeQuietly", "arg_nums": 1, "params": [{"name": "stmt", "type": "Statement"}], "return_type": "void", "signature": "public static void closeQuietly(final Statement stmt)", "original_string": "    public static void closeQuietly(final Statement stmt) {\n        try {\n            close(stmt);\n        } catch (final SQLException e) { // NOPMD\n            // quiet\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code Statement}, avoid closing if null and hide\nany SQLExceptions that occur.\n\n@param stmt Statement to close.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]commitAndClose(Connection)", "name": "commitAndClose", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void commitAndClose(final Connection conn)", "original_string": "    public static void commitAndClose(final Connection conn) throws SQLException {\n        if (conn != null) {\n            try {\n                conn.commit();\n            } finally {\n                conn.close();\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCommits a {@code Connection} then closes it, avoid closing if null.\n\n@param conn Connection to close.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]commitAndCloseQuietly(Connection)", "name": "commitAndCloseQuietly", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void commitAndCloseQuietly(final Connection conn)", "original_string": "    public static void commitAndCloseQuietly(final Connection conn) {\n        try {\n            commitAndClose(conn);\n        } catch (final SQLException e) { // NOPMD\n            // quiet\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCommits a {@code Connection} then closes it, avoid closing if null\nand hide any SQLExceptions that occur.\n\n@param conn Connection to close.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[boolean]loadDriver(ClassLoader,String)", "name": "loadDriver", "arg_nums": 2, "params": [{"name": "classLoader", "type": "ClassLoader"}, {"name": "driverClassName", "type": "String"}], "return_type": "boolean", "signature": "public static boolean loadDriver(final ClassLoader classLoader, final String driverClassName)", "original_string": "    public static boolean loadDriver(final ClassLoader classLoader, final String driverClassName) {\n        try {\n            final Class<?> loadedClass = classLoader.loadClass(driverClassName);\n\n            if (!Driver.class.isAssignableFrom(loadedClass)) {\n                return false;\n            }\n\n            @SuppressWarnings(\"unchecked\") // guarded by previous check\n            final\n            Class<Driver> driverClass = (Class<Driver>) loadedClass;\n            final Constructor<Driver> driverConstructor = driverClass.getConstructor();\n\n            // make Constructor accessible if it is private\n            @SuppressWarnings(\"deprecation\")\n            // TODO This is deprecated in Java9 and canAccess() should be used. Adding suppression for building on\n            //      later JDKs without a warning.\n            final boolean isConstructorAccessible = driverConstructor.isAccessible();\n            if (!isConstructorAccessible) {\n                driverConstructor.setAccessible(true);\n            }\n\n            try {\n                final Driver driver = driverConstructor.newInstance();\n                registerDriver(new DriverProxy(driver));\n            } finally {\n                driverConstructor.setAccessible(isConstructorAccessible);\n            }\n\n            return true;\n        } catch (final Exception e) {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nLoads and registers a database driver class.\nIf this succeeds, it returns true, else it returns false.\n\n@param classLoader the class loader used to load the driver class\n@param driverClassName of driver to load\n@return boolean {@code true} if the driver was found, otherwise {@code false}\n@since 1.4\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[boolean]loadDriver(String)", "name": "loadDriver", "arg_nums": 1, "params": [{"name": "driverClassName", "type": "String"}], "return_type": "boolean", "signature": "public static boolean loadDriver(final String driverClassName)", "original_string": "    public static boolean loadDriver(final String driverClassName) {\n        return loadDriver(DbUtils.class.getClassLoader(), driverClassName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nLoads and registers a database driver class.\nIf this succeeds, it returns true, else it returns false.\n\n@param driverClassName of driver to load\n@return boolean {@code true} if the driver was found, otherwise {@code false}\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]printStackTrace(SQLException)", "name": "printStackTrace", "arg_nums": 1, "params": [{"name": "e", "type": "SQLException"}], "return_type": "void", "signature": "public static void printStackTrace(final SQLException e)", "original_string": "    public static void printStackTrace(final SQLException e) {\n        printStackTrace(e, new PrintWriter(System.err));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrint the stack trace for a SQLException to STDERR.\n\n@param e SQLException to print stack trace of\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]printStackTrace(SQLException,PrintWriter)", "name": "printStackTrace", "arg_nums": 2, "params": [{"name": "e", "type": "SQLException"}, {"name": "pw", "type": "PrintWriter"}], "return_type": "void", "signature": "public static void printStackTrace(final SQLException e, final PrintWriter pw)", "original_string": "    public static void printStackTrace(final SQLException e, final PrintWriter pw) {\n\n        SQLException next = e;\n        while (next != null) {\n            next.printStackTrace(pw);\n            next = next.getNextException();\n            if (next != null) {\n                pw.println(\"Next SQLException:\");\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrint the stack trace for a SQLException to a\nspecified PrintWriter.\n\n@param e SQLException to print stack trace of\n@param pw PrintWriter to print to\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]printWarnings(Connection)", "name": "printWarnings", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void printWarnings(final Connection conn)", "original_string": "    public static void printWarnings(final Connection conn) {\n        printWarnings(conn, new PrintWriter(System.err));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrint warnings on a Connection to STDERR.\n\n@param conn Connection to print warnings from\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]printWarnings(Connection,PrintWriter)", "name": "printWarnings", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "pw", "type": "PrintWriter"}], "return_type": "void", "signature": "public static void printWarnings(final Connection conn, final PrintWriter pw)", "original_string": "    public static void printWarnings(final Connection conn, final PrintWriter pw) {\n        if (conn != null) {\n            try {\n                printStackTrace(conn.getWarnings(), pw);\n            } catch (final SQLException e) {\n                printStackTrace(e, pw);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPrint warnings on a Connection to a specified PrintWriter.\n\n@param conn Connection to print warnings from\n@param pw PrintWriter to print to\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]rollback(Connection)", "name": "rollback", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void rollback(final Connection conn)", "original_string": "    public static void rollback(final Connection conn) throws SQLException {\n        if (conn != null) {\n            conn.rollback();\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nRollback any changes made on the given connection.\n@param conn Connection to rollback.  A null value is legal.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]rollbackAndClose(Connection)", "name": "rollbackAndClose", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void rollbackAndClose(final Connection conn)", "original_string": "    public static void rollbackAndClose(final Connection conn) throws SQLException {\n        if (conn != null) {\n            try {\n                conn.rollback();\n            } finally {\n                conn.close();\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPerforms a rollback on the {@code Connection} then closes it,\navoid closing if null.\n\n@param conn Connection to rollback.  A null value is legal.\n@throws SQLException if a database access error occurs\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]rollbackAndCloseQuietly(Connection)", "name": "rollbackAndCloseQuietly", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void rollbackAndCloseQuietly(final Connection conn)", "original_string": "    public static void rollbackAndCloseQuietly(final Connection conn) {\n        try {\n            rollbackAndClose(conn);\n        } catch (final SQLException e) { // NOPMD\n            // quiet\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPerforms a rollback on the {@code Connection} then closes it,\navoid closing if null and hide any SQLExceptions that occur.\n\n@param conn Connection to rollback.  A null value is legal.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[void]rollbackQuietly(Connection)", "name": "rollbackQuietly", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "public static void rollbackQuietly(final Connection conn)", "original_string": "    public static void rollbackQuietly(final Connection conn) {\n        try {\n            rollback(conn);\n        } catch (final SQLException e) { // NOPMD\n            // quiet\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nPerforms a rollback on the {@code Connection}, avoid\nclosing if null and hide any SQLExceptions that occur.\n\n@param conn Connection to rollback.  A null value is legal.\n@since DbUtils 2.0\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils.[]DbUtils()", "name": "DbUtils", "arg_nums": 0, "params": [], "return_type": "", "signature": "public DbUtils()", "original_string": "    public DbUtils() {\n        // do nothing\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/DbUtils.java", "class_name": "DbUtils", "class_uri": "src/main/java/org/apache/commons/dbutils/DbUtils.java.DbUtils", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nDefault constructor.\n\nUtility classes should not have a public or default constructor,\nbut this one preserves retro-compatibility.\n\n@since 1.4\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader.[QueryLoader]instance()", "name": "instance", "arg_nums": 0, "params": [], "return_type": "QueryLoader", "signature": "public static QueryLoader instance()", "original_string": "    public static QueryLoader instance() {\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryLoader.java", "class_name": "QueryLoader", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "QueryLoader", "classes": []}, "docstring": "\nReturn an INSTANCE of this class.\n@return The Singleton INSTANCE.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader.[]QueryLoader()", "name": "QueryLoader", "arg_nums": 0, "params": [], "return_type": "", "signature": "protected QueryLoader()", "original_string": "    protected QueryLoader() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryLoader.java", "class_name": "QueryLoader", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nQueryLoader constructor.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader.[Map<String, String>]load(String)", "name": "load", "arg_nums": 1, "params": [{"name": "path", "type": "String"}], "return_type": "Map<String, String>", "signature": "public synchronized Map<String, String> load(final String path)", "original_string": "    public synchronized Map<String, String> load(final String path) throws IOException {\n\n        Map<String, String> queryMap = this.queries.get(path);\n\n        if (queryMap == null) {\n            queryMap = loadQueries(path);\n            this.queries.put(path, queryMap);\n        }\n\n        return queryMap;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryLoader.java", "class_name": "QueryLoader", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader", "attributes": {"modifiers": "public synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "synchronized"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": "\nLoads a Map of query names to SQL values.  The Maps are cached so a\nsubsequent request to load queries from the same path will return\nthe cached Map.  The properties file to load can be in either\nline-oriented or XML format.  XML formatted properties files must use a\n{@code .xml} file extension.\n\n@param path The path that the ClassLoader will use to find the file.\nThis is <strong>not</strong> a file system path.  If you had a jarred\nQueries.properties file in the com.yourcorp.app.jdbc package you would\npass \"/com/yourcorp/app/jdbc/Queries.properties\" to this method.\n@throws IOException if a file access error occurs\n@throws IllegalArgumentException if the ClassLoader can't find a file at\nthe given path.\n@throws java.util.InvalidPropertiesFormatException if the XML properties file is\ninvalid\n@return Map of query names to SQL values\n@see java.util.Properties\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader.[Map<String, String>]loadQueries(String)", "name": "loadQueries", "arg_nums": 1, "params": [{"name": "path", "type": "String"}], "return_type": "Map<String, String>", "signature": "protected Map<String, String> loadQueries(final String path)", "original_string": "    protected Map<String, String> loadQueries(final String path) throws IOException {\n        // Findbugs flags getClass().getResource as a bad practice; maybe we should change the API?\n        final Properties props;\n        try (InputStream in = getClass().getResourceAsStream(path)) {\n\n            if (in == null) {\n                throw new IllegalArgumentException(path + \" not found.\");\n            }\n            props = new Properties();\n            if (dotXml.matcher(path).matches()) {\n                props.loadFromXML(in);\n            } else {\n                props.load(in);\n            }\n        }\n\n        // Copy to HashMap for better performance\n\n        @SuppressWarnings({\"rawtypes\", \"unchecked\" }) // load() always creates <String,String> entries\n        final HashMap<String, String> hashMap = new HashMap(props);\n        return hashMap;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryLoader.java", "class_name": "QueryLoader", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Map<String, String>", "classes": []}, "docstring": "\nLoads a set of named queries into a Map object.  This implementation\nreads a properties file at the given path.  The properties file can be\nin either line-oriented or XML format.  XML formatted properties files\nmust use a {@code .xml} file extension.\n\n@param path The path that the ClassLoader will use to find the file.\n@throws IOException if a file access error occurs\n@throws IllegalArgumentException if the ClassLoader can't find a file at\nthe given path.\n@throws java.util.InvalidPropertiesFormatException if the XML properties file is\ninvalid\n@since 1.1\n@return Map of query names to SQL values\n@see java.util.Properties\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader.[void]unload(String)", "name": "unload", "arg_nums": 1, "params": [{"name": "path", "type": "String"}], "return_type": "void", "signature": "public synchronized void unload(final String path)", "original_string": "    public synchronized void unload(final String path) {\n        this.queries.remove(path);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/QueryLoader.java", "class_name": "QueryLoader", "class_uri": "src/main/java/org/apache/commons/dbutils/QueryLoader.java.QueryLoader", "attributes": {"modifiers": "public synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "synchronized"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nRemoves the queries for the given path from the cache.\n@param path The path that the queries were loaded from.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[]AsyncQueryRunner(boolean,ExecutorService)", "name": "AsyncQueryRunner", "arg_nums": 2, "params": [{"name": "pmdKnownBroken", "type": "boolean"}, {"name": "executorService", "type": "ExecutorService"}], "return_type": "", "signature": "@Deprecated\n    public AsyncQueryRunner(final boolean pmdKnownBroken, final ExecutorService executorService)", "original_string": "    @Deprecated\n    public AsyncQueryRunner(final boolean pmdKnownBroken, final ExecutorService executorService) {\n        this(null, pmdKnownBroken, executorService);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n@deprecated Use {@link #AsyncQueryRunner(ExecutorService, QueryRunner)} instead.\nConstructor for AsyncQueryRunner that controls the use of {@code ParameterMetaData}.\n\n@param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int) };\nif {@code pmdKnownBroken} is set to true, we won't even try it; if false, we'll try it,\nand if it breaks, we'll remember not to use it again.\n@param executorService the {@code ExecutorService} instance used to run JDBC invocations concurrently.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[]AsyncQueryRunner(DataSource,boolean,ExecutorService)", "name": "AsyncQueryRunner", "arg_nums": 3, "params": [{"name": "ds", "type": "DataSource"}, {"name": "pmdKnownBroken", "type": "boolean"}, {"name": "executorService", "type": "ExecutorService"}], "return_type": "", "signature": "@Deprecated\n    public AsyncQueryRunner(final DataSource ds, final boolean pmdKnownBroken, final ExecutorService executorService)", "original_string": "    @Deprecated\n    public AsyncQueryRunner(final DataSource ds, final boolean pmdKnownBroken, final ExecutorService executorService) {\n        super(ds, pmdKnownBroken);\n        this.executorService = executorService;\n        this.queryRunner = new QueryRunner(ds, pmdKnownBroken);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n@deprecated Use {@link #AsyncQueryRunner(ExecutorService, QueryRunner)} instead.\nConstructor for AsyncQueryRunner that take a {@code DataSource} and controls the use of {@code ParameterMetaData}.\nMethods that do not take a {@code Connection} parameter will retrieve connections from this\n{@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n@param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int) };\nif {@code pmdKnownBroken} is set to true, we won't even try it; if false, we'll try it,\nand if it breaks, we'll remember not to use it again.\n@param executorService the {@code ExecutorService} instance used to run JDBC invocations concurrently.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[]AsyncQueryRunner(DataSource,ExecutorService)", "name": "AsyncQueryRunner", "arg_nums": 2, "params": [{"name": "ds", "type": "DataSource"}, {"name": "executorService", "type": "ExecutorService"}], "return_type": "", "signature": "@Deprecated\n    public AsyncQueryRunner(final DataSource ds, final ExecutorService executorService)", "original_string": "    @Deprecated\n    public AsyncQueryRunner(final DataSource ds, final ExecutorService executorService) {\n        this(ds, false, executorService);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n@deprecated Use {@link #AsyncQueryRunner(ExecutorService, QueryRunner)} instead.\nConstructor for AsyncQueryRunner that takes a {@code DataSource}.\n\nMethods that do not take a {@code Connection} parameter will retrieve connections from this\n{@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n@param executorService the {@code ExecutorService} instance used to run JDBC invocations concurrently.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[]AsyncQueryRunner(ExecutorService)", "name": "AsyncQueryRunner", "arg_nums": 1, "params": [{"name": "executorService", "type": "ExecutorService"}], "return_type": "", "signature": "public AsyncQueryRunner(final ExecutorService executorService)", "original_string": "    public AsyncQueryRunner(final ExecutorService executorService) {\n        this(null, false, executorService);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for AsyncQueryRunner.\n\n@param executorService the {@code ExecutorService} instance used to run JDBC invocations concurrently.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[]AsyncQueryRunner(ExecutorService,QueryRunner)", "name": "AsyncQueryRunner", "arg_nums": 2, "params": [{"name": "executorService", "type": "ExecutorService"}, {"name": "queryRunner", "type": "QueryRunner"}], "return_type": "", "signature": "public AsyncQueryRunner(final ExecutorService executorService, final QueryRunner queryRunner)", "original_string": "    public AsyncQueryRunner(final ExecutorService executorService, final QueryRunner queryRunner) {\n        this.executorService = executorService;\n        this.queryRunner = queryRunner;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for AsyncQueryRunner which uses a provided ExecutorService and underlying QueryRunner.\n\n@param executorService the {@code ExecutorService} instance used to run JDBC invocations concurrently.\n@param queryRunner the {@code QueryRunner} instance to use for the queries.\n@since 1.5\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<int[]>]batch(Connection,String,Object[][])", "name": "batch", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "params", "type": "Object[][]"}], "return_type": "Future<int[]>", "signature": "public Future<int[]> batch(final Connection conn, final String sql, final Object[][] params)", "original_string": "    public Future<int[]> batch(final Connection conn, final String sql, final Object[][] params) throws SQLException {\n        return executorService.submit(() -> queryRunner.batch(conn, sql, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<int[]>", "classes": []}, "docstring": "\nExecute a batch of SQL INSERT, UPDATE, or DELETE queries.\n\n@param conn The {@code Connection} to use to run the query.  The caller is\nresponsible for closing this Connection.\n@param sql The SQL to execute.\n@param params An array of query replacement parameters.  Each row in\nthis array is one set of batch replacement values.\n@return A {@code Future} which returns the number of rows updated per statement.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<int[]>]batch(String,Object[][])", "name": "batch", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "params", "type": "Object[][]"}], "return_type": "Future<int[]>", "signature": "public Future<int[]> batch(final String sql, final Object[][] params)", "original_string": "    public Future<int[]> batch(final String sql, final Object[][] params) throws SQLException {\n        return executorService.submit(() -> queryRunner.batch(sql, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<int[]>", "classes": []}, "docstring": "\nExecute a batch of SQL INSERT, UPDATE, or DELETE queries.  The\n{@code Connection} is retrieved from the {@code DataSource}\nset in the constructor.  This {@code Connection} must be in\nauto-commit mode or the update will not be saved.\n\n@param sql The SQL to execute.\n@param params An array of query replacement parameters.  Each row in\nthis array is one set of batch replacement values.\n@return A {@code Future} which returns the number of rows updated per statement.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]insert(Connection,String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> Future<T> insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        return executorService.submit(() -> queryRunner.insert(conn, sql, rsh));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecutes {@link QueryRunner#insert(Connection, String, ResultSetHandler)} asynchronously.\n\n@param <T> Return type expected\n@param conn {@link Connection} to use to execute the SQL statement\n@param sql SQL insert statement to execute\n@param rsh {@link ResultSetHandler} for handling the results\n@return {@link Future} that executes a query runner insert\n@see QueryRunner#insert(Connection, String, ResultSetHandler)\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]insert(Connection,String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> Future<T> insert(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        return executorService.submit(() -> queryRunner.insert(conn, sql, rsh, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecutes {@link QueryRunner#insert(Connection, String, ResultSetHandler, Object...)} asynchronously.\n\n@param <T> Return type expected\n@param conn {@link Connection} to use to execute the SQL statement\n@param sql SQL insert statement to execute\n@param rsh {@link ResultSetHandler} for handling the results\n@param params Parameter values for substitution in the SQL statement\n@return {@link Future} that executes a query runner insert\n@see QueryRunner#insert(Connection, String, ResultSetHandler, Object...)\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]insert(String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> insert(final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> Future<T> insert(final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        return executorService.submit(() -> queryRunner.insert(sql, rsh));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecutes {@link QueryRunner#insert(String, ResultSetHandler)} asynchronously.\n\n@param <T> Return type expected\n@param sql SQL insert statement to execute\n@param rsh {@link ResultSetHandler} for handling the results\n@return {@link Future} that executes a query runner insert\n@see QueryRunner#insert(String, ResultSetHandler)\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]insert(String,ResultSetHandler<T>)", "name": "insert", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> insert(final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> Future<T> insert(final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        return executorService.submit(() -> queryRunner.insert(sql, rsh, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecutes {@link QueryRunner#insert(String, ResultSetHandler, Object...)} asynchronously.\n\n@param <T> Return type expected\n@param sql SQL insert statement to execute\n@param rsh {@link ResultSetHandler} for handling the results\n@param params Parameter values for substitution in the SQL statement\n@return {@link Future} that executes a query runner insert\n@see QueryRunner#insert(String, ResultSetHandler, Object...)\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]insertBatch(Connection,String,ResultSetHandler<T>,Object[][])", "name": "insertBatch", "arg_nums": 4, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}, {"name": "params", "type": "Object[][]"}], "return_type": "Future<T>", "signature": "public <T> Future<T> insertBatch(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object[][] params)", "original_string": "    public <T> Future<T> insertBatch(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object[][] params) throws SQLException {\n        return executorService.submit(() -> queryRunner.insertBatch(conn, sql, rsh, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\n{@link QueryRunner#insertBatch(Connection, String, ResultSetHandler, Object[][])} asynchronously.\n\n@param <T> Return type expected\n@param conn {@link Connection} to use to execute the SQL statement\n@param sql SQL insert statement to execute\n@param rsh {@link ResultSetHandler} for handling the results\n@param params An array of query replacement parameters.  Each row in\n       this array is one set of batch replacement values.\n@return {@link Future} that executes a query runner batch insert\n@see QueryRunner#insertBatch(Connection, String, ResultSetHandler, Object[][])\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]insertBatch(String,ResultSetHandler<T>,Object[][])", "name": "insertBatch", "arg_nums": 3, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}, {"name": "params", "type": "Object[][]"}], "return_type": "Future<T>", "signature": "public <T> Future<T> insertBatch(final String sql, final ResultSetHandler<T> rsh, final Object[][] params)", "original_string": "    public <T> Future<T> insertBatch(final String sql, final ResultSetHandler<T> rsh, final Object[][] params) throws SQLException {\n        return executorService.submit(() -> queryRunner.insertBatch(sql, rsh, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\n{@link QueryRunner#insertBatch(String, ResultSetHandler, Object[][])} asynchronously.\n\n@param <T> Return type expected\n@param sql SQL insert statement to execute\n@param rsh {@link ResultSetHandler} for handling the results\n@param params An array of query replacement parameters.  Each row in\n       this array is one set of batch replacement values.\n@return {@link Future} that executes a query runner batch insert\n@see QueryRunner#insertBatch(String, ResultSetHandler, Object[][])\n@throws SQLException if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]query(Connection,String,ResultSetHandler<T>)", "name": "query", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> query(final Connection conn, final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> Future<T> query(final Connection conn, final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        return executorService.submit(() -> queryRunner.query(conn, sql, rsh));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecute an SQL SELECT query without any replacement parameters.  The\ncaller is responsible for closing the connection.\n@param <T> The type of object that the handler returns\n@param conn The connection to execute the query in.\n@param sql The query to execute.\n@param rsh The handler that converts the results into an object.\n@return A {@code Future} which returns the result of the query call.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]query(Connection,String,ResultSetHandler<T>)", "name": "query", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> query(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> Future<T> query(final Connection conn, final String sql, final ResultSetHandler<T> rsh, final Object... params)\n            throws SQLException {\n        return executorService.submit(() -> queryRunner.query(conn, sql, rsh, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecute an SQL SELECT query with replacement parameters.  The\ncaller is responsible for closing the connection.\n@param <T> The type of object that the handler returns\n@param conn The connection to execute the query in.\n@param sql The query to execute.\n@param rsh The handler that converts the results into an object.\n@param params The replacement parameters.\n@return A {@code Future} which returns the result of the query call.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]query(String,ResultSetHandler<T>)", "name": "query", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> query(final String sql, final ResultSetHandler<T> rsh)", "original_string": "    public <T> Future<T> query(final String sql, final ResultSetHandler<T> rsh) throws SQLException {\n        return executorService.submit(() -> queryRunner.query(sql, rsh));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecutes the given SELECT SQL without any replacement parameters.\nThe {@code Connection} is retrieved from the\n{@code DataSource} set in the constructor.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet}.\n\n@return A {@code Future} which returns the result of the query call.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<T>]query(String,ResultSetHandler<T>)", "name": "query", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "rsh", "type": "ResultSetHandler<T>"}], "return_type": "Future<T>", "signature": "public <T> Future<T> query(final String sql, final ResultSetHandler<T> rsh, final Object... params)", "original_string": "    public <T> Future<T> query(final String sql, final ResultSetHandler<T> rsh, final Object... params) throws SQLException {\n        return executorService.submit(() -> queryRunner.query(sql, rsh, params));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<T>", "classes": []}, "docstring": "\nExecutes the given SELECT SQL query and returns a result object.\nThe {@code Connection} is retrieved from the\n{@code DataSource} set in the constructor.\n@param <T> The type of object that the handler returns\n@param sql The SQL statement to execute.\n@param rsh The handler used to create the result object from\nthe {@code ResultSet}.\n@param params Initialize the PreparedStatement's IN parameters with\nthis array.\n@return A {@code Future} which returns the result of the query call.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<Integer>]update(Connection,String)", "name": "update", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}], "return_type": "Future<Integer>", "signature": "public Future<Integer> update(final Connection conn, final String sql)", "original_string": "    public Future<Integer> update(final Connection conn, final String sql) throws SQLException {\n        return executorService.submit(() -> Integer.valueOf(queryRunner.update(conn, sql)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<Integer>", "classes": []}, "docstring": "\nExecute an SQL INSERT, UPDATE, or DELETE query without replacement\nparameters.\n\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@return A {@code Future} which returns the number of rows updated.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<Integer>]update(Connection,String,Object)", "name": "update", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "param", "type": "Object"}], "return_type": "Future<Integer>", "signature": "public Future<Integer> update(final Connection conn, final String sql, final Object param)", "original_string": "    public Future<Integer> update(final Connection conn, final String sql, final Object param) throws SQLException {\n        return executorService.submit(() -> Integer.valueOf(queryRunner.update(conn, sql, param)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<Integer>", "classes": []}, "docstring": "\nExecute an SQL INSERT, UPDATE, or DELETE query with a single replacement\nparameter.\n\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param param The replacement parameter.\n@return A {@code Future} which returns the number of rows updated.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<Integer>]update(Connection,String)", "name": "update", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}], "return_type": "Future<Integer>", "signature": "public Future<Integer> update(final Connection conn, final String sql, final Object... params)", "original_string": "    public Future<Integer> update(final Connection conn, final String sql, final Object... params) throws SQLException {\n        return executorService.submit(() -> Integer.valueOf(queryRunner.update(conn, sql, params)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<Integer>", "classes": []}, "docstring": "\nExecute an SQL INSERT, UPDATE, or DELETE query.\n\n@param conn The connection to use to run the query.\n@param sql The SQL to execute.\n@param params The query replacement parameters.\n@return A {@code Future} which returns the number of rows updated.\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<Integer>]update(String)", "name": "update", "arg_nums": 1, "params": [{"name": "sql", "type": "String"}], "return_type": "Future<Integer>", "signature": "public Future<Integer> update(final String sql)", "original_string": "    public Future<Integer> update(final String sql) throws SQLException {\n        return executorService.submit(() -> Integer.valueOf(queryRunner.update(sql)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<Integer>", "classes": []}, "docstring": "\nExecutes the given INSERT, UPDATE, or DELETE SQL statement without\nany replacement parameters. The {@code Connection} is retrieved\nfrom the {@code DataSource} set in the constructor.  This\n{@code Connection} must be in auto-commit mode or the update will\nnot be saved.\n\n@param sql The SQL statement to execute.\n@throws SQLException if a database access error occurs\n@return A {@code Future} which returns the number of rows updated.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<Integer>]update(String,Object)", "name": "update", "arg_nums": 2, "params": [{"name": "sql", "type": "String"}, {"name": "param", "type": "Object"}], "return_type": "Future<Integer>", "signature": "public Future<Integer> update(final String sql, final Object param)", "original_string": "    public Future<Integer> update(final String sql, final Object param) throws SQLException {\n        return executorService.submit(() -> Integer.valueOf(queryRunner.update(sql, param)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<Integer>", "classes": []}, "docstring": "\nExecutes the given INSERT, UPDATE, or DELETE SQL statement with\na single replacement parameter.  The {@code Connection} is\nretrieved from the {@code DataSource} set in the constructor.\nThis {@code Connection} must be in auto-commit mode or the\nupdate will not be saved.\n\n@param sql The SQL statement to execute.\n@param param The replacement parameter.\n@throws SQLException if a database access error occurs\n@return A {@code Future} which returns the number of rows updated.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner.[Future<Integer>]update(String)", "name": "update", "arg_nums": 1, "params": [{"name": "sql", "type": "String"}], "return_type": "Future<Integer>", "signature": "public Future<Integer> update(final String sql, final Object... params)", "original_string": "    public Future<Integer> update(final String sql, final Object... params) throws SQLException {\n        return executorService.submit(() -> Integer.valueOf(queryRunner.update(sql, params)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java", "class_name": "AsyncQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AsyncQueryRunner.java.AsyncQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Future<Integer>", "classes": []}, "docstring": "\nExecutes the given INSERT, UPDATE, or DELETE SQL statement.  The\n{@code Connection} is retrieved from the {@code DataSource}\nset in the constructor.  This {@code Connection} must be in\nauto-commit mode or the update will not be saved.\n\n@param sql The SQL statement to execute.\n@param params Initializes the PreparedStatement's IN (i.e. '?')\nparameters.\n@throws SQLException if a database access error occurs\n@return A {@code Future} which returns the number of rows updated.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner()", "name": "AbstractQueryRunner", "arg_nums": 0, "params": [], "return_type": "", "signature": "public AbstractQueryRunner()", "original_string": "    public AbstractQueryRunner() {\n        ds = null;\n        this.stmtConfig = null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nDefault constructor, sets pmdKnownBroken to false, ds to null and stmtConfig to null.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(boolean)", "name": "AbstractQueryRunner", "arg_nums": 1, "params": [{"name": "pmdKnownBroken", "type": "boolean"}], "return_type": "", "signature": "public AbstractQueryRunner(final boolean pmdKnownBroken)", "original_string": "    public AbstractQueryRunner(final boolean pmdKnownBroken) {\n        this.pmdKnownBroken = pmdKnownBroken;\n        ds = null;\n        this.stmtConfig = null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor to control the use of {@code ParameterMetaData}.\n\n@param pmdKnownBroken\n           Some drivers don't support\n           {@link ParameterMetaData#getParameterType(int) }; if\n           {@code pmdKnownBroken} is set to true, we won't even try\n           it; if false, we'll try it, and if it breaks, we'll remember\n           not to use it again.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource)", "name": "AbstractQueryRunner", "arg_nums": 1, "params": [{"name": "ds", "type": "DataSource"}], "return_type": "", "signature": "public AbstractQueryRunner(final DataSource ds)", "original_string": "    public AbstractQueryRunner(final DataSource ds) {\n        this.ds = ds;\n        this.stmtConfig = null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor to provide a {@code DataSource}. Methods that do not\ntake a {@code Connection} parameter will retrieve connections from\nthis {@code DataSource}.\n\n@param ds\n           The {@code DataSource} to retrieve connections from.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource,boolean)", "name": "AbstractQueryRunner", "arg_nums": 2, "params": [{"name": "ds", "type": "DataSource"}, {"name": "pmdKnownBroken", "type": "boolean"}], "return_type": "", "signature": "public AbstractQueryRunner(final DataSource ds, final boolean pmdKnownBroken)", "original_string": "    public AbstractQueryRunner(final DataSource ds, final boolean pmdKnownBroken) {\n        this.pmdKnownBroken = pmdKnownBroken;\n        this.ds = ds;\n        this.stmtConfig = null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor to provide a {@code DataSource} and control the use of\n{@code ParameterMetaData}. Methods that do not take a\n{@code Connection} parameter will retrieve connections from this\n{@code DataSource}.\n\n@param ds\n           The {@code DataSource} to retrieve connections from.\n@param pmdKnownBroken\n           Some drivers don't support\n           {@link ParameterMetaData#getParameterType(int) }; if\n           {@code pmdKnownBroken} is set to true, we won't even try\n           it; if false, we'll try it, and if it breaks, we'll remember\n           not to use it again.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource,boolean,StatementConfiguration)", "name": "AbstractQueryRunner", "arg_nums": 3, "params": [{"name": "ds", "type": "DataSource"}, {"name": "pmdKnownBroken", "type": "boolean"}, {"name": "stmtConfig", "type": "StatementConfiguration"}], "return_type": "", "signature": "public AbstractQueryRunner(final DataSource ds, final boolean pmdKnownBroken, final StatementConfiguration stmtConfig)", "original_string": "    public AbstractQueryRunner(final DataSource ds, final boolean pmdKnownBroken, final StatementConfiguration stmtConfig) {\n        this.pmdKnownBroken = pmdKnownBroken;\n        this.ds = ds;\n        this.stmtConfig = stmtConfig;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code DataSource}, a {@code StatementConfiguration}, and\ncontrols the use of {@code ParameterMetaData}.  Methods that do not take a {@code Connection} parameter\nwill retrieve connections from this {@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n@param pmdKnownBroken Some drivers don't support {@link java.sql.ParameterMetaData#getParameterType(int) };\nif {@code pmdKnownBroken} is set to true, we won't even try it; if false, we'll try it,\nand if it breaks, we'll remember not to use it again.\n@param stmtConfig The configuration to apply to statements when they are prepared.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(DataSource,StatementConfiguration)", "name": "AbstractQueryRunner", "arg_nums": 2, "params": [{"name": "ds", "type": "DataSource"}, {"name": "stmtConfig", "type": "StatementConfiguration"}], "return_type": "", "signature": "public AbstractQueryRunner(final DataSource ds, final StatementConfiguration stmtConfig)", "original_string": "    public AbstractQueryRunner(final DataSource ds, final StatementConfiguration stmtConfig) {\n        this.ds = ds;\n        this.stmtConfig = stmtConfig;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code DataSource} to use and a {@code StatementConfiguration}.\n\nMethods that do not take a {@code Connection} parameter will retrieve connections from this\n{@code DataSource}.\n\n@param ds The {@code DataSource} to retrieve connections from.\n@param stmtConfig The configuration to apply to statements when they are prepared.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[]AbstractQueryRunner(StatementConfiguration)", "name": "AbstractQueryRunner", "arg_nums": 1, "params": [{"name": "stmtConfig", "type": "StatementConfiguration"}], "return_type": "", "signature": "public AbstractQueryRunner(final StatementConfiguration stmtConfig)", "original_string": "    public AbstractQueryRunner(final StatementConfiguration stmtConfig) {\n        this.ds = null;\n        this.stmtConfig = stmtConfig;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for QueryRunner that takes a {@code StatementConfiguration} to configure statements when\npreparing them.\n\n@param stmtConfig The configuration to apply to statements when they are prepared.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]close(Connection)", "name": "close", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "protected void close(final Connection conn)", "original_string": "    protected void close(final Connection conn) throws SQLException {\n        DbUtils.close(conn);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code Connection}. This implementation avoids closing if\nnull and does <strong>not</strong> suppress any exceptions. Subclasses\ncan override to provide special handling like logging.\n\n@param conn\n           Connection to close\n@throws SQLException\n            if a database access error occurs\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]close(ResultSet)", "name": "close", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "void", "signature": "protected void close(final ResultSet resultSet)", "original_string": "    protected void close(final ResultSet resultSet) throws SQLException {\n        DbUtils.close(resultSet);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code ResultSet}. This implementation avoids closing if\nnull and does <strong>not</strong> suppress any exceptions. Subclasses\ncan override to provide special handling like logging.\n\n@param resultSet\n           ResultSet to close\n@throws SQLException\n            if a database access error occurs\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]close(Statement)", "name": "close", "arg_nums": 1, "params": [{"name": "stmt", "type": "Statement"}], "return_type": "void", "signature": "protected void close(final Statement stmt)", "original_string": "    protected void close(final Statement stmt) throws SQLException {\n        DbUtils.close(stmt);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClose a {@code Statement}. This implementation avoids closing if\nnull and does <strong>not</strong> suppress any exceptions. Subclasses\ncan override to provide special handling like logging.\n\n@param stmt\n           Statement to close\n@throws SQLException\n            if a database access error occurs\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]closeQuietly(Connection)", "name": "closeQuietly", "arg_nums": 1, "params": [{"name": "conn", "type": "Connection"}], "return_type": "void", "signature": "protected void closeQuietly(final Connection conn)", "original_string": "    protected void closeQuietly(final Connection conn) {\n        DbUtils.closeQuietly(conn);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCalls {@link DbUtils#closeQuietly(Connection)}.\n\n@param conn Connection to close.\n@since 1.8.0\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]closeQuietly(ResultSet)", "name": "closeQuietly", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "void", "signature": "protected void closeQuietly(final ResultSet resultSet)", "original_string": "    protected void closeQuietly(final ResultSet resultSet) {\n        DbUtils.closeQuietly(resultSet);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCalls {@link DbUtils#closeQuietly(ResultSet)}.\n\n@param resultSet ResultSet to close.\n@since 1.8.0\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]closeQuietly(Statement)", "name": "closeQuietly", "arg_nums": 1, "params": [{"name": "statement", "type": "Statement"}], "return_type": "void", "signature": "protected void closeQuietly(final Statement statement)", "original_string": "    protected void closeQuietly(final Statement statement) {\n        DbUtils.closeQuietly(statement);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCalls {@link DbUtils#closeQuietly(Statement)}.\n\n@param statement ResultSet to close.\n@since 1.8.0\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]configureStatement(Statement)", "name": "configureStatement", "arg_nums": 1, "params": [{"name": "stmt", "type": "Statement"}], "return_type": "void", "signature": "private void configureStatement(final Statement stmt)", "original_string": "    private void configureStatement(final Statement stmt) throws SQLException {\n\n        if (stmtConfig != null) {\n            if (stmtConfig.isFetchDirectionSet()) {\n                stmt.setFetchDirection(stmtConfig.getFetchDirection());\n            }\n\n            if (stmtConfig.isFetchSizeSet()) {\n                stmt.setFetchSize(stmtConfig.getFetchSize());\n            }\n\n            if (stmtConfig.isMaxFieldSizeSet()) {\n                stmt.setMaxFieldSize(stmtConfig.getMaxFieldSize());\n            }\n\n            if (stmtConfig.isMaxRowsSet()) {\n                stmt.setMaxRows(stmtConfig.getMaxRows());\n            }\n\n            if (stmtConfig.isQueryTimeoutSet()) {\n                stmt.setQueryTimeout(stmtConfig.getQueryTimeout());\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatement(PreparedStatement)", "name": "fillStatement", "arg_nums": 1, "params": [{"name": "stmt", "type": "PreparedStatement"}], "return_type": "void", "signature": "public void fillStatement(final PreparedStatement stmt, final Object... params)", "original_string": "    public void fillStatement(final PreparedStatement stmt, final Object... params) throws SQLException {\n        ParameterMetaData pmd = null;\n        if (!pmdKnownBroken) {\n            try {\n                pmd = getParameterMetaData(stmt);\n                if (pmd == null) { // can be returned by implementations that don't support the method\n                    pmdKnownBroken = true;\n                }\n            } catch (final SQLFeatureNotSupportedException ex) {\n                pmdKnownBroken = true;\n            }\n            // TODO see DBUTILS-117: would it make sense to catch any other SQLEx types here?\n        }\n        fillStatement(stmt, pmd, params);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nFill the {@code PreparedStatement} replacement parameters with the\ngiven objects.\n\n@param stmt\n           PreparedStatement to fill\n@param params\n           Query replacement parameters; {@code null} is a valid\n           value to pass in.\n@throws SQLException\n            if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatement(PreparedStatement,ParameterMetaData)", "name": "fillStatement", "arg_nums": 2, "params": [{"name": "stmt", "type": "PreparedStatement"}, {"name": "pmd", "type": "ParameterMetaData"}], "return_type": "void", "signature": "public void fillStatement(final PreparedStatement stmt, final ParameterMetaData pmd, final Object... params)", "original_string": "    public void fillStatement(final PreparedStatement stmt, final ParameterMetaData pmd, final Object... params)\n            throws SQLException {\n\n        // check the parameter count, if we can\n        if (!pmdKnownBroken && pmd != null) {\n            final int stmtCount = pmd.getParameterCount();\n            final int paramsCount = params == null ? 0 : params.length;\n\n            if (stmtCount != paramsCount) {\n                throw new SQLException(\"Wrong number of parameters: expected \"\n                        + stmtCount + \", was given \" + paramsCount);\n            }\n        }\n\n        // nothing to do here\n        if (params == null) {\n            return;\n        }\n\n        CallableStatement call = null;\n        if (stmt instanceof CallableStatement) {\n            call = (CallableStatement) stmt;\n        }\n\n        for (int i = 0; i < params.length; i++) {\n            if (params[i] != null) {\n                if (call != null && params[i] instanceof OutParameter) {\n                    ((OutParameter<?>) params[i]).register(call, i + 1);\n                } else {\n                    stmt.setObject(i + 1, params[i]);\n                }\n            } else {\n                // VARCHAR works with many drivers regardless\n                // of the actual column type. Oddly, NULL and\n                // OTHER don't work with Oracle's drivers.\n                int sqlType = Types.VARCHAR;\n                if (!pmdKnownBroken) {\n                    // TODO see DBUTILS-117: does it make sense to catch SQLEx here?\n                    try {\n                        /*\n                         * It's not possible for pmdKnownBroken to change from true to false, (once true, always true) so pmd cannot be null here.\n                         */\n                        sqlType = pmd.getParameterType(i + 1);\n                    } catch (final SQLException e) {\n                        pmdKnownBroken = true;\n                    }\n                }\n                stmt.setNull(i + 1, sqlType);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nFill the {@code PreparedStatement} replacement parameters with the\ngiven objects, and prefetched parameter metadata.\n\n@param stmt\n           PreparedStatement to fill\n@param pmd\n           Prefetched parameter metadata\n@param params\n           Query replacement parameters; {@code null} is a valid\n           value to pass in.\n@throws SQLException\n            if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatementWithBean(PreparedStatement,Object,PropertyDescriptor[])", "name": "fillStatementWithBean", "arg_nums": 3, "params": [{"name": "stmt", "type": "PreparedStatement"}, {"name": "bean", "type": "Object"}, {"name": "properties", "type": "PropertyDescriptor[]"}], "return_type": "void", "signature": "public void fillStatementWithBean(final PreparedStatement stmt, final Object bean,\n            final PropertyDescriptor[] properties)", "original_string": "    public void fillStatementWithBean(final PreparedStatement stmt, final Object bean,\n            final PropertyDescriptor[] properties) throws SQLException {\n        final Object[] params = new Object[properties.length];\n        for (int i = 0; i < properties.length; i++) {\n            final PropertyDescriptor property = properties[i];\n            Object value = null;\n            final Method method = property.getReadMethod();\n            if (method == null) {\n                throw new IllegalArgumentException(\"No read method for bean property \" + bean.getClass() + \" \" + property.getName());\n            }\n            try {\n                value = method.invoke(bean);\n            } catch (final IllegalArgumentException e) {\n                throw new IllegalArgumentException(\"Couldn't invoke method with 0 arguments: \" + method, e);\n            } catch (final InvocationTargetException | IllegalAccessException e) {\n                throw new IllegalArgumentException(\"Couldn't invoke method: \" + method, e);\n            }\n            params[i] = value;\n        }\n        fillStatement(stmt, params);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nFill the {@code PreparedStatement} replacement parameters with the\ngiven object's bean property values.\n\n@param stmt\n           PreparedStatement to fill\n@param bean\n           a JavaBean object\n@param properties\n           an ordered array of properties; this gives the order to insert\n           values in the statement\n@throws SQLException\n            if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]fillStatementWithBean(PreparedStatement,Object)", "name": "fillStatementWithBean", "arg_nums": 2, "params": [{"name": "stmt", "type": "PreparedStatement"}, {"name": "bean", "type": "Object"}], "return_type": "void", "signature": "public void fillStatementWithBean(final PreparedStatement stmt, final Object bean,\n            final String... propertyNames)", "original_string": "    public void fillStatementWithBean(final PreparedStatement stmt, final Object bean,\n            final String... propertyNames) throws SQLException {\n        PropertyDescriptor[] descriptors;\n        try {\n            descriptors = Introspector.getBeanInfo(bean.getClass()).getPropertyDescriptors();\n        } catch (final IntrospectionException e) {\n            throw new IllegalArgumentException(\"Couldn't introspect bean \" + bean.getClass().toString(), e);\n        }\n        final PropertyDescriptor[] sorted = new PropertyDescriptor[propertyNames.length];\n        for (int i = 0; i < propertyNames.length; i++) {\n            final String propertyName = propertyNames[i];\n            if (propertyName == null) {\n                throw new NullPointerException(\"propertyName can't be null: \" + i);\n            }\n            boolean found = false;\n            for (final PropertyDescriptor descriptor : descriptors) {\n                if (propertyName.equals(descriptor.getName())) {\n                    sorted[i] = descriptor;\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                throw new IllegalStateException(\"Couldn't find bean property: \" + bean.getClass() + \" \" + propertyName);\n            }\n        }\n        fillStatementWithBean(stmt, bean, sorted);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nFill the {@code PreparedStatement} replacement parameters with the\ngiven object's bean property values.\n\n@param stmt\n           PreparedStatement to fill\n@param bean\n           A JavaBean object\n@param propertyNames\n           An ordered array of property names (these should match the\n           getters/setters); this gives the order to insert values in the\n           statement\n@throws SQLException\n            If a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[DataSource]getDataSource()", "name": "getDataSource", "arg_nums": 0, "params": [], "return_type": "DataSource", "signature": "public DataSource getDataSource()", "original_string": "    public DataSource getDataSource() {\n        return this.ds;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "DataSource", "classes": []}, "docstring": "\nReturns the {@code DataSource} this runner is using.\n{@code QueryRunner} methods always call this method to get the\n{@code DataSource} so subclasses can provide specialized behavior.\n\n@return DataSource the runner is using\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[ParameterMetaData]getParameterMetaData(PreparedStatement)", "name": "getParameterMetaData", "arg_nums": 1, "params": [{"name": "stmt", "type": "PreparedStatement"}], "return_type": "ParameterMetaData", "signature": "public ParameterMetaData getParameterMetaData(final PreparedStatement stmt)", "original_string": "    public ParameterMetaData getParameterMetaData(final PreparedStatement stmt) throws SQLException {\n        ParameterMetaData pmd = null;\n        if (!pmdKnownBroken) {\n            try {\n                pmd = stmt.getParameterMetaData();\n            } catch (final SQLFeatureNotSupportedException ex) {\n                pmdKnownBroken = true;\n            }\n        }\n        return pmd;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ParameterMetaData", "classes": []}, "docstring": "\nGets the {@code ParameterMetaData} of the prepared statement, if the {@code pmdKnownBroken}\nis set to false.\n\n@param stmt\n           PreparedStatement of which to query the metadata of parameters\n@return the metadata of parameters\n@throws SQLException\n           if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[boolean]isPmdKnownBroken()", "name": "isPmdKnownBroken", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isPmdKnownBroken()", "original_string": "    public boolean isPmdKnownBroken() {\n        return pmdKnownBroken;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nSome drivers don't support\n{@link ParameterMetaData#getParameterType(int) }; if\n{@code pmdKnownBroken} is set to true, we won't even try it; if\nfalse, we'll try it, and if it breaks, we'll remember not to use it\nagain.\n\n@return the flag to skip (or not)\n        {@link ParameterMetaData#getParameterType(int) }\n@since 1.4\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[CallableStatement]prepareCall(Connection,String)", "name": "prepareCall", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}], "return_type": "CallableStatement", "signature": "protected CallableStatement prepareCall(final Connection conn, final String sql)", "original_string": "    protected CallableStatement prepareCall(final Connection conn, final String sql)\n            throws SQLException {\n\n        return conn.prepareCall(sql);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "CallableStatement", "classes": []}, "docstring": "\nFactory method that creates and initializes a\n{@code CallableStatement} object for the given SQL.\n{@code QueryRunner} methods always call this method to prepare\ncallable statements for them. Subclasses can override this method to\nprovide special CallableStatement configuration if needed. This\nimplementation simply calls {@code conn.prepareCall(sql)}.\n\n@param conn\n           The {@code Connection} used to create the\n           {@code CallableStatement}\n@param sql\n           The SQL statement to prepare.\n@return An initialized {@code CallableStatement}.\n@throws SQLException\n            if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[Connection]prepareConnection()", "name": "prepareConnection", "arg_nums": 0, "params": [], "return_type": "Connection", "signature": "protected Connection prepareConnection()", "original_string": "    protected Connection prepareConnection() throws SQLException {\n        if (getDataSource() == null) {\n            throw new SQLException(\n                    \"QueryRunner requires a DataSource to be \"\n                            + \"invoked in this way, or a Connection should be passed in\");\n        }\n        return getDataSource().getConnection();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Connection", "classes": []}, "docstring": "\nFactory method that creates and initializes a {@code Connection}\nobject. {@code QueryRunner} methods always call this method to\nretrieve connections from its DataSource. Subclasses can override this\nmethod to provide special {@code Connection} configuration if\nneeded. This implementation simply calls {@code ds.getConnection()}.\n\n@return An initialized {@code Connection}.\n@throws SQLException\n            if a database access error occurs\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[PreparedStatement]prepareStatement(Connection,String)", "name": "prepareStatement", "arg_nums": 2, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}], "return_type": "PreparedStatement", "signature": "protected PreparedStatement prepareStatement(final Connection conn, final String sql)", "original_string": "    protected PreparedStatement prepareStatement(final Connection conn, final String sql)\n            throws SQLException {\n\n        @SuppressWarnings(\"resource\")\n        final\n        PreparedStatement ps = conn.prepareStatement(sql);\n        try {\n            configureStatement(ps);\n        } catch (final SQLException e) {\n            ps.close();\n            throw e;\n        }\n        return ps;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "PreparedStatement", "classes": []}, "docstring": "\nFactory method that creates and initializes a\n{@code PreparedStatement} object for the given SQL.\n{@code QueryRunner} methods always call this method to prepare\nstatements for them. Subclasses can override this method to provide\nspecial PreparedStatement configuration if needed. This implementation\nsimply calls {@code conn.prepareStatement(sql)}.\n\n@param conn\n           The {@code Connection} used to create the\n           {@code PreparedStatement}\n@param sql\n           The SQL statement to prepare.\n@return An initialized {@code PreparedStatement}.\n@throws SQLException\n            if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[PreparedStatement]prepareStatement(Connection,String,int)", "name": "prepareStatement", "arg_nums": 3, "params": [{"name": "conn", "type": "Connection"}, {"name": "sql", "type": "String"}, {"name": "returnedKeys", "type": "int"}], "return_type": "PreparedStatement", "signature": "protected PreparedStatement prepareStatement(final Connection conn, final String sql, final int returnedKeys)", "original_string": "    protected PreparedStatement prepareStatement(final Connection conn, final String sql, final int returnedKeys)\n            throws SQLException {\n\n        @SuppressWarnings(\"resource\")\n        final\n        PreparedStatement ps = conn.prepareStatement(sql, returnedKeys);\n        try {\n            configureStatement(ps);\n        } catch (final SQLException e) {\n            ps.close();\n            throw e;\n        }\n        return ps;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "PreparedStatement", "classes": []}, "docstring": "\nFactory method that creates and initializes a\n{@code PreparedStatement} object for the given SQL.\n{@code QueryRunner} methods always call this method to prepare\nstatements for them. Subclasses can override this method to provide\nspecial PreparedStatement configuration if needed. This implementation\nsimply calls {@code conn.prepareStatement(sql, returnedKeys)}\nwhich will result in the ability to retrieve the automatically-generated\nkeys from an auto_increment column.\n\n@param conn\n           The {@code Connection} used to create the\n           {@code PreparedStatement}\n@param sql\n           The SQL statement to prepare.\n@param returnedKeys\n           Flag indicating whether to return generated keys or not.\n\n@return An initialized {@code PreparedStatement}.\n@throws SQLException\n            if a database access error occurs\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[void]rethrow(SQLException,String)", "name": "rethrow", "arg_nums": 2, "params": [{"name": "cause", "type": "SQLException"}, {"name": "sql", "type": "String"}], "return_type": "void", "signature": "protected void rethrow(final SQLException cause, final String sql, final Object... params)", "original_string": "    protected void rethrow(final SQLException cause, final String sql, final Object... params)\n            throws SQLException {\n\n        String causeMessage = cause.getMessage();\n        if (causeMessage == null) {\n            causeMessage = \"\";\n        }\n        final StringBuilder msg = new StringBuilder(causeMessage);\n\n        msg.append(\" Query: \");\n        msg.append(sql);\n        msg.append(\" Parameters: \");\n\n        if (params == null) {\n            msg.append(\"[]\");\n        } else {\n            msg.append(Arrays.deepToString(params));\n        }\n\n        final SQLException e = new SQLException(msg.toString(), cause.getSQLState(),\n                cause.getErrorCode());\n        e.setNextException(cause);\n\n        throw e;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nThrows a new exception with a more informative error message.\n\n@param cause\n           The original exception that will be chained to the new\n           exception when it's rethrown.\n\n@param sql\n           The query that was executing when the exception happened.\n\n@param params\n           The query replacement parameters; {@code null} is a valid\n           value to pass in.\n\n@throws SQLException\n            if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner.[ResultSet]wrap(ResultSet)", "name": "wrap", "arg_nums": 1, "params": [{"name": "rs", "type": "ResultSet"}], "return_type": "ResultSet", "signature": "protected ResultSet wrap(final ResultSet rs)", "original_string": "    protected ResultSet wrap(final ResultSet rs) {\n        return rs;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java", "class_name": "AbstractQueryRunner", "class_uri": "src/main/java/org/apache/commons/dbutils/AbstractQueryRunner.java.AbstractQueryRunner", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": "\nWrap the {@code ResultSet} in a decorator before processing it. This\nimplementation returns the {@code ResultSet} it is given without any\ndecoration.\n\n<p>\nOften, the implementation of this method can be done in an anonymous\ninner class like this:\n</p>\n\n<pre>\nQueryRunner run = new QueryRunner() {\n    protected ResultSet wrap(ResultSet rs) {\n        return StringTrimmedResultSet.wrap(rs);\n    }\n};\n</pre>\n\n@param rs\n           The {@code ResultSet} to decorate; never\n           {@code null}.\n@return The {@code ResultSet} wrapped in some decorator.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[Map<String, Object>]createCaseInsensitiveHashMap(int)", "name": "createCaseInsensitiveHashMap", "arg_nums": 1, "params": [{"name": "cols", "type": "int"}], "return_type": "Map<String, Object>", "signature": "protected static Map<String, Object> createCaseInsensitiveHashMap(final int cols)", "original_string": "    protected static Map<String, Object> createCaseInsensitiveHashMap(final int cols) {\n        return new CaseInsensitiveHashMap(cols);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[BasicRowProcessor]instance()", "name": "instance", "arg_nums": 0, "params": [], "return_type": "BasicRowProcessor", "signature": "@Deprecated\n    public static BasicRowProcessor instance()", "original_string": "    @Deprecated\n    public static BasicRowProcessor instance() {\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "@Deprecated\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "BasicRowProcessor", "classes": []}, "docstring": "\nReturns the Singleton instance of this class.\n\n@return The single instance of this class.\n@deprecated Create instances with the constructors instead.  This will\nbe removed in 2.0.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[]BasicRowProcessor()", "name": "BasicRowProcessor", "arg_nums": 0, "params": [], "return_type": "", "signature": "public BasicRowProcessor()", "original_string": "    public BasicRowProcessor() {\n        this(DEFAULT_CONVERTER);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nBasicRowProcessor constructor.  Bean processing defaults to a\nBeanProcessor instance.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[]BasicRowProcessor(BeanProcessor)", "name": "BasicRowProcessor", "arg_nums": 1, "params": [{"name": "convert", "type": "BeanProcessor"}], "return_type": "", "signature": "public BasicRowProcessor(final BeanProcessor convert)", "original_string": "    public BasicRowProcessor(final BeanProcessor convert) {\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nBasicRowProcessor constructor.\n@param convert The BeanProcessor to use when converting columns to\nbean properties.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[Object[]]toArray(ResultSet)", "name": "toArray", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Object[]", "signature": "@Override\n    public Object[] toArray(final ResultSet resultSet)", "original_string": "    @Override\n    public Object[] toArray(final ResultSet resultSet) throws SQLException {\n        final ResultSetMetaData meta = resultSet.getMetaData();\n        final int cols = meta.getColumnCount();\n        final Object[] result = new Object[cols];\n\n        for (int i = 0; i < cols; i++) {\n            result[i] = resultSet.getObject(i + 1);\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nConvert a {@code ResultSet} row into an {@code Object[]}.\nThis implementation copies column values into the array in the same\norder they're returned from the {@code ResultSet}.  Array elements\nwill be set to {@code null} if the column was SQL NULL.\n\n@see org.apache.commons.dbutils.RowProcessor#toArray(java.sql.ResultSet)\n@param resultSet ResultSet that supplies the array data\n@throws SQLException if a database access error occurs\n@return the newly created array\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[T]toBean(ResultSet,Class<? extends T>)", "name": "toBean", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "type", "type": "Class<? extends T>"}], "return_type": "T", "signature": "@Override\n    public <T> T toBean(final ResultSet resultSet, final Class<? extends T> type)", "original_string": "    @Override\n    public <T> T toBean(final ResultSet resultSet, final Class<? extends T> type) throws SQLException {\n        return this.convert.toBean(resultSet, type);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nConvert a {@code ResultSet} row into a JavaBean.  This\nimplementation delegates to a BeanProcessor instance.\n@see org.apache.commons.dbutils.RowProcessor#toBean(java.sql.ResultSet, Class)\n@see org.apache.commons.dbutils.BeanProcessor#toBean(java.sql.ResultSet, Class)\n@param <T> The type of bean to create\n@param resultSet ResultSet that supplies the bean data\n@param type Class from which to create the bean instance\n@throws SQLException if a database access error occurs\n@return the newly created bean\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[List<T>]toBeanList(ResultSet,Class<? extends T>)", "name": "toBeanList", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "type", "type": "Class<? extends T>"}], "return_type": "List<T>", "signature": "@Override\n    public <T> List<T> toBeanList(final ResultSet resultSet, final Class<? extends T> type)", "original_string": "    @Override\n    public <T> List<T> toBeanList(final ResultSet resultSet, final Class<? extends T> type) throws SQLException {\n        return this.convert.toBeanList(resultSet, type);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\nConvert a {@code ResultSet} into a {@code List} of JavaBeans.\nThis implementation delegates to a BeanProcessor instance.\n@see org.apache.commons.dbutils.RowProcessor#toBeanList(java.sql.ResultSet, Class)\n@see org.apache.commons.dbutils.BeanProcessor#toBeanList(java.sql.ResultSet, Class)\n@param <T> The type of bean to create\n@param resultSet ResultSet that supplies the bean data\n@param type Class from which to create the bean instance\n@throws SQLException if a database access error occurs\n@return A {@code List} of beans with the given type in the order\nthey were returned by the {@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor.[Map<String, Object>]toMap(ResultSet)", "name": "toMap", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Map<String, Object>", "signature": "@Override\n    public Map<String, Object> toMap(final ResultSet resultSet)", "original_string": "    @Override\n    public Map<String, Object> toMap(final ResultSet resultSet) throws SQLException {\n        final ResultSetMetaData rsmd = resultSet.getMetaData();\n        final int cols = rsmd.getColumnCount();\n        final Map<String, Object> result = createCaseInsensitiveHashMap(cols);\n\n        for (int i = 1; i <= cols; i++) {\n            String propKey = rsmd.getColumnLabel(i);\n            if (null == propKey || 0 == propKey.length()) {\n              propKey = rsmd.getColumnName(i);\n            }\n            if (null == propKey || 0 == propKey.length()) {\n              // The column index can't be null\n              propKey = Integer.toString(i);\n            }\n            result.put(propKey, resultSet.getObject(i));\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java", "class_name": "BasicRowProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BasicRowProcessor.java.BasicRowProcessor", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": "\nConvert a {@code ResultSet} row into a {@code Map}.\n\n<p>\nThis implementation returns a {@code Map} with case insensitive column names as keys. Calls to\n{@code map.get(\"COL\")} and {@code map.get(\"col\")} return the same value. Furthermore this implementation\nwill return an ordered map, that preserves the ordering of the columns in the ResultSet, so that iterating over\nthe entry set of the returned map will return the first column of the ResultSet, then the second and so forth.\n</p>\n\n@param resultSet ResultSet that supplies the map data\n@return the newly created Map\n@throws SQLException if a database access error occurs\n@see org.apache.commons.dbutils.RowProcessor#toMap(java.sql.ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/GenerousBeanProcessor.java.GenerousBeanProcessor.[]GenerousBeanProcessor()", "name": "GenerousBeanProcessor", "arg_nums": 0, "params": [], "return_type": "", "signature": "public GenerousBeanProcessor()", "original_string": "    public GenerousBeanProcessor() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/GenerousBeanProcessor.java", "class_name": "GenerousBeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/GenerousBeanProcessor.java.GenerousBeanProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nDefault constructor.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/GenerousBeanProcessor.java.GenerousBeanProcessor.[int[]]mapColumnsToProperties(ResultSetMetaData,PropertyDescriptor[])", "name": "mapColumnsToProperties", "arg_nums": 2, "params": [{"name": "rsmd", "type": "ResultSetMetaData"}, {"name": "props", "type": "PropertyDescriptor[]"}], "return_type": "int[]", "signature": "@Override\n    protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,\n            final PropertyDescriptor[] props)", "original_string": "    @Override\n    protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,\n            final PropertyDescriptor[] props) throws SQLException {\n\n        final int cols = rsmd.getColumnCount();\n        final int[] columnToProperty = new int[cols + 1];\n        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);\n\n        for (int col = 1; col <= cols; col++) {\n            String columnName = rsmd.getColumnLabel(col);\n\n            if (null == columnName || 0 == columnName.length()) {\n                columnName = rsmd.getColumnName(col);\n            }\n\n            final String generousColumnName = columnName\n                    .replace(\"_\", \"\")   // more idiomatic to Java\n                    .replace(\" \", \"\");  // can't have spaces in property names\n\n            for (int i = 0; i < props.length; i++) {\n                final String propName = props[i].getName();\n\n                // see if either the column name, or the generous one matches\n                if (columnName.equalsIgnoreCase(propName) ||\n                        generousColumnName.equalsIgnoreCase(propName)) {\n                    columnToProperty[col] = i;\n                    break;\n                }\n            }\n        }\n\n        return columnToProperty;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/GenerousBeanProcessor.java", "class_name": "GenerousBeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/GenerousBeanProcessor.java.GenerousBeanProcessor", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int[]", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[]BeanProcessor()", "name": "BeanProcessor", "arg_nums": 0, "params": [], "return_type": "", "signature": "public BeanProcessor()", "original_string": "    public BeanProcessor() {\n        this(new HashMap<>());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for BeanProcessor.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[]BeanProcessor(Map<String, String>)", "name": "BeanProcessor", "arg_nums": 1, "params": [{"name": "columnToPropertyOverrides", "type": "Map<String, String>"}], "return_type": "", "signature": "public BeanProcessor(final Map<String, String> columnToPropertyOverrides)", "original_string": "    public BeanProcessor(final Map<String, String> columnToPropertyOverrides) {\n        if (columnToPropertyOverrides == null) {\n            throw new IllegalArgumentException(\"columnToPropertyOverrides map cannot be null\");\n        }\n        this.columnToPropertyOverrides = columnToPropertyOverrides;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructor for BeanProcessor configured with column to property name overrides.\n\n@param columnToPropertyOverrides ResultSet column to bean property name overrides\n@since 1.5\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[void]callSetter(Object,PropertyDescriptor,Object)", "name": "callSetter", "arg_nums": 3, "params": [{"name": "target", "type": "Object"}, {"name": "prop", "type": "PropertyDescriptor"}, {"name": "value", "type": "Object"}], "return_type": "void", "signature": "private void callSetter(final Object target, final PropertyDescriptor prop, Object value)", "original_string": "    private void callSetter(final Object target, final PropertyDescriptor prop, Object value)\n            throws SQLException {\n\n        final Method setter = getWriteMethod(target, prop, value);\n\n        if (setter == null || setter.getParameterTypes().length != 1) {\n            return;\n        }\n\n        try {\n            final Class<?> firstParam = setter.getParameterTypes()[0];\n            for (final PropertyHandler handler : PROPERTY_HANDLERS) {\n                if (handler.match(firstParam, value)) {\n                    value = handler.apply(firstParam, value);\n                    break;\n                }\n            }\n\n            // Don't call setter if the value object isn't the right type\n            if (!isCompatibleType(value, firstParam)) {\n                throw new SQLException(\n                        \"Cannot set \" + prop.getName() + \": incompatible types, cannot convert \" + value.getClass().getName() + \" to \" + firstParam.getName());\n                // value cannot be null here because isCompatibleType allows null\n            }\n            setter.invoke(target, value);\n\n        } catch (final IllegalArgumentException | IllegalAccessException | InvocationTargetException e) {\n            throw new SQLException(\"Cannot set \" + prop.getName() + \": \" + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCalls the setter method on the target object for the given property.\nIf no setter method exists for the property, this method does nothing.\n@param target The object to set the property on.\n@param prop The property to set.\n@param value The value to pass into the setter.\n@throws SQLException if an error occurs setting the property.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[T]createBean(ResultSet,Class<T>,PropertyDescriptor[],int[])", "name": "createBean", "arg_nums": 4, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "type", "type": "Class<T>"}, {"name": "props", "type": "PropertyDescriptor[]"}, {"name": "columnToProperty", "type": "int[]"}], "return_type": "T", "signature": "private <T> T createBean(final ResultSet resultSet, final Class<T> type, final PropertyDescriptor[] props, final int[] columnToProperty)", "original_string": "    private <T> T createBean(final ResultSet resultSet, final Class<T> type, final PropertyDescriptor[] props, final int[] columnToProperty)\n            throws SQLException {\n        return populateBean(resultSet, this.newInstance(type), props, columnToProperty);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nCreates a new object and initializes its fields from the ResultSet.\n@param <T> The type of bean to create\n@param resultSet The result set.\n@param type The bean type (the return type of the object).\n@param props The property descriptors.\n@param columnToProperty The column indices in the result set.\n@return An initialized object.\n@throws SQLException if a database error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[void]finalize()", "name": "finalize", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    protected final void finalize()", "original_string": "    @Override\n    protected final void finalize() {\n        // SpotBugs CT_CONSTRUCTOR_THROW\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "@Override\n    protected final", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected", "final"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Does nothing."}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[Method]getWriteMethod(Object,PropertyDescriptor,Object)", "name": "getWriteMethod", "arg_nums": 3, "params": [{"name": "target", "type": "Object"}, {"name": "prop", "type": "PropertyDescriptor"}, {"name": "value", "type": "Object"}], "return_type": "Method", "signature": "protected Method getWriteMethod(final Object target, final PropertyDescriptor prop, final Object value)", "original_string": "    protected Method getWriteMethod(final Object target, final PropertyDescriptor prop, final Object value) {\n        return prop.getWriteMethod();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Method", "classes": []}, "docstring": "\nGets the write method to use when setting {@code value} to the {@code target}.\n\n@param target Object where the write method will be called.\n@param prop   BeanUtils information.\n@param value  The value that will be passed to the write method.\n@return The {@link java.lang.reflect.Method} to call on {@code target} to write {@code value} or {@code null} if\n        there is no suitable write method.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[boolean]isCompatibleType(Object,Class<?>)", "name": "isCompatibleType", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "type", "type": "Class<?>"}], "return_type": "boolean", "signature": "private boolean isCompatibleType(final Object value, final Class<?> type)", "original_string": "    private boolean isCompatibleType(final Object value, final Class<?> type) {\n        // Do object check first, then primitives\n        return value == null || type.isInstance(value) || matchesPrimitive(type, value.getClass());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nResultSet.getObject() returns an Integer object for an INT column.  The\nsetter method for the property might take an Integer or a primitive int.\nThis method returns true if the value can be successfully passed into\nthe setter method.  Remember, Method.invoke() handles the unwrapping\nof Integer into an int.\n\n@param value The value to be passed into the setter method.\n@param type The setter's parameter type (non-null)\n@return boolean True if the value is compatible (null => true)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[int[]]mapColumnsToProperties(ResultSetMetaData,PropertyDescriptor[])", "name": "mapColumnsToProperties", "arg_nums": 2, "params": [{"name": "rsmd", "type": "ResultSetMetaData"}, {"name": "props", "type": "PropertyDescriptor[]"}], "return_type": "int[]", "signature": "protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,\n            final PropertyDescriptor[] props)", "original_string": "    protected int[] mapColumnsToProperties(final ResultSetMetaData rsmd,\n            final PropertyDescriptor[] props) throws SQLException {\n\n        final int cols = rsmd.getColumnCount();\n        final int[] columnToProperty = new int[cols + 1];\n        Arrays.fill(columnToProperty, PROPERTY_NOT_FOUND);\n\n        for (int col = 1; col <= cols; col++) {\n            String columnName = rsmd.getColumnLabel(col);\n            if (null == columnName || 0 == columnName.length()) {\n              columnName = rsmd.getColumnName(col);\n            }\n            String propertyName = columnToPropertyOverrides.get(columnName);\n            if (propertyName == null) {\n                propertyName = columnName;\n            }\n            if (propertyName == null) {\n                propertyName = Integer.toString(col);\n            }\n\n            for (int i = 0; i < props.length; i++) {\n                final PropertyDescriptor prop = props[i];\n                final Method reader = prop.getReadMethod();\n\n                // Check for @Column annotations as explicit marks\n                final Column column;\n                if (reader != null) {\n                    column = reader.getAnnotation(Column.class);\n                } else {\n                    column = null;\n                }\n\n                final String propertyColumnName;\n                if (column != null) {\n                    propertyColumnName = column.name();\n                } else {\n                    propertyColumnName = prop.getName();\n                }\n                if (propertyName.equalsIgnoreCase(propertyColumnName)) {\n                    columnToProperty[col] = i;\n                    break;\n                }\n            }\n        }\n\n        return columnToProperty;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int[]", "classes": []}, "docstring": "\nThe positions in the returned array represent column numbers.  The\nvalues stored at each position represent the index in the\n{@code PropertyDescriptor[]} for the bean property that matches\nthe column name.  If no bean property was found for a column, the\nposition is set to {@code PROPERTY_NOT_FOUND}.\n\n@param rsmd The {@code ResultSetMetaData} containing column\ninformation.\n\n@param props The bean property descriptors.\n\n@throws SQLException if a database access error occurs\n\n@return An int[] with column index to property index mappings.  The 0th\nelement is meaningless because JDBC column indexing starts at 1.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[boolean]matchesPrimitive(Class<?>,Class<?>)", "name": "matchesPrimitive", "arg_nums": 2, "params": [{"name": "targetType", "type": "Class<?>"}, {"name": "valueType", "type": "Class<?>"}], "return_type": "boolean", "signature": "private boolean matchesPrimitive(final Class<?> targetType, final Class<?> valueType)", "original_string": "    private boolean matchesPrimitive(final Class<?> targetType, final Class<?> valueType) {\n        if (!targetType.isPrimitive()) {\n            return false;\n        }\n\n        try {\n            // see if there is a \"TYPE\" field.  This is present for primitive wrappers.\n            final Field typeField = valueType.getField(\"TYPE\");\n            final Object primitiveValueType = typeField.get(valueType);\n\n            if (targetType == primitiveValueType) {\n                return true;\n            }\n        } catch (final NoSuchFieldException | IllegalAccessException ignored) {\n            // an inaccessible TYPE field is a good sign that we're not working with a primitive wrapper.\n            // nothing to do.  we can't match for compatibility\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck whether a value is of the same primitive type as {@code targetType}.\n\n@param targetType The primitive type to target.\n@param valueType The value to match to the primitive type.\n@return Whether {@code valueType} can be coerced (e.g. autoboxed) into {@code targetType}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[T]newInstance(Class<T>)", "name": "newInstance", "arg_nums": 1, "params": [{"name": "c", "type": "Class<T>"}], "return_type": "T", "signature": "protected <T> T newInstance(final Class<T> c)", "original_string": "    protected <T> T newInstance(final Class<T> c) throws SQLException {\n        try {\n            return c.getDeclaredConstructor().newInstance();\n\n        } catch (final IllegalAccessException | InstantiationException | InvocationTargetException |\n            NoSuchMethodException e) {\n            throw new SQLException(\"Cannot create \" + c.getName() + \": \" + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nFactory method that returns a new instance of the given Class.  This\nis called at the start of the bean creation process and may be\noverridden to provide custom behavior like returning a cached bean\ninstance.\n@param <T> The type of object to create\n@param c The Class to create an object from.\n@return A newly created object of the Class.\n@throws SQLException if creation failed.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[T]populateBean(ResultSet,T)", "name": "populateBean", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "bean", "type": "T"}], "return_type": "T", "signature": "public <T> T populateBean(final ResultSet resultSet, final T bean)", "original_string": "    public <T> T populateBean(final ResultSet resultSet, final T bean) throws SQLException {\n        final PropertyDescriptor[] props = propertyDescriptors(bean.getClass());\n        final ResultSetMetaData rsmd = resultSet.getMetaData();\n        final int[] columnToProperty = mapColumnsToProperties(rsmd, props);\n\n        return populateBean(resultSet, bean, props, columnToProperty);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nInitializes the fields of the provided bean from the ResultSet.\n@param <T> The type of bean\n@param resultSet The result set.\n@param bean The bean to be populated.\n@return An initialized object.\n@throws SQLException if a database error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[T]populateBean(ResultSet,T,PropertyDescriptor[],int[])", "name": "populateBean", "arg_nums": 4, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "bean", "type": "T"}, {"name": "props", "type": "PropertyDescriptor[]"}, {"name": "columnToProperty", "type": "int[]"}], "return_type": "T", "signature": "private <T> T populateBean(final ResultSet resultSet, final T bean,\n            final PropertyDescriptor[] props, final int[] columnToProperty)", "original_string": "    private <T> T populateBean(final ResultSet resultSet, final T bean,\n            final PropertyDescriptor[] props, final int[] columnToProperty)\n            throws SQLException {\n\n        for (int i = 1; i < columnToProperty.length; i++) {\n\n            if (columnToProperty[i] == PROPERTY_NOT_FOUND) {\n                continue;\n            }\n\n            final PropertyDescriptor prop = props[columnToProperty[i]];\n            final Class<?> propType = prop.getPropertyType();\n\n            Object value = null;\n            if (propType != null) {\n                value = processColumn(resultSet, i, propType);\n\n                if (value == null && propType.isPrimitive()) {\n                    value = PRIMITIVE_DEFAULTS.get(propType);\n                }\n            }\n\n            callSetter(bean, prop, value);\n        }\n\n        return bean;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nThis method populates a bean from the ResultSet based upon the underlying meta-data.\n\n@param <T> The type of bean\n@param resultSet The result set.\n@param bean The bean to be populated.\n@param props The property descriptors.\n@param columnToProperty The column indices in the result set.\n@return An initialized object.\n@throws SQLException if a database error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[Object]processColumn(ResultSet,int,Class<?>)", "name": "processColumn", "arg_nums": 3, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "index", "type": "int"}, {"name": "propType", "type": "Class<?>"}], "return_type": "Object", "signature": "protected Object processColumn(final ResultSet resultSet, final int index, final Class<?> propType)", "original_string": "    protected Object processColumn(final ResultSet resultSet, final int index, final Class<?> propType)\n        throws SQLException {\n\n        Object retval = resultSet.getObject(index);\n\n        if ( !propType.isPrimitive() && retval == null ) {\n            return null;\n        }\n\n        for (final ColumnHandler<?> handler : COLUMN_HANDLERS) {\n            if (handler.match(propType)) {\n                retval = handler.apply(resultSet, index);\n                break;\n            }\n        }\n\n        return retval;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nConvert a {@code ResultSet} column into an object.  Simple\nimplementations could just call {@code rs.getObject(index)} while\nmore complex implementations could perform type manipulation to match\nthe column's type to the bean property type.\n\n<p>\nThis implementation calls the appropriate {@code ResultSet} getter\nmethod for the given property type to perform the type conversion.  If\nthe property type doesn't match one of the supported\n{@code ResultSet} types, {@code getObject} is called.\n</p>\n\n@param resultSet The {@code ResultSet} currently being processed.  It is\npositioned on a valid row before being passed into this method.\n\n@param index The current column index being processed.\n\n@param propType The bean property type that this column needs to be\nconverted into.\n\n@throws SQLException if a database access error occurs\n\n@return The object from the {@code ResultSet} at the given column\nindex after optional type processing or {@code null} if the column\nvalue was SQL NULL.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[PropertyDescriptor[]]propertyDescriptors(Class<?>)", "name": "propertyDescriptors", "arg_nums": 1, "params": [{"name": "c", "type": "Class<?>"}], "return_type": "PropertyDescriptor[]", "signature": "private PropertyDescriptor[] propertyDescriptors(final Class<?> c)", "original_string": "    private PropertyDescriptor[] propertyDescriptors(final Class<?> c)\n        throws SQLException {\n        // Introspector caches BeanInfo classes for better performance\n        BeanInfo beanInfo = null;\n        try {\n            beanInfo = Introspector.getBeanInfo(c);\n\n        } catch (final IntrospectionException e) {\n            throw new SQLException(\n                \"Bean introspection failed: \" + e.getMessage());\n        }\n\n        return beanInfo.getPropertyDescriptors();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "PropertyDescriptor[]", "classes": []}, "docstring": "\nReturns a PropertyDescriptor[] for the given Class.\n\n@param c The Class to retrieve PropertyDescriptors for.\n@return A PropertyDescriptor[] describing the Class.\n@throws SQLException if introspection failed.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[T]toBean(ResultSet,Class<? extends T>)", "name": "toBean", "arg_nums": 2, "params": [{"name": "rs", "type": "ResultSet"}, {"name": "type", "type": "Class<? extends T>"}], "return_type": "T", "signature": "public <T> T toBean(final ResultSet rs, final Class<? extends T> type)", "original_string": "    public <T> T toBean(final ResultSet rs, final Class<? extends T> type) throws SQLException {\n        final T bean = this.newInstance(type);\n        return this.populateBean(rs, bean);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nConvert a {@code ResultSet} row into a JavaBean.  This\nimplementation uses reflection and {@code BeanInfo} classes to\nmatch column names to bean property names.  Properties are matched to\ncolumns based on several factors:\n&lt;br/&gt;\n&lt;ol&gt;\n    &lt;li&gt;\n    The class has a writable property with the same name as a column.\n    The name comparison is case insensitive.\n    &lt;/li&gt;\n\n    &lt;li&gt;\n    The column type can be converted to the property's set method\n    parameter type with a ResultSet.get* method.  If the conversion fails\n    (ie. the property was an int and the column was a Timestamp) an\n    SQLException is thrown.\n    &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;\nPrimitive bean properties are set to their defaults when SQL NULL is\nreturned from the {@code ResultSet}.  Numeric fields are set to 0\nand booleans are set to false.  Object bean properties are set to\n{@code null} when SQL NULL is returned.  This is the same behavior\nas the {@code ResultSet} get* methods.\n&lt;/p&gt;\n@param <T> The type of bean to create\n@param rs ResultSet that supplies the bean data\n@param type Class from which to create the bean instance\n@throws SQLException if a database access error occurs\n@return the newly created bean\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor.[List<T>]toBeanList(ResultSet,Class<? extends T>)", "name": "toBeanList", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "type", "type": "Class<? extends T>"}], "return_type": "List<T>", "signature": "public <T> List<T> toBeanList(final ResultSet resultSet, final Class<? extends T> type)", "original_string": "    public <T> List<T> toBeanList(final ResultSet resultSet, final Class<? extends T> type) throws SQLException {\n        final List<T> results = new ArrayList<>();\n        if (!resultSet.next()) {\n            return results;\n        }\n        final PropertyDescriptor[] props = propertyDescriptors(type);\n        final ResultSetMetaData rsmd = resultSet.getMetaData();\n        final int[] columnToProperty = mapColumnsToProperties(rsmd, props);\n        do {\n            results.add(this.createBean(resultSet, type, props, columnToProperty));\n        } while (resultSet.next()); // NOPMD False positive CheckResultSet\n        return results;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java", "class_name": "BeanProcessor", "class_uri": "src/main/java/org/apache/commons/dbutils/BeanProcessor.java.BeanProcessor", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\nConvert a {@code ResultSet} into a {@code List} of JavaBeans.\nThis implementation uses reflection and {@code BeanInfo} classes to\nmatch column names to bean property names. Properties are matched to\ncolumns based on several factors:\n&lt;br/&gt;\n&lt;ol&gt;\n    &lt;li&gt;\n    The class has a writable property with the same name as a column.\n    The name comparison is case insensitive.\n    &lt;/li&gt;\n\n    &lt;li&gt;\n    The column type can be converted to the property's set method\n    parameter type with a ResultSet.get* method.  If the conversion fails\n    (ie. the property was an int and the column was a Timestamp) an\n    SQLException is thrown.\n    &lt;/li&gt;\n&lt;/ol&gt;\n\n<p>\nPrimitive bean properties are set to their defaults when SQL NULL is\nreturned from the {@code ResultSet}.  Numeric fields are set to 0\nand booleans are set to false.  Object bean properties are set to\n{@code null} when SQL NULL is returned.  This is the same behavior\nas the {@code ResultSet} get* methods.\n&lt;/p&gt;\n@param <T> The type of bean to create\n@param resultSet ResultSet that supplies the bean data\n@param type Class from which to create the bean instance\n@throws SQLException if a database access error occurs\n@return the newly created List of beans\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[]OutParameter(int,Class<T>)", "name": "OutParameter", "arg_nums": 2, "params": [{"name": "sqlType", "type": "int"}, {"name": "javaType", "type": "Class<T>"}], "return_type": "", "signature": "public OutParameter(final int sqlType, final Class<T> javaType)", "original_string": "    public OutParameter(final int sqlType, final Class<T> javaType) {\n        this.sqlType = sqlType;\n        this.javaType = javaType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an {@code OutParameter} for the given JDBC SQL type and\nJava type.\n@param sqlType the JDBC SQL type of the parameter as in\n{@link java.sql.Types}.\n@param javaType the Java class of the parameter value, cast compatible\nwith the type returned by {@code CallableStatement.getObject(int)}\nfor the JDBC type given by {@code sqlType}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[]OutParameter(int,Class<T>,T)", "name": "OutParameter", "arg_nums": 3, "params": [{"name": "sqlType", "type": "int"}, {"name": "javaType", "type": "Class<T>"}, {"name": "value", "type": "T"}], "return_type": "", "signature": "public OutParameter(final int sqlType, final Class<T> javaType, final T value)", "original_string": "    public OutParameter(final int sqlType, final Class<T> javaType, final T value) {\n        this.sqlType = sqlType;\n        this.javaType = javaType;\n        this.value = value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an {@code OutParameter} for the given JDBC SQL type and\nJava type and with the given value.  The parameter will be treated as an\nINOUT parameter if the value is null.\n@param sqlType the JDBC SQL type of the parameter as in\n{@link java.sql.Types}.\n@param javaType the Java class of the parameter value, cast compatible\nwith the type returned by {@code CallableStatement.getObject(int)}\nfor the JDBC type given by {@code sqlType}.\n@param value the IN value of the parameter\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[Class<T>]getJavaType()", "name": "getJavaType", "arg_nums": 0, "params": [], "return_type": "Class<T>", "signature": "public Class<T> getJavaType()", "original_string": "    public Class<T> getJavaType() {\n        return javaType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Class<T>", "classes": []}, "docstring": "\nGets the Java class for this OUT parameter.\n@return the Java class for this OUT parameter.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[int]getSqlType()", "name": "getSqlType", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getSqlType()", "original_string": "    public int getSqlType() {\n        return sqlType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the JDBC SQL type for this OUT parameter.\n@return the JDBC SQL type for this OUT parameter.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[T]getValue()", "name": "getValue", "arg_nums": 0, "params": [], "return_type": "T", "signature": "public T getValue()", "original_string": "    public T getValue() {\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nGets the value of the OUT parameter.  After the stored procedure has\nbeen executed, the value is the value returned via this parameter.\n@return the value of the OUT parameter.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[void]register(CallableStatement,int)", "name": "register", "arg_nums": 2, "params": [{"name": "stmt", "type": "CallableStatement"}, {"name": "index", "type": "int"}], "return_type": "void", "signature": "void register(final CallableStatement stmt, final int index)", "original_string": "    void register(final CallableStatement stmt, final int index) throws SQLException {\n        stmt.registerOutParameter(index, sqlType);\n        if (value != null) {\n            stmt.setObject(index, value);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSet up the given statement by registering an OUT parameter at the given\nindex using the {@code sqlType} and {@code value} of this\n{@code OutParameter}.  If the value is not null, the parameter is\ntreated like an INOUT parameter and the value is set on the statement.\n@param stmt the statement the parameter should register on.\n@param index the (1-based) index of the parameter.\n@throws SQLException if the parameter could not be registered, or if the\nvalue of the parameter could not be set.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[void]setValue(CallableStatement,int)", "name": "setValue", "arg_nums": 2, "params": [{"name": "stmt", "type": "CallableStatement"}, {"name": "index", "type": "int"}], "return_type": "void", "signature": "void setValue(final CallableStatement stmt, final int index)", "original_string": "    void setValue(final CallableStatement stmt, final int index) throws SQLException {\n        value = javaType.cast(stmt.getObject(index));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSet the value using the return value of the parameter an the given index\nfrom the given {@code CallableStatement}.\n@param stmt the already executed statement\n@param index the (1-based) index of the parameter\n@throws SQLException when the value could not be retrieved from the\nstatement.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[void]setValue(T)", "name": "setValue", "arg_nums": 1, "params": [{"name": "value", "type": "T"}], "return_type": "void", "signature": "public void setValue(final T value)", "original_string": "    public void setValue(final T value) {\n        this.value = value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSet the value of the OUT parameter.  If the value is not null when the\nstored procedure is executed, then the parameter will be treated like an\nINOUT parameter.\n@param value the new value for the parameter.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return \"OutParameter{\" + \"sqlType=\" + sqlType + \", javaType=\"\n            + javaType + \", value=\" + value + '}';\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/OutParameter.java", "class_name": "OutParameter", "class_uri": "src/main/java/org/apache/commons/dbutils/OutParameter.java.OutParameter", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/ResultSetHandler.java.ResultSetHandler.[T]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "T", "signature": "T handle(ResultSet resultSet)", "original_string": "    T handle(ResultSet resultSet) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/ResultSetHandler.java", "class_name": "ResultSetHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/ResultSetHandler.java.ResultSetHandler", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nTurn the {@code ResultSet} into an Object.\n\n@param resultSet The {@code ResultSet} to handle.  It has not been touched\nbefore being passed to this method.\n\n@return An Object initialized with {@code ResultSet} data. It is\nlegal for implementations to return {@code null} if the\n{@code ResultSet} contained 0 rows.\n\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java.MapHandler.[]MapHandler()", "name": "MapHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public MapHandler()", "original_string": "    public MapHandler() {\n        this(ArrayHandler.ROW_PROCESSOR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java", "class_name": "MapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java.MapHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of MapHandler using a\n{@code BasicRowProcessor} for conversion.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java.MapHandler.[]MapHandler(RowProcessor)", "name": "MapHandler", "arg_nums": 1, "params": [{"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public MapHandler(final RowProcessor convert)", "original_string": "    public MapHandler(final RowProcessor convert) {\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java", "class_name": "MapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java.MapHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of MapHandler.\n\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into Maps.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java.MapHandler.[Map<String, Object>]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Map<String, Object>", "signature": "@Override\n    public Map<String, Object> handle(final ResultSet resultSet)", "original_string": "    @Override\n    public Map<String, Object> handle(final ResultSet resultSet) throws SQLException {\n        return resultSet.next() ? this.convert.toMap(resultSet) : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java", "class_name": "MapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/MapHandler.java.MapHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": "\nConverts the first row in the {@code ResultSet} into a\n{@code Map}.\n@param resultSet {@code ResultSet} to process.\n@return A {@code Map} with the values from the first row or\n{@code null} if there are no rows in the {@code ResultSet}.\n\n@throws SQLException if a database access error occurs\n\n@see org.apache.commons.dbutils.ResultSetHandler#handle(java.sql.ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler.[]BeanMapHandler(Class<V>)", "name": "BeanMapHandler", "arg_nums": 1, "params": [{"name": "type", "type": "Class<V>"}], "return_type": "", "signature": "public BeanMapHandler(final Class<V> type)", "original_string": "    public BeanMapHandler(final Class<V> type) {\n        this(type, ArrayHandler.ROW_PROCESSOR, 1, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java", "class_name": "BeanMapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanMapHandler. The value of the first column\nof each row will be a key in the Map.\n\n@param type\n           The Class that objects returned from {@code createRow()}\n           are created from.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler.[]BeanMapHandler(Class<V>,int)", "name": "BeanMapHandler", "arg_nums": 2, "params": [{"name": "type", "type": "Class<V>"}, {"name": "columnIndex", "type": "int"}], "return_type": "", "signature": "public BeanMapHandler(final Class<V> type, final int columnIndex)", "original_string": "    public BeanMapHandler(final Class<V> type, final int columnIndex) {\n        this(type, ArrayHandler.ROW_PROCESSOR, columnIndex, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java", "class_name": "BeanMapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanMapHandler.\n\n@param type\n           The Class that objects returned from {@code createRow()}\n           are created from.\n@param columnIndex\n           The values to use as keys in the Map are retrieved from the\n           column at this index.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler.[]BeanMapHandler(Class<V>,RowProcessor)", "name": "BeanMapHandler", "arg_nums": 2, "params": [{"name": "type", "type": "Class<V>"}, {"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public BeanMapHandler(final Class<V> type, final RowProcessor convert)", "original_string": "    public BeanMapHandler(final Class<V> type, final RowProcessor convert) {\n        this(type, convert, 1, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java", "class_name": "BeanMapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanMapHandler. The value of the first column\nof each row will be a key in the Map.\n\n@param type\n           The Class that objects returned from {@code createRow()}\n           are created from.\n@param convert\n           The {@code RowProcessor} implementation to use when\n           converting rows into Beans\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler.[]BeanMapHandler(Class<V>,RowProcessor,int,String)", "name": "BeanMapHandler", "arg_nums": 4, "params": [{"name": "type", "type": "Class<V>"}, {"name": "convert", "type": "RowProcessor"}, {"name": "columnIndex", "type": "int"}, {"name": "columnName", "type": "String"}], "return_type": "", "signature": "private BeanMapHandler(final Class<V> type, final RowProcessor convert,\n            final int columnIndex, final String columnName)", "original_string": "    private BeanMapHandler(final Class<V> type, final RowProcessor convert,\n            final int columnIndex, final String columnName) {\n        this.type = type;\n        this.convert = convert;\n        this.columnIndex = columnIndex;\n        this.columnName = columnName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java", "class_name": "BeanMapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nPrivate Helper\n\n@param convert\n           The {@code RowProcessor} implementation to use when\n           converting rows into Beans\n@param columnIndex\n           The values to use as keys in the Map are retrieved from the\n           column at this index.\n@param columnName\n           The values to use as keys in the Map are retrieved from the\n           column with this name.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler.[]BeanMapHandler(Class<V>,String)", "name": "BeanMapHandler", "arg_nums": 2, "params": [{"name": "type", "type": "Class<V>"}, {"name": "columnName", "type": "String"}], "return_type": "", "signature": "public BeanMapHandler(final Class<V> type, final String columnName)", "original_string": "    public BeanMapHandler(final Class<V> type, final String columnName) {\n        this(type, ArrayHandler.ROW_PROCESSOR, 1, columnName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java", "class_name": "BeanMapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanMapHandler.\n\n@param type\n           The Class that objects returned from {@code createRow()}\n           are created from.\n@param columnName\n           The values to use as keys in the Map are retrieved from the\n           column with this name.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler.[K]createKey(ResultSet)", "name": "createKey", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "K", "signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected K createKey(final ResultSet resultSet)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected K createKey(final ResultSet resultSet) throws SQLException {\n        return columnName == null ?\n               (K) resultSet.getObject(columnIndex) :\n               (K) resultSet.getObject(columnName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java", "class_name": "BeanMapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": [], "return_type": "K", "classes": []}, "docstring": " so getObject will return the appropriate type and the cast will succeed."}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler.[V]createRow(ResultSet)", "name": "createRow", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "V", "signature": "@Override\n    protected V createRow(final ResultSet resultSet)", "original_string": "    @Override\n    protected V createRow(final ResultSet resultSet) throws SQLException {\n        return this.convert.toBean(resultSet, type);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java", "class_name": "BeanMapHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanMapHandler.java.BeanMapHandler", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "V", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java.ArrayHandler.[]ArrayHandler()", "name": "ArrayHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ArrayHandler()", "original_string": "    public ArrayHandler() {\n        this(ROW_PROCESSOR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java", "class_name": "ArrayHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java.ArrayHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ArrayHandler using a\n{@code BasicRowProcessor} for conversion.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java.ArrayHandler.[]ArrayHandler(RowProcessor)", "name": "ArrayHandler", "arg_nums": 1, "params": [{"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public ArrayHandler(final RowProcessor convert)", "original_string": "    public ArrayHandler(final RowProcessor convert) {\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java", "class_name": "ArrayHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java.ArrayHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ArrayHandler.\n\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into arrays.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java.ArrayHandler.[Object[]]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Object[]", "signature": "@Override\n    public Object[] handle(final ResultSet resultSet)", "original_string": "    @Override\n    public Object[] handle(final ResultSet resultSet) throws SQLException {\n        return resultSet.next() ? this.convert.toArray(resultSet) : EMPTY_ARRAY;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java", "class_name": "ArrayHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ArrayHandler.java.ArrayHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nPlaces the column values from the first row in an {@code Object[]}.\n@param resultSet {@code ResultSet} to process.\n@return An Object[]. If there are no rows in the {@code ResultSet}\nan empty array will be returned.\n\n@throws SQLException if a database access error occurs\n@see org.apache.commons.dbutils.ResultSetHandler#handle(java.sql.ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler.[]ColumnListHandler()", "name": "ColumnListHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ColumnListHandler()", "original_string": "    public ColumnListHandler() {\n        this(1, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java", "class_name": "ColumnListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ColumnListHandler.  The first column of each\nrow will be returned from {@code handle()}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler.[]ColumnListHandler(int)", "name": "ColumnListHandler", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "", "signature": "public ColumnListHandler(final int columnIndex)", "original_string": "    public ColumnListHandler(final int columnIndex) {\n        this(columnIndex, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java", "class_name": "ColumnListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ColumnListHandler.\n\n@param columnIndex The index of the column to retrieve from the\n{@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler.[]ColumnListHandler(int,String)", "name": "ColumnListHandler", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "columnName", "type": "String"}], "return_type": "", "signature": "private ColumnListHandler(final int columnIndex, final String columnName)", "original_string": "    private ColumnListHandler(final int columnIndex, final String columnName) {\n        this.columnIndex = columnIndex;\n        this.columnName = columnName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java", "class_name": "ColumnListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": " Private Helper\n@param columnIndex The index of the column to retrieve from the\n{@code ResultSet}.\n@param columnName The name of the column to retrieve from the\n{@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler.[]ColumnListHandler(String)", "name": "ColumnListHandler", "arg_nums": 1, "params": [{"name": "columnName", "type": "String"}], "return_type": "", "signature": "public ColumnListHandler(final String columnName)", "original_string": "    public ColumnListHandler(final String columnName) {\n        this(1, columnName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java", "class_name": "ColumnListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ColumnListHandler.\n\n@param columnName The name of the column to retrieve from the\n{@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler.[T]handleRow(ResultSet)", "name": "handleRow", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected T handleRow(final ResultSet resultSet)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected T handleRow(final ResultSet resultSet) throws SQLException {\n        if (this.columnName == null) {\n            return (T) resultSet.getObject(this.columnIndex);\n        }\n        return (T) resultSet.getObject(this.columnName);\n   }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java", "class_name": "ColumnListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ColumnListHandler.java.ColumnListHandler", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": [], "return_type": "T", "classes": []}, "docstring": " so getObject will return the appropriate type and the cast will succeed."}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java.AbstractListHandler.[List<T>]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "List<T>", "signature": "@Override\n    public List<T> handle(final ResultSet resultSet)", "original_string": "    @Override\n    public List<T> handle(final ResultSet resultSet) throws SQLException {\n        final List<T> rows = new ArrayList<>();\n        while (resultSet.next()) {\n            rows.add(this.handleRow(resultSet));\n        }\n        return rows;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java", "class_name": "AbstractListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java.AbstractListHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\nWhole {@code ResultSet} handler. It produce {@code List} as\nresult. To convert individual rows into Java objects it uses\n{@code handleRow(ResultSet)} method.\n\n@see #handleRow(ResultSet)\n@param resultSet {@code ResultSet} to process.\n@return a list of all rows in the result set\n@throws SQLException error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java.AbstractListHandler.[T]handleRow(ResultSet)", "name": "handleRow", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "T", "signature": "protected abstract T handleRow(ResultSet resultSet)", "original_string": "    protected abstract T handleRow(ResultSet resultSet) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java", "class_name": "AbstractListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/AbstractListHandler.java.AbstractListHandler", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nRow handler. Method converts current row into some Java object.\n\n@param resultSet {@code ResultSet} to process.\n@return row processing result\n@throws SQLException error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[K]createKey(ResultSet)", "name": "createKey", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "K", "signature": "protected abstract K createKey(ResultSet resultSet)", "original_string": "    protected abstract K createKey(ResultSet resultSet) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java", "class_name": "AbstractKeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "K", "classes": []}, "docstring": "\nThis factory method is called by {@code handle()} to retrieve the\nkey value from the current {@code ResultSet} row.\n@param resultSet ResultSet to create a key from\n@return K from the configured key column name/index\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[Map<K, V>]createMap()", "name": "createMap", "arg_nums": 0, "params": [], "return_type": "Map<K, V>", "signature": "protected Map<K, V> createMap()", "original_string": "    protected Map<K, V> createMap() {\n        return new HashMap<>();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java", "class_name": "AbstractKeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Map<K, V>", "classes": []}, "docstring": "\nThis factory method is called by {@code handle()} to create the Map\nto store records in.  This implementation returns a {@code HashMap}\ninstance.\n\n@return Map to store records in\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[V]createRow(ResultSet)", "name": "createRow", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "V", "signature": "protected abstract V createRow(ResultSet resultSet)", "original_string": "    protected abstract V createRow(ResultSet resultSet) throws SQLException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java", "class_name": "AbstractKeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "V", "classes": []}, "docstring": "\nThis factory method is called by {@code handle()} to store the\ncurrent {@code ResultSet} row in some object.\n@param resultSet ResultSet to create a row from\n@return V object created from the current row\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler.[Map<K, V>]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Map<K, V>", "signature": "@Override\n    public Map<K, V> handle(final ResultSet resultSet)", "original_string": "    @Override\n    public Map<K, V> handle(final ResultSet resultSet) throws SQLException {\n        final Map<K, V> result = createMap();\n        while (resultSet.next()) {\n            result.put(createKey(resultSet), createRow(resultSet));\n        }\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java", "class_name": "AbstractKeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/AbstractKeyedHandler.java.AbstractKeyedHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<K, V>", "classes": []}, "docstring": "\nConvert each row's columns into a Map and store then\nin a {@code Map} under {@code ResultSet.getObject(key)} key.\n@param resultSet {@code ResultSet} to process.\n@return A {@code Map}, never {@code null}.\n@throws SQLException if a database access error occurs\n@see org.apache.commons.dbutils.ResultSetHandler#handle(java.sql.ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java.BeanListHandler.[]BeanListHandler(Class<? extends T>)", "name": "BeanListHandler", "arg_nums": 1, "params": [{"name": "type", "type": "Class<? extends T>"}], "return_type": "", "signature": "public BeanListHandler(final Class<? extends T> type)", "original_string": "    public BeanListHandler(final Class<? extends T> type) {\n        this(type, ArrayHandler.ROW_PROCESSOR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java", "class_name": "BeanListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java.BeanListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanListHandler.\n\n@param type The Class that objects returned from {@code handle()}\nare created from.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java.BeanListHandler.[]BeanListHandler(Class<? extends T>,RowProcessor)", "name": "BeanListHandler", "arg_nums": 2, "params": [{"name": "type", "type": "Class<? extends T>"}, {"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public BeanListHandler(final Class<? extends T> type, final RowProcessor convert)", "original_string": "    public BeanListHandler(final Class<? extends T> type, final RowProcessor convert) {\n        this.type = type;\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java", "class_name": "BeanListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java.BeanListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanListHandler.\n\n@param type The Class that objects returned from {@code handle()}\nare created from.\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into beans.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java.BeanListHandler.[List<T>]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "List<T>", "signature": "@Override\n    public List<T> handle(final ResultSet resultSet)", "original_string": "    @Override\n    public List<T> handle(final ResultSet resultSet) throws SQLException {\n        return this.convert.toBeanList(resultSet, type);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java", "class_name": "BeanListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanListHandler.java.BeanListHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<T>", "classes": []}, "docstring": "\nConvert the whole {@code ResultSet} into a List of beans with\nthe {@code Class} given in the constructor.\n\n@param resultSet The {@code ResultSet} to handle.\n\n@return A List of beans, never {@code null}.\n\n@throws SQLException if a database access error occurs\n@see org.apache.commons.dbutils.RowProcessor#toBeanList(ResultSet, Class)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler.[]KeyedHandler()", "name": "KeyedHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public KeyedHandler()", "original_string": "    public KeyedHandler() {\n        this(ArrayHandler.ROW_PROCESSOR, 1, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java", "class_name": "KeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of KeyedHandler.  The value of the first column\nof each row will be a key in the Map.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler.[]KeyedHandler(int)", "name": "KeyedHandler", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "", "signature": "public KeyedHandler(final int columnIndex)", "original_string": "    public KeyedHandler(final int columnIndex) {\n        this(ArrayHandler.ROW_PROCESSOR, columnIndex, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java", "class_name": "KeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of KeyedHandler.\n\n@param columnIndex The values to use as keys in the Map are\nretrieved from the column at this index.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler.[]KeyedHandler(RowProcessor)", "name": "KeyedHandler", "arg_nums": 1, "params": [{"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public KeyedHandler(final RowProcessor convert)", "original_string": "    public KeyedHandler(final RowProcessor convert) {\n        this(convert, 1, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java", "class_name": "KeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of KeyedHandler.  The value of the first column\nof each row will be a key in the Map.\n\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into Maps\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler.[]KeyedHandler(RowProcessor,int,String)", "name": "KeyedHandler", "arg_nums": 3, "params": [{"name": "convert", "type": "RowProcessor"}, {"name": "columnIndex", "type": "int"}, {"name": "columnName", "type": "String"}], "return_type": "", "signature": "private KeyedHandler(final RowProcessor convert, final int columnIndex,\n            final String columnName)", "original_string": "    private KeyedHandler(final RowProcessor convert, final int columnIndex,\n            final String columnName) {\n        this.convert = convert;\n        this.columnIndex = columnIndex;\n        this.columnName = columnName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java", "class_name": "KeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": " Private Helper\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into Maps\n@param columnIndex The values to use as keys in the Map are\nretrieved from the column at this index.\n@param columnName The values to use as keys in the Map are\nretrieved from the column with this name.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler.[]KeyedHandler(String)", "name": "KeyedHandler", "arg_nums": 1, "params": [{"name": "columnName", "type": "String"}], "return_type": "", "signature": "public KeyedHandler(final String columnName)", "original_string": "    public KeyedHandler(final String columnName) {\n        this(ArrayHandler.ROW_PROCESSOR, 1, columnName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java", "class_name": "KeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of KeyedHandler.\n\n@param columnName The values to use as keys in the Map are\nretrieved from the column with this name.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler.[K]createKey(ResultSet)", "name": "createKey", "arg_nums": 1, "params": [{"name": "rs", "type": "ResultSet"}], "return_type": "K", "signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected K createKey(final ResultSet rs)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected K createKey(final ResultSet rs) throws SQLException {\n        return columnName == null ?\n               (K) rs.getObject(columnIndex) :\n               (K) rs.getObject(columnName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java", "class_name": "KeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": [], "return_type": "K", "classes": []}, "docstring": " so getObject will return the appropriate type and the cast will succeed."}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler.[Map<String, Object>]createRow(ResultSet)", "name": "createRow", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Map<String, Object>", "signature": "@Override\n    protected Map<String, Object> createRow(final ResultSet resultSet)", "original_string": "    @Override\n    protected Map<String, Object> createRow(final ResultSet resultSet) throws SQLException {\n        return this.convert.toMap(resultSet);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java", "class_name": "KeyedHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/KeyedHandler.java.KeyedHandler", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": "\nThis factory method is called by {@code handle()} to store the\ncurrent {@code ResultSet} row in some object. This\nimplementation returns a {@code Map} with case insensitive column\nnames as keys.  Calls to {@code map.get(\"COL\")} and\n{@code map.get(\"col\")} return the same value.\n@param resultSet ResultSet to create a row from\n@return Object typed Map containing column names to values\n@throws SQLException if a database access error occurs\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java.ArrayListHandler.[]ArrayListHandler()", "name": "ArrayListHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ArrayListHandler()", "original_string": "    public ArrayListHandler() {\n        this(ArrayHandler.ROW_PROCESSOR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java", "class_name": "ArrayListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java.ArrayListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ArrayListHandler using a\n{@code BasicRowProcessor} for conversions.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java.ArrayListHandler.[]ArrayListHandler(RowProcessor)", "name": "ArrayListHandler", "arg_nums": 1, "params": [{"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public ArrayListHandler(final RowProcessor convert)", "original_string": "    public ArrayListHandler(final RowProcessor convert) {\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java", "class_name": "ArrayListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java.ArrayListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ArrayListHandler.\n\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into Object[]s.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java.ArrayListHandler.[Object[]]handleRow(ResultSet)", "name": "handleRow", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Object[]", "signature": "@Override\n    protected Object[] handleRow(final ResultSet resultSet)", "original_string": "    @Override\n    protected Object[] handleRow(final ResultSet resultSet) throws SQLException {\n        return this.convert.toArray(resultSet);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java", "class_name": "ArrayListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ArrayListHandler.java.ArrayListHandler", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nConvert row's columns into an {@code Object[]}.\n@param resultSet {@code ResultSet} to process.\n@return {@code Object[]}, never {@code null}.\n\n@throws SQLException if a database access error occurs\n@see org.apache.commons.dbutils.handlers.AbstractListHandler#handle(ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java.MapListHandler.[]MapListHandler()", "name": "MapListHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public MapListHandler()", "original_string": "    public MapListHandler() {\n        this(ArrayHandler.ROW_PROCESSOR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java", "class_name": "MapListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java.MapListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of MapListHandler using a\n{@code BasicRowProcessor} for conversion.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java.MapListHandler.[]MapListHandler(RowProcessor)", "name": "MapListHandler", "arg_nums": 1, "params": [{"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public MapListHandler(final RowProcessor convert)", "original_string": "    public MapListHandler(final RowProcessor convert) {\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java", "class_name": "MapListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java.MapListHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of MapListHandler.\n\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into Maps.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java.MapListHandler.[Map<String, Object>]handleRow(ResultSet)", "name": "handleRow", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "Map<String, Object>", "signature": "@Override\n    protected Map<String, Object> handleRow(final ResultSet resultSet)", "original_string": "    @Override\n    protected Map<String, Object> handleRow(final ResultSet resultSet) throws SQLException {\n        return this.convert.toMap(resultSet);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java", "class_name": "MapListHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/MapListHandler.java.MapListHandler", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": "\nConverts the {@code ResultSet} row into a {@code Map} object.\n@param resultSet {@code ResultSet} to process.\n@return A {@code Map}, never null.\n\n@throws SQLException if a database access error occurs\n\n@see org.apache.commons.dbutils.handlers.AbstractListHandler#handle(ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java.BeanHandler.[]BeanHandler(Class<? extends T>)", "name": "BeanHandler", "arg_nums": 1, "params": [{"name": "type", "type": "Class<? extends T>"}], "return_type": "", "signature": "public BeanHandler(final Class<? extends T> type)", "original_string": "    public BeanHandler(final Class<? extends T> type) {\n        this(type, ArrayHandler.ROW_PROCESSOR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java", "class_name": "BeanHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java.BeanHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanHandler.\n\n@param type The Class that objects returned from {@code handle()}\nare created from.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java.BeanHandler.[]BeanHandler(Class<? extends T>,RowProcessor)", "name": "BeanHandler", "arg_nums": 2, "params": [{"name": "type", "type": "Class<? extends T>"}, {"name": "convert", "type": "RowProcessor"}], "return_type": "", "signature": "public BeanHandler(final Class<? extends T> type, final RowProcessor convert)", "original_string": "    public BeanHandler(final Class<? extends T> type, final RowProcessor convert) {\n        this.type = type;\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java", "class_name": "BeanHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java.BeanHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of BeanHandler.\n\n@param type The Class that objects returned from {@code handle()}\nare created from.\n@param convert The {@code RowProcessor} implementation\nto use when converting rows into beans.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java.BeanHandler.[T]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "T", "signature": "@Override\n    public T handle(final ResultSet resultSet)", "original_string": "    @Override\n    public T handle(final ResultSet resultSet) throws SQLException {\n        return resultSet.next() ? this.convert.toBean(resultSet, this.type) : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java", "class_name": "BeanHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/BeanHandler.java.BeanHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "T", "classes": []}, "docstring": "\nConvert the first row of the {@code ResultSet} into a bean with the\n{@code Class} given in the constructor.\n@param resultSet {@code ResultSet} to process.\n@return An initialized JavaBean or {@code null} if there were no\nrows in the {@code ResultSet}.\n\n@throws SQLException if a database access error occurs\n@see org.apache.commons.dbutils.ResultSetHandler#handle(java.sql.ResultSet)\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler.[]ScalarHandler()", "name": "ScalarHandler", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ScalarHandler()", "original_string": "    public ScalarHandler() {\n        this(1, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java", "class_name": "ScalarHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ScalarHandler.  The first column will\nbe returned from {@code handle()}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler.[]ScalarHandler(int)", "name": "ScalarHandler", "arg_nums": 1, "params": [{"name": "columnIndex", "type": "int"}], "return_type": "", "signature": "public ScalarHandler(final int columnIndex)", "original_string": "    public ScalarHandler(final int columnIndex) {\n        this(columnIndex, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java", "class_name": "ScalarHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ScalarHandler.\n\n@param columnIndex The index of the column to retrieve from the\n{@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler.[]ScalarHandler(int,String)", "name": "ScalarHandler", "arg_nums": 2, "params": [{"name": "columnIndex", "type": "int"}, {"name": "columnName", "type": "String"}], "return_type": "", "signature": "private ScalarHandler(final int columnIndex, final String columnName)", "original_string": "    private ScalarHandler(final int columnIndex, final String columnName) {\n        this.columnIndex = columnIndex;\n        this.columnName = columnName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java", "class_name": "ScalarHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": " Helper constructor\n@param columnIndex The index of the column to retrieve from the\n{@code ResultSet}.\n@param columnName The name of the column to retrieve from the\n{@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler.[]ScalarHandler(String)", "name": "ScalarHandler", "arg_nums": 1, "params": [{"name": "columnName", "type": "String"}], "return_type": "", "signature": "public ScalarHandler(final String columnName)", "original_string": "    public ScalarHandler(final String columnName) {\n        this(1, columnName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java", "class_name": "ScalarHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new instance of ScalarHandler.\n\n@param columnName The name of the column to retrieve from the\n{@code ResultSet}.\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler.[T]handle(ResultSet)", "name": "handle", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "T", "signature": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public T handle(final ResultSet resultSet)", "original_string": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public T handle(final ResultSet resultSet) throws SQLException {\n\n        if (resultSet.next()) {\n            if (this.columnName == null) {\n                return (T) resultSet.getObject(this.columnIndex);\n            }\n            return (T) resultSet.getObject(this.columnName);\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java", "class_name": "ScalarHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/ScalarHandler.java.ScalarHandler", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "T", "classes": []}, "docstring": " so getObject will return the appropriate type and the cast will succeed."}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandler.java.DoubleColumnHandler.[Double]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Double", "signature": "@Override\n    public Double apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Double apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return Double.valueOf(resultSet.getDouble(columnIndex));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandler.java", "class_name": "DoubleColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandler.java.DoubleColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Double", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandler.java.DoubleColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Double.TYPE) || propType.equals(Double.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandler.java", "class_name": "DoubleColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandler.java.DoubleColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandler.java.StringColumnHandler.[String]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "String", "signature": "@Override\n    public String apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public String apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return resultSet.getString(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandler.java", "class_name": "StringColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandler.java.StringColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandler.java.StringColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(String.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandler.java", "class_name": "StringColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandler.java.StringColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandler.java.ByteColumnHandler.[Byte]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Byte", "signature": "@Override\n    public Byte apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Byte apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return Byte.valueOf(resultSet.getByte(columnIndex));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandler.java", "class_name": "ByteColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandler.java.ByteColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandler.java.ByteColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Byte.TYPE) || propType.equals(Byte.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandler.java", "class_name": "ByteColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandler.java.ByteColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandler.java.TimestampColumnHandler.[Timestamp]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Timestamp", "signature": "@Override\n    public Timestamp apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Timestamp apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return resultSet.getTimestamp(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandler.java", "class_name": "TimestampColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandler.java.TimestampColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandler.java.TimestampColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Timestamp.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandler.java", "class_name": "TimestampColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandler.java.TimestampColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandler.java.SQLXMLColumnHandler.[SQLXML]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "SQLXML", "signature": "@Override\n    public SQLXML apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public SQLXML apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return resultSet.getSQLXML(columnIndex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandler.java", "class_name": "SQLXMLColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandler.java.SQLXMLColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "SQLXML", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandler.java.SQLXMLColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(SQLXML.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandler.java", "class_name": "SQLXMLColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandler.java.SQLXMLColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandler.java.BooleanColumnHandler.[Boolean]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Boolean", "signature": "@Override\n    public Boolean apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Boolean apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return Boolean.valueOf(resultSet.getBoolean(columnIndex));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandler.java", "class_name": "BooleanColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandler.java.BooleanColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandler.java.BooleanColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Boolean.TYPE) || propType.equals(Boolean.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandler.java", "class_name": "BooleanColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandler.java.BooleanColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandler.java.ShortColumnHandler.[Short]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Short", "signature": "@Override\n    public Short apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Short apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return Short.valueOf(resultSet.getShort(columnIndex));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandler.java", "class_name": "ShortColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandler.java.ShortColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Short", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandler.java.ShortColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Short.TYPE) || propType.equals(Short.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandler.java", "class_name": "ShortColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandler.java.ShortColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandler.java.FloatColumnHandler.[Float]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Float", "signature": "@Override\n    public Float apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Float apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return Float.valueOf(resultSet.getFloat(columnIndex));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandler.java", "class_name": "FloatColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandler.java.FloatColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Float", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandler.java.FloatColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Float.TYPE) || propType.equals(Float.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandler.java", "class_name": "FloatColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandler.java.FloatColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandler.java.LongColumnHandler.[Long]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Long", "signature": "@Override\n    public Long apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Long apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return Long.valueOf(resultSet.getLong(columnIndex));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandler.java", "class_name": "LongColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandler.java.LongColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Long", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandler.java.LongColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Long.TYPE) || propType.equals(Long.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandler.java", "class_name": "LongColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandler.java.LongColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandler.java.IntegerColumnHandler.[Integer]apply(ResultSet,int)", "name": "apply", "arg_nums": 2, "params": [{"name": "resultSet", "type": "ResultSet"}, {"name": "columnIndex", "type": "int"}], "return_type": "Integer", "signature": "@Override\n    public Integer apply(final ResultSet resultSet, final int columnIndex)", "original_string": "    @Override\n    public Integer apply(final ResultSet resultSet, final int columnIndex) throws SQLException {\n        return Integer.valueOf(resultSet.getInt(columnIndex));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandler.java", "class_name": "IntegerColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandler.java.IntegerColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandler.java.IntegerColumnHandler.[boolean]match(Class<?>)", "name": "match", "arg_nums": 1, "params": [{"name": "propType", "type": "Class<?>"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> propType)", "original_string": "    @Override\n    public boolean match(final Class<?> propType) {\n        return propType.equals(Integer.TYPE) || propType.equals(Integer.class);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandler.java", "class_name": "IntegerColumnHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandler.java.IntegerColumnHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandler.java.DatePropertyHandler.[Object]apply(Class<?>,Object)", "name": "apply", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "Object", "signature": "@Override\n    public Object apply(final Class<?> parameter, Object value)", "original_string": "    @Override\n    public Object apply(final Class<?> parameter, Object value) {\n        final String targetType = parameter.getName();\n        final Date dateValue = (Date) value;\n        final long time = dateValue.getTime();\n\n        switch (targetType) {\n        case JAVA_SQL_DATE:\n            value = new java.sql.Date(time);\n            break;\n        case JAVA_SQL_TIME:\n            value = new java.sql.Time(time);\n            break;\n        case JAVA_SQL_TIMESTAMP:\n            value = new Timestamp(time);\n            break;\n        default:\n            break;\n        }\n\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandler.java", "class_name": "DatePropertyHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandler.java.DatePropertyHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandler.java.DatePropertyHandler.[boolean]match(Class<?>,Object)", "name": "match", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> parameter, final Object value)", "original_string": "    @Override\n    public boolean match(final Class<?> parameter, final Object value) {\n        if (value instanceof Date) {\n            final String targetType = parameter.getName();\n            if (JAVA_SQL_DATE.equals(targetType)) {\n                return true;\n            }\n            if (JAVA_SQL_TIME.equals(targetType)) {\n                return true;\n            }\n            if (JAVA_SQL_TIMESTAMP.equals(targetType) && !Timestamp.class.isInstance(value)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandler.java", "class_name": "DatePropertyHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandler.java.DatePropertyHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandler.java.StringEnumPropertyHandler.[Object]apply(Class<?>,Object)", "name": "apply", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "Object", "signature": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public Object apply(final Class<?> parameter, final Object value)", "original_string": "    @Override\n    @SuppressWarnings(\"unchecked\")\n    public Object apply(final Class<?> parameter, final Object value) {\n        return Enum.valueOf(parameter.asSubclass(Enum.class), (String) value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandler.java", "class_name": "StringEnumPropertyHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandler.java.StringEnumPropertyHandler", "attributes": {"modifiers": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandler.java.StringEnumPropertyHandler.[boolean]match(Class<?>,Object)", "name": "match", "arg_nums": 2, "params": [{"name": "parameter", "type": "Class<?>"}, {"name": "value", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean match(final Class<?> parameter, final Object value)", "original_string": "    @Override\n    public boolean match(final Class<?> parameter, final Object value) {\n        return value instanceof String && parameter.isEnum();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandler.java", "class_name": "StringEnumPropertyHandler", "class_uri": "src/main/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandler.java.StringEnumPropertyHandler", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java.StringTrimmedResultSet.[ResultSet]wrap(ResultSet)", "name": "wrap", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "ResultSet", "signature": "public static ResultSet wrap(final ResultSet resultSet)", "original_string": "    public static ResultSet wrap(final ResultSet resultSet) {\n        return ProxyFactory.instance().createResultSet(new StringTrimmedResultSet(resultSet));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java", "class_name": "StringTrimmedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java.StringTrimmedResultSet", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": "\nWraps the {@code ResultSet} in an instance of this class.  This is\nequivalent to:\n<pre>\nProxyFactory.instance().createResultSet(new StringTrimmedResultSet(resultSet));\n</pre>\n\n@param resultSet The {@code ResultSet} to wrap.\n@return wrapped ResultSet\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java.StringTrimmedResultSet.[]StringTrimmedResultSet(ResultSet)", "name": "StringTrimmedResultSet", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "", "signature": "public StringTrimmedResultSet(final ResultSet resultSet)", "original_string": "    public StringTrimmedResultSet(final ResultSet resultSet) {\n        this.resultSet = resultSet;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java", "class_name": "StringTrimmedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java.StringTrimmedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance of {@code StringTrimmedResultSet}\nto wrap the specified {@code ResultSet}.\n@param resultSet ResultSet to wrap\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java.StringTrimmedResultSet.[Object]invoke(Object,Method,Object[])", "name": "invoke", "arg_nums": 3, "params": [{"name": "proxy", "type": "Object"}, {"name": "method", "type": "Method"}, {"name": "args", "type": "Object[]"}], "return_type": "Object", "signature": "@Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)", "original_string": "    @Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)\n        throws Throwable {\n\n        Object result = method.invoke(this.resultSet, args);\n\n        if (result instanceof String\n                && (method.getName().equals(\"getObject\")\n                || method.getName().equals(\"getString\"))) {\n            result = ((String) result).trim();\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java", "class_name": "StringTrimmedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/StringTrimmedResultSet.java.StringTrimmedResultSet", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nIntercept calls to the {@code getString()} and\n{@code getObject()} methods and trim any Strings before they're\nreturned.\n\n@see java.lang.reflect.InvocationHandler#invoke(Object, java.lang.reflect.Method, Object[])\n@param proxy Not used; all method calls go to the internal result set\n@param method The method to invoke on the result set\n@param args The arguments to pass to the result set\n@return string trimmed result\n@throws Throwable error\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[ResultSet]wrap(ResultSet)", "name": "wrap", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "ResultSet", "signature": "public static ResultSet wrap(final ResultSet resultSet)", "original_string": "    public static ResultSet wrap(final ResultSet resultSet) {\n        return factory.createResultSet(new SqlNullCheckedResultSet(resultSet));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ResultSet", "classes": []}, "docstring": "\nWraps the {@code ResultSet} in an instance of this class.  This is\nequivalent to:\n<pre>\nProxyFactory.instance().createResultSet(new SqlNullCheckedResultSet(resultSet));\n</pre>\n\n@param resultSet The {@code ResultSet} to wrap.\n@return wrapped ResultSet\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[]SqlNullCheckedResultSet(ResultSet)", "name": "SqlNullCheckedResultSet", "arg_nums": 1, "params": [{"name": "resultSet", "type": "ResultSet"}], "return_type": "", "signature": "public SqlNullCheckedResultSet(final ResultSet resultSet)", "original_string": "    public SqlNullCheckedResultSet(final ResultSet resultSet) {\n        this.resultSet = resultSet;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance of\n{@code SqlNullCheckedResultSet}\nto wrap the specified {@code ResultSet}.\n@param resultSet ResultSet to wrap\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[InputStream]getNullAsciiStream()", "name": "getNullAsciiStream", "arg_nums": 0, "params": [], "return_type": "InputStream", "signature": "public InputStream getNullAsciiStream()", "original_string": "    public InputStream getNullAsciiStream() {\n        return this.nullAsciiStream;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getAsciiStream} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[BigDecimal]getNullBigDecimal()", "name": "getNullBigDecimal", "arg_nums": 0, "params": [], "return_type": "BigDecimal", "signature": "public BigDecimal getNullBigDecimal()", "original_string": "    public BigDecimal getNullBigDecimal() {\n        return this.nullBigDecimal;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getBigDecimal} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[InputStream]getNullBinaryStream()", "name": "getNullBinaryStream", "arg_nums": 0, "params": [], "return_type": "InputStream", "signature": "public InputStream getNullBinaryStream()", "original_string": "    public InputStream getNullBinaryStream() {\n        return this.nullBinaryStream;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getBinaryStream} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Blob]getNullBlob()", "name": "getNullBlob", "arg_nums": 0, "params": [], "return_type": "Blob", "signature": "public Blob getNullBlob()", "original_string": "    public Blob getNullBlob() {\n        return this.nullBlob;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Blob", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getBlob} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[boolean]getNullBoolean()", "name": "getNullBoolean", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean getNullBoolean()", "original_string": "    public boolean getNullBoolean() {\n        return this.nullBoolean;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getBoolean} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[byte]getNullByte()", "name": "getNullByte", "arg_nums": 0, "params": [], "return_type": "byte", "signature": "public byte getNullByte()", "original_string": "    public byte getNullByte() {\n        return this.nullByte;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getByte} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[byte[]]getNullBytes()", "name": "getNullBytes", "arg_nums": 0, "params": [], "return_type": "byte[]", "signature": "public byte[] getNullBytes()", "original_string": "    public byte[] getNullBytes() {\n        if (this.nullBytes == null) {\n            return null;\n        }\n        return this.nullBytes.clone();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "byte[]", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getBytes} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Reader]getNullCharacterStream()", "name": "getNullCharacterStream", "arg_nums": 0, "params": [], "return_type": "Reader", "signature": "public Reader getNullCharacterStream()", "original_string": "    public Reader getNullCharacterStream() {\n        return this.nullCharacterStream;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Reader", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getCharacterStream} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Clob]getNullClob()", "name": "getNullClob", "arg_nums": 0, "params": [], "return_type": "Clob", "signature": "public Clob getNullClob()", "original_string": "    public Clob getNullClob() {\n        return this.nullClob;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Clob", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getClob} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Date]getNullDate()", "name": "getNullDate", "arg_nums": 0, "params": [], "return_type": "Date", "signature": "public Date getNullDate()", "original_string": "    public Date getNullDate() {\n        return this.nullDate != null ? new Date(this.nullDate.getTime()) : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getDate} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[double]getNullDouble()", "name": "getNullDouble", "arg_nums": 0, "params": [], "return_type": "double", "signature": "public double getNullDouble()", "original_string": "    public double getNullDouble() {\n        return this.nullDouble;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "double", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getDouble} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[float]getNullFloat()", "name": "getNullFloat", "arg_nums": 0, "params": [], "return_type": "float", "signature": "public float getNullFloat()", "original_string": "    public float getNullFloat() {\n        return this.nullFloat;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "float", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getFloat} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[int]getNullInt()", "name": "getNullInt", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getNullInt()", "original_string": "    public int getNullInt() {\n        return this.nullInt;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getInt} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[long]getNullLong()", "name": "getNullLong", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long getNullLong()", "original_string": "    public long getNullLong() {\n        return this.nullLong;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getLong} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Object]getNullObject()", "name": "getNullObject", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "public Object getNullObject()", "original_string": "    public Object getNullObject() {\n        return this.nullObject;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getObject} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Ref]getNullRef()", "name": "getNullRef", "arg_nums": 0, "params": [], "return_type": "Ref", "signature": "public Ref getNullRef()", "original_string": "    public Ref getNullRef() {\n        return this.nullRef;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Ref", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getRef} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[short]getNullShort()", "name": "getNullShort", "arg_nums": 0, "params": [], "return_type": "short", "signature": "public short getNullShort()", "original_string": "    public short getNullShort() {\n        return this.nullShort;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "short", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getShort} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[String]getNullString()", "name": "getNullString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getNullString()", "original_string": "    public String getNullString() {\n        return this.nullString;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getString} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Time]getNullTime()", "name": "getNullTime", "arg_nums": 0, "params": [], "return_type": "Time", "signature": "public Time getNullTime()", "original_string": "    public Time getNullTime() {\n        return this.nullTime != null ? new Time(this.nullTime.getTime()) : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Time", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getTime} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Timestamp]getNullTimestamp()", "name": "getNullTimestamp", "arg_nums": 0, "params": [], "return_type": "Timestamp", "signature": "public Timestamp getNullTimestamp()", "original_string": "    public Timestamp getNullTimestamp() {\n        if (this.nullTimestamp == null) {\n            return null;\n        }\n\n        final Timestamp ts = new Timestamp(this.nullTimestamp.getTime());\n        ts.setNanos(this.nullTimestamp.getNanos());\n        return ts;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Timestamp", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getTimestamp} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[URL]getNullURL()", "name": "getNullURL", "arg_nums": 0, "params": [], "return_type": "URL", "signature": "public URL getNullURL()", "original_string": "    public URL getNullURL() {\n        return this.nullURL;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "URL", "classes": []}, "docstring": "\nReturns the value when a SQL null is encountered as the result of\ninvoking a {@code getURL} method.\n\n@return the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[Object]invoke(Object,Method,Object[])", "name": "invoke", "arg_nums": 3, "params": [{"name": "proxy", "type": "Object"}, {"name": "method", "type": "Method"}, {"name": "args", "type": "Object[]"}], "return_type": "Object", "signature": "@Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)", "original_string": "    @Override\n    public Object invoke(final Object proxy, final Method method, final Object[] args)\n        throws Throwable {\n\n        final Object result = method.invoke(this.resultSet, args);\n\n        final Method nullMethod = NULL_METHODS.get(method.getName());\n\n        // Check nullMethod != null first so that we don't call wasNull()\n        // before a true getter method was invoked on the ResultSet.\n        return nullMethod != null && this.resultSet.wasNull()\n            ? nullMethod.invoke(this, (Object[]) null)\n            : result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nIntercepts calls to {@code get*} methods and calls the appropriate\n{@code getNull*} method if the {@code ResultSet} returned\n{@code null}.\n\n@see java.lang.reflect.InvocationHandler#invoke(Object, java.lang.reflect.Method, Object[])\n@param proxy Not used; all method calls go to the internal result set\n@param method The method to invoke on the result set\n@param args The arguments to pass to the result set\n@return null checked result\n@throws Throwable error\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullAsciiStream(InputStream)", "name": "setNullAsciiStream", "arg_nums": 1, "params": [{"name": "nullAsciiStream", "type": "InputStream"}], "return_type": "void", "signature": "public void setNullAsciiStream(final InputStream nullAsciiStream)", "original_string": "    public void setNullAsciiStream(final InputStream nullAsciiStream) {\n        this.nullAsciiStream = nullAsciiStream;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getAsciiStream} method.\n\n@param nullAsciiStream the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullBigDecimal(BigDecimal)", "name": "setNullBigDecimal", "arg_nums": 1, "params": [{"name": "nullBigDecimal", "type": "BigDecimal"}], "return_type": "void", "signature": "public void setNullBigDecimal(final BigDecimal nullBigDecimal)", "original_string": "    public void setNullBigDecimal(final BigDecimal nullBigDecimal) {\n        this.nullBigDecimal = nullBigDecimal;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getBigDecimal} method.\n\n@param nullBigDecimal the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullBinaryStream(InputStream)", "name": "setNullBinaryStream", "arg_nums": 1, "params": [{"name": "nullBinaryStream", "type": "InputStream"}], "return_type": "void", "signature": "public void setNullBinaryStream(final InputStream nullBinaryStream)", "original_string": "    public void setNullBinaryStream(final InputStream nullBinaryStream) {\n        this.nullBinaryStream = nullBinaryStream;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getBinaryStream} method.\n\n@param nullBinaryStream the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullBlob(Blob)", "name": "setNullBlob", "arg_nums": 1, "params": [{"name": "nullBlob", "type": "Blob"}], "return_type": "void", "signature": "public void setNullBlob(final Blob nullBlob)", "original_string": "    public void setNullBlob(final Blob nullBlob) {\n        this.nullBlob = nullBlob;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getBlob} method.\n\n@param nullBlob the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullBoolean(boolean)", "name": "setNullBoolean", "arg_nums": 1, "params": [{"name": "nullBoolean", "type": "boolean"}], "return_type": "void", "signature": "public void setNullBoolean(final boolean nullBoolean)", "original_string": "    public void setNullBoolean(final boolean nullBoolean) {\n        this.nullBoolean = nullBoolean;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getBoolean} method.\n\n@param nullBoolean the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullByte(byte)", "name": "setNullByte", "arg_nums": 1, "params": [{"name": "nullByte", "type": "byte"}], "return_type": "void", "signature": "public void setNullByte(final byte nullByte)", "original_string": "    public void setNullByte(final byte nullByte) {\n        this.nullByte = nullByte;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getByte} method.\n\n@param nullByte the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullBytes(byte[])", "name": "setNullBytes", "arg_nums": 1, "params": [{"name": "nullBytes", "type": "byte[]"}], "return_type": "void", "signature": "public void setNullBytes(final byte[] nullBytes)", "original_string": "    public void setNullBytes(final byte[] nullBytes) {\n        if (nullBytes != null) {\n            this.nullBytes = nullBytes.clone();\n        } else {\n            this.nullBytes = null;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getBytes} method.\n\n@param nullBytes the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullCharacterStream(Reader)", "name": "setNullCharacterStream", "arg_nums": 1, "params": [{"name": "nullCharacterStream", "type": "Reader"}], "return_type": "void", "signature": "public void setNullCharacterStream(final Reader nullCharacterStream)", "original_string": "    public void setNullCharacterStream(final Reader nullCharacterStream) {\n        this.nullCharacterStream = nullCharacterStream;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getCharacterStream} method.\n\n@param nullCharacterStream the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullClob(Clob)", "name": "setNullClob", "arg_nums": 1, "params": [{"name": "nullClob", "type": "Clob"}], "return_type": "void", "signature": "public void setNullClob(final Clob nullClob)", "original_string": "    public void setNullClob(final Clob nullClob) {\n        this.nullClob = nullClob;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getClob} method.\n\n@param nullClob the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullDate(Date)", "name": "setNullDate", "arg_nums": 1, "params": [{"name": "nullDate", "type": "Date"}], "return_type": "void", "signature": "public void setNullDate(final Date nullDate)", "original_string": "    public void setNullDate(final Date nullDate) {\n        this.nullDate = nullDate != null ? new Date(nullDate.getTime()) : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getDate} method.\n\n@param nullDate the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullDouble(double)", "name": "setNullDouble", "arg_nums": 1, "params": [{"name": "nullDouble", "type": "double"}], "return_type": "void", "signature": "public void setNullDouble(final double nullDouble)", "original_string": "    public void setNullDouble(final double nullDouble) {\n        this.nullDouble = nullDouble;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getDouble} method.\n\n@param nullDouble the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullFloat(float)", "name": "setNullFloat", "arg_nums": 1, "params": [{"name": "nullFloat", "type": "float"}], "return_type": "void", "signature": "public void setNullFloat(final float nullFloat)", "original_string": "    public void setNullFloat(final float nullFloat) {\n        this.nullFloat = nullFloat;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getFloat} method.\n\n@param nullFloat the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullInt(int)", "name": "setNullInt", "arg_nums": 1, "params": [{"name": "nullInt", "type": "int"}], "return_type": "void", "signature": "public void setNullInt(final int nullInt)", "original_string": "    public void setNullInt(final int nullInt) {\n        this.nullInt = nullInt;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getInt} method.\n\n@param nullInt the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullLong(long)", "name": "setNullLong", "arg_nums": 1, "params": [{"name": "nullLong", "type": "long"}], "return_type": "void", "signature": "public void setNullLong(final long nullLong)", "original_string": "    public void setNullLong(final long nullLong) {\n        this.nullLong = nullLong;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getLong} method.\n\n@param nullLong the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullObject(Object)", "name": "setNullObject", "arg_nums": 1, "params": [{"name": "nullObject", "type": "Object"}], "return_type": "void", "signature": "public void setNullObject(final Object nullObject)", "original_string": "    public void setNullObject(final Object nullObject) {\n        this.nullObject = nullObject;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getObject} method.\n\n@param nullObject the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullRef(Ref)", "name": "setNullRef", "arg_nums": 1, "params": [{"name": "nullRef", "type": "Ref"}], "return_type": "void", "signature": "public void setNullRef(final Ref nullRef)", "original_string": "    public void setNullRef(final Ref nullRef) {\n        this.nullRef = nullRef;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getRef} method.\n\n@param nullRef the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullShort(short)", "name": "setNullShort", "arg_nums": 1, "params": [{"name": "nullShort", "type": "short"}], "return_type": "void", "signature": "public void setNullShort(final short nullShort)", "original_string": "    public void setNullShort(final short nullShort) {\n        this.nullShort = nullShort;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getShort} method.\n\n@param nullShort the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullString(String)", "name": "setNullString", "arg_nums": 1, "params": [{"name": "nullString", "type": "String"}], "return_type": "void", "signature": "public void setNullString(final String nullString)", "original_string": "    public void setNullString(final String nullString) {\n        this.nullString = nullString;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getString} method.\n\n@param nullString the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullTime(Time)", "name": "setNullTime", "arg_nums": 1, "params": [{"name": "nullTime", "type": "Time"}], "return_type": "void", "signature": "public void setNullTime(final Time nullTime)", "original_string": "    public void setNullTime(final Time nullTime) {\n        this.nullTime = nullTime != null ? new Time(nullTime.getTime()) : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getTime} method.\n\n@param nullTime the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullTimestamp(Timestamp)", "name": "setNullTimestamp", "arg_nums": 1, "params": [{"name": "nullTimestamp", "type": "Timestamp"}], "return_type": "void", "signature": "public void setNullTimestamp(final Timestamp nullTimestamp)", "original_string": "    public void setNullTimestamp(final Timestamp nullTimestamp) {\n        if (nullTimestamp != null) {\n            this.nullTimestamp = new Timestamp(nullTimestamp.getTime());\n            this.nullTimestamp.setNanos(nullTimestamp.getNanos());\n        } else {\n            this.nullTimestamp = null;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getTimestamp} method.\n\n@param nullTimestamp the value\n"}, {"uris": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet.[void]setNullURL(URL)", "name": "setNullURL", "arg_nums": 1, "params": [{"name": "nullURL", "type": "URL"}], "return_type": "void", "signature": "public void setNullURL(final URL nullURL)", "original_string": "    public void setNullURL(final URL nullURL) {\n        this.nullURL = nullURL;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java", "class_name": "SqlNullCheckedResultSet", "class_uri": "src/main/java/org/apache/commons/dbutils/wrappers/SqlNullCheckedResultSet.java.SqlNullCheckedResultSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value to return when a SQL null is encountered as the result of\ninvoking a {@code getURL} method.\n\n@param nullURL the value\n"}]