[{"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/StringColumnHandlerTest.java", "testclass_name": "StringColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "StringColumnHandlerTest", "description": "Unit tests for the StringColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["StringColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getString(int)"], "external_dependencies": {"modules": ["StringColumnHandler", "ResultSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of StringColumnHandler to ensure it returns the correct type (String)."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/TimestampColumnHandlerTest.java", "testclass_name": "TimestampColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import java.sql.Timestamp;", "import java.util.Date;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "TimestampColumnHandlerTest", "description": "Unit tests for the TimestampColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["TimestampColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getTimestamp(int)"], "external_dependencies": {"modules": ["TimestampColumnHandler", "ResultSet", "Timestamp", "Date"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of TimestampColumnHandler to ensure it returns the correct type (Timestamp)."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/LongColumnHandlerTest.java", "testclass_name": "LongColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "LongColumnHandlerTest", "description": "Unit tests for the LongColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["LongColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getLong(int)"], "external_dependencies": {"modules": ["LongColumnHandler", "ResultSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of LongColumnHandler to ensure it returns the correct type (Long)."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/ShortColumnHandlerTest.java", "testclass_name": "ShortColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "ShortColumnHandlerTest", "description": "Unit tests for ShortColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["ShortColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getShort(int)"], "external_dependencies": {"modules": ["ShortColumnHandler", "ResultSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of ShortColumnHandler to ensure it returns the correct type."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/ByteColumnHandlerTest.java", "testclass_name": "ByteColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import java.sql.ResultSet;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "ByteColumnHandlerTest", "description": "Unit tests for ByteColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["ByteColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getByte(int)"], "external_dependencies": {"modules": ["ByteColumnHandler", "ResultSet", "Byte"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of ByteColumnHandler to ensure it returns the correct type (Byte)."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/DoubleColumnHandlerTest.java", "testclass_name": "DoubleColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import java.sql.ResultSet;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "DoubleColumnHandlerTest", "description": "Unit tests for the DoubleColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["DoubleColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getDouble(int)"], "external_dependencies": {"modules": ["ResultSet", "DoubleColumnHandler"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of DoubleColumnHandler to ensure it returns the correct type (Double)."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/BooleanColumnHandlerTest.java", "testclass_name": "BooleanColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import java.sql.ResultSet;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "BooleanColumnHandlerTest", "description": "Unit tests for the BooleanColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["BooleanColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getBoolean(int)"], "external_dependencies": {"modules": ["ResultSet", "BooleanColumnHandler"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of BooleanColumnHandler to ensure it returns the correct type."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/FloatColumnHandlerTest.java", "testclass_name": "FloatColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.Mockito.when;", "import java.sql.ResultSet;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "FloatColumnHandlerTest", "description": "Unit tests for the FloatColumnHandler class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["FloatColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getFloat(int)"], "external_dependencies": {"modules": ["ResultSet", "FloatColumnHandler"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of FloatColumnHandler to ensure it returns the correct type (Float)."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/SQLXMLColumnHandlerTest.java", "testclass_name": "SQLXMLColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertTrue;", "import static org.mockito.Mockito.when;", "import java.sql.SQLXML;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.Mock;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "SQLXMLColumnHandlerTest", "description": "Test class for SQLXMLColumnHandler, focusing on the applyType method.", "class_members": {"variables": [{"name": "sqlxml", "type": "SQLXML"}]}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["SQLXMLColumnHandler.apply(ResultSet,int)"], "associated_methods": ["ResultSet.getSQLXML(int)"], "external_dependencies": {"modules": ["SQLXML", "SQLXMLColumnHandler", "ResultSet"], "class_members": [{"name": "sqlxml", "type": "variable"}]}, "category": "unit", "description": "Tests the apply method of SQLXMLColumnHandler to ensure it correctly handles SQLXML types."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/ResultSetIteratorTest.java", "testclass_name": "ResultSetIteratorTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.mockito.Mockito.mock;", "import java.sql.ResultSet;", "import java.sql.SQLException;", "import java.util.Iterator;", "import org.junit.Test;"], "name": "ResultSetIteratorTest", "description": "Unit tests for the ResultSetIterator class, focusing on its methods and exception handling.", "class_members": {"methods": [{"name": "testNext", "signature": "void testNext()"}]}, "fixtures": [], "test_cases": [{"name": "testCreatesResultSetIteratorTakingThreeArgumentsAndCallsRemove", "primary_tested": ["ResultSetIterator.remove()"], "external_dependencies": {"modules": ["ResultSet", "ResultSetIterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of ResultSetIterator with three arguments and calls the remove method."}, {"name": "testRethrowThrowsRuntimeException", "primary_tested": ["ResultSetIterator.rethrow(SQLException)"], "external_dependencies": {"modules": ["ResultSetIterator", "SQLException", "Throwable"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the rethrow method in ResultSetIterator throws a RuntimeException when given a SQLException."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/BaseResultSetHandlerTest.java", "testclass_name": "BaseResultSetHandlerTest", "dependencies": ["package org.apache.commons.dbutils;", "import java.sql.SQLException;", "import java.util.Collection;", "import java.util.HashMap;", "import java.util.LinkedList;", "import java.util.Map;", "import org.junit.Test;"], "name": "BaseResultSetHandlerTest", "description": "Unit tests for the BaseResultSetHandler class, specifically focusing on the ToMapCollectionHandler nested class.", "class_members": {"nested_classes": [{"name": "ToMapCollectionHandler", "description": "Nested class extending BaseResultSetHandler to handle ResultSet and convert it to a Collection of Maps."}]}, "fixtures": [], "test_cases": [{"name": "testHandleWithoutExplicitResultSetInvocation", "primary_tested": ["ToMapCollectionHandler.handle(ResultSet)"], "associated_methods": ["ToMapCollectionHandler.handle()"], "external_dependencies": {"modules": ["java.sql.SQLException", "java.util.Collection", "java.util.Map", "java.util.HashMap", "java.util.LinkedList"], "class_members": [{"name": "ToMapCollectionHandler", "type": "nested_class"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the handle method of ToMapCollectionHandler to ensure it correctly processes a ResultSet and converts it to a Collection of Maps, verifying the presence of specific keys in each Map."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/columns/IntegerColumnHandlerTest.java", "testclass_name": "IntegerColumnHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.columns;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.mockito.Mockito.when;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "IntegerColumnHandlerTest", "description": "Tests for the IntegerColumnHandler class, which handles column data of type Integer.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testApplyType", "primary_tested": ["IntegerColumnHandler.apply(ResultSet,int)"], "external_dependencies": {"modules": ["IntegerColumnHandler", "ResultSet"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the apply method of IntegerColumnHandler to ensure it returns the correct type (Integer)."}, {"name": "testMatchNegative", "primary_tested": ["IntegerColumnHandler.match(Class)"], "external_dependencies": {"modules": ["IntegerColumnHandler"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the match method of IntegerColumnHandler to ensure it correctly identifies non-matching types (e.g., Float)."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/properties/StringEnumPropertyHandlerTest.java", "testclass_name": "StringEnumPropertyHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.properties;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import org.junit.Before;", "import org.junit.Test;"], "name": "StringEnumPropertyHandlerTest", "description": "Unit tests for the StringEnumPropertyHandler class, focusing on the match method.", "class_members": {"variables": [{"name": "handler", "type": "StringEnumPropertyHandler"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMatch", "primary_tested": ["StringEnumPropertyHandler.match(Class,String)"], "external_dependencies": {"modules": ["StringEnumPropertyHandler", "TestEnum"], "class_members": [{"name": "handler", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the match method of StringEnumPropertyHandler with a valid enum class and string."}, {"name": "testMatchNegative", "primary_tested": ["StringEnumPropertyHandler.match(Class,Object)"], "external_dependencies": {"modules": ["StringEnumPropertyHandler", "TestEnum", "Double", "Integer"], "class_members": [{"name": "handler", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the match method of StringEnumPropertyHandler with invalid inputs."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/properties/PropertyHandlerTest.java", "testclass_name": "PropertyHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.properties;", "import static org.junit.Assert.assertTrue;", "import java.util.ServiceLoader;", "import org.apache.commons.dbutils.PropertyHandler;", "import org.junit.Before;", "import org.junit.Test;"], "name": "PropertyHandlerTest", "description": "Tests for the PropertyHandler using ServiceLoader.", "class_members": {"variables": [{"name": "loader", "type": "ServiceLoader<PropertyHandler>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFoundMoreThanLocal", "primary_tested": ["ServiceLoader.load(Class)"], "external_dependencies": {"modules": ["ServiceLoader", "PropertyHandler"], "class_members": [{"name": "loader", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that more than one PropertyHandler is found, indicating that core handlers were loaded."}, {"name": "testServiceLoaderFindsMultipleRegistries", "primary_tested": ["ServiceLoader.load(Class)"], "associated_methods": ["TestPropertyHandler.isInstance(Object)"], "external_dependencies": {"modules": ["ServiceLoader", "PropertyHandler", "TestPropertyHandler"], "class_members": [{"name": "loader", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the ServiceLoader finds multiple registries, including the TestPropertyHandler."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/StatementConfigurationTest.java", "testclass_name": "StatementConfigurationTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.time.Duration;", "import org.junit.Test;"], "name": "StatementConfigurationTest", "description": "Tests for the StatementConfiguration class, focusing on the builder and constructor methods.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testBuilder", "primary_tested": ["StatementConfiguration.Builder.build()"], "associated_methods": ["StatementConfiguration.isFetchDirectionSet()", "StatementConfiguration.getFetchDirection()", "StatementConfiguration.isFetchSizeSet()", "StatementConfiguration.getFetchSize()", "StatementConfiguration.isMaxFieldSizeSet()", "StatementConfiguration.getMaxFieldSize()", "StatementConfiguration.isMaxRowsSet()", "StatementConfiguration.getMaxRows()", "StatementConfiguration.isQueryTimeoutSet()", "StatementConfiguration.getQueryTimeout()", "StatementConfiguration.getQueryTimeoutDuration()"], "external_dependencies": {"modules": ["StatementConfiguration", "Duration"]}, "category": "unit", "description": "Tests that a builder with all values set yields like values in the constructed configuration."}, {"name": "testConstructor", "primary_tested": ["StatementConfiguration.StatementConfiguration(int,int,int,int,int)"], "associated_methods": ["StatementConfiguration.getFetchDirection()", "StatementConfiguration.getFetchSize()", "StatementConfiguration.getMaxFieldSize()", "StatementConfiguration.getMaxRows()", "StatementConfiguration.getQueryTimeout()"], "external_dependencies": {"modules": ["StatementConfiguration"]}, "category": "unit", "description": "Tests that the constructor of StatementConfiguration correctly sets all values."}, {"name": "testEmptyBuilder", "primary_tested": ["StatementConfiguration.Builder.build()"], "associated_methods": ["StatementConfiguration.isFetchDirectionSet()", "StatementConfiguration.isFetchSizeSet()", "StatementConfiguration.isMaxFieldSizeSet()", "StatementConfiguration.isMaxRowsSet()", "StatementConfiguration.isQueryTimeoutSet()"], "external_dependencies": {"modules": ["StatementConfiguration"]}, "category": "unit", "description": "Tests that an empty builder yields null values for all configuration settings."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/OutParameterTest.java", "testclass_name": "OutParameterTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.assertEquals;", "import static org.mockito.ArgumentMatchers.any;", "import static org.mockito.ArgumentMatchers.eq;", "import static org.mockito.Mockito.times;", "import static org.mockito.Mockito.verify;", "import static org.mockito.Mockito.when;", "import java.sql.CallableStatement;", "import java.sql.Types;", "import org.junit.Before;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.Mock;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "OutParameterTest", "description": "Unit tests for the OutParameter class, focusing on its register and setValue methods.", "class_members": {"variables": [{"name": "INDEX", "type": "static final int"}, {"name": "VALUE", "type": "static final int"}, {"name": "stmt", "type": "CallableStatement"}, {"name": "parameter", "type": "OutParameter<Number>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRegister", "primary_tested": ["OutParameter.register(CallableStatement,int)"], "associated_methods": ["OutParameter.setValue(int)"], "external_dependencies": {"modules": ["CallableStatement", "Types"], "class_members": [{"name": "stmt", "type": "variable"}, {"name": "parameter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the register method of OutParameter, verifying the correct invocation of registerOutParameter and setObject methods on the CallableStatement."}, {"name": "testRegisterAlternateConstructor", "primary_tested": ["OutParameter.register(CallableStatement,int)"], "external_dependencies": {"modules": ["CallableStatement", "Types"], "class_members": [{"name": "stmt", "type": "variable"}, {"name": "parameter", "type": "variable"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the register method of OutParameter using an alternate constructor, verifying the correct invocation of registerOutParameter and setObject methods on the CallableStatement."}, {"name": "testSetValue", "primary_tested": ["OutParameter.setValue(CallableStatement,int)"], "associated_methods": ["OutParameter.getValue()"], "external_dependencies": {"modules": ["CallableStatement", "Types"], "class_members": [{"name": "stmt", "type": "variable"}, {"name": "parameter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the setValue method of OutParameter, verifying that the value is correctly set and retrieved from the CallableStatement."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/ServiceLoaderTest.java", "testclass_name": "ServiceLoaderTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.assertTrue;", "import java.util.ServiceLoader;", "import org.apache.commons.dbutils.handlers.columns.TestColumnHandler;", "import org.apache.commons.dbutils.handlers.properties.TestPropertyHandler;", "import org.junit.Before;", "import org.junit.Test;"], "name": "ServiceLoaderTest", "description": "Tests for verifying the loading and finding of ColumnHandler and PropertyHandler using ServiceLoader.", "class_members": {"variables": [{"name": "columns", "type": "ServiceLoader<ColumnHandler>"}, {"name": "properties", "type": "ServiceLoader<PropertyHandler>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testFindMoreThanLocalColumns", "primary_tested": ["ServiceLoader.load(Class)"], "external_dependencies": {"modules": ["ServiceLoader", "ColumnHandler"], "class_members": [{"name": "columns", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that more than one ColumnHandler is found, indicating that core handlers were loaded."}, {"name": "testFindMoreThanLocalProperties", "primary_tested": ["ServiceLoader.load(Class)"], "external_dependencies": {"modules": ["ServiceLoader", "PropertyHandler"], "class_members": [{"name": "properties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that more than one PropertyHandler is found, indicating that core handlers were loaded."}, {"name": "testFindsLocalColumnHandler", "primary_tested": ["ServiceLoader.load(Class)"], "associated_methods": ["TestColumnHandler.apply(ResultSet,int)", "TestColumnHandler.match(Class)"], "external_dependencies": {"modules": ["ServiceLoader", "ColumnHandler", "TestColumnHandler"], "class_members": [{"name": "columns", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the local TestColumnHandler is found among the loaded ColumnHandlers."}, {"name": "testFindsLocalPropertyHandler", "primary_tested": ["ServiceLoader.load(Class)"], "associated_methods": ["TestPropertyHandler.apply(Class,Object)", "TestPropertyHandler.match(Class,Object)"], "external_dependencies": {"modules": ["ServiceLoader", "PropertyHandler", "TestPropertyHandler"], "class_members": [{"name": "properties", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Verifies that the local TestPropertyHandler is found among the loaded PropertyHandlers."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/GenerousBeanProcessorTest.java", "testclass_name": "GenerousBeanProcessorTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertNotNull;", "import static org.mockito.Mockito.when;", "import java.beans.PropertyDescriptor;", "import java.sql.ResultSetMetaData;", "import org.junit.Before;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.Mock;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "GenerousBeanProcessorTest", "description": "Unit tests for the GenerousBeanProcessor class, focusing on mapping columns to properties.", "class_members": {"variables": [{"name": "processor", "type": "GenerousBeanProcessor"}, {"name": "metaData", "type": "ResultSetMetaData"}, {"name": "propDescriptors", "type": "PropertyDescriptor[]"}], "nested_classes": [{"name": "TestBean", "description": "Internal test bean class with properties one, two, and three."}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testMapColumnsToPropertiesColumnLabelIsNull", "primary_tested": ["GenerousBeanProcessor.mapColumnsToProperties(ResultSetMetaData,PropertyDescriptor[])"], "external_dependencies": {"modules": ["ResultSetMetaData", "GenerousBeanProcessor"], "class_members": [{"name": "metaData", "type": "variable"}, {"name": "propDescriptors", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the mapping of columns to properties when the column label is null."}, {"name": "testMapColumnsToPropertiesMixedCase", "primary_tested": ["GenerousBeanProcessor.mapColumnsToProperties(ResultSetMetaData,PropertyDescriptor[])"], "external_dependencies": {"modules": ["ResultSetMetaData", "GenerousBeanProcessor"], "class_members": [{"name": "metaData", "type": "variable"}, {"name": "propDescriptors", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the mapping of columns to properties with mixed case column labels."}, {"name": "testMapColumnsToPropertiesWithOutUnderscores", "primary_tested": ["GenerousBeanProcessor.mapColumnsToProperties(ResultSetMetaData,PropertyDescriptor[])"], "external_dependencies": {"modules": ["ResultSetMetaData", "GenerousBeanProcessor"], "class_members": [{"name": "metaData", "type": "variable"}, {"name": "propDescriptors", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the mapping of columns to properties without underscores in column labels."}, {"name": "testMapColumnsToPropertiesWithSpaces", "primary_tested": ["GenerousBeanProcessor.mapColumnsToProperties(ResultSetMetaData,PropertyDescriptor[])"], "external_dependencies": {"modules": ["ResultSetMetaData", "GenerousBeanProcessor"], "class_members": [{"name": "metaData", "type": "variable"}, {"name": "propDescriptors", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the mapping of columns to properties with spaces in column labels."}, {"name": "testMapColumnsToPropertiesWithUnderscores", "primary_tested": ["GenerousBeanProcessor.mapColumnsToProperties(ResultSetMetaData,PropertyDescriptor[])"], "external_dependencies": {"modules": ["ResultSetMetaData", "GenerousBeanProcessor"], "class_members": [{"name": "metaData", "type": "variable"}, {"name": "propDescriptors", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the mapping of columns to properties with underscores in column labels."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/properties/DatePropertyHandlerTest.java", "testclass_name": "DatePropertyHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers.properties;", "import static org.junit.Assert.assertEquals;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.assertTrue;", "import java.sql.Time;", "import java.sql.Timestamp;", "import java.util.Date;", "import org.junit.Before;", "import org.junit.Test;"], "name": "DatePropertyHandlerTest", "description": "Unit tests for the DatePropertyHandler class, which handles properties of type Date, Time, and Timestamp.", "class_members": {"variables": [{"name": "handler", "type": "DatePropertyHandler"}, {"name": "testValue", "type": "Date"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testApplyTypeOfDate", "primary_tested": ["DatePropertyHandler.apply(Class,Date)"], "external_dependencies": {"modules": ["DatePropertyHandler", "java.sql.Date"], "class_members": [{"name": "handler", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the apply method for Date type."}, {"name": "testApplyTypeOfTime", "primary_tested": ["DatePropertyHandler.apply(Class,Date)"], "external_dependencies": {"modules": ["DatePropertyHandler", "java.sql.Time"], "class_members": [{"name": "handler", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the apply method for Time type."}, {"name": "testApplyTypeOfTimestamp", "primary_tested": ["DatePropertyHandler.apply(Class,Date)"], "external_dependencies": {"modules": ["DatePropertyHandler", "java.sql.Timestamp"], "class_members": [{"name": "handler", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the apply method for Timestamp type."}, {"name": "testMatch", "primary_tested": ["DatePropertyHandler.match(Class,Date)"], "external_dependencies": {"modules": ["DatePropertyHandler", "java.sql.Date", "java.sql.Time", "java.sql.Timestamp"], "class_members": [{"name": "handler", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the match method for Date, Time, and Timestamp types."}, {"name": "testMatchNegative", "primary_tested": ["DatePropertyHandler.match(Class,Date)"], "external_dependencies": {"modules": ["DatePropertyHandler", "java.lang.Float"], "class_members": [{"name": "handler", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the match method for negative cases with Float type."}, {"name": "testNotMatch", "primary_tested": ["DatePropertyHandler.match(Class,Date)"], "external_dependencies": {"modules": ["DatePropertyHandler", "java.sql.Timestamp"], "class_members": [{"name": "handler", "type": "variable"}, {"name": "testValue", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the match method for a case where it should not match Timestamp type."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/handlers/BeanMapHandlerTest.java", "testclass_name": "BeanMapHandlerTest", "dependencies": ["package org.apache.commons.dbutils.handlers;", "import static org.junit.Assert.assertNotNull;", "import static org.junit.Assert.assertNull;", "import static org.mockito.Mockito.when;", "import java.sql.ResultSet;", "import java.sql.ResultSetMetaData;", "import java.util.Map;", "import org.apache.commons.dbutils.RowProcessor;", "import org.apache.commons.dbutils.TestBean;", "import org.junit.Before;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.Mock;", "import org.mockito.junit.MockitoJUnitRunner;"], "name": "BeanMapHandlerTest", "description": "Unit tests for the BeanMapHandler class, which handles ResultSet to Map<Long, TestBean> conversion.", "class_members": {"variables": [{"name": "bmh", "type": "BeanMapHandler<Long, TestBean>"}, {"name": "res", "type": "Map<Long, TestBean>"}, {"name": "rs", "type": "ResultSet"}, {"name": "rsmd", "type": "ResultSetMetaData"}, {"name": "rp", "type": "RowProcessor"}], "methods": [{"name": "handle", "signature": "void handle() throws Exception"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testBeanMapHandlerClassOfV", "primary_tested": ["BeanMapHandler.handle(ResultSet)"], "associated_methods": ["BeanMapHandler.handle()"], "external_dependencies": {"modules": ["BeanMapHandler", "TestBean", "ResultSet"], "class_members": [{"name": "bmh", "type": "variable"}, {"name": "rs", "type": "variable"}, {"name": "handle", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BeanMapHandler constructor with TestBean class and default key column index."}, {"name": "testBeanMapHandlerClassOfVInt", "primary_tested": ["BeanMapHandler.handle(ResultSet)"], "associated_methods": ["BeanMapHandler.handle()"], "external_dependencies": {"modules": ["BeanMapHandler", "TestBean", "ResultSet"], "class_members": [{"name": "bmh", "type": "variable"}, {"name": "rs", "type": "variable"}, {"name": "handle", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BeanMapHandler constructor with TestBean class and specified key column index."}, {"name": "testBeanMapHandlerClassOfVRowProcessor", "primary_tested": ["BeanMapHandler.handle(ResultSet)"], "associated_methods": ["BeanMapHandler.handle()"], "external_dependencies": {"modules": ["BeanMapHandler", "TestBean", "ResultSet", "RowProcessor"], "class_members": [{"name": "bmh", "type": "variable"}, {"name": "rs", "type": "variable"}, {"name": "rp", "type": "variable"}, {"name": "handle", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BeanMapHandler constructor with TestBean class and specified RowProcessor."}, {"name": "testBeanMapHandlerClassOfVString", "primary_tested": ["BeanMapHandler.handle(ResultSet)"], "associated_methods": ["BeanMapHandler.handle()"], "external_dependencies": {"modules": ["BeanMapHandler", "TestBean", "ResultSet"], "class_members": [{"name": "bmh", "type": "variable"}, {"name": "rs", "type": "variable"}, {"name": "handle", "type": "method"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BeanMapHandler constructor with TestBean class and specified key column name."}, {"name": "testEmptyResultSet", "primary_tested": ["BeanMapHandler.handle(ResultSet)"], "external_dependencies": {"modules": ["BeanMapHandler", "TestBean", "ResultSet"], "class_members": [{"name": "bmh", "type": "variable"}, {"name": "rs", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the BeanMapHandler behavior when handling an empty ResultSet."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/DbUtilsTest.java", "testclass_name": "DbUtilsTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.assertFalse;", "import static org.junit.Assert.fail;", "import static org.mockito.Mockito.doThrow;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.reset;", "import static org.mockito.Mockito.verify;", "import java.sql.Connection;", "import java.sql.Driver;", "import java.sql.ResultSet;", "import java.sql.SQLException;", "import java.sql.Statement;", "import java.util.Properties;", "import org.junit.After;", "import org.junit.Before;", "import org.junit.Test;"]}, {"file_path": "src/test/java/org/apache/commons/dbutils/QueryRunnerTest.java", "testclass_name": "QueryRunnerTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.fail;", "import static org.mockito.ArgumentMatchers.any;", "import static org.mockito.ArgumentMatchers.eq;", "import static org.mockito.Mockito.doThrow;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.never;", "import static org.mockito.Mockito.times;", "import static org.mockito.Mockito.verify;", "import static org.mockito.Mockito.when;", "import java.sql.CallableStatement;", "import java.sql.Connection;", "import java.sql.ParameterMetaData;", "import java.sql.PreparedStatement;", "import java.sql.ResultSet;", "import java.sql.ResultSetMetaData;", "import java.sql.SQLException;", "import java.sql.Statement;", "import java.sql.Types;", "import java.util.ArrayList;", "import java.util.List;", "import javax.sql.DataSource;", "import org.apache.commons.dbutils.handlers.ArrayHandler;", "import org.apache.commons.dbutils.handlers.ScalarHandler;", "import org.junit.Assert;", "import org.junit.Before;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.Mock;", "import org.mockito.invocation.InvocationOnMock;", "import org.mockito.junit.MockitoJUnitRunner;", "import org.mockito.stubbing.Answer;"]}, {"file_path": "src/test/java/org/apache/commons/dbutils/AsyncQueryRunnerTest.java", "testclass_name": "AsyncQueryRunnerTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.fail;", "import static org.mockito.ArgumentMatchers.any;", "import static org.mockito.Mockito.doThrow;", "import static org.mockito.Mockito.mock;", "import static org.mockito.Mockito.times;", "import static org.mockito.Mockito.verify;", "import static org.mockito.Mockito.when;", "import java.sql.Connection;", "import java.sql.ParameterMetaData;", "import java.sql.PreparedStatement;", "import java.sql.ResultSet;", "import java.sql.SQLException;", "import java.sql.Statement;", "import java.util.concurrent.ExecutionException;", "import java.util.concurrent.Executors;", "import java.util.concurrent.Future;", "import java.util.concurrent.TimeUnit;", "import javax.sql.DataSource;", "import org.apache.commons.dbutils.handlers.ArrayHandler;", "import org.junit.Before;", "import org.junit.Test;", "import org.junit.runner.RunWith;", "import org.mockito.Mock;", "import org.mockito.junit.MockitoJUnitRunner;"]}, {"file_path": "src/test/java/org/apache/commons/dbutils/OutParameter_toStringTest.java", "testclass_name": "OutParameter_toStringTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.assertEquals;", "import java.sql.Types;", "import org.junit.Before;", "import org.junit.Test;"], "name": "OutParameter_toStringTest", "description": "Unit tests for the toString method of the OutParameter class.", "class_members": {"variables": [{"name": "parameter", "type": "OutParameter<Number>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testToStringWithNullValue", "primary_tested": ["OutParameter.toString()"], "external_dependencies": {"modules": ["OutParameter", "Types"], "class_members": [{"name": "parameter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of OutParameter when the value is null."}, {"name": "testToStringWithValue", "primary_tested": ["OutParameter.toString()"], "associated_methods": ["OutParameter.setValue(Number)"], "external_dependencies": {"modules": ["OutParameter", "Types"], "class_members": [{"name": "parameter", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the toString method of OutParameter when the value is set."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_removeTest.java", "testclass_name": "ResultSetIterator_removeTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.*;", "import static org.mockito.Mockito.*;", "import java.sql.ResultSet;", "import java.sql.SQLException;", "import org.junit.Before;", "import org.junit.Test;"], "name": "ResultSetIterator_removeTest", "description": "Unit tests for the remove method of ResultSetIterator.", "class_members": {"variables": [{"name": "resultSetIterator", "type": "ResultSetIterator"}, {"name": "mockResultSet", "type": "ResultSet"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testRemoveSuccess", "primary_tested": ["ResultSetIterator.remove()"], "associated_methods": ["ResultSetIterator.next()"], "external_dependencies": {"modules": ["ResultSet", "ResultSetIterator"], "class_members": [{"name": "resultSetIterator", "type": "variable"}, {"name": "mockResultSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the successful removal of a row using the remove method of ResultSetIterator."}, {"name": "testRemoveThrowsSQLException", "primary_tested": ["ResultSetIterator.remove()"], "associated_methods": ["ResultSetIterator.next()"], "external_dependencies": {"modules": ["ResultSet", "ResultSetIterator"], "class_members": [{"name": "resultSetIterator", "type": "variable"}, {"name": "mockResultSet", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that the remove method of ResultSetIterator throws a RuntimeException when an SQLException is encountered."}]}, {"file_path": "src/test/java/org/apache/commons/dbutils/ResultSetIterator_hasNextTest.java", "testclass_name": "ResultSetIterator_hasNextTest", "dependencies": ["package org.apache.commons.dbutils;", "import static org.junit.Assert.*;", "import static org.mockito.Mockito.*;", "import java.sql.ResultSet;", "import java.sql.SQLException;", "import org.junit.Before;", "import org.junit.Test;"], "name": "ResultSetIterator_hasNextTest", "description": "Unit tests for the hasNext method of ResultSetIterator.", "class_members": {"variables": [{"name": "resultSet", "type": "ResultSet"}, {"name": "resultSetIterator", "type": "ResultSetIterator"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testHasNextReturnsTrueWhenNotLast", "primary_tested": ["ResultSetIterator.hasNext()"], "external_dependencies": {"modules": ["ResultSet", "ResultSetIterator"], "class_members": [{"name": "resultSet", "type": "variable"}, {"name": "resultSetIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that hasNext returns true when the result set is not at the last row."}, {"name": "testHasNextReturnsFalseWhenLast", "primary_tested": ["ResultSetIterator.hasNext()"], "external_dependencies": {"modules": ["ResultSet", "ResultSetIterator"], "class_members": [{"name": "resultSet", "type": "variable"}, {"name": "resultSetIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that hasNext returns false when the result set is at the last row."}, {"name": "testHasNextThrowsRuntimeExceptionOnSQLException", "primary_tested": ["ResultSetIterator.hasNext()"], "external_dependencies": {"modules": ["ResultSet", "ResultSetIterator"], "class_members": [{"name": "resultSet", "type": "variable"}, {"name": "resultSetIterator", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests that hasNext throws a RuntimeException when a SQLException is encountered."}]}]