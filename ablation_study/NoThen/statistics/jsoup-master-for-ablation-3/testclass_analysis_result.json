[{"file_path": "src/test/java/org/jsoup/select/SelectorIT.java", "testclass_name": "SelectorIT", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SelectorIT", "description": "Integration test for multi-threaded selection functionality in Jsoup.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "ThreadCatcher", "description": "Internal helper class to catch uncaught exceptions in threads."}]}, "fixtures": [], "test_cases": [{"name": "multiThreadHas", "primary_tested": ["Document.select(Evaluator)"], "associated_methods": ["Element.id()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Evaluator", "QueryParser", "Elements", "AtomicInteger", "Thread"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the multi-threaded selection functionality of the Document class using Jsoup."}]}, {"file_path": "src/test/java/org/jsoup/integration/SafelistExtensionTest.java", "testclass_name": "SafelistExtensionTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Element;", "import org.jsoup.safety.Safelist;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "SafelistExtensionTest", "description": "Integration tests for customizing safe tests using Safelist.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "OpenSafelist", "description": "Custom Safelist class that allows tags and attributes starting with 'open'."}]}, "fixtures": [], "test_cases": [{"name": "canCustomizeSafeTests", "primary_tested": ["Jsoup.clean(String,Safelist)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "TextUtil", "Safelist", "OpenSafelist"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": [], "description": "Tests the customization of safe tests by allowing tags and attributes starting with 'open'."}]}, {"file_path": "src/test/java/org/jsoup/parser/ParserIT.java", "testclass_name": "ParserIT", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "ParserIT", "description": "Integration tests for the Parser class in the jsoup library.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIssue1251", "primary_tested": ["Parser.htmlParser().setTrackErrors(int).parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "StringBuilder"]}, "category": "integration", "description": "Tests the handling of a specific issue (Issue 1251) related to parsing large HTML strings with errors."}, {"name": "handlesDeepStack", "primary_tested": ["Parser.parseBodyFragment(String,String)"], "associated_methods": ["Document.body().childNodeSize()", "Document.select(String).size()"], "external_dependencies": {"modules": ["Parser", "Document", "StringBuilder"]}, "category": "integration", "description": "Tests the handling of deep stack scenarios by parsing a very large HTML fragment and verifying the resulting document structure."}]}, {"file_path": "src/test/java/org/jsoup/parser/ParserTest.java", "testclass_name": "ParserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import java.io.ByteArrayInputStream;", "import java.io.IOException;", "import java.nio.charset.StandardCharsets;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "ParserTest", "description": "Unit tests for the Parser class, focusing on entity unescaping and UTF-8 parsing.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "unescapeEntities", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the unescaping of HTML entities in a string."}, {"name": "unescapeEntitiesHandlesLargeInput", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the unescaping of HTML entities in a large input string."}, {"name": "testUtf8", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "associated_methods": ["Document.selectFirst(String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests the parsing of UTF-8 encoded input stream to ensure correct character representation."}]}, {"file_path": "src/test/java/org/jsoup/helper/ValidateTest.java", "testclass_name": "ValidateTest", "dependencies": ["package org.jsoup.helper;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ValidateTest", "description": "Unit tests for the Validate class, focusing on validation methods like notNull and notNullParam.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNotNull", "primary_tested": ["Validate.notNull(Object)"], "external_dependencies": {"modules": ["Validate", "IllegalArgumentException"]}, "category": "unit", "description": "Tests the notNull method of the Validate class to ensure it correctly handles non-null and null inputs."}, {"name": "stacktraceFiltersOutValidateClass", "primary_tested": ["Validate.notNull(Object)"], "associated_methods": ["ValidationException.getMessage()", "ValidationException.getStackTrace()"], "external_dependencies": {"modules": ["Validate", "ValidationException", "StackTraceElement"]}, "category": "unit", "description": "Tests that the stack trace of a ValidationException does not include the Validate class."}, {"name": "nonnullParam", "primary_tested": ["Validate.notNullParam(Object,String)"], "associated_methods": ["ValidationException.getMessage()"], "external_dependencies": {"modules": ["Validate", "ValidationException"]}, "category": "unit", "description": "Tests the notNullParam method of the Validate class to ensure it correctly handles null inputs and provides the correct error message."}]}, {"file_path": "src/test/java/org/jsoup/parser/HtmlTreeBuilderTest.java", "testclass_name": "HtmlTreeBuilderTest", "dependencies": ["package org.jsoup.parser;", "import org.jspecify.annotations.NullMarked;", "import org.junit.jupiter.api.Test;", "import java.io.Reader;", "import java.lang.annotation.Annotation;", "import java.lang.reflect.Method;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "HtmlTreeBuilderTest", "description": "Unit tests for the HtmlTreeBuilder class, focusing on ensuring sorted arrays and non-null assertions.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "ensureSearchArraysAreSorted", "primary_tested": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "HtmlTreeBuilderStateTest.ensureSorted(List)"], "external_dependencies": {"modules": ["HtmlTreeBuilder", "HtmlTreeBuilderStateTest"], "project_specific_resources": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "HtmlTreeBuilderStateTest.ensureSorted(List)"]}, "category": "unit", "description": "Ensures that the search arrays in HtmlTreeBuilder are sorted."}, {"name": "nonnull", "primary_tested": ["HtmlTreeBuilder.parse(Reader,String,ParseErrorList)"], "external_dependencies": {"modules": ["HtmlTreeBuilder"]}, "category": "unit", "description": "Tests that passing null values to HtmlTreeBuilder.parse throws an IllegalArgumentException."}, {"name": "nonnullAssertions", "primary_tested": ["TreeBuilder.class.getPackage().getDeclaredAnnotations()"], "associated_methods": ["NullMarked.class.isAssignableFrom(Class)"], "external_dependencies": {"modules": ["TreeBuilder", "NullMarked"]}, "category": "unit", "description": "Tests that the TreeBuilder class has the NullMarked annotation."}]}, {"file_path": "src/test/java/org/jsoup/integration/FuzzFixesIT.java", "testclass_name": "FuzzFixesIT", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Assertions;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.File;", "import java.io.IOException;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "FuzzFixesIT", "description": "Integration tests for fuzz fixes in Jsoup HTML and XML parsing.", "class_members": {"variables": [{"name": "numIters", "type": "static int"}, {"name": "timeout", "type": "static int"}, {"name": "testDir", "type": "static File"}], "methods": [{"name": "testFiles", "signature": "private static Stream<File> testFiles()"}]}, "fixtures": [], "test_cases": [{"name": "testHtmlParse", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Assertions"], "class_members": [{"name": "numIters", "type": "variable"}, {"name": "timeout", "type": "variable"}, {"name": "testDir", "type": "variable"}, {"name": "testFiles", "type": "method"}]}, "category": "integration", "description": "Tests the HTML parsing functionality of Jsoup with multiple iterations and a timeout."}, {"name": "testXmlParse", "primary_tested": ["Jsoup.parse(File,String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Parser", "Assertions"], "class_members": [{"name": "numIters", "type": "variable"}, {"name": "timeout", "type": "variable"}, {"name": "testDir", "type": "variable"}, {"name": "testFiles", "type": "method"}]}, "category": "integration", "description": "Tests the XML parsing functionality of Jsoup with multiple iterations and a timeout."}]}, {"file_path": "src/test/java/org/jsoup/nodes/DocumentTypeTest.java", "testclass_name": "DocumentTypeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;"], "name": "DocumentTypeTest", "description": "Unit tests for the DocumentType class, focusing on constructor validation and HTML generation.", "class_members": {"methods": [{"name": "htmlOutput", "signature": "private String htmlOutput(String in)"}, {"name": "xmlOutput", "signature": "private String xmlOutput(String in)"}]}, "fixtures": [], "test_cases": [{"name": "constructorValidationOkWithBlankName", "primary_tested": ["DocumentType.DocumentType(String,String,String)"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests the DocumentType constructor with blank name, public ID, and system ID."}, {"name": "constructorValidationThrowsExceptionOnNulls", "primary_tested": ["DocumentType.DocumentType(String,String,String)"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests that the DocumentType constructor throws an IllegalArgumentException when given null public and system IDs."}, {"name": "constructorValidationOkWithBlankPublicAndSystemIds", "primary_tested": ["DocumentType.DocumentType(String,String,String)"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests the DocumentType constructor with a valid name and blank public and system IDs."}, {"name": "outerHtmlGeneration", "primary_tested": ["DocumentType.outerHtml()"], "associated_methods": ["DocumentType.name()", "DocumentType.publicId()", "DocumentType.systemId()"], "external_dependencies": {"modules": ["DocumentType"]}, "category": "unit", "description": "Tests the generation of outer HTML for different DocumentType configurations."}, {"name": "testRoundTrip", "primary_tested": ["DocumentType.outerHtml()"], "associated_methods": ["Jsoup.parse(String)", "Jsoup.parse(String,String,Parser)", "DocumentType.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Parser", "DocumentType"], "class_members": [{"name": "htmlOutput", "type": "method"}, {"name": "xmlOutput", "type": "method"}]}, "category": "unit", "description": "Tests the round-trip parsing and generation of HTML for different DocumentType configurations."}]}, {"file_path": "src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java", "testclass_name": "HtmlTreeBuilderStateTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.parser.HtmlTreeBuilderState.Constants;", "import org.junit.jupiter.api.Test;", "import java.lang.reflect.Field;", "import java.lang.reflect.Modifier;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import static org.jsoup.parser.HtmlTreeBuilderState.Constants.InBodyStartInputAttribs;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "HtmlTreeBuilderStateTest", "description": "Tests for ensuring the correctness and consistency of HTML tree builder states.", "class_members": {"methods": [{"name": "findConstantArrays", "signature": "static List<Object[]> findConstantArrays(Class aClass)"}, {"name": "ensureSorted", "signature": "static void ensureSorted(List<Object[]> constants)"}]}, "test_cases": [{"name": "ensureArraysAreSorted", "primary_tested": ["Arrays.sort(Object[])"], "associated_methods": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "HtmlTreeBuilderStateTest.ensureSorted(List<Object[]>)"], "external_dependencies": {"modules": ["Arrays", "HtmlTreeBuilderState.Constants"], "class_members": [{"name": "findConstantArrays", "type": "method"}, {"name": "ensureSorted", "type": "method"}]}, "category": "unit", "description": "Ensures that the arrays of constants are sorted."}, {"name": "ensureTagSearchesAreKnownTags", "primary_tested": ["Tag.isKnownTag(String)"], "associated_methods": ["HtmlTreeBuilderStateTest.findConstantArrays(Class)", "StringUtil.inSorted(String, String[])"], "external_dependencies": {"modules": ["HtmlTreeBuilderState.Constants", "Tag", "StringUtil"], "class_members": [{"name": "findConstantArrays", "type": "method"}]}, "category": "unit", "description": "Ensures that all tag names in the constants are known tags."}, {"name": "nestedAnchorElements01", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.toString()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the parsing of nested anchor elements in HTML."}, {"name": "nestedAnchorElements02", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.toString()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the parsing of nested anchor elements in HTML with an additional nested div."}]}, {"file_path": "src/test/java/org/jsoup/integration/SessionIT.java", "testclass_name": "SessionIT", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.integration.servlets.SlowRider;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.io.UncheckedIOException;", "import java.util.Set;", "import java.util.concurrent.ConcurrentHashMap;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SessionIT", "description": "Integration tests for session handling in Jsoup, focusing on multi-threaded scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "ThreadCatcher", "description": "Internal helper class to catch uncaught exceptions in threads"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "multiThread", "primary_tested": ["Connection.newRequest().url(String).get()"], "associated_methods": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "FileServlet", "ThreadCatcher"], "class_members": [{"name": "ThreadCatcher", "type": "nested_class"}], "project_specific_resources": ["FileServlet.urlTo(String)"]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests multi-threaded session handling by fetching multiple URLs concurrently and verifying the titles of the fetched documents."}, {"name": "multiThreadWithoutNewRequestBlowsUp", "primary_tested": ["Connection.url(String).get()"], "associated_methods": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "SlowRider", "ThreadCatcher"], "class_members": [{"name": "ThreadCatcher", "type": "nested_class"}], "project_specific_resources": ["SlowRider.Url", "SlowRider.MaxTimeParam"]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests that an exception is thrown when attempting to use a single connection in a multi-threaded environment without creating new requests for each thread."}, {"name": "multiThreadWithProgressListener", "primary_tested": ["Connection.newRequest().url(String).get()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "FileServlet", "ThreadCatcher"], "class_members": [{"name": "ThreadCatcher", "type": "nested_class"}], "project_specific_resources": ["FileServlet.urlTo(String)"]}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests multi-threaded session handling with a progress listener, ensuring that the listener can handle multiple URLs and threads."}]}, {"file_path": "src/test/java/org/jsoup/parser/AttributeParseTest.java", "testclass_name": "AttributeParseTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Attributes;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "AttributeParseTest", "description": "Unit tests for parsing attributes in HTML elements using Jsoup.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "parsesRoughAttributeString", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes"]}, "category": "unit", "description": "Tests the parsing of a rough attribute string in an HTML element."}, {"name": "handlesNewLinesAndReturns", "primary_tested": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Element"]}, "category": "unit", "description": "Tests the handling of new lines and returns in attribute values."}, {"name": "parsesEmptyString", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes"]}, "category": "unit", "description": "Tests the parsing of an empty attribute string in an HTML element."}, {"name": "canStartWithEq", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes"]}, "category": "unit", "description": "Tests the parsing of an attribute that starts with an equal sign."}, {"name": "strictAttributeUnescapes", "primary_tested": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Element", "Elements"]}, "category": "unit", "description": "Tests the unescaping of attributes in strict mode."}, {"name": "moreAttributeUnescapes", "primary_tested": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Element", "Elements"]}, "category": "unit", "description": "Tests the unescaping of more complex attribute values."}, {"name": "parsesBooleanAttributes", "primary_tested": ["Element.attr(String)", "Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Element", "Attributes", "Attribute"]}, "category": "unit", "description": "Tests the parsing of boolean attributes in an HTML element."}, {"name": "dropsSlashFromAttributeName", "primary_tested": ["Element.attributes()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Parser"]}, "category": "unit", "description": "Tests the dropping of a slash from the attribute name in an HTML element."}]}, {"file_path": "src/test/java/org/jsoup/integration/SessionTest.java", "testclass_name": "SessionTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.servlets.CookieServlet;", "import org.jsoup.integration.servlets.EchoServlet;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "SessionTest", "description": "Integration tests for session management and cookie handling in Jsoup.", "class_members": {"methods": [{"name": "keyEls", "signature": "private static Elements keyEls(String key, Document doc)"}, {"name": "keyText", "signature": "private static String keyText(String key, Document doc)"}, {"name": "assertCookieServlet", "signature": "private void assertCookieServlet(Document doc)"}, {"name": "assertEchoServlet", "signature": "private void assertEchoServlet(Document doc)"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testPathScopedCookies", "primary_tested": ["Jsoup.newSession()", "Connection.newRequest()", "Connection.get()", "Connection.response().cookies()"], "associated_methods": ["Document.select(String)", "Document.location()", "Elements.first().text()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "Elements", "CookieServlet", "EchoServlet"], "class_members": [{"name": "keyEls", "type": "method"}, {"name": "keyText", "type": "method"}, {"name": "assertCookieServlet", "type": "method"}, {"name": "assertEchoServlet", "type": "method"}], "project_specific_resources": []}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests the handling of path-scoped cookies in a session, including setting, retrieving, and verifying cookies across different paths and servlets."}, {"name": "testPathScopedCookiesOnRedirect", "primary_tested": ["Jsoup.newSession()", "Connection.newRequest()", "Connection.get()", "Connection.response().cookies()"], "associated_methods": ["Document.location()", "Elements.first().text()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "Elements", "CookieServlet", "EchoServlet"], "class_members": [{"name": "keyEls", "type": "method"}, {"name": "keyText", "type": "method"}, {"name": "assertCookieServlet", "type": "method"}, {"name": "assertEchoServlet", "type": "method"}], "project_specific_resources": []}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests the handling of path-scoped cookies during redirects, ensuring cookies are correctly managed and verified across different servlets."}, {"name": "testCanChangeParsers", "primary_tested": ["Jsoup.newSession()", "Connection.newRequest()", "Connection.get()", "Connection.parser(Parser)"], "associated_methods": ["Document.html()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "Document", "Parser", "FileServlet"], "class_members": [], "project_specific_resources": []}, "category": "integration", "fixtures_used": ["setUp"], "description": "Tests the ability to change parsers within a session, ensuring that different parsers (HTML and XML) can be used and their effects verified."}]}, {"file_path": "src/test/java/org/jsoup/select/QueryParserTest.java", "testclass_name": "QueryParserTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import static org.jsoup.select.EvaluatorDebug.sexpr;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "QueryParserTest", "description": "Unit tests for the QueryParser class, focusing on parsing and evaluating CSS selectors.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testConsumeSubQuery", "primary_tested": ["Document.select(String)"], "associated_methods": ["Document.text()"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests the ability to select elements using CSS selectors and verify their text content."}, {"name": "testImmediateParentRun", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing of a CSS selector into an S-expression representing immediate parent relationships."}, {"name": "testOrGetsCorrectPrecedence", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the correct precedence of OR operations in CSS selector parsing."}, {"name": "testParsesMultiCorrectly", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing of a complex multi-part CSS selector into an S-expression."}, {"name": "exceptionOnUncloseAttribute", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing an unclosed attribute in a CSS selector."}, {"name": "testParsesSingleQuoteInContains", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing a CSS selector with an unclosed single quote in a contains pseudo-class."}, {"name": "exceptOnEmptySelector", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing an empty CSS selector."}, {"name": "exceptOnNullSelector", "primary_tested": ["QueryParser.parse(String)"], "external_dependencies": {"modules": ["QueryParser", "Selector.SelectorParseException"], "class_members": []}, "category": "unit", "description": "Tests that an exception is thrown when parsing a null CSS selector."}, {"name": "okOnSpacesForeAndAft", "primary_tested": ["QueryParser.parse(String)"], "associated_methods": ["Evaluator.toString()"], "external_dependencies": {"modules": ["QueryParser", "Evaluator"], "class_members": []}, "category": "unit", "description": "Tests that the parser correctly handles CSS selectors with leading and trailing spaces."}, {"name": "structuralEvaluatorsToString", "primary_tested": ["QueryParser.parse(String)"], "associated_methods": ["Evaluator.toString()", "EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["QueryParser", "Evaluator", "EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing and string representation of structural evaluators in CSS selectors."}, {"name": "parsesOrAfterAttribute", "primary_tested": ["EvaluatorDebug.sexpr(String)"], "external_dependencies": {"modules": ["EvaluatorDebug"], "class_members": []}, "category": "unit", "description": "Tests the parsing of OR operations following an attribute selector in CSS selectors."}]}, {"file_path": "src/test/java/org/jsoup/nodes/LeafNodeTest.java", "testclass_name": "LeafNodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.select.Elements;", "import org.jsoup.select.NodeFilter;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "LeafNodeTest", "description": "Tests to ensure that attributes are not set on all nodes right away.", "class_members": {"methods": [{"name": "hasAnyAttributes", "signature": "boolean hasAnyAttributes(Node node)"}]}, "fixtures": [], "test_cases": [{"name": "doesNotGetAttributesTooEasily", "primary_tested": ["Document.parse(String)", "Element.hasAttributes()", "Element.outerHtml()", "Elements.select(String)", "Element.id()", "Element.hasClass(String)", "Element.addClass(String)", "Element.attributes()", "Attributes.hasKey(String)", "Element.clearAttributes()"], "associated_methods": ["Elements.first()", "Elements.size()", "Element.hasClass(String)", "Element.addClass(String)", "Element.attributes()", "Attributes.hasKey(String)", "Element.clearAttributes()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements", "Attributes"], "class_members": [{"name": "hasAnyAttributes", "type": "method"}]}, "category": "unit", "description": "Tests that attributes are not set on all nodes right away by parsing HTML, selecting elements, and checking attributes."}]}, {"file_path": "src/test/java/org/jsoup/nodes/AttributeTest.java", "testclass_name": "AttributeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "AttributeTest", "description": "Unit tests for the Attribute class in the Jsoup library.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "html", "primary_tested": ["Attribute.html()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the html method of the Attribute class to ensure it correctly formats the attribute."}, {"name": "testWithSupplementaryCharacterInAttributeKeyAndValue", "primary_tested": ["Attribute.html()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the html method with supplementary characters in the attribute key and value."}, {"name": "validatesKeysNotEmpty", "primary_tested": ["Attribute.Attribute(String,String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests that the Attribute constructor validates keys are not empty."}, {"name": "validatesKeysNotEmptyViaSet", "primary_tested": ["Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests that the setKey method validates keys are not empty."}, {"name": "booleanAttributesAreEmptyStringValues", "primary_tested": ["Attributes.get(String)", "Attribute.getKey()", "Attribute.getValue()", "Attribute.hasDeclaredValue()", "Attribute.isBooleanAttribute(String)"], "associated_methods": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests that boolean attributes have empty string values and are correctly identified."}, {"name": "settersOnOrphanAttribute", "primary_tested": ["Attribute.setKey(String)", "Attribute.setValue(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the setters on an orphan Attribute object."}, {"name": "hasValue", "primary_tested": ["Attribute.hasDeclaredValue()"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests the hasDeclaredValue method to check if an attribute has a declared value."}, {"name": "canSetValueToNull", "primary_tested": ["Attribute.setValue(String)"], "external_dependencies": {"modules": ["Attribute"], "class_members": []}, "category": "unit", "description": "Tests that the setValue method can set the value to null."}, {"name": "booleanAttributesAreNotCaseSensitive", "primary_tested": ["Attribute.isBooleanAttribute(String)"], "associated_methods": ["Jsoup.parse(String)", "Jsoup.parse(String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Attribute", "Parser", "ParseSettings"], "class_members": []}, "category": "unit", "description": "Tests that boolean attributes are not case-sensitive and are correctly parsed."}]}, {"file_path": "src/test/java/org/jsoup/safety/SafelistTest.java", "testclass_name": "SafelistTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.helper.ValidationException;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.Attributes;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SafelistTest", "description": "Unit tests for the Safelist class, focusing on the copy constructor and validation of tags, attributes, and protocols.", "class_members": {"variables": [{"name": "TEST_TAG", "type": "static final String"}, {"name": "TEST_ATTRIBUTE", "type": "static final String"}, {"name": "TEST_SCHEME", "type": "static final String"}, {"name": "TEST_VALUE", "type": "static final String"}]}, "fixtures": [], "test_cases": [{"name": "testCopyConstructor_noSideEffectOnTags", "primary_tested": ["Safelist.addTags(String)"], "external_dependencies": {"modules": ["Safelist"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on tags."}, {"name": "testCopyConstructor_noSideEffectOnAttributes", "primary_tested": ["Safelist.addAttributes(String,String)"], "external_dependencies": {"modules": ["Safelist", "Attribute"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on attributes."}, {"name": "testCopyConstructor_noSideEffectOnEnforcedAttributes", "primary_tested": ["Safelist.addEnforcedAttribute(String,String,String)"], "associated_methods": ["Safelist.getEnforcedAttributes(String)"], "external_dependencies": {"modules": ["Safelist", "Attribute"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on enforced attributes."}, {"name": "testCopyConstructor_noSideEffectOnProtocols", "primary_tested": ["Safelist.addProtocols(String,String,String)"], "associated_methods": ["Safelist.isSafeAttribute(String,Element,Attribute)"], "external_dependencies": {"modules": ["Safelist", "Attribute", "Attributes", "Element", "Tag"]}, "category": "unit", "description": "Tests that the copy constructor of Safelist does not have side effects on protocols."}, {"name": "noscriptIsBlocked", "primary_tested": ["Safelist.addTags(String)"], "external_dependencies": {"modules": ["Safelist", "ValidationException"]}, "category": "unit", "description": "Tests that the 'NOSCRIPT' tag is blocked and throws a ValidationException."}]}, {"file_path": "src/test/java/org/jsoup/integration/ParseTest.java", "testclass_name": "ParseTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.ParseErrorList;", "import org.jsoup.parser.Parser;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.io.*;", "import java.net.URISyntaxException;", "import java.net.URL;", "import java.nio.ByteBuffer;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import java.nio.file.Paths;", "import java.util.zip.GZIPInputStream;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ParseTest", "description": "Integration tests for parsing HTML documents with Jsoup.", "class_members": {"variables": [], "methods": [{"name": "getFile", "signature": "public static File getFile(String resourceName)"}, {"name": "getPath", "signature": "public static Path getPath(String resourceName)"}, {"name": "inputStreamFrom", "signature": "public static InputStream inputStreamFrom(String s)"}, {"name": "getFileAsString", "signature": "public static String getFileAsString(File file)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testHtml5Charset", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["File", "Document", "Jsoup"], "class_members": []}, "category": "integration", "description": "Tests the detection and application of HTML5 charset meta tags."}, {"name": "testBrokenHtml5CharsetWithASingleDoubleQuote", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["InputStream", "Document", "Jsoup"], "class_members": []}, "category": "integration", "description": "Tests the parsing of HTML5 charset meta tags with a single double quote."}, {"name": "testLowercaseUtf8Charset", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["File", "Document", "Jsoup", "Element"], "class_members": []}, "category": "integration", "description": "Tests the parsing of HTML documents with lowercase UTF-8 charset meta tags."}, {"name": "testXwiki", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["File", "Document", "Jsoup", "Element"], "class_members": []}, "category": "integration", "description": "Tests the parsing of XWiki documents, ensuring correct handling of buffer marks."}, {"name": "testXwikiExpanded", "primary_tested": ["Jsoup.parse(InputStream,String,String,Parser)"], "external_dependencies": {"modules": ["File", "Document", "Jsoup", "Parser", "Element", "ParseErrorList"], "class_members": []}, "category": "integration", "description": "Tests the parsing of expanded XWiki documents, ensuring correct handling of buffer marks and error tracking."}, {"name": "testWikiExpandedFromString", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["File", "Document", "Jsoup", "Element"], "class_members": []}, "category": "integration", "description": "Tests the parsing of expanded XWiki documents from a string, ensuring correct handling of buffer marks."}, {"name": "testWikiFromString", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["File", "Document", "Jsoup", "Element"], "class_members": []}, "category": "integration", "description": "Tests the parsing of XWiki documents from a string, ensuring correct handling of buffer marks."}, {"name": "testFileParseNoCharsetMethod", "primary_tested": ["Jsoup.parse(File)"], "external_dependencies": {"modules": ["File", "Document", "Jsoup"], "class_members": []}, "category": "integration", "description": "Tests the parsing of a file without specifying a charset, ensuring default charset handling."}]}, {"file_path": "src/test/java/org/jsoup/parser/TagTest.java", "testclass_name": "TagTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.junit.jupiter.api.Test;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TagTest", "description": "Unit tests for the Tag class in the Jsoup parser, focusing on tag semantics, case sensitivity, and namespace handling.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "isCaseSensitive", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation is case-sensitive."}, {"name": "canBeInsensitive", "primary_tested": ["Tag.valueOf(String,ParseSettings)"], "external_dependencies": {"modules": ["Tag", "ParseSettings", "Locale"]}, "category": "unit", "description": "Tests if the Tag creation can be case-insensitive based on locale settings."}, {"name": "trims", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation trims whitespace from the input string."}, {"name": "equality", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the equality of Tag instances created with the same input."}, {"name": "divSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isBlock()", "Tag.formatAsBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the semantic properties of the 'div' tag."}, {"name": "pSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isBlock()", "Tag.formatAsBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the semantic properties of the 'p' tag."}, {"name": "imgSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isInline()", "Tag.isSelfClosing()", "Tag.isBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the semantic properties of the 'img' tag."}, {"name": "defaultSemantics", "primary_tested": ["Tag.valueOf(String)", "Tag.isInline()", "Tag.formatAsBlock()"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the default semantic properties for an undefined tag."}, {"name": "valueOfChecksNotNull", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation throws an exception for a null input."}, {"name": "valueOfChecksNotEmpty", "primary_tested": ["Tag.valueOf(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests if the Tag creation throws an exception for an empty input."}, {"name": "knownTags", "primary_tested": ["Tag.isKnownTag(String)"], "external_dependencies": {"modules": ["Tag"]}, "category": "unit", "description": "Tests the recognition of known tags."}, {"name": "knownSvgNamespace", "primary_tested": ["Tag.valueOf(String)", "Tag.namespace()"], "external_dependencies": {"modules": ["Tag", "Parser"]}, "category": "unit", "description": "Tests the namespace handling for known SVG tags."}, {"name": "unknownTagNamespace", "primary_tested": ["Tag.valueOf(String)", "Tag.namespace()"], "external_dependencies": {"modules": ["Tag", "Parser"]}, "category": "unit", "description": "Tests the namespace handling for unknown tags."}]}, {"file_path": "src/test/java/org/jsoup/nodes/ElementIT.java", "testclass_name": "ElementIT", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ElementIT", "description": "Integration tests for the Element class in the Jsoup library, focusing on performance and overflow scenarios.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFastReparent", "primary_tested": ["Element.insertChildren(int,List<Node>)"], "associated_methods": ["Element.childNodes.size()", "Element.body().childNodes().size()", "Element.body().empty()", "Element.body().appendChild(Element)", "Element.body().children().get(int)", "Element.children().get(int).text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the performance of reparenting a large number of child nodes into a new wrapper element."}, {"name": "testFastReparentExistingContent", "primary_tested": ["Element.insertChildren(int,List<Node>)"], "associated_methods": ["Element.append(String)", "Element.childNodes.size()", "Element.body().childNodes().size()", "Element.body().empty()", "Element.body().appendChild(Element)", "Element.body().children().get(int)", "Element.children().get(int).text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the performance of reparenting a large number of child nodes into a new wrapper element that already contains some content."}, {"name": "hasTextNoOverflow", "primary_tested": ["Document.hasText()"], "associated_methods": ["Element.appendElement(String)", "Element.text(String)", "Document.text()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the hasText method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "dataNoOverflow", "primary_tested": ["Element.data()"], "associated_methods": ["Element.appendElement(String)", "Element.text(String)", "Document.data()"], "external_dependencies": {"modules": ["Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the data method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "parentsNoOverflow", "primary_tested": ["Element.parents()"], "associated_methods": ["Element.appendElement(String)", "Element.ownerDocument()"], "external_dependencies": {"modules": ["Document", "Element", "Elements"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the parents method to ensure it does not overflow when handling a large number of nested elements."}, {"name": "wrapNoOverflow", "primary_tested": ["Element.wrap(String)"], "associated_methods": ["Element.appendElement(String)", "Element.parents().size()", "Document.body().html()"], "external_dependencies": {"modules": ["Document", "Element", "Elements"], "class_members": [], "project_specific_resources": []}, "category": "performance", "fixtures_used": [], "description": "Tests the wrap method to ensure it does not overflow when handling a large number of nested elements."}]}, {"file_path": "src/test/java/org/jsoup/nodes/CommentTest.java", "testclass_name": "CommentTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CommentTest", "description": "Unit tests for the Comment class in the Jsoup library, focusing on various functionalities like node name, data retrieval, string representation, XML declaration handling, and cloning.", "class_members": {"variables": [{"name": "comment", "type": "Comment"}, {"name": "decl", "type": "Comment"}]}, "test_cases": [{"name": "nodeName", "primary_tested": ["Comment.nodeName()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the node name functionality of the Comment class, ensuring it returns '#comment'."}, {"name": "getData", "primary_tested": ["Comment.getData()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the data retrieval functionality of the Comment class, ensuring it returns the correct comment data."}, {"name": "testToString", "primary_tested": ["Comment.toString()"], "associated_methods": ["Document.body().html()", "Document.text()"], "external_dependencies": {"modules": ["Comment", "Document", "Jsoup"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the string representation functionality of the Comment class, ensuring it returns the correct HTML comment format and interacts correctly with the Document class."}, {"name": "testHtmlNoPretty", "primary_tested": ["Document.html()"], "associated_methods": ["Document.outputSettings().prettyPrint(boolean)", "Node.childNode(int)", "Comment.outerHtml()"], "external_dependencies": {"modules": ["Document", "Jsoup", "Node", "Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the HTML output functionality of the Document class with pretty print disabled, ensuring it returns the correct HTML format and interacts correctly with the Comment class."}, {"name": "stableIndentInBlock", "primary_tested": ["Document.body().html()"], "associated_methods": ["Document.body().html()"], "external_dependencies": {"modules": ["Document", "Jsoup"]}, "category": "unit", "description": "Tests the stable indentation functionality in block elements, ensuring the HTML output remains consistent after parsing."}, {"name": "testClone", "primary_tested": ["Comment.clone()"], "associated_methods": ["Comment.getData()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}]}, "category": "unit", "description": "Tests the cloning functionality of the Comment class, ensuring the cloned object is distinct and can be modified independently."}, {"name": "isXmlDeclaration", "primary_tested": ["Comment.isXmlDeclaration()"], "external_dependencies": {"modules": ["Comment"], "class_members": [{"name": "comment", "type": "variable"}, {"name": "decl", "type": "variable"}]}, "category": "unit", "description": "Tests the XML declaration detection functionality of the Comment class, ensuring it correctly identifies XML declarations."}, {"name": "asXmlDeclaration", "primary_tested": ["Comment.asXmlDeclaration()"], "external_dependencies": {"modules": ["Comment", "XmlDeclaration"], "class_members": [{"name": "decl", "type": "variable"}]}, "category": "unit", "description": "Tests the conversion to XML declaration functionality of the Comment class, ensuring it correctly converts a comment to an XML declaration."}]}, {"file_path": "src/test/java/org/jsoup/integration/FuzzFixesTest.java", "testclass_name": "FuzzFixesTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.File;", "import java.io.IOException;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertNotNull;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "FuzzFixesTest", "description": "Integration tests for Jsoup library, focusing on parsing HTML and XML documents.", "class_members": {"methods": [{"name": "testFiles", "signature": "private static Stream<File> testFiles()"}]}, "fixtures": [], "test_cases": [{"name": "blankAbsAttr", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of HTML with blank absolute attributes."}, {"name": "bookmark", "primary_tested": ["Jsoup.parse(String)", "Parser.xmlParser().parseInput(String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Parser"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of HTML and XML documents with bookmark-like input."}, {"name": "testHtmlParse", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of HTML documents from files."}, {"name": "testXmlParse", "primary_tested": ["Jsoup.parse(File,String,String,Parser)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File", "Parser"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests the parsing of XML documents from files."}]}, {"file_path": "src/test/java/org/jsoup/select/TraversorTest.java", "testclass_name": "TraversorTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.TextNode;", "import org.junit.jupiter.api.Test;", "import java.util.concurrent.atomic.AtomicBoolean;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TraversorTest", "description": "Unit tests for NodeTraversor functionalities including filtering, traversal, and element manipulation.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "filterVisit", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the filtering functionality of NodeTraversor, ensuring nodes are visited and their names are accumulated correctly."}, {"name": "filterSkipChildren", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the filtering functionality of NodeTraversor, ensuring child nodes of specified elements are skipped."}, {"name": "filterSkipEntirely", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the filtering functionality of NodeTraversor, ensuring specified elements and their children are entirely skipped."}, {"name": "filterRemove", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the filtering functionality of NodeTraversor, ensuring specified elements are removed during traversal."}, {"name": "filterStop", "primary_tested": ["NodeTraversor.filter(NodeFilter,Elements)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "TextNode", "NodeFilter", "FilterResult"]}, "category": "unit", "description": "Tests the filtering functionality of NodeTraversor, ensuring traversal stops after a specified element."}, {"name": "replaceElement", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor"]}, "category": "unit", "description": "Tests the traversal functionality of NodeTraversor, ensuring elements can be replaced during traversal."}, {"name": "canAddChildren", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor"]}, "category": "unit", "description": "Tests the traversal functionality of NodeTraversor, ensuring children can be added to elements during traversal."}, {"name": "canSpecifyOnlyHead", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor"]}, "category": "unit", "description": "Tests the traversal functionality of NodeTraversor, ensuring traversal works with only the head method specified."}, {"name": "canRemoveDuringHead", "primary_tested": ["NodeTraversor.traverse(NodeVisitor,Node)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor", "TextNode"]}, "category": "unit", "description": "Tests the traversal functionality of NodeTraversor, ensuring elements can be removed during the head method."}, {"name": "elementFunctionalTraverse", "primary_tested": ["Element.traverse(NodeVisitor)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Node", "NodeVisitor", "AtomicInteger"]}, "category": "unit", "description": "Tests the functional traversal functionality of Element, ensuring nodes are visited and counted correctly."}, {"name": "seesDocRoot", "primary_tested": ["Document.traverse(NodeVisitor)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "NodeVisitor", "AtomicBoolean"]}, "category": "unit", "description": "Tests the traversal functionality of Document, ensuring the document root is visited during traversal."}]}, {"file_path": "src/test/java/org/jsoup/internal/SoftPoolTest.java", "testclass_name": "SoftPoolTest", "dependencies": ["package org.jsoup.internal;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Set;", "import java.util.Stack;", "import java.util.concurrent.CountDownLatch;", "import java.util.concurrent.ExecutorService;", "import java.util.concurrent.Executors;", "import java.util.concurrent.atomic.AtomicInteger;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "SoftPoolTest", "description": "Unit tests for the SoftPool class, focusing on its behavior with thread-local pools and soft references.", "class_members": {"variables": [{"name": "BufSize", "type": "static final int"}, {"name": "NumThreads", "type": "static final int"}, {"name": "NumObjects", "type": "static final int"}]}, "test_cases": [{"name": "testSoftLocalPool", "primary_tested": ["SoftPool.borrow()", "SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool", "ExecutorService", "Executors", "CountDownLatch", "HashSet", "AtomicInteger"], "class_members": [{"name": "BufSize", "type": "variable"}, {"name": "NumThreads", "type": "variable"}, {"name": "NumObjects", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of the SoftPool with thread-local pools, ensuring buffers are reused within the same thread and not shared between threads."}, {"name": "testSoftReferenceBehavior", "primary_tested": ["SoftPool.borrow()", "SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool"], "class_members": [{"name": "BufSize", "type": "variable"}]}, "category": "unit", "description": "Tests the behavior of soft references in the SoftPool, ensuring objects are garbage collected when no longer in use."}, {"name": "testBorrowFromEmptyPool", "primary_tested": ["SoftPool.borrow()"], "external_dependencies": {"modules": ["SoftPool"], "class_members": [{"name": "BufSize", "type": "variable"}]}, "category": "unit", "description": "Tests borrowing from an empty SoftPool, ensuring a new object is created and returned."}, {"name": "testReleaseMoreThanMaxIdle", "primary_tested": ["SoftPool.borrow()", "SoftPool.release(char[])"], "associated_methods": ["SoftPool.getStack()"], "external_dependencies": {"modules": ["SoftPool", "ArrayList"], "class_members": [{"name": "BufSize", "type": "variable"}]}, "category": "unit", "description": "Tests releasing more objects than the MaxIdle limit, ensuring the pool size does not exceed the limit."}]}, {"file_path": "src/test/java/org/jsoup/nodes/DataNodeTest.java", "testclass_name": "DataNodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "DataNodeTest", "description": "Unit tests for the DataNode class, focusing on XML output with and without CDATA.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "xmlOutputScriptWithCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the XML output of a DataNode with CDATA within a script element."}, {"name": "xmlOutputScriptWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the XML output of a DataNode without CDATA within a script element."}, {"name": "xmlOutputStyleWithCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the XML output of a DataNode with CDATA within a style element."}, {"name": "xmlOutputStyleWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the XML output of a DataNode without CDATA within a style element."}, {"name": "xmlOutputOtherWithCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the XML output of a DataNode with CDATA within an 'other' element."}, {"name": "xmlOutputOtherWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Element", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the XML output of a DataNode without CDATA within an 'other' element."}, {"name": "xmlOutputOrphanWithoutCData", "primary_tested": ["DataNode.outerHtmlHead(StringBuilder,int,Document.OutputSettings)"], "external_dependencies": {"modules": ["DataNode", "Document.OutputSettings", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the XML output of an orphan DataNode without CDATA."}]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeStreamTest.java", "testclass_name": "NodeStreamTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.Optional;", "import java.util.stream.Stream;", "import static org.jsoup.nodes.NodeIteratorTest.trackSeen;", "import static org.jsoup.nodes.NodeIteratorTest.assertContents;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeStreamTest", "description": "Tests for the NodeStream functionality in Jsoup.", "class_members": {"variables": [{"name": "html", "type": "String"}]}, "fixtures": [], "test_cases": [{"name": "canStream", "primary_tested": ["Document.nodeStream()"], "associated_methods": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Stream", "StringBuilder"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"]}, "category": "unit", "description": "Tests the ability to stream nodes from a parsed HTML document and track the nodes seen."}, {"name": "canStreamParallel", "primary_tested": ["Document.nodeStream()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Stream"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "description": "Tests the ability to stream nodes from a parsed HTML document in parallel and count the nodes."}, {"name": "canFindFirst", "primary_tested": ["Document.nodeStream()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Optional", "Stream"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "description": "Tests the ability to find the first node in a stream of nodes from a parsed HTML document."}, {"name": "canFilter", "primary_tested": ["Document.nodeStream()"], "associated_methods": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Stream", "StringBuilder", "TextNode"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"]}, "category": "unit", "description": "Tests the ability to filter nodes in a stream from a parsed HTML document and track the text nodes seen."}, {"name": "canRemove", "primary_tested": ["Document.nodeStream()"], "associated_methods": ["Node.remove()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Node", "Stream", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.assertContents(Document,String)"]}, "category": "unit", "description": "Tests the ability to filter and remove specific nodes from a stream of nodes in a parsed HTML document."}, {"name": "elementStream", "primary_tested": ["Document.stream()"], "associated_methods": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Stream", "StringBuilder"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": ["NodeIteratorTest.trackSeen(Node,StringBuilder)"]}, "category": "unit", "description": "Tests the ability to stream elements from a parsed HTML document and track the elements seen."}]}, {"file_path": "src/test/java/org/jsoup/internal/StringUtilTest.java", "testclass_name": "StringUtilTest", "dependencies": ["package org.jsoup.internal;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import static org.jsoup.internal.StringUtil.normaliseWhitespace;", "import static org.jsoup.internal.StringUtil.resolve;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "StringUtilTest", "description": "Unit tests for StringUtil class, covering various string manipulation and utility methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "join", "primary_tested": ["StringUtil.join(List<String>,String)"], "external_dependencies": {"modules": ["StringUtil", "Collections", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the join functionality of StringUtil, ensuring it correctly concatenates list elements with a specified delimiter."}, {"name": "padding", "primary_tested": ["StringUtil.padding(int)", "StringUtil.padding(int,int)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the padding functionality of StringUtil, ensuring it correctly generates strings of spaces with specified lengths."}, {"name": "paddingInACan", "primary_tested": ["StringUtil.padding"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the memoization of padding strings in StringUtil, ensuring the correct lengths are maintained."}, {"name": "isBlank", "primary_tested": ["StringUtil.isBlank(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isBlank functionality of StringUtil, ensuring it correctly identifies blank strings."}, {"name": "isNumeric", "primary_tested": ["StringUtil.isNumeric(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isNumeric functionality of StringUtil, ensuring it correctly identifies numeric strings."}, {"name": "isWhitespace", "primary_tested": ["StringUtil.isWhitespace(char)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isWhitespace functionality of StringUtil, ensuring it correctly identifies whitespace characters."}, {"name": "normaliseWhiteSpace", "primary_tested": ["StringUtil.normaliseWhitespace(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the normaliseWhitespace functionality of StringUtil, ensuring it correctly normalizes sequences of whitespace characters."}, {"name": "normaliseWhiteSpaceHandlesHighSurrogates", "primary_tested": ["StringUtil.normaliseWhitespace(String)"], "associated_methods": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["StringUtil", "Jsoup"], "class_members": []}, "category": "unit", "description": "Tests the normaliseWhitespace functionality of StringUtil with high surrogate characters, ensuring correct handling."}, {"name": "resolvesRelativeUrls", "primary_tested": ["StringUtil.resolve(String,String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the resolve functionality of StringUtil, ensuring it correctly resolves relative URLs."}, {"name": "stripsControlCharsFromUrls", "primary_tested": ["StringUtil.resolve(String,String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the resolve functionality of StringUtil, ensuring it correctly strips control characters from URLs."}, {"name": "allowsSpaceInUrl", "primary_tested": ["StringUtil.resolve(String,String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the resolve functionality of StringUtil, ensuring it correctly handles URLs with spaces."}, {"name": "isAscii", "primary_tested": ["StringUtil.isAscii(String)"], "external_dependencies": {"modules": ["StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the isAscii functionality of StringUtil, ensuring it correctly identifies ASCII strings."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokeniserTest.java", "testclass_name": "TokeniserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.*;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.nio.charset.Charset;", "import java.util.Arrays;", "import static org.jsoup.parser.CharacterReader.BufferSize;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokeniserTest", "description": "Tests for the Tokeniser class, focusing on handling large inputs and specific character encodings.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "bufferUpInAttributeVal", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the handling of large attribute values in HTML parsing."}, {"name": "handleSuperLargeTagNames", "primary_tested": ["Parser.htmlParser().settings(ParseSettings).parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document", "Elements", "ParseSettings"], "class_members": []}, "category": "unit", "description": "Tests the handling of very large tag names in HTML parsing."}, {"name": "handleSuperLargeAttributeName", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the handling of very large attribute names in HTML parsing."}, {"name": "handleLargeText", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the handling of large text content in HTML parsing."}, {"name": "handleLargeComment", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "Comment"], "class_members": []}, "category": "unit", "description": "Tests the handling of large comment content in HTML parsing."}, {"name": "handleLargeCdata", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "TextNode"], "class_members": []}, "category": "unit", "description": "Tests the handling of large CDATA content in HTML parsing."}, {"name": "handleLargeTitle", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "TextNode"], "class_members": []}, "category": "unit", "description": "Tests the handling of large title content in HTML parsing."}, {"name": "cp1252Entities", "primary_tested": ["Jsoup.parse(String)"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests the parsing of CP1252 entities in HTML."}, {"name": "cp1252EntitiesProduceError", "primary_tested": ["Parser.parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document", "HtmlTreeBuilder"], "class_members": []}, "category": "unit", "description": "Tests that CP1252 entities produce an error during parsing."}, {"name": "cp1252SubstitutionTable", "primary_tested": [], "external_dependencies": {"modules": ["Tokeniser", "Charset"], "class_members": []}, "category": "unit", "description": "Tests the CP1252 substitution table for character encoding."}, {"name": "canParseVeryLongBogusComment", "primary_tested": ["Parser.parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document", "HtmlTreeBuilder", "Comment"], "class_members": []}, "category": "unit", "description": "Tests the parsing of very long bogus comments in HTML."}, {"name": "canParseCdataEndingAtEdgeOfBuffer", "primary_tested": ["Parser.parseInput(String,String)"], "external_dependencies": {"modules": ["Parser", "Document", "HtmlTreeBuilder", "CDataNode"], "class_members": []}, "category": "unit", "description": "Tests the parsing of CDATA ending at the edge of the buffer in HTML."}]}, {"file_path": "src/test/java/org/jsoup/integration/ConnectIT.java", "testclass_name": "ConnectIT", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.integration.servlets.SlowRider;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.StreamParser;", "import org.junit.jupiter.api.Test;", "import java.io.BufferedInputStream;", "import java.io.IOException;", "import java.io.UncheckedIOException;", "import java.net.SocketTimeoutException;", "import java.nio.ByteBuffer;", "import java.nio.charset.StandardCharsets;", "import java.util.concurrent.atomic.AtomicBoolean;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "ConnectIT", "description": "Integration tests for Jsoup connection functionalities, focusing on handling timeouts, interruptions, and large file reads.", "class_members": {"variables": [{"name": "LargeHtmlSize", "type": "static final int"}], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "canInterruptBodyStringRead", "primary_tested": ["Jsoup.connect(String).execute()"], "associated_methods": ["Connection.Response.body()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the ability to interrupt a body string read operation."}, {"name": "canInterruptDocumentRead", "primary_tested": ["Jsoup.connect(String).execute()"], "associated_methods": ["Connection.Response.parse().text()"], "external_dependencies": {"modules": ["Jsoup", "Connection", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the ability to interrupt a document read operation."}, {"name": "canInterruptThenJoinASpawnedThread", "primary_tested": ["Jsoup.connect(String).get()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the ability to interrupt and join a spawned thread during a Jsoup connection."}, {"name": "totalTimeout", "primary_tested": ["Jsoup.connect(String).timeout(int).get()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "SlowRider"], "class_members": []}, "category": "integration", "description": "Tests the total timeout functionality of a Jsoup connection."}, {"name": "slowReadOk", "primary_tested": ["Jsoup.connect(String).data(String,String).get()"], "associated_methods": ["Document.selectFirst(String).text()"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "Document", "Element"], "class_members": []}, "category": "integration", "description": "Tests a slow read operation that completes within the request timeout."}, {"name": "infiniteReadSupported", "primary_tested": ["Jsoup.connect(String).timeout(int).data(String,String).get()"], "associated_methods": ["Document.selectFirst(String).text()"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "Document", "Element"], "class_members": []}, "category": "integration", "description": "Tests the support for an infinite read operation."}, {"name": "streamParserUncheckedExceptionOnTimeoutInStream", "primary_tested": ["Jsoup.connect(String).data(String,String).timeout(int).execute().streamParser()"], "associated_methods": ["StreamParser.stream().count()"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "StreamParser", "UncheckedIOException"], "class_members": []}, "category": "integration", "description": "Tests the unchecked exception handling when a timeout occurs during stream parsing."}, {"name": "streamParserCheckedExceptionOnTimeoutInSelect", "primary_tested": ["Jsoup.connect(String).data(String,String).timeout(int).execute().streamParser()"], "associated_methods": ["StreamParser.selectNext(String)"], "external_dependencies": {"modules": ["Jsoup", "SlowRider", "StreamParser"], "class_members": []}, "category": "integration", "description": "Tests the checked exception handling when a timeout occurs during element selection in stream parsing."}, {"name": "remainingAfterFirstRead", "primary_tested": ["Jsoup.connect(String).maxBodySize(int).execute().bodyStream()"], "associated_methods": ["DataUtil.readToByteBuffer(InputStream,int)", "BufferedInputStream.mark(int)", "BufferedInputStream.reset()", "BufferedInputStream.read()"], "external_dependencies": {"modules": ["Jsoup", "FileServlet", "DataUtil", "BufferedInputStream"], "class_members": []}, "category": "integration", "description": "Tests reading remaining data after an initial limited read."}, {"name": "noLimitAfterFirstRead", "primary_tested": ["Jsoup.connect(String).execute().bodyStream()"], "associated_methods": ["DataUtil.readToByteBuffer(InputStream,int)", "BufferedInputStream.mark(int)", "BufferedInputStream.reset()"], "external_dependencies": {"modules": ["Jsoup", "FileServlet", "DataUtil", "BufferedInputStream"], "class_members": []}, "category": "integration", "description": "Tests reading data without a limit after an initial limited read."}, {"name": "bodyStreamConstrainedViaBufferUp", "primary_tested": ["Jsoup.connect(String).maxBodySize(int).execute().bufferUp().bodyStream()"], "associated_methods": ["DataUtil.readToByteBuffer(InputStream,int)"], "external_dependencies": {"modules": ["Jsoup", "FileServlet", "DataUtil"], "class_members": []}, "category": "integration", "description": "Tests constraining the body stream via buffer up operation."}]}, {"file_path": "src/test/java/org/jsoup/nodes/FormElementTest.java", "testclass_name": "FormElementTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.TestServer;", "import org.jsoup.integration.servlets.CookieServlet;", "import org.jsoup.integration.servlets.EchoServlet;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.select.Elements;", "import org.jsoup.select.SelectorTest;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "FormElementTest", "description": "Tests for the FormElement class, focusing on form controls, form data creation, and form submission.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": ["setUp"], "test_cases": [{"name": "hasAssociatedControls", "primary_tested": ["FormElement.elements()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the form element correctly identifies and counts associated controls."}, {"name": "createsFormData", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of form data from form elements, including handling of selected options and checked boxes."}, {"name": "formDataUsesFirstAttribute", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that form data uses the first attribute when multiple attributes with the same name are present."}, {"name": "createsSubmitableConnection", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the creation of a submitable connection from a form element, including handling of form method and action attributes."}, {"name": "actionWithNoValue", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the form submission when the action attribute is not set, ensuring the base URI is used."}, {"name": "actionWithNoBaseUri", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the form submission when no base URI is set, ensuring an exception is thrown."}, {"name": "formsAddedAfterParseAreFormElements", "primary_tested": ["FormElement.elements()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that forms added after parsing are recognized as FormElements."}, {"name": "controlsAddedAfterParseAreLinkedWithForms", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that controls added after parsing are correctly linked with their forms."}, {"name": "usesOnForCheckboxValueIfNoValueSet", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that a checkbox without a value attribute uses 'on' as the value."}, {"name": "adoptedFormsRetainInputs", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that adopted forms retain their input elements."}, {"name": "removeFormElement", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal of a form element and ensures it is no longer included in the form data."}, {"name": "formSubmissionCarriesCookiesFromSession", "primary_tested": ["FormElement.submit()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection", "Elements", "EchoServlet", "CookieServlet", "FileServlet"], "class_members": []}, "category": "integration", "fixtures_used": [], "description": "Tests that form submission carries cookies from the session, ensuring correct cookie handling and order."}, {"name": "formElementsAreLive", "primary_tested": ["FormElement.formData()"], "external_dependencies": {"modules": ["Jsoup", "Document", "FormElement", "Connection.KeyVal", "SelectorTest"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that form elements are live and updates are reflected in the form data."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokenQueueTest.java", "testclass_name": "TokenQueueTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.junit.jupiter.api.Test;", "import java.util.regex.Pattern;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TokenQueueTest", "description": "Unit tests for TokenQueue class, focusing on various methods like chompBalanced, unescape, escapeCssIdentifier, and consume methods.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "chompBalanced", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)", "TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it correctly balances and consumes text within parentheses."}, {"name": "chompEscapedBalanced", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)", "TokenQueue.remainder()", "TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method with escaped characters to ensure it correctly balances and consumes text within parentheses."}, {"name": "chompBalancedMatchesAsMuchAsPossible", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it matches as much text as possible within parentheses."}, {"name": "unescape", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the unescape method to ensure it correctly unescapes escaped characters."}, {"name": "unescape_2", "primary_tested": ["TokenQueue.unescape(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the unescape method with a different set of escaped characters."}, {"name": "escapeCssIdentifier", "primary_tested": ["TokenQueue.escapeCssIdentifier(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the escapeCssIdentifier method to ensure it correctly escapes CSS identifiers."}, {"name": "chompToIgnoreCase", "primary_tested": ["TokenQueue.chompToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompToIgnoreCase method to ensure it correctly consumes text up to a case-insensitive string."}, {"name": "addFirst", "primary_tested": ["TokenQueue.consumeWord()", "TokenQueue.addFirst(String)", "TokenQueue.remainder()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the addFirst method to ensure it correctly adds text to the beginning of the queue."}, {"name": "consumeToIgnoreSecondCallTest", "primary_tested": ["TokenQueue.chompToIgnoreCase(String)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompToIgnoreCase method to ensure it correctly handles multiple calls."}, {"name": "testNestedQuotes", "primary_tested": ["Jsoup.parse(String)", "Document.select(String)", "Element.cssSelector()"], "associated_methods": ["TokenQueueTest.validateNestedQuotes(String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the handling of nested quotes in HTML attributes."}, {"name": "chompBalancedThrowIllegalArgumentException", "primary_tested": ["TokenQueue.consumeTo(String)", "TokenQueue.chompBalanced(char,char)"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the chompBalanced method to ensure it throws an IllegalArgumentException when the markers are not balanced."}, {"name": "testQuotedPattern", "primary_tested": ["Jsoup.parse(String)", "Document.select(String)", "Element.childNode(int)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the handling of quoted patterns in HTML elements."}, {"name": "consumeEscapedTag", "primary_tested": ["TokenQueue.consumeElementSelector()", "TokenQueue.consumeWhitespace()", "TokenQueue.isEmpty()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the consumeElementSelector method to ensure it correctly consumes escaped tags."}, {"name": "consumeEscapedId", "primary_tested": ["TokenQueue.consumeCssIdentifier()", "TokenQueue.consumeWhitespace()", "TokenQueue.isEmpty()"], "external_dependencies": {"modules": ["TokenQueue"], "class_members": []}, "category": "unit", "description": "Tests the consumeCssIdentifier method to ensure it correctly consumes escaped CSS identifiers."}]}, {"file_path": "src/test/java/org/jsoup/select/XpathTest.java", "testclass_name": "XpathTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.TextNode;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import javax.xml.xpath.XPath;", "import javax.xml.xpath.XPathFactory;", "import javax.xml.xpath.XPathFactoryConfigurationException;", "import javax.xml.xpath.XPathFunctionResolver;", "import javax.xml.xpath.XPathVariableResolver;", "import java.util.List;", "import java.util.stream.Stream;", "import static org.jsoup.helper.W3CDom.XPathFactoryProperty;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "XpathTest", "description": "Test suite for XPath functionality in Jsoup.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AlternateXpathFactory", "description": "Minimal, no-op implementation class to verify users can load a factory to support XPath 2.0 etc."}]}, "fixtures": [], "test_cases": [{"name": "supportsXpath", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality on a parsed HTML document."}, {"name": "supportsXpathFromElement", "primary_tested": ["Element.selectXpath(String)"], "associated_methods": ["Element.selectFirst(String)", "Element.tagName()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality starting from a specific element."}, {"name": "emptyElementsIfNoResults", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests that an empty list is returned when no elements match the XPath query."}, {"name": "throwsSelectException", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Selector"], "class_members": []}, "category": "unit", "description": "Tests that a SelectorParseException is thrown for an invalid XPath query."}, {"name": "supportsLocalname", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality using local-name() in an XML document."}, {"name": "canDitchNamespaces", "primary_tested": ["Document.selectXpath(String)"], "associated_methods": ["Element.removeAttr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the ability to remove namespaces and select elements using local-name() in an XML document."}, {"name": "cssAndXpathEquivalents", "primary_tested": ["Document.select(String)", "Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the equivalence of CSS and XPath selectors on a parsed HTML document."}, {"name": "canSelectTextNodes", "primary_tested": ["Document.selectXpath(String, Class)"], "external_dependencies": {"modules": ["Jsoup", "Document", "TextNode", "Node"], "class_members": []}, "category": "unit", "description": "Tests the ability to select text nodes using XPath in a parsed HTML document."}, {"name": "selectByAttribute", "primary_tested": ["Document.selectXpath(String)"], "associated_methods": ["Elements.eachAttr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the ability to select elements by attribute using XPath in a parsed HTML document."}, {"name": "selectOutsideOfElementTree", "primary_tested": ["Document.selectXpath(String)", "Element.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the ability to select elements outside of the current element's tree using XPath."}, {"name": "selectAncestorsOnContextElement", "primary_tested": ["Element.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the ability to select ancestors of a context element using XPath."}, {"name": "canSupplyAlternateFactoryImpl", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements", "XPathFactoryProperty"], "class_members": []}, "category": "unit", "description": "Tests the ability to supply an alternate XPath factory implementation."}, {"name": "notNamespaceAware", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality in a non-namespace-aware context."}, {"name": "supportsPrefixes", "primary_tested": ["Document.selectXpath(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"], "class_members": []}, "category": "unit", "description": "Tests the XPath selection functionality with namespace prefixes in an XML document."}]}, {"file_path": "src/test/java/org/jsoup/nodes/TextNodeTest.java", "testclass_name": "TextNodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.helper.ValidationException;", "import org.jsoup.internal.StringUtil;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "TextNodeTest", "description": "Unit tests for the TextNode class in the Jsoup library, focusing on various text manipulation and validation functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testBlank", "primary_tested": ["TextNode.isBlank()"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the isBlank functionality of the TextNode to check if the text node is blank."}, {"name": "testTextBean", "primary_tested": ["TextNode.text()"], "associated_methods": ["TextNode.attr(String,String)", "TextNode.outerHtml()", "TextNode.childNode(int)", "TextNode.html()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the text extraction and manipulation functionalities of the TextNode."}, {"name": "testSplitText", "primary_tested": ["TextNode.splitText(int)"], "associated_methods": ["TextNode.getWholeText()", "TextNode.text(String)", "TextNode.parent()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests the splitText functionality of the TextNode to split the text node at a specified position."}, {"name": "testSplitAnEmbolden", "primary_tested": ["TextNode.splitText(int)", "TextNode.wrap(String)"], "associated_methods": ["TextNode.html()"], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "TextUtil"], "class_members": []}, "category": "unit", "description": "Tests the splitText and wrap functionalities of the TextNode to split and wrap the text node with a bold tag."}, {"name": "testSplitTextValidation", "primary_tested": ["TextNode.splitText(int)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "ValidationException"], "class_members": []}, "category": "unit", "description": "Tests the validation of the splitText functionality of the TextNode to ensure it throws exceptions for invalid offsets."}, {"name": "testWithSupplementaryCharacter", "primary_tested": ["TextNode.outerHtml()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "TextNode"], "class_members": []}, "category": "unit", "description": "Tests the handling of supplementary characters in the TextNode."}, {"name": "testLeadNodesHaveNoChildren", "primary_tested": ["TextNode.childNodes()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests that TextNode instances do not have child nodes."}, {"name": "testSpaceNormalise", "primary_tested": ["TextNode.getWholeText()", "TextNode.text()", "TextNode.outerHtml()", "TextNode.toString()"], "associated_methods": ["Element.appendChild(Node)", "Element.outerHtml()", "Element.html()", "Element.wholeText()"], "external_dependencies": {"modules": ["TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests the normalization of spaces in the TextNode."}, {"name": "testClone", "primary_tested": ["TextNode.clone()"], "associated_methods": ["TextNode.text(String)", "TextNode.attributes()"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the TextNode to ensure cloned instances are independent."}, {"name": "testCloneAfterAttributesHit", "primary_tested": ["TextNode.clone()"], "associated_methods": ["TextNode.attributes()", "TextNode.text(String)"], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the TextNode after accessing attributes to ensure cloned instances are independent."}, {"name": "testHasTextWhenIterating", "primary_tested": ["TextNode.text()", "TextNode.getWholeText()"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "TextNode", "Element", "StringUtil"], "class_members": []}, "category": "unit", "description": "Tests the presence of text in TextNode instances when iterating through elements."}, {"name": "createFromEncoded", "primary_tested": ["TextNode.createFromEncoded(String)"], "associated_methods": [], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the creation of a TextNode from encoded text."}, {"name": "normaliseWhitespace", "primary_tested": ["TextNode.normaliseWhitespace(String)"], "associated_methods": [], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the normalization of whitespace in a string."}, {"name": "stripLeadingWhitespace", "primary_tested": ["TextNode.stripLeadingWhitespace(String)"], "associated_methods": [], "external_dependencies": {"modules": ["TextNode"], "class_members": []}, "category": "unit", "description": "Tests the stripping of leading whitespace from a string."}, {"name": "leafNodeAttributes", "primary_tested": ["TextNode.attr(String,String)", "TextNode.hasAttributes()", "TextNode.attributes()", "TextNode.coreValue(String)", "TextNode.hasAttr(String)", "TextNode.removeAttr(String)", "TextNode.baseUri()", "TextNode.absUrl(String)", "TextNode.childNodeSize()", "TextNode.empty()", "TextNode.ensureChildNodes()", "TextNode.clone()", "TextNode.hasSameValue(TextNode)"], "associated_methods": [], "external_dependencies": {"modules": ["TextNode", "Element"], "class_members": []}, "category": "unit", "description": "Tests various attribute-related functionalities of the TextNode."}]}, {"file_path": "src/test/java/org/jsoup/nodes/EntitiesTest.java", "testclass_name": "EntitiesTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import static org.jsoup.nodes.Document.OutputSettings;", "import static org.jsoup.nodes.Entities.EscapeMode.*;", "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "EntitiesTest", "description": "Unit tests for the Entities class, focusing on entity escaping and unescaping functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "escape", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the entity escaping functionality with different output settings."}, {"name": "escapeDefaults", "primary_tested": ["Entities.escape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the entity escaping functionality with default settings."}, {"name": "escapedSupplementary", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the entity escaping functionality for supplementary characters."}, {"name": "unescapeMultiChars", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the entity unescaping functionality for multi-character entities."}, {"name": "xhtml", "primary_tested": ["EscapeMode.codepointForName(String)", "EscapeMode.nameForCodepoint(int)"], "external_dependencies": {"modules": ["EscapeMode"], "class_members": []}, "category": "unit", "description": "Tests the functionality of codepoint to name and name to codepoint mappings in XHTML mode."}, {"name": "getByName", "primary_tested": ["Entities.getByName(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the functionality of getting entities by their names."}, {"name": "escapeSupplementaryCharacter", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the entity escaping functionality for supplementary characters."}, {"name": "notMissingMultis", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the entity unescaping functionality for multi-character entities."}, {"name": "notMissingSupplementals", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the entity unescaping functionality for supplementary characters."}, {"name": "unescape", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the entity unescaping functionality."}, {"name": "strictUnescape", "primary_tested": ["Entities.unescape(String,boolean)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the strict entity unescaping functionality."}, {"name": "caseSensitive", "primary_tested": ["Entities.escape(String,OutputSettings)", "Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the case sensitivity of entity escaping and unescaping."}, {"name": "quoteReplacements", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests the entity unescaping functionality for quote replacements."}, {"name": "letterDigitEntities", "primary_tested": ["Jsoup.parse(String)", "Document.outputSettings()", "Element.html()", "Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the parsing and output settings of letter and digit entities."}, {"name": "noSpuriousDecodes", "primary_tested": ["Entities.unescape(String)"], "external_dependencies": {"modules": ["Entities"], "class_members": []}, "category": "unit", "description": "Tests that no spurious decoding occurs in URLs."}, {"name": "escapesGtInXmlAttributesButNotInHtml", "primary_tested": ["Jsoup.parse(String)", "Document.outputSettings()", "Element.outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"], "class_members": []}, "category": "unit", "description": "Tests the escaping of '>' in XML attributes versus HTML."}, {"name": "controlCharactersAreEscaped", "primary_tested": ["Jsoup.parse(String)", "Document.body().html()"], "external_dependencies": {"modules": ["Jsoup", "Document"], "class_members": []}, "category": "unit", "description": "Tests the escaping of control characters in both HTML and XML."}, {"name": "escapeByClonedOutputSettings", "primary_tested": ["Entities.escape(String,OutputSettings)"], "external_dependencies": {"modules": ["Entities", "OutputSettings"], "class_members": []}, "category": "unit", "description": "Tests the entity escaping functionality using cloned output settings."}, {"name": "parseHtmlEncodedEmojiMultipoint", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the parsing of HTML encoded emoji with multiple points."}, {"name": "parseHtmlEncodedEmoji", "primary_tested": ["Parser.unescapeEntities(String,boolean)"], "external_dependencies": {"modules": ["Parser"], "class_members": []}, "category": "unit", "description": "Tests the parsing of HTML encoded emoji."}]}, {"file_path": "src/test/java/org/jsoup/nodes/AttributesTest.java", "testclass_name": "AttributesTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.ConcurrentModificationException;", "import java.util.Iterator;", "import java.util.List;", "import java.util.Map;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "AttributesTest", "description": "Unit tests for the Attributes class in Jsoup, focusing on attribute manipulation and iteration.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "html", "primary_tested": ["Attributes.put(String,String)", "Attributes.size()", "Attributes.hasKey(String)", "Attributes.hasKeyIgnoreCase(String)", "Attributes.getIgnoreCase(String)", "Attributes.dataset()", "Attributes.get(String)", "Attributes.html()", "Attributes.toString()"], "external_dependencies": {"modules": ["Attributes", "Map"], "class_members": []}, "category": "unit", "description": "Tests the HTML representation and key manipulation functionalities of the Attributes class."}, {"name": "testIteratorRemovable", "primary_tested": ["Attributes.iterator()", "Attribute.getKey()", "Iterator.remove()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the removable iterator functionality of the Attributes class."}, {"name": "testIteratorUpdateable", "primary_tested": ["Attributes.iterator()", "Attribute.setKey(String)", "Attribute.setValue(String)"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the updateable iterator functionality of the Attributes class."}, {"name": "testIteratorHasNext", "primary_tested": ["Attributes.iterator()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the hasNext functionality of the Attributes iterator."}, {"name": "testIterator", "primary_tested": ["Attributes.iterator()", "Attribute.getKey()", "Attribute.getValue()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the basic iterator functionality of the Attributes class."}, {"name": "testIteratorSkipsInternal", "primary_tested": ["Attributes.iterator()", "Attributes.internalKey(String)"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests that the iterator skips internal attributes in the Attributes class."}, {"name": "iteratorThrows", "primary_tested": ["Attributes.iterator()", "Iterator.next()", "Iterator.hasNext()"], "external_dependencies": {"modules": ["Attributes", "Attribute", "Iterator", "NoSuchElementException"], "class_members": []}, "category": "unit", "description": "Tests that the iterator throws a NoSuchElementException when next is called on an exhausted iterator."}, {"name": "testListSkipsInternal", "primary_tested": ["Attributes.asList()", "Attributes.internalKey(String)"], "external_dependencies": {"modules": ["Attributes", "Attribute", "List"], "class_members": []}, "category": "unit", "description": "Tests that the list returned by asList skips internal attributes in the Attributes class."}, {"name": "htmlSkipsInternals", "primary_tested": ["Attributes.html()", "Attributes.internalKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests that the HTML representation skips internal attributes in the Attributes class."}, {"name": "testIteratorEmpty", "primary_tested": ["Attributes.iterator()", "Iterator.hasNext()"], "external_dependencies": {"modules": ["Attributes", "Iterator"], "class_members": []}, "category": "unit", "description": "Tests the iterator functionality on an empty Attributes object."}, {"name": "testIteratorRemove", "primary_tested": ["Attributes.iterator()", "Iterator.remove()", "Element.attributes()", "Element.attributesSize()"], "external_dependencies": {"modules": ["Attributes", "Iterator", "Element", "Document", "Jsoup"], "class_members": []}, "category": "unit", "description": "Tests the remove functionality of the iterator in the Attributes class."}, {"name": "testIteratorRemoveConcurrentException", "primary_tested": ["Attributes.iterator()", "Iterator.next()", "Element.removeAttr(String)", "ConcurrentModificationException"], "external_dependencies": {"modules": ["Attributes", "Iterator", "Element", "Document", "Jsoup", "ConcurrentModificationException"], "class_members": []}, "category": "unit", "description": "Tests that the iterator throws a ConcurrentModificationException when the underlying collection is modified during iteration."}, {"name": "removeCaseSensitive", "primary_tested": ["Attributes.put(String,String)", "Attributes.size()", "Attributes.remove(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the case-sensitive removal functionality of the Attributes class."}, {"name": "testSetKeyConsistency", "primary_tested": ["Attributes.put(String,String)", "Attribute.setKey(String)", "Attributes.hasKey(String)"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the consistency of setting keys in the Attributes class."}, {"name": "testBoolean", "primary_tested": ["Attributes.put(String,String)", "Attributes.hasDeclaredValueForKey(String)", "Attributes.hasDeclaredValueForKeyIgnoreCase(String)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the boolean attribute functionality in the Attributes class."}, {"name": "testSizeWhenHasInternal", "primary_tested": ["Attributes.put(String,String)", "Attributes.size()", "Attributes.asList()", "Attributes.internalKey(String)"], "external_dependencies": {"modules": ["Attributes", "List"], "class_members": []}, "category": "unit", "description": "Tests the size functionality when internal attributes are present in the Attributes class."}, {"name": "testBooleans", "primary_tested": ["Attributes.html()", "Element.attributes()"], "external_dependencies": {"modules": ["Attributes", "Element", "Document", "Jsoup"], "class_members": []}, "category": "unit", "description": "Tests the boolean attribute handling in the Attributes class."}, {"name": "booleanNullAttributesConsistent", "primary_tested": ["Attributes.put(String,String)", "Attribute.html()", "Attributes.html()"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the consistency of null boolean attributes in the Attributes class."}, {"name": "booleanEmptyString", "primary_tested": ["Attributes.put(String,String)", "Attribute.html()", "Attributes.html()"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the handling of boolean attributes with empty strings in the Attributes class."}, {"name": "booleanCaseInsensitive", "primary_tested": ["Attributes.put(String,String)", "Attribute.html()", "Attributes.html()"], "external_dependencies": {"modules": ["Attributes", "Attribute"], "class_members": []}, "category": "unit", "description": "Tests the case-insensitive handling of boolean attributes in the Attributes class."}, {"name": "equalsIsOrderInsensitive", "primary_tested": ["Attributes.add(String,String)", "Attributes.clone()", "Attributes.equals(Object)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the order-insensitive equality functionality of the Attributes class."}, {"name": "cloneAttributes", "primary_tested": ["Attributes.add(String,String)", "Attributes.clone()", "Attributes.size()", "Attributes.get(String)", "Attributes.equals(Object)"], "external_dependencies": {"modules": ["Attributes"], "class_members": []}, "category": "unit", "description": "Tests the cloning functionality of the Attributes class."}]}, {"file_path": "src/test/java/org/jsoup/select/CssTest.java", "testclass_name": "CssTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Tag;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "CssTest", "description": "Unit tests for CSS selector functionalities in Jsoup.", "class_members": {"variables": [{"name": "html", "type": "Document"}, {"name": "htmlString", "type": "static String"}], "methods": [{"name": "check", "signature": "void check(Elements result, String... expectedContent)"}]}, "fixtures": ["initClass", "init"], "test_cases": [{"name": "firstChild", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :first-child pseudo-class selector."}, {"name": "lastChild", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :last-child pseudo-class selector."}, {"name": "nthChild_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-child pseudo-class selector with simple indices."}, {"name": "nthOfType_unknownTag", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-of-type pseudo-class selector with an unknown tag."}, {"name": "nthLastChild_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-child pseudo-class selector with simple indices."}, {"name": "nthOfType_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-of-type pseudo-class selector with simple indices."}, {"name": "nthLastOfType_simple", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-of-type pseudo-class selector with simple indices."}, {"name": "nthChild_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-child pseudo-class selector with advanced patterns."}, {"name": "nthOfType_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-of-type pseudo-class selector with advanced patterns."}, {"name": "nthLastChild_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-child pseudo-class selector with advanced patterns."}, {"name": "nthLastOfType_advanced", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :nth-last-of-type pseudo-class selector with advanced patterns."}, {"name": "firstOfType", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :first-of-type pseudo-class selector."}, {"name": "lastOfType", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :last-of-type pseudo-class selector."}, {"name": "empty", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :empty pseudo-class selector."}, {"name": "onlyChild", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :only-child pseudo-class selector."}, {"name": "onlyOfType", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :only-of-type pseudo-class selector."}, {"name": "root", "primary_tested": ["Document.select(String)"], "external_dependencies": {"modules": ["Document", "Tag"], "class_members": [{"name": "html", "type": "variable"}]}, "category": "unit", "fixtures_used": ["init"], "description": "Tests the :root pseudo-class selector."}]}, {"file_path": "src/test/java/org/jsoup/parser/TokeniserStateTest.java", "testclass_name": "TokeniserStateTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Comment;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.TextNode;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import static org.junit.jupiter.api.Assertions.assertArrayEquals;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "TokeniserStateTest", "description": "Unit tests for TokeniserState functionality in Jsoup parser.", "class_members": {"variables": [{"name": "whiteSpace", "type": "final char[]"}, {"name": "quote", "type": "final char[]"}]}, "fixtures": [], "test_cases": [{"name": "ensureSearchArraysAreSorted", "primary_tested": ["Arrays.sort(char[])"], "associated_methods": ["Arrays.copyOf(char[],int)"], "external_dependencies": {"modules": ["Arrays"]}, "category": "unit", "description": "Ensures that the search arrays in TokeniserState are sorted."}, {"name": "testCharacterReferenceInRcdata", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of character references in RCDATA."}, {"name": "testBeforeTagName", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of whitespace before tag names."}, {"name": "testEndTagOpen", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of end tag open states."}, {"name": "testRcdataLessthanSign", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of less-than signs in RCDATA."}, {"name": "testRCDATAEndTagName", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Elements.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Elements"]}, "category": "unit", "description": "Tests the handling of end tag names in RCDATA."}, {"name": "testCommentEndCoverage", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Comment.getData()", "TextNode.getWholeText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Comment", "TextNode"]}, "category": "unit", "description": "Tests the coverage of comment end states."}, {"name": "testCommentEndBangCoverage", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Comment.getData()", "TextNode.getWholeText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Comment", "TextNode"]}, "category": "unit", "description": "Tests the coverage of comment end bang states."}, {"name": "testPublicIdentifiersWithWhitespace", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.childNode(int).outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the handling of public identifiers with whitespace."}, {"name": "testSystemIdentifiersWithWhitespace", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.childNode(int).outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the handling of system identifiers with whitespace."}, {"name": "testPublicAndSystemIdentifiersWithWhitespace", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.childNode(int).outerHtml()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests the handling of public and system identifiers with whitespace."}, {"name": "handlesLessInTagThanAsNewTag", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "TextUtil"]}, "category": "unit", "description": "Tests handling of less-than signs in tags as new tags."}, {"name": "testUnconsumeAtBufferBoundary", "primary_tested": ["Parser.parseFragment(String,String,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests unconsuming at buffer boundary."}, {"name": "testUnconsumeAfterBufferUp", "primary_tested": ["Parser.parseFragment(String,String,String,ParseErrorList)"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests unconsuming after buffer up."}, {"name": "testOpeningAngleBracketInsteadOfAttribute", "primary_tested": ["Parser.parseFragment(String,String,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests handling of opening angle brackets instead of attributes."}, {"name": "testMalformedSelfClosingTag", "primary_tested": ["Parser.parseFragment(String,String,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests handling of malformed self-closing tags."}, {"name": "testOpeningAngleBracketInTagName", "primary_tested": ["Parser.parseFragment(String,String,String,ParseErrorList)"], "associated_methods": ["ParseErrorList.get(int).getPosition()"], "external_dependencies": {"modules": ["Parser", "ParseErrorList"]}, "category": "unit", "description": "Tests handling of opening angle brackets in tag names."}, {"name": "rcData", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.title()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests handling of RCDATA."}, {"name": "plaintext", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "TextUtil"]}, "category": "unit", "description": "Tests handling of plaintext."}, {"name": "nullInTag", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Document.body().html()"], "external_dependencies": {"modules": ["Jsoup", "Document"]}, "category": "unit", "description": "Tests handling of null characters in tags."}, {"name": "attributeValUnquoted", "primary_tested": ["Jsoup.parse(String)"], "associated_methods": ["Element.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"]}, "category": "unit", "description": "Tests handling of unquoted attribute values."}]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeIteratorTest.java", "testclass_name": "NodeIteratorTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.junit.jupiter.api.Test;", "import java.util.NoSuchElementException;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "NodeIteratorTest", "description": "Unit tests for the NodeIterator class, which iterates over nodes in a document.", "class_members": {"variables": [{"name": "html", "type": "String"}], "methods": [{"name": "assertIterates", "signature": "static <T extends Node> void assertIterates(NodeIterator<T> it, String expected)"}, {"name": "assertContents", "signature": "static void assertContents(Element el, String expected)"}, {"name": "trackSeen", "signature": "static void trackSeen(Node node, StringBuilder actual)"}]}, "fixtures": [], "test_cases": [{"name": "canIterateNodes", "primary_tested": ["NodeIterator.from(Document)"], "associated_methods": ["NodeIterator.hasNext()", "NodeIterator.next()", "NodeIterator.remove()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "NoSuchElementException"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over nodes in a document."}, {"name": "hasNextIsPure", "primary_tested": ["NodeIterator.hasNext()"], "associated_methods": ["NodeIterator.from(Document)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that the hasNext method of NodeIterator is pure and does not alter the state of the iterator."}, {"name": "iterateSubTree", "primary_tested": ["NodeIterator.from(Element)"], "associated_methods": ["Document.expectFirst(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over a subtree of nodes in a document."}, {"name": "canRestart", "primary_tested": ["NodeIterator.restart(Element)"], "associated_methods": ["NodeIterator.from(Document)", "Document.expectFirst(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the restart functionality of NodeIterator to iterate from a new starting point."}, {"name": "canIterateJustOneSibling", "primary_tested": ["NodeIterator.from(Element)"], "associated_methods": ["Document.expectFirst(String)", "Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over a single sibling node."}, {"name": "canIterateFirstEmptySibling", "primary_tested": ["NodeIterator.from(Element)"], "associated_methods": ["Document.expectFirst(String)", "Element.ownText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the iteration functionality of NodeIterator over an empty sibling node."}, {"name": "canRemoveViaIterator", "primary_tested": ["NodeIterator.remove()"], "associated_methods": ["NodeIterator.from(Document)", "Node.attr(String)", "Node.remove()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal functionality of NodeIterator to remove nodes during iteration."}, {"name": "canRemoveViaNode", "primary_tested": ["Node.remove()"], "associated_methods": ["NodeIterator.from(Document)", "Node.attr(String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the removal functionality of Node to remove nodes during iteration."}, {"name": "canReplace", "primary_tested": ["Node.replaceWith(Node)"], "associated_methods": ["NodeIterator.from(Document)", "Node.attr(String)", "Element.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the replacement functionality of Node to replace nodes during iteration."}, {"name": "canWrap", "primary_tested": ["Node.wrap(String)"], "associated_methods": ["NodeIterator.from(Document)", "Node.attr(String)", "TextNode.text()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element", "TextNode"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the wrapping functionality of Node to wrap nodes during iteration."}, {"name": "canFilterForElements", "primary_tested": ["NodeIterator.from(Document, Class<Element>)"], "associated_methods": ["NodeIterator.hasNext()", "NodeIterator.next()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the filtering functionality of NodeIterator to iterate over only Element nodes."}, {"name": "canFilterForTextNodes", "primary_tested": ["NodeIterator.from(Document, Class<TextNode>)"], "associated_methods": ["NodeIterator.hasNext()", "NodeIterator.next()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "TextNode"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the filtering functionality of NodeIterator to iterate over only TextNode nodes."}, {"name": "canModifyFilteredElements", "primary_tested": ["Element.text(String)"], "associated_methods": ["NodeIterator.from(Document, Class<Element>)", "Element.ownText()"], "external_dependencies": {"modules": ["Jsoup", "Document", "NodeIterator", "Node", "Element"], "class_members": [{"name": "html", "type": "variable"}], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the modification functionality of NodeIterator to modify filtered Element nodes."}]}, {"file_path": "src/test/java/org/jsoup/helper/DataUtilTest.java", "testclass_name": "DataUtilTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.internal.ControllableInputStream;", "import org.jsoup.nodes.Document;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import java.io.*;", "import java.nio.ByteBuffer;", "import java.nio.charset.Charset;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import static org.jsoup.integration.ParseTest.getFile;", "import static org.jsoup.integration.ParseTest.getPath;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "DataUtilTest", "description": "Unit tests for DataUtil class, focusing on charset handling, BOM detection, and file parsing.", "class_members": {"variables": [], "methods": [{"name": "stream", "signature": "private ControllableInputStream stream(String data)"}, {"name": "stream", "signature": "private ControllableInputStream stream(String data, String charset)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the extraction of charset from content type strings."}, {"name": "testQuotedCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the extraction of charset from content type strings with quoted charset values."}, {"name": "discardsSpuriousByteOrderMark", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of BOM in HTML content."}, {"name": "discardsSpuriousByteOrderMarkWhenNoCharsetSet", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of BOM in HTML content when no charset is set."}, {"name": "shouldNotThrowExceptionOnEmptyCharset", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the behavior when the charset is empty in the content type string."}, {"name": "shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the selection of the first charset when multiple charsets are specified in meta tags."}, {"name": "shouldCorrectCharsetForDuplicateCharsetString", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the correction of charset when the charset string is duplicated."}, {"name": "shouldReturnNullForIllegalCharsetNames", "primary_tested": ["DataUtil.getCharsetFromContentType(String)"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the handling of illegal charset names in the content type string."}, {"name": "generatesMimeBoundaries", "primary_tested": ["DataUtil.mimeBoundary()"], "external_dependencies": {"modules": ["DataUtil"]}, "category": "unit", "description": "Tests the generation of MIME boundaries."}, {"name": "wrongMetaCharsetFallback", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the fallback behavior when the meta charset is incorrect."}, {"name": "secondMetaElementWithContentTypeContainsCharsetParameter", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests the handling of the second meta element with a charset parameter."}, {"name": "firstMetaElementWithCharsetShouldBeUsedForDecoding", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document"], "class_members": [{"name": "stream", "type": "method"}]}, "category": "unit", "description": "Tests that the first meta element with a charset should be used for decoding."}, {"name": "parseSequenceInputStream", "primary_tested": ["DataUtil.parseInputStream(ControllableInputStream,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "ControllableInputStream", "Parser", "Document", "SequenceInputStream", "Files", "Path"], "class_members": [{"name": "stream", "type": "method"}], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests parsing a sequence input stream."}, {"name": "supportsBOMinFiles", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for BOM in various encoding files."}, {"name": "streamerSupportsBOMinFiles", "primary_tested": ["DataUtil.streamParser(Path,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document", "Path"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for BOM in various encoding files using stream parser."}, {"name": "supportsUTF8BOM", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM."}, {"name": "noExtraNULLBytes", "primary_tested": ["Jsoup.parse(ByteArrayInputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "ByteArrayInputStream", "StandardCharsets"]}, "category": "unit", "description": "Tests that no extra NULL bytes are present in the parsed document."}, {"name": "supportsZippedUTF8BOM", "primary_tested": ["Jsoup.parse(File,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM in zipped files."}, {"name": "streamerSupportsZippedUTF8BOM", "primary_tested": ["DataUtil.streamParser(Path,String,String,Parser)"], "external_dependencies": {"modules": ["DataUtil", "Parser", "Document", "Path"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests support for UTF-8 BOM in zipped files using stream parser."}, {"name": "supportsXmlCharsetDeclaration", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "ByteArrayInputStream", "Charset"]}, "category": "unit", "description": "Tests support for XML charset declaration."}, {"name": "loadsGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzipped HTML file."}, {"name": "loadsGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Path"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests loading and parsing a gzipped HTML file using Path."}, {"name": "loadsZGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests loading and parsing a zipped HTML file with .z extension."}, {"name": "loadsZGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Path"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests loading and parsing a zipped HTML file with .z extension using Path."}, {"name": "handlesFakeGzipFile", "primary_tested": ["Jsoup.parse(File,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "File"], "project_specific_resources": ["ParseTest.getFile(String)"]}, "category": "unit", "description": "Tests handling of a file with a .gz extension but not actually gzipped."}, {"name": "handlesFakeGzipPath", "primary_tested": ["Jsoup.parse(Path,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "Path"], "project_specific_resources": ["ParseTest.getPath(String)"]}, "category": "unit", "description": "Tests handling of a file with a .gz extension but not actually gzipped using Path."}, {"name": "handlesChunkedInputStream", "primary_tested": ["Jsoup.parse(InputStream,String,String)"], "external_dependencies": {"modules": ["Jsoup", "Document", "VaryingReadInputStream", "ParseTest", "File"], "project_specific_resources": ["ParseTest.getFile(String)", "ParseTest.getFileAsString(File)", "ParseTest.inputStreamFrom(String)"]}, "category": "unit", "description": "Tests handling of a chunked input stream."}, {"name": "handlesUnlimitedRead", "primary_tested": ["DataUtil.readToByteBuffer(InputStream,int)"], "external_dependencies": {"modules": ["DataUtil", "ByteBuffer", "VaryingReadInputStream", "ParseTest", "File", "StandardCharsets"], "project_specific_resources": ["ParseTest.getFile(String)", "ParseTest.getFileAsString(File)", "ParseTest.inputStreamFrom(String)"]}, "category": "unit", "description": "Tests reading an unlimited amount of data from an input stream."}]}, {"file_path": "src/test/java/org/jsoup/parser/PositionTest.java", "testclass_name": "PositionTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.nodes.Attribute;", "import org.jsoup.nodes.CDataNode;", "import org.jsoup.nodes.Comment;", "import org.jsoup.nodes.DataNode;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.DocumentType;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.LeafNode;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.Range;", "import org.jsoup.nodes.TextNode;", "import org.jsoup.nodes.XmlDeclaration;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.util.List;", "import java.util.stream.Collectors;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "PositionTest", "description": "Tests for tracking positions in HTML and XML parsing using Jsoup.", "class_members": {"variables": [{"name": "TrackingHtmlParser", "type": "Parser"}, {"name": "TrackingXmlParser", "type": "Parser"}], "methods": [{"name": "accumulatePositions", "signature": "static void accumulatePositions(Node node, StringBuilder sb)"}, {"name": "printRange", "signature": "private void printRange(Node node)"}, {"name": "accumulateAttributePositions", "signature": "static void accumulateAttributePositions(Node node, StringBuilder sb)"}, {"name": "accumulatePositions", "signature": "static void accumulatePositions(Attribute attr, StringBuilder sb)"}]}, "fixtures": [], "test_cases": [{"name": "parserTrackDefaults", "primary_tested": ["Parser.isTrackPosition()", "Parser.setTrackPosition(boolean)"], "external_dependencies": {"modules": ["Parser"]}, "category": "unit", "description": "Tests the default tracking position settings for HTML and XML parsers."}, {"name": "tracksPosition", "primary_tested": ["Document.expectFirst(String)", "Element.sourceRange()", "Element.endSourceRange()", "Range.Position.isTracked()", "Range.Position.pos()", "Range.Position.columnNumber()", "Range.Position.lineNumber()", "TextNode.getWholeText()"], "associated_methods": ["TextNode.sourceRange()", "Comment.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element", "TextNode", "Comment", "Range"]}, "category": "unit", "description": "Tests tracking positions of elements and text nodes in parsed HTML content."}, {"name": "tracksExpectedPoppedElements", "primary_tested": ["Document.expectFirst(String)", "Element.sourceRange()", "Element.endSourceRange()", "Range.Position.isTracked()", "Range.Position.isImplicit()"], "associated_methods": ["TextNode.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element", "TextNode", "Range"]}, "category": "unit", "description": "Tests tracking positions of elements and text nodes in parsed HTML content with expected popped elements."}, {"name": "tracksImplicitPoppedElements", "primary_tested": ["Document.expectFirst(String)", "Element.sourceRange()", "Element.endSourceRange()", "Range.Position.isTracked()", "Range.Position.isImplicit()"], "external_dependencies": {"modules": ["Document", "Element", "Range"]}, "category": "unit", "description": "Tests tracking positions of elements in parsed HTML content with implicit popped elements."}, {"name": "tracksMarkup", "primary_tested": ["Document.documentType()", "DocumentType.sourceRange()", "Element.sourceRange()", "TextNode.sourceRange()", "CDataNode.sourceRange()"], "external_dependencies": {"modules": ["Document", "DocumentType", "Element", "TextNode", "CDataNode"]}, "category": "unit", "description": "Tests tracking positions of document type, elements, and text nodes in parsed HTML content with markup."}, {"name": "tracksDataNodes", "primary_tested": ["Element.sourceRange()", "DataNode.sourceRange()"], "external_dependencies": {"modules": ["Element", "DataNode"]}, "category": "unit", "description": "Tests tracking positions of data nodes in parsed HTML content."}, {"name": "tracksXml", "primary_tested": ["XmlDeclaration.sourceRange()", "DocumentType.sourceRange()", "Element.sourceRange()", "TextNode.sourceRange()", "Comment.sourceRange()"], "external_dependencies": {"modules": ["XmlDeclaration", "DocumentType", "Element", "TextNode", "Comment"]}, "category": "unit", "description": "Tests tracking positions of XML declarations, document type, elements, and text nodes in parsed XML content."}, {"name": "tracksFromFetch", "primary_tested": ["Jsoup.connect(String)", "Document.expectFirst(String)", "Element.sourceRange()", "TextNode.sourceRange()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element", "TextNode"]}, "category": "integration", "description": "Tests tracking positions of elements and text nodes in parsed HTML content fetched from a URL."}, {"name": "tracksFromXmlFetch", "primary_tested": ["Jsoup.connect(String)", "Document.expectFirst(String)", "Element.sourceRange()"], "external_dependencies": {"modules": ["Jsoup", "Document", "Element"]}, "category": "integration", "description": "Tests tracking positions of elements in parsed XML content fetched from a URL."}, {"name": "tracksTableMovedText", "primary_tested": ["Document.nodeStream(Class)", "TextNode.sourceRange()"], "external_dependencies": {"modules": ["Document", "TextNode"]}, "category": "unit", "description": "Tests tracking positions of text nodes in parsed HTML content with table elements."}, {"name": "tracksClosingHtmlTagsInXml", "primary_tested": ["Element.sourceRange()", "Element.endSourceRange()"], "external_dependencies": {"modules": ["Element"]}, "category": "unit", "description": "Tests tracking positions of elements in parsed XML content with closing HTML tags."}, {"name": "tracksClosingHeadingTags", "primary_tested": ["Element.sourceRange()", "Element.endSourceRange()"], "external_dependencies": {"modules": ["Element"]}, "category": "unit", "description": "Tests tracking positions of heading elements in parsed HTML content."}, {"name": "tracksAttributes", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()", "Range.AttributeRange.isTracked()", "Range.AttributeRange.isImplicit()"], "external_dependencies": {"modules": ["Element", "Attribute", "Range"]}, "category": "unit", "description": "Tests tracking positions of attributes in parsed HTML content."}, {"name": "tracksAttributesAcrossLines", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()", "Range.AttributeRange.isTracked()", "Range.AttributeRange.isImplicit()"], "external_dependencies": {"modules": ["Element", "Attribute", "Range"]}, "category": "unit", "description": "Tests tracking positions of attributes across multiple lines in parsed HTML content."}, {"name": "trackAttributePositionInFirstElement", "primary_tested": ["Element.nodeStream()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes in the first element of parsed HTML content."}, {"name": "trackAttributePositionWithCase", "primary_tested": ["Element.nodeStream()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes with case sensitivity in parsed XML content."}, {"name": "trackAttributesPositionsDedupes", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes with deduplication in parsed HTML content."}, {"name": "trackAttributesPositionsDirectionalDedupes", "primary_tested": ["Element.attributes()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of attributes with directional deduplication in parsed HTML content."}, {"name": "tracksFrag", "primary_tested": ["Parser.parseFragmentInput(String, Element, String)", "Element.nodeStream()", "Attribute.sourceRange()"], "external_dependencies": {"modules": ["Parser", "Element", "Attribute"]}, "category": "unit", "description": "Tests tracking positions of elements and attributes in parsed HTML fragments."}, {"name": "tracksAfterPSelfClose", "primary_tested": ["Document.body()", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of elements after a self-closing P tag in parsed HTML content."}, {"name": "tracksFirstTextnode", "primary_tested": ["Document.body()", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of the first text node in parsed HTML content."}, {"name": "updateKeyMaintainsRangeLc", "primary_tested": ["Attribute.sourceRange()", "Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests updating attribute key while maintaining the source range in parsed HTML content."}, {"name": "tracksDocument", "primary_tested": ["Document.forEachNode(Consumer)", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of elements in the entire document."}, {"name": "tracksDocumentXml", "primary_tested": ["Document.forEachNode(Consumer)", "Element.sourceRange()"], "external_dependencies": {"modules": ["Document", "Element"]}, "category": "unit", "description": "Tests tracking positions of elements in the entire XML document."}, {"name": "updateKeyMaintainsRangeUc", "primary_tested": ["Attribute.sourceRange()", "Attribute.setKey(String)"], "external_dependencies": {"modules": ["Attribute"]}, "category": "unit", "description": "Tests updating attribute key while maintaining the source range in parsed XML content."}]}, {"file_path": "src/test/java/org/jsoup/nodes/NodeTest.java", "testclass_name": "NodeTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.parser.Tag;", "import org.jsoup.select.Elements;", "import org.jsoup.select.NodeVisitor;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import static org.jsoup.parser.Parser.*;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java", "testclass_name": "XmlTreeBuilderTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.*;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.io.InputStream;", "import java.net.URISyntaxException;", "import java.nio.charset.StandardCharsets;", "import java.util.List;", "import static org.jsoup.nodes.Document.OutputSettings.Syntax;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/helper/W3CDomTest.java", "testclass_name": "W3CDomTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.TextNode;", "import org.junit.jupiter.api.Test;", "import org.w3c.dom.Document;", "import org.w3c.dom.Node;", "import org.w3c.dom.NodeList;", "import org.xml.sax.InputSource;", "import javax.xml.parsers.DocumentBuilder;", "import javax.xml.parsers.DocumentBuilderFactory;", "import javax.xml.parsers.ParserConfigurationException;", "import javax.xml.transform.OutputKeys;", "import javax.xml.xpath.XPathConstants;", "import javax.xml.xpath.XPathExpression;", "import javax.xml.xpath.XPathExpressionException;", "import javax.xml.xpath.XPathFactory;", "import java.io.ByteArrayInputStream;", "import java.io.File;", "import java.io.IOException;", "import java.io.StringReader;", "import java.nio.charset.StandardCharsets;", "import java.util.Locale;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "W3CDomTest", "description": "Tests for the W3CDom class, which converts Jsoup documents to W3C DOM documents.", "class_members": {"variables": [], "methods": [{"name": "parseXml", "signature": "private static Document parseXml(String xml, boolean nameSpaceAware)"}, {"name": "xpath", "signature": "private NodeList xpath(Document w3cDoc, String query) throws XPathExpressionException"}, {"name": "output", "signature": "private String output(String in, boolean modeHtml)"}, {"name": "assertEqualsIgnoreCase", "signature": "private void assertEqualsIgnoreCase(String want, String have)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "simpleConversion", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": ["Document.getElementsByTagName(String)", "Document.normalizeDocument()", "Document.getElementsByTagName(String).item(int).getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "NodeList", "TextUtil"], "class_members": [], "project_specific_resources": ["TextUtil.stripNewlines(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the conversion of a simple HTML document from Jsoup to W3C DOM and back, ensuring the structure and content are preserved."}, {"name": "namespacePreservation", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Node.getNamespaceURI()", "Node.getLocalName()", "Node.getNodeName()", "Node.getChildNodes().item(int).getNamespaceURI()", "Node.getChildNodes().item(int).getLocalName()", "Node.getChildNodes().item(int).getNodeName()", "Node.getChildNodes().item(int).getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Node", "NodeList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the preservation of namespaces and local names when converting a Jsoup document with namespaces to a W3C DOM document."}, {"name": "handlesInvalidAttributeNames", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)"], "associated_methods": ["Element.hasAttr(String)", "W3CDom.asString(Document, Map<String, String>)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Element"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of invalid attribute names in HTML documents when converting from Jsoup to W3C DOM."}, {"name": "htmlInputDocMaintainsHtmlAttributeNames", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "TextUtil"], "class_members": [], "project_specific_resources": ["TextUtil.stripNewlines(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests that HTML attribute names are maintained correctly when converting an HTML document from Jsoup to W3C DOM."}, {"name": "xmlInputDocMaintainsHtmlAttributeNames", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": ["TextUtil.stripNewlines(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "TextUtil"], "class_members": [], "project_specific_resources": ["TextUtil.stripNewlines(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests that HTML attribute names are maintained correctly when converting an XML document from Jsoup to W3C DOM."}, {"name": "handlesInvalidTagAsText", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of invalid tags in HTML documents when converting from Jsoup to W3C DOM, ensuring they are treated as text."}, {"name": "canConvertToCustomDocument", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document, Document)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "DocumentBuilderFactory"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ability to convert a Jsoup document to a custom W3C DOM document."}, {"name": "treatsUndeclaredNamespaceAsLocalName", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Node.getNamespaceURI()", "Node.getLocalName()", "Node.getNodeName()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of undeclared namespaces in HTML documents when converting from Jsoup to W3C DOM, ensuring they are treated as local names."}, {"name": "xmlnsXpathTest", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int).getLocalName()", "NodeList.item(int).getNamespaceURI()", "NodeList.item(int).getPrefix()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of XPath queries with namespaces in HTML documents when converting from Jsoup to W3C DOM."}, {"name": "xhtmlNoNamespace", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int).getLocalName()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of XPath queries without namespaces in HTML documents when converting from Jsoup to W3C DOM."}, {"name": "canDisableNamespaces", "primary_tested": ["W3CDom.namespaceAware(boolean)", "W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int).getLocalName()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ability to disable namespace awareness in W3CDom when converting from Jsoup to W3C DOM."}, {"name": "testRoundTripDoctype", "primary_tested": ["W3CDom.convert(org.jsoup.nodes.Document)"], "associated_methods": ["TextUtil.normalizeSpaces(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "TextUtil"], "class_members": [], "project_specific_resources": ["TextUtil.normalizeSpaces(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the round-trip conversion of different types of doctypes from Jsoup to W3C DOM and back, ensuring the doctype is preserved."}, {"name": "canOutputHtmlWithoutNamespace", "primary_tested": ["W3CDom.namespaceAware(boolean)", "W3CDom.fromJsoup(org.jsoup.nodes.Document)", "W3CDom.asString(Document, Map<String, String>)"], "associated_methods": [], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the ability to output HTML without namespaces when converting from Jsoup to W3C DOM."}, {"name": "convertsElementsAndMaintainsSource", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Node.getLocalName()", "Node.getUserData(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Element", "Node"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the conversion of elements from Jsoup to W3C DOM while maintaining the source information."}, {"name": "canXmlParseCdataNodes", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["XPathExpression.evaluate(Document, QName)", "NodeList.getLength()", "NodeList.item(int).getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "XPathExpression", "NodeList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the parsing of CDATA nodes in XML documents when converting from Jsoup to W3C DOM."}, {"name": "handlesEmptyDoctype", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Document.getDoctype()", "Document.getFirstChild().getTextContent()"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the handling of empty doctypes in HTML documents when converting from Jsoup to W3C DOM."}, {"name": "testHtmlParseAttributesAreCaseInsensitive", "primary_tested": ["W3CDom.fromJsoup(org.jsoup.nodes.Document)"], "associated_methods": ["Document.getDocumentElement().getElementsByTagName(String)", "NodeList.getLength()", "Element.getAttribute(String)"], "external_dependencies": {"modules": ["Jsoup", "W3CDom", "Document", "Element", "NodeList"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests that HTML attribute names are case-insensitive when parsing HTML documents with Jsoup and converting to W3C DOM."}]}, {"file_path": "src/test/java/org/jsoup/safety/CleanerTest.java", "testclass_name": "CleanerTest", "dependencies": ["package org.jsoup.safety;", "import org.jsoup.Jsoup;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Entities;", "import org.jsoup.nodes.Range;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.Arrays;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/parser/CharacterReaderTest.java", "testclass_name": "CharacterReaderTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.internal.StringUtil;", "import org.junit.jupiter.api.Test;", "import java.io.BufferedReader;", "import java.io.IOException;", "import java.io.StringReader;", "import java.io.UncheckedIOException;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/integration/ConnectTest.java", "testclass_name": "ConnectTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.HttpStatusException;", "import org.jsoup.Jsoup;", "import org.jsoup.Connection.Method;", "import org.jsoup.UnsupportedMimeTypeException;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.helper.W3CDom;", "import org.jsoup.integration.servlets.*;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.FormElement;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.XmlDeclaration;", "import org.jsoup.parser.HtmlTreeBuilder;", "import org.jsoup.parser.Parser;", "import org.jsoup.parser.StreamParser;", "import org.jsoup.parser.XmlTreeBuilder;", "import org.junit.jupiter.api.BeforeAll;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import org.junit.jupiter.params.provider.ValueSource;", "import javax.servlet.http.HttpServletResponse;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.net.Authenticator;", "import java.net.MalformedURLException;", "import java.net.URL;", "import java.net.URLDecoder;", "import java.nio.file.Files;", "import java.nio.file.Path;", "import java.util.List;", "import java.util.Map;", "import java.util.concurrent.atomic.AtomicBoolean;", "import java.util.concurrent.atomic.AtomicInteger;", "import java.util.stream.Stream;", "import static org.jsoup.helper.AuthenticationHandlerTest.MaxAttempts;", "import static org.jsoup.helper.HttpConnection.CONTENT_TYPE;", "import static org.jsoup.helper.HttpConnection.MULTIPART_FORM_DATA;", "import static org.jsoup.integration.UrlConnectTest.browserUa;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/integration/UrlConnectTest.java", "testclass_name": "UrlConnectTest", "dependencies": ["package org.jsoup.integration;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.UnsupportedMimeTypeException;", "import org.jsoup.helper.W3CDom;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.FormElement;", "import org.jsoup.parser.HtmlTreeBuilder;", "import org.jsoup.parser.Parser;", "import org.jsoup.parser.XmlTreeBuilder;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import java.io.File;", "import java.io.FileInputStream;", "import java.io.IOException;", "import java.net.ConnectException;", "import java.net.InetSocketAddress;", "import java.net.Proxy;", "import java.net.URL;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/select/ElementsTest.java", "testclass_name": "ElementsTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.nodes.Comment;", "import org.jsoup.nodes.DataNode;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.FormElement;", "import org.jsoup.nodes.Node;", "import org.jsoup.nodes.TextNode;", "import org.junit.jupiter.api.Test;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;", "import static org.junit.jupiter.api.Assertions.assertFalse;"]}, {"file_path": "src/test/java/org/jsoup/parser/HtmlParserTest.java", "testclass_name": "HtmlParserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.internal.StringUtil;", "import org.jsoup.nodes.*;", "import org.jsoup.safety.Safelist;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.ByteArrayInputStream;", "import java.io.File;", "import java.io.IOException;", "import java.util.List;", "import java.util.stream.Stream;", "import static org.jsoup.parser.ParseSettings.preserveCase;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/select/SelectorTest.java", "testclass_name": "SelectorTest", "dependencies": ["package org.jsoup.select;", "import org.jsoup.Jsoup;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.parser.Parser;", "import org.junit.jupiter.api.Test;", "import java.util.IdentityHashMap;", "import java.util.Locale;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/helper/HttpConnectionTest.java", "testclass_name": "HttpConnectionTest", "dependencies": ["package org.jsoup.helper;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.MultiLocaleExtension.MultiLocaleTest;", "import org.jsoup.integration.ParseTest;", "import org.junit.jupiter.api.Test;", "import java.io.IOException;", "import java.net.Authenticator;", "import java.net.MalformedURLException;", "import java.net.PasswordAuthentication;", "import java.net.URL;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Locale;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/nodes/DocumentTest.java", "testclass_name": "DocumentTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.nodes.Document.OutputSettings;", "import org.jsoup.nodes.Document.OutputSettings.Syntax;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import java.io.*;", "import java.nio.charset.Charset;", "import java.nio.charset.StandardCharsets;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/parser/StreamParserTest.java", "testclass_name": "StreamParserTest", "dependencies": ["package org.jsoup.parser;", "import org.jsoup.Connection;", "import org.jsoup.Jsoup;", "import org.jsoup.helper.DataUtil;", "import org.jsoup.integration.ParseTest;", "import org.jsoup.integration.servlets.FileServlet;", "import org.jsoup.nodes.Document;", "import org.jsoup.nodes.Element;", "import org.jsoup.nodes.Node;", "import org.jsoup.select.Elements;", "import org.junit.jupiter.api.Test;", "import java.io.BufferedReader;", "import java.io.File;", "import java.io.IOException;", "import java.io.InputStreamReader;", "import java.nio.charset.StandardCharsets;", "import java.nio.file.Files;", "import java.util.Iterator;", "import java.util.List;", "import java.util.NoSuchElementException;", "import java.util.concurrent.atomic.AtomicReference;", "import static org.junit.jupiter.api.Assertions.*;"]}, {"file_path": "src/test/java/org/jsoup/nodes/ElementTest.java", "testclass_name": "ElementTest", "dependencies": ["package org.jsoup.nodes;", "import org.jsoup.Jsoup;", "import org.jsoup.TextUtil;", "import org.jsoup.helper.ValidationException;", "import org.jsoup.parser.ParseSettings;", "import org.jsoup.parser.Parser;", "import org.jsoup.parser.Tag;", "import org.jsoup.select.Elements;", "import org.jsoup.select.Evaluator;", "import org.jsoup.select.NodeFilter;", "import org.jsoup.select.NodeVisitor;", "import org.jsoup.select.QueryParser;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.ArrayList;", "import java.util.Collection;", "import java.util.HashSet;", "import java.util.LinkedHashSet;", "import java.util.List;", "import java.util.Map;", "import java.util.Set;", "import java.util.concurrent.atomic.AtomicInteger;", "import java.util.regex.Pattern;", "import java.util.stream.Stream;", "import static org.jsoup.select.SelectorTest.assertSelectedOwnText;", "import static org.junit.jupiter.api.Assertions.*;"]}]