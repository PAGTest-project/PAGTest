[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.parser.Tag;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_basicTest {\n\n    @Test\n    public void testBasicSafelistTags() {\n        Safelist safelist = Safelist.basic();\n\n        // Test allowed tags\n        assertTrue(safelist.isSafeTag(\"a\"));\n        assertTrue(safelist.isSafeTag(\"blockquote\"));\n        assertTrue(safelist.isSafeTag(\"br\"));\n        assertTrue(safelist.isSafeTag(\"cite\"));\n        assertTrue(safelist.isSafeTag(\"code\"));\n        assertTrue(safelist.isSafeTag(\"dd\"));\n        assertTrue(safelist.isSafeTag(\"dl\"));\n        assertTrue(safelist.isSafeTag(\"dt\"));\n        assertTrue(safelist.isSafeTag(\"em\"));\n        assertTrue(safelist.isSafeTag(\"i\"));\n        assertTrue(safelist.isSafeTag(\"li\"));\n        assertTrue(safelist.isSafeTag(\"ol\"));\n        assertTrue(safelist.isSafeTag(\"p\"));\n        assertTrue(safelist.isSafeTag(\"pre\"));\n        assertTrue(safelist.isSafeTag(\"q\"));\n        assertTrue(safelist.isSafeTag(\"small\"));\n        assertTrue(safelist.isSafeTag(\"span\"));\n        assertTrue(safelist.isSafeTag(\"strike\"));\n        assertTrue(safelist.isSafeTag(\"strong\"));\n        assertTrue(safelist.isSafeTag(\"sub\"));\n        assertTrue(safelist.isSafeTag(\"sup\"));\n        assertTrue(safelist.isSafeTag(\"u\"));\n        assertTrue(safelist.isSafeTag(\"ul\"));\n\n        // Test disallowed tags\n        assertFalse(safelist.isSafeTag(\"script\"));\n        assertFalse(safelist.isSafeTag(\"img\"));\n    }\n\n    @Test\n    public void testBasicSafelistAttributes() {\n        Safelist safelist = Safelist.basic();\n\n        // Test allowed attributes for 'a' tag\n        Attributes attributes = new Attributes();\n        Attribute hrefAttribute = new Attribute(\"href\", \"http://example.com\");\n        attributes.put(hrefAttribute);\n        Element aElement = new Element(Tag.valueOf(\"a\"), \"\", attributes);\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, hrefAttribute));\n\n        // Test disallowed attributes for 'a' tag\n        Attribute classAttribute = new Attribute(\"class\", \"example\");\n        attributes.put(classAttribute);\n        assertFalse(safelist.isSafeAttribute(\"a\", aElement, classAttribute));\n\n        // Test allowed attributes for 'blockquote' tag\n        Attribute citeAttribute = new Attribute(\"cite\", \"http://example.com\");\n        attributes.put(citeAttribute);\n        Element blockquoteElement = new Element(Tag.valueOf(\"blockquote\"), \"\", attributes);\n        assertTrue(safelist.isSafeAttribute(\"blockquote\", blockquoteElement, citeAttribute));\n\n        // Test disallowed attributes for 'blockquote' tag\n        Attribute idAttribute = new Attribute(\"id\", \"example\");\n        attributes.put(idAttribute);\n        assertFalse(safelist.isSafeAttribute(\"blockquote\", blockquoteElement, idAttribute));\n    }\n\n    @Test\n    public void testBasicSafelistProtocols() {\n        Safelist safelist = Safelist.basic();\n\n        // Test allowed protocols for 'a' tag\n        Attributes attributes = new Attributes();\n        Attribute httpAttribute = new Attribute(\"href\", \"http://example.com\");\n        attributes.put(httpAttribute);\n        Element aElement = new Element(Tag.valueOf(\"a\"), \"\", attributes);\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, httpAttribute));\n\n        Attribute httpsAttribute = new Attribute(\"href\", \"https://example.com\");\n        attributes.put(httpsAttribute);\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, httpsAttribute));\n\n        Attribute ftpAttribute = new Attribute(\"href\", \"ftp://example.com\");\n        attributes.put(ftpAttribute);\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, ftpAttribute));\n\n        Attribute mailtoAttribute = new Attribute(\"href\", \"mailto:example@example.com\");\n        attributes.put(mailtoAttribute);\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, mailtoAttribute));\n\n        // Test disallowed protocols for 'a' tag\n        Attribute invalidAttribute = new Attribute(\"href\", \"invalid://example.com\");\n        attributes.put(invalidAttribute);\n        assertFalse(safelist.isSafeAttribute(\"a\", aElement, invalidAttribute));\n    }\n\n    @Test\n    public void testBasicSafelistEnforcedAttributes() {\n        Safelist safelist = Safelist.basic();\n\n        // Test enforced attribute for 'a' tag\n        Attributes attributes = new Attributes();\n        Attribute relAttribute = new Attribute(\"rel\", \"nofollow\");\n        attributes.put(relAttribute);\n        Element aElement = new Element(Tag.valueOf(\"a\"), \"\", attributes);\n        assertTrue(safelist.isSafeAttribute(\"a\", aElement, relAttribute));\n\n        // Test enforced attribute value mismatch for 'a' tag\n        Attribute invalidRelAttribute = new Attribute(\"rel\", \"follow\");\n        attributes.put(invalidRelAttribute);\n        assertFalse(safelist.isSafeAttribute(\"a\", aElement, invalidRelAttribute));\n    }\n}\n"}]