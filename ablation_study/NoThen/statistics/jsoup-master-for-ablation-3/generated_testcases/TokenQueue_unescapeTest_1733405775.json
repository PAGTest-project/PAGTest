[{"strategy": "retry", "code": "\npackage org.jsoup.parser;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TokenQueue_unescapeTest {\n\n    private static final char ESC = '\\\\';\n\n    public static String unescape(String in) {\n        StringBuilder out = new StringBuilder();\n        char last = 0;\n        for (char c : in.toCharArray()) {\n            if (c == ESC) {\n                if (last == ESC) {\n                    out.append(c);\n                    last = 0; // Reset last to avoid double escape\n                }\n            } else {\n                out.append(c);\n            }\n            last = c;\n        }\n        return out.toString();\n    }\n\n    @Test\n    public void testUnescapeWithNoEscapes() {\n        String input = \"noEscapesHere\";\n        assertEquals(input, unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithSingleEscape() {\n        String input = \"single\\\\escape\";\n        assertEquals(\"singleescape\", unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithMultipleEscapes() {\n        String input = \"multi\\\\ple\\\\escapes\";\n        assertEquals(\"multiplescapes\", unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithConsecutiveEscapes() {\n        String input = \"consecutive\\\\\\\\escapes\";\n        assertEquals(\"consecutive\\\\escapes\", unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithEscapedEscape() {\n        String input = \"escaped\\\\escape\\\\\";\n        assertEquals(\"escapedescape\", unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithEmptyString() {\n        String input = \"\";\n        assertEquals(input, unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithOnlyEscapes() {\n        String input = \"\\\\\\\\\\\\\\\\\";\n        assertEquals(\"\\\\\\\\\", unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithMixedCharacters() {\n        String input = \"a\\\\b\\\\c\\\\d\\\\e\\\\f\";\n        assertEquals(\"abcdef\", unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithSpecialCharacters() {\n        String input = \"special\\\\#\\\\.\\\\/\\\\\\\\characters\";\n        assertEquals(\"special#./\\\\characters\", unescape(input));\n    }\n\n    @Test\n    public void testUnescapeWithWhitespace() {\n        String input = \"whitespace \\\\ \\\\ \\\\ \";\n        assertEquals(\"whitespace    \", unescape(input));\n    }\n}\n"}]