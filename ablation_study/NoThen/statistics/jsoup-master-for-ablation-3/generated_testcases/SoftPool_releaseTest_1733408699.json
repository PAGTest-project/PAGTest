[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Stack;\nimport java.util.function.Supplier;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SoftPool_releaseTest {\n    private static final int BufSize = 1024;\n    private SoftPool<char[]> softPool;\n\n    @BeforeEach\n    public void setUp() {\n        softPool = new SoftPool<>(() -> new char[BufSize]);\n    }\n\n    @Test\n    public void testReleaseWhenStackIsNotFull() {\n        char[] buffer = softPool.borrow();\n        softPool.release(buffer);\n        Stack<char[]> stack = softPool.getStack();\n        assertEquals(1, stack.size());\n        assertSame(buffer, stack.peek());\n    }\n\n    @Test\n    public void testReleaseWhenStackIsFull() {\n        Stack<char[]> stack = softPool.getStack();\n        for (int i = 0; i < SoftPool.MaxIdle; i++) {\n            stack.push(new char[BufSize]);\n        }\n        char[] buffer = new char[BufSize];\n        softPool.release(buffer);\n        assertEquals(SoftPool.MaxIdle, stack.size());\n        assertNotSame(buffer, stack.peek());\n    }\n\n    @Test\n    public void testReleaseAfterBorrow() {\n        char[] buffer1 = softPool.borrow();\n        char[] buffer2 = softPool.borrow();\n        softPool.release(buffer1);\n        softPool.release(buffer2);\n        Stack<char[]> stack = softPool.getStack();\n        assertEquals(2, stack.size());\n        assertSame(buffer2, stack.pop());\n        assertSame(buffer1, stack.pop());\n    }\n}\n"}]