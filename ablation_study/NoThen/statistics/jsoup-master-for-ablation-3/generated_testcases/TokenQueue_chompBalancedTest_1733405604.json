[{"strategy": "generate", "code": "\npackage org.jsoup.parser;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TokenQueue_chompBalancedTest {\n    private TokenQueue tokenQueue;\n\n    @BeforeEach\n    public void setUp() {\n        tokenQueue = new TokenQueue(\"One (Two) Three\");\n    }\n\n    @Test\n    public void testChompBalancedSimple() {\n        tokenQueue.consumeTo(\"(\");\n        assertEquals(\"Two\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedNested() {\n        tokenQueue = new TokenQueue(\"One (Two (Nested) Three) Four\");\n        tokenQueue.consumeTo(\"(\");\n        assertEquals(\"Two (Nested) Three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedUnmatchedOpen() {\n        tokenQueue = new TokenQueue(\"One (Two (Nested) Three Four\");\n        tokenQueue.consumeTo(\"(\");\n        assertThrows(IllegalArgumentException.class, () -> tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedUnmatchedClose() {\n        tokenQueue = new TokenQueue(\"One (Two (Nested) Three) Four) Five\");\n        tokenQueue.consumeTo(\"(\");\n        assertEquals(\"Two (Nested) Three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithQuotes() {\n        tokenQueue = new TokenQueue(\"One (Two '(\\\"Nested\\\")' Three) Four\");\n        tokenQueue.consumeTo(\"(\");\n        assertEquals(\"Two '(\\\"Nested\\\")' Three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithEscapes() {\n        tokenQueue = new TokenQueue(\"One (Two \\\\(Nested\\\\) Three) Four\");\n        tokenQueue.consumeTo(\"(\");\n        assertEquals(\"Two \\\\(Nested\\\\) Three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedEmpty() {\n        tokenQueue = new TokenQueue(\"One () Three\");\n        tokenQueue.consumeTo(\"(\");\n        assertEquals(\"\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedNoMatch() {\n        tokenQueue = new TokenQueue(\"One Two Three\");\n        tokenQueue.consumeTo(\"(\");\n        assertEquals(\"\", tokenQueue.chompBalanced('(', ')'));\n    }\n}\n"}]