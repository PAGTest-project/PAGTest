[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Elements_hasClassTest {\n    private Elements elements;\n\n    @BeforeEach\n    public void setUp() {\n        String html = \"<div class='test-class'></div><div></div>\";\n        Document doc = Jsoup.parse(html);\n        elements = new Elements(doc.select(\"div\"));\n    }\n\n    @Test\n    public void testHasClassWhenClassExists() {\n        assertTrue(elements.hasClass(\"test-class\"));\n    }\n\n    @Test\n    public void testHasClassWhenClassDoesNotExist() {\n        assertFalse(elements.hasClass(\"non-existent-class\"));\n    }\n\n    @Test\n    public void testHasClassAfterAddingClass() {\n        elements.addClass(\"new-class\");\n        assertTrue(elements.hasClass(\"new-class\"));\n    }\n\n    @Test\n    public void testHasClassAfterRemovingClass() {\n        elements.removeClass(\"test-class\");\n        assertFalse(elements.hasClass(\"test-class\"));\n    }\n\n    @Test\n    public void testHasClassAfterTogglingClass() {\n        elements.toggleClass(\"test-class\");\n        assertFalse(elements.hasClass(\"test-class\"));\n        elements.toggleClass(\"test-class\");\n        assertTrue(elements.hasClass(\"test-class\"));\n    }\n\n    @Test\n    public void testHasClassWithMultipleElements() {\n        String html = \"<div class='test-class'></div><div class='test-class'></div>\";\n        Document doc = Jsoup.parse(html);\n        elements = new Elements(doc.select(\"div\"));\n        assertTrue(elements.hasClass(\"test-class\"));\n    }\n\n    @Test\n    public void testHasClassWithNoElements() {\n        elements = new Elements();\n        assertFalse(elements.hasClass(\"test-class\"));\n    }\n}\n"}]