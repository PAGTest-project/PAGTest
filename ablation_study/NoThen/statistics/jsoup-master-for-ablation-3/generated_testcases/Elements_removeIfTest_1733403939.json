[{"strategy": "generate", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.function.Predicate;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Elements_removeIfTest {\n    private Elements elements;\n\n    @BeforeEach\n    public void setUp() {\n        elements = new Elements();\n    }\n\n    @Test\n    public void testRemoveIfWithNoElements() {\n        Predicate<Element> filter = e -> e.tagName().equals(\"div\");\n        assertFalse(elements.removeIf(filter));\n    }\n\n    @Test\n    public void testRemoveIfWithMatchingElements() {\n        Element div1 = new Element(\"div\");\n        Element div2 = new Element(\"div\");\n        Element span = new Element(\"span\");\n        elements.addAll(Arrays.asList(div1, div2, span));\n\n        Predicate<Element> filter = e -> e.tagName().equals(\"div\");\n        assertTrue(elements.removeIf(filter));\n        assertEquals(1, elements.size());\n        assertEquals(\"span\", elements.get(0).tagName());\n    }\n\n    @Test\n    public void testRemoveIfWithNoMatchingElements() {\n        Element span1 = new Element(\"span\");\n        Element span2 = new Element(\"span\");\n        elements.addAll(Arrays.asList(span1, span2));\n\n        Predicate<Element> filter = e -> e.tagName().equals(\"div\");\n        assertFalse(elements.removeIf(filter));\n        assertEquals(2, elements.size());\n        assertEquals(\"span\", elements.get(0).tagName());\n        assertEquals(\"span\", elements.get(1).tagName());\n    }\n\n    @Test\n    public void testRemoveIfWithAllMatchingElements() {\n        Element div1 = new Element(\"div\");\n        Element div2 = new Element(\"div\");\n        elements.addAll(Arrays.asList(div1, div2));\n\n        Predicate<Element> filter = e -> e.tagName().equals(\"div\");\n        assertTrue(elements.removeIf(filter));\n        assertTrue(elements.isEmpty());\n    }\n\n    @Test\n    public void testRemoveIfWithComplexFilter() {\n        Element div = new Element(\"div\");\n        Element span = new Element(\"span\");\n        Element p = new Element(\"p\");\n        elements.addAll(Arrays.asList(div, span, p));\n\n        Predicate<Element> filter = e -> e.tagName().equals(\"div\") || e.tagName().equals(\"p\");\n        assertTrue(elements.removeIf(filter));\n        assertEquals(1, elements.size());\n        assertEquals(\"span\", elements.get(0).tagName());\n    }\n\n    @Test\n    public void testRemoveIfWithSelectMethod() {\n        Document doc = Jsoup.parse(\"<div class='test'></div><span></span>\");\n        elements = doc.select(\".test\");\n\n        Predicate<Element> filter = e -> e.className().equals(\"test\");\n        assertTrue(elements.removeIf(filter));\n        assertTrue(elements.isEmpty());\n    }\n\n    @Test\n    public void testRemoveIfWithRemoveMethod() {\n        Element div = new Element(\"div\");\n        Element span = new Element(\"span\");\n        elements.addAll(Arrays.asList(div, span));\n\n        Predicate<Element> filter = e -> e.tagName().equals(\"div\");\n        assertTrue(elements.removeIf(filter));\n        assertEquals(1, elements.size());\n        assertEquals(\"span\", elements.get(0).tagName());\n\n        elements.remove();\n        assertTrue(elements.isEmpty());\n    }\n\n    @Test\n    public void testRemoveIfWithClearMethod() {\n        Element div = new Element(\"div\");\n        Element span = new Element(\"span\");\n        elements.addAll(Arrays.asList(div, span));\n\n        Predicate<Element> filter = e -> e.tagName().equals(\"div\");\n        assertTrue(elements.removeIf(filter));\n        assertEquals(1, elements.size());\n        assertEquals(\"span\", elements.get(0).tagName());\n\n        elements.clear();\n        assertTrue(elements.isEmpty());\n    }\n}\n"}]