[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_resolveTest {\n\n    @Test\n    void testResolveWithValidRelativeUrl() throws MalformedURLException {\n        URL base = new URL(\"http://example.com/path/file\");\n        String relUrl = \"?foo\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"http://example.com/path/file?foo\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithInvalidRelativeUrl() {\n        URL base = new URL(\"http://example.com/path/file\");\n        String relUrl = \"?foo\\u0000\";\n        assertThrows(MalformedURLException.class, () -> StringUtil.resolve(base, relUrl));\n    }\n\n    @Test\n    void testResolveWithControlCharsInBaseUrl() {\n        String baseUrl = \"http://example.com/path/file\\u0000\";\n        String relUrl = \"?foo\";\n        assertThrows(MalformedURLException.class, () -> new URL(baseUrl));\n    }\n\n    @Test\n    void testResolveWithNonAsciiChars() throws MalformedURLException {\n        URL base = new URL(\"http://example.com/path/file\");\n        String relUrl = \"\u6d4b\u8bd5\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"http://example.com/path/file/%E6%B5%8B%E8%AF%95\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithEmptyRelativeUrl() throws MalformedURLException {\n        URL base = new URL(\"http://example.com/path/file\");\n        String relUrl = \"\";\n        URL resolvedUrl = StringUtil.resolve(base, relUrl);\n        assertEquals(\"http://example.com/path/file\", resolvedUrl.toString());\n    }\n\n    @Test\n    void testResolveWithEmptyBaseUrl() {\n        URL base = null;\n        String relUrl = \"http://example.com/path/file\";\n        assertThrows(NullPointerException.class, () -> StringUtil.resolve(base, relUrl));\n    }\n\n    @Test\n    void testResolveWithMalformedBaseUrl() {\n        String baseUrl = \"http://example.com/path/file\\u0000\";\n        String relUrl = \"?foo\";\n        assertThrows(MalformedURLException.class, () -> new URL(baseUrl));\n    }\n\n    @Test\n    void testResolveWithMalformedRelativeUrl() {\n        URL base = new URL(\"http://example.com/path/file\");\n        String relUrl = \"?foo\\u0000\";\n        assertThrows(MalformedURLException.class, () -> StringUtil.resolve(base, relUrl));\n    }\n}\n"}]