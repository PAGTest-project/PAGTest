[{"strategy": "generate", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.nodes.Node;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class NodeTraversor_filterTest {\n\n    private Document doc;\n\n    @BeforeEach\n    public void setUp() {\n        doc = Jsoup.parse(\"<div><p>One</p></div>\");\n    }\n\n    @Test\n    public void testFilterStop() {\n        NodeFilter filter = new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.STOP;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        };\n        FilterResult result = NodeTraversor.filter(filter, doc);\n        assertEquals(FilterResult.STOP, result);\n    }\n\n    @Test\n    public void testFilterContinue() {\n        NodeFilter filter = new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        };\n        FilterResult result = NodeTraversor.filter(filter, doc);\n        assertEquals(FilterResult.CONTINUE, result);\n    }\n\n    @Test\n    public void testFilterRemove() {\n        NodeFilter filter = new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.REMOVE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        };\n        FilterResult result = NodeTraversor.filter(filter, doc);\n        assertEquals(FilterResult.CONTINUE, result);\n        assertEquals(0, doc.childNodeSize());\n    }\n\n    @Test\n    public void testFilterSkipChildren() {\n        NodeFilter filter = new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                return FilterResult.SKIP_CHILDREN;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        };\n        FilterResult result = NodeTraversor.filter(filter, doc);\n        assertEquals(FilterResult.CONTINUE, result);\n        assertEquals(1, doc.childNodeSize());\n    }\n}\n"}]