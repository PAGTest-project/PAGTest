[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Stack;\nimport java.util.function.Supplier;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SoftPool_borrowTest {\n    private static final int BufSize = 1024;\n    private SoftPool<char[]> softPool;\n\n    @BeforeEach\n    public void setUp() {\n        softPool = new SoftPool<>(() -> new char[BufSize]);\n    }\n\n    @Test\n    public void testBorrowWithEmptyStack() {\n        char[] borrowed = softPool.borrow();\n        assertNotNull(borrowed);\n        assertEquals(BufSize, borrowed.length);\n    }\n\n    @Test\n    public void testBorrowWithNonEmptyStack() {\n        char[] buffer = new char[BufSize];\n        softPool.release(buffer);\n        char[] borrowed = softPool.borrow();\n        assertSame(buffer, borrowed);\n    }\n\n    @Test\n    public void testBorrowAndRelease() {\n        char[] buffer1 = softPool.borrow();\n        char[] buffer2 = softPool.borrow();\n        assertNotSame(buffer1, buffer2);\n\n        softPool.release(buffer1);\n        char[] borrowedAgain = softPool.borrow();\n        assertSame(buffer1, borrowedAgain);\n    }\n\n    @Test\n    public void testBorrowWithMultipleReleases() {\n        char[] buffer1 = new char[BufSize];\n        char[] buffer2 = new char[BufSize];\n        softPool.release(buffer1);\n        softPool.release(buffer2);\n\n        char[] borrowed1 = softPool.borrow();\n        char[] borrowed2 = softPool.borrow();\n        assertNotSame(borrowed1, borrowed2);\n    }\n\n    @Test\n    public void testBorrowWithMaxIdle() {\n        Stack<char[]> stack = softPool.getStack();\n        for (int i = 0; i < SoftPool.MaxIdle; i++) {\n            softPool.release(new char[BufSize]);\n        }\n        assertEquals(SoftPool.MaxIdle, stack.size());\n\n        char[] buffer = new char[BufSize];\n        softPool.release(buffer);\n        assertEquals(SoftPool.MaxIdle, stack.size());\n\n        char[] borrowed = softPool.borrow();\n        assertNotNull(borrowed);\n    }\n}\n"}]