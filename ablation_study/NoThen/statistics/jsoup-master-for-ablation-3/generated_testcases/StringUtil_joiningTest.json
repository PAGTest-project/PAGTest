[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_joiningTest {\n\n    @Test\n    public void testJoiningWithDelimiter() {\n        List<CharSequence> strings = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        String result = strings.stream().collect(StringUtil.joining(\", \"));\n        assertEquals(\"apple, banana, cherry\", result);\n    }\n\n    @Test\n    public void testJoiningWithEmptyList() {\n        List<CharSequence> strings = Collections.emptyList();\n        String result = strings.stream().collect(StringUtil.joining(\", \"));\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testJoiningWithSingleElement() {\n        List<CharSequence> strings = Collections.singletonList(\"apple\");\n        String result = strings.stream().collect(StringUtil.joining(\", \"));\n        assertEquals(\"apple\", result);\n    }\n\n    @Test\n    public void testJoiningWithNullElement() {\n        List<CharSequence> strings = Arrays.asList(\"apple\", null, \"cherry\");\n        String result = strings.stream().collect(StringUtil.joining(\", \"));\n        assertEquals(\"apple, null, cherry\", result);\n    }\n\n    @Test\n    public void testJoiningWithWhitespaceDelimiter() {\n        List<CharSequence> strings = Arrays.asList(\"apple\", \"banana\", \"cherry\");\n        String result = strings.stream().collect(StringUtil.joining(\" \"));\n        assertEquals(\"apple banana cherry\", result);\n    }\n}\n"}]