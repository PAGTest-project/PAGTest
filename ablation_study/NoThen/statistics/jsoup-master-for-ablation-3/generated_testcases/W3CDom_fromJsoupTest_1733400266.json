[{"strategy": "generate", "code": "\npackage org.jsoup.helper;\n\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.DocumentType;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.w3c.dom.DOMImplementation;\nimport org.w3c.dom.DocumentType as W3CDocumentType;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\nclass W3CDom_fromJsoupTest {\n\n    private W3CDom w3cDom;\n    private DocumentBuilderFactory mockFactory;\n    private DocumentBuilder mockBuilder;\n    private DOMImplementation mockImpl;\n\n    @BeforeEach\n    void setUp() throws ParserConfigurationException {\n        w3cDom = new W3CDom();\n        mockFactory = mock(DocumentBuilderFactory.class);\n        mockBuilder = mock(DocumentBuilder.class);\n        mockImpl = mock(DOMImplementation.class);\n        w3cDom.factory = mockFactory;\n        when(mockFactory.newDocumentBuilder()).thenReturn(mockBuilder);\n        when(mockBuilder.getDOMImplementation()).thenReturn(mockImpl);\n    }\n\n    @Test\n    void testFromJsoup_withValidDocumentType() throws Exception {\n        Document mockJsoupDoc = mock(Document.class);\n        DocumentType mockDocType = mock(DocumentType.class);\n        when(mockJsoupDoc.ownerDocument()).thenReturn(mockJsoupDoc);\n        when(mockJsoupDoc.documentType()).thenReturn(mockDocType);\n        when(mockDocType.name()).thenReturn(\"html\");\n        when(mockDocType.publicId()).thenReturn(\"-//W3C//DTD HTML 4.01//EN\");\n        when(mockDocType.systemId()).thenReturn(\"http://www.w3.org/TR/html4/strict.dtd\");\n        when(mockImpl.createDocumentType(anyString(), anyString(), anyString())).thenReturn(mock(W3CDocumentType.class));\n\n        org.w3c.dom.Document result = w3cDom.fromJsoup(mockJsoupDoc);\n        assertNotNull(result);\n    }\n\n    @Test\n    void testFromJsoup_withNullElement() {\n        assertThrows(IllegalArgumentException.class, () -> w3cDom.fromJsoup(null));\n    }\n\n    @Test\n    void testFromJsoup_withParserConfigurationException() throws Exception {\n        when(mockFactory.newDocumentBuilder()).thenThrow(ParserConfigurationException.class);\n        assertThrows(IllegalStateException.class, () -> w3cDom.fromJsoup(mock(Element.class)));\n    }\n}\n"}]