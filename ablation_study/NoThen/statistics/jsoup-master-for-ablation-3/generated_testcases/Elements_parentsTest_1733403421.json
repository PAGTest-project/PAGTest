[{"strategy": "retry", "code": "\npackage org.jsoup.select;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Elements_parentsTest {\n    private Elements elements;\n\n    @BeforeEach\n    public void setUp() {\n        elements = new Elements();\n    }\n\n    @Test\n    public void testParentsWithSingleElement() {\n        Element element = new Element(\"div\");\n        elements.add(element);\n        Elements parents = elements.parents();\n        assertEquals(0, parents.size());\n    }\n\n    @Test\n    public void testParentsWithNestedElements() {\n        Document doc = Jsoup.parse(\"<div><p><a></a></p></div>\");\n        elements.add(doc.select(\"a\").first());\n        Elements parents = elements.parents();\n        assertEquals(2, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n    }\n\n    @Test\n    public void testParentsWithMultipleElements() {\n        Document doc = Jsoup.parse(\"<div><p><a></a></p></div><div><p><a></a></p></div>\");\n        elements.addAll(doc.select(\"a\"));\n        Elements parents = elements.parents();\n        assertEquals(4, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n        assertEquals(\"p\", parents.get(2).tagName());\n        assertEquals(\"div\", parents.get(3).tagName());\n    }\n\n    @Test\n    public void testParentsWithNoElements() {\n        Elements parents = elements.parents();\n        assertEquals(0, parents.size());\n    }\n\n    @Test\n    public void testParentsWithFilteredElements() {\n        Document doc = Jsoup.parse(\"<div class='test'><p><a></a></p></div><div><p><a></a></p></div>\");\n        elements.addAll(doc.select(\"a\"));\n        elements.filter(new NodeFilter() {\n            @Override\n            public FilterResult head(Node node, int depth) {\n                if (node instanceof Element && ((Element) node).hasClass(\"test\")) {\n                    return FilterResult.REMOVE;\n                }\n                return FilterResult.CONTINUE;\n            }\n\n            @Override\n            public FilterResult tail(Node node, int depth) {\n                return FilterResult.CONTINUE;\n            }\n        });\n        Elements parents = elements.parents();\n        assertEquals(2, parents.size());\n        assertEquals(\"p\", parents.get(0).tagName());\n        assertEquals(\"div\", parents.get(1).tagName());\n    }\n}\n"}]