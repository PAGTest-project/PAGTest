[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_addEnforcedAttributeTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_ValidInput() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        Attributes enforcedAttributes = safelist.getEnforcedAttributes(\"a\");\n        assertEquals(\"nofollow\", enforcedAttributes.get(\"rel\"));\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_EmptyTag() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addEnforcedAttribute(\"\", \"rel\", \"nofollow\");\n        });\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_EmptyAttribute() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addEnforcedAttribute(\"a\", \"\", \"nofollow\");\n        });\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_EmptyValue() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            safelist.addEnforcedAttribute(\"a\", \"rel\", \"\");\n        });\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_TagNotAllowed() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        assertFalse(safelist.isSafeTag(\"div\"));\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_AttributeNotAllowed() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        assertFalse(safelist.isSafeAttribute(\"a\", new Element(Tag.valueOf(\"a\"), \"\"), new Attribute(\"href\", \"http://example.com\")));\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_MultipleAttributes() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        safelist.addEnforcedAttribute(\"a\", \"target\", \"_blank\");\n        Attributes enforcedAttributes = safelist.getEnforcedAttributes(\"a\");\n        assertEquals(\"nofollow\", enforcedAttributes.get(\"rel\"));\n        assertEquals(\"_blank\", enforcedAttributes.get(\"target\"));\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_OverrideExisting() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"noopener\");\n        Attributes enforcedAttributes = safelist.getEnforcedAttributes(\"a\");\n        assertEquals(\"noopener\", enforcedAttributes.get(\"rel\"));\n    }\n\n    @Test\n    public void testAddEnforcedAttribute_RemoveEnforcedAttribute() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        safelist.removeEnforcedAttribute(\"a\", \"rel\");\n        Attributes enforcedAttributes = safelist.getEnforcedAttributes(\"a\");\n        assertNull(enforcedAttributes.get(\"rel\"));\n    }\n}\n"}]