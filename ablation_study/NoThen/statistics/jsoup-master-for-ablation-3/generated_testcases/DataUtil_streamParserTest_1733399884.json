[{"strategy": "generate", "code": "\npackage org.jsoup.helper;\n\nimport org.jsoup.parser.Parser;\nimport org.jsoup.parser.StreamParser;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.nio.charset.Charset;\nimport java.nio.file.Path;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.*;\n\npublic class DataUtil_streamParserTest {\n\n    @Test\n    public void testStreamParser() throws IOException {\n        // Given\n        Path mockPath = mock(Path.class);\n        Charset mockCharset = mock(Charset.class);\n        String baseUri = \"http://example.com\";\n        Parser mockParser = mock(Parser.class);\n        DataUtil.CharsetDoc mockCharsetDoc = mock(DataUtil.CharsetDoc.class);\n        BufferedReader mockReader = mock(BufferedReader.class);\n        StreamParser mockStreamParser = mock(StreamParser.class);\n\n        when(mockCharset.name()).thenReturn(\"UTF-8\");\n        when(DataUtil.detectCharset(any(ControllableInputStream.class), anyString(), anyString(), any(Parser.class))).thenReturn(mockCharsetDoc);\n        when(mockCharsetDoc.input).thenReturn(mock(ControllableInputStream.class));\n        when(mockCharsetDoc.charset).thenReturn(mockCharset);\n        when(mockReader.readLine()).thenReturn(\"test data\");\n        when(mockStreamParser.parse(any(BufferedReader.class), anyString())).thenReturn(mockStreamParser);\n\n        // When\n        StreamParser result = DataUtil.streamParser(mockPath, mockCharset, baseUri, mockParser);\n\n        // Then\n        assertNotNull(result);\n        verify(mockStreamParser).parse(any(BufferedReader.class), eq(baseUri));\n    }\n}\n"}]