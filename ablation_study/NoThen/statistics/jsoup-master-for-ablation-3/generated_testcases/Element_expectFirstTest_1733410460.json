[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_expectFirstTest {\n\n    private Document doc;\n\n    @BeforeEach\n    public void setUp() {\n        String html = \"<body><div><p>One</p></div><div><p>Two</p></div><div>Three</div></body>\";\n        doc = Jsoup.parse(html);\n    }\n\n    @Test\n    public void testExpectFirstWithValidQuery() {\n        Element body = doc.body();\n        Element firstDiv = body.expectFirst(\"div\");\n        assertNotNull(firstDiv);\n        assertEquals(\"div\", firstDiv.tagName());\n    }\n\n    @Test\n    public void testExpectFirstWithInvalidQuery() {\n        Element body = doc.body();\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            body.expectFirst(\"nonexistent\");\n        });\n        String expectedMessage = \"No elements matched the query 'nonexistent' on element 'body'.\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    public void testExpectFirstWithEmptyDocument() {\n        Document emptyDoc = Jsoup.parse(\"\");\n        Exception exception = assertThrows(IllegalArgumentException.class, () -> {\n            emptyDoc.expectFirst(\"div\");\n        });\n        String expectedMessage = \"No elements matched the query 'div' in the document.\";\n        String actualMessage = exception.getMessage();\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}\n"}]