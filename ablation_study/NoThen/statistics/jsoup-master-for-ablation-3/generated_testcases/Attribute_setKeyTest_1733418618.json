[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.helper.Validate;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Map;\n\nclass Attribute_setKeyTest {\n\n    @Test\n    void testSetKey_NoParent() {\n        Attribute attr = new Attribute(\"oldKey\", \"value\", null);\n        attr.setKey(\"newKey\");\n        assertEquals(\"newKey\", attr.getKey());\n    }\n\n    @Test\n    void testSetKey_WithParent() {\n        Attributes parent = mock(Attributes.class);\n        when(parent.indexOfKey(\"oldKey\")).thenReturn(0);\n        when(parent.keys).thenReturn(new String[]{\"oldKey\"});\n        when(parent.getRanges()).thenReturn(null);\n\n        Attribute attr = new Attribute(\"oldKey\", \"value\", parent);\n        attr.setKey(\"newKey\");\n\n        assertEquals(\"newKey\", attr.getKey());\n        verify(parent).indexOfKey(\"oldKey\");\n        verify(parent).keys[0] = \"newKey\";\n    }\n\n    @Test\n    void testSetKey_WithParentAndRanges() {\n        Attributes parent = mock(Attributes.class);\n        when(parent.indexOfKey(\"oldKey\")).thenReturn(0);\n        when(parent.keys).thenReturn(new String[]{\"oldKey\"});\n        Range.AttributeRange range = mock(Range.AttributeRange.class);\n        Map<String, Range.AttributeRange> ranges = mock(Map.class);\n        when(parent.getRanges()).thenReturn(ranges);\n        when(ranges.remove(\"oldKey\")).thenReturn(range);\n\n        Attribute attr = new Attribute(\"oldKey\", \"value\", parent);\n        attr.setKey(\"newKey\");\n\n        assertEquals(\"newKey\", attr.getKey());\n        verify(parent).indexOfKey(\"oldKey\");\n        verify(parent).keys[0] = \"newKey\";\n        verify(ranges).remove(\"oldKey\");\n        verify(ranges).put(\"newKey\", range);\n    }\n\n    @Test\n    void testSetKey_NullKey() {\n        Attribute attr = new Attribute(\"oldKey\", \"value\", null);\n        assertThrows(IllegalArgumentException.class, () -> attr.setKey(null));\n    }\n\n    @Test\n    void testSetKey_EmptyKey() {\n        Attribute attr = new Attribute(\"oldKey\", \"value\", null);\n        assertThrows(IllegalArgumentException.class, () -> attr.setKey(\"   \"));\n    }\n}\n"}]