[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.SerializationException;\nimport org.jsoup.internal.StringUtil;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class Attribute_htmlTest {\n\n    @Test\n    public void testHtml_SuccessfulEncoding() throws IOException {\n        Attribute attr = new Attribute(\"key\", \"value\");\n        StringBuilder mockSb = mock(StringBuilder.class);\n        Document mockDoc = mock(Document.class);\n        Document.OutputSettings mockOutputSettings = mock(Document.OutputSettings.class);\n\n        when(mockDoc.outputSettings()).thenReturn(mockOutputSettings);\n        when(mockOutputSettings.syntax()).thenReturn(Document.OutputSettings.Syntax.html);\n        when(StringUtil.borrowBuilder()).thenReturn(mockSb);\n        when(StringUtil.releaseBuilder(mockSb)).thenReturn(\"encodedValue\");\n\n        doAnswer(invocation -> {\n            Appendable accum = invocation.getArgument(0);\n            Document.OutputSettings out = invocation.getArgument(1);\n            accum.append(\"encodedValue\");\n            return null;\n        }).when(attr).html(any(Appendable.class), any(Document.OutputSettings.class));\n\n        String result = attr.html();\n        assertEquals(\"encodedValue\", result);\n    }\n\n    @Test\n    public void testHtml_IOException() throws IOException {\n        Attribute attr = new Attribute(\"key\", \"value\");\n        StringBuilder mockSb = mock(StringBuilder.class);\n        Document mockDoc = mock(Document.class);\n        Document.OutputSettings mockOutputSettings = mock(Document.OutputSettings.class);\n\n        when(mockDoc.outputSettings()).thenReturn(mockOutputSettings);\n        when(mockOutputSettings.syntax()).thenReturn(Document.OutputSettings.Syntax.html);\n        when(StringUtil.borrowBuilder()).thenReturn(mockSb);\n\n        doThrow(new IOException(\"Test Exception\")).when(attr).html(any(Appendable.class), any(Document.OutputSettings.class));\n\n        assertThrows(SerializationException.class, () -> {\n            attr.html();\n        });\n    }\n}\n"}]