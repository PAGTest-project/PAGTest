[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.parser.Parser;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_appendTest {\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        element = new Element(\"div\");\n    }\n\n    @Test\n    public void testAppendValidHtml() {\n        String html = \"<p>Test paragraph</p>\";\n        element.append(html);\n        assertEquals(1, element.childNodeSize());\n        assertEquals(\"Test paragraph\", element.text());\n    }\n\n    @Test\n    public void testAppendNullHtml() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            element.append(null);\n        });\n    }\n\n    @Test\n    public void testAppendEmptyHtml() {\n        String html = \"\";\n        element.append(html);\n        assertEquals(0, element.childNodeSize());\n    }\n\n    @Test\n    public void testAppendMultipleElements() {\n        String html = \"<p>First</p><p>Second</p>\";\n        element.append(html);\n        assertEquals(2, element.childNodeSize());\n        assertEquals(\"First Second\", element.text());\n    }\n\n    @Test\n    public void testAppendWithBaseUri() {\n        String html = \"<a href='test.html'>Link</a>\";\n        element.setBaseUri(\"http://example.com\");\n        element.append(html);\n        assertEquals(1, element.childNodeSize());\n        assertEquals(\"http://example.com/test.html\", element.select(\"a\").first().absUrl(\"href\"));\n    }\n\n    @Test\n    public void testAppendWithInvalidHtml() {\n        String html = \"<p>Unclosed tag\";\n        element.append(html);\n        assertEquals(1, element.childNodeSize());\n        assertEquals(\"Unclosed tag\", element.text());\n    }\n\n    @Test\n    public void testAppendAfterEmpty() {\n        String html = \"<p>Test paragraph</p>\";\n        element.append(html);\n        element.empty();\n        element.append(html);\n        assertEquals(1, element.childNodeSize());\n        assertEquals(\"Test paragraph\", element.text());\n    }\n\n    @Test\n    public void testAppendWithScriptTag() {\n        String html = \"<script>alert('test');</script>\";\n        element.append(html);\n        assertEquals(1, element.childNodeSize());\n        assertEquals(\"\", element.text()); // Scripts are not rendered as text\n    }\n\n    @Test\n    public void testAppendWithStyleTag() {\n        String html = \"<style>body { color: red; }</style>\";\n        element.append(html);\n        assertEquals(1, element.childNodeSize());\n        assertEquals(\"\", element.text()); // Styles are not rendered as text\n    }\n\n    @Test\n    public void testAppendWithComment() {\n        String html = \"<!-- This is a comment -->\";\n        element.append(html);\n        assertEquals(1, element.childNodeSize());\n        assertEquals(\"\", element.text()); // Comments are not rendered as text\n    }\n\n    @Test\n    public void testAppendWithDoctype() {\n        String html = \"<!DOCTYPE html>\";\n        element.append(html);\n        assertEquals(0, element.childNodeSize()); // Doctypes are not added as child nodes\n    }\n}\n"}]