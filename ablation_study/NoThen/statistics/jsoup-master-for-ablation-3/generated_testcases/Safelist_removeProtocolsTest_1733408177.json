[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass Safelist_removeProtocolsTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    void setUp() {\n        safelist = new Safelist();\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n    }\n\n    @Test\n    void testRemoveProtocols() {\n        // Given\n        String tag = \"a\";\n        String attribute = \"href\";\n        String[] removeProtocols = {\"http\"};\n\n        // When\n        safelist.removeProtocols(tag, attribute, removeProtocols);\n\n        // Then\n        Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols = safelist.protocols;\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(attribute);\n\n        assertTrue(protocols.containsKey(tagName));\n        assertTrue(protocols.get(tagName).containsKey(attrKey));\n        assertEquals(1, protocols.get(tagName).get(attrKey).size());\n        assertTrue(protocols.get(tagName).get(attrKey).contains(Protocol.valueOf(\"https\")));\n    }\n\n    @Test\n    void testRemoveProtocols_AllProtocolsRemoved() {\n        // Given\n        String tag = \"a\";\n        String attribute = \"href\";\n        String[] removeProtocols = {\"http\", \"https\"};\n\n        // When\n        safelist.removeProtocols(tag, attribute, removeProtocols);\n\n        // Then\n        Map<TagName, Map<AttributeKey, Set<Protocol>>> protocols = safelist.protocols;\n        TagName tagName = TagName.valueOf(tag);\n        AttributeKey attrKey = AttributeKey.valueOf(attribute);\n\n        assertFalse(protocols.containsKey(tagName));\n    }\n}\n"}]