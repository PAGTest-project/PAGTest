[{"file_path": "src/test/java/net/hydromatic/morel/compile/EnvironmentTest.java", "testclass_name": "EnvironmentTest", "dependencies": ["package net.hydromatic.morel.compile;", "import net.hydromatic.morel.type.PrimitiveType;", "import com.google.common.collect.ImmutableSet;", "import org.hamcrest.CustomTypeSafeMatcher;", "import org.hamcrest.Matcher;", "import org.junit.jupiter.api.Test;", "import java.util.Set;", "import java.util.concurrent.atomic.AtomicInteger;", "import static net.hydromatic.morel.ast.CoreBuilder.core;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.IsInstanceOf.instanceOf;"], "name": "EnvironmentTest", "description": "Tests the behavior of the Environment class, particularly the binding and optimization of sub-environments.", "class_members": {"methods": [{"name": "checkOptimizeSubEnvironment", "signature": "void checkOptimizeSubEnvironment(Environment e0)"}, {"name": "hasEnvLength", "signature": "Matcher<Environment> hasEnvLength(int i)"}]}, "test_cases": [{"name": "testOptimizeSubEnvironment", "primary_tested": ["Environments.bind(IdPat,Object)", "Environments.bindAll(Iterable<Object>)"], "associated_methods": ["Environment.getValueMap()", "Environment.bind(IdPat,Object)", "Environment.visit(Consumer<Binding>)"], "external_dependencies": {"modules": ["Environments", "Environment", "PrimitiveType", "CoreBuilder", "ImmutableSet", "CustomTypeSafeMatcher", "Matcher", "AtomicInteger"], "class_members": [{"name": "checkOptimizeSubEnvironment", "type": "method"}, {"name": "hasEnvLength", "type": "method"}], "project_specific_resources": ["CoreBuilder.core.idPat(PrimitiveType,String,int)"]}, "category": "unit", "description": "Tests the optimization of sub-environments by binding values and checking the environment's depth and value map."}]}, {"file_path": "src/test/java/net/hydromatic/morel/LintTest.java", "testclass_name": "LintTest", "dependencies": ["package net.hydromatic.morel;", "import org.apache.calcite.util.Puffin;", "import org.apache.calcite.util.Source;", "import org.apache.calcite.util.Sources;", "import org.junit.jupiter.api.Test;", "import java.io.File;", "import java.io.PrintWriter;", "import java.io.StringWriter;", "import java.util.ArrayList;", "import java.util.List;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.empty;", "import static org.junit.jupiter.api.Assumptions.assumeTrue;"], "name": "LintTest", "description": "Tests that source code has no flaws and checks for various linting rules.", "class_members": {"variables": [], "methods": [{"name": "makeProgram", "signature": "Puffin.Program<GlobalState> makeProgram()"}], "nested_classes": [{"name": "Message", "description": "Warning that code is not as it should be."}, {"name": "GlobalState", "description": "Internal state of the lint rules."}, {"name": "FileState", "description": "Internal state of the lint rules, per file."}]}, "fixtures": [], "test_cases": [{"name": "testLint", "primary_tested": ["Puffin.Program.execute(Stream<Source>,PrintWriter)"], "associated_methods": ["Puffin.Program.execute(Stream<Source>,PrintWriter)", "TestUnsafe.getTextFiles()"], "external_dependencies": {"modules": ["Puffin", "GlobalState", "File", "Sources", "PrintWriter", "StringWriter", "TestUnsafe", "MatcherAssert", "Matchers"], "class_members": [{"name": "makeProgram", "type": "method"}], "project_specific_resources": ["TestUnsafe.haveGit()"]}, "category": "unit", "fixtures_used": [], "description": "Tests that source code has no flaws by executing a linting program on a list of Java files and asserting that no linting messages are produced."}]}, {"file_path": "src/test/java/net/hydromatic/morel/CalciteTest.java", "testclass_name": "CalciteTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.foreign.Calcite;", "import net.hydromatic.morel.foreign.CalciteForeignValue;", "import net.hydromatic.morel.foreign.ForeignValue;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import org.apache.calcite.adapter.java.ReflectiveSchema;", "import org.apache.calcite.schema.Schema;", "import org.apache.calcite.schema.SchemaPlus;", "import org.junit.jupiter.api.Test;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.InputStream;", "import java.io.PrintStream;", "import java.util.Map;", "import static org.apache.calcite.util.Util.toLinux;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;"], "name": "CalciteTest", "description": "Tests the functionality of CalciteForeignValue with nested schemas.", "class_members": {"variables": [{"name": "debug", "type": "final boolean"}], "methods": [], "nested_classes": [{"name": "UserSchema", "description": "Java object that will, via reflection, become the 'user' schema."}, {"name": "User", "description": "Row in the 'users' table."}, {"name": "TaskSchema", "description": "Java object that will, via reflection, become the 'task' schema."}, {"name": "Task", "description": "Row in the 'tasks' table."}]}, "fixtures": [], "test_cases": [{"name": "testNestedSchema", "primary_tested": ["Calcite.withDataSets(Map<String, DataSet>)"], "associated_methods": ["CalciteForeignValue.value()", "CalciteForeignValue.type(TypeSystem)", "Calcite.foreignValues()"], "external_dependencies": {"modules": ["Calcite", "CalciteForeignValue", "ForeignValue", "ImmutableList", "ImmutableMap", "ReflectiveSchema", "Schema", "SchemaPlus", "ByteArrayInputStream", "ByteArrayOutputStream", "InputStream", "PrintStream", "Main", "UserSchema", "TaskSchema", "User", "Task"], "class_members": [{"name": "debug", "type": "variable"}], "project_specific_resources": ["Util.toLinux(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests that if you create a CalciteForeignValue whose schema has nested schemas, those schemas appear as fields."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ScriptTest.java", "testclass_name": "ScriptTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Prop;", "import net.hydromatic.morel.foreign.Calcite;", "import net.hydromatic.morel.foreign.ForeignValue;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.io.PatternFilenameFilter;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.io.File;", "import java.io.FilenameFilter;", "import java.io.Reader;", "import java.io.Writer;", "import java.lang.reflect.InvocationTargetException;", "import java.lang.reflect.Method;", "import java.net.URL;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.stream.Stream;", "import static net.hydromatic.morel.TestUtils.first;", "import static net.hydromatic.morel.TestUtils.n2u;", "import static net.hydromatic.morel.TestUtils.toCamelCase;", "import static net.hydromatic.morel.TestUtils.u2n;", "import static net.hydromatic.morel.TestUtils.urlToFile;", "import static org.hamcrest.CoreMatchers.notNullValue;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.junit.jupiter.api.Assertions.fail;"], "name": "ScriptTest", "description": "Test suite for running scripts and checking their outputs.", "class_members": {"variables": [], "methods": [{"name": "findMethod", "signature": "private Method findMethod(String path)"}, {"name": "checkRun", "signature": "protected void checkRun(String path) throws Exception"}, {"name": "data_", "signature": "protected static Stream<Arguments> data_(String first)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "test", "primary_tested": ["ScriptTest.checkRun(String)"], "associated_methods": ["ScriptTest.findMethod(String)"], "external_dependencies": {"modules": ["java.lang.reflect.Method", "java.lang.reflect.InvocationTargetException", "java.lang.Throwable", "java.lang.Exception", "java.lang.Error"], "class_members": [{"name": "findMethod", "type": "method"}, {"name": "checkRun", "type": "method"}], "project_specific_resources": ["TestUtils.toCamelCase(String)"]}, "category": "unit", "fixtures_used": [], "description": "Tests the execution of a script by invoking the corresponding method or running the script directly."}, {"name": "testScript", "primary_tested": ["ScriptTest.checkRun(String)"], "external_dependencies": {"modules": ["java.lang.Exception"], "class_members": [{"name": "checkRun", "type": "method"}]}, "category": "unit", "fixtures_used": [], "description": "Tests the execution of the 'script.sml' script."}]}, {"file_path": "src/test/java/net/hydromatic/morel/SatTest.java", "testclass_name": "SatTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.util.Sat;", "import net.hydromatic.morel.util.Sat.Term;", "import net.hydromatic.morel.util.Sat.Variable;", "import com.google.common.collect.ImmutableMap;", "import org.junit.jupiter.api.Test;", "import java.util.Map;", "import static org.hamcrest.CoreMatchers.notNullValue;", "import static org.hamcrest.CoreMatchers.nullValue;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.hasToString;", "import static org.hamcrest.core.Is.is;"], "name": "SatTest", "description": "Unit tests for the Sat class, focusing on building and solving SAT formulas.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testBuild", "primary_tested": ["Sat.solve(Term)", "Sat.variable(String)", "Sat.not(Term)", "Sat.or(Term...)", "Sat.and(Term...)"], "associated_methods": [], "external_dependencies": {"modules": ["Sat", "Sat.Variable", "Sat.Term", "ImmutableMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests building a SAT formula with three clauses, each containing three terms, and verifies its satisfiability."}, {"name": "testTrue", "primary_tested": ["Sat.solve(Term)", "Sat.and(Term...)"], "associated_methods": [], "external_dependencies": {"modules": ["Sat", "Sat.Term", "ImmutableMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the 'true' condition by creating an 'and' term with zero arguments and verifies its satisfiability."}, {"name": "testFalse", "primary_tested": ["Sat.solve(Term)", "Sat.or(Term...)"], "associated_methods": [], "external_dependencies": {"modules": ["Sat", "Sat.Term", "ImmutableMap"], "class_members": [], "project_specific_resources": []}, "category": "unit", "fixtures_used": [], "description": "Tests the 'false' condition by creating an 'or' term with zero arguments and verifies its unsatisfiability."}]}, {"file_path": "src/test/java/net/hydromatic/morel/PairListTest.java", "testclass_name": "PairListTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.util.ImmutablePairList;", "import net.hydromatic.morel.util.MapEntry;", "import net.hydromatic.morel.util.Pair;", "import net.hydromatic.morel.util.PairList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import org.junit.jupiter.api.Test;", "import java.util.AbstractList;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.Map;", "import java.util.RandomAccess;", "import java.util.function.BiPredicate;", "import static org.hamcrest.CoreMatchers.instanceOf;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.CoreMatchers.startsWith;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.empty;", "import static org.hamcrest.Matchers.hasSize;", "import static org.hamcrest.Matchers.hasToString;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.fail;"], "name": "PairListTest", "description": "Unit tests for the PairList class, which is a list of pairs.", "class_members": {"methods": [{"name": "left", "signature": "<T, U> List<T> left(List<? extends Map.Entry<? extends T, ? extends U>> pairs)"}, {"name": "right", "signature": "<T, U> List<U> right(List<? extends Map.Entry<? extends T, ? extends U>> pairs)"}, {"name": "validate", "signature": "<T, U> void validate(PairList<T, U> pairList, List<? extends Map.Entry<T, U>> list)"}]}, "test_cases": [{"name": "testPairList", "primary_tested": ["PairList.add(T,U)", "PairList.add(Pair<T,U>)", "PairList.add(int,Pair<T,U>)", "PairList.add(int,T,U)", "PairList.remove(int)", "PairList.clear()", "PairList.addAll(PairList)", "PairList.addAll(int,PairList)", "PairList.immutable()", "PairList.set(int,Pair<T,U>)", "PairList.set(int,T,U)"], "associated_methods": ["PairList.isEmpty()", "PairList.size()", "PairList.leftList()", "PairList.rightList()", "PairList.left(int)", "PairList.right(int)", "PairList.forEach(Consumer)", "PairList.forEach(BiConsumer)", "PairList.forEachIndexed(TriConsumer)", "PairList.toImmutableMap()"], "external_dependencies": {"modules": ["PairList", "Pair", "Map.Entry", "ImmutableMap", "UnsupportedOperationException"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)", "PairList.immutable()"]}, "category": "unit", "description": "Tests various methods of the PairList class, including adding, removing, clearing, and converting to immutable."}, {"name": "testAddAll", "primary_tested": ["PairList.addAll(PairList)", "PairList.addAll(ImmutableList)", "PairList.addAll(ImmutablePairList)"], "associated_methods": ["PairList.size()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "ImmutablePairList", "ImmutableList", "MapEntry"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)", "ImmutablePairList.of()", "ImmutablePairList.copyOf(T,U,T,U)"]}, "category": "unit", "description": "Tests the addAll method of the PairList class, including adding from different types of PairLists and ImmutableLists."}, {"name": "testPairListOfMap", "primary_tested": ["PairList.of(Map)", "PairList.toImmutableMap()"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "ImmutableMap", "Map.Entry"], "project_specific_resources": ["PairList.of(Map)", "PairList.toImmutableMap()"]}, "category": "unit", "description": "Tests the creation of a PairList from a Map and converting it back to an ImmutableMap."}, {"name": "testPairListWithCapacity", "primary_tested": ["PairList.withCapacity(int)"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()", "PairList.add(T,U)", "PairList.remove(int)"], "external_dependencies": {"modules": ["PairList", "Map.Entry"], "project_specific_resources": ["PairList.withCapacity(int)"]}, "category": "unit", "description": "Tests the creation of a PairList with a specified capacity and its basic operations."}, {"name": "testPairListOf", "primary_tested": ["PairList.of()", "PairList.copyOf(T,U,T,U)"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "IllegalArgumentException"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)"]}, "category": "unit", "description": "Tests the creation of a PairList with different numbers of arguments and checks for exceptions."}, {"name": "testTransform", "primary_tested": ["PairList.transform(BiFunction)", "PairList.transform2(BiFunction)", "PairList.anyMatch(BiPredicate)", "PairList.allMatch(BiPredicate)", "PairList.noMatch(BiPredicate)", "PairList.firstMatch(BiPredicate)"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "ImmutablePairList", "ImmutableList", "BiPredicate", "BiFunction"], "project_specific_resources": ["PairList.of()", "PairList.copyOf(T,U,T,U)", "PairList.immutable()"]}, "category": "unit", "description": "Tests the transformation and matching methods of the PairList class."}, {"name": "testBuilder", "primary_tested": ["PairList.Builder.build()", "PairList.Builder.add(T,U)"], "associated_methods": ["PairList.size()", "PairList.isEmpty()", "PairList.toString()"], "external_dependencies": {"modules": ["PairList", "Pair"], "project_specific_resources": ["PairList.builder()"]}, "category": "unit", "description": "Tests the builder pattern for creating PairLists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/UtilTest.java", "testclass_name": "UtilTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.ast.Ast;", "import net.hydromatic.morel.ast.Pos;", "import net.hydromatic.morel.compile.BuiltIn;", "import net.hydromatic.morel.eval.Codes;", "import net.hydromatic.morel.type.PrimitiveType;", "import net.hydromatic.morel.type.RangeExtent;", "import net.hydromatic.morel.type.TypeSystem;", "import net.hydromatic.morel.util.Folder;", "import net.hydromatic.morel.util.MapList;", "import net.hydromatic.morel.util.Pair;", "import net.hydromatic.morel.util.Static;", "import net.hydromatic.morel.util.TailList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import com.google.common.collect.Lists;", "import com.google.common.collect.Range;", "import org.apache.calcite.runtime.FlatLists;", "import org.apache.calcite.util.ImmutableIntList;", "import org.apache.calcite.util.Util;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.Collection;", "import java.util.Collections;", "import java.util.HashSet;", "import java.util.List;", "import java.util.Objects;", "import java.util.Set;", "import java.util.function.BiConsumer;", "import java.util.function.Consumer;", "import java.util.function.Function;", "import java.util.function.Predicate;", "import static net.hydromatic.morel.ast.AstBuilder.ast;", "import static net.hydromatic.morel.eval.Codes.isNegative;", "import static net.hydromatic.morel.util.Ord.forEachIndexed;", "import static net.hydromatic.morel.util.Static.nextPowerOfTwo;", "import static net.hydromatic.morel.util.Static.transform;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.hasToString;", "import static org.hamcrest.Matchers.instanceOf;", "import static org.hamcrest.Matchers.not;", "import static org.hamcrest.Matchers.notNullValue;", "import static org.hamcrest.core.Is.is;", "import static org.junit.jupiter.api.Assertions.fail;"], "name": "UtilTest", "description": "Unit tests for various utility classes and methods in the Morel project.", "class_members": {"variables": [], "methods": [{"name": "checkShorterThan", "signature": "<E> void checkShorterThan(Iterable<E> iterable, int size)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTailList", "primary_tested": ["TailList.size()", "TailList.get(int)", "TailList.set(int,E)", "TailList.add(int,E)", "TailList.addAll(Collection)", "TailList.clear()", "TailList.isEmpty()"], "external_dependencies": {"modules": ["ArrayList", "TailList", "Arrays", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the functionality of the TailList class, including size, get, set, add, addAll, clear, and isEmpty methods."}, {"name": "testOrd", "primary_tested": ["Ord.forEachIndexed(Iterable,BiConsumer)"], "external_dependencies": {"modules": ["Arrays", "StringBuilder", "Ord"], "class_members": []}, "category": "unit", "description": "Tests the forEachIndexed method from the Ord class, which iterates over a list with indices."}, {"name": "testMapList", "primary_tested": ["MapList.of(int,IntFunction)"], "external_dependencies": {"modules": ["MapList", "Arrays"], "class_members": []}, "category": "unit", "description": "Tests the creation and usage of a MapList, which maps integers to elements using a function."}, {"name": "testFolder", "primary_tested": ["Folder.start(List,Ast.Exp)", "Folder.at(List,Ast.Exp)", "Folder.cons(List,Ast.Exp)", "Folder.combineAll(List)"], "external_dependencies": {"modules": ["ArrayList", "Folder", "Ast", "Pos"], "class_members": []}, "category": "unit", "description": "Tests the Folder class methods for managing and combining AST expressions."}, {"name": "testShorterThan", "primary_tested": ["Static.shorterThan(Iterable,int)"], "associated_methods": ["checkShorterThan(Iterable,int)"], "external_dependencies": {"modules": ["Arrays", "ImmutableIntList", "HashSet", "Collections", "Static", "Util"], "class_members": [{"name": "checkShorterThan", "type": "method"}]}, "category": "unit", "description": "Tests the shorterThan method from the Static class, which checks if an iterable is shorter than a given size."}, {"name": "testFind", "primary_tested": ["Static.find(List,Predicate)"], "external_dependencies": {"modules": ["Arrays", "Collections", "Static"], "class_members": []}, "category": "unit", "description": "Tests the find method from the Static class, which finds the index of an element in a list that matches a predicate."}, {"name": "testPos", "primary_tested": ["Pos.split(String,char,String)", "Pos.toString()"], "external_dependencies": {"modules": ["Pos", "Pair", "StringBuilder"], "class_members": []}, "category": "unit", "description": "Tests the Pos class methods for splitting strings and generating position strings."}, {"name": "testPower", "primary_tested": ["Static.nextPowerOfTwo(int)"], "external_dependencies": {"modules": ["Static"], "class_members": []}, "category": "unit", "description": "Tests the nextPowerOfTwo method from the Static class, which calculates the next power of two for a given integer."}, {"name": "testTransform", "primary_tested": ["Static.transform(List,Function)"], "external_dependencies": {"modules": ["Arrays", "Collections", "Static"], "class_members": []}, "category": "unit", "description": "Tests the transform method from the Static class, which applies a function to each element of a list."}, {"name": "testToString", "primary_tested": ["Codes.floatToString(float)"], "external_dependencies": {"modules": ["Codes", "Float"], "class_members": []}, "category": "unit", "description": "Tests the floatToString method from the Codes class, which converts a float to a string."}, {"name": "testFloatBit", "primary_tested": ["Codes.isNegative(float)"], "external_dependencies": {"modules": ["Codes", "Float"], "class_members": []}, "category": "unit", "description": "Tests the isNegative method from the Codes class, which checks if a float is negative."}, {"name": "testPairAllMatch", "primary_tested": ["Pair.anyMatch(Iterable,Iterable,BiPredicate)", "Pair.allMatch(Iterable,Iterable,BiPredicate)", "Pair.noneMatch(Iterable,Iterable,BiPredicate)"], "external_dependencies": {"modules": ["Arrays", "Collections", "Pair", "Objects"], "class_members": []}, "category": "unit", "description": "Tests the anyMatch, allMatch, and noneMatch methods from the Pair class, which check conditions on pairs of elements from two iterables."}, {"name": "testRangeExtent", "primary_tested": ["RangeExtent.iterable"], "external_dependencies": {"modules": ["TypeSystem", "BuiltIn", "Range", "RangeExtent", "ImmutableMap", "ImmutableRangeSet", "Lists", "PrimitiveType", "FlatLists"], "class_members": []}, "category": "unit", "description": "Tests the RangeExtent class, which handles ranges and their extents, including iterables over those ranges."}]}, {"file_path": "src/test/java/net/hydromatic/morel/compile/ExtentTest.java", "testclass_name": "ExtentTest", "dependencies": ["package net.hydromatic.morel.compile;", "import net.hydromatic.morel.ast.Core;", "import net.hydromatic.morel.ast.FromBuilder;", "import net.hydromatic.morel.type.ListType;", "import net.hydromatic.morel.type.PrimitiveType;", "import net.hydromatic.morel.type.RecordLikeType;", "import net.hydromatic.morel.type.RecordType;", "import net.hydromatic.morel.type.TypeSystem;", "import net.hydromatic.morel.util.ImmutablePairList;", "import net.hydromatic.morel.util.PairList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableSet;", "import com.google.common.collect.ImmutableSortedMap;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.List;", "import java.util.function.BiConsumer;", "import java.util.function.Consumer;", "import static net.hydromatic.morel.ast.CoreBuilder.core;", "import static org.apache.calcite.linq4j.tree.Expressions.list;", "import static org.hamcrest.CoreMatchers.instanceOf;", "import static org.hamcrest.CoreMatchers.notNullValue;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.anEmptyMap;", "import static org.hamcrest.Matchers.empty;", "import static org.hamcrest.Matchers.hasSize;", "import static org.hamcrest.Matchers.hasToString;", "import static org.hamcrest.core.Is.is;"], "name": "ExtentTest", "description": "Tests for the Extent functionality in the Morel language compiler.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "Fixture", "description": "Internal helper class for setting up test fixtures."}]}, "fixtures": [], "test_cases": [{"name": "testConstant", "primary_tested": ["Core.Exp.isConstant()"], "external_dependencies": {"modules": ["Core", "BigDecimal", "PairList"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core", "Expressions.list"]}, "category": "unit", "fixtures_used": [], "description": "Tests whether an expression is constant."}, {"name": "testEq", "primary_tested": ["Core.equal(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests a variable assigned a single value."}, {"name": "testBetween", "primary_tested": ["Core.andAlso(TypeSystem,Core.Exp,Core.Exp)"], "associated_methods": ["Core.greaterThanOrEqualTo(TypeSystem,Core.Exp,Core.Exp)", "Core.lessThan(TypeSystem,Core.Exp,Core.Exp)", "Core.notEqual(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType", "BigDecimal"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the extent of a variable within a range and other conditions."}, {"name": "testSubTrue", "primary_tested": ["Core.subTrue(TypeSystem,Core.Exp,List<Core.Exp>)"], "associated_methods": ["Core.andAlso(TypeSystem,Core.Exp,Core.Exp)", "Core.orElse(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "BigDecimal"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core", "Expressions.list"]}, "category": "unit", "fixtures_used": [], "description": "Tests the subTrue method which substitutes true in an expression."}, {"name": "testFlatten", "primary_tested": ["Core.decomposeAnd(Core.Exp)", "Core.decomposeOr(Core.Exp)"], "associated_methods": ["Core.andAlso(TypeSystem,Core.Exp,Core.Exp)", "Core.orElse(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "BigDecimal"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the flattening of AND and OR expressions."}, {"name": "testAnalysis2c", "primary_tested": ["Extents.create(TypeSystem,Core.Pat,ImmutableSortedMap<String,Core.Exp>,List<Core.FromStep>,PairList<Core.IdPat,Core.Exp>)"], "associated_methods": ["Core.elem(TypeSystem,Core.Exp,Core.Exp)", "Core.greaterThan(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType", "BigDecimal", "PairList", "ImmutableSortedMap", "ImmutableList", "ImmutableSet"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the analysis of extents with various conditions."}, {"name": "testAnalysis2d", "primary_tested": ["Extents.create(TypeSystem,Core.Pat,ImmutableSortedMap<String,Core.Exp>,List<Core.FromStep>,PairList<Core.IdPat,Core.Exp>)"], "associated_methods": ["Core.elem(TypeSystem,Core.Exp,Core.Exp)", "Core.greaterThan(TypeSystem,Core.Exp,Core.Exp)"], "external_dependencies": {"modules": ["Core", "PrimitiveType", "BigDecimal", "PairList", "ImmutableSortedMap", "ImmutableList", "ImmutableSet"], "class_members": [{"name": "Fixture", "type": "nested_class"}], "project_specific_resources": ["CoreBuilder.core"]}, "category": "unit", "fixtures_used": [], "description": "Tests the analysis of extents with specific conditions."}]}, {"file_path": "src/test/java/net/hydromatic/morel/InlineTest.java", "testclass_name": "InlineTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Unit;", "import org.junit.jupiter.api.Test;", "import static net.hydromatic.morel.Matchers.isCode;", "import static net.hydromatic.morel.Matchers.isUnordered;", "import static net.hydromatic.morel.Matchers.list;", "import static net.hydromatic.morel.Matchers.whenAppliedTo;", "import static net.hydromatic.morel.Ml.ml;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.Matchers.hasToString;"], "name": "InlineTest", "description": "Tests for inlining and analyzing expressions in the Morel language.", "class_members": {"variables": [], "methods": [{"name": "checkInlineChained", "signature": "private void checkInlineChained(int n)"}, {"name": "gen", "signature": "private String gen(int i, int n)"}, {"name": "v", "signature": "private String v(int i)"}], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAnalyze", "primary_tested": ["Ml.ml(String).assertAnalyze(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the analysis of a Morel expression and checks the result against an expected string."}, {"name": "testInline", "primary_tested": ["Ml.ml(String).assertPlan(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a simple function and checks the generated plan against an expected string."}, {"name": "testInlineFn", "primary_tested": ["Ml.ml(String).assertPlan(Matcher)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a function with a nested function and checks the generated plan and evaluation result."}, {"name": "testInlineFnUnit", "primary_tested": ["Ml.ml(String).assertEval(Matcher)", "Ml.ml(String).assertCore(int, Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a function with a unit parameter and checks the evaluation result and core representation."}, {"name": "testLetAtomic", "primary_tested": ["Ml.ml(String).assertEval(Matcher)", "Ml.ml(String).assertCore(int, Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a variable with an atomic value and checks the evaluation result and core representation."}, {"name": "testInlineChained", "primary_tested": ["Ml.ml(String).assertEval(Matcher)"], "associated_methods": ["InlineTest.checkInlineChained(int)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [{"name": "checkInlineChained", "type": "method"}], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of chained expressions and checks the evaluation result for various depths."}, {"name": "testFromPredicate", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a predicate within a 'from' expression and checks the core representation and evaluation result."}, {"name": "testFromView", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a view function within a 'from' expression and checks the core representation and evaluation result."}, {"name": "testMapFilterToFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the conversion of 'map' and 'filter' expressions to a 'from' expression and checks the core representation and evaluation result."}, {"name": "testFilterMapFilterMapToFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the conversion of nested 'filter' and 'map' expressions to a 'from' expression and checks the core representation and evaluation result."}, {"name": "testFromFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of nested 'from' expressions and checks the core representation and evaluation result."}, {"name": "testFromEmptyFrom", "primary_tested": ["Ml.ml(String).assertCoreString(Matcher...)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of an empty 'from' expression and checks the core representation and evaluation result."}, {"name": "testInlineCase", "primary_tested": ["Ml.ml(String).assertCore(int, Matcher)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a singleton 'case' expression and checks the core representation and evaluation result."}, {"name": "testInlineCase2", "primary_tested": ["Ml.ml(String).assertCore(int, Matcher)", "Ml.ml(String).assertEval(Matcher)"], "external_dependencies": {"modules": ["Matchers", "Ml"], "class_members": [], "project_specific_resources": []}, "category": "unit", "description": "Tests the inlining of a singleton 'case' expression with a tuple and checks the core representation and evaluation result."}]}, {"file_path": "src/test/java/net/hydromatic/morel/FromBuilderTest.java", "testclass_name": "FromBuilderTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.ast.Ast;", "import net.hydromatic.morel.ast.Core;", "import net.hydromatic.morel.ast.FromBuilder;", "import net.hydromatic.morel.compile.Environments;", "import net.hydromatic.morel.type.Binding;", "import net.hydromatic.morel.type.PrimitiveType;", "import net.hydromatic.morel.type.Type;", "import net.hydromatic.morel.type.TypeSystem;", "import net.hydromatic.morel.util.PairList;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableSet;", "import org.junit.jupiter.api.Test;", "import java.math.BigDecimal;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.Function;", "import static net.hydromatic.morel.ast.CoreBuilder.core;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.hasToString;"], "name": "FromBuilderTest", "description": "Unit tests for the FromBuilder class, which constructs and simplifies Core.From expressions.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "Fixture", "description": "Internal helper class providing setup for test cases."}]}, "fixtures": [], "test_cases": [{"name": "testBasic", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.build()"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the basic functionality of scanning and building a FromBuilder expression."}, {"name": "testWhereOrder", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.order(Iterable<Core.OrderItem>)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding where and order clauses to a FromBuilder expression."}, {"name": "testTrivialYield", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding a yield clause to a FromBuilder expression."}, {"name": "testTrivialYield2", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding multiple scans and a yield clause to a FromBuilder expression."}, {"name": "testTrivialYield3", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of adding a yield clause before a scan in a FromBuilder expression."}, {"name": "testNested", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions and adding a where clause."}, {"name": "testNested3", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions and adding a where clause, including simplification."}, {"name": "testNested4", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions and adding a where clause, including simplification with tuple types."}, {"name": "testNestedSameName", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions with the same variable name and adding a where clause."}, {"name": "testNested0", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.build()"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting an empty FromBuilder expression."}, {"name": "testNested2", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions with record patterns and adding a where clause."}, {"name": "testNestedFromTuple", "primary_tested": ["FromBuilder.scan(Core.Pat,Core.Exp)", "FromBuilder.where(Core.Exp)", "FromBuilder.yield_(Core.Exp)"], "associated_methods": ["FromBuilder.buildSimplify()"], "external_dependencies": {"modules": ["Core", "FromBuilder"], "class_members": [{"name": "Fixture", "type": "nested_class"}]}, "category": "unit", "description": "Tests the functionality of nesting FromBuilder expressions with tuple patterns and adding a where clause."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ShellTest.java", "testclass_name": "ShellTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Prop;", "import net.hydromatic.morel.foreign.ForeignValue;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import org.hamcrest.Matcher;", "import org.junit.jupiter.api.Test;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.File;", "import java.io.IOException;", "import java.io.Reader;", "import java.io.StringReader;", "import java.io.StringWriter;", "import java.util.Collections;", "import java.util.LinkedHashMap;", "import java.util.List;", "import java.util.Map;", "import java.util.function.UnaryOperator;", "import static net.hydromatic.morel.TestUtils.findDirectory;", "import static net.hydromatic.morel.TestUtils.plus;", "import static org.hamcrest.CoreMatchers.anyOf;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.core.Is.is;", "import static org.hamcrest.core.StringContains.containsString;", "import static org.junit.jupiter.api.Assumptions.assumeTrue;", "import static java.nio.charset.StandardCharsets.UTF_8;", "import static java.util.Objects.requireNonNull;"], "name": "ShellTest", "description": "Unit tests for the Shell class, focusing on various input scenarios and configurations.", "class_members": {"methods": [{"name": "fixture", "signature": "static Fixture fixture()"}, {"name": "pauseForTenMilliseconds", "signature": "static void pauseForTenMilliseconds()"}, {"name": "assumeNotInCi", "signature": "static void assumeNotInCi()"}, {"name": "getUseDirectory", "signature": "static File getUseDirectory()"}, {"name": "is2", "signature": "private Matcher<String> is2(String expected)"}], "nested_classes": [{"name": "Fixture", "description": "Interface for testing the shell."}, {"name": "FixtureImpl", "description": "Implementation of Fixture."}]}, "fixtures": ["assumeNotInCi"], "test_cases": [{"name": "testShell", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Collections", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with empty input."}, {"name": "testShellNoBanner", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell with empty input and banner disabled."}, {"name": "testOneLine", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with one line of input."}, {"name": "testTwoLines", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a continued line of input."}, {"name": "testReal", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the Shell printing some tricky real values."}, {"name": "testEmptyLines", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with lines that are comments, empty, or have only a semicolon."}, {"name": "testSingleLineComment", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a single-line comment."}, {"name": "testSingleLineCommentWithQuote", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a single-line comment that contains a quote."}, {"name": "testMultiLineLet", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the Shell with a let statement spread over multiple lines."}, {"name": "testUse", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function."}, {"name": "testMatchWarning", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests a warning."}, {"name": "testUseEmpty", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function on an empty file."}, {"name": "testUseMissing", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function on a missing file."}, {"name": "testUseSelfReferential", "primary_tested": ["Shell.run()"], "associated_methods": ["ShellTest.assumeNotInCi()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}, {"name": "assumeNotInCi", "type": "method"}]}, "category": "unit", "fixtures_used": ["assumeNotInCi"], "description": "Tests the use function on a file that uses itself."}, {"name": "testRaw", "primary_tested": ["Main.run()"], "external_dependencies": {"modules": ["Main", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests a script running in raw mode using Main rather than Shell."}, {"name": "testStringDepth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the string depth functionality."}, {"name": "testPrintDepth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the print depth functionality."}, {"name": "testPrintLength", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the print length functionality."}, {"name": "testLineWidth", "primary_tested": ["Shell.run()"], "external_dependencies": {"modules": ["Shell", "Fixture"], "class_members": [{"name": "fixture", "type": "method"}]}, "category": "unit", "description": "Tests the line width functionality."}]}, {"file_path": "src/test/java/net/hydromatic/morel/AlgebraTest.java", "testclass_name": "AlgebraTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.eval.Prop;", "import org.junit.jupiter.api.Test;", "import java.util.function.UnaryOperator;", "import java.util.stream.Stream;", "import static net.hydromatic.morel.Matchers.equalsOrdered;", "import static net.hydromatic.morel.Matchers.equalsUnordered;", "import static net.hydromatic.morel.Matchers.isCode;", "import static net.hydromatic.morel.Matchers.isFullyCalcite;", "import static net.hydromatic.morel.Matchers.list;", "import static net.hydromatic.morel.Ml.ml;", "import static org.hamcrest.core.Is.is;"], "name": "AlgebraTest", "description": "Tests various algebraic operations and queries using the 'scott' JDBC database.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testScott", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests a program that uses an external collection from the 'scott' JDBC database."}, {"name": "testScott2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "As previous, but with more concise syntax."}, {"name": "testScottOrder", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests ordering and limiting operations on the 'scott' JDBC database."}, {"name": "testScottJoin", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests join operations between 'emp' and 'dept' tables in the 'scott' JDBC database."}, {"name": "testScottJoin2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testScottJoin() but without intermediate variables."}, {"name": "testScottJoin2Dot", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testScottJoin2() but using dot notation ('e.field' rather than '#field e')."}, {"name": "testQueryList", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet"]}, "category": "integration", "description": "Tests that Morel gives the same answer with and without Calcite."}, {"name": "testNative", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet"]}, "category": "integration", "description": "Translates a hybrid expression. The leaf cannot be translated to Calcite and therefore becomes a Morel table function; the root can."}, {"name": "testHybridCalciteToMorel", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that can mostly be executed in Calcite, but is followed by List.filter, which must be implemented in Morel."}, {"name": "testFullCalcite", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that can be fully executed in Calcite."}, {"name": "testFullCalcite2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testFullCalcite() but table is via a 'let'."}, {"name": "testFullCalcite3", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "As testFullCalcite() but query is a function, and table is passed via an argument."}, {"name": "testCalciteFrom", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["Prop", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is 'from' over no variables. The result has one row and zero columns."}, {"name": "testCalciteWithVariable", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a variable, 'five', whose value happens to always be '2 + 3'."}, {"name": "testCalciteWithVariableNoInlining", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a variable, 'five', whose value happens to always be '2 + 3'. No inlining is performed."}, {"name": "testCalciteWithFunction", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a function, 'twice'."}, {"name": "testCalciteWithHybridFunction", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a function, 'plus'; one of its arguments comes from a relational record, and another from the Morel environment."}, {"name": "testUnion", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(int...)"]}, "category": "integration", "description": "Tests that we can send 'union' to Calcite."}, {"name": "testExcept", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(int...)"]}, "category": "integration", "description": "Tests that we can send 'except' to Calcite."}, {"name": "testIntersect", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(int...)"]}, "category": "integration", "description": "Tests that we can send 'intersect' to Calcite."}, {"name": "testElem", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(String...)"]}, "category": "integration", "description": "Tests that we can send (what in SQL would be) an uncorrelated 'IN' sub-query to Calcite."}, {"name": "testNotElem", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsUnordered(String...)"]}, "category": "integration", "description": "Tests that we can send (what in SQL would be) an uncorrelated 'IN' sub-query to Calcite."}, {"name": "testExists", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests that 'exists' is pushed down to Calcite. (There are no correlating variables.)"}, {"name": "testNotExists", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(int...)"]}, "category": "integration", "description": "Tests that 'not exists' (uncorrelated), also 'notExists' and 'List.null', is pushed down to Calcite."}, {"name": "testExistsCorrelated", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests that correlated 'exists' is pushed down to Calcite."}, {"name": "testCorrelatedListSubQuery", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a list sub-query."}, {"name": "testCorrelatedScalar", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a query that is executed in Calcite except for a scalar sub-query."}, {"name": "testRecursive", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Tests a recursive query that computes a transitive closure by successive union operations."}, {"name": "testRecursive2", "primary_tested": ["Ml.ml(String)"], "external_dependencies": {"modules": ["BuiltInDataSet", "Matchers"], "project_specific_resources": ["Matchers.equalsOrdered(List...)"]}, "category": "integration", "description": "Similar to testRecursive() but uses the Relatonal.iterate function."}]}, {"file_path": "src/test/java/net/hydromatic/morel/MainTest.java", "testclass_name": "MainTest", "dependencies": ["package net.hydromatic.morel;", "import net.hydromatic.morel.ast.Ast;", "import net.hydromatic.morel.compile.CompileException;", "import net.hydromatic.morel.compile.TypeResolver;", "import net.hydromatic.morel.eval.Codes;", "import net.hydromatic.morel.eval.Prop;", "import net.hydromatic.morel.foreign.ForeignValue;", "import net.hydromatic.morel.parse.ParseException;", "import net.hydromatic.morel.type.DataType;", "import net.hydromatic.morel.type.TypeVar;", "import com.google.common.collect.ImmutableList;", "import com.google.common.collect.ImmutableMap;", "import org.apache.calcite.util.Util;", "import org.hamcrest.CustomTypeSafeMatcher;", "import org.junit.jupiter.api.Disabled;", "import org.junit.jupiter.api.Test;", "import java.io.ByteArrayInputStream;", "import java.io.ByteArrayOutputStream;", "import java.io.InputStream;", "import java.io.PrintStream;", "import java.math.BigDecimal;", "import java.util.Collections;", "import java.util.List;", "import java.util.Map;", "import static net.hydromatic.morel.Matchers.equalsOrdered;", "import static net.hydromatic.morel.Matchers.equalsUnordered;", "import static net.hydromatic.morel.Matchers.hasMoniker;", "import static net.hydromatic.morel.Matchers.hasTypeConstructors;", "import static net.hydromatic.morel.Matchers.instanceOfAnd;", "import static net.hydromatic.morel.Matchers.isCode;", "import static net.hydromatic.morel.Matchers.isCode2;", "import static net.hydromatic.morel.Matchers.isLiteral;", "import static net.hydromatic.morel.Matchers.isUnordered;", "import static net.hydromatic.morel.Matchers.list;", "import static net.hydromatic.morel.Matchers.map;", "import static net.hydromatic.morel.Matchers.throwsA;", "import static net.hydromatic.morel.Matchers.whenAppliedTo;", "import static net.hydromatic.morel.Ml.MatchCoverage.NON_EXHAUSTIVE;", "import static net.hydromatic.morel.Ml.MatchCoverage.OK;", "import static net.hydromatic.morel.Ml.MatchCoverage.REDUNDANT;", "import static net.hydromatic.morel.Ml.assertError;", "import static net.hydromatic.morel.Ml.ml;", "import static org.hamcrest.CoreMatchers.containsString;", "import static org.hamcrest.CoreMatchers.is;", "import static org.hamcrest.CoreMatchers.not;", "import static org.hamcrest.CoreMatchers.nullValue;", "import static org.hamcrest.CoreMatchers.startsWith;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.hasToString;"]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_plusTest.java", "testclass_name": "Pos_plusTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pos_plusTest", "description": "Unit tests for the plus method of the Pos class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPlus", "primary_tested": ["Pos.plus(Pos)"], "external_dependencies": {"modules": ["Pos"]}, "category": "unit", "description": "Tests the plus method of the Pos class, verifying that it correctly combines two Pos objects."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_intersectTest.java", "testclass_name": "Static_intersectTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_intersectTest", "description": "Unit tests for the intersect method in the Static class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIntersect", "primary_tested": ["Static.intersect(List<Integer>,Iterable<Integer>)"], "external_dependencies": {"modules": ["Static", "Arrays", "ImmutableList"]}, "category": "unit", "description": "Tests the intersect functionality of the Static class, verifying that it correctly finds the intersection of two lists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_strTest.java", "testclass_name": "Static_strTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Static_strTest", "description": "Unit tests for the Static.str method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testStr", "primary_tested": ["Static.str(StringBuilder)"], "external_dependencies": {"modules": ["Static", "StringBuilder"]}, "category": "unit", "description": "Tests the Static.str method to ensure it correctly processes a StringBuilder and returns the expected string while clearing the StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_rightTest.java", "testclass_name": "Pair_rightTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import java.util.AbstractMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_rightTest", "description": "Unit test for the Pair.right method which extracts the right values from a list of pairs.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRight", "primary_tested": ["Pair.right(List<Map.Entry<String,Integer>>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.Map", "java.util.AbstractMap", "net.hydromatic.morel.util.Pair"]}, "category": "unit", "description": "Tests the extraction of right values from a list of pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_leftTest.java", "testclass_name": "Pair_leftTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import java.util.AbstractMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_leftTest", "description": "Unit tests for the Pair.left method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testLeft", "primary_tested": ["Pair.left(List<Map.Entry<String,Integer>>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.Map", "java.util.AbstractMap", "net.hydromatic.morel.util.Pair"]}, "category": "unit", "description": "Tests the Pair.left method to ensure it correctly extracts the left elements from a list of pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_toMapTest.java", "testclass_name": "Pair_toMapTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_toMapTest", "description": "Unit tests for the Pair.toMap method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToMap", "primary_tested": ["Pair.toMap(List<Pair<String,Integer>>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "HashMap", "List", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the conversion of a list of pairs to a map using the Pair.toMap method."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_toImmutableListTest.java", "testclass_name": "Static_toImmutableListTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_toImmutableListTest", "description": "Unit test for the toImmutableList method in the Static class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testToImmutableList", "primary_tested": ["Static.toImmutableList()"], "external_dependencies": {"modules": ["com.google.common.collect.ImmutableList", "java.util.Arrays", "java.util.List", "java.util.stream.Stream", "net.hydromatic.morel.util.Static"]}, "category": "unit", "description": "Tests the toImmutableList method of the Static class by converting a list to an ImmutableList and verifying the result."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_plusTest.java", "testclass_name": "Static_plusTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_plusTest", "description": "Unit test for the Static.plus method which adds a key-value pair to a map.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPlus", "primary_tested": ["Static.plus(Map<String,Integer>,String,Integer)"], "external_dependencies": {"modules": ["Static", "HashMap", "ImmutableMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.plus method by adding a new key-value pair to a map and verifying the result."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachIndexedTest.java", "testclass_name": "Ord_forEachIndexedTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.ObjIntConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Ord_forEachIndexedTest", "description": "Unit test for the forEachIndexed method in the Ord class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEachIndexed", "primary_tested": ["Ord.forEachIndexed(List<String>,ObjIntConsumer<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.function.ObjIntConsumer", "Ord"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachIndexed method of the Ord class by verifying that it correctly appends the index and element to a StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_forEachTest.java", "testclass_name": "Pair_forEachTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.BiConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_forEachTest", "description": "Unit test for the forEach method in the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEach", "primary_tested": ["Pair.forEach(List<Integer>,List<String>,BiConsumer<Integer,String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.function.BiConsumer", "Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method of the Pair class by verifying that it correctly appends key-value pairs to a StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachTest.java", "testclass_name": "Ord_forEachTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.ObjIntConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Ord_forEachTest", "description": "Unit test for the forEach method in the Ord class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEach", "primary_tested": ["Ord.forEach(List<String>,ObjIntConsumer<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.function.ObjIntConsumer", "Ord"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach functionality of the Ord class, ensuring that it correctly processes each element of the list with the provided consumer."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_splitTest.java", "testclass_name": "Pos_splitTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import net.hydromatic.morel.util.Pair;"], "name": "Pos_splitTest", "description": "Unit tests for the Pos.split method, which splits a string based on a delimiter and validates the input.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSplit_ValidInput", "primary_tested": ["Pos.split(String,char,String)"], "external_dependencies": {"modules": ["Pos", "Pair"]}, "category": "unit", "description": "Tests the Pos.split method with valid input, ensuring it correctly splits the string and returns the expected result."}, {"name": "testSplit_InvalidInput", "primary_tested": ["Pos.split(String,char,String)"], "external_dependencies": {"modules": ["Pos", "Pair"]}, "category": "unit", "description": "Tests the Pos.split method with invalid input, ensuring it throws an IllegalArgumentException with the expected message."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_noneMatchTest.java", "testclass_name": "Pair_noneMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_noneMatchTest", "description": "Unit tests for the Pair.noneMatch method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNoneMatch_NoMatch", "primary_tested": ["Pair.noneMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"]}, "category": "unit", "description": "Tests the Pair.noneMatch method with no matching pairs."}, {"name": "testNoneMatch_WithMatch", "primary_tested": ["Pair.noneMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"]}, "category": "unit", "description": "Tests the Pair.noneMatch method with matching pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/type/RangeExtent_toStringTest.java", "testclass_name": "RangeExtent_toStringTest", "dependencies": ["package net.hydromatic.morel.type;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RangeExtent_toStringTest", "description": "Unit tests for the toString method of the RangeExtent class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToStringUnbounded", "primary_tested": ["RangeExtent.toString()"], "external_dependencies": {"modules": ["Type", "RangeExtent", "ImmutableMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of RangeExtent with an unbounded range."}, {"name": "testToStringBounded", "primary_tested": ["RangeExtent.toString()"], "external_dependencies": {"modules": ["Type", "RangeExtent", "ImmutableMap", "ImmutableRangeSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of RangeExtent with a bounded range."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_equalsTest.java", "testclass_name": "Pos_equalsTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pos_equalsTest", "description": "Unit tests for the equals method in the Pos class.", "class_members": {"variables": [{"name": "pos1", "type": "Pos"}, {"name": "pos2", "type": "Pos"}, {"name": "pos3", "type": "Pos"}]}, "test_cases": [{"name": "testEquals", "primary_tested": ["Pos.equals(Object)"], "external_dependencies": {"modules": ["Pos"], "class_members": [{"name": "pos1", "type": "variable"}, {"name": "pos2", "type": "variable"}, {"name": "pos3", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method of the Pos class, including equality checks for same objects, equal objects, different objects, null, and different class types."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_transformEagerTest.java", "testclass_name": "Static_transformEagerTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.function.Function;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_transformEagerTest", "description": "Unit tests for the Static.transformEager method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformEagerWithEmptyIterable", "primary_tested": ["Static.transformEager(Iterable<String>,Function<String,Integer>)"], "external_dependencies": {"modules": ["Collections", "ImmutableList", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformEager method with an empty iterable."}, {"name": "testTransformEagerWithNonEmptyIterable", "primary_tested": ["Static.transformEager(Iterable<String>,Function<String,Integer>)"], "external_dependencies": {"modules": ["Arrays", "ImmutableList", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformEager method with a non-empty iterable."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_compareToTest.java", "testclass_name": "Pair_compareToTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_compareToTest", "description": "Unit tests for the compareTo method in the Pair class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCompareTo_DifferentLeft", "primary_tested": ["Pair.compareTo(Pair)"], "external_dependencies": {"modules": ["Pair"]}, "category": "unit", "description": "Tests the compareTo method when the left elements of the pairs are different."}, {"name": "testCompareTo_SameLeftDifferentRight", "primary_tested": ["Pair.compareTo(Pair)"], "external_dependencies": {"modules": ["Pair"]}, "category": "unit", "description": "Tests the compareTo method when the left elements are the same but the right elements are different."}, {"name": "testCompareTo_SameLeftSameRight", "primary_tested": ["Pair.compareTo(Pair)"], "external_dependencies": {"modules": ["Pair"]}, "category": "unit", "description": "Tests the compareTo method when both the left and right elements of the pairs are the same."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_adjacentsTest.java", "testclass_name": "Pair_adjacentsTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_adjacentsTest", "description": "Unit tests for the Pair.adjacents method, which generates pairs of adjacent elements from an iterable.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdjacentsWithEmptyIterable", "primary_tested": ["Pair.adjacents(Iterable<Integer>)"], "external_dependencies": {"modules": ["Collections", "Pair", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.adjacents method with an empty iterable, ensuring no pairs are generated."}, {"name": "testAdjacentsWithNonEmptyIterable", "primary_tested": ["Pair.adjacents(Iterable<Integer>)"], "associated_methods": ["Pair.of(Integer,Integer)"], "external_dependencies": {"modules": ["Arrays", "Pair", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.adjacents method with a non-empty iterable, ensuring pairs of adjacent elements are correctly generated."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_minusTest.java", "testclass_name": "Static_minusTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_minusTest", "description": "Unit tests for the Static.minus method, which removes all occurrences of a specified element from a list.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMinus_AllElementsRemoved", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays", "List"]}, "category": "unit", "description": "Tests the Static.minus method when all occurrences of the specified element are removed from the list."}, {"name": "testMinus_NoElementsRemoved", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays", "List"]}, "category": "unit", "description": "Tests the Static.minus method when no elements are removed from the list because the specified element is not present."}, {"name": "testMinus_EmptyList", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "ImmutableList", "List"]}, "category": "unit", "description": "Tests the Static.minus method when the input list is empty."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_shorterThanTest.java", "testclass_name": "Static_shorterThanTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Static_shorterThanTest", "description": "Unit tests for the Static.shorterThan method, which checks if a collection or iterable is shorter than a given number.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testShorterThan_Collection", "primary_tested": ["Static.shorterThan(Collection<Integer>,int)"], "external_dependencies": {"modules": ["Arrays", "Static"]}, "category": "unit", "description": "Tests the shorterThan method with a Collection, checking if the collection is shorter than a given number."}, {"name": "testShorterThan_Iterable", "primary_tested": ["Static.shorterThan(Iterable<Integer>,int)"], "external_dependencies": {"modules": ["ImmutableList", "Static"]}, "category": "unit", "description": "Tests the shorterThan method with an Iterable, checking if the iterable is shorter than a given number."}, {"name": "testShorterThan_NonPositiveN", "primary_tested": ["Static.shorterThan(Iterable<Integer>,int)"], "external_dependencies": {"modules": ["ImmutableList", "Static"]}, "category": "unit", "description": "Tests the shorterThan method with non-positive values for n, checking if the method correctly handles such cases."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipTest.java", "testclass_name": "Pair_zipTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_zipTest", "description": "Unit tests for the Pair.zip method, which zips two lists into a list of pairs.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testZipStrictEqualSizes", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "Pair"], "class_members": []}, "category": "unit", "description": "Tests the zip functionality of Pair when both lists have equal sizes and strict mode is enabled."}, {"name": "testZipStrictDifferentSizes", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "Pair"], "class_members": []}, "category": "unit", "description": "Tests the zip functionality of Pair when lists have different sizes and strict mode is enabled, expecting an AssertionError."}, {"name": "testZipNonStrict", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "Pair"], "class_members": []}, "category": "unit", "description": "Tests the zip functionality of Pair when lists have different sizes and strict mode is disabled."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_findTest.java", "testclass_name": "Static_findTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_findTest", "description": "Unit tests for the Static.find method with different list types and predicates.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFindRandomAccessList", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.find method with a random access list and a predicate that matches an element."}, {"name": "testFindNonRandomAccessList", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.find method with a non-random access list and a predicate that matches an element."}, {"name": "testFindNoMatch", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.find method with a predicate that does not match any element in the list."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipMutableTest.java", "testclass_name": "Pair_zipMutableTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_zipMutableTest", "description": "Unit tests for the zipMutable method of the Pair class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testZipMutable", "primary_tested": ["Pair.zipMutable(List<Integer>,List<String>)"], "associated_methods": ["Pair.of(Integer,String)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "net.hydromatic.morel.util.Pair"]}, "category": "unit", "description": "Tests the zipMutable functionality of the Pair class, ensuring that it correctly pairs elements from two lists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/compile/Extents_intersectTest.java", "testclass_name": "Extents_intersectTest", "dependencies": ["package net.hydromatic.morel.compile;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Extents_intersectTest", "description": "Unit tests for the Extents.intersect method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIntersect_EmptyList", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with an empty list of range set maps."}, {"name": "testIntersect_SingleMap", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with a single map of range sets."}, {"name": "testIntersect_MultipleMaps", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with multiple maps of range sets."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_anyMatchTest.java", "testclass_name": "Pair_anyMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_anyMatchTest", "description": "Unit tests for the Pair.anyMatch method.", "class_members": {"variables": [{"name": "ks", "type": "List<Integer>"}, {"name": "vs", "type": "List<Integer>"}, {"name": "predicate", "type": "BiPredicate<Integer, Integer>"}]}, "test_cases": [{"name": "testAnyMatch_True", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"], "class_members": [{"name": "ks", "type": "variable"}, {"name": "vs", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the Pair.anyMatch method with a predicate that returns true for at least one pair of elements."}, {"name": "testAnyMatch_False", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"], "class_members": [{"name": "ks", "type": "variable"}, {"name": "vs", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the Pair.anyMatch method with a predicate that returns false for all pairs of elements."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_firstAndTest.java", "testclass_name": "Pair_firstAndTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_firstAndTest", "description": "Unit tests for the Pair.firstAnd method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testFirstAndWithEmptyIterable", "primary_tested": ["Pair.firstAnd(Iterable<Integer>)"], "external_dependencies": {"modules": ["Collections", "Pair", "Iterator"]}, "category": "unit", "description": "Tests the Pair.firstAnd method with an empty iterable, expecting no pairs."}, {"name": "testFirstAndWithNonEmptyIterable", "primary_tested": ["Pair.firstAnd(Iterable<Integer>)"], "associated_methods": ["Pair.left", "Pair.right"], "external_dependencies": {"modules": ["Arrays", "Pair", "Iterator"]}, "category": "unit", "description": "Tests the Pair.firstAnd method with a non-empty iterable, expecting pairs with correct values."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_allMatchTest.java", "testclass_name": "Pair_allMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_allMatchTest", "description": "Unit tests for the Pair.allMatch method, which checks if all elements in two lists match based on a given predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllMatch_AllElementsMatch", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that all elements in two lists match when the predicate is Integer::equals."}, {"name": "testAllMatch_NotAllElementsMatch", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that not all elements in two lists match when the predicate is Integer::equals."}, {"name": "testAllMatch_DifferentLengths", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of Pair.allMatch when the two lists have different lengths."}, {"name": "testAllMatch_EmptyCollections", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Collections", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of Pair.allMatch when both lists are empty."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/TailList_clearTest.java", "testclass_name": "TailList_clearTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.is;", "import static org.hamcrest.Matchers.isEmptyString;"], "name": "TailList_clearTest", "description": "Unit tests for the clear functionality of the TailList class.", "class_members": {"variables": [{"name": "backingList", "type": "List<String>"}, {"name": "tailList", "type": "TailList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["TailList.clear()"], "associated_methods": ["TailList.size()", "List.size()", "List.get(int)"], "external_dependencies": {"modules": ["TailList", "List", "ArrayList", "Arrays"], "class_members": [{"name": "tailList", "type": "variable"}, {"name": "backingList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the TailList, ensuring the size and content of the backing list are as expected after clearing."}, {"name": "testClearEmptyList", "primary_tested": ["TailList.clear()"], "associated_methods": ["TailList.size()"], "external_dependencies": {"modules": ["TailList", "List", "ArrayList"], "class_members": [{"name": "backingList", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of an empty TailList, ensuring the size remains zero after clearing."}, {"name": "testClearWithNoElementsToRemove", "primary_tested": ["TailList.clear()"], "associated_methods": ["TailList.size()", "List.size()"], "external_dependencies": {"modules": ["TailList", "List", "ArrayList", "Arrays"], "class_members": [{"name": "backingList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of a TailList with no elements to remove, ensuring the size and content of the backing list remain unchanged."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_equalsTest.java", "testclass_name": "Pair_equalsTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.AbstractMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_equalsTest", "description": "Unit tests for the equals method in the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentInstanceSameValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances but same values."}, {"name": "testEquals_DifferentInstanceDifferentValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances and different values."}, {"name": "testEquals_NotInstanceOfMapEntry", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an object that is not an instance of Map.Entry."}, {"name": "testEquals_InstanceOfMapEntryDifferentValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair", "Map.Entry", "AbstractMap.SimpleEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an instance of Map.Entry but different values."}, {"name": "testEquals_InstanceOfMapEntrySameValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair", "Map.Entry", "AbstractMap.SimpleEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an instance of Map.Entry and same values."}]}, {"file_path": "src/test/java/net/hydromatic/morel/compile/Extents_unionTest.java", "testclass_name": "Extents_unionTest", "dependencies": ["package net.hydromatic.morel.compile;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Extents_unionTest", "description": "Unit tests for the union functionality of Extents class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnionWithEmptyList", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with an empty list of maps."}, {"name": "testUnionWithSingleMap", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with a single map."}, {"name": "testUnionWithMultipleMaps", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with multiple maps."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Sat_variableTest.java", "testclass_name": "Sat_variableTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Sat_variableTest", "description": "Unit tests for the Sat.Variable class, focusing on variable creation, retrieval, and uniqueness.", "class_members": {"variables": [{"name": "sat", "type": "Sat"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testVariableCreation", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Sat.Variable and verifies its properties."}, {"name": "testVariableRetrieval", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a Sat.Variable and verifies that the same instance is returned for the same name."}, {"name": "testVariableIdIncrement", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the increment of the id property for each new Sat.Variable created."}, {"name": "testVariableNameUniqueness", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueness of the name property for each new Sat.Variable created."}, {"name": "testVariableIdUniqueness", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueness of the id property for each new Sat.Variable created."}]}]