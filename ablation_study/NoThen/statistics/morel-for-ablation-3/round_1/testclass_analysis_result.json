[{"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_plusTest.java", "testclass_name": "Pos_plusTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pos_plusTest", "description": "Unit tests for the plus method of the Pos class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testPlus", "primary_tested": ["Pos.plus(Pos)"], "external_dependencies": {"modules": ["Pos"]}, "category": "unit", "description": "Tests the plus method of the Pos class, verifying that it correctly combines two Pos objects."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_intersectTest.java", "testclass_name": "Static_intersectTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_intersectTest", "description": "Unit tests for the intersect method in the Static class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testIntersect", "primary_tested": ["Static.intersect(List<Integer>,Iterable<Integer>)"], "external_dependencies": {"modules": ["Static", "Arrays", "ImmutableList"]}, "category": "unit", "description": "Tests the intersect functionality of the Static class, verifying that it correctly finds the intersection of two lists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_strTest.java", "testclass_name": "Static_strTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Static_strTest", "description": "Unit tests for the Static.str method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testStr", "primary_tested": ["Static.str(StringBuilder)"], "external_dependencies": {"modules": ["Static", "StringBuilder"]}, "category": "unit", "description": "Tests the Static.str method to ensure it correctly processes a StringBuilder and returns the expected string while clearing the StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_rightTest.java", "testclass_name": "Pair_rightTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import java.util.AbstractMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_rightTest", "description": "Unit test for the Pair.right method which extracts the right values from a list of pairs.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testRight", "primary_tested": ["Pair.right(List<Map.Entry<String,Integer>>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.Map", "java.util.AbstractMap", "net.hydromatic.morel.util.Pair"]}, "category": "unit", "description": "Tests the extraction of right values from a list of pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_leftTest.java", "testclass_name": "Pair_leftTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import java.util.AbstractMap;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_leftTest", "description": "Unit tests for the Pair.left method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testLeft", "primary_tested": ["Pair.left(List<Map.Entry<String,Integer>>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.Map", "java.util.AbstractMap", "net.hydromatic.morel.util.Pair"]}, "category": "unit", "description": "Tests the Pair.left method to ensure it correctly extracts the left elements from a list of pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_toMapTest.java", "testclass_name": "Pair_toMapTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.HashMap;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_toMapTest", "description": "Unit tests for the Pair.toMap method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToMap", "primary_tested": ["Pair.toMap(List<Pair<String,Integer>>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "HashMap", "List", "Map"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the conversion of a list of pairs to a map using the Pair.toMap method."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_toImmutableListTest.java", "testclass_name": "Static_toImmutableListTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.stream.Stream;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_toImmutableListTest", "description": "Unit test for the toImmutableList method in the Static class.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testToImmutableList", "primary_tested": ["Static.toImmutableList()"], "external_dependencies": {"modules": ["com.google.common.collect.ImmutableList", "java.util.Arrays", "java.util.List", "java.util.stream.Stream", "net.hydromatic.morel.util.Static"]}, "category": "unit", "description": "Tests the toImmutableList method of the Static class by converting a list to an ImmutableList and verifying the result."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_plusTest.java", "testclass_name": "Static_plusTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableMap;", "import org.junit.jupiter.api.Test;", "import java.util.HashMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_plusTest", "description": "Unit test for the Static.plus method which adds a key-value pair to a map.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testPlus", "primary_tested": ["Static.plus(Map<String,Integer>,String,Integer)"], "external_dependencies": {"modules": ["Static", "HashMap", "ImmutableMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.plus method by adding a new key-value pair to a map and verifying the result."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachIndexedTest.java", "testclass_name": "Ord_forEachIndexedTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.ObjIntConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Ord_forEachIndexedTest", "description": "Unit test for the forEachIndexed method in the Ord class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEachIndexed", "primary_tested": ["Ord.forEachIndexed(List<String>,ObjIntConsumer<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.function.ObjIntConsumer", "Ord"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEachIndexed method of the Ord class by verifying that it correctly appends the index and element to a StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_forEachTest.java", "testclass_name": "Pair_forEachTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.BiConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_forEachTest", "description": "Unit test for the forEach method in the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEach", "primary_tested": ["Pair.forEach(List<Integer>,List<String>,BiConsumer<Integer,String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.function.BiConsumer", "Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach method of the Pair class by verifying that it correctly appends key-value pairs to a StringBuilder."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Ord_forEachTest.java", "testclass_name": "Ord_forEachTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.ObjIntConsumer;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Ord_forEachTest", "description": "Unit test for the forEach method in the Ord class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testForEach", "primary_tested": ["Ord.forEach(List<String>,ObjIntConsumer<String>)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "java.util.function.ObjIntConsumer", "Ord"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the forEach functionality of the Ord class, ensuring that it correctly processes each element of the list with the provided consumer."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_splitTest.java", "testclass_name": "Pos_splitTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;", "import net.hydromatic.morel.util.Pair;"], "name": "Pos_splitTest", "description": "Unit tests for the Pos.split method, which splits a string based on a delimiter and validates the input.", "class_members": {"variables": []}, "fixtures": [], "test_cases": [{"name": "testSplit_ValidInput", "primary_tested": ["Pos.split(String,char,String)"], "external_dependencies": {"modules": ["Pos", "Pair"]}, "category": "unit", "description": "Tests the Pos.split method with valid input, ensuring it correctly splits the string and returns the expected result."}, {"name": "testSplit_InvalidInput", "primary_tested": ["Pos.split(String,char,String)"], "external_dependencies": {"modules": ["Pos", "Pair"]}, "category": "unit", "description": "Tests the Pos.split method with invalid input, ensuring it throws an IllegalArgumentException with the expected message."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_noneMatchTest.java", "testclass_name": "Pair_noneMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_noneMatchTest", "description": "Unit tests for the Pair.noneMatch method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testNoneMatch_NoMatch", "primary_tested": ["Pair.noneMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"]}, "category": "unit", "description": "Tests the Pair.noneMatch method with no matching pairs."}, {"name": "testNoneMatch_WithMatch", "primary_tested": ["Pair.noneMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"]}, "category": "unit", "description": "Tests the Pair.noneMatch method with matching pairs."}]}, {"file_path": "src/test/java/net/hydromatic/morel/type/RangeExtent_toStringTest.java", "testclass_name": "RangeExtent_toStringTest", "dependencies": ["package net.hydromatic.morel.type;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "RangeExtent_toStringTest", "description": "Unit tests for the toString method of the RangeExtent class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testToStringUnbounded", "primary_tested": ["RangeExtent.toString()"], "external_dependencies": {"modules": ["Type", "RangeExtent", "ImmutableMap"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of RangeExtent with an unbounded range."}, {"name": "testToStringBounded", "primary_tested": ["RangeExtent.toString()"], "external_dependencies": {"modules": ["Type", "RangeExtent", "ImmutableMap", "ImmutableRangeSet"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the toString method of RangeExtent with a bounded range."}]}, {"file_path": "src/test/java/net/hydromatic/morel/ast/Pos_equalsTest.java", "testclass_name": "Pos_equalsTest", "dependencies": ["package net.hydromatic.morel.ast;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pos_equalsTest", "description": "Unit tests for the equals method in the Pos class.", "class_members": {"variables": [{"name": "pos1", "type": "Pos"}, {"name": "pos2", "type": "Pos"}, {"name": "pos3", "type": "Pos"}]}, "test_cases": [{"name": "testEquals", "primary_tested": ["Pos.equals(Object)"], "external_dependencies": {"modules": ["Pos"], "class_members": [{"name": "pos1", "type": "variable"}, {"name": "pos2", "type": "variable"}, {"name": "pos3", "type": "variable"}]}, "category": "unit", "description": "Tests the equals method of the Pos class, including equality checks for same objects, equal objects, different objects, null, and different class types."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_transformEagerTest.java", "testclass_name": "Static_transformEagerTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.function.Function;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_transformEagerTest", "description": "Unit tests for the Static.transformEager method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testTransformEagerWithEmptyIterable", "primary_tested": ["Static.transformEager(Iterable<String>,Function<String,Integer>)"], "external_dependencies": {"modules": ["Collections", "ImmutableList", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformEager method with an empty iterable."}, {"name": "testTransformEagerWithNonEmptyIterable", "primary_tested": ["Static.transformEager(Iterable<String>,Function<String,Integer>)"], "external_dependencies": {"modules": ["Arrays", "ImmutableList", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the transformEager method with a non-empty iterable."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_compareToTest.java", "testclass_name": "Pair_compareToTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_compareToTest", "description": "Unit tests for the compareTo method in the Pair class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testCompareTo_DifferentLeft", "primary_tested": ["Pair.compareTo(Pair)"], "external_dependencies": {"modules": ["Pair"]}, "category": "unit", "description": "Tests the compareTo method when the left elements of the pairs are different."}, {"name": "testCompareTo_SameLeftDifferentRight", "primary_tested": ["Pair.compareTo(Pair)"], "external_dependencies": {"modules": ["Pair"]}, "category": "unit", "description": "Tests the compareTo method when the left elements are the same but the right elements are different."}, {"name": "testCompareTo_SameLeftSameRight", "primary_tested": ["Pair.compareTo(Pair)"], "external_dependencies": {"modules": ["Pair"]}, "category": "unit", "description": "Tests the compareTo method when both the left and right elements of the pairs are the same."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_adjacentsTest.java", "testclass_name": "Pair_adjacentsTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_adjacentsTest", "description": "Unit tests for the Pair.adjacents method, which generates pairs of adjacent elements from an iterable.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAdjacentsWithEmptyIterable", "primary_tested": ["Pair.adjacents(Iterable<Integer>)"], "external_dependencies": {"modules": ["Collections", "Pair", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.adjacents method with an empty iterable, ensuring no pairs are generated."}, {"name": "testAdjacentsWithNonEmptyIterable", "primary_tested": ["Pair.adjacents(Iterable<Integer>)"], "associated_methods": ["Pair.of(Integer,Integer)"], "external_dependencies": {"modules": ["Arrays", "Pair", "Iterator"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Pair.adjacents method with a non-empty iterable, ensuring pairs of adjacent elements are correctly generated."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_minusTest.java", "testclass_name": "Static_minusTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_minusTest", "description": "Unit tests for the Static.minus method, which removes all occurrences of a specified element from a list.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testMinus_AllElementsRemoved", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays", "List"]}, "category": "unit", "description": "Tests the Static.minus method when all occurrences of the specified element are removed from the list."}, {"name": "testMinus_NoElementsRemoved", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "Arrays", "List"]}, "category": "unit", "description": "Tests the Static.minus method when no elements are removed from the list because the specified element is not present."}, {"name": "testMinus_EmptyList", "primary_tested": ["Static.minus(List<Integer>,int)"], "external_dependencies": {"modules": ["Static", "ImmutableList", "List"]}, "category": "unit", "description": "Tests the Static.minus method when the input list is empty."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_shorterThanTest.java", "testclass_name": "Static_shorterThanTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collection;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Static_shorterThanTest", "description": "Unit tests for the Static.shorterThan method, which checks if a collection or iterable is shorter than a given number.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testShorterThan_Collection", "primary_tested": ["Static.shorterThan(Collection<Integer>,int)"], "external_dependencies": {"modules": ["Arrays", "Static"]}, "category": "unit", "description": "Tests the shorterThan method with a Collection, checking if the collection is shorter than a given number."}, {"name": "testShorterThan_Iterable", "primary_tested": ["Static.shorterThan(Iterable<Integer>,int)"], "external_dependencies": {"modules": ["ImmutableList", "Static"]}, "category": "unit", "description": "Tests the shorterThan method with an Iterable, checking if the iterable is shorter than a given number."}, {"name": "testShorterThan_NonPositiveN", "primary_tested": ["Static.shorterThan(Iterable<Integer>,int)"], "external_dependencies": {"modules": ["ImmutableList", "Static"]}, "category": "unit", "description": "Tests the shorterThan method with non-positive values for n, checking if the method correctly handles such cases."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipTest.java", "testclass_name": "Pair_zipTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_zipTest", "description": "Unit tests for the Pair.zip method, which zips two lists into a list of pairs.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testZipStrictEqualSizes", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "Pair"], "class_members": []}, "category": "unit", "description": "Tests the zip functionality of Pair when both lists have equal sizes and strict mode is enabled."}, {"name": "testZipStrictDifferentSizes", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "Pair"], "class_members": []}, "category": "unit", "description": "Tests the zip functionality of Pair when lists have different sizes and strict mode is enabled, expecting an AssertionError."}, {"name": "testZipNonStrict", "primary_tested": ["Pair.zip(List<Integer>,List<String>,boolean)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "Pair"], "class_members": []}, "category": "unit", "description": "Tests the zip functionality of Pair when lists have different sizes and strict mode is disabled."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Static_findTest.java", "testclass_name": "Static_findTest", "dependencies": ["package net.hydromatic.morel.util;", "import com.google.common.collect.ImmutableList;", "import org.junit.jupiter.api.Test;", "import java.util.List;", "import java.util.function.Predicate;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Static_findTest", "description": "Unit tests for the Static.find method with different list types and predicates.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testFindRandomAccessList", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.find method with a random access list and a predicate that matches an element."}, {"name": "testFindNonRandomAccessList", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.find method with a non-random access list and a predicate that matches an element."}, {"name": "testFindNoMatch", "primary_tested": ["Static.find(List<Integer>,Predicate<Integer>)"], "external_dependencies": {"modules": ["ImmutableList", "Predicate", "Static"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the Static.find method with a predicate that does not match any element in the list."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_zipMutableTest.java", "testclass_name": "Pair_zipMutableTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Pair_zipMutableTest", "description": "Unit tests for the zipMutable method of the Pair class.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testZipMutable", "primary_tested": ["Pair.zipMutable(List<Integer>,List<String>)"], "associated_methods": ["Pair.of(Integer,String)"], "external_dependencies": {"modules": ["java.util.Arrays", "java.util.List", "net.hydromatic.morel.util.Pair"]}, "category": "unit", "description": "Tests the zipMutable functionality of the Pair class, ensuring that it correctly pairs elements from two lists."}]}, {"file_path": "src/test/java/net/hydromatic/morel/compile/Extents_intersectTest.java", "testclass_name": "Extents_intersectTest", "dependencies": ["package net.hydromatic.morel.compile;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Extents_intersectTest", "description": "Unit tests for the Extents.intersect method.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testIntersect_EmptyList", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with an empty list of range set maps."}, {"name": "testIntersect_SingleMap", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with a single map of range sets."}, {"name": "testIntersect_MultipleMaps", "primary_tested": ["Extents.intersect(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the intersection functionality of Extents with multiple maps of range sets."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_anyMatchTest.java", "testclass_name": "Pair_anyMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_anyMatchTest", "description": "Unit tests for the Pair.anyMatch method.", "class_members": {"variables": [{"name": "ks", "type": "List<Integer>"}, {"name": "vs", "type": "List<Integer>"}, {"name": "predicate", "type": "BiPredicate<Integer, Integer>"}]}, "test_cases": [{"name": "testAnyMatch_True", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"], "class_members": [{"name": "ks", "type": "variable"}, {"name": "vs", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the Pair.anyMatch method with a predicate that returns true for at least one pair of elements."}, {"name": "testAnyMatch_False", "primary_tested": ["Pair.anyMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "List", "BiPredicate"], "class_members": [{"name": "ks", "type": "variable"}, {"name": "vs", "type": "variable"}, {"name": "predicate", "type": "variable"}]}, "category": "unit", "description": "Tests the Pair.anyMatch method with a predicate that returns false for all pairs of elements."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_firstAndTest.java", "testclass_name": "Pair_firstAndTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.Iterator;", "import java.util.List;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_firstAndTest", "description": "Unit tests for the Pair.firstAnd method.", "class_members": {}, "fixtures": [], "test_cases": [{"name": "testFirstAndWithEmptyIterable", "primary_tested": ["Pair.firstAnd(Iterable<Integer>)"], "external_dependencies": {"modules": ["Collections", "Pair", "Iterator"]}, "category": "unit", "description": "Tests the Pair.firstAnd method with an empty iterable, expecting no pairs."}, {"name": "testFirstAndWithNonEmptyIterable", "primary_tested": ["Pair.firstAnd(Iterable<Integer>)"], "associated_methods": ["Pair.left", "Pair.right"], "external_dependencies": {"modules": ["Arrays", "Pair", "Iterator"]}, "category": "unit", "description": "Tests the Pair.firstAnd method with a non-empty iterable, expecting pairs with correct values."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_allMatchTest.java", "testclass_name": "Pair_allMatchTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.Collections;", "import java.util.List;", "import java.util.function.BiPredicate;", "import static org.junit.jupiter.api.Assertions.assertFalse;", "import static org.junit.jupiter.api.Assertions.assertTrue;"], "name": "Pair_allMatchTest", "description": "Unit tests for the Pair.allMatch method, which checks if all elements in two lists match based on a given predicate.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testAllMatch_AllElementsMatch", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that all elements in two lists match when the predicate is Integer::equals."}, {"name": "testAllMatch_NotAllElementsMatch", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests that not all elements in two lists match when the predicate is Integer::equals."}, {"name": "testAllMatch_DifferentLengths", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Arrays", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of Pair.allMatch when the two lists have different lengths."}, {"name": "testAllMatch_EmptyCollections", "primary_tested": ["Pair.allMatch(List<Integer>,List<Integer>,BiPredicate<Integer,Integer>)"], "external_dependencies": {"modules": ["Pair", "Collections", "BiPredicate", "Integer"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the behavior of Pair.allMatch when both lists are empty."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/TailList_clearTest.java", "testclass_name": "TailList_clearTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import java.util.ArrayList;", "import java.util.Arrays;", "import java.util.List;", "import static org.hamcrest.MatcherAssert.assertThat;", "import static org.hamcrest.Matchers.is;", "import static org.hamcrest.Matchers.isEmptyString;"], "name": "TailList_clearTest", "description": "Unit tests for the clear functionality of the TailList class.", "class_members": {"variables": [{"name": "backingList", "type": "List<String>"}, {"name": "tailList", "type": "TailList<String>"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testClear", "primary_tested": ["TailList.clear()"], "associated_methods": ["TailList.size()", "List.size()", "List.get(int)"], "external_dependencies": {"modules": ["TailList", "List", "ArrayList", "Arrays"], "class_members": [{"name": "tailList", "type": "variable"}, {"name": "backingList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of the TailList, ensuring the size and content of the backing list are as expected after clearing."}, {"name": "testClearEmptyList", "primary_tested": ["TailList.clear()"], "associated_methods": ["TailList.size()"], "external_dependencies": {"modules": ["TailList", "List", "ArrayList"], "class_members": [{"name": "backingList", "type": "variable"}]}, "category": "unit", "description": "Tests the clear functionality of an empty TailList, ensuring the size remains zero after clearing."}, {"name": "testClearWithNoElementsToRemove", "primary_tested": ["TailList.clear()"], "associated_methods": ["TailList.size()", "List.size()"], "external_dependencies": {"modules": ["TailList", "List", "ArrayList", "Arrays"], "class_members": [{"name": "backingList", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the clear functionality of a TailList with no elements to remove, ensuring the size and content of the backing list remain unchanged."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Pair_equalsTest.java", "testclass_name": "Pair_equalsTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.Test;", "import java.util.AbstractMap;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Pair_equalsTest", "description": "Unit tests for the equals method in the Pair class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testEquals_SameInstance", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with the same instance."}, {"name": "testEquals_DifferentInstanceSameValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances but same values."}, {"name": "testEquals_DifferentInstanceDifferentValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with different instances and different values."}, {"name": "testEquals_NotInstanceOfMapEntry", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an object that is not an instance of Map.Entry."}, {"name": "testEquals_InstanceOfMapEntryDifferentValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair", "Map.Entry", "AbstractMap.SimpleEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an instance of Map.Entry but different values."}, {"name": "testEquals_InstanceOfMapEntrySameValues", "primary_tested": ["Pair.equals(Object)"], "external_dependencies": {"modules": ["Pair", "Map.Entry", "AbstractMap.SimpleEntry"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the equals method with an instance of Map.Entry and same values."}]}, {"file_path": "src/test/java/net/hydromatic/morel/compile/Extents_unionTest.java", "testclass_name": "Extents_unionTest", "dependencies": ["package net.hydromatic.morel.compile;", "import com.google.common.collect.ImmutableMap;", "import com.google.common.collect.ImmutableRangeSet;", "import org.junit.jupiter.api.Test;", "import java.util.Arrays;", "import java.util.List;", "import java.util.Map;", "import static org.junit.jupiter.api.Assertions.assertEquals;"], "name": "Extents_unionTest", "description": "Unit tests for the union functionality of Extents class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "testUnionWithEmptyList", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with an empty list of maps."}, {"name": "testUnionWithSingleMap", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with a single map."}, {"name": "testUnionWithMultipleMaps", "primary_tested": ["Extents.union(List<Map<String, ImmutableRangeSet<Integer>>>)"], "external_dependencies": {"modules": ["Extents", "ImmutableMap", "ImmutableRangeSet", "Arrays"], "class_members": []}, "category": "unit", "fixtures_used": [], "description": "Tests the union functionality of Extents with multiple maps."}]}, {"file_path": "src/test/java/net/hydromatic/morel/util/Sat_variableTest.java", "testclass_name": "Sat_variableTest", "dependencies": ["package net.hydromatic.morel.util;", "import org.junit.jupiter.api.BeforeEach;", "import org.junit.jupiter.api.Test;", "import static org.junit.jupiter.api.Assertions.*;"], "name": "Sat_variableTest", "description": "Unit tests for the Sat.Variable class, focusing on variable creation, retrieval, and uniqueness.", "class_members": {"variables": [{"name": "sat", "type": "Sat"}]}, "fixtures": ["setUp"], "test_cases": [{"name": "testVariableCreation", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the creation of a Sat.Variable and verifies its properties."}, {"name": "testVariableRetrieval", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the retrieval of a Sat.Variable and verifies that the same instance is returned for the same name."}, {"name": "testVariableIdIncrement", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the increment of the id property for each new Sat.Variable created."}, {"name": "testVariableNameUniqueness", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueness of the name property for each new Sat.Variable created."}, {"name": "testVariableIdUniqueness", "primary_tested": ["Sat.variable(String)"], "external_dependencies": {"modules": ["Sat"], "class_members": [{"name": "sat", "type": "variable"}]}, "category": "unit", "fixtures_used": ["setUp"], "description": "Tests the uniqueness of the id property for each new Sat.Variable created."}]}]