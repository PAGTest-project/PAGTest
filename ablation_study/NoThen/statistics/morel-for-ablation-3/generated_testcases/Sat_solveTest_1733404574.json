[{"strategy": "generate", "code": "\npackage net.hydromatic.morel.util;\n\nimport com.google.common.collect.ImmutableMap;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Map;\n\nimport static org.hamcrest.CoreMatchers.notNullValue;\nimport static org.hamcrest.CoreMatchers.nullValue;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.is;\n\npublic class Sat_solveTest {\n    private Sat sat;\n\n    @BeforeEach\n    public void setUp() {\n        sat = new Sat();\n    }\n\n    @Test\n    public void testSolveWithValidSolution() {\n        final Variable x = sat.variable(\"x\");\n        final Variable y = sat.variable(\"y\");\n\n        // (x \u2228 y) \u2227 (\u00acx \u2228 y)\n        final Term clause0 = sat.or(x, y);\n        final Term clause1 = sat.or(sat.not(x), y);\n        final Term formula = sat.and(clause0, clause1);\n\n        final Map<Variable, Boolean> solution = sat.solve(formula);\n        assertThat(solution, notNullValue());\n        assertThat(solution, is(ImmutableMap.of(x, false, y, true)));\n    }\n\n    @Test\n    public void testSolveWithNoSolution() {\n        final Variable x = sat.variable(\"x\");\n        final Variable y = sat.variable(\"y\");\n\n        // (x \u2228 y) \u2227 (\u00acx \u2228 \u00acy) \u2227 (\u00acx \u2228 y) \u2227 (x \u2228 \u00acy)\n        final Term clause0 = sat.or(x, y);\n        final Term clause1 = sat.or(sat.not(x), sat.not(y));\n        final Term clause2 = sat.or(sat.not(x), y);\n        final Term clause3 = sat.or(x, sat.not(y));\n        final Term formula = sat.and(clause0, clause1, clause2, clause3);\n\n        final Map<Variable, Boolean> solution = sat.solve(formula);\n        assertThat(solution, nullValue());\n    }\n\n    @Test\n    public void testSolveWithSingleVariable() {\n        final Variable x = sat.variable(\"x\");\n\n        // x\n        final Term formula = x;\n\n        final Map<Variable, Boolean> solution = sat.solve(formula);\n        assertThat(solution, notNullValue());\n        assertThat(solution, is(ImmutableMap.of(x, true)));\n    }\n\n    @Test\n    public void testSolveWithComplexFormula() {\n        final Variable x = sat.variable(\"x\");\n        final Variable y = sat.variable(\"y\");\n        final Variable z = sat.variable(\"z\");\n\n        // (x \u2228 y \u2228 z) \u2227 (\u00acx \u2228 \u00acy \u2228 z) \u2227 (\u00acx \u2228 y \u2228 \u00acz)\n        final Term clause0 = sat.or(x, y, z);\n        final Term clause1 = sat.or(sat.not(x), sat.not(y), z);\n        final Term clause2 = sat.or(sat.not(x), y, sat.not(z));\n        final Term formula = sat.and(clause0, clause1, clause2);\n\n        final Map<Variable, Boolean> solution = sat.solve(formula);\n        assertThat(solution, notNullValue());\n        assertThat(solution, is(ImmutableMap.of(x, false, y, true, z, true)));\n    }\n}\n"}]