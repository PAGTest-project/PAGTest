[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.ast;\n\nimport net.hydromatic.morel.compile.Environment;\nimport net.hydromatic.morel.type.TypeSystem;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.math.BigDecimal;\n\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.mockito.Mockito.when;\n\nclass FromBuilder_skipTest {\n\n    private FromBuilder fromBuilder;\n    private Core.Exp count;\n\n    @BeforeEach\n    void setUp() {\n        TypeSystem typeSystem = Mockito.mock(TypeSystem.class);\n        Environment env = Mockito.mock(Environment.class);\n        fromBuilder = new FromBuilder(typeSystem, env);\n        count = Mockito.mock(Core.Exp.class);\n    }\n\n    @Test\n    void testSkipZero() {\n        // Given\n        when(count.op).thenReturn(Core.Op.INT_LITERAL);\n        Core.Literal literal = Mockito.mock(Core.Literal.class);\n        when(count.unwrap(Core.Literal.class)).thenReturn(literal);\n        when(literal.value).thenReturn(BigDecimal.ZERO);\n\n        // When\n        FromBuilder result = fromBuilder.skip(count);\n\n        // Then\n        assertSame(fromBuilder, result);\n    }\n\n    @Test\n    void testSkipNonZero() {\n        // Given\n        when(count.op).thenReturn(Core.Op.INT_LITERAL);\n        Core.Literal literal = Mockito.mock(Core.Literal.class);\n        when(count.unwrap(Core.Literal.class)).thenReturn(literal);\n        when(literal.value).thenReturn(BigDecimal.ONE);\n\n        // When\n        FromBuilder result = fromBuilder.skip(count);\n\n        // Then\n        assertSame(fromBuilder, result);\n    }\n}\n"}]