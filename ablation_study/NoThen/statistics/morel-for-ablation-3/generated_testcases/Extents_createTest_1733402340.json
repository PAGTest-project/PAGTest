[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.compile;\n\nimport net.hydromatic.morel.ast.Core;\nimport net.hydromatic.morel.ast.CoreBuilder;\nimport net.hydromatic.morel.type.TypeSystem;\nimport net.hydromatic.morel.util.ImmutablePairList;\nimport net.hydromatic.morel.util.Pair;\nimport net.hydromatic.morel.util.PairList;\nimport com.google.common.collect.ImmutableRangeSet;\nimport com.google.common.collect.Range;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Extents_createTest {\n\n    @Test\n    public void testCreate_AllPathsCovered() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = CoreBuilder.core.pat();\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        Iterable<? extends Core.FromStep> followingSteps = new ArrayList<>();\n        PairList<Core.IdPat, Core.Exp> idPats = PairList.of();\n\n        // When\n        Extents.Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertTrue(result.extentExp.equals(CoreBuilder.core.extent(typeSystem, pat.type, ImmutableRangeSet.of(Range.all()))));\n        assertTrue(result.satisfiedFilters.isEmpty());\n        assertTrue(result.remainingFilters.isEmpty());\n    }\n\n    @Test\n    public void testCreate_WithFollowingSteps() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = CoreBuilder.core.pat();\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        ArrayList<Core.FromStep> followingSteps = new ArrayList<>();\n        followingSteps.add(new Core.Where(CoreBuilder.core.boolLiteral(true)));\n        PairList<Core.IdPat, Core.Exp> idPats = PairList.of();\n\n        // When\n        Extents.Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertTrue(result.extentExp.equals(CoreBuilder.core.extent(typeSystem, pat.type, ImmutableRangeSet.of(Range.all()))));\n        assertTrue(result.satisfiedFilters.isEmpty());\n        assertTrue(result.remainingFilters.isEmpty());\n    }\n\n    @Test\n    public void testCreate_WithBoundPats() {\n        // Given\n        TypeSystem typeSystem = new TypeSystem();\n        Core.Pat pat = CoreBuilder.core.pat();\n        SortedMap<Core.NamedPat, Core.Exp> boundPats = new TreeMap<>();\n        boundPats.put(CoreBuilder.core.namedPat(\"test\"), CoreBuilder.core.boolLiteral(true));\n        Iterable<? extends Core.FromStep> followingSteps = new ArrayList<>();\n        PairList<Core.IdPat, Core.Exp> idPats = PairList.of();\n\n        // When\n        Extents.Analysis result = Extents.create(typeSystem, pat, boundPats, followingSteps, idPats);\n\n        // Then\n        assertTrue(result.extentExp.equals(CoreBuilder.core.extent(typeSystem, pat.type, ImmutableRangeSet.of(Range.all()))));\n        assertTrue(result.satisfiedFilters.isEmpty());\n        assertTrue(result.remainingFilters.isEmpty());\n    }\n}\n"}]