[{"strategy": "generate", "code": "\npackage net.hydromatic.morel;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport net.hydromatic.morel.foreign.ForeignValue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class Shell_parseTest {\n\n    private Shell shell;\n\n    @BeforeEach\n    public void setUp() {\n        shell = new Shell(Shell.ConfigImpl.DEFAULT, null);\n    }\n\n    @Test\n    public void testParseBannerFalse() {\n        List<String> argList = ImmutableList.of(\"--banner=false\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        assertEquals(false, ((Shell.ConfigImpl) config).banner);\n    }\n\n    @Test\n    public void testParseTerminalDumb() {\n        List<String> argList = ImmutableList.of(\"--terminal=dumb\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        assertEquals(true, ((Shell.ConfigImpl) config).dumb);\n    }\n\n    @Test\n    public void testParseEcho() {\n        List<String> argList = ImmutableList.of(\"--echo\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        assertEquals(true, ((Shell.ConfigImpl) config).echo);\n    }\n\n    @Test\n    public void testParseHelp() {\n        List<String> argList = ImmutableList.of(\"--help\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        assertEquals(true, ((Shell.ConfigImpl) config).help);\n    }\n\n    @Test\n    public void testParseSystemFalse() {\n        List<String> argList = ImmutableList.of(\"--system=false\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        assertEquals(false, ((Shell.ConfigImpl) config).system);\n    }\n\n    @Test\n    public void testParseForeign() {\n        List<String> argList = ImmutableList.of(\"--foreign=com.example.MyClass\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        // Assuming MyClass implements Map<String, DataSet>\n        // and foreignValues() returns a non-empty map\n        assertEquals(false, ((Shell.ConfigImpl) config).valueMap.isEmpty());\n    }\n\n    @Test\n    public void testParseDirectory() {\n        List<String> argList = ImmutableList.of(\"--directory=/path/to/directory\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        assertEquals(new File(\"/path/to/directory\"), ((Shell.ConfigImpl) config).directory);\n    }\n\n    @Test\n    public void testParseMaxUseDepth() {\n        List<String> argList = ImmutableList.of(\"--maxUseDepth=10\");\n        Shell.Config config = Shell.parse(Shell.ConfigImpl.DEFAULT, argList);\n        assertEquals(10, ((Shell.ConfigImpl) config).maxUseDepth);\n    }\n}\n"}]