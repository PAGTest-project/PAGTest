[{"strategy": "retry", "code": "\npackage net.hydromatic.morel.type;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableRangeSet;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class RangeExtent_toStringTest {\n\n    @Test\n    public void testToStringUnbounded() {\n        Type mockType = new Type() {\n            @Override\n            public String toString() {\n                return \"MockType\";\n            }\n\n            @Override\n            public <R> R accept(TypeVisitor<R> visitor) {\n                return null; // Provide a default implementation\n            }\n\n            @Override\n            public Type copy(TypeSystem typeSystem, java.util.function.UnaryOperator<Type> operator) {\n                return this; // Provide a default implementation\n            }\n        };\n\n        RangeExtent rangeExtent = new RangeExtent(null, mockType, ImmutableMap.of());\n        assertEquals(\"MockType\", rangeExtent.toString());\n    }\n\n    @Test\n    public void testToStringBounded() {\n        Type mockType = new Type() {\n            @Override\n            public String toString() {\n                return \"MockType\";\n            }\n\n            @Override\n            public <R> R accept(TypeVisitor<R> visitor) {\n                return null; // Provide a default implementation\n            }\n\n            @Override\n            public Type copy(TypeSystem typeSystem, java.util.function.UnaryOperator<Type> operator) {\n                return this; // Provide a default implementation\n            }\n        };\n\n        ImmutableRangeSet<Integer> mockRangeSet = ImmutableRangeSet.of();\n        RangeExtent rangeExtent = new RangeExtent(null, mockType, ImmutableMap.of(\"path\", mockRangeSet));\n        assertEquals(\"MockType {path=[[]]}\", rangeExtent.toString());\n    }\n}\n"}]