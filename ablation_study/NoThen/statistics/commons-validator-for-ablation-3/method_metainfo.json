[{"uris": "src/example/org/apache/commons/validator/example/ValidateExample.java.ValidateExample.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(String[] args)", "original_string": "    public static void main(String[] args)\n        throws ValidatorException, IOException, SAXException {\n            \n        InputStream in = null;\n        ValidatorResources resources = null;\n        \n        try {\n        \n            // Create a new instance of a ValidatorResource, then get a stream\n            // handle on the XML file with the actions in it, and initialize the\n            // resources from it.  This would normally be done by a servlet\n            // run during JSP initialization or some other application-startup\n            // routine.\n            in = ValidateExample.class.getResourceAsStream(\"validator-example.xml\");\n            resources = new ValidatorResources(in);\n            \n        } finally {\n            // Make sure we close the input stream.\n            if (in != null) {\n                in.close();\n            }\n        }\n        \n        // Create a test bean to validate against.\n        ValidateBean bean = new ValidateBean();\n        \n        // Create a validator with the ValidateBean actions for the bean\n        // we're interested in.\n        Validator validator = new Validator(resources, \"ValidateBean\");\n        \n        // Tell the validator which bean to validate against.\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n        \n        ValidatorResults results = null;\n        \n        // Run the validation actions against the bean.  Since all of the properties\n        // are null, we expect them all to error out except for street2, which has\n        // no validations (it's an optional property)\n        \n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now set all the required properties, but make the age a non-integer.\n        // You'll notice that age will pass the required test, but fail the int\n        // test.\n        bean.setLastName(\"Tester\");\n        bean.setFirstName(\"John\");\n        bean.setStreet1(\"1 Test Street\");\n        bean.setCity(\"Testville\");\n        bean.setState(\"TE\");\n        bean.setPostalCode(\"12345\");\n        bean.setAge(\"Too Old\");\n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now only report failed fields\n        validator.setOnlyReturnErrors(true);\n        results = validator.validate();\n        printResults(bean, results, resources);\n        \n        // Now everything should pass.\n        validator.setOnlyReturnErrors(false);\n        bean.setAge(\"123\");\n        results = validator.validate();\n        printResults(bean, results, resources);\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateExample.java", "class_name": "ValidateExample", "class_uri": "src/example/org/apache/commons/validator/example/ValidateExample.java.ValidateExample", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nThis is the main method that will be called to initialize the Validator, create some sample beans, and\nrun the Validator against them.\n"}, {"uris": "src/example/org/apache/commons/validator/example/ValidateExample.java.ValidateExample.[void]printResults(ValidateBean,ValidatorResults,ValidatorResources)", "name": "printResults", "arg_nums": 3, "params": [{"name": "bean", "type": "ValidateBean"}, {"name": "results", "type": "ValidatorResults"}, {"name": "resources", "type": "ValidatorResources"}], "return_type": "void", "signature": "public static void printResults(\n        ValidateBean bean,\n        ValidatorResults results,\n        ValidatorResources resources)", "original_string": "    public static void printResults(\n        ValidateBean bean,\n        ValidatorResults results,\n        ValidatorResources resources) {\n            \n        boolean success = true;\n\n        // Start by getting the form for the current locale and Bean.\n        Form form = resources.getForm(Locale.getDefault(), \"ValidateBean\");\n\n        System.out.println(\"\\n\\nValidating:\");\n        System.out.println(bean);\n\n        // Iterate over each of the properties of the Bean which had messages.\n        Iterator<String> propertyNames = results.getPropertyNames().iterator();\n        while (propertyNames.hasNext()) {\n            String propertyName = propertyNames.next();\n\n            // Get the Field associated with that property in the Form\n            Field field = form.getField(propertyName);\n\n            // Look up the formatted name of the field from the Field arg0\n            String prettyFieldName = apps.getString(field.getArg(0).getKey());\n\n            // Get the result of validating the property.\n            ValidatorResult result = results.getValidatorResult(propertyName);\n\n            // Get all the actions run against the property, and iterate over their names.\n            Iterator<String> keys = result.getActions();\n            while (keys.hasNext()) {\n                String actName = keys.next();\n\n                // Get the Action for that name.\n                ValidatorAction action = resources.getValidatorAction(actName);\n\n                // If the result is valid, print PASSED, otherwise print FAILED\n                System.out.println(\n                    propertyName\n                        + \"[\"\n                        + actName\n                        + \"] (\"\n                        + (result.isValid(actName) ? \"PASSED\" : \"FAILED\")\n                        + \")\");\n\n                //If the result failed, format the Action's message against the formatted field name\n                if (!result.isValid(actName)) {\n                    success = false;\n                    String message = apps.getString(action.getMsg());\n                    Object[] args = { prettyFieldName };\n                    System.out.println(\n                        \"     Error message will be: \"\n                            + MessageFormat.format(message, args));\n\n                }\n            }\n        }\n        if (success) {\n            System.out.println(\"FORM VALIDATION PASSED\");\n        } else {\n            System.out.println(\"FORM VALIDATION FAILED\");\n        }\n\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateExample.java", "class_name": "ValidateExample", "class_uri": "src/example/org/apache/commons/validator/example/ValidateExample.java.ValidateExample", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nDumps out the Bean in question and the results of validating it.\n"}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setLastName(String)", "name": "setLastName", "arg_nums": 1, "params": [{"name": "lastName", "type": "String"}], "return_type": "void", "signature": "public void setLastName(String lastName)", "original_string": "    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setFirstName(String)", "name": "setFirstName", "arg_nums": 1, "params": [{"name": "firstName", "type": "String"}], "return_type": "void", "signature": "public void setFirstName(String firstName)", "original_string": "    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setStreet1(String)", "name": "setStreet1", "arg_nums": 1, "params": [{"name": "street1", "type": "String"}], "return_type": "void", "signature": "public void setStreet1(String street1)", "original_string": "    public void setStreet1(String street1) {\n        this.street1 = street1;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setStreet2(String)", "name": "setStreet2", "arg_nums": 1, "params": [{"name": "street2", "type": "String"}], "return_type": "void", "signature": "public void setStreet2(String street2)", "original_string": "    public void setStreet2(String street2) {\n        this.street2 = street2;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setCity(String)", "name": "setCity", "arg_nums": 1, "params": [{"name": "city", "type": "String"}], "return_type": "void", "signature": "public void setCity(String city)", "original_string": "    public void setCity(String city) {\n        this.city = city;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setState(String)", "name": "setState", "arg_nums": 1, "params": [{"name": "state", "type": "String"}], "return_type": "void", "signature": "public void setState(String state)", "original_string": "    public void setState(String state) {\n        this.state = state;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setPostalCode(String)", "name": "setPostalCode", "arg_nums": 1, "params": [{"name": "postalCode", "type": "String"}], "return_type": "void", "signature": "public void setPostalCode(String postalCode)", "original_string": "    public void setPostalCode(String postalCode) {\n        this.postalCode = postalCode;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[void]setAge(String)", "name": "setAge", "arg_nums": 1, "params": [{"name": "age", "type": "String"}], "return_type": "void", "signature": "public void setAge(String age)", "original_string": "    public void setAge(String age) {\n        this.age = age;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getLastName()", "name": "getLastName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLastName()", "original_string": "    public String getLastName() {\n        return this.lastName;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getFirstName()", "name": "getFirstName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getFirstName()", "original_string": "    public String getFirstName() {\n        return this.firstName;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getStreet1()", "name": "getStreet1", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getStreet1()", "original_string": "    public String getStreet1() {\n        return this.street1;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getStreet2()", "name": "getStreet2", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getStreet2()", "original_string": "    public String getStreet2() {\n        return this.street2;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getCity()", "name": "getCity", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getCity()", "original_string": "    public String getCity() {\n        return this.city;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getState()", "name": "getState", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getState()", "original_string": "    public String getState() {\n        return this.state;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getPostalCode()", "name": "getPostalCode", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getPostalCode()", "original_string": "    public String getPostalCode() {\n        return this.postalCode;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]getAge()", "name": "getAge", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getAge()", "original_string": "    public String getAge() {\n        return this.age;\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String toString()", "original_string": "    public String toString() {\n        return \"{lastname=\"\n            + this.lastName\n            + \", firstname=\"\n            + this.firstName\n            + \", street1=\"\n            + this.street1\n            + \",\\n street2=\"\n            + this.street2\n            + \", \"\n            + \"city=\"\n            + this.city\n            + \", state=\"\n            + this.state\n            + \",\\n postalcode=\"\n            + this.postalCode\n            + \", age=\"\n            + this.age\n            + \"}\";\n    }", "default_arguments": null, "file": "src/example/org/apache/commons/validator/example/ValidateBean.java", "class_name": "ValidateBean", "class_uri": "src/example/org/apache/commons/validator/example/ValidateBean.java.ValidateBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest.[Map<String, ?>]localeTest(TypeBean,Locale)", "name": "localeTest", "arg_nums": 2, "params": [{"name": "info", "type": "TypeBean"}, {"name": "locale", "type": "Locale"}], "return_type": "Map<String, ?>", "signature": "private Map<String, ?> localeTest(final TypeBean info, final Locale locale)", "original_string": "    private Map<String, ?> localeTest(final TypeBean info, final Locale locale) throws ValidatorException {\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, \"typeLocaleForm\");\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n        validator.setParameter(\"java.util.Locale\", locale);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final Map<String, ?> hResultValues = results.getResultValueMap();\n\n        assertTrue(hResultValues.get(\"byte\") instanceof Byte, () -> \"Expecting byte result to be an instance of Byte for locale: \" + locale);\n        assertTrue(hResultValues.get(\"short\") instanceof Short, () -> \"Expecting short result to be an instance of Short for locale: \" + locale);\n        assertTrue(hResultValues.get(\"integer\") instanceof Integer, () -> \"Expecting integer result to be an instance of Integer for locale: \" + locale);\n        assertTrue(hResultValues.get(\"long\") instanceof Long, () -> \"Expecting long result to be an instance of Long for locale: \" + locale);\n        assertTrue(hResultValues.get(\"float\") instanceof Float, () -> \"Expecting float result to be an instance of Float for locale: \" + locale);\n        assertTrue(hResultValues.get(\"double\") instanceof Double, () -> \"Expecting double result to be an instance of Double for locale: \" + locale);\n        assertTrue(hResultValues.get(\"date\") instanceof Date, () -> \"Expecting date result to be an instance of Date for locale: \" + locale);\n\n        for (final String key : hResultValues.keySet()) {\n            final Object value = hResultValues.get(key);\n\n            assertNotNull(value, () -> \"value ValidatorResults.getResultValueMap() should not be null for locale: \" + locale);\n        }\n        return hResultValues;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java", "class_name": "GenericTypeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Map<String, ?>", "classes": []}, "docstring": "\nTests the locale.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"GenericTypeValidatorTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java", "class_name": "GenericTypeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-type.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java", "class_name": "GenericTypeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorTest.java.GenericTypeValidatorTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"DateTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DateTest.java", "class_name": "DateTest", "class_uri": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-numeric.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest.[void]valueTest(Object,boolean)", "name": "valueTest", "arg_nums": 2, "params": [{"name": "info", "type": "Object"}, {"name": "passed", "type": "boolean"}], "return_type": "void", "signature": "protected void valueTest(final Object info, final boolean passed)", "original_string": "    protected void valueTest(final Object info, final boolean passed) throws ValidatorException {\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n        validator.setParameter(Validator.LOCALE_PARAM, Locale.US);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult result = results.getValidatorResult(\"value\");\n\n        assertNotNull(result, () -> ACTION + \" value ValidatorResult should not be null.\");\n        assertTrue(result.containsAction(ACTION), () -> ACTION + \" value ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(passed ? result.isValid(ACTION) : !result.isValid(ACTION),\n                () -> ACTION + \" value ValidatorResult for the '\" + ACTION + \"' action should have \" + (passed ? \"passed\" : \"failed\") + \".\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DateTest.java", "class_name": "DateTest", "class_uri": "src/test/java/org/apache/commons/validator/DateTest.java.DateTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nUtlity class to run a test on a value.\n\n@param info   Value to run test on.\n@param passed Whether or not the test is expected to pass.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ResultPair.java.ResultPair.[]ResultPair(String,boolean)", "name": "ResultPair", "arg_nums": 2, "params": [{"name": "item", "type": "String"}, {"name": "valid", "type": "boolean"}], "return_type": "", "signature": "public ResultPair(final String item, final boolean valid)", "original_string": "    public ResultPair(final String item, final boolean valid) {\n        this.item = item;\n        this.valid = valid; // Whether the individual part of URL is valid.\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ResultPair.java", "class_name": "ResultPair", "class_uri": "src/test/java/org/apache/commons/validator/ResultPair.java.ResultPair", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        loadResources(\"ExceptionTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExceptionTest.java", "class_name": "ExceptionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-exception.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest.[void]testCheckedException()", "name": "testCheckedException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Ignore\n    public void testCheckedException()", "original_string": "    @Ignore\n    public void testCheckedException() {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"CHECKED\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n\n        // Get results of the validation which can throw ValidatorException\n\n        // Tests Validator 1.x exception handling\n        try {\n            validator.validate();\n        } catch (final ValidatorException expected) {\n            fail(\"Checked exceptions are not wrapped in ValidatorException in Validator 1.x.\");\n        } catch (final Exception e) {\n            assertTrue(\"CHECKED-EXCEPTION\".equals(e.getMessage()));\n        }\n\n        // This will be true in Validator 2.0\n//        try {\n//            validator.validate();\n//            fail(\"ValidatorException should occur here!\");\n//        } catch (ValidatorException expected) {\n//            assertTrue(\"CHECKED-EXCEPTION\".equals(expected.getMessage()));\n//        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExceptionTest.java", "class_name": "ExceptionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest", "attributes": {"modifiers": "@Ignore\n    public", "marker_annotations": ["@Ignore"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests handling of checked exceptions - should become ValidatorExceptions.\n\nN.B. This test has been removed (renamed) as it currently serves no purpose. If/When exception handling is changed in Validator 2.0 it can be\nreconsidered then.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest.[void]testRuntimeException()", "name": "testRuntimeException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Ignore\n    public void testRuntimeException()", "original_string": "    @Ignore\n    public void testRuntimeException() throws ValidatorException {\n        // Create bean to run test on.\n        final ValueBean info = new ValueBean();\n        info.setValue(\"RUNTIME\");\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n\n        // Get results of the validation which can throw ValidatorException\n        try {\n            validator.validate();\n            // fail(\"RuntimeException should occur here!\");\n        } catch (final RuntimeException expected) {\n            fail(\"RuntimeExceptions should be treated as validation failures in Validator 1.x.\");\n            // This will be true in Validator 2.0\n            // assertTrue(\"RUNTIME-EXCEPTION\".equals(expected.getMessage()));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExceptionTest.java", "class_name": "ExceptionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExceptionTest.java.ExceptionTest", "attributes": {"modifiers": "@Ignore\n    public", "marker_annotations": ["@Ignore"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests handling of runtime exceptions.\n\nN.B. This test has been removed (renamed) as it currently serves no purpose. If/When exception handling is changed in Validator 2.0 it can be\nreconsidered then.\n"}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getByte()", "name": "getByte", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getByte()", "original_string": "    public String getByte() {\n        return sByte;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getCreditCard()", "name": "getCreditCard", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getCreditCard()", "original_string": "    public String getCreditCard() {\n        return sCreditCard;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getDate()", "name": "getDate", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getDate()", "original_string": "    public String getDate() {\n        return sDate;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getDouble()", "name": "getDouble", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getDouble()", "original_string": "    public String getDouble() {\n        return sDouble;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getFloat()", "name": "getFloat", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getFloat()", "original_string": "    public String getFloat() {\n        return sFloat;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getInteger()", "name": "getInteger", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getInteger()", "original_string": "    public String getInteger() {\n        return sInteger;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getLong()", "name": "getLong", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLong()", "original_string": "    public String getLong() {\n        return sLong;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[String]getShort()", "name": "getShort", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getShort()", "original_string": "    public String getShort() {\n        return sShort;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setByte(String)", "name": "setByte", "arg_nums": 1, "params": [{"name": "sByte", "type": "String"}], "return_type": "void", "signature": "public void setByte(final String sByte)", "original_string": "    public void setByte(final String sByte) {\n        this.sByte = sByte;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setCreditCard(String)", "name": "setCreditCard", "arg_nums": 1, "params": [{"name": "sCreditCard", "type": "String"}], "return_type": "void", "signature": "public void setCreditCard(final String sCreditCard)", "original_string": "    public void setCreditCard(final String sCreditCard) {\n        this.sCreditCard = sCreditCard;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setDate(String)", "name": "setDate", "arg_nums": 1, "params": [{"name": "sDate", "type": "String"}], "return_type": "void", "signature": "public void setDate(final String sDate)", "original_string": "    public void setDate(final String sDate) {\n        this.sDate = sDate;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setDouble(String)", "name": "setDouble", "arg_nums": 1, "params": [{"name": "sDouble", "type": "String"}], "return_type": "void", "signature": "public void setDouble(final String sDouble)", "original_string": "    public void setDouble(final String sDouble) {\n        this.sDouble = sDouble;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setFloat(String)", "name": "setFloat", "arg_nums": 1, "params": [{"name": "sFloat", "type": "String"}], "return_type": "void", "signature": "public void setFloat(final String sFloat)", "original_string": "    public void setFloat(final String sFloat) {\n        this.sFloat = sFloat;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setInteger(String)", "name": "setInteger", "arg_nums": 1, "params": [{"name": "sInteger", "type": "String"}], "return_type": "void", "signature": "public void setInteger(final String sInteger)", "original_string": "    public void setInteger(final String sInteger) {\n        this.sInteger = sInteger;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setLong(String)", "name": "setLong", "arg_nums": 1, "params": [{"name": "sLong", "type": "String"}], "return_type": "void", "signature": "public void setLong(final String sLong)", "original_string": "    public void setLong(final String sLong) {\n        this.sLong = sLong;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean.[void]setShort(String)", "name": "setShort", "arg_nums": 1, "params": [{"name": "sShort", "type": "String"}], "return_type": "void", "signature": "public void setShort(final String sShort)", "original_string": "    public void setShort(final String sShort) {\n        this.sShort = sShort;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/TypeBean.java", "class_name": "TypeBean", "class_uri": "src/test/java/org/apache/commons/validator/TypeBean.java.TypeBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest.[]ByteTest()", "name": "ByteTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ByteTest()", "original_string": "    public ByteTest() {\n        action = \"byte\";\n        formKey = \"byteForm\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ByteTest.java", "class_name": "ByteTest", "class_uri": "src/test/java/org/apache/commons/validator/ByteTest.java.ByteTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]checkForm(Locale,String,String)", "name": "checkForm", "arg_nums": 3, "params": [{"name": "locale", "type": "Locale"}, {"name": "formKey", "type": "String"}, {"name": "expectedVarValue", "type": "String"}], "return_type": "void", "signature": "private void checkForm(final Locale locale, final String formKey, final String expectedVarValue)", "original_string": "    private void checkForm(final Locale locale, final String formKey, final String expectedVarValue) {\n\n        // Retrieve the Form\n        final Form testForm = resources.getForm(locale, formKey);\n        assertNotNull(testForm, \"Form '\" + formKey + \"' null for locale \" + locale);\n\n        // Validate the expected Form is retrieved by checking the \"localeVar\"\n        // value of the field.\n        final Field testField = testForm.getField(\"testProperty\");\n        assertEquals(expectedVarValue, testField.getVarValue(\"localeVar\"), \"Incorrect Form '\" + formKey + \"' for locale '\" + locale + \"'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]checkFormNotFound(Locale,String)", "name": "checkFormNotFound", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "formKey", "type": "String"}], "return_type": "void", "signature": "private void checkFormNotFound(final Locale locale, final String formKey)", "original_string": "    private void checkFormNotFound(final Locale locale, final String formKey) {\n\n        // Retrieve the Form\n        final Form testForm = resources.getForm(locale, formKey);\n        assertNull(testForm, \"Form '\" + formKey + \"' not null for locale \" + locale);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        final InputStream[] streams = { this.getClass().getResourceAsStream(\"RetrieveFormTest-config.xml\") };\n\n        resources = new ValidatorResources(streams);\n\n        for (final InputStream stream : streams) {\n            stream.close();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java", "class_name": "RetrieveFormTest", "class_uri": "src/test/java/org/apache/commons/validator/RetrieveFormTest.java.RetrieveFormTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from multiple xml files.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[Date]formatDate(Object,Field)", "name": "formatDate", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Date", "signature": "public static Date formatDate(final Object bean, final Field field)", "original_string": "    public static Date formatDate(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n        Date date = null;\n\n        try {\n            final DateFormat formatter = DateFormat.getDateInstance(DateFormat.SHORT, Locale.US);\n\n            formatter.setLenient(false);\n\n            date = formatter.parse(value);\n        } catch (final ParseException e) {\n            System.out.println(\"ValidatorTest.formatDate() - \" + e.getMessage());\n        }\n\n        return date;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nFormats a {@code String} to a {@code Date}. The {@code Validator} will interpret a {@code null} as validation having failed.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[boolean]isCapLetter(Object,Field,List<String>)", "name": "isCapLetter", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "l", "type": "List<String>"}], "return_type": "boolean", "signature": "public static boolean isCapLetter(final Object bean, final Field field, final List<String> l)", "original_string": "    public static boolean isCapLetter(final Object bean, final Field field, final List<String> l) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        if (value == null || value.length() != 1) {\n            l.add(\"Error\");\n            return false;\n        }\n        if (value.charAt(0) >= 'A' && value.charAt(0) <= 'Z') {\n            return true;\n        }\n        l.add(\"Error\");\n        return false;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field is one upper case letter between 'A' and 'Z'.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest.[ValidatorResources]setupDateResources(String,String)", "name": "setupDateResources", "arg_nums": 2, "params": [{"name": "property", "type": "String"}, {"name": "action", "type": "String"}], "return_type": "ValidatorResources", "signature": "private ValidatorResources setupDateResources(final String property, final String action)", "original_string": "    private ValidatorResources setupDateResources(final String property, final String action) {\n\n        final ValidatorResources resources = new ValidatorResources();\n\n        final ValidatorAction va = new ValidatorAction();\n        va.setName(action);\n        va.setClassname(\"org.apache.commons.validator.ValidatorTest\");\n        va.setMethod(\"formatDate\");\n        va.setMethodParams(\"java.lang.Object,org.apache.commons.validator.Field\");\n\n        final FormSet fs = new FormSet();\n        final Form form = new Form();\n        form.setName(\"testForm\");\n        final Field field = new Field();\n        field.setProperty(property);\n        field.setDepends(action);\n        form.addField(field);\n        fs.addForm(form);\n\n        resources.addValidatorAction(va);\n        resources.addFormSet(fs);\n        resources.process();\n\n        return resources;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorTest.java", "class_name": "ValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorTest.java.ValidatorTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ValidatorResources", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        final InputStream[] streams = { this.getClass().getResourceAsStream(\"MultipleConfigFilesTest-1-config.xml\"),\n                this.getClass().getResourceAsStream(\"MultipleConfigFilesTest-2-config.xml\") };\n\n        resources = new ValidatorResources(streams);\n\n        for (final InputStream stream : streams) {\n            stream.close();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java", "class_name": "MultipleConfigFilesTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleConfigFilesTest.java.MultipleConfigFilesTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from multiple xml files.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[Arg]createArg(String)", "name": "createArg", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "Arg", "signature": "private Arg createArg(final String key)", "original_string": "    private Arg createArg(final String key) {\n        final Arg arg = new Arg();\n        arg.setKey(key);\n        return arg;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Arg", "classes": []}, "docstring": "\nConvenience Method - create argument (no name or position specified)\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[Arg]createArg(String,int)", "name": "createArg", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "position", "type": "int"}], "return_type": "Arg", "signature": "private Arg createArg(final String key, final int position)", "original_string": "    private Arg createArg(final String key, final int position) {\n        final Arg arg = createArg(key);\n        arg.setPosition(position);\n        return arg;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Arg", "classes": []}, "docstring": "\nConvenience Method - create argument (no name, position specified)\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[Arg]createArg(String,String)", "name": "createArg", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "name", "type": "String"}], "return_type": "Arg", "signature": "private Arg createArg(final String key, final String name)", "original_string": "    private Arg createArg(final String key, final String name) {\n        final Arg arg = createArg(key);\n        arg.setName(name);\n        return arg;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Arg", "classes": []}, "docstring": "\nConvenience Method - create argument (name specified, no position)\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[Arg]createArg(String,String,int)", "name": "createArg", "arg_nums": 3, "params": [{"name": "key", "type": "String"}, {"name": "name", "type": "String"}, {"name": "position", "type": "int"}], "return_type": "Arg", "signature": "private Arg createArg(final String key, final String name, final int position)", "original_string": "    private Arg createArg(final String key, final String name, final int position) {\n        final Arg arg = createArg(key, name);\n        arg.setPosition(position);\n        return arg;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Arg", "classes": []}, "docstring": "\nConvenience Method - create argument (name & position specified)\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        field = new Field();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest setup\n"}, {"uris": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    public void tearDown()", "original_string": "    @AfterEach\n    public void tearDown() {\n        field = null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FieldTest.java", "class_name": "FieldTest", "class_uri": "src/test/java/org/apache/commons/validator/FieldTest.java.FieldTest", "attributes": {"modifiers": "@AfterEach\n    public", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTest clean up\n"}, {"uris": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java.CustomValidatorResourcesTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java", "class_name": "CustomValidatorResourcesTest", "class_uri": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java.CustomValidatorResourcesTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up.\n"}, {"uris": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java.CustomValidatorResourcesTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java", "class_name": "CustomValidatorResourcesTest", "class_uri": "src/test/java/org/apache/commons/validator/CustomValidatorResourcesTest.java.CustomValidatorResourcesTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTear Down\n"}, {"uris": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest.[]DoubleTest()", "name": "DoubleTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public DoubleTest()", "original_string": "    public DoubleTest() {\n        action = \"double\";\n        formKey = \"doubleForm\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/DoubleTest.java", "class_name": "DoubleTest", "class_uri": "src/test/java/org/apache/commons/validator/DoubleTest.java.DoubleTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[String]getFirstName()", "name": "getFirstName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getFirstName()", "original_string": "    public String getFirstName() {\n        return firstName;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/NameBean.java", "class_name": "NameBean", "class_uri": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[String]getLastName()", "name": "getLastName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLastName()", "original_string": "    public String getLastName() {\n        return lastName;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/NameBean.java", "class_name": "NameBean", "class_uri": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[String]getMiddleName()", "name": "getMiddleName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getMiddleName()", "original_string": "    public String getMiddleName() {\n        return middleName;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/NameBean.java", "class_name": "NameBean", "class_uri": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[void]setFirstName(String)", "name": "setFirstName", "arg_nums": 1, "params": [{"name": "firstName", "type": "String"}], "return_type": "void", "signature": "public void setFirstName(final String firstName)", "original_string": "    public void setFirstName(final String firstName) {\n        this.firstName = firstName;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/NameBean.java", "class_name": "NameBean", "class_uri": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[void]setLastName(String)", "name": "setLastName", "arg_nums": 1, "params": [{"name": "lastName", "type": "String"}], "return_type": "void", "signature": "public void setLastName(final String lastName)", "original_string": "    public void setLastName(final String lastName) {\n        this.lastName = lastName;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/NameBean.java", "class_name": "NameBean", "class_uri": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean.[void]setMiddleName(String)", "name": "setMiddleName", "arg_nums": 1, "params": [{"name": "middleName", "type": "String"}], "return_type": "void", "signature": "public void setMiddleName(final String middleName)", "original_string": "    public void setMiddleName(final String middleName) {\n        this.middleName = middleName;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/NameBean.java", "class_name": "NameBean", "class_uri": "src/test/java/org/apache/commons/validator/NameBean.java.NameBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ParameterValidatorImpl.java.ParameterValidatorImpl.[boolean]validateParameter(java.lang.Object,org.apache.commons.validator.Form,org.apache.commons.validator.Field,org.apache.commons.validator.Validator,org.apache.commons.validator.ValidatorAction,org.apache.commons.validator.ValidatorResults,java.util.Locale)", "name": "validateParameter", "arg_nums": 7, "params": [{"name": "bean", "type": "java.lang.Object"}, {"name": "form", "type": "org.apache.commons.validator.Form"}, {"name": "field", "type": "org.apache.commons.validator.Field"}, {"name": "validator", "type": "org.apache.commons.validator.Validator"}, {"name": "action", "type": "org.apache.commons.validator.ValidatorAction"}, {"name": "results", "type": "org.apache.commons.validator.ValidatorResults"}, {"name": "locale", "type": "java.util.Locale"}], "return_type": "boolean", "signature": "public static boolean validateParameter(final java.lang.Object bean, final org.apache.commons.validator.Form form,\n            final org.apache.commons.validator.Field field, final org.apache.commons.validator.Validator validator,\n            final org.apache.commons.validator.ValidatorAction action, final org.apache.commons.validator.ValidatorResults results,\n            final java.util.Locale locale)", "original_string": "    public static boolean validateParameter(final java.lang.Object bean, final org.apache.commons.validator.Form form,\n            final org.apache.commons.validator.Field field, final org.apache.commons.validator.Validator validator,\n            final org.apache.commons.validator.ValidatorAction action, final org.apache.commons.validator.ValidatorResults results,\n            final java.util.Locale locale) throws Exception {\n\n        return true;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ParameterValidatorImpl.java", "class_name": "ParameterValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/ParameterValidatorImpl.java.ParameterValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidatorParameter is valid.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        loadResources(\"EmailTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-regexp.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailFromPerl()", "name": "testEmailFromPerl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Ignore\n    public void testEmailFromPerl()", "original_string": "    @Ignore\n    public void testEmailFromPerl() throws ValidatorException {\n        final ValueBean info = new ValueBean();\n        for (final ResultPair element : testEmailFromPerl) {\n            info.setValue(element.item);\n            valueTest(info, element.valid);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Ignore\n    public", "marker_annotations": ["@Ignore"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWrite this test based on perl Mail::RFC822::Address which takes its example email address directly from RFC822\n\n@throws ValidatorException\n\n                           FIXME This test fails so disable it with a leading _ for 1.1.4 release. The real solution is to fix the email parsing.\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]testEmailUserName()", "name": "testEmailUserName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Ignore\n    public void testEmailUserName()", "original_string": "    @Ignore\n    public void testEmailUserName() throws ValidatorException {\n        final ValueBean info = new ValueBean();\n        info.setValue(\"joe1blow@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"joe$blow@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"joe-@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"joe_@apache.org\");\n        valueTest(info, true);\n\n        // UnQuoted Special characters are invalid\n\n        info.setValue(\"joe.@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe+@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe!@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe*@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe'@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe(@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe)@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe,@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe%45@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe;@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe?@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe&@apache.org\");\n        valueTest(info, false);\n        info.setValue(\"joe=@apache.org\");\n        valueTest(info, false);\n\n        // Quoted Special characters are valid\n        info.setValue(\"\\\"joe.\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe+\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe!\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe*\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe'\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe(\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe)\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe,\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe%45\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe;\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe?\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe&\\\"@apache.org\");\n        valueTest(info, true);\n        info.setValue(\"\\\"joe=\\\"@apache.org\");\n        valueTest(info, true);\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "@Ignore\n    public", "marker_annotations": ["@Ignore"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nWrite this test according to parts of RFC, as opposed to the type of character that is being tested.\n\n<p>\n<b>FIXME</b>: This test fails so disable it with a leading _ for 1.1.4 release. The real solution is to fix the email parsing.\n\n@throws ValidatorException\n"}, {"uris": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest.[void]valueTest(ValueBean,boolean)", "name": "valueTest", "arg_nums": 2, "params": [{"name": "info", "type": "ValueBean"}, {"name": "passed", "type": "boolean"}], "return_type": "void", "signature": "private void valueTest(final ValueBean info, final boolean passed)", "original_string": "    private void valueTest(final ValueBean info, final boolean passed) throws ValidatorException {\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult result = results.getValidatorResult(\"value\");\n\n        assertNotNull(result, () -> ACTION + \" value ValidatorResult should not be null.\");\n        assertTrue(result.containsAction(ACTION), () -> \"Value \" + info.getValue() + \" ValidatorResult should contain the '\" + ACTION + \"' action.\");\n        assertTrue(passed ? result.isValid(ACTION) : !result.isValid(ACTION),\n                () -> \"Value \" + info.getValue() + \"ValidatorResult for the '\" + ACTION + \"' action should have \" + (passed ? \"passed\" : \"failed\") + \".\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/EmailTest.java", "class_name": "EmailTest", "class_uri": "src/test/java/org/apache/commons/validator/EmailTest.java.EmailTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nUtlity class to run a test on a value.\n\n@param info   Value to run test on.\n@param passed Whether or not the test is expected to pass.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest.[]ShortTest()", "name": "ShortTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ShortTest()", "original_string": "    public ShortTest() {\n        formKey = \"shortForm\";\n        action = \"short\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ShortTest.java", "class_name": "ShortTest", "class_uri": "src/test/java/org/apache/commons/validator/ShortTest.java.ShortTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/AbstractCommonTest.java.AbstractCommonTest.[void]loadResources(String)", "name": "loadResources", "arg_nums": 1, "params": [{"name": "file", "type": "String"}], "return_type": "void", "signature": "protected void loadResources(final String file)", "original_string": "    protected void loadResources(final String file) throws IOException, SAXException {\n        // Load resources\n        try (InputStream in = this.getClass().getResourceAsStream(file)) {\n            resources = new ValidatorResources(in);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/AbstractCommonTest.java", "class_name": "AbstractCommonTest", "class_uri": "src/test/java/org/apache/commons/validator/AbstractCommonTest.java.AbstractCommonTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-numeric.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/VarTest.java.VarTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"VarTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/VarTest.java", "class_name": "VarTest", "class_uri": "src/test/java/org/apache/commons/validator/VarTest.java.VarTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-multipletest.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/VarTest.java.VarTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/VarTest.java", "class_name": "VarTest", "class_uri": "src/test/java/org/apache/commons/validator/VarTest.java.VarTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Byte]validateByte(Object,Field)", "name": "validateByte", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Byte", "signature": "public static Byte validateByte(final Object bean, final Field field)", "original_string": "    public static Byte validateByte(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatByte(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code byte}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code byte} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Byte]validateByte(Object,Field,Locale)", "name": "validateByte", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "locale", "type": "Locale"}], "return_type": "Byte", "signature": "public static Byte validateByte(final Object bean, final Field field, final Locale locale)", "original_string": "    public static Byte validateByte(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatByte(value, locale);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code byte}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code byte} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Date]validateDate(Object,Field)", "name": "validateDate", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Date", "signature": "public static Date validateDate(final Object bean, final Field field)", "original_string": "    public static Date validateDate(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n        final String datePattern = field.getVarValue(\"datePattern\");\n        final String datePatternStrict = field.getVarValue(\"datePatternStrict\");\n\n        Date result = null;\n        if (datePattern != null && !datePattern.isEmpty()) {\n            result = GenericTypeValidator.formatDate(value, datePattern, false);\n        } else if (datePatternStrict != null && !datePatternStrict.isEmpty()) {\n            result = GenericTypeValidator.formatDate(value, datePatternStrict, true);\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code date}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code date} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Date]validateDate(Object,Field,Locale)", "name": "validateDate", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "locale", "type": "Locale"}], "return_type": "Date", "signature": "public static Date validateDate(final Object bean, final Field field, final Locale locale)", "original_string": "    public static Date validateDate(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatDate(value, locale);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code date}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code date} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Double]validateDouble(Object,Field)", "name": "validateDouble", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Double", "signature": "public static Double validateDouble(final Object bean, final Field field)", "original_string": "    public static Double validateDouble(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatDouble(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code double}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code double} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Double]validateDouble(Object,Field,Locale)", "name": "validateDouble", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "locale", "type": "Locale"}], "return_type": "Double", "signature": "public static Double validateDouble(final Object bean, final Field field, final Locale locale)", "original_string": "    public static Double validateDouble(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatDouble(value, locale);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code double}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code double} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Float]validateFloat(Object,Field)", "name": "validateFloat", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Float", "signature": "public static Float validateFloat(final Object bean, final Field field)", "original_string": "    public static Float validateFloat(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatFloat(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code float}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code float} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Float]validateFloat(Object,Field,Locale)", "name": "validateFloat", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "locale", "type": "Locale"}], "return_type": "Float", "signature": "public static Float validateFloat(final Object bean, final Field field, final Locale locale)", "original_string": "    public static Float validateFloat(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatFloat(value, locale);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code float}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code float} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Integer]validateInt(Object,Field)", "name": "validateInt", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Integer", "signature": "public static Integer validateInt(final Object bean, final Field field)", "original_string": "    public static Integer validateInt(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatInt(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code int}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code int} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Integer]validateInt(Object,Field,Locale)", "name": "validateInt", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "locale", "type": "Locale"}], "return_type": "Integer", "signature": "public static Integer validateInt(final Object bean, final Field field, final Locale locale)", "original_string": "    public static Integer validateInt(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatInt(value, locale);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code int}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code int} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Long]validateLong(Object,Field)", "name": "validateLong", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Long", "signature": "public static Long validateLong(final Object bean, final Field field)", "original_string": "    public static Long validateLong(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatLong(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code long}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code long} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Long]validateLong(Object,Field,Locale)", "name": "validateLong", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "locale", "type": "Locale"}], "return_type": "Long", "signature": "public static Long validateLong(final Object bean, final Field field, final Locale locale)", "original_string": "    public static Long validateLong(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatLong(value, locale);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code long}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code long} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Short]validateShort(Object,Field)", "name": "validateShort", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "Short", "signature": "public static Short validateShort(final Object bean, final Field field)", "original_string": "    public static Short validateShort(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatShort(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code short}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code short} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl.[Short]validateShort(Object,Field,Locale)", "name": "validateShort", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "locale", "type": "Locale"}], "return_type": "Short", "signature": "public static Short validateShort(final Object bean, final Field field, final Locale locale)", "original_string": "    public static Short validateShort(final Object bean, final Field field, final Locale locale) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatShort(value, locale);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java", "class_name": "GenericTypeValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericTypeValidatorImpl.java.GenericTypeValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code short}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code short} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[boolean]incrementTestPartsIndex(int[],Object[])", "name": "incrementTestPartsIndex", "arg_nums": 2, "params": [{"name": "testPartsIndex", "type": "int[]"}, {"name": "testParts", "type": "Object[]"}], "return_type": "boolean", "signature": "static boolean incrementTestPartsIndex(final int[] testPartsIndex, final Object[] testParts)", "original_string": "    static boolean incrementTestPartsIndex(final int[] testPartsIndex, final Object[] testParts) {\n        boolean carry = true; // add 1 to lowest order part.\n        boolean maxIndex = true;\n        for (int testPartsIndexIndex = testPartsIndex.length - 1; testPartsIndexIndex >= 0; --testPartsIndexIndex) {\n            int index = testPartsIndex[testPartsIndexIndex];\n            final ResultPair[] part = (ResultPair[]) testParts[testPartsIndexIndex];\n            if (carry) {\n                if (index < part.length - 1) {\n                    index++;\n                    testPartsIndex[testPartsIndexIndex] = index;\n                    carry = false;\n                } else {\n                    testPartsIndex[testPartsIndexIndex] = 0;\n                    carry = true;\n                }\n            }\n            maxIndex &= index == part.length - 1;\n        }\n\n        return !maxIndex;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "argv", "type": "String[]"}], "return_type": "void", "signature": "public static void main(final String[] argv)", "original_string": "    public static void main(final String[] argv) {\n\n        final UrlTest fct = new UrlTest();\n        fct.setUp();\n        fct.testIsValid();\n        fct.testIsValidScheme();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nOnly used to debug the unit tests.\n\n@param argv\n"}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        for (int index = 0; index < testPartsIndex.length - 1; index++) {\n            testPartsIndex[index] = 0;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[void]testIsValid(Object[],int)", "name": "testIsValid", "arg_nums": 2, "params": [{"name": "testObjects", "type": "Object[]"}, {"name": "options", "type": "int"}], "return_type": "void", "signature": "void testIsValid(final Object[] testObjects, final int options)", "original_string": "    void testIsValid(final Object[] testObjects, final int options) {\n        final UrlValidator urlVal = new UrlValidator(null, options);\n        assertTrue(urlVal.isValid(\"http://www.google.com\"));\n        assertTrue(urlVal.isValid(\"http://www.google.com/\"));\n        int statusPerLine = 60;\n        int printed = 0;\n        if (printIndex) {\n            statusPerLine = 6;\n        }\n        do {\n            final StringBuilder testBuffer = new StringBuilder();\n            boolean expected = true;\n            for (int testPartsIndexIndex = 0; testPartsIndexIndex < testPartsIndex.length; ++testPartsIndexIndex) {\n                final int index = testPartsIndex[testPartsIndexIndex];\n                final ResultPair[] part = (ResultPair[]) testObjects[testPartsIndexIndex];\n                testBuffer.append(part[index].item);\n                expected &= part[index].valid;\n            }\n            final String url = testBuffer.toString();\n            final boolean result = urlVal.isValid(url);\n            assertEquals(expected, result, url);\n            if (printStatus) {\n                if (printIndex) {\n                    System.out.print(testPartsIndextoString());\n                } else if (result == expected) {\n                    System.out.print('.');\n                } else {\n                    System.out.print('X');\n                }\n                printed++;\n                if (printed == statusPerLine) {\n                    System.out.println();\n                    printed = 0;\n                }\n            }\n        } while (incrementTestPartsIndex(testPartsIndex, testObjects));\n        if (printStatus) {\n            System.out.println();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCreate set of tests by taking the testUrlXXX arrays and running through all possible permutations of their combinations.\n\n@param testObjects Used to create a url.\n"}, {"uris": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest.[String]testPartsIndextoString()", "name": "testPartsIndextoString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String testPartsIndextoString()", "original_string": "    private String testPartsIndextoString() {\n        final StringBuilder carryMsg = new StringBuilder(\"{\");\n        for (int testPartsIndexIndex = 0; testPartsIndexIndex < testPartsIndex.length; ++testPartsIndexIndex) {\n            carryMsg.append(testPartsIndex[testPartsIndexIndex]);\n            if (testPartsIndexIndex < testPartsIndex.length - 1) {\n                carryMsg.append(',');\n            } else {\n                carryMsg.append('}');\n            }\n        }\n        return carryMsg.toString();\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/UrlTest.java", "class_name": "UrlTest", "class_uri": "src/test/java/org/apache/commons/validator/UrlTest.java.UrlTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]isStringOrNull(Object)", "name": "isStringOrNull", "arg_nums": 1, "params": [{"name": "o", "type": "Object"}], "return_type": "boolean", "signature": "private static boolean isStringOrNull(final Object o)", "original_string": "    private static boolean isStringOrNull(final Object o) {\n        if (o == null) {\n            return true; // TODO this condition is not exercised by any tests currently\n        }\n        return o instanceof String;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateByte(Object,Field)", "name": "validateByte", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateByte(final Object bean, final Field field)", "original_string": "    public static boolean validateByte(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isByte(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code byte}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code byte} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateDouble(Object,Field)", "name": "validateDouble", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateDouble(final Object bean, final Field field)", "original_string": "    public static boolean validateDouble(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isDouble(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code double}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code double} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateEmail(Object,Field)", "name": "validateEmail", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateEmail(final Object bean, final Field field)", "original_string": "    public static boolean validateEmail(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isEmail(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field is an e-mail address.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field is an e-mail address {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateFloat(Object,Field)", "name": "validateFloat", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateFloat(final Object bean, final Field field)", "original_string": "    public static boolean validateFloat(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isFloat(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code float}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code float} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateInt(Object,Field)", "name": "validateInt", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateInt(final Object bean, final Field field)", "original_string": "    public static boolean validateInt(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isInt(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code int}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code int} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateLong(Object,Field)", "name": "validateLong", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateLong(final Object bean, final Field field)", "original_string": "    public static boolean validateLong(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isLong(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code long}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code long} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validatePositive(Object,Field)", "name": "validatePositive", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validatePositive(final Object bean, final Field field)", "original_string": "    public static boolean validatePositive(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericTypeValidator.formatInt(value).intValue() > 0;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if field is positive assuming it is an integer\n\n@param bean  The value validation is being performed on.\n@param field Description of the field to be evaluated\n@return boolean If the integer field is greater than zero, returns true, otherwise returns false.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateRaiseException(Object,Field)", "name": "validateRaiseException", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateRaiseException(final Object bean, final Field field)", "original_string": "    public static boolean validateRaiseException(final Object bean, final Field field) throws Exception {\n\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        if (\"RUNTIME\".equals(value)) {\n            throw new RuntimeException(\"RUNTIME-EXCEPTION\");\n\n        }\n        if (\"CHECKED\".equals(value)) {\n            throw new Exception(\"CHECKED-EXCEPTION\");\n\n        }\n        throw new ValidatorException(\"VALIDATOR-EXCEPTION\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nThrows a runtime exception if the value of the argument is \"RUNTIME\", an exception if the value of the argument is \"CHECKED\", and a ValidatorException\notherwise.\n\n@throws RuntimeException   with \"RUNTIME-EXCEPTION as message\" if value is \"RUNTIME\"\n@throws Exception          with \"CHECKED-EXCEPTION\" as message if value is \"CHECKED\"\n@throws ValidatorException with \"VALIDATOR-EXCEPTION\" as message otherwise\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateRequired(Object,Field)", "name": "validateRequired", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateRequired(final Object bean, final Field field)", "original_string": "    public static boolean validateRequired(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return !GenericValidator.isBlankOrNull(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field is required.\n\n@return boolean If the field isn't {@code null} and has a length greater than zero, {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateRequiredIf(Object,Field,Validator)", "name": "validateRequiredIf", "arg_nums": 3, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}, {"name": "validator", "type": "Validator"}], "return_type": "boolean", "signature": "public static boolean validateRequiredIf(final Object bean, final Field field, final Validator validator)", "original_string": "    public static boolean validateRequiredIf(final Object bean, final Field field, final Validator validator) {\n\n        final Object form = validator.getParameterValue(Validator.BEAN_PARAM);\n        String value = null;\n        boolean required = false;\n        if (isStringOrNull(bean)) {\n            value = (String) bean;\n        } else {\n            value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n        }\n        int i = 0;\n        String fieldJoin = \"AND\";\n        if (!GenericValidator.isBlankOrNull(field.getVarValue(\"fieldJoin\"))) {\n            fieldJoin = field.getVarValue(\"fieldJoin\");\n        }\n        if (fieldJoin.equalsIgnoreCase(\"AND\")) {\n            required = true;\n        }\n        while (!GenericValidator.isBlankOrNull(field.getVarValue(\"field[\" + i + \"]\"))) {\n            String dependProp = field.getVarValue(\"field[\" + i + \"]\");\n            final String dependTest = field.getVarValue(\"fieldTest[\" + i + \"]\");\n            final String dependTestValue = field.getVarValue(\"fieldValue[\" + i + \"]\");\n            String dependIndexed = field.getVarValue(\"fieldIndexed[\" + i + \"]\");\n            if (dependIndexed == null) {\n                dependIndexed = \"false\";\n            }\n            boolean thisRequired = false;\n            if (field.isIndexed() && Boolean.parseBoolean(dependIndexed)) {\n                final String key = field.getKey();\n                if (key.contains(\"[\") && key.contains(\"]\")) {\n                    final String ind = key.substring(0, key.indexOf(\".\") + 1);\n                    dependProp = ind + dependProp;\n                }\n            }\n            final String dependVal = ValidatorUtils.getValueAsString(form, dependProp);\n            if (dependTest.equals(FIELD_TEST_NULL)) {\n                if (dependVal != null && !dependVal.isEmpty()) {\n                    thisRequired = false;\n                } else {\n                    thisRequired = true;\n                }\n            }\n            if (dependTest.equals(FIELD_TEST_NOTNULL)) {\n                if (dependVal != null && !dependVal.isEmpty()) {\n                    thisRequired = true;\n                } else {\n                    thisRequired = false;\n                }\n            }\n            if (dependTest.equals(FIELD_TEST_EQUAL)) {\n                thisRequired = dependTestValue.equalsIgnoreCase(dependVal);\n            }\n            if (fieldJoin.equalsIgnoreCase(\"AND\")) {\n                required = required && thisRequired;\n            } else {\n                required = required || thisRequired;\n            }\n            i++;\n        }\n        if (required) {\n            if (value != null && !value.isEmpty()) {\n                return true;\n            }\n            return false;\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl.[boolean]validateShort(Object,Field)", "name": "validateShort", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "field", "type": "Field"}], "return_type": "boolean", "signature": "public static boolean validateShort(final Object bean, final Field field)", "original_string": "    public static boolean validateShort(final Object bean, final Field field) {\n        final String value = ValidatorUtils.getValueAsString(bean, field.getProperty());\n\n        return GenericValidator.isShort(value);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java", "class_name": "GenericValidatorImpl", "class_uri": "src/test/java/org/apache/commons/validator/GenericValidatorImpl.java.GenericValidatorImpl", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field can be successfully converted to a {@code short}.\n\n@param bean  The value validation is being performed on.\n@param field the field to use\n@return boolean If the field can be successfully converted to a {@code short} {@code true} is returned. Otherwise {@code false}.\n"}, {"uris": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest.[]IntegerTest()", "name": "IntegerTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public IntegerTest()", "original_string": "    public IntegerTest() {\n        formKey = \"intForm\";\n        action = \"int\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/IntegerTest.java", "class_name": "IntegerTest", "class_uri": "src/test/java/org/apache/commons/validator/IntegerTest.java.IntegerTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"RequiredNameTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-name-required.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredNameTest.java", "class_name": "RequiredNameTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredNameTest.java.RequiredNameTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws Exception {\n        // Load resources\n        try (InputStream in = this.getClass().getResourceAsStream(\"ExtensionTest-config.xml\")) {\n            resources = new ValidatorResources(in);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-extension.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ExtensionTest.java", "class_name": "ExtensionTest", "class_uri": "src/test/java/org/apache/commons/validator/ExtensionTest.java.ExtensionTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"LocaleTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-locale.xml.\n\n@throws IOException  If something goes wrong\n@throws SAXException If something goes wrong\n"}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": " The teardown method for JUnit"}, {"uris": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest.[void]valueTest(Object,Locale,boolean,boolean,boolean)", "name": "valueTest", "arg_nums": 5, "params": [{"name": "name", "type": "Object"}, {"name": "loc", "type": "Locale"}, {"name": "firstGood", "type": "boolean"}, {"name": "lastGood", "type": "boolean"}, {"name": "middleGood", "type": "boolean"}], "return_type": "void", "signature": "private void valueTest(final Object name, final Locale loc, final boolean firstGood, final boolean lastGood, final boolean middleGood)", "original_string": "    private void valueTest(final Object name, final Locale loc, final boolean firstGood, final boolean lastGood, final boolean middleGood)\n            throws ValidatorException {\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, name);\n        validator.setParameter(Validator.LOCALE_PARAM, loc);\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult resultlast = results.getValidatorResult(\"lastName\");\n        final ValidatorResult resultfirst = results.getValidatorResult(\"firstName\");\n        final ValidatorResult resultmiddle = results.getValidatorResult(\"middleName\");\n\n        if (firstGood) {\n            assertNull(resultfirst);\n        } else {\n            assertNotNull(resultfirst);\n        }\n\n        if (middleGood) {\n            assertNull(resultmiddle);\n        } else {\n            assertNotNull(resultmiddle);\n        }\n\n        if (lastGood) {\n            assertNull(resultlast);\n        } else {\n            assertNotNull(resultlast);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LocaleTest.java", "class_name": "LocaleTest", "class_uri": "src/test/java/org/apache/commons/validator/LocaleTest.java.LocaleTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nUtlity class to run a test on a value.\n\n@param name       param\n@param loc        param\n@param firstGood  param\n@param lastGood   param\n@param middleGood param\n@throws ValidatorException If something goes wrong\n"}, {"uris": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest.[void]assertParameterValue(Validator,String,Class<?>)", "name": "assertParameterValue", "arg_nums": 3, "params": [{"name": "validator", "type": "Validator"}, {"name": "name", "type": "String"}, {"name": "type", "type": "Class<?>"}], "return_type": "void", "signature": "private void assertParameterValue(final Validator validator, final String name, final Class<?> type)", "original_string": "    private void assertParameterValue(final Validator validator, final String name, final Class<?> type) {\n        final Object value = validator.getParameterValue(name);\n        assertNotNull(value, () -> \"Expected '\" + type.getName() + \"' but was null\");\n        assertTrue(type.isInstance(value), () -> \"Expected '\" + type.getName() + \"' but was '\" + value.getClass().getName() + \"'\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ParameterTest.java", "class_name": "ParameterTest", "class_uri": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest.[NameBean]createNameBean()", "name": "createNameBean", "arg_nums": 0, "params": [], "return_type": "NameBean", "signature": "private NameBean createNameBean()", "original_string": "    private NameBean createNameBean() {\n        final NameBean name = new NameBean();\n        name.setFirstName(firstName);\n        name.setMiddleName(middleName);\n        name.setLastName(lastName);\n        return name;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ParameterTest.java", "class_name": "ParameterTest", "class_uri": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "NameBean", "classes": []}, "docstring": "\nCreate a NameBean.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"ParameterTest-config.xml\");\n\n        // initialize values\n        firstName = \"foo\";\n        middleName = \"123\";\n        lastName = \"456\";\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ParameterTest.java", "class_name": "ParameterTest", "class_uri": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from ValidatorResultsTest-config.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ParameterTest.java", "class_name": "ParameterTest", "class_uri": "src/test/java/org/apache/commons/validator/ParameterTest.java.ParameterTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest.[]LongTest()", "name": "LongTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public LongTest()", "original_string": "    public LongTest() {\n        formKey = \"longForm\";\n        action = \"long\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/LongTest.java", "class_name": "LongTest", "class_uri": "src/test/java/org/apache/commons/validator/LongTest.java.LongTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"TestNumber-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java", "class_name": "AbstractNumberTest", "class_uri": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-numeric.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java", "class_name": "AbstractNumberTest", "class_uri": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest.[void]valueTest(Object,boolean)", "name": "valueTest", "arg_nums": 2, "params": [{"name": "info", "type": "Object"}, {"name": "passed", "type": "boolean"}], "return_type": "void", "signature": "protected void valueTest(final Object info, final boolean passed)", "original_string": "    protected void valueTest(final Object info, final boolean passed) throws ValidatorException {\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, formKey);\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, info);\n\n        // Get results of the validation.\n        // throws ValidatorException,\n        // but we aren't catching for testing\n        // since no validation methods we use\n        // throw this\n        final ValidatorResults results = validator.validate();\n\n        assertNotNull(results, \"Results are null.\");\n\n        final ValidatorResult result = results.getValidatorResult(\"value\");\n\n        assertNotNull(result, () -> action + \" value ValidatorResult should not be null.\");\n        assertTrue(result.containsAction(action), () -> action + \" value ValidatorResult should contain the '\" + action + \"' action.\");\n        assertTrue(passed ? result.isValid(action) : !result.isValid(action),\n                () -> action + \" value ValidatorResult for the '\" + action + \"' action should have \" + (passed ? \"passed\" : \"failed\") + \".\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java", "class_name": "AbstractNumberTest", "class_uri": "src/test/java/org/apache/commons/validator/AbstractNumberTest.java.AbstractNumberTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nUtility class to run a test on a value.\n\n@param info   Value to run test on.\n@param passed Whether or not the test is expected to pass.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[void]checkNotRun(ValidatorResults,String,String)", "name": "checkNotRun", "arg_nums": 3, "params": [{"name": "results", "type": "ValidatorResults"}, {"name": "field", "type": "String"}, {"name": "action", "type": "String"}], "return_type": "void", "signature": "private void checkNotRun(final ValidatorResults results, final String field, final String action)", "original_string": "    private void checkNotRun(final ValidatorResults results, final String field, final String action) {\n        final ValidatorResult result = results.getValidatorResult(field);\n        assertNotNull(result, () -> field + \" result\");\n        assertFalse(result.containsAction(action), () -> field + \"[\" + action + \"] run\");\n        // System.out.println(field + \"[\" + action + \"] not run\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCheck a validator has not been run for a field and the result.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[void]checkValidatorResult(ValidatorResults,String,String,boolean)", "name": "checkValidatorResult", "arg_nums": 4, "params": [{"name": "results", "type": "ValidatorResults"}, {"name": "field", "type": "String"}, {"name": "action", "type": "String"}, {"name": "expected", "type": "boolean"}], "return_type": "void", "signature": "private void checkValidatorResult(final ValidatorResults results, final String field, final String action, final boolean expected)", "original_string": "    private void checkValidatorResult(final ValidatorResults results, final String field, final String action, final boolean expected) {\n        final ValidatorResult result = results.getValidatorResult(field);\n        // System.out.println(field + \"[\" + action + \"]=\" + result.isValid(action));\n        assertNotNull(result, () -> field + \" result\");\n        assertTrue(result.containsAction(action), () -> field + \"[\" + action + \"] not run\");\n        assertEquals(expected, result.isValid(action), () -> field + \"[\" + action + \"] result\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCheck a validator has run for a field and the result.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[NameBean]createNameBean()", "name": "createNameBean", "arg_nums": 0, "params": [], "return_type": "NameBean", "signature": "private NameBean createNameBean()", "original_string": "    private NameBean createNameBean() {\n        final NameBean name = new NameBean();\n        name.setFirstName(firstName);\n        name.setMiddleName(middleName);\n        name.setLastName(lastName);\n        return name;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "NameBean", "classes": []}, "docstring": "\nCreate a NameBean.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"ValidatorResultsTest-config.xml\");\n\n        // initialize values\n        firstName = \"foo\";\n        middleName = \"123\";\n        lastName = \"456\";\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from ValidatorResultsTest-config.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest.[ValidatorResults]validate(Object)", "name": "validate", "arg_nums": 1, "params": [{"name": "bean", "type": "Object"}], "return_type": "ValidatorResults", "signature": "private ValidatorResults validate(final Object bean)", "original_string": "    private ValidatorResults validate(final Object bean) throws ValidatorException {\n\n        // Construct validator based on the loaded resources\n        // and the form key\n        final Validator validator = new Validator(resources, FORM_KEY);\n\n        // add the name bean to the validator as a resource\n        // for the validations to be performed on.\n        validator.setParameter(Validator.BEAN_PARAM, bean);\n\n        return validator.validate();\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java", "class_name": "ValidatorResultsTest", "class_uri": "src/test/java/org/apache/commons/validator/ValidatorResultsTest.java.ValidatorResultsTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ValidatorResults", "classes": []}, "docstring": "\nValidate results.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"MultipleTests-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-multipletest.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/MultipleTest.java", "class_name": "MultipleTest", "class_uri": "src/test/java/org/apache/commons/validator/MultipleTest.java.MultipleTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/ValueBean.java.ValueBean.[String]getValue()", "name": "getValue", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getValue()", "original_string": "    public String getValue() {\n        return value;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValueBean.java", "class_name": "ValueBean", "class_uri": "src/test/java/org/apache/commons/validator/ValueBean.java.ValueBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the value.\n"}, {"uris": "src/test/java/org/apache/commons/validator/ValueBean.java.ValueBean.[void]setValue(String)", "name": "setValue", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "void", "signature": "public void setValue(final String value)", "original_string": "    public void setValue(final String value) {\n        this.value = value;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/ValueBean.java", "class_name": "ValueBean", "class_uri": "src/test/java/org/apache/commons/validator/ValueBean.java.ValueBean", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value.\n"}, {"uris": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest.[]FloatTest()", "name": "FloatTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public FloatTest()", "original_string": "    public FloatTest() {\n        action = \"float\";\n        formKey = \"floatForm\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/FloatTest.java", "class_name": "FloatTest", "class_uri": "src/test/java/org/apache/commons/validator/FloatTest.java.FloatTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() throws IOException, SAXException {\n        // Load resources\n        loadResources(\"RequiredIfTest-config.xml\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "class_name": "RequiredIfTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad {@code ValidatorResources} from validator-requiredif.xml.\n"}, {"uris": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/RequiredIfTest.java", "class_name": "RequiredIfTest", "class_uri": "src/test/java/org/apache/commons/validator/RequiredIfTest.java.RequiredIfTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        validator = new InetAddressValidator();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java", "class_name": "InetAddressValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/InetAddressValidatorTest.java.InetAddressValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[Date]createDate(TimeZone,int,int)", "name": "createDate", "arg_nums": 3, "params": [{"name": "zone", "type": "TimeZone"}, {"name": "time", "type": "int"}, {"name": "millisecond", "type": "int"}], "return_type": "Date", "signature": "protected static Date createDate(final TimeZone zone, final int time, final int millisecond)", "original_string": "    protected static Date createDate(final TimeZone zone, final int time, final int millisecond) {\n        final Calendar calendar = createTime(zone, time, millisecond);\n        return calendar.getTime();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nCreate a date instance for a specified time zone, date and time.\n\n@param zone        The time zone\n@param time        the time in HH:mm:ss format\n@param millisecond the milliseconds\n@return the new Date instance.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[Calendar]createTime(TimeZone,int,int)", "name": "createTime", "arg_nums": 3, "params": [{"name": "zone", "type": "TimeZone"}, {"name": "time", "type": "int"}, {"name": "millisecond", "type": "int"}], "return_type": "Calendar", "signature": "protected static Calendar createTime(final TimeZone zone, final int time, final int millisecond)", "original_string": "    protected static Calendar createTime(final TimeZone zone, final int time, final int millisecond) {\n        final Calendar calendar = zone == null ? Calendar.getInstance() : Calendar.getInstance(zone);\n        final int hour = time / 10000 * 10000;\n        final int min = time / 100 * 100 - hour;\n        final int sec = time - (hour + min);\n        calendar.set(Calendar.YEAR, 1970);\n        calendar.set(Calendar.MONTH, 0);\n        calendar.set(Calendar.DATE, 1);\n        calendar.set(Calendar.HOUR_OF_DAY, hour / 10000);\n        calendar.set(Calendar.MINUTE, min / 100);\n        calendar.set(Calendar.SECOND, sec);\n        calendar.set(Calendar.MILLISECOND, millisecond);\n        return calendar;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\nCreate a calendar instance for a specified time zone, date and time.\n\n@param zone        The time zone\n@param time        the time in HH:mm:ss format\n@param millisecond the milliseconds\n@return the new Calendar instance.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        validator = new TimeValidator();\n        defaultZone = TimeZone.getDefault();\n        origDefault = Locale.getDefault();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n        validator = null;\n        Locale.setDefault(origDefault);\n        TimeZone.setDefault(defaultZone);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java", "class_name": "TimeValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/TimeValidatorTest.java.TimeValidatorTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTear down\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java.BigIntegerValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new BigIntegerValidator(false, 0);\n        strictValidator = new BigIntegerValidator();\n\n        testPattern = \"#,###\";\n\n        // testValidateMinMax()\n        max = null;\n        maxPlusOne = null;\n        min = null;\n        minMinusOne = null;\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\", \"1.2\" };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\" };\n\n        // testValid()\n        testNumber = new BigInteger(\"1234\");\n        testZero = new BigInteger(\"0\");\n        validStrict = new String[] { \"0\", \"1234\", \"1,234\" };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber };\n        valid = new String[] { \"0\", \"1234\", \"1,234\", \"1,234.5\", \"1234X\" };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber };\n\n        testStringUS = \"1,234\";\n        testStringDE = \"1.234\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java", "class_name": "BigIntegerValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/BigIntegerValidatorTest.java.BigIntegerValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java.BigDecimalValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new BigDecimalValidator(false);\n        strictValidator = new BigDecimalValidator();\n\n        testPattern = \"#,###.###\";\n\n        // testValidateMinMax()\n        max = null;\n        maxPlusOne = null;\n        min = null;\n        minMinusOne = null;\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\", \"1.234X\" };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\" };\n\n        // testValid()\n        testNumber = new BigDecimal(\"1234.5\");\n        final Number testNumber2 = new BigDecimal(\".1\");\n        final Number testNumber3 = new BigDecimal(\"12345.67899\");\n        testZero = new BigDecimal(\"0\");\n        validStrict = new String[] { \"0\", \"1234.5\", \"1,234.5\", \".1\", \"12345.678990\" };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber, testNumber2, testNumber3 };\n        valid = new String[] { \"0\", \"1234.5\", \"1,234.5\", \"1,234.5\", \"1234.5X\" };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber };\n\n        testStringUS = \"1,234.5\";\n        testStringDE = \"1.234,5\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###,#\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java", "class_name": "BigDecimalValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/BigDecimalValidatorTest.java.BigDecimalValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[boolean]incrementTestPartsIndex(int[],Object[])", "name": "incrementTestPartsIndex", "arg_nums": 2, "params": [{"name": "testPartsIndex", "type": "int[]"}, {"name": "testParts", "type": "Object[]"}], "return_type": "boolean", "signature": "static boolean incrementTestPartsIndex(final int[] testPartsIndex, final Object[] testParts)", "original_string": "    static boolean incrementTestPartsIndex(final int[] testPartsIndex, final Object[] testParts) {\n        boolean carry = true; // add 1 to lowest order part.\n        boolean maxIndex = true;\n        for (int testPartsIndexIndex = testPartsIndex.length - 1; testPartsIndexIndex >= 0; --testPartsIndexIndex) {\n            int index = testPartsIndex[testPartsIndexIndex];\n            final ResultPair[] part = (ResultPair[]) testParts[testPartsIndexIndex];\n            maxIndex &= index == part.length - 1;\n            if (carry) {\n                if (index < part.length - 1) {\n                    index++;\n                    testPartsIndex[testPartsIndexIndex] = index;\n                    carry = false;\n                } else {\n                    testPartsIndex[testPartsIndexIndex] = 0;\n                    carry = true;\n                }\n            }\n        }\n\n        return !maxIndex;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(final String[] args)", "original_string": "    public static void main(final String[] args) {\n        final UrlValidator uv = new UrlValidator();\n        for (final String arg : args) {\n            try {\n                URI uri = new URI(arg);\n                uri = uri.normalize();\n                System.out.println(uri.toString());\n                System.out.printf(\"URI scheme: %s%n\", uri.getScheme());\n                System.out.printf(\"URI scheme specific part: %s%n\", uri.getSchemeSpecificPart());\n                System.out.printf(\"URI raw scheme specific part: %s%n\", uri.getRawSchemeSpecificPart());\n                System.out.printf(\"URI auth: %s%n\", uri.getAuthority());\n                System.out.printf(\"URI raw auth: %s%n\", uri.getRawAuthority());\n                System.out.printf(\"URI userInfo: %s%n\", uri.getUserInfo());\n                System.out.printf(\"URI raw userInfo: %s%n\", uri.getRawUserInfo());\n                System.out.printf(\"URI host: %s%n\", uri.getHost());\n                System.out.printf(\"URI port: %s%n\", uri.getPort());\n                System.out.printf(\"URI path: %s%n\", uri.getPath());\n                System.out.printf(\"URI raw path: %s%n\", uri.getRawPath());\n                System.out.printf(\"URI query: %s%n\", uri.getQuery());\n                System.out.printf(\"URI raw query: %s%n\", uri.getRawQuery());\n                System.out.printf(\"URI fragment: %s%n\", uri.getFragment());\n                System.out.printf(\"URI raw fragment: %s%n\", uri.getRawFragment());\n            } catch (final URISyntaxException e) {\n                System.out.println(e.getMessage());\n            }\n            System.out.printf(\"isValid: %s%n\", uv.isValid(arg));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nValidator for checking URL parsing\n\n@param args   URLs to validate\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Before\n    public void setUp()", "original_string": "    @Before\n    public void setUp() {\n        for (int index = 0; index < testPartsIndex.length - 1; index++) {\n            testPartsIndex[index] = 0;\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "@Before\n    public", "marker_annotations": ["@Before"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[void]testIsValid(Object[],long)", "name": "testIsValid", "arg_nums": 2, "params": [{"name": "testObjects", "type": "Object[]"}, {"name": "options", "type": "long"}], "return_type": "void", "signature": "public void testIsValid(final Object[] testObjects, final long options)", "original_string": "    public void testIsValid(final Object[] testObjects, final long options) {\n        final UrlValidator urlVal = new UrlValidator(null, null, options);\n        assertTrue(urlVal.isValid(\"http://www.google.com\"));\n        assertTrue(urlVal.isValid(\"http://www.google.com/\"));\n        int statusPerLine = 60;\n        int printed = 0;\n        if (printIndex) {\n            statusPerLine = 6;\n        }\n        do {\n            final StringBuilder testBuffer = new StringBuilder();\n            boolean expected = true;\n            for (int testPartsIndexIndex = 0; testPartsIndexIndex < testPartsIndex.length; ++testPartsIndexIndex) {\n                final int index = testPartsIndex[testPartsIndexIndex];\n                final ResultPair[] part = (ResultPair[]) testObjects[testPartsIndexIndex];\n                testBuffer.append(part[index].item);\n                expected &= part[index].valid;\n            }\n            final String url = testBuffer.toString();\n            final boolean result = urlVal.isValid(url);\n            assertEquals(expected, result, url);\n            if (printStatus) {\n                if (printIndex) {\n                    System.out.print(testPartsIndextoString());\n                } else if (result == expected) {\n                    System.out.print('.');\n                } else {\n                    System.out.print('X');\n                }\n                printed++;\n                if (printed == statusPerLine) {\n                    System.out.println();\n                    printed = 0;\n                }\n            }\n        } while (incrementTestPartsIndex(testPartsIndex, testObjects));\n        if (printStatus) {\n            System.out.println();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCreate set of tests by taking the testUrlXXX arrays and running through all possible permutations of their combinations.\n\n@param testObjects Used to create a url.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest.[String]testPartsIndextoString()", "name": "testPartsIndextoString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String testPartsIndextoString()", "original_string": "    private String testPartsIndextoString() {\n        final StringBuilder carryMsg = new StringBuilder(\"{\");\n        for (int testPartsIndexIndex = 0; testPartsIndexIndex < testPartsIndex.length; ++testPartsIndexIndex) {\n            carryMsg.append(testPartsIndex[testPartsIndexIndex]);\n            if (testPartsIndexIndex < testPartsIndex.length - 1) {\n                carryMsg.append(',');\n            } else {\n                carryMsg.append('}');\n            }\n        }\n        return carryMsg.toString();\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java", "class_name": "UrlValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/UrlValidatorTest.java.UrlValidatorTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        dateValidator = new DateValidator();\n        validator = dateValidator;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java", "class_name": "DateValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DateValidatorTest.java.DateValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up test fixtures.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new FloatValidator(false, 0);\n        strictValidator = new FloatValidator();\n\n        testPattern = \"#,###.#\";\n\n        // testValidateMinMax()\n        max = Float.valueOf(Float.MAX_VALUE);\n        maxPlusOne = Double.valueOf(max.doubleValue() * 10);\n        min = Float.valueOf(Float.MAX_VALUE * -1);\n        minMinusOne = Double.valueOf(min.doubleValue() * 10);\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\" };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\" };\n\n        // testValid()\n        testNumber = Float.valueOf(1234.5f);\n        testZero = Float.valueOf(0);\n        validStrict = new String[] { \"0\", \"1234.5\", \"1,234.5\" };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber };\n        valid = new String[] { \"0\", \"1234.5\", \"1,234.5\", \"1,234.5\", \"1234.5X\" };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber };\n\n        testStringUS = \"1,234.5\";\n        testStringDE = \"1.234,5\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###,#\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java", "class_name": "FloatValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/FloatValidatorTest.java.FloatValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]closeQuietly(Closeable)", "name": "closeQuietly", "arg_nums": 1, "params": [{"name": "in", "type": "Closeable"}], "return_type": "void", "signature": "private static void closeQuietly(final Closeable in)", "original_string": "    private static void closeQuietly(final Closeable in) {\n        if (in != null) {\n            try {\n                in.close();\n            } catch (final IOException ignore) {\n                // ignore\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[long]download(File,String,long)", "name": "download", "arg_nums": 3, "params": [{"name": "file", "type": "File"}, {"name": "tldUrl", "type": "String"}, {"name": "timestamp", "type": "long"}], "return_type": "long", "signature": "private static long download(final File file, final String tldUrl, final long timestamp)", "original_string": "    private static long download(final File file, final String tldUrl, final long timestamp) throws IOException {\n        final int hour = 60 * 60 * 1000; // an hour in ms\n        final long modTime;\n        // For testing purposes, don't download files more than once an hour\n        if (file.canRead()) {\n            modTime = file.lastModified();\n            if (modTime > System.currentTimeMillis() - hour) {\n                System.out.println(\"Skipping download - found recent \" + file);\n                return modTime;\n            }\n        } else {\n            modTime = 0;\n        }\n        final HttpURLConnection hc = (HttpURLConnection) new URL(tldUrl).openConnection();\n        if (modTime > 0) {\n            final SimpleDateFormat sdf = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss z\"); // Sun, 06 Nov 1994 08:49:37 GMT\n            final String since = sdf.format(new Date(modTime));\n            hc.addRequestProperty(\"If-Modified-Since\", since);\n            System.out.println(\"Found \" + file + \" with date \" + since);\n        }\n        if (hc.getResponseCode() == 304) {\n            System.out.println(\"Already have most recent \" + tldUrl);\n        } else {\n            System.out.println(\"Downloading \" + tldUrl);\n            try (InputStream is = hc.getInputStream()) {\n                Files.copy(is, file.toPath(), StandardCopyOption.REPLACE_EXISTING);\n            }\n            System.out.println(\"Done\");\n        }\n        return file.lastModified();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nDownload a file if it is more recent than our cached copy. Unfortunately the server does not seem to honor If-Modified-Since for the Html page, so we\ncheck if it is newer than the txt file and skip download if so\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[Map<String, String[]>]getHtmlInfo(File)", "name": "getHtmlInfo", "arg_nums": 1, "params": [{"name": "f", "type": "File"}], "return_type": "Map<String, String[]>", "signature": "private static Map<String, String[]> getHtmlInfo(final File f)", "original_string": "    private static Map<String, String[]> getHtmlInfo(final File f) throws IOException {\n        final Map<String, String[]> info = new HashMap<>();\n\n//        <td><span class=\"domain tld\"><a href=\"/domains/root/db/ax.html\">.ax</a></span></td>\n        final Pattern domain = Pattern.compile(\".*<a href=\\\"/domains/root/db/([^.]+)\\\\.html\");\n//        <td>country-code</td>\n        final Pattern type = Pattern.compile(\"\\\\s+<td>([^<]+)</td>\");\n//        <!-- <td>\u00c5land Islands<br/><span class=\"tld-table-so\">\u00c5lands landskapsregering</span></td> </td> -->\n//        <td>\u00c5lands landskapsregering</td>\n        final Pattern comment = Pattern.compile(\"\\\\s+<td>([^<]+)</td>\");\n\n        try (BufferedReader br = new BufferedReader(new FileReader(f))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                final Matcher m = domain.matcher(line);\n                if (m.lookingAt()) {\n                    final String dom = m.group(1);\n                    String typ = \"??\";\n                    String com = \"??\";\n                    line = br.readLine();\n                    while (line.matches(\"^\\\\s*$\")) { // extra blank lines introduced\n                        line = br.readLine();\n                    }\n                    final Matcher t = type.matcher(line);\n                    if (t.lookingAt()) {\n                        typ = t.group(1);\n                        line = br.readLine();\n                        if (line.matches(\"\\\\s+<!--.*\")) {\n                            while (!line.matches(\".*-->.*\")) {\n                                line = br.readLine();\n                            }\n                            line = br.readLine();\n                        }\n                        // Should have comment; is it wrapped?\n                        while (!line.matches(\".*</td>.*\")) {\n                            line += \" \" + br.readLine();\n                        }\n                        final Matcher n = comment.matcher(line);\n                        if (n.lookingAt()) {\n                            com = n.group(1);\n                        }\n                        // Don't save unused entries\n                        if (com.contains(\"Not assigned\") || com.contains(\"Retired\") || typ.equals(\"test\")) {\n//                        System.out.println(\"Ignored: \" + typ + \" \" + dom + \" \" +com);\n                        } else {\n                            info.put(dom.toLowerCase(Locale.ENGLISH), new String[] { typ, com });\n//                        System.out.println(\"Storing: \" + typ + \" \" + dom + \" \" +com);\n                        }\n                    } else {\n                        System.err.println(\"Unexpected type: \" + line);\n                    }\n                }\n            }\n        }\n        return info;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "Map<String, String[]>", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[boolean]isInIanaList(String,Set<String>)", "name": "isInIanaList", "arg_nums": 2, "params": [{"name": "arrayName", "type": "String"}, {"name": "ianaTlds", "type": "Set<String>"}], "return_type": "boolean", "signature": "private static boolean isInIanaList(final String arrayName, final Set<String> ianaTlds)", "original_string": "    private static boolean isInIanaList(final String arrayName, final Set<String> ianaTlds) throws Exception {\n        final Field f = DomainValidator.class.getDeclaredField(arrayName);\n        final boolean isPrivate = Modifier.isPrivate(f.getModifiers());\n        if (isPrivate) {\n            f.setAccessible(true);\n        }\n        final String[] array = (String[]) f.get(null);\n        try {\n            return isInIanaList(arrayName, array, ianaTlds);\n        } finally {\n            if (isPrivate) {\n                f.setAccessible(false);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": " methods can be dropped"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[boolean]isInIanaList(String,String[],Set<String>)", "name": "isInIanaList", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "array", "type": "String[]"}, {"name": "ianaTlds", "type": "Set<String>"}], "return_type": "boolean", "signature": "private static boolean isInIanaList(final String name, final String[] array, final Set<String> ianaTlds)", "original_string": "    private static boolean isInIanaList(final String name, final String[] array, final Set<String> ianaTlds) {\n        for (final String element : array) {\n            if (!ianaTlds.contains(element)) {\n                System.out.println(name + \" contains unexpected value: \" + element);\n            }\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[boolean]isLowerCase(String)", "name": "isLowerCase", "arg_nums": 1, "params": [{"name": "string", "type": "String"}], "return_type": "boolean", "signature": "private static boolean isLowerCase(final String string)", "original_string": "    private static boolean isLowerCase(final String string) {\n        return string.equals(string.toLowerCase(Locale.ENGLISH));\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[boolean]isNotInRootZone(String)", "name": "isNotInRootZone", "arg_nums": 1, "params": [{"name": "domain", "type": "String"}], "return_type": "boolean", "signature": "private static boolean isNotInRootZone(final String domain)", "original_string": "    private static boolean isNotInRootZone(final String domain) {\n        final String tldUrl = \"http://www.iana.org/domains/root/db/\" + domain + \".html\";\n        final File rootCheck = new File(\"target\", \"tld_\" + domain + \".html\");\n        BufferedReader in = null;\n        try {\n            download(rootCheck, tldUrl, 0L);\n            in = new BufferedReader(new FileReader(rootCheck));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                if (inputLine.contains(\"This domain is not present in the root zone at this time.\")) {\n                    return true;\n                }\n            }\n            in.close();\n        } catch (final IOException ignore) {\n            // ignore\n        } finally {\n            closeQuietly(in);\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck whether the domain is in the root zone currently. Reads the URL http://www.iana.org/domains/root/db/*domain*.html (using a local disk cache) and\nchecks for the string \"This domain is not present in the root zone at this time.\"\n\n@param domain the domain to check\n@return true if the string is found\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[boolean]isSortedLowerCase(String)", "name": "isSortedLowerCase", "arg_nums": 1, "params": [{"name": "arrayName", "type": "String"}], "return_type": "boolean", "signature": "private static boolean isSortedLowerCase(final String arrayName)", "original_string": "    private static boolean isSortedLowerCase(final String arrayName) throws Exception {\n        final Field f = DomainValidator.class.getDeclaredField(arrayName);\n        final boolean isPrivate = Modifier.isPrivate(f.getModifiers());\n        if (isPrivate) {\n            f.setAccessible(true);\n        }\n        final String[] array = (String[]) f.get(null);\n        try {\n            return isSortedLowerCase(arrayName, array);\n        } finally {\n            if (isPrivate) {\n                f.setAccessible(false);\n            }\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[boolean]isSortedLowerCase(String,String[])", "name": "isSortedLowerCase", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "array", "type": "String[]"}], "return_type": "boolean", "signature": "private static boolean isSortedLowerCase(final String name, final String[] array)", "original_string": "    private static boolean isSortedLowerCase(final String name, final String[] array) {\n        boolean sorted = true;\n        boolean strictlySorted = true;\n        final int length = array.length;\n        boolean lowerCase = isLowerCase(array[length - 1]); // Check the last entry\n        for (int i = 0; i < length - 1; i++) { // compare all but last entry with next\n            final String entry = array[i];\n            final String nextEntry = array[i + 1];\n            final int cmp = entry.compareTo(nextEntry);\n            if (cmp > 0) { // out of order\n                System.out.println(\"Out of order entry: \" + entry + \" < \" + nextEntry + \" in \" + name);\n                sorted = false;\n            } else if (cmp == 0) {\n                strictlySorted = false;\n                System.out.println(\"Duplicated entry: \" + entry + \" in \" + name);\n            }\n            if (!isLowerCase(entry)) {\n                System.out.println(\"Non lowerCase entry: \" + entry + \" in \" + name);\n                lowerCase = false;\n            }\n        }\n        return sorted && strictlySorted && lowerCase;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": " Check if an array is strictly sorted - and lowerCase"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]main(String)", "name": "main", "arg_nums": 1, "params": [{"name": "a", "type": "String"}], "return_type": "void", "signature": "public static void main(final String a[])", "original_string": "    public static void main(final String a[]) throws Exception {\n        // Check the arrays first as this affects later checks\n        // Doing this here makes it easier when updating the lists\n        boolean ok = true;\n        for (final String list : new String[] { \"INFRASTRUCTURE_TLDS\", \"COUNTRY_CODE_TLDS\", \"GENERIC_TLDS\", \"LOCAL_TLDS\" }) {\n            ok &= isSortedLowerCase(list);\n        }\n        if (!ok) {\n            System.out.println(\"Fix arrays before retrying; cannot continue\");\n            return;\n        }\n        final Set<String> ianaTlds = new HashSet<>(); // keep for comparison with array contents\n        final DomainValidator dv = DomainValidator.getInstance();\n        final File txtFile = new File(\"target/tlds-alpha-by-domain.txt\");\n        final long timestamp = download(txtFile, \"https://data.iana.org/TLD/tlds-alpha-by-domain.txt\", 0L);\n        final File htmlFile = new File(\"target/tlds-alpha-by-domain.html\");\n        // N.B. sometimes the html file may be updated a day or so after the txt file\n        // if the txt file contains entries not found in the html file, try again in a day or two\n        download(htmlFile, \"https://www.iana.org/domains/root/db\", timestamp);\n\n        final BufferedReader br = new BufferedReader(new FileReader(txtFile));\n        String line;\n        final String header;\n        line = br.readLine(); // header\n        if (!line.startsWith(\"# Version \")) {\n            br.close();\n            throw new IOException(\"File does not have expected Version header\");\n        }\n        header = line.substring(2);\n        final boolean generateUnicodeTlds = false; // Change this to generate Unicode TLDs as well\n\n        // Parse html page to get entries\n        final Map<String, String[]> htmlInfo = getHtmlInfo(htmlFile);\n        final Map<String, String> missingTLD = new TreeMap<>(); // stores entry and comments as String[]\n        final Map<String, String> missingCC = new TreeMap<>();\n        while ((line = br.readLine()) != null) {\n            if (!line.startsWith(\"#\")) {\n                final String unicodeTld; // only different from asciiTld if that was punycode\n                final String asciiTld = line.toLowerCase(Locale.ENGLISH);\n                if (line.startsWith(\"XN--\")) {\n                    unicodeTld = IDN.toUnicode(line);\n                } else {\n                    unicodeTld = asciiTld;\n                }\n                if (!dv.isValidTld(asciiTld)) {\n                    final String[] info = htmlInfo.get(asciiTld);\n                    if (info != null) {\n                        final String type = info[0];\n                        final String comment = info[1];\n                        if (\"country-code\".equals(type)) { // Which list to use?\n                            missingCC.put(asciiTld, unicodeTld + \" \" + comment);\n                            if (generateUnicodeTlds) {\n                                missingCC.put(unicodeTld, asciiTld + \" \" + comment);\n                            }\n                        } else {\n                            missingTLD.put(asciiTld, unicodeTld + \" \" + comment);\n                            if (generateUnicodeTlds) {\n                                missingTLD.put(unicodeTld, asciiTld + \" \" + comment);\n                            }\n                        }\n                    } else {\n                        System.err.println(\"Expected to find HTML info for \" + asciiTld);\n                    }\n                }\n                ianaTlds.add(asciiTld);\n                // Don't merge these conditions; generateUnicodeTlds is final so needs to be separate to avoid a warning\n                if (generateUnicodeTlds && !unicodeTld.equals(asciiTld)) {\n                    ianaTlds.add(unicodeTld);\n                }\n            }\n        }\n        br.close();\n        // List html entries not in TLD text list\n        for (final String key : new TreeMap<>(htmlInfo).keySet()) {\n            if (!ianaTlds.contains(key)) {\n                if (isNotInRootZone(key)) {\n                    System.out.println(\"INFO: HTML entry not yet in root zone: \" + key);\n                } else {\n                    System.err.println(\"WARN: Expected to find text entry for html: \" + key);\n                }\n            }\n        }\n        if (!missingTLD.isEmpty()) {\n            printMap(header, missingTLD, \"GENERIC_TLDS\");\n        }\n        if (!missingCC.isEmpty()) {\n            printMap(header, missingCC, \"COUNTRY_CODE_TLDS\");\n        }\n        // Check if internal tables contain any additional entries\n        isInIanaList(\"INFRASTRUCTURE_TLDS\", ianaTlds);\n        isInIanaList(\"COUNTRY_CODE_TLDS\", ianaTlds);\n        isInIanaList(\"GENERIC_TLDS\", ianaTlds);\n        // Don't check local TLDS isInIanaList(\"LOCAL_TLDS\", ianaTlds);\n        System.out.println(\"Finished checks\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Check if the internal TLD tables have any spurious entries"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]printMap(String,Map<String, String>,String)", "name": "printMap", "arg_nums": 3, "params": [{"name": "header", "type": "String"}, {"name": "map", "type": "Map<String, String>"}, {"name": "string", "type": "String"}], "return_type": "void", "signature": "private static void printMap(final String header, final Map<String, String> map, final String string)", "original_string": "    private static void printMap(final String header, final Map<String, String> map, final String string) {\n        System.out.println(\"Entries missing from \" + string + \" List\\n\");\n        if (header != null) {\n            System.out.println(\"        // Taken from \" + header);\n        }\n        for (final Entry<String, String> me : map.entrySet()) {\n            System.out.println(\"        \\\"\" + me.getKey() + \"\\\", // \" + me.getValue());\n        }\n        System.out.println(\"\\nDone\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java", "class_name": "DomainValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DomainValidatorTest.java.DomainValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java.ByteValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new ByteValidator(false, 0);\n        strictValidator = new ByteValidator();\n\n        testPattern = \"#,###\";\n\n        // testValidateMinMax()\n        max = Byte.valueOf(Byte.MAX_VALUE);\n        maxPlusOne = Long.valueOf(max.longValue() + 1);\n        min = Byte.valueOf(Byte.MIN_VALUE);\n        minMinusOne = Long.valueOf(min.longValue() - 1);\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\", \"1.2\", BYTE_MAX_1, BYTE_MIN_1, BYTE_MAX_0, BYTE_MIN_0 };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\", BYTE_MAX_1, BYTE_MIN_1 };\n\n        // testValid()\n        testNumber = Byte.valueOf((byte) 123);\n        testZero = Byte.valueOf((byte) 0);\n        validStrict = new String[] { \"0\", \"123\", \",123\", BYTE_MAX, BYTE_MIN };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber, BYTE_MAX_VAL, BYTE_MIN_VAL };\n        valid = new String[] { \"0\", \"123\", \",123\", \",123.5\", \"123X\", BYTE_MAX, BYTE_MIN, BYTE_MAX_0, BYTE_MIN_0 };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber, BYTE_MAX_VAL, BYTE_MIN_VAL, BYTE_MAX_VAL, BYTE_MIN_VAL };\n\n        testStringUS = \",123\";\n        testStringDE = \".123\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java", "class_name": "ByteValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ByteValidatorTest.java.ByteValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        calValidator = new CalendarValidator();\n        validator = calValidator;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java", "class_name": "CalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CalendarValidatorTest.java.CalendarValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest.[void]checkArray(String,String[],String[])", "name": "checkArray", "arg_nums": 3, "params": [{"name": "label", "type": "String"}, {"name": "expect", "type": "String[]"}, {"name": "result", "type": "String[]"}], "return_type": "void", "signature": "private void checkArray(final String label, final String[] expect, final String[] result)", "original_string": "    private void checkArray(final String label, final String[] expect, final String[] result) {\n\n        // Handle nulls\n        if (expect == null || result == null) {\n            if (expect == null && result == null) {\n                return; // valid, both null\n            }\n            fail(label + \" Null expect=\" + expect + \" result=\" + result);\n            return; // not strictly necessary, but prevents possible NPE below\n        }\n\n        // Check Length\n        if (expect.length != result.length) {\n            fail(label + \" Length expect=\" + expect.length + \" result=\" + result.length);\n        }\n\n        // Check Values\n        for (int i = 0; i < expect.length; i++) {\n            assertEquals(expect[i], result[i], label + \" value[\" + i + \"]\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java", "class_name": "RegexValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/RegexValidatorTest.java.RegexValidatorTest", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCompare two arrays\n\n@param label  Label for the test\n@param expect Expected array\n@param result Actual array\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java.DoubleValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new DoubleValidator(false, 0);\n        strictValidator = new DoubleValidator();\n\n        testPattern = \"#,###.#\";\n\n        // testValidateMinMax()\n        max = null;\n        maxPlusOne = null;\n        min = null;\n        minMinusOne = null;\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\" };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\" };\n\n        // testValid()\n        testNumber = Double.valueOf(1234.5);\n        testZero = Double.valueOf(0);\n        validStrict = new String[] { \"0\", \"1234.5\", \"1,234.5\" };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber };\n        valid = new String[] { \"0\", \"1234.5\", \"1,234.5\", \"1,234.5\", \"1234.5X\" };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber };\n\n        testStringUS = \"1,234.5\";\n        testStringDE = \"1.234,5\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###,#\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java", "class_name": "DoubleValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/DoubleValidatorTest.java.DoubleValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[int]checkIBAN(File,IBANValidator)", "name": "checkIBAN", "arg_nums": 2, "params": [{"name": "file", "type": "File"}, {"name": "val", "type": "IBANValidator"}], "return_type": "int", "signature": "private static int checkIBAN(final File file, final IBANValidator val)", "original_string": "    private static int checkIBAN(final File file, final IBANValidator val) throws Exception {\n        // The IBAN Registry (TXT) file is a TAB-separated file\n        // Rows are the entry types, columns are the countries\n        final CSVFormat format = CSVFormat.DEFAULT.builder().setDelimiter('\\t').build();\n        final Reader rdr = new InputStreamReader(new FileInputStream(file), \"ISO_8859_1\");\n        try (final CSVParser p = new CSVParser(rdr, format)) {\n            CSVRecord country = null;\n            CSVRecord cc = null;\n            CSVRecord structure = null;\n            CSVRecord length = null;\n            for (final CSVRecord o : p) {\n                final String item = o.get(0);\n                switch (item) {\n                case \"Name of country\":\n                    country = o;\n                    break;\n                case \"IBAN prefix country code (ISO 3166)\":\n                    cc = o;\n                    break;\n                case \"IBAN structure\":\n                    structure = o;\n                    break;\n                case \"IBAN length\":\n                    length = o;\n                    break;\n                default:\n                    break;\n                }\n            }\n            assertNotNull(country);\n            assertNotNull(length);\n            assertNotNull(structure);\n            assertNotNull(cc);\n            for (int i = 1; i < country.size(); i++) {\n                try {\n\n                    final String newLength = length.get(i).split(\"!\")[0]; // El Salvador currently has \"28!n\"\n                    final String newRE = fmtRE(structure.get(i), Integer.parseInt(newLength));\n                    final Validator valre = val.getValidator(cc.get(i));\n                    if (valre == null) {\n                        System.out.println(\"// Missing entry:\");\n                        printEntry(cc.get(i), newLength, newRE, country.get(i));\n                    } else {\n                        final String currentLength = Integer.toString(valre.getIbanLength());\n                        final String currentRE = valre.getRegexValidator().toString().replaceAll(\"^.+?\\\\{(.+)}\", \"$1\") // Extract RE from RegexValidator{re}\n                                                                                                                       // string\n                                .replace(\"\\\\d\", \"\\\\\\\\d\"); // convert \\d to \\\\d\n                        // The above assumes that the RegexValidator contains a single Regex\n                        if (currentRE.equals(newRE) && currentLength.equals(newLength)) {\n\n                        } else {\n                            System.out.println(\"// Expected: \" + newRE + \", \" + newLength + \" Actual: \" + currentRE + \", \" + currentLength);\n                            printEntry(cc.get(i), newLength, newRE, country.get(i));\n                        }\n\n                    }\n\n                } catch (final IllegalArgumentException e) {\n                    e.printStackTrace();\n                }\n            }\n            p.close();\n            return country.size();\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": " @formatter:on"}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[String]fmtRE(String,int)", "name": "fmtRE", "arg_nums": 2, "params": [{"name": "ibanPat", "type": "String"}, {"name": "ibanLen", "type": "int"}], "return_type": "String", "signature": "private static String fmtRE(final String ibanPat, final int ibanLen)", "original_string": "    private static String fmtRE(final String ibanPat, final int ibanLen) {\n        final Matcher m = IBAN_PAT.matcher(ibanPat);\n        if (!m.matches()) {\n            throw new IllegalArgumentException(\"Unexpected IBAN pattern \" + ibanPat);\n        }\n        final StringBuilder sb = new StringBuilder();\n        final String cc = m.group(1); // country code\n        int totalLen = cc.length();\n        sb.append(cc);\n        int len = Integer.parseInt(m.group(2)); // length of part\n        String curType = m.group(3); // part type\n        for (int i = 4; i <= m.groupCount(); i += 2) {\n            if (m.group(i) == null) { // reached an optional group\n                break;\n            }\n            final int count = Integer.parseInt(m.group(i));\n            final String type = m.group(i + 1);\n            if (type.equals(curType)) { // more of the same type\n                len += count;\n            } else {\n                sb.append(formatToRE(curType, len));\n                totalLen += len;\n                curType = type;\n                len = count;\n            }\n        }\n        sb.append(formatToRE(curType, len));\n        totalLen += len;\n        if (ibanLen != totalLen) {\n            throw new IllegalArgumentException(\"IBAN pattern \" + ibanPat + \" does not match length \" + ibanLen);\n        }\n        return sb.toString();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[String]formatToRE(String,int)", "name": "formatToRE", "arg_nums": 2, "params": [{"name": "type", "type": "String"}, {"name": "len", "type": "int"}], "return_type": "String", "signature": "private static String formatToRE(final String type, final int len)", "original_string": "    private static String formatToRE(final String type, final int len) {\n        final char ctype = type.charAt(0); // assume type.length() == 1\n        switch (ctype) {\n        case 'n':\n            return String.format(\"\\\\\\\\d{%d}\", len);\n        case 'a':\n            return String.format(\"[A-Z]{%d}\", len);\n        case 'c':\n            return String.format(\"[A-Z0-9]{%d}\", len);\n        default:\n            throw new IllegalArgumentException(\"Unexpected type \" + type);\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": " convert IBAN type string and length to regex"}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "a", "type": "String[]"}], "return_type": "void", "signature": "public static void main(final String[] a)", "original_string": "    public static void main(final String[] a) throws Exception {\n        final IBANValidator validator = new IBANValidator();\n        final File ibanTsv = new File(\"target\", \"iban-registry.tsv\");\n        int countries = 0;\n        if (ibanTsv.canRead()) {\n            countries = checkIBAN(ibanTsv, validator);\n        } else {\n            System.out.println(\"Please load the file \" + ibanTsv.getCanonicalPath() + \" from https://www.swift.com/standards/data-standards/iban\");\n        }\n        System.out.println(\"Processed \" + countries + \" countries.\");\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest.[void]printEntry(String,String,String,String)", "name": "printEntry", "arg_nums": 4, "params": [{"name": "ccode", "type": "String"}, {"name": "length", "type": "String"}, {"name": "ib", "type": "String"}, {"name": "country", "type": "String"}], "return_type": "void", "signature": "private static void printEntry(final String ccode, final String length, final String ib, final String country)", "original_string": "    private static void printEntry(final String ccode, final String length, final String ib, final String country) {\n        final String fmt = String.format(\"\\\"%s\\\"\", ib);\n        System.out.printf(\"            new Validator(\\\"%s\\\", %s, %-40s), // %s\\n\", ccode, length, fmt, country);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java", "class_name": "IBANValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IBANValidatorTest.java.IBANValidatorTest", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        validator = new PercentValidator();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java", "class_name": "PercentValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n        validator = null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java", "class_name": "PercentValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/PercentValidatorTest.java.PercentValidatorTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTear down\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java.LongValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new LongValidator(false, 0);\n        strictValidator = new LongValidator();\n\n        testPattern = \"#,###\";\n\n        // testValidateMinMax()\n        max = null;\n        maxPlusOne = null;\n        min = null;\n        minMinusOne = null;\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\", \"1.2\", LONG_MAX_1, LONG_MIN_1, NINES };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\", \"\", LONG_MAX_1, LONG_MIN_1, NINES };\n\n        // testValid()\n        testNumber = Long.valueOf(1234);\n        testZero = Long.valueOf(0);\n        validStrict = new String[] { \"0\", \"1234\", \"1,234\", LONG_MAX, LONG_MIN };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber, LONG_MAX_VAL, LONG_MIN_VAL };\n        valid = new String[] { \"0\", \"1234\", \"1,234\", \"1,234.5\", \"1234X\", LONG_MAX, LONG_MIN, LONG_MAX_0, LONG_MIN_0 };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber, LONG_MAX_VAL, LONG_MIN_VAL, LONG_MAX_VAL, LONG_MIN_VAL };\n\n        testStringUS = \"1,234\";\n        testStringDE = \"1.234\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java", "class_name": "LongValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/LongValidatorTest.java.LongValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]main(String[])", "name": "main", "arg_nums": 1, "params": [{"name": "args", "type": "String[]"}], "return_type": "void", "signature": "public static void main(final String[] args)", "original_string": "    public static void main(final String[] args) {\n        final EmailValidator validator = EmailValidator.getInstance();\n        for (final String arg : args) {\n            System.out.printf(\"%s: %s%n\", arg, validator.isValid(arg));\n        }\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    public void setUp()", "original_string": "    @BeforeEach\n    public void setUp() {\n        validator = EmailValidator.getInstance();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java", "class_name": "EmailValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/EmailValidatorTest.java.EmailValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    public", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        Locale.setDefault(Locale.US);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n        validator = null;\n        strictValidator = null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java", "class_name": "AbstractNumberValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractNumberValidatorTest.java.AbstractNumberValidatorTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTear down\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java.ShortValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new ShortValidator(false, 0);\n        strictValidator = new ShortValidator();\n\n        testPattern = \"#,###\";\n\n        // testValidateMinMax()\n        max = Short.valueOf(Short.MAX_VALUE);\n        maxPlusOne = Long.valueOf(max.longValue() + 1);\n        min = Short.valueOf(Short.MIN_VALUE);\n        minMinusOne = Long.valueOf(min.longValue() - 1);\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\", \"1.2\" };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\" };\n\n        // testValid()\n        testNumber = Short.valueOf((short) 1234);\n        testZero = Short.valueOf((short) 0);\n        validStrict = new String[] { \"0\", \"1234\", \"1,234\" };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber };\n        valid = new String[] { \"0\", \"1234\", \"1,234\", \"1,234.5\", \"1234X\" };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber };\n\n        testStringUS = \"1,234\";\n        testStringDE = \"1.234\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java", "class_name": "ShortValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/ShortValidatorTest.java.ShortValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Override\n    @BeforeEach\n    protected void setUp()", "original_string": "    @Override\n    @BeforeEach\n    protected void setUp() {\n        super.setUp();\n\n        validator = new IntegerValidator(false, 0);\n        strictValidator = new IntegerValidator();\n\n        testPattern = \"#,###\";\n\n        // testValidateMinMax()\n        max = Integer.valueOf(Integer.MAX_VALUE);\n        maxPlusOne = Long.valueOf(max.longValue() + 1);\n        min = Integer.valueOf(Integer.MIN_VALUE);\n        minMinusOne = Long.valueOf(min.longValue() - 1);\n\n        // testInvalidStrict()\n        invalidStrict = new String[] { null, \"\", \"X\", \"X12\", \"12X\", \"1X2\", \"1.2\", INT_MAX_1, INT_MIN_1 };\n\n        // testInvalidNotStrict()\n        invalid = new String[] { null, \"\", \"X\", \"X12\", INT_MAX_1, INT_MIN_1 };\n\n        // testValid()\n        testNumber = Integer.valueOf(1234);\n        testZero = Integer.valueOf(0);\n        validStrict = new String[] { \"0\", \"1234\", \"1,234\", INT_MAX, INT_MIN };\n        validStrictCompare = new Number[] { testZero, testNumber, testNumber, INT_MAX_VAL, INT_MIN_VAL };\n        valid = new String[] { \"0\", \"1234\", \"1,234\", \"1,234.5\", \"1234X\", INT_MAX, INT_MIN, INT_MAX_0, INT_MIN_0 };\n        validCompare = new Number[] { testZero, testNumber, testNumber, testNumber, testNumber, INT_MAX_VAL, INT_MIN_VAL, INT_MAX_VAL, INT_MIN_VAL };\n\n        testStringUS = \"1,234\";\n        testStringDE = \"1.234\";\n\n        // Localized Pattern test\n        localeValue = testStringDE;\n        localePattern = \"#.###\";\n        testLocale = Locale.GERMANY;\n        localeExpected = testNumber;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java", "class_name": "IntegerValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/IntegerValidatorTest.java.IntegerValidatorTest", "attributes": {"modifiers": "@Override\n    @BeforeEach\n    protected", "marker_annotations": ["@Override", "@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[Calendar]createCalendar(TimeZone,int,int)", "name": "createCalendar", "arg_nums": 3, "params": [{"name": "zone", "type": "TimeZone"}, {"name": "date", "type": "int"}, {"name": "time", "type": "int"}], "return_type": "Calendar", "signature": "protected static Calendar createCalendar(final TimeZone zone, final int date, final int time)", "original_string": "    protected static Calendar createCalendar(final TimeZone zone, final int date, final int time) {\n        final Calendar calendar = zone == null ? Calendar.getInstance() : Calendar.getInstance(zone);\n        final int year = date / 10000 * 10000;\n        final int mth = date / 100 * 100 - year;\n        final int day = date - (year + mth);\n        final int hour = time / 10000 * 10000;\n        final int min = time / 100 * 100 - hour;\n        final int sec = time - (hour + min);\n        calendar.set(Calendar.YEAR, year / 10000);\n        calendar.set(Calendar.MONTH, mth / 100 - 1);\n        calendar.set(Calendar.DATE, day);\n        calendar.set(Calendar.HOUR_OF_DAY, hour / 10000);\n        calendar.set(Calendar.MINUTE, min / 100);\n        calendar.set(Calendar.SECOND, sec);\n        calendar.set(Calendar.MILLISECOND, 0);\n        return calendar;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\nCreate a calendar instance for a specified time zone, date and time.\n\n@param zone The time zone\n@param date The date in yyyyMMdd format\n@param time the time in HH:mm:ss format\n@return the new Calendar instance.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[Date]createDate(TimeZone,int,int)", "name": "createDate", "arg_nums": 3, "params": [{"name": "zone", "type": "TimeZone"}, {"name": "date", "type": "int"}, {"name": "time", "type": "int"}], "return_type": "Date", "signature": "protected static Date createDate(final TimeZone zone, final int date, final int time)", "original_string": "    protected static Date createDate(final TimeZone zone, final int date, final int time) {\n        final Calendar calendar = createCalendar(zone, date, time);\n        return calendar.getTime();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "protected static", "marker_annotations": [], "non_marker_annotations": ["protected", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nCreate a date instance for a specified time zone, date and time.\n\n@param zone The time zone\n@param date The date in yyyyMMdd format\n@param time the time in HH:mm:ss format\n@return the new Date instance.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n        validator = null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java", "class_name": "AbstractCalendarValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/AbstractCalendarValidatorTest.java.AbstractCalendarValidatorTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTear down\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        usDollar = new DecimalFormatSymbols(Locale.US).getCurrencySymbol();\n        ukPound = new DecimalFormatSymbols(Locale.UK).getCurrencySymbol();\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java", "class_name": "CurrencyValidatorTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/CurrencyValidatorTest.java.CurrencyValidatorTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java.CASNumberCheckDigitTest.[String]removeCheckDigit(String)", "name": "removeCheckDigit", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    protected String removeCheckDigit(final String code)", "original_string": "    @Override\n    protected String removeCheckDigit(final String code) {\n        final String cde = (String) CASNumberCheckDigit.REGEX_VALIDATOR.validate(code);\n        if (cde == null || cde.length() <= checkDigitLth) {\n            return null;\n        }\n        return cde.substring(0, cde.length() - checkDigitLth);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java", "class_name": "CASNumberCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java.CASNumberCheckDigitTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n{@inheritDoc}\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java.CASNumberCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = CASNumberCheckDigit.getInstance();\n        valid = new String[] {MIN, WATER, ETHANOL, ASPIRIN, COFFEIN, FORMALDEHYDE, DEXAMETHASONE, ARSENIC, ASBESTOS, MAX};\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java", "class_name": "CASNumberCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigitTest.java.CASNumberCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigitTest.java.ISBN10CheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = ISBN10CheckDigit.ISBN10_CHECK_DIGIT;\n        valid = new String[] { \"1930110995\", \"020163385X\", \"1932394354\", \"1590596277\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigitTest.java", "class_name": "ISBN10CheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigitTest.java.ISBN10CheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[String]checkDigit(String)", "name": "checkDigit", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "protected String checkDigit(final String code)", "original_string": "    protected String checkDigit(final String code) {\n        if (code == null || code.length() <= checkDigitLth) {\n            return \"\";\n        }\n        final int start = code.length() - checkDigitLth;\n        return code.substring(start);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the check digit (i.e. last character) for a code.\n\n@param code The code\n@return The check digit\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[String[]]createInvalidCodes(String[])", "name": "createInvalidCodes", "arg_nums": 1, "params": [{"name": "codes", "type": "String[]"}], "return_type": "String[]", "signature": "protected String[] createInvalidCodes(final String[] codes)", "original_string": "    protected String[] createInvalidCodes(final String[] codes) {\n        final List<String> list = new ArrayList<>();\n\n        // create invalid check digit values\n        for (final String fullCode : codes) {\n            final String code = removeCheckDigit(fullCode);\n            final String check = checkDigit(fullCode);\n            for (int j = 0; j < POSSIBLE_CHECK_DIGITS.length(); j++) {\n                final String curr = POSSIBLE_CHECK_DIGITS.substring(j, j + 1); // \"\" + Character.forDigit(j, 10);\n                if (!curr.equals(check)) {\n                    list.add(code + curr);\n                }\n            }\n        }\n\n        return list.toArray(new String[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nReturns an array of codes with invalid check digits.\n\n@param codes Codes with valid check digits\n@return Codes with invalid check digits\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[String]removeCheckDigit(String)", "name": "removeCheckDigit", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "protected String removeCheckDigit(final String code)", "original_string": "    protected String removeCheckDigit(final String code) {\n        if (code == null || code.length() <= checkDigitLth) {\n            return null;\n        }\n        return code.substring(0, code.length() - checkDigitLth);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a code with the Check Digit (i.e. last character) removed.\n\n@param code The code\n@return The code without the check digit\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest.[void]tearDown()", "name": "tearDown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@AfterEach\n    protected void tearDown()", "original_string": "    @AfterEach\n    protected void tearDown() {\n        valid = null;\n        routine = null;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java", "class_name": "AbstractCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/AbstractCheckDigitTest.java.AbstractCheckDigitTest", "attributes": {"modifiers": "@AfterEach\n    protected", "marker_annotations": ["@AfterEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTear Down - clears routine and valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigitTest.java.VerhoeffCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = VerhoeffCheckDigit.VERHOEFF_CHECK_DIGIT;\n        valid = new String[] { \"15\", \"1428570\", \"12345678902\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigitTest.java", "class_name": "VerhoeffCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigitTest.java.VerhoeffCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigitTest.java.ISSNCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = ISSNCheckDigit.ISSN_CHECK_DIGIT;\n        valid = new String[] { \"03178471\", \"1050124X\", \"15626865\", \"10637710\", \"17487188\", \"02642875\", \"17500095\", \"11881534\", \"19111479\", \"19111460\",\n                \"00016772\", \"1365201X\", };\n        invalid = new String[] { \"03178472\", // wrong check\n                \"1050-124X\", // format char\n                \" 1365201X\", \"1365201X \", \" 1365201X \", };\n        missingMessage = \"Code is missing\";\n        zeroSum = \"00000000\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigitTest.java", "class_name": "ISSNCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigitTest.java.ISSNCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java.CUSIPCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = CUSIPCheckDigit.CUSIP_CHECK_DIGIT;\n        valid = new String[] { \"037833100\", \"931142103\", \"837649128\", \"392690QT3\", \"594918104\", \"86770G101\", \"Y8295N109\", \"G8572F100\" };\n        invalid = new String[] { \"0378#3100\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java", "class_name": "CUSIPCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigitTest.java.CUSIPCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java.ISINCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = ISINCheckDigit.ISIN_CHECK_DIGIT;\n        valid = new String[] { \"US0378331005\", \"BMG8571G1096\", \"AU0000XVGZA3\", \"GB0002634946\", \"FR0004026250\", \"3133EHHF3\", // see VALIDATOR-422 Valid\n                                                                                                                            // check-digit, but not valid ISIN\n                \"DK0009763344\", \"dk0009763344\", // TODO lowercase is currently accepted, but is this valid?\n                \"AU0000xvgza3\", // lowercase NSIN\n                \"EZ0000000003\", // Invented; for use in ISINValidatorTest\n                \"XS0000000009\", // ditto\n                \"AA0000000006\", // ditto\n        };\n        invalid = new String[] { \"0378#3100\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java", "class_name": "ISINCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigitTest.java.ISINCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigitTest.java.EAN13CheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = EAN13CheckDigit.EAN13_CHECK_DIGIT;\n        valid = new String[] { \"9780072129519\", \"9780764558313\", \"4025515373438\", \"0095673400332\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigitTest.java", "class_name": "EAN13CheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigitTest.java.EAN13CheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest.[]IBANCheckDigitTest()", "name": "IBANCheckDigitTest", "arg_nums": 0, "params": [], "return_type": "", "signature": "public IBANCheckDigitTest()", "original_string": "    public IBANCheckDigitTest() {\n        checkDigitLth = 2;\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "class_name": "IBANCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest.[String]checkDigit(String)", "name": "checkDigit", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    protected String checkDigit(final String code)", "original_string": "    @Override\n    protected String checkDigit(final String code) {\n        if (code == null || code.length() <= checkDigitLth) {\n            return \"\";\n        }\n        return code.substring(2, 4);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "class_name": "IBANCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the check digit (i.e. last character) for a code.\n\n@param code The code\n@return The check digit\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest.[String[]]createInvalidCodes(String[])", "name": "createInvalidCodes", "arg_nums": 1, "params": [{"name": "codes", "type": "String[]"}], "return_type": "String[]", "signature": "@Override\n    protected String[] createInvalidCodes(final String[] codes)", "original_string": "    @Override\n    protected String[] createInvalidCodes(final String[] codes) {\n        final List<String> list = new ArrayList<>();\n\n        // create invalid check digit values\n        for (final String code2 : codes) {\n            final String code = removeCheckDigit(code2);\n            final String check = checkDigit(code2);\n            for (int j = 2; j <= 98; j++) { // check digits can be from 02-98 (00 and 01 are not possible)\n                final String curr = j > 9 ? \"\" + j : \"0\" + j;\n                if (!curr.equals(check)) {\n                    list.add(code.substring(0, 2) + curr + code.substring(4));\n                }\n            }\n        }\n\n        return list.toArray(new String[0]);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "class_name": "IBANCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nReturns an array of codes with invalid check digits.\n\n@param codes Codes with valid check digits\n@return Codes with invalid check digits\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest.[String]removeCheckDigit(String)", "name": "removeCheckDigit", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    protected String removeCheckDigit(final String code)", "original_string": "    @Override\n    protected String removeCheckDigit(final String code) {\n        return code.substring(0, 2) + \"00\" + code.substring(4);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "class_name": "IBANCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a code with the Check Digits (i.e. characters 3&4) set to \"00\".\n\n@param code The code\n@return The code with the zeroed check digits\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = IBANCheckDigit.IBAN_CHECK_DIGIT;\n        valid = new String[] { \"AD1200012030200359100100\", // Andorra\n                \"AE070331234567890123456\", // United Arab Emirates\n                \"AL47212110090000000235698741\", // Albania\n                \"AT611904300234573201\", // Austria\n                \"AZ21NABZ00000000137010001944\", // Azerbaijan\n                \"BA391290079401028494\", // Bosnia and Herzegovina\n                \"BE62510007547061\", // Belgium\n                \"BE68539007547034\", // Belgium\n                \"BG80BNBG96611020345678\", // Bulgaria\n                \"BH67BMAG00001299123456\", // Bahrain\n                \"BI4210000100010000332045181\", // Burundi\n                \"BR1800000000141455123924100C2\", // Brazil\n                \"BY13NBRB3600900000002Z00AB00\", // Belarus\n                \"CH3900700115201849173\", // Switzerland\n                \"CH9300762011623852957\", // Switzerland\n                \"CR05015202001026284066\", // Costa Rica\n                \"CY17002001280000001200527600\", // Cyprus\n                \"CZ6508000000192000145399\", // Czechoslovakia\n                \"DE89370400440532013000\", // Germany\n                \"DJ2110002010010409943020008\", // Djibouti\n                \"DK5000400440116243\", // Denmark\n                \"DO28BAGR00000001212453611324\", // Dominican Republic\n                \"EE382200221020145685\", // Estonia\n                \"ES8023100001180000012345\", // Spain\n                \"FI2112345600000785\", // Finland\n                \"FO6264600001631634\", // Denmark (Faroes)\n                \"FR1420041010050500013M02606\", // France\n                \"GB29NWBK60161331926819\", // UK\n                \"GI75NWBK000000007099453\", // Gibraltar\n                \"GL8964710001000206\", // Denmark (Greenland)\n                \"GR1601101250000000012300695\", // Greece\n                \"GT82TRAJ01020000001210029690\", // Guatemala\n                \"HR1210010051863000160\", // Croatia\n                \"HU42117730161111101800000000\", // Hungary\n                \"IE29AIBK93115212345678\", // Ireland\n                \"IL620108000000099999999\", // Israel\n                \"IQ98NBIQ850123456789012\", // Iraq\n                \"IS140159260076545510730339\", // Iceland\n                \"IT60X0542811101000000123456\", // Italy\n                \"JO94CBJO0010000000000131000302\", // Jordan\n                \"KW81CBKU0000000000001234560101\", // Kuwait\n                \"KZ86125KZT5004100100\", // Kazakhstan\n                \"LB62099900000001001901229114\", // Lebanon\n                \"LC55HEMM000100010012001200023015\", // Saint Lucia\n                \"LI21088100002324013AA\", // Liechtenstein (Principality of)\n                \"LT121000011101001000\", // Lithuania\n                \"LU280019400644750000\", // Luxembourg\n                \"LV80BANK0000435195001\", // Latvia\n                \"MC5811222000010123456789030\", // Monaco\n                \"MD24AG000225100013104168\", // Moldova\n                \"ME25505000012345678951\", // Montenegro\n                \"MK07250120000058984\", // Macedonia, Former Yugoslav Republic of\n                \"MR1300020001010000123456753\", // Mauritania\n                \"MT84MALT011000012345MTLCAST001S\", // Malta\n                \"MU17BOMM0101101030300200000MUR\", // Mauritius\n                \"NL39RABO0300065264\", // Netherlands\n                \"NL91ABNA0417164300\", // Netherlands\n                \"NO9386011117947\", // Norway\n                \"PK36SCBL0000001123456702\", // Pakistan\n                \"PL27114020040000300201355387\", // Poland\n                \"PL60102010260000042270201111\", // Poland\n                \"PS92PALS000000000400123456702\", // Palestine, State of\n                \"PT50000201231234567890154\", // Portugal\n                \"QA58DOHB00001234567890ABCDEFG\", // Qatar\n                \"RO49AAAA1B31007593840000\", // Romania\n                \"RS35260005601001611379\", // Serbia\n                \"RU0204452560040702810412345678901\", // Russia\n                \"SA0380000000608010167519\", // Saudi Arabia\n                \"SC18SSCB11010000000000001497USD\", // Seychelles\n                \"SD8811123456789012\", // Sudan\n                \"SE3550000000054910000003\", // Sweden\n                \"SD2129010501234001\", // Sudan\n                \"SI56191000000123438\", // Slovenia\n                \"SK3112000000198742637541\", // Slovak Republic\n                \"SM86U0322509800000000270100\", // San Marino\n                \"ST68000100010051845310112\", // Sao Tome and Principe\n                \"SV62CENR00000000000000700025\", // El Salvador\n                \"TL380080012345678910157\", // Timor-Leste\n                \"TN5910006035183598478831\", // Tunisia\n                \"TR330006100519786457841326\", // Turkey\n                \"UA213223130000026007233566001\", // Ukraine\n                \"VA59001123000012345678\", // Vatican City State\n                \"VG96VPVG0000012345678901\", // Virgin Islands, British\n                \"XK051212012345678906\", // Republic of Kosovo\n\n                // Codes AA and ZZ will never be used as ISO countries nor in IBANs\n                // add some dummy calculated codes to test the limits\n                // Current minimum length is Norway = 15\n                // Current maximum length is Malta = 31\n                // N.B. These codes will fail online checkers which validate the IBAN format\n                // 234567890123456789012345678901\n                \"AA0200000000053\", \"AA9700000000089\", \"AA9800000000071\", \"ZZ02ZZZZZZZZZZZZZZZZZZZZZZZZZ04\", \"ZZ97ZZZZZZZZZZZZZZZZZZZZZZZZZ40\",\n                \"ZZ98ZZZZZZZZZZZZZZZZZZZZZZZZZ22\", };\n        /*\n         * sources https://intranet.birmingham.ac.uk/finance/documents/public/IBAN.pdf\n         * http://www.paymentscouncil.org.uk/resources_and_publications/ibans_in_europe/\n         */\n        invalid = new String[] { \"510007+47061BE63\", \"IE01AIBK93118702569045\", \"AA0000000000089\", \"AA9900000000053\", };\n        zeroSum = null;\n        missingMessage = \"Invalid Code length=0\";\n\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java", "class_name": "IBANCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigitTest.java.IBANCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenEAN13CheckDigitTest.java.ModulusTenEAN13CheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 3 }, true);\n        valid = new String[] { \"9780072129519\", \"9780764558313\", \"4025515373438\", \"0095673400332\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenEAN13CheckDigitTest.java", "class_name": "ModulusTenEAN13CheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenEAN13CheckDigitTest.java.ModulusTenEAN13CheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigitTest.java.SedolCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = SedolCheckDigit.SEDOL_CHECK_DIGIT;\n        valid = new String[] { \"0263494\", \"0870612\", \"B06LQ97\", \"3437575\", \"B07LF55\", };\n        invalid = new String[] { \"123#567\" };\n        zeroSum = \"0000000\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigitTest.java", "class_name": "SedolCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigitTest.java.SedolCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenSedolCheckDigitTest.java.ModulusTenSedolCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 3, 1, 7, 3, 9, 1 });\n        valid = new String[] { \"0263494\", \"0870612\", \"B06LQ97\", \"3437575\", \"B07LF55\", };\n        invalid = new String[] { \"123#567\" };\n        zeroSum = \"0000000\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenSedolCheckDigitTest.java", "class_name": "ModulusTenSedolCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenSedolCheckDigitTest.java.ModulusTenSedolCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigitTest.java.ISBNCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = ISBNCheckDigit.ISBN_CHECK_DIGIT;\n        valid = new String[] { \"9780072129519\", \"9780764558313\", \"1930110995\", \"020163385X\", \"1590596277\", // ISBN-10 Ubuntu Book\n                \"9781590596272\" // ISBN-13 Ubuntu Book\n        };\n        missingMessage = \"ISBN Code is missing\";\n        zeroSum = \"000000000000\";\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigitTest.java", "class_name": "ISBNCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigitTest.java.ISBNCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenABACheckDigitTest.java.ModulusTenABACheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 7, 3 }, true);\n        valid = new String[] { \"123456780\", \"123123123\", \"011000015\", \"111000038\", \"231381116\", \"121181976\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenABACheckDigitTest.java", "class_name": "ModulusTenABACheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenABACheckDigitTest.java.ModulusTenABACheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigitTest.java.ABANumberCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = ABANumberCheckDigit.ABAN_CHECK_DIGIT;\n        valid = new String[] { \"123456780\", \"123123123\", \"011000015\", \"111000038\", \"231381116\", \"121181976\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigitTest.java", "class_name": "ABANumberCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigitTest.java.ABANumberCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java.ECNumberCheckDigitTest.[String]removeCheckDigit(String)", "name": "removeCheckDigit", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    protected String removeCheckDigit(final String code)", "original_string": "    @Override\n    protected String removeCheckDigit(final String code) {\n        final String cde = (String) ECNumberCheckDigit.REGEX_VALIDATOR.validate(code);\n        if (cde == null || cde.length() <= checkDigitLth) {\n            return null;\n        }\n        return cde.substring(0, cde.length() - checkDigitLth);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java", "class_name": "ECNumberCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java.ECNumberCheckDigitTest", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n{@inheritDoc}\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java.ECNumberCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = ECNumberCheckDigit.getInstance();\n        valid = new String[] {MIN, FORMALDEHYDE, DEXAMETHASONE, ARSENIC, ASBESTOS, MAX};\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java", "class_name": "ECNumberCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigitTest.java.ECNumberCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java.ModulusTenCUSIPCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 2 }, true, true);\n        valid = new String[] { \"037833100\", \"931142103\", \"837649128\", \"392690QT3\", \"594918104\", \"86770G101\", \"Y8295N109\", \"G8572F100\" };\n        invalid = new String[] { \"0378#3100\" };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java", "class_name": "ModulusTenCUSIPCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCUSIPCheckDigitTest.java.ModulusTenCUSIPCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenLuhnCheckDigitTest.java.ModulusTenLuhnCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n        routine = new ModulusTenCheckDigit(new int[] { 1, 2 }, true, true);\n\n        valid = new String[] { VALID_VISA, VALID_SHORT_VISA, VALID_AMEX, VALID_MASTERCARD, VALID_DISCOVER, VALID_DINERS };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenLuhnCheckDigitTest.java", "class_name": "ModulusTenLuhnCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/ModulusTenLuhnCheckDigitTest.java.ModulusTenLuhnCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigitTest.java.LuhnCheckDigitTest.[void]setUp()", "name": "setUp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@BeforeEach\n    protected void setUp()", "original_string": "    @BeforeEach\n    protected void setUp() {\n\n        routine = LuhnCheckDigit.LUHN_CHECK_DIGIT;\n\n        valid = new String[] { VALID_VISA, VALID_SHORT_VISA, VALID_AMEX, VALID_MASTERCARD, VALID_DISCOVER, VALID_DINERS };\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigitTest.java", "class_name": "LuhnCheckDigitTest", "class_uri": "src/test/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigitTest.java.LuhnCheckDigitTest", "attributes": {"modifiers": "@BeforeEach\n    protected", "marker_annotations": ["@BeforeEach"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets up routine & valid codes.\n"}, {"uris": "src/test/java/org/apache/commons/validator/custom/CustomValidatorResources.java.CustomValidatorResources.[]CustomValidatorResources(InputStream)", "name": "CustomValidatorResources", "arg_nums": 1, "params": [{"name": "in", "type": "InputStream"}], "return_type": "", "signature": "public CustomValidatorResources(final InputStream in)", "original_string": "    public CustomValidatorResources(final InputStream in) throws IOException, SAXException {\n        super(in);\n    }", "default_arguments": null, "file": "src/test/java/org/apache/commons/validator/custom/CustomValidatorResources.java", "class_name": "CustomValidatorResources", "class_uri": "src/test/java/org/apache/commons/validator/custom/CustomValidatorResources.java.CustomValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a custom ValidatorResources object from an uri\n\n@param in InputStream for the validation.xml configuration file.\n@throws SAXException if the validation XML files are not valid or well formed.\n@throws IOException  if an I/O error occurs processing the XML files\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]addArg(Arg)", "name": "addArg", "arg_nums": 1, "params": [{"name": "arg", "type": "Arg"}], "return_type": "void", "signature": "public void addArg(final Arg arg)", "original_string": "    public void addArg(final Arg arg) {\n        // TODO this first if check can go away after arg0, etc. are removed from dtd\n        if (arg == null || arg.getKey() == null || arg.getKey().isEmpty()) {\n            return;\n        }\n\n        determineArgPosition(arg);\n        ensureArgsCapacity(arg);\n\n        Map<String, Arg> argMap = args[arg.getPosition()];\n        if (argMap == null) {\n            argMap = new HashMap<>();\n            args[arg.getPosition()] = argMap;\n        }\n\n        final String name = arg.getName();\n        argMap.put(name != null ? name : DEFAULT_ARG, arg);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd an {@code Arg} to the replacement argument list.\n@since 1.1\n@param arg Validation message's argument.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]addMsg(Msg)", "name": "addMsg", "arg_nums": 1, "params": [{"name": "msg", "type": "Msg"}], "return_type": "void", "signature": "public void addMsg(final Msg msg)", "original_string": "    public void addMsg(final Msg msg) {\n        getMsgMap().put(msg.getName(), msg);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code Msg} to the {@code Field}.\n@param msg A validation message.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]addVar(String,String,String)", "name": "addVar", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "value", "type": "String"}, {"name": "jsType", "type": "String"}], "return_type": "void", "signature": "public void addVar(final String name, final String value, final String jsType)", "original_string": "    public void addVar(final String name, final String value, final String jsType) {\n        this.addVar(new Var(name, value, jsType));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code Var}, based on the values passed in, to the\n{@code Field}.\n@param name Name of the validation.\n@param value The Argument's value.\n@param jsType The JavaScript type.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]addVar(Var)", "name": "addVar", "arg_nums": 1, "params": [{"name": "v", "type": "Var"}], "return_type": "void", "signature": "public void addVar(final Var v)", "original_string": "    public void addVar(final Var v) {\n        getVarMap().put(v.getName(), v);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code Var} to the {@code Field}.\n@param v The Validator Argument.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Object]clone()", "name": "clone", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "@Override\n    public Object clone()", "original_string": "    @Override\n    public Object clone() {\n        Field field = null;\n        try {\n            field = (Field) super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n\n        @SuppressWarnings(\"unchecked\") // empty array always OK; cannot check this at compile time\n        final Map<String, Arg>[] tempMap = new Map[args.length];\n        field.args = tempMap;\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                continue;\n            }\n\n            final Map<String, Arg> argMap = new HashMap<>(args[i]);\n            argMap.forEach((validatorName, arg) -> argMap.put(validatorName, (Arg) arg.clone()));\n            field.args[i] = argMap;\n        }\n\n        field.hVars = ValidatorUtils.copyFastHashMap(hVars);\n        field.hMsgs = ValidatorUtils.copyFastHashMap(hMsgs);\n\n        return field;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nCreates and returns a copy of this object.\n@return A copy of the Field.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]determineArgPosition(Arg)", "name": "determineArgPosition", "arg_nums": 1, "params": [{"name": "arg", "type": "Arg"}], "return_type": "void", "signature": "private void determineArgPosition(final Arg arg)", "original_string": "    private void determineArgPosition(final Arg arg) {\n\n        final int position = arg.getPosition();\n\n        // position has been explicity set\n        if (position >= 0) {\n            return;\n        }\n\n        // first arg to be added\n        if (args == null || args.length == 0) {\n            arg.setPosition(0);\n            return;\n        }\n\n        // determine the position of the last argument with\n        // the same name or the last default argument\n        final String keyName = arg.getName() == null ? DEFAULT_ARG : arg.getName();\n        int lastPosition = -1;\n        int lastDefault = -1;\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null && args[i].containsKey(keyName)) {\n                lastPosition = i;\n            }\n            if (args[i] != null && args[i].containsKey(DEFAULT_ARG)) {\n                lastDefault = i;\n            }\n        }\n\n        if (lastPosition < 0) {\n            lastPosition = lastDefault;\n        }\n\n        // allocate the next position\n        arg.setPosition(++lastPosition);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCalculate the position of the Arg\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]ensureArgsCapacity(Arg)", "name": "ensureArgsCapacity", "arg_nums": 1, "params": [{"name": "arg", "type": "Arg"}], "return_type": "void", "signature": "private void ensureArgsCapacity(final Arg arg)", "original_string": "    private void ensureArgsCapacity(final Arg arg) {\n        if (arg.getPosition() >= args.length) {\n            @SuppressWarnings(\"unchecked\") // cannot check this at compile time, but it is OK\n            final\n            Map<String, Arg>[] newArgs = new Map[arg.getPosition() + 1];\n            System.arraycopy(args, 0, newArgs, 0, args.length);\n            args = newArgs;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nEnsures that the args array can hold the given arg.  Resizes the array as\nnecessary.\n@param arg Determine if the args array is long enough to store this arg's\nposition.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]generateKey()", "name": "generateKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void generateKey()", "original_string": "    public void generateKey() {\n        if (isIndexed()) {\n            key = indexedListProperty + TOKEN_INDEXED + \".\" + property;\n        } else {\n            key = property;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nGenerate correct {@code key} value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Arg]getArg(int)", "name": "getArg", "arg_nums": 1, "params": [{"name": "position", "type": "int"}], "return_type": "Arg", "signature": "public Arg getArg(final int position)", "original_string": "    public Arg getArg(final int position) {\n        return this.getArg(DEFAULT_ARG, position);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Arg", "classes": []}, "docstring": "\nGets the default {@code Arg} object at the given position.\n@param position Validation message argument's position.\n@return The default Arg or null if not found.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Arg]getArg(String,int)", "name": "getArg", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "position", "type": "int"}], "return_type": "Arg", "signature": "public Arg getArg(final String key, final int position)", "original_string": "    public Arg getArg(final String key, final int position) {\n        if (position >= args.length || args[position] == null) {\n            return null;\n        }\n\n        final Arg arg = args[position].get(key);\n\n        // Didn't find default arg so exit, otherwise we would get into\n        // infinite recursion\n        if (arg == null && key.equals(DEFAULT_ARG)) {\n            return null;\n        }\n\n        return arg == null ? this.getArg(position) : arg;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Arg", "classes": []}, "docstring": "\nGets the {@code Arg} object at the given position.  If the key\nfinds a {@code null} value then the default value will be\nretrieved.\n@param key The name the Arg is stored under.  If not found, the default\nArg for the given position (if any) will be retrieved.\n@param position The Arg number to find.\n@return The Arg with the given name and position or null if not found.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Arg[]]getArgs(String)", "name": "getArgs", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "Arg[]", "signature": "public Arg[] getArgs(final String key)", "original_string": "    public Arg[] getArgs(final String key) {\n        final Arg[] argList = new Arg[args.length];\n\n        for (int i = 0; i < args.length; i++) {\n            argList[i] = this.getArg(key, i);\n        }\n\n        return argList;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Arg[]", "classes": []}, "docstring": "\nRetrieves the Args for the given validator name.\n@param key The validator's args to retrieve.\n@return An Arg[] sorted by the Args' positions (i.e. the Arg at index 0\nhas a position of 0).\n@since 1.1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[List<String>]getDependencyList()", "name": "getDependencyList", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> getDependencyList()", "original_string": "    public List<String> getDependencyList() {\n        return Collections.unmodifiableList(dependencyList);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\nGets an unmodifiable {@code List} of the dependencies in the same\norder they were defined in parameter passed to the setDepends() method.\n@return A list of the Field's dependancies.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getDepends()", "name": "getDepends", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getDepends()", "original_string": "    public String getDepends() {\n        return depends;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the validation rules for this field as a comma separated list.\n@return A comma separated list of validator names.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[int]getFieldOrder()", "name": "getFieldOrder", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getFieldOrder()", "original_string": "    public int getFieldOrder() {\n        return fieldOrder;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the position of the {@code Field} in the validation list.\n@return The field position.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getIndexedListProperty()", "name": "getIndexedListProperty", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getIndexedListProperty()", "original_string": "    public String getIndexedListProperty() {\n        return indexedListProperty;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the indexed property name of the field.  This\nis the method name that will return an array or a\n{@link Collection} used to retrieve the\nlist and then loop through the list performing the specified\nvalidations.\n@return The field's indexed List property name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getIndexedProperty()", "name": "getIndexedProperty", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getIndexedProperty()", "original_string": "    public String getIndexedProperty() {\n        return indexedProperty;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the indexed property name of the field.  This\nis the method name that can take an {@code int} as\na parameter for indexed property value retrieval.\n@return The field's indexed property name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Object[]]getIndexedProperty(Object)", "name": "getIndexedProperty", "arg_nums": 1, "params": [{"name": "bean", "type": "Object"}], "return_type": "Object[]", "signature": "Object[] getIndexedProperty(final Object bean)", "original_string": "    Object[] getIndexedProperty(final Object bean) throws ValidatorException {\n        Object indexProp = null;\n\n        try {\n            indexProp = PropertyUtils.getProperty(bean, getIndexedListProperty());\n\n        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n            throw new ValidatorException(e.getMessage());\n        }\n\n        if (indexProp instanceof Collection) {\n            return ((Collection<?>) indexProp).toArray();\n\n        }\n        if (indexProp.getClass().isArray()) {\n            return (Object[]) indexProp;\n\n        }\n        throw new ValidatorException(getKey() + \" is not indexed\");\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nReturns an indexed property from the object we're validating.\n\n@param bean The bean to extract the indexed values from.\n@throws ValidatorException If there's an error looking up the property\nor, the property found is not indexed.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[int]getIndexedPropertySize(Object)", "name": "getIndexedPropertySize", "arg_nums": 1, "params": [{"name": "bean", "type": "Object"}], "return_type": "int", "signature": "private int getIndexedPropertySize(final Object bean)", "original_string": "    private int getIndexedPropertySize(final Object bean) throws ValidatorException {\n        Object indexProp = null;\n\n        try {\n            indexProp = PropertyUtils.getProperty(bean, getIndexedListProperty());\n\n        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n            throw new ValidatorException(e.getMessage());\n        }\n\n        if (indexProp == null) {\n            return 0;\n        }\n        if (indexProp instanceof Collection) {\n            return ((Collection<?>) indexProp).size();\n        }\n        if (indexProp.getClass().isArray()) {\n            return ((Object[]) indexProp).length;\n        }\n        throw new ValidatorException(getKey() + \" is not indexed\");\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns the size of an indexed property from the object we're validating.\n\n@param bean The bean to extract the indexed values from.\n@throws ValidatorException If there's an error looking up the property\nor, the property found is not indexed.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getKey()", "name": "getKey", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getKey()", "original_string": "    public String getKey() {\n        if (key == null) {\n            generateKey();\n        }\n\n        return key;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets a unique key based on the property and indexedProperty fields.\n@return a unique key for the field.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Msg]getMessage(String)", "name": "getMessage", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "Msg", "signature": "public Msg getMessage(final String key)", "original_string": "    public Msg getMessage(final String key) {\n        return getMsgMap().get(key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Msg", "classes": []}, "docstring": "\nRetrieve a message object.\n@since 1.1.4\n@param key Validation key.\n@return A validation message for a specified validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Msg>]getMessages()", "name": "getMessages", "arg_nums": 0, "params": [], "return_type": "Map<String, Msg>", "signature": "public Map<String, Msg> getMessages()", "original_string": "    public Map<String, Msg> getMessages() {\n        return Collections.unmodifiableMap(getMsgMap());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Msg>", "classes": []}, "docstring": "\nThe {@code Field}'s messages are returned as an\nunmodifiable {@link Map}.\n@since 1.1.4\n@return Map of validation messages for the field.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getMsg(String)", "name": "getMsg", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "String", "signature": "public String getMsg(final String key)", "original_string": "    public String getMsg(final String key) {\n        final Msg msg = getMessage(key);\n        return msg == null ? null : msg.getKey();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRetrieve a message value.\n@param key Validation key.\n@return A validation message for a specified validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Msg>]getMsgMap()", "name": "getMsgMap", "arg_nums": 0, "params": [], "return_type": "Map<String, Msg>", "signature": "@SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected Map<String, Msg> getMsgMap()", "original_string": "    @SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected Map<String, Msg> getMsgMap() {\n        return hMsgs;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": ["// FastHashMap does not support generics"], "return_type": "Map<String, Msg>", "classes": []}, "docstring": "\nReturns a Map of String Msg names to Msg objects.\n@since 1.2.0\n@return A Map of the Field's messages.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[int]getPage()", "name": "getPage", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getPage()", "original_string": "    public int getPage() {\n        return page;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the page value that the Field is associated with for\nvalidation.\n@return The page number.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getProperty()", "name": "getProperty", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getProperty()", "original_string": "    public String getProperty() {\n        return property;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the property name of the field.\n@return The field's property name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Var]getVar(String)", "name": "getVar", "arg_nums": 1, "params": [{"name": "mainKey", "type": "String"}], "return_type": "Var", "signature": "public Var getVar(final String mainKey)", "original_string": "    public Var getVar(final String mainKey) {\n        return getVarMap().get(mainKey);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Var", "classes": []}, "docstring": "\nRetrieve a variable.\n@param mainKey The Variable's key\n@return the Variable\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Var>]getVarMap()", "name": "getVarMap", "arg_nums": 0, "params": [], "return_type": "Map<String, Var>", "signature": "@SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected Map<String, Var> getVarMap()", "original_string": "    @SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected Map<String, Var> getVarMap() {\n        return hVars;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\") // FastHashMap does not support generics\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": ["// FastHashMap does not support generics"], "return_type": "Map<String, Var>", "classes": []}, "docstring": "\nReturns a Map of String Var names to Var objects.\n@since 1.2.0\n@return A Map of the Field's variables.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[Map<String, Var>]getVars()", "name": "getVars", "arg_nums": 0, "params": [], "return_type": "Map<String, Var>", "signature": "public Map<String, Var> getVars()", "original_string": "    public Map<String, Var> getVars() {\n        return Collections.unmodifiableMap(getVarMap());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Var>", "classes": []}, "docstring": "\nThe {@code Field}'s variables are returned as an\nunmodifiable {@link Map}.\n@return the Map of Variable's for a Field.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]getVarValue(String)", "name": "getVarValue", "arg_nums": 1, "params": [{"name": "mainKey", "type": "String"}], "return_type": "String", "signature": "public String getVarValue(final String mainKey)", "original_string": "    public String getVarValue(final String mainKey) {\n        String value = null;\n\n        final Var v = getVarMap().get(mainKey);\n        if (v != null) {\n            value = v.getValue();\n        }\n\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRetrieve a variable's value.\n@param mainKey The Variable's key\n@return the Variable's value\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]handleMissingAction(String)", "name": "handleMissingAction", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "private void handleMissingAction(final String name)", "original_string": "    private void handleMissingAction(final String name) throws ValidatorException {\n        throw new ValidatorException(\"No ValidatorAction named \" + name\n                + \" found for field \" + getProperty());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCalled when a validator name is used in a depends clause but there is\nno know ValidatorAction configured for that name.\n@param name The name of the validator in the depends list.\n@throws ValidatorException\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]isClientValidation()", "name": "isClientValidation", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isClientValidation()", "original_string": "    public boolean isClientValidation() {\n        return clientValidation;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nDetermines whether client-side scripting should be generated\nfor this field. The default is {@code true}\n@return {@code true} for scripting; otherwise false\n@see #setClientValidation(boolean)\n@since 1.4\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]isDependency(String)", "name": "isDependency", "arg_nums": 1, "params": [{"name": "validatorName", "type": "String"}], "return_type": "boolean", "signature": "public boolean isDependency(final String validatorName)", "original_string": "    public boolean isDependency(final String validatorName) {\n        return dependencyList.contains(validatorName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the validator is listed as a dependency.\n@param validatorName Name of the validator to check.\n@return Whether the field is dependant on a validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]isIndexed()", "name": "isIndexed", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isIndexed()", "original_string": "    public boolean isIndexed() {\n        return indexedListProperty != null && !indexedListProperty.isEmpty();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nIf there is a value specified for the indexedProperty field then\n{@code true} will be returned.  Otherwise it will be\n{@code false}.\n@return Whether the Field is indexed.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]process(Map<String, String>,Map<String, String>)", "name": "process", "arg_nums": 2, "params": [{"name": "globalConstants", "type": "Map<String, String>"}, {"name": "constants", "type": "Map<String, String>"}], "return_type": "void", "signature": "void process(final Map<String, String> globalConstants, final Map<String, String> constants)", "original_string": "    void process(final Map<String, String> globalConstants, final Map<String, String> constants) {\n        hMsgs.setFast(false);\n        hVars.setFast(true);\n\n        generateKey();\n\n        // Process FormSet Constants\n        for (final Entry<String, String> entry : constants.entrySet()) {\n            final String key1 = entry.getKey();\n            final String key2 = TOKEN_START + key1 + TOKEN_END;\n            final String replaceValue = entry.getValue();\n\n            property = ValidatorUtils.replace(property, key2, replaceValue);\n\n            processVars(key2, replaceValue);\n\n            processMessageComponents(key2, replaceValue);\n        }\n\n        // Process Global Constants\n        for (final Entry<String, String> entry : globalConstants.entrySet()) {\n            final String key1 = entry.getKey();\n            final String key2 = TOKEN_START + key1 + TOKEN_END;\n            final String replaceValue = entry.getValue();\n\n            property = ValidatorUtils.replace(property, key2, replaceValue);\n\n            processVars(key2, replaceValue);\n\n            processMessageComponents(key2, replaceValue);\n        }\n\n        // Process Var Constant Replacement\n        for (final String key1 : getVarMap().keySet()) {\n            final String key2 = TOKEN_START + TOKEN_VAR + key1 + TOKEN_END;\n            final Var var = getVar(key1);\n            final String replaceValue = var.getValue();\n\n            processMessageComponents(key2, replaceValue);\n        }\n\n        hMsgs.setFast(true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nReplace constants with values in fields and process the depends field\nto create the dependency {@link Map}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]processArg(String,String)", "name": "processArg", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "replaceValue", "type": "String"}], "return_type": "void", "signature": "private void processArg(final String key, final String replaceValue)", "original_string": "    private void processArg(final String key, final String replaceValue) {\n        for (final Map<String, Arg> argMap : args) {\n            if (argMap == null) {\n                continue;\n            }\n            for (final Arg arg : argMap.values()) {\n                if (arg != null) {\n                    arg.setKey(ValidatorUtils.replace(arg.getKey(), key, replaceValue));\n                }\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nReplace the arg {@link Collection} key value with the key/value\npairs passed in.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]processMessageComponents(String,String)", "name": "processMessageComponents", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "replaceValue", "type": "String"}], "return_type": "void", "signature": "private void processMessageComponents(final String key, final String replaceValue)", "original_string": "    private void processMessageComponents(final String key, final String replaceValue) {\n        final String varKey = TOKEN_START + TOKEN_VAR;\n        // Process Messages\n        if (key != null && !key.startsWith(varKey)) {\n            for (final Msg msg : getMsgMap().values()) {\n                msg.setKey(ValidatorUtils.replace(msg.getKey(), key, replaceValue));\n            }\n        }\n\n        processArg(key, replaceValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nReplace the args key value with the key/value pairs passed in.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]processVars(String,String)", "name": "processVars", "arg_nums": 2, "params": [{"name": "key", "type": "String"}, {"name": "replaceValue", "type": "String"}], "return_type": "void", "signature": "private void processVars(final String key, final String replaceValue)", "original_string": "    private void processVars(final String key, final String replaceValue) {\n        for (final String varKey : getVarMap().keySet()) {\n            final Var var = getVar(varKey);\n            var.setValue(ValidatorUtils.replace(var.getValue(), key, replaceValue));\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nReplace the vars value with the key/value pairs passed in.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]runDependentValidators(ValidatorAction,ValidatorResults,Map<String, ValidatorAction>,Map<String, Object>,int)", "name": "runDependentValidators", "arg_nums": 5, "params": [{"name": "va", "type": "ValidatorAction"}, {"name": "results", "type": "ValidatorResults"}, {"name": "actions", "type": "Map<String, ValidatorAction>"}, {"name": "params", "type": "Map<String, Object>"}, {"name": "pos", "type": "int"}], "return_type": "boolean", "signature": "private boolean runDependentValidators(\n        final ValidatorAction va,\n        final ValidatorResults results,\n        final Map<String, ValidatorAction> actions,\n        final Map<String, Object> params,\n        final int pos)", "original_string": "    private boolean runDependentValidators(\n        final ValidatorAction va,\n        final ValidatorResults results,\n        final Map<String, ValidatorAction> actions,\n        final Map<String, Object> params,\n        final int pos)\n        throws ValidatorException {\n\n        final List<String> dependentValidators = va.getDependencyList();\n\n        if (dependentValidators.isEmpty()) {\n            return true;\n        }\n\n        for (final String depend : dependentValidators) {\n            final ValidatorAction action = actions.get(depend);\n            if (action == null) {\n                handleMissingAction(depend);\n            }\n\n            if (!validateForRule(action, results, actions, params, pos)) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCalls all of the validators that this validator depends on.\nTODO ValidatorAction should know how to run its own dependencies.\n@param va Run dependent validators for this action.\n@param results\n@param actions\n@param pos\n@return true if all of the dependent validations passed.\n@throws ValidatorException If there's an error running a validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setClientValidation(boolean)", "name": "setClientValidation", "arg_nums": 1, "params": [{"name": "clientValidation", "type": "boolean"}], "return_type": "void", "signature": "public void setClientValidation(final boolean clientValidation)", "original_string": "    public void setClientValidation(final boolean clientValidation) {\n        this.clientValidation = clientValidation;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the flag that determines whether client-side scripting should\nbe generated for this field.\n@param clientValidation the scripting flag\n@see #isClientValidation()\n@since 1.4\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setDepends(String)", "name": "setDepends", "arg_nums": 1, "params": [{"name": "depends", "type": "String"}], "return_type": "void", "signature": "public void setDepends(final String depends)", "original_string": "    public void setDepends(final String depends) {\n        this.depends = depends;\n\n        dependencyList.clear();\n\n        final StringTokenizer st = new StringTokenizer(depends, \",\");\n        while (st.hasMoreTokens()) {\n            final String depend = st.nextToken().trim();\n\n            if (depend != null && !depend.isEmpty()) {\n                dependencyList.add(depend);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the validation rules for this field as a comma separated list.\n@param depends A comma separated list of validator names.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setFieldOrder(int)", "name": "setFieldOrder", "arg_nums": 1, "params": [{"name": "fieldOrder", "type": "int"}], "return_type": "void", "signature": "public void setFieldOrder(final int fieldOrder)", "original_string": "    public void setFieldOrder(final int fieldOrder) {\n        this.fieldOrder = fieldOrder;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the position of the {@code Field} in the validation list.\n@param fieldOrder The field position.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setIndexedListProperty(String)", "name": "setIndexedListProperty", "arg_nums": 1, "params": [{"name": "indexedListProperty", "type": "String"}], "return_type": "void", "signature": "public void setIndexedListProperty(final String indexedListProperty)", "original_string": "    public void setIndexedListProperty(final String indexedListProperty) {\n        this.indexedListProperty = indexedListProperty;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the indexed property name of the field.\n@param indexedListProperty The field's indexed List property name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setIndexedProperty(String)", "name": "setIndexedProperty", "arg_nums": 1, "params": [{"name": "indexedProperty", "type": "String"}], "return_type": "void", "signature": "public void setIndexedProperty(final String indexedProperty)", "original_string": "    public void setIndexedProperty(final String indexedProperty) {\n        this.indexedProperty = indexedProperty;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the indexed property name of the field.\n@param indexedProperty The field's indexed property name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setKey(String)", "name": "setKey", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "void", "signature": "public void setKey(final String key)", "original_string": "    public void setKey(final String key) {\n        this.key = key;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets a unique key for the field.  This can be used to change\nthe key temporarily to have a unique key for an indexed field.\n@param key a unique key for the field\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setPage(int)", "name": "setPage", "arg_nums": 1, "params": [{"name": "page", "type": "int"}], "return_type": "void", "signature": "public void setPage(final int page)", "original_string": "    public void setPage(final int page) {\n        this.page = page;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the page value that the Field is associated with for\nvalidation.\n@param page The page number.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[void]setProperty(String)", "name": "setProperty", "arg_nums": 1, "params": [{"name": "property", "type": "String"}], "return_type": "void", "signature": "public void setProperty(final String property)", "original_string": "    public void setProperty(final String property) {\n        this.property = property;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the property name of the field.\n@param property The field's property name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"\\t\\tkey = \" + key + \"\\n\");\n        results.append(\"\\t\\tproperty = \" + property + \"\\n\");\n        results.append(\"\\t\\tindexedProperty = \" + indexedProperty + \"\\n\");\n        results.append(\"\\t\\tindexedListProperty = \" + indexedListProperty + \"\\n\");\n        results.append(\"\\t\\tdepends = \" + depends + \"\\n\");\n        results.append(\"\\t\\tpage = \" + page + \"\\n\");\n        results.append(\"\\t\\tfieldOrder = \" + fieldOrder + \"\\n\");\n\n        if (hVars != null) {\n            results.append(\"\\t\\tVars:\\n\");\n            for (final Object key1 : getVarMap().keySet()) {\n                results.append(\"\\t\\t\\t\");\n                results.append(key1);\n                results.append(\"=\");\n                results.append(getVarMap().get(key1));\n                results.append(\"\\n\");\n            }\n        }\n\n        return results.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object.\n@return A string representation of the object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>)", "name": "validate", "arg_nums": 2, "params": [{"name": "params", "type": "Map<String, Object>"}, {"name": "actions", "type": "Map<String, ValidatorAction>"}], "return_type": "ValidatorResults", "signature": "public ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions)", "original_string": "    public ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions)\n            throws ValidatorException {\n\n        if (getDepends() == null) {\n            return new ValidatorResults();\n        }\n\n        final ValidatorResults allResults = new ValidatorResults();\n\n        final Object bean = params.get(Validator.BEAN_PARAM);\n        final int numberOfFieldsToValidate = isIndexed() ? getIndexedPropertySize(bean) : 1;\n\n        for (int fieldNumber = 0; fieldNumber < numberOfFieldsToValidate; fieldNumber++) {\n\n            final ValidatorResults results = new ValidatorResults();\n            synchronized (dependencyList) {\n                for (final String depend : dependencyList) {\n\n                    final ValidatorAction action = actions.get(depend);\n                    if (action == null) {\n                        handleMissingAction(depend);\n                    }\n\n                    final boolean good = validateForRule(action, results, actions, params, fieldNumber);\n\n                    if (!good) {\n                        allResults.merge(results);\n                        return allResults;\n                    }\n                }\n            }\n            allResults.merge(results);\n        }\n\n        return allResults;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ValidatorResults", "classes": []}, "docstring": "\nRun the configured validations on this field.  Run all validations\nin the depends clause over each item in turn, returning when the first\none fails.\n@param params A Map of parameter class names to parameter values to pass\ninto validation methods.\n@param actions A Map of validator names to ValidatorAction objects.\n@return A ValidatorResults object containing validation messages for\nthis field.\n@throws ValidatorException If an error occurs during validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Field.java.Field.[boolean]validateForRule(ValidatorAction,ValidatorResults,Map<String, ValidatorAction>,Map<String, Object>,int)", "name": "validateForRule", "arg_nums": 5, "params": [{"name": "va", "type": "ValidatorAction"}, {"name": "results", "type": "ValidatorResults"}, {"name": "actions", "type": "Map<String, ValidatorAction>"}, {"name": "params", "type": "Map<String, Object>"}, {"name": "pos", "type": "int"}], "return_type": "boolean", "signature": "private boolean validateForRule(\n        final ValidatorAction va,\n        final ValidatorResults results,\n        final Map<String, ValidatorAction> actions,\n        final Map<String, Object> params,\n        final int pos)", "original_string": "    private boolean validateForRule(\n        final ValidatorAction va,\n        final ValidatorResults results,\n        final Map<String, ValidatorAction> actions,\n        final Map<String, Object> params,\n        final int pos)\n        throws ValidatorException {\n\n        final ValidatorResult result = results.getValidatorResult(getKey());\n        if (result != null && result.containsAction(va.getName())) {\n            return result.isValid(va.getName());\n        }\n\n        if (!runDependentValidators(va, results, actions, params, pos)) {\n            return false;\n        }\n\n        return va.executeValidationMethod(this, params, results, pos);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Field.java", "class_name": "Field", "class_uri": "src/main/java/org/apache/commons/validator/Field.java.Field", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nExecutes the given ValidatorAction and all ValidatorActions that it\ndepends on.\n@return true if the validation succeeded.\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory.[FormSet]createFormSet(ValidatorResources,String,String,String)", "name": "createFormSet", "arg_nums": 4, "params": [{"name": "resources", "type": "ValidatorResources"}, {"name": "language", "type": "String"}, {"name": "country", "type": "String"}, {"name": "variant", "type": "String"}], "return_type": "FormSet", "signature": "private FormSet createFormSet(final ValidatorResources resources,\n                                  final String language,\n                                  final String country,\n                                  final String variant)", "original_string": "    private FormSet createFormSet(final ValidatorResources resources,\n                                  final String language,\n                                  final String country,\n                                  final String variant) {\n\n        // Retrieve existing FormSet for the language/country/variant\n        FormSet formSet = resources.getFormSet(language, country, variant);\n        if (formSet != null) {\n            if (getLog().isDebugEnabled()) {\n                getLog().debug(\"FormSet[\" + formSet.displayKey() + \"] found - merging.\");\n            }\n            return formSet;\n        }\n\n        // Create a new FormSet for the language/country/variant\n        formSet = new FormSet();\n        formSet.setLanguage(language);\n        formSet.setCountry(country);\n        formSet.setVariant(variant);\n\n        // Add the FormSet to the validator resources\n        resources.addFormSet(formSet);\n\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"FormSet[\" + formSet.displayKey() + \"] created.\");\n        }\n\n        return formSet;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSetFactory.java", "class_name": "FormSetFactory", "class_uri": "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "FormSet", "classes": []}, "docstring": "\n<p>Create or retrieve a {@code FormSet} based on the language, country\n   and variant.</p>\n\n@param resources The validator resources.\n@param language The locale's language.\n@param country The locale's country.\n@param variant The locale's language variant.\n@return The FormSet for a locale.\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory.[Object]createObject(Attributes)", "name": "createObject", "arg_nums": 1, "params": [{"name": "attributes", "type": "Attributes"}], "return_type": "Object", "signature": "@Override\n    public Object createObject(final Attributes attributes)", "original_string": "    @Override\n    public Object createObject(final Attributes attributes) throws Exception {\n\n        final ValidatorResources resources = (ValidatorResources) digester.peek(0);\n\n        final String language = attributes.getValue(\"language\");\n        final String country = attributes.getValue(\"country\");\n        final String variant = attributes.getValue(\"variant\");\n\n        return createFormSet(resources, language, country, variant);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSetFactory.java", "class_name": "FormSetFactory", "class_uri": "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Create or retrieve a {@code FormSet} for the specified\n   attributes.</p>\n\n@param attributes The sax attributes for the formset element.\n@return The FormSet for a locale.\n@throws Exception If an error occurs creating the FormSet.\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory.[Log]getLog()", "name": "getLog", "arg_nums": 0, "params": [], "return_type": "Log", "signature": "private Log getLog()", "original_string": "    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(FormSetFactory.class);\n        }\n        return log;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSetFactory.java", "class_name": "FormSetFactory", "class_uri": "src/main/java/org/apache/commons/validator/FormSetFactory.java.FormSetFactory", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Log", "classes": []}, "docstring": "\nAccessor method for Log instance.\n\nThe Log instance variable is transient and\naccessing it through this method ensures it\nis re-initialized when this instance is\nde-serialized.\n\n@return The Log instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]add(Field,String,boolean)", "name": "add", "arg_nums": 3, "params": [{"name": "field", "type": "Field"}, {"name": "validatorName", "type": "String"}, {"name": "result", "type": "boolean"}], "return_type": "void", "signature": "public void add(final Field field, final String validatorName, final boolean result)", "original_string": "    public void add(final Field field, final String validatorName, final boolean result) {\n        this.add(field, validatorName, result, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a the result of a validator action.\n\n@param field The field validated.\n@param validatorName The name of the validator.\n@param result The result of the validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]add(Field,String,boolean,Object)", "name": "add", "arg_nums": 4, "params": [{"name": "field", "type": "Field"}, {"name": "validatorName", "type": "String"}, {"name": "result", "type": "boolean"}, {"name": "value", "type": "Object"}], "return_type": "void", "signature": "public void add(\n            final Field field,\n            final String validatorName,\n            final boolean result,\n            final Object value)", "original_string": "    public void add(\n            final Field field,\n            final String validatorName,\n            final boolean result,\n            final Object value) {\n\n        ValidatorResult validatorResult = getValidatorResult(field.getKey());\n\n        if (validatorResult == null) {\n            validatorResult = new ValidatorResult(field);\n            hResults.put(field.getKey(), validatorResult);\n        }\n\n        validatorResult.add(validatorName, result, value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a the result of a validator action.\n\n@param field The field validated.\n@param validatorName The name of the validator.\n@param result The result of the validation.\n@param value The value returned by the validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]clear()", "name": "clear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void clear()", "original_string": "    public void clear() {\n        hResults.clear();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClear all results recorded by this object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[Set<String>]getPropertyNames()", "name": "getPropertyNames", "arg_nums": 0, "params": [], "return_type": "Set<String>", "signature": "public Set<String> getPropertyNames()", "original_string": "    public Set<String> getPropertyNames() {\n        return Collections.unmodifiableSet(hResults.keySet());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Set<String>", "classes": []}, "docstring": "\nGets the set of property names for which at least one message has\nbeen recorded.\n@return An unmodifiable Set of the property names.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[Map<String, Object>]getResultValueMap()", "name": "getResultValueMap", "arg_nums": 0, "params": [], "return_type": "Map<String, Object>", "signature": "public Map<String, Object> getResultValueMap()", "original_string": "    public Map<String, Object> getResultValueMap() {\n        final Map<String, Object> results = new HashMap<>();\n\n        for (final String propertyKey : hResults.keySet()) {\n            final ValidatorResult vr = getValidatorResult(propertyKey);\n\n            for (final Iterator<String> x = vr.getActions(); x.hasNext();) {\n                final String actionKey = x.next();\n                final Object result = vr.getResult(actionKey);\n\n                if (result != null && !(result instanceof Boolean)) {\n                    results.put(propertyKey, result);\n                }\n            }\n        }\n\n        return results;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": "\nGets a {@link Map} of any {@code Object}s returned from\nvalidation routines.\n\n@return Map of objections returned by validators.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[ValidatorResult]getValidatorResult(String)", "name": "getValidatorResult", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "ValidatorResult", "signature": "public ValidatorResult getValidatorResult(final String key)", "original_string": "    public ValidatorResult getValidatorResult(final String key) {\n        return hResults.get(key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ValidatorResult", "classes": []}, "docstring": "\nGets the {@code ValidatorResult} associated\nwith the key passed in.  The key the {@code ValidatorResult}\nis stored under is the {@code Field}'s getKey method.\n\n@param key The key generated from {@code Field} (this is often just\nthe field name).\n\n@return The result of a specified key.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[boolean]isEmpty()", "name": "isEmpty", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isEmpty()", "original_string": "    public boolean isEmpty() {\n        return hResults.isEmpty();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nGets {@code true} if there are no messages recorded\nin this collection, or {@code false} otherwise.\n\n@return Whether these results are empty.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults.[void]merge(ValidatorResults)", "name": "merge", "arg_nums": 1, "params": [{"name": "results", "type": "ValidatorResults"}], "return_type": "void", "signature": "public void merge(final ValidatorResults results)", "original_string": "    public void merge(final ValidatorResults results) {\n        hResults.putAll(results.hResults);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResults.java", "class_name": "ValidatorResults", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResults.java.ValidatorResults", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nMerge another ValidatorResults into mine.\n\n@param results ValidatorResults to merge.\n"}, {"uris": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator()", "name": "CreditCardValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public CreditCardValidator()", "original_string": "    public CreditCardValidator() {\n        this(AMEX + VISA + MASTERCARD + DISCOVER);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a new CreditCardValidator with default options.\n"}, {"uris": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(int)", "name": "CreditCardValidator", "arg_nums": 1, "params": [{"name": "options", "type": "int"}], "return_type": "", "signature": "public CreditCardValidator(final int options)", "original_string": "    public CreditCardValidator(final int options) {\n        final Flags f = new Flags(options);\n        if (f.isOn(VISA)) {\n            cardTypes.add(Visa.INSTANCE);\n        }\n\n        if (f.isOn(AMEX)) {\n            cardTypes.add(Amex.INSTANCE);\n        }\n\n        if (f.isOn(MASTERCARD)) {\n            cardTypes.add(Mastercard.INSTANCE);\n        }\n\n        if (f.isOn(DISCOVER)) {\n            cardTypes.add(Discover.INSTANCE);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates a new CreditCardValidator with the specified options.\n@param options Pass in\nCreditCardValidator.VISA + CreditCardValidator.AMEX to specify that\nthose are the only valid card types.\n"}, {"uris": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[void]addAllowedCardType(CreditCardType)", "name": "addAllowedCardType", "arg_nums": 1, "params": [{"name": "type", "type": "CreditCardType"}], "return_type": "void", "signature": "public void addAllowedCardType(final CreditCardType type)", "original_string": "    public void addAllowedCardType(final CreditCardType type){\n        cardTypes.add(type);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdds an allowed CreditCardType that participates in the card\nvalidation algorithm.\n@param type The type that is now allowed to pass validation.\n@since 1.1.2\n"}, {"uris": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "card", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String card)", "original_string": "    public boolean isValid(final String card) {\n        if (card == null || card.length() < 13 || card.length() > 19) {\n            return false;\n        }\n        if (!luhnCheck(card)) {\n            return false;\n        }\n        for (final Object cardType : cardTypes) {\n            final CreditCardType type = (CreditCardType) cardType;\n            if (type.matches(card)) {\n                return true;\n            }\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field is a valid credit card number.\n@param card The card number to validate.\n@return Whether the card number is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator.[boolean]luhnCheck(String)", "name": "luhnCheck", "arg_nums": 1, "params": [{"name": "cardNumber", "type": "String"}], "return_type": "boolean", "signature": "protected boolean luhnCheck(final String cardNumber)", "original_string": "    protected boolean luhnCheck(final String cardNumber) {\n        // number must be validated as 0..9 numeric first!!\n        final int digits = cardNumber.length();\n        final int oddOrEven = digits & 1;\n        long sum = 0;\n        for (int count = 0; count < digits; count++) {\n            int digit = 0;\n            try {\n                digit = Integer.parseInt(cardNumber.charAt(count) + \"\");\n            } catch (final NumberFormatException e) {\n                return false;\n            }\n            if ((count & 1 ^ oddOrEven) == 0) { // not\n                digit *= 2;\n                if (digit > 9) {\n                    digit -= 9;\n                }\n            }\n            sum += digit;\n        }\n        return sum != 0 && sum % 10 == 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks for a valid credit card number.\n@param cardNumber Credit Card Number.\n@return Whether the card number passes the luhnCheck.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]executeValidationMethod(Field,Map<String, Object>,ValidatorResults,int)", "name": "executeValidationMethod", "arg_nums": 4, "params": [{"name": "field", "type": "Field"}, {"name": "params", "type": "Map<String, Object>"}, {"name": "results", "type": "ValidatorResults"}, {"name": "pos", "type": "int"}], "return_type": "boolean", "signature": "boolean executeValidationMethod(final Field field,\n            // TODO What is this the correct value type?\n            // both ValidatorAction and Validator are added as parameters\n            final Map<String, Object> params, final ValidatorResults results, final int pos)", "original_string": "    boolean executeValidationMethod(final Field field,\n            // TODO What is this the correct value type?\n            // both ValidatorAction and Validator are added as parameters\n            final Map<String, Object> params, final ValidatorResults results, final int pos) throws ValidatorException {\n\n        params.put(Validator.VALIDATOR_ACTION_PARAM, this);\n\n        try {\n            if (validationMethod == null) {\n                synchronized (this) {\n                    final ClassLoader loader = getClassLoader(params);\n                    loadValidationClass(loader);\n                    loadParameterClasses(loader);\n                    loadValidationMethod();\n                }\n            }\n\n            final Object[] paramValues = getParameterValues(params);\n\n            if (field.isIndexed()) {\n                handleIndexedField(field, pos, paramValues);\n            }\n\n            Object result = null;\n            try {\n                result = validationMethod.invoke(getValidationClassInstance(), paramValues);\n\n            } catch (IllegalArgumentException | IllegalAccessException e) {\n                throw new ValidatorException(e.getMessage());\n            } catch (final InvocationTargetException e) {\n\n                if (e.getTargetException() instanceof Exception) {\n                    throw (Exception) e.getTargetException();\n\n                }\n                if (e.getTargetException() instanceof Error) {\n                    throw (Error) e.getTargetException();\n                }\n            }\n\n            final boolean valid = isValid(result);\n            if (!valid || valid && !onlyReturnErrors(params)) {\n                results.add(field, name, valid, result);\n            }\n\n            if (!valid) {\n                return false;\n            }\n\n            // TODO This catch block remains for backward compatibility. Remove\n            // this for Validator 2.0 when exception scheme changes.\n        } catch (final Exception e) {\n            if (e instanceof ValidatorException) {\n                throw (ValidatorException) e;\n            }\n\n            getLog().error(\"Unhandled exception thrown during validation: \" + e.getMessage(), e);\n\n            results.add(field, name, false);\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nDynamically runs the validation method for this validator and returns true if the data is valid.\n\n@param field\n@param params  A Map of class names to parameter values.\n@param results\n@param pos     The index of the list property to validate if it's indexed.\n@throws ValidatorException\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]formatJavaScriptFileName()", "name": "formatJavaScriptFileName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String formatJavaScriptFileName()", "original_string": "    private String formatJavaScriptFileName() {\n        String fname = jsFunction.substring(1);\n\n        if (!jsFunction.startsWith(\"/\")) {\n            fname = jsFunction.replace('.', '/') + \".js\";\n        }\n\n        return fname;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n@return A file name suitable for passing to a {@link ClassLoader#getResourceAsStream(String)} method.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]generateJsFunction()", "name": "generateJsFunction", "arg_nums": 0, "params": [], "return_type": "String", "signature": "private String generateJsFunction()", "original_string": "    private String generateJsFunction() {\n        final StringBuilder jsName = new StringBuilder(\"org.apache.commons.validator.javascript\");\n\n        jsName.append(\".validate\");\n        jsName.append(name.substring(0, 1).toUpperCase());\n        jsName.append(name.substring(1));\n\n        return jsName.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nUsed to generate the JavaScript name when it is not specified.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[ClassLoader]getClassLoader(Map<String, Object>)", "name": "getClassLoader", "arg_nums": 1, "params": [{"name": "params", "type": "Map<String, Object>"}], "return_type": "ClassLoader", "signature": "private ClassLoader getClassLoader(final Map<String, Object> params)", "original_string": "    private ClassLoader getClassLoader(final Map<String, Object> params) {\n        final Validator v = getValidator(params);\n        return v.getClassLoader();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ClassLoader", "classes": []}, "docstring": "\nReturns the ClassLoader set in the Validator contained in the parameter Map.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getClassname()", "name": "getClassname", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getClassname()", "original_string": "    public String getClassname() {\n        return className;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the class of the validator action.\n\n@return Class name of the validator Action.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[List<String>]getDependencyList()", "name": "getDependencyList", "arg_nums": 0, "params": [], "return_type": "List<String>", "signature": "public List<String> getDependencyList()", "original_string": "    public List<String> getDependencyList() {\n        return Collections.unmodifiableList(dependencyList);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<String>", "classes": []}, "docstring": "\nReturns the dependent validator names as an unmodifiable {@code List}.\n\n@return List of the validator action's depedents.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getDepends()", "name": "getDepends", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getDepends()", "original_string": "    public String getDepends() {\n        return depends;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the dependencies of the validator action as a comma separated list of validator names.\n\n@return The validator action's dependencies.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getJavascript()", "name": "getJavascript", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public synchronized String getJavascript()", "original_string": "    public synchronized String getJavascript() {\n        return javascript;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "synchronized"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the JavaScript equivalent of the Java class and method associated with this action.\n\n@return The JavaScript validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getJsFunctionName()", "name": "getJsFunctionName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getJsFunctionName()", "original_string": "    public String getJsFunctionName() {\n        return jsFunctionName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the JavaScript function name. This is optional and can be used instead of validator action name for the name of the JavaScript function/object.\n\n@return The JavaScript function name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Log]getLog()", "name": "getLog", "arg_nums": 0, "params": [], "return_type": "Log", "signature": "private Log getLog()", "original_string": "    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(ValidatorAction.class);\n        }\n        return log;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Log", "classes": []}, "docstring": "\nAccessor method for Log instance.\n\nThe Log instance variable is transient and accessing it through this method ensures it is re-initialized when this instance is de-serialized.\n\n@return The Log instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getMethod()", "name": "getMethod", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getMethod()", "original_string": "    public String getMethod() {\n        return method;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name of method being called for the validator action.\n\n@return The method name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getMethodParams()", "name": "getMethodParams", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getMethodParams()", "original_string": "    public String getMethodParams() {\n        return methodParams;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the method parameters for the method.\n\n@return Method's parameters.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getMsg()", "name": "getMsg", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getMsg()", "original_string": "    public String getMsg() {\n        return msg;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the message associated with the validator action.\n\n@return The message for the validator action.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getName()", "original_string": "    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name of the validator action.\n\n@return Validator Action name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Object[]]getParameterValues(Map<String, ? super Object>)", "name": "getParameterValues", "arg_nums": 1, "params": [{"name": "params", "type": "Map<String, ? super Object>"}], "return_type": "Object[]", "signature": "private Object[] getParameterValues(final Map<String, ? super Object> params)", "original_string": "    private Object[] getParameterValues(final Map<String, ? super Object> params) {\n\n        final Object[] paramValue = new Object[methodParameterList.size()];\n\n        for (int i = 0; i < methodParameterList.size(); i++) {\n            final String paramClassName = methodParameterList.get(i);\n            paramValue[i] = params.get(paramClassName);\n        }\n\n        return paramValue;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object[]", "classes": []}, "docstring": "\nConverts a List of parameter class names into their values contained in the parameters Map.\n\n@param params A Map of class names to parameter values.\n@return An array containing the value object for each parameter. This array is in the same order as the given List and is suitable for passing to the\n        validation method.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Object]getValidationClassInstance()", "name": "getValidationClassInstance", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "private Object getValidationClassInstance()", "original_string": "    private Object getValidationClassInstance() throws ValidatorException {\n        if (Modifier.isStatic(validationMethod.getModifiers())) {\n            instance = null;\n\n        } else if (instance == null) {\n            try {\n                instance = validationClass.getConstructor().newInstance();\n            } catch (final ReflectiveOperationException e) {\n                final String msg1 = \"Couldn't create instance of \" + className + \".  \" + e.getMessage();\n\n                throw new ValidatorException(msg1);\n            }\n        }\n\n        return instance;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets an instance of the validation class or null if the validation method is static so does not require an instance to be executed.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[Validator]getValidator(Map<String, Object>)", "name": "getValidator", "arg_nums": 1, "params": [{"name": "params", "type": "Map<String, Object>"}], "return_type": "Validator", "signature": "private Validator getValidator(final Map<String, Object> params)", "original_string": "    private Validator getValidator(final Map<String, Object> params) {\n        return (Validator) params.get(Validator.VALIDATOR_PARAM);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Validator", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]handleIndexedField(Field,int,Object[])", "name": "handleIndexedField", "arg_nums": 3, "params": [{"name": "field", "type": "Field"}, {"name": "pos", "type": "int"}, {"name": "paramValues", "type": "Object[]"}], "return_type": "void", "signature": "private void handleIndexedField(final Field field, final int pos, final Object[] paramValues)", "original_string": "    private void handleIndexedField(final Field field, final int pos, final Object[] paramValues) throws ValidatorException {\n\n        final int beanIndex = methodParameterList.indexOf(Validator.BEAN_PARAM);\n        final int fieldIndex = methodParameterList.indexOf(Validator.FIELD_PARAM);\n\n        final Object[] indexedList = field.getIndexedProperty(paramValues[beanIndex]);\n\n        // Set current iteration object to the parameter array\n        paramValues[beanIndex] = indexedList[pos];\n\n        // Set field clone with the key modified to represent\n        // the current field\n        final Field indexedField = (Field) field.clone();\n        indexedField.setKey(ValidatorUtils.replace(indexedField.getKey(), Field.TOKEN_INDEXED, \"[\" + pos + \"]\"));\n\n        paramValues[fieldIndex] = indexedField;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nModifies the paramValue array with indexed fields.\n\n@param field\n@param pos\n@param paramValues\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]init()", "name": "init", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected void init()", "original_string": "    protected void init() {\n        loadJavascriptFunction();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nInitialize based on set.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]isDependency(String)", "name": "isDependency", "arg_nums": 1, "params": [{"name": "validatorName", "type": "String"}], "return_type": "boolean", "signature": "public boolean isDependency(final String validatorName)", "original_string": "    public boolean isDependency(final String validatorName) {\n        return dependencyList.contains(validatorName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks whether or not the value passed in is in the depends field.\n\n@param validatorName Name of the dependency to check.\n@return Whether the named validator is a dependant.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]isValid(Object)", "name": "isValid", "arg_nums": 1, "params": [{"name": "result", "type": "Object"}], "return_type": "boolean", "signature": "private boolean isValid(final Object result)", "original_string": "    private boolean isValid(final Object result) {\n        if (result instanceof Boolean) {\n            final Boolean valid = (Boolean) result;\n            return valid.booleanValue();\n        }\n        return result != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nIf the result object is a {@code Boolean}, it will return its value. If not it will return {@code false} if the object is {@code null} and\n{@code true} if it isn't.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]javaScriptAlreadyLoaded()", "name": "javaScriptAlreadyLoaded", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "private boolean javaScriptAlreadyLoaded()", "original_string": "    private boolean javaScriptAlreadyLoaded() {\n        return javascript != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n@return true if the JavaScript for this action has already been loaded.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadJavascriptFunction()", "name": "loadJavascriptFunction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "protected synchronized void loadJavascriptFunction()", "original_string": "    protected synchronized void loadJavascriptFunction() {\n\n        if (javaScriptAlreadyLoaded()) {\n            return;\n        }\n\n        if (getLog().isTraceEnabled()) {\n            getLog().trace(\"  Loading function begun\");\n        }\n\n        if (jsFunction == null) {\n            jsFunction = generateJsFunction();\n        }\n\n        final String javaScriptFileName = formatJavaScriptFileName();\n\n        if (getLog().isTraceEnabled()) {\n            getLog().trace(\"  Loading js function '\" + javaScriptFileName + \"'\");\n        }\n\n        javascript = readJavaScriptFile(javaScriptFileName);\n\n        if (getLog().isTraceEnabled()) {\n            getLog().trace(\"  Loading JavaScript function completed\");\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "protected synchronized", "marker_annotations": [], "non_marker_annotations": ["protected", "synchronized"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad the JavaScript function specified by the given path. For this implementation, the {@code jsFunction} property should contain a fully qualified\npackage and script name, separated by periods, to be loaded from the class loader that created this instance.\n\nTODO if the path begins with a '/' the path will be intepreted as absolute, and remain unchanged. If this fails then it will attempt to treat the path as\na file path. It is assumed the script ends with a '.js'.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadParameterClasses(ClassLoader)", "name": "loadParameterClasses", "arg_nums": 1, "params": [{"name": "loader", "type": "ClassLoader"}], "return_type": "void", "signature": "private void loadParameterClasses(final ClassLoader loader)", "original_string": "    private void loadParameterClasses(final ClassLoader loader) throws ValidatorException {\n\n        if (parameterClasses != null) {\n            return;\n        }\n\n        final Class<?>[] parameterClasses = new Class[methodParameterList.size()];\n\n        for (int i = 0; i < methodParameterList.size(); i++) {\n            final String paramClassName = methodParameterList.get(i);\n\n            try {\n                parameterClasses[i] = loader.loadClass(paramClassName);\n\n            } catch (final ClassNotFoundException e) {\n                throw new ValidatorException(e.getMessage());\n            }\n        }\n\n        this.parameterClasses = parameterClasses;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nConverts a List of parameter class names into their Class objects. Stores the output in {@link #parameterClasses}. This array is in the same order as the\ngiven List and is suitable for passing to the validation method.\n\n@throws ValidatorException if a class cannot be loaded.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadValidationClass(ClassLoader)", "name": "loadValidationClass", "arg_nums": 1, "params": [{"name": "loader", "type": "ClassLoader"}], "return_type": "void", "signature": "private void loadValidationClass(final ClassLoader loader)", "original_string": "    private void loadValidationClass(final ClassLoader loader) throws ValidatorException {\n\n        if (validationClass != null) {\n            return;\n        }\n\n        try {\n            validationClass = loader.loadClass(className);\n        } catch (final ClassNotFoundException e) {\n            throw new ValidatorException(e.toString());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad the Class object for the configured validation class name.\n\n@param loader The ClassLoader used to load the Class object.\n@throws ValidatorException\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]loadValidationMethod()", "name": "loadValidationMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void loadValidationMethod()", "original_string": "    private void loadValidationMethod() throws ValidatorException {\n        if (validationMethod != null) {\n            return;\n        }\n\n        try {\n            validationMethod = validationClass.getMethod(method, parameterClasses);\n\n        } catch (final NoSuchMethodException e) {\n            throw new ValidatorException(\"No such validation method: \" + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nLoad the Method object for the configured validation method name.\n\n@throws ValidatorException\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[boolean]onlyReturnErrors(Map<String, Object>)", "name": "onlyReturnErrors", "arg_nums": 1, "params": [{"name": "params", "type": "Map<String, Object>"}], "return_type": "boolean", "signature": "private boolean onlyReturnErrors(final Map<String, Object> params)", "original_string": "    private boolean onlyReturnErrors(final Map<String, Object> params) {\n        final Validator v = getValidator(params);\n        return v.getOnlyReturnErrors();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns the onlyReturnErrors setting in the Validator contained in the parameter Map.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[InputStream]openInputStream(String,ClassLoader)", "name": "openInputStream", "arg_nums": 2, "params": [{"name": "javaScriptFileName", "type": "String"}, {"name": "classLoader", "type": "ClassLoader"}], "return_type": "InputStream", "signature": "private InputStream openInputStream(final String javaScriptFileName, final ClassLoader classLoader)", "original_string": "    private InputStream openInputStream(final String javaScriptFileName, final ClassLoader classLoader) {\n        InputStream is = null;\n        if (classLoader != null) {\n            is = classLoader.getResourceAsStream(javaScriptFileName);\n        }\n        if (is == null) {\n            return getClass().getResourceAsStream(javaScriptFileName);\n        }\n        return is;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "InputStream", "classes": []}, "docstring": "\nOpens an input stream for reading the specified resource.\n<p>\nThe search order is described in the documentation for {@link ClassLoader#getResource(String)}.\n</p>\n\n@param name The resource name\n@return An input stream for reading the resource, or {@code null} if the resource could not be found\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]readJavaScriptFile(String)", "name": "readJavaScriptFile", "arg_nums": 1, "params": [{"name": "javaScriptFileName", "type": "String"}], "return_type": "String", "signature": "private String readJavaScriptFile(final String javaScriptFileName)", "original_string": "    private String readJavaScriptFile(final String javaScriptFileName) {\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        if (classLoader == null) {\n            classLoader = getClass().getClassLoader();\n        }\n        // BufferedReader closes InputStreamReader closes InputStream\n        final InputStream is = openInputStream(javaScriptFileName, classLoader);\n        if (is == null) {\n            getLog().debug(\"  Unable to read javascript name \" + javaScriptFileName);\n            return null;\n        }\n        final StringBuilder buffer = new StringBuilder();\n        // TODO encoding\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                buffer.append(line).append(\"\\n\");\n            }\n        } catch (final IOException e) {\n            getLog().error(\"Error reading JavaScript file.\", e);\n\n        }\n        final String function = buffer.toString();\n        return function.isEmpty() ? null : function;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReads a JavaScript function from a file.\n\n@param javaScriptFileName The file containing the JavaScript.\n@return The JavaScript function or null if it could not be loaded.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setClassname(String)", "name": "setClassname", "arg_nums": 1, "params": [{"name": "className", "type": "String"}], "return_type": "void", "signature": "@Deprecated\n    public void setClassname(final String className)", "original_string": "    @Deprecated\n    public void setClassname(final String className) {\n        this.className = className;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the class of the validator action.\n\n@param className Class name of the validator Action.\n@deprecated Use {@link #setClassName(String)}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setClassName(String)", "name": "setClassName", "arg_nums": 1, "params": [{"name": "className", "type": "String"}], "return_type": "void", "signature": "public void setClassName(final String className)", "original_string": "    public void setClassName(final String className) {\n        this.className = className;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the class of the validator action.\n\n@param className Class name of the validator Action.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setDepends(String)", "name": "setDepends", "arg_nums": 1, "params": [{"name": "depends", "type": "String"}], "return_type": "void", "signature": "public void setDepends(final String depends)", "original_string": "    public void setDepends(final String depends) {\n        this.depends = depends;\n\n        dependencyList.clear();\n\n        final StringTokenizer st = new StringTokenizer(depends, \",\");\n        while (st.hasMoreTokens()) {\n            final String depend = st.nextToken().trim();\n\n            if (depend != null && !depend.isEmpty()) {\n                dependencyList.add(depend);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the dependencies of the validator action.\n\n@param depends A comma separated list of validator names.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setJavascript(String)", "name": "setJavascript", "arg_nums": 1, "params": [{"name": "javaScript", "type": "String"}], "return_type": "void", "signature": "public synchronized void setJavascript(final String javaScript)", "original_string": "    public synchronized void setJavascript(final String javaScript) {\n        if (jsFunction != null) {\n            throw new IllegalStateException(\"Cannot call setJavascript() after calling setJsFunction()\");\n        }\n\n        this.javascript = javaScript;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "synchronized"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the JavaScript equivalent of the Java class and method associated with this action.\n\n@param javaScript The JavaScript validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setJsFunction(String)", "name": "setJsFunction", "arg_nums": 1, "params": [{"name": "jsFunction", "type": "String"}], "return_type": "void", "signature": "public synchronized void setJsFunction(final String jsFunction)", "original_string": "    public synchronized void setJsFunction(final String jsFunction) {\n        if (javascript != null) {\n            throw new IllegalStateException(\"Cannot call setJsFunction() after calling setJavascript()\");\n        }\n\n        this.jsFunction = jsFunction;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "synchronized"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the fully qualified class path of the JavaScript function.\n<p>\nThis is optional and can be used <strong>instead</strong> of the setJavascript(). Attempting to call both {@code setJsFunction} and\n{@code setJavascript} will result in an {@code IllegalStateException} being thrown.\n</p>\n<p>\nIf <strong>neither</strong> setJsFunction or setJavascript is set then validator will attempt to load the default JavaScript definition.\n</p>\n\n<pre>\n<b>Examples</b>\n  If in the validator.xml :\n#1:\n     &lt;validator name=\"tire\"\n           jsFunction=\"com.yourcompany.project.tireFuncion\"&gt;\n    Validator will attempt to load com.yourcompany.project.validateTireFunction.js from\n    its class path.\n#2:\n   &lt;validator name=\"tire\"&gt;\n     Validator will use the name attribute to try and load\n        org.apache.commons.validator.javascript.validateTire.js\n     which is the default JavaScript definition.\n</pre>\n\n@param jsFunction The JavaScript function's fully qualified class path.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setJsFunctionName(String)", "name": "setJsFunctionName", "arg_nums": 1, "params": [{"name": "jsFunctionName", "type": "String"}], "return_type": "void", "signature": "public void setJsFunctionName(final String jsFunctionName)", "original_string": "    public void setJsFunctionName(final String jsFunctionName) {\n        this.jsFunctionName = jsFunctionName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the JavaScript function name. This is optional and can be used instead of validator action name for the name of the JavaScript function/object.\n\n@param jsFunctionName The JavaScript function name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setMethod(String)", "name": "setMethod", "arg_nums": 1, "params": [{"name": "method", "type": "String"}], "return_type": "void", "signature": "public void setMethod(final String method)", "original_string": "    public void setMethod(final String method) {\n        this.method = method;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name of method being called for the validator action.\n\n@param method The method name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setMethodParams(String)", "name": "setMethodParams", "arg_nums": 1, "params": [{"name": "methodParams", "type": "String"}], "return_type": "void", "signature": "public void setMethodParams(final String methodParams)", "original_string": "    public void setMethodParams(final String methodParams) {\n        this.methodParams = methodParams;\n\n        methodParameterList.clear();\n\n        final StringTokenizer st = new StringTokenizer(methodParams, \",\");\n        while (st.hasMoreTokens()) {\n            final String value = st.nextToken().trim();\n\n            if (value != null && !value.isEmpty()) {\n                methodParameterList.add(value);\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the method parameters for the method.\n\n@param methodParams A comma separated list of parameters.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setMsg(String)", "name": "setMsg", "arg_nums": 1, "params": [{"name": "msg", "type": "String"}], "return_type": "void", "signature": "public void setMsg(final String msg)", "original_string": "    public void setMsg(final String msg) {\n        this.msg = msg;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the message associated with the validator action.\n\n@param msg The message for the validator action.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[void]setName(String)", "name": "setName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "public void setName(final String name)", "original_string": "    public void setName(final String name) {\n        this.name = name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name of the validator action.\n\n@param name Validator Action name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder(\"ValidatorAction: \");\n        results.append(name);\n        results.append(\"\\n\");\n\n        return results.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorAction.java", "class_name": "ValidatorAction", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorAction.java.ValidatorAction", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object.\n\n@return a string representation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources()", "name": "ValidatorResources", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ValidatorResources()", "original_string": "    public ValidatorResources() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate an empty ValidatorResources object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(InputStream)", "name": "ValidatorResources", "arg_nums": 1, "params": [{"name": "in", "type": "InputStream"}], "return_type": "", "signature": "public ValidatorResources(final InputStream in)", "original_string": "    public ValidatorResources(final InputStream in) throws IOException, SAXException {\n        this(new InputStream[]{in});\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a ValidatorResources object from an InputStream.\n\n@param in InputStream to a validation.xml configuration file.  It's the client's\nresponsibility to close this stream.\n@throws SAXException if the validation XML files are not valid or well\nformed.\n@throws IOException if an I/O error occurs processing the XML files\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(InputStream[])", "name": "ValidatorResources", "arg_nums": 1, "params": [{"name": "streams", "type": "InputStream[]"}], "return_type": "", "signature": "public ValidatorResources(final InputStream[] streams)", "original_string": "    public ValidatorResources(final InputStream[] streams)\n            throws IOException, SAXException {\n\n        final Digester digester = initDigester();\n        for (int i = 0; i < streams.length; i++) {\n            if (streams[i] == null) {\n                throw new IllegalArgumentException(\"Stream[\" + i + \"] is null\");\n            }\n            digester.push(this);\n            digester.parse(streams[i]);\n        }\n\n        process();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a ValidatorResources object from an InputStream.\n\n@param streams An array of InputStreams to several validation.xml\nconfiguration files that will be read in order and merged into this object.\nIt's the client's responsibility to close these streams.\n@throws SAXException if the validation XML files are not valid or well\nformed.\n@throws IOException if an I/O error occurs processing the XML files\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(String)", "name": "ValidatorResources", "arg_nums": 1, "params": [{"name": "uri", "type": "String"}], "return_type": "", "signature": "public ValidatorResources(final String uri)", "original_string": "    public ValidatorResources(final String uri) throws IOException, SAXException {\n        this(new String[] { uri });\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a ValidatorResources object from an uri\n\n@param uri The location of a validation.xml configuration file.\n@throws SAXException if the validation XML files are not valid or well\nformed.\n@throws IOException if an I/O error occurs processing the XML files\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources()", "name": "ValidatorResources", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ValidatorResources(final String... uris)", "original_string": "    public ValidatorResources(final String... uris)\n            throws IOException, SAXException {\n\n        final Digester digester = initDigester();\n        for (final String element : uris) {\n            digester.push(this);\n            digester.parse(element);\n        }\n\n        process();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a ValidatorResources object from several uris\n\n@param uris An array of uris to several validation.xml\nconfiguration files that will be read in order and merged into this object.\n@throws SAXException if the validation XML files are not valid or well\nformed.\n@throws IOException if an I/O error occurs processing the XML files\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(URL)", "name": "ValidatorResources", "arg_nums": 1, "params": [{"name": "url", "type": "URL"}], "return_type": "", "signature": "public ValidatorResources(final URL url)", "original_string": "    public ValidatorResources(final URL url)\n            throws IOException, SAXException {\n        this(new URL[]{url});\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a ValidatorResources object from a URL.\n\n@param url The URL for the validation.xml\nconfiguration file that will be read into this object.\n@throws SAXException if the validation XML file are not valid or well\nformed.\n@throws IOException if an I/O error occurs processing the XML files\n@since 1.3.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[]ValidatorResources(URL[])", "name": "ValidatorResources", "arg_nums": 1, "params": [{"name": "urls", "type": "URL[]"}], "return_type": "", "signature": "public ValidatorResources(final URL[] urls)", "original_string": "    public ValidatorResources(final URL[] urls)\n            throws IOException, SAXException {\n\n        final Digester digester = initDigester();\n        for (final URL url : urls) {\n            digester.push(this);\n            digester.parse(url);\n        }\n\n        process();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a ValidatorResources object from several URL.\n\n@param urls An array of URL to several validation.xml\nconfiguration files that will be read in order and merged into this object.\n@throws SAXException if the validation XML files are not valid or well\nformed.\n@throws IOException if an I/O error occurs processing the XML files\n@since 1.3.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addConstant(String,String)", "name": "addConstant", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "value", "type": "String"}], "return_type": "void", "signature": "public void addConstant(final String name, final String value)", "original_string": "    public void addConstant(final String name, final String value) {\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Adding Global Constant: \" + name + \",\" + value);\n        }\n\n        hConstants.put(name, value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a global constant to the resource.\n@param name The constant name.\n@param value The constant value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addFormSet(FormSet)", "name": "addFormSet", "arg_nums": 1, "params": [{"name": "fs", "type": "FormSet"}], "return_type": "void", "signature": "public void addFormSet(final FormSet fs)", "original_string": "    public void addFormSet(final FormSet fs) {\n        final String key = buildKey(fs);\n        if (key.isEmpty()) { // there can only be one default formset\n            if (getLog().isWarnEnabled() && defaultFormSet != null) {\n                // warn the user he might not get the expected results\n                getLog().warn(\"Overriding default FormSet definition.\");\n            }\n            defaultFormSet = fs;\n        } else {\n            final FormSet formset = getFormSets().get(key);\n            if (formset == null) { // it hasn't been included yet\n                if (getLog().isDebugEnabled()) {\n                    getLog().debug(\"Adding FormSet '\" + fs + \"'.\");\n                }\n            } else if (getLog().isWarnEnabled()) { // warn the user he might not\n                                                   // get the expected results\n                getLog().warn(\"Overriding FormSet definition. Duplicate for locale: \" + key);\n            }\n            getFormSets().put(key, fs);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code FormSet} to this {@code ValidatorResources}\nobject.  It will be associated with the {@link Locale} of the\n{@code FormSet}.\n@param fs The form set to add.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addOldArgRules(Digester)", "name": "addOldArgRules", "arg_nums": 1, "params": [{"name": "digester", "type": "Digester"}], "return_type": "void", "signature": "private void addOldArgRules(final Digester digester)", "original_string": "    private void addOldArgRules(final Digester digester) {\n        // Create a new rule to process args elements\n        final Rule rule = new Rule() {\n            @Override\n            public void begin(final String namespace, final String name, final Attributes attributes) {\n                // Create the Arg\n                final Arg arg = new Arg();\n                arg.setKey(attributes.getValue(\"key\"));\n                arg.setName(attributes.getValue(\"name\"));\n                if (\"false\".equalsIgnoreCase(attributes.getValue(\"resource\"))) {\n                    arg.setResource(false);\n                }\n                try {\n                    final int length = \"arg\".length(); // skip the arg prefix\n                    arg.setPosition(Integer.parseInt(name.substring(length)));\n                } catch (final Exception ex) {\n                    getLog().error(\"Error parsing Arg position: \" + name + \" \" + arg + \" \" + ex);\n                }\n\n                // Add the arg to the parent field\n                ((Field) getDigester().peek(0)).addArg(arg);\n            }\n        };\n\n        // Add the rule for each of the arg elements\n        digester.addRule(ARGS_PATTERN + \"0\", rule);\n        digester.addRule(ARGS_PATTERN + \"1\", rule);\n        digester.addRule(ARGS_PATTERN + \"2\", rule);\n        digester.addRule(ARGS_PATTERN + \"3\", rule);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nCreate a {@code Rule} to handle {@code arg0-arg3}\nelements. This will allow validation.xml files that use the\nversions of the DTD prior to Validator 1.2.0 to continue\nworking.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]addValidatorAction(ValidatorAction)", "name": "addValidatorAction", "arg_nums": 1, "params": [{"name": "va", "type": "ValidatorAction"}], "return_type": "void", "signature": "public void addValidatorAction(final ValidatorAction va)", "original_string": "    public void addValidatorAction(final ValidatorAction va) {\n        va.init();\n\n        getActions().put(va.getName(), va);\n\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Add ValidatorAction: \" + va.getName() + \",\" + va.getClassname());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code ValidatorAction} to the resource.  It also creates an\ninstance of the class based on the {@code ValidatorAction}s\nclass name and retrieves the {@code Method} instance and sets them\nin the {@code ValidatorAction}.\n@param va The validator action.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[String]buildKey(FormSet)", "name": "buildKey", "arg_nums": 1, "params": [{"name": "fs", "type": "FormSet"}], "return_type": "String", "signature": "protected String buildKey(final FormSet fs)", "original_string": "    protected String buildKey(final FormSet fs) {\n        return\n                buildLocale(fs.getLanguage(), fs.getCountry(), fs.getVariant());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nBuilds a key to store the {@code FormSet} under based on it's\nlanguage, country, and variant values.\n@param fs The Form Set.\n@return generated key for a formset.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[String]buildLocale(String,String,String)", "name": "buildLocale", "arg_nums": 3, "params": [{"name": "lang", "type": "String"}, {"name": "country", "type": "String"}, {"name": "variant", "type": "String"}], "return_type": "String", "signature": "private String buildLocale(final String lang, final String country, final String variant)", "original_string": "    private String buildLocale(final String lang, final String country, final String variant) {\n        final StringBuilder key = new StringBuilder().append(lang != null && !lang.isEmpty() ? lang : \"\");\n        key.append(country != null && !country.isEmpty() ? \"_\" + country : \"\");\n        key.append(variant != null && !variant.isEmpty() ? \"_\" + variant : \"\");\n        return key.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nAssembles a Locale code from the given parts.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, ValidatorAction>]getActions()", "name": "getActions", "arg_nums": 0, "params": [], "return_type": "Map<String, ValidatorAction>", "signature": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, ValidatorAction> getActions()", "original_string": "    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, ValidatorAction> getActions() {\n        return hActions;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": ["// FastHashMap is not generic"], "return_type": "Map<String, ValidatorAction>", "classes": []}, "docstring": "\nReturns a Map of String ValidatorAction names to their ValidatorAction.\n@return Map of Validator Actions\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, String>]getConstants()", "name": "getConstants", "arg_nums": 0, "params": [], "return_type": "Map<String, String>", "signature": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, String> getConstants()", "original_string": "    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, String> getConstants() {\n        return hConstants;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": ["// FastHashMap is not generic"], "return_type": "Map<String, String>", "classes": []}, "docstring": "\nReturns a Map of String constant names to their String values.\n@return Map of Constants\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Form]getForm(Locale,String)", "name": "getForm", "arg_nums": 2, "params": [{"name": "locale", "type": "Locale"}, {"name": "formKey", "type": "String"}], "return_type": "Form", "signature": "public Form getForm(final Locale locale, final String formKey)", "original_string": "    public Form getForm(final Locale locale, final String formKey) {\n        return this.getForm(locale.getLanguage(), locale.getCountry(), locale\n                .getVariant(), formKey);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Form", "classes": []}, "docstring": "\n<p>Gets a {@code Form} based on the name of the form and the\n{@link Locale} that most closely matches the {@link Locale}\npassed in.  The order of {@link Locale} matching is:</p>\n<ol>\n   <li>language + country + variant</li>\n   <li>language + country</li>\n   <li>language</li>\n   <li>default locale</li>\n</ol>\n@param locale The Locale.\n@param formKey The key for the Form.\n@return The validator Form.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Form]getForm(String,String,String,String)", "name": "getForm", "arg_nums": 4, "params": [{"name": "language", "type": "String"}, {"name": "country", "type": "String"}, {"name": "variant", "type": "String"}, {"name": "formKey", "type": "String"}], "return_type": "Form", "signature": "public Form getForm(final String language, final String country, final String variant, final String formKey)", "original_string": "    public Form getForm(final String language, final String country, final String variant, final String formKey) {\n\n        Form form = null;\n\n        // Try language/country/variant\n        String key = buildLocale(language, country, variant);\n        if (!key.isEmpty()) {\n            final FormSet formSet = getFormSets().get(key);\n            if (formSet != null) {\n                form = formSet.getForm(formKey);\n            }\n        }\n        final String localeKey = key;\n\n        // Try language/country\n        if (form == null) {\n            key = buildLocale(language, country, null);\n            if (!key.isEmpty()) {\n                final FormSet formSet = getFormSets().get(key);\n                if (formSet != null) {\n                    form = formSet.getForm(formKey);\n                }\n            }\n        }\n\n        // Try language\n        if (form == null) {\n            key = buildLocale(language, null, null);\n            if (!key.isEmpty()) {\n                final FormSet formSet = getFormSets().get(key);\n                if (formSet != null) {\n                    form = formSet.getForm(formKey);\n                }\n            }\n        }\n\n        // Try default formset\n        if (form == null) {\n            form = defaultFormSet.getForm(formKey);\n            key = \"default\";\n        }\n\n        if (form == null) {\n            if (getLog().isWarnEnabled()) {\n                getLog().warn(\"Form '\" + formKey + \"' not found for locale '\" + localeKey + \"'\");\n            }\n        } else if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Form '\" + formKey + \"' found in formset '\" + key + \"' for locale '\" + localeKey + \"'\");\n        }\n\n        return form;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Form", "classes": []}, "docstring": "\n<p>Gets a {@code Form} based on the name of the form and the\n{@link Locale} that most closely matches the {@link Locale}\npassed in.  The order of {@link Locale} matching is:</p>\n<ol>\n   <li>language + country + variant</li>\n   <li>language + country</li>\n   <li>language</li>\n   <li>default locale</li>\n</ol>\n@param language The locale's language.\n@param country The locale's country.\n@param variant The locale's language variant.\n@param formKey The key for the Form.\n@return The validator Form.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[FormSet]getFormSet(String,String,String)", "name": "getFormSet", "arg_nums": 3, "params": [{"name": "language", "type": "String"}, {"name": "country", "type": "String"}, {"name": "variant", "type": "String"}], "return_type": "FormSet", "signature": "FormSet getFormSet(final String language, final String country, final String variant)", "original_string": "    FormSet getFormSet(final String language, final String country, final String variant) {\n        final String key = buildLocale(language, country, variant);\n        if (key.isEmpty()) {\n            return defaultFormSet;\n        }\n        return getFormSets().get(key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "FormSet", "classes": []}, "docstring": "\n<p>Gets a {@code FormSet} based on the language, country\n   and variant.</p>\n@param language The locale's language.\n@param country The locale's country.\n@param variant The locale's language variant.\n@return The FormSet for a locale.\n@since 1.2\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, FormSet>]getFormSets()", "name": "getFormSets", "arg_nums": 0, "params": [], "return_type": "Map<String, FormSet>", "signature": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, FormSet> getFormSets()", "original_string": "    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, FormSet> getFormSets() {\n        return hFormSets;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": ["// FastHashMap is not generic"], "return_type": "Map<String, FormSet>", "classes": []}, "docstring": "\nReturns a Map of String locale keys to Lists of their FormSets.\n@return Map of Form sets\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Log]getLog()", "name": "getLog", "arg_nums": 0, "params": [], "return_type": "Log", "signature": "private Log getLog()", "original_string": "    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(ValidatorResources.class);\n        }\n        return log;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Log", "classes": []}, "docstring": "\nAccessor method for Log instance.\n\nThe Log instance variable is transient and\naccessing it through this method ensures it\nis re-initialized when this instance is\nde-serialized.\n\n@return The Log instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[FormSet]getParent(FormSet)", "name": "getParent", "arg_nums": 1, "params": [{"name": "fs", "type": "FormSet"}], "return_type": "FormSet", "signature": "private FormSet getParent(final FormSet fs)", "original_string": "    private FormSet getParent(final FormSet fs) {\n\n        FormSet parent = null;\n        if (fs.getType() == FormSet.LANGUAGE_FORMSET) {\n            parent = defaultFormSet;\n        } else if (fs.getType() == FormSet.COUNTRY_FORMSET) {\n            parent = getFormSets().get(buildLocale(fs.getLanguage(), null, null));\n            if (parent == null) {\n                parent = defaultFormSet;\n            }\n        } else if (fs.getType() == FormSet.VARIANT_FORMSET) {\n            parent = getFormSets().get(buildLocale(fs.getLanguage(), fs.getCountry(), null));\n            if (parent == null) {\n                parent = getFormSets().get(buildLocale(fs.getLanguage(), null, null));\n                if (parent == null) {\n                    parent = defaultFormSet;\n                }\n            }\n        }\n        return parent;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "FormSet", "classes": []}, "docstring": "\nFinds the given formSet's parent. ex: A formSet with locale en_UK_TEST1\nhas a direct parent in the formSet with locale en_UK. If it doesn't\nexist, find the formSet with locale en, if no found get the\ndefaultFormSet.\n\n@param fs\n           the formSet we want to get the parent from\n@return fs's parent\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[ValidatorAction]getValidatorAction(String)", "name": "getValidatorAction", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "ValidatorAction", "signature": "public ValidatorAction getValidatorAction(final String key)", "original_string": "    public ValidatorAction getValidatorAction(final String key) {\n        return getActions().get(key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ValidatorAction", "classes": []}, "docstring": "\nGets a {@code ValidatorAction} based on it's name.\n@param key The validator action key.\n@return The validator action.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Map<String, ValidatorAction>]getValidatorActions()", "name": "getValidatorActions", "arg_nums": 0, "params": [], "return_type": "Map<String, ValidatorAction>", "signature": "public Map<String, ValidatorAction> getValidatorActions()", "original_string": "    public Map<String, ValidatorAction> getValidatorActions() {\n        return Collections.unmodifiableMap(getActions());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ValidatorAction>", "classes": []}, "docstring": "\nGets an unmodifiable {@link Map} of the {@code ValidatorAction}s.\n@return Map of validator actions.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[Digester]initDigester()", "name": "initDigester", "arg_nums": 0, "params": [], "return_type": "Digester", "signature": "private Digester initDigester()", "original_string": "    private Digester initDigester() {\n        URL rulesUrl = this.getClass().getResource(VALIDATOR_RULES);\n        if (rulesUrl == null) {\n            // Fix for Issue# VALIDATOR-195\n            rulesUrl = ValidatorResources.class.getResource(VALIDATOR_RULES);\n        }\n        if (getLog().isDebugEnabled()) {\n            getLog().debug(\"Loading rules from '\" + rulesUrl + \"'\");\n        }\n        final Digester digester = DigesterLoader.createDigester(rulesUrl);\n        digester.setNamespaceAware(true);\n        digester.setValidating(true);\n        digester.setUseContextClassLoader(true);\n\n        // Add rules for arg0-arg3 elements\n        addOldArgRules(digester);\n\n        // register DTDs\n        for (int i = 0; i < REGISTRATIONS.length; i += 2) {\n            final URL url = this.getClass().getResource(REGISTRATIONS[i + 1]);\n            if (url != null) {\n                digester.register(REGISTRATIONS[i], url.toString());\n            }\n        }\n        return digester;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Digester", "classes": []}, "docstring": "\n Initialize the digester.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]process()", "name": "process", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void process()", "original_string": "    public void process() {\n        hFormSets.setFast(true);\n        hConstants.setFast(true);\n        hActions.setFast(true);\n\n        processForms();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nProcess the {@code ValidatorResources} object. Currently sets the\n{@code FastHashMap} s to the 'fast' mode and call the processes\nall other resources. <strong>Note </strong>: The framework calls this\nautomatically when ValidatorResources is created from an XML file. If you\ncreate an instance of this class by hand you <strong>must </strong> call\nthis method when finished.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources.[void]processForms()", "name": "processForms", "arg_nums": 0, "params": [], "return_type": "void", "signature": "private void processForms()", "original_string": "    private void processForms() {\n        if (defaultFormSet == null) { // it isn't mandatory to have a\n            // default formset\n            defaultFormSet = new FormSet();\n        }\n        defaultFormSet.process(getConstants());\n        // Loop through FormSets and merge if necessary\n        for (final String key : getFormSets().keySet()) {\n            final FormSet fs = getFormSets().get(key);\n            fs.merge(getParent(fs));\n        }\n\n        // Process Fully Constructed FormSets\n        for (final FormSet fs : getFormSets().values()) {\n            if (!fs.isProcessed()) {\n                fs.process(getConstants());\n            }\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResources.java", "class_name": "ValidatorResources", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResources.java.ValidatorResources", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n<p>Process the {@code Form} objects.  This clones the {@code Field}s\nthat don't exist in a {@code FormSet} compared to its parent\n{@code FormSet}.</p>\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Byte]formatByte(String)", "name": "formatByte", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Byte", "signature": "public static Byte formatByte(final String value)", "original_string": "    public static Byte formatByte(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Byte.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a byte primitive.\n\n@param value The value validation is being performed on.\n@return the converted Byte value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Byte]formatByte(String,Locale)", "name": "formatByte", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Byte", "signature": "public static Byte formatByte(final String value, final Locale locale)", "original_string": "    public static Byte formatByte(final String value, final Locale locale) {\n        Byte result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Byte.MIN_VALUE &&\n                    num.doubleValue() <= Byte.MAX_VALUE) {\n                result = Byte.valueOf(num.byteValue());\n            }\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a byte primitive.\n\n@param value  The value validation is being performed on.\n@param locale The locale to use to parse the number (system default if\n              null)\n@return the converted Byte value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Long]formatCreditCard(String)", "name": "formatCreditCard", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Long", "signature": "public static Long formatCreditCard(final String value)", "original_string": "    public static Long formatCreditCard(final String value) {\n        return GenericValidator.isCreditCard(value) ? Long.valueOf(value) : null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\nChecks if the field is a valid credit card number.\n\n<p>Reference Sean M. Burke's <a href=\"http://www.ling.nwu.edu/~sburke/pub/luhn_lib.pl\">\nscript</a>.</p>\n\n@param value The value validation is being performed on.\n@return the converted Credit Card number.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Date]formatDate(String,Locale)", "name": "formatDate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Date", "signature": "public static Date formatDate(final String value, final Locale locale)", "original_string": "    public static Date formatDate(final String value, final Locale locale) {\n        Date date = null;\n\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            // Get the formatters to check against\n            DateFormat formatterShort = null;\n            DateFormat formatterDefault = null;\n            if (locale != null) {\n                formatterShort =\n                        DateFormat.getDateInstance(DateFormat.SHORT, locale);\n                formatterDefault =\n                        DateFormat.getDateInstance(DateFormat.DEFAULT, locale);\n            } else {\n                formatterShort =\n                        DateFormat.getDateInstance(\n                                DateFormat.SHORT,\n                                Locale.getDefault());\n                formatterDefault =\n                        DateFormat.getDateInstance(\n                                DateFormat.DEFAULT,\n                                Locale.getDefault());\n            }\n\n            // Turn off lenient parsing\n            formatterShort.setLenient(false);\n            formatterDefault.setLenient(false);\n\n            // Firstly, try with the short form\n            try {\n                date = formatterShort.parse(value);\n            } catch (final ParseException e) {\n                // Fall back on the default one\n                date = formatterDefault.parse(value);\n            }\n        } catch (final ParseException e) {\n            // Bad date, so LOG and return null\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Date parse failed value=[\" + value + \"], \" +\n                        \"locale=[\" + locale + \"] \" + e);\n            }\n        }\n\n        return date;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nChecks if the field is a valid date.\n\n<p>The {@link Locale} is used with {@link java.text.DateFormat}. The {@link java.text.DateFormat#setLenient(boolean)}\nmethod is set to {@code false} for all.\n</p>\n\n@param value  The value validation is being performed on.\n@param locale The Locale to use to parse the date (system default if null)\n@return the converted Date value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Date]formatDate(String,String,boolean)", "name": "formatDate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "datePattern", "type": "String"}, {"name": "strict", "type": "boolean"}], "return_type": "Date", "signature": "public static Date formatDate(final String value, final String datePattern, final boolean strict)", "original_string": "    public static Date formatDate(final String value, final String datePattern, final boolean strict) {\n        Date date = null;\n\n        if (value == null\n                || datePattern == null\n                || datePattern.isEmpty()) {\n            return null;\n        }\n\n        try {\n            final SimpleDateFormat formatter = new SimpleDateFormat(datePattern);\n            formatter.setLenient(false);\n\n            date = formatter.parse(value);\n\n            if (strict && datePattern.length() != value.length()) {\n                date = null;\n            }\n        } catch (final ParseException e) {\n            // Bad date so return null\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Date parse failed value=[\" + value + \"], \" +\n                        \"pattern=[\" + datePattern + \"], \" +\n                        \"strict=[\" + strict + \"] \" + e);\n            }\n        }\n\n        return date;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\nChecks if the field is a valid date.\n\n<p>The pattern is used with {@link java.text.SimpleDateFormat}.\nIf strict is true, then the length will be checked so '2/12/1999' will\nnot pass validation with the format 'MM/dd/yyyy' because the month isn't\ntwo digits. The {@link java.text.SimpleDateFormat#setLenient(boolean)}\nmethod is set to {@code false} for all.\n</p>\n\n@param value       The value validation is being performed on.\n@param datePattern The pattern passed to {@link SimpleDateFormat}.\n@param strict      Whether or not to have an exact match of the\n                   datePattern.\n@return the converted Date value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Double]formatDouble(String)", "name": "formatDouble", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Double", "signature": "public static Double formatDouble(final String value)", "original_string": "    public static Double formatDouble(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Double.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a double primitive.\n\n@param value The value validation is being performed on.\n@return the converted Double value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Double]formatDouble(String,Locale)", "name": "formatDouble", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Double", "signature": "public static Double formatDouble(final String value, final Locale locale)", "original_string": "    public static Double formatDouble(final String value, final Locale locale) {\n        Double result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getInstance(locale);\n            } else {\n                formatter = NumberFormat.getInstance(Locale.getDefault());\n            }\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Double.MAX_VALUE * -1 &&\n                    num.doubleValue() <= Double.MAX_VALUE) {\n                result = Double.valueOf(num.doubleValue());\n            }\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a double primitive.\n\n@param value  The value validation is being performed on.\n@param locale The locale to use to parse the number (system default if\n              null)\n@return the converted Double value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Float]formatFloat(String)", "name": "formatFloat", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Float", "signature": "public static Float formatFloat(final String value)", "original_string": "    public static Float formatFloat(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Float.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a float primitive.\n\n@param value The value validation is being performed on.\n@return the converted Float value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Float]formatFloat(String,Locale)", "name": "formatFloat", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Float", "signature": "public static Float formatFloat(final String value, final Locale locale)", "original_string": "    public static Float formatFloat(final String value, final Locale locale) {\n        Float result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getInstance(locale);\n            } else {\n                formatter = NumberFormat.getInstance(Locale.getDefault());\n            }\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Float.MAX_VALUE * -1 &&\n                    num.doubleValue() <= Float.MAX_VALUE) {\n                result = Float.valueOf(num.floatValue());\n            }\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a float primitive.\n\n@param value  The value validation is being performed on.\n@param locale The locale to use to parse the number (system default if\n              null)\n@return the converted Float value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Integer]formatInt(String)", "name": "formatInt", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Integer", "signature": "public static Integer formatInt(final String value)", "original_string": "    public static Integer formatInt(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Integer.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a int primitive.\n\n@param value The value validation is being performed on.\n@return the converted Integer value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Integer]formatInt(String,Locale)", "name": "formatInt", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Integer", "signature": "public static Integer formatInt(final String value, final Locale locale)", "original_string": "    public static Integer formatInt(final String value, final Locale locale) {\n        Integer result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Integer.MIN_VALUE &&\n                    num.doubleValue() <= Integer.MAX_VALUE) {\n                result = Integer.valueOf(num.intValue());\n            }\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\nChecks if the value can safely be converted to an int primitive.\n\n@param value  The value validation is being performed on.\n@param locale The locale to use to parse the number (system default if\n              null)\n@return the converted Integer value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Long]formatLong(String)", "name": "formatLong", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Long", "signature": "public static Long formatLong(final String value)", "original_string": "    public static Long formatLong(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Long.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a long primitive.\n\n@param value The value validation is being performed on.\n@return the converted Long value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Long]formatLong(String,Locale)", "name": "formatLong", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Long", "signature": "public static Long formatLong(final String value, final Locale locale)", "original_string": "    public static Long formatLong(final String value, final Locale locale) {\n        Long result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Long.MIN_VALUE &&\n                    num.doubleValue() <= Long.MAX_VALUE) {\n                result = Long.valueOf(num.longValue());\n            }\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a long primitive.\n\n@param value  The value validation is being performed on.\n@param locale The locale to use to parse the number (system default if\n              null)\n@return the converted Long value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Short]formatShort(String)", "name": "formatShort", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Short", "signature": "public static Short formatShort(final String value)", "original_string": "    public static Short formatShort(final String value) {\n        if (value == null) {\n            return null;\n        }\n\n        try {\n            return Short.valueOf(value);\n        } catch (final NumberFormatException e) {\n            return null;\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a short primitive.\n\n@param value The value validation is being performed on.\n@return the converted Short value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator.[Short]formatShort(String,Locale)", "name": "formatShort", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Short", "signature": "public static Short formatShort(final String value, final Locale locale)", "original_string": "    public static Short formatShort(final String value, final Locale locale) {\n        Short result = null;\n\n        if (value != null) {\n            NumberFormat formatter = null;\n            if (locale != null) {\n                formatter = NumberFormat.getNumberInstance(locale);\n            } else {\n                formatter = NumberFormat.getNumberInstance(Locale.getDefault());\n            }\n            formatter.setParseIntegerOnly(true);\n            final ParsePosition pos = new ParsePosition(0);\n            final Number num = formatter.parse(value, pos);\n\n            // If there was no error      and we used the whole string\n            if (pos.getErrorIndex() == -1 && pos.getIndex() == value.length() &&\n                    num.doubleValue() >= Short.MIN_VALUE &&\n                    num.doubleValue() <= Short.MAX_VALUE) {\n                result = Short.valueOf(num.shortValue());\n            }\n        }\n\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java", "class_name": "GenericTypeValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericTypeValidator.java.GenericTypeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\nChecks if the value can safely be converted to a short primitive.\n\n@param value  The value validation is being performed on.\n@param locale The locale to use to parse the number (system default if\n              null)\n@return the converted Short value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorException.java.ValidatorException.[]ValidatorException()", "name": "ValidatorException", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ValidatorException()", "original_string": "    public ValidatorException() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorException.java", "class_name": "ValidatorException", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorException.java.ValidatorException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an Exception with no specified detail message.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorException.java.ValidatorException.[]ValidatorException(String)", "name": "ValidatorException", "arg_nums": 1, "params": [{"name": "message", "type": "String"}], "return_type": "", "signature": "public ValidatorException(final String message)", "original_string": "    public ValidatorException(final String message) {\n        super(message);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorException.java", "class_name": "ValidatorException", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorException.java.ValidatorException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an Exception with the specified detail message.\n\n@param    message The error message.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ISBNValidator.java.ISBNValidator.[]ISBNValidator()", "name": "ISBNValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ISBNValidator()", "original_string": "    public ISBNValidator() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nDefault Constructor.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ISBNValidator.java.ISBNValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "isbn", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String isbn)", "original_string": "    public boolean isValid(final String isbn) {\n        return org.apache.commons.validator.routines.ISBNValidator.getInstance().isValidISBN10(isbn);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nIf the ISBN is formatted with space or dash separators its format is\nvalidated.  Then the digits in the number are weighted, summed, and\ndivided by 11 according to the ISBN algorithm.  If the result is zero,\nthe ISBN is valid.  This method accepts formatted or raw ISBN codes.\n\n@param isbn Candidate ISBN number to be validated. {@code null} is\nconsidered invalid.\n@return true if the string is a valid ISBN code.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[]ValidatorResult(Field)", "name": "ValidatorResult", "arg_nums": 1, "params": [{"name": "field", "type": "Field"}], "return_type": "", "signature": "public ValidatorResult(final Field field)", "original_string": "    public ValidatorResult(final Field field) {\n        this.field = field;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a {@code ValidatorResult} with the associated field being\nvalidated.\n@param field Field that was validated.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[void]add(String,boolean)", "name": "add", "arg_nums": 2, "params": [{"name": "validatorName", "type": "String"}, {"name": "result", "type": "boolean"}], "return_type": "void", "signature": "public void add(final String validatorName, final boolean result)", "original_string": "    public void add(final String validatorName, final boolean result) {\n        this.add(validatorName, result, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd the result of a validator action.\n@param validatorName Name of the validator.\n@param result Whether the validation passed or failed.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[void]add(String,boolean,Object)", "name": "add", "arg_nums": 3, "params": [{"name": "validatorName", "type": "String"}, {"name": "result", "type": "boolean"}, {"name": "value", "type": "Object"}], "return_type": "void", "signature": "public void add(final String validatorName, final boolean result, final Object value)", "original_string": "    public void add(final String validatorName, final boolean result, final Object value) {\n        hAction.put(validatorName, new ResultStatus(result, value));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd the result of a validator action.\n@param validatorName Name of the validator.\n@param result Whether the validation passed or failed.\n@param value Value returned by the validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[boolean]containsAction(String)", "name": "containsAction", "arg_nums": 1, "params": [{"name": "validatorName", "type": "String"}], "return_type": "boolean", "signature": "public boolean containsAction(final String validatorName)", "original_string": "    public boolean containsAction(final String validatorName) {\n        return hAction.containsKey(validatorName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nIndicate whether a specified validator is in the Result.\n@param validatorName Name of the validator.\n@return true if the validator is in the result.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Map<String, ResultStatus>]getActionMap()", "name": "getActionMap", "arg_nums": 0, "params": [], "return_type": "Map<String, ResultStatus>", "signature": "@Deprecated\n    public Map<String, ResultStatus> getActionMap()", "original_string": "    @Deprecated\n    public Map<String, ResultStatus> getActionMap() {\n        return Collections.unmodifiableMap(hAction);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "@Deprecated\n    public", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, ResultStatus>", "classes": []}, "docstring": "\nGets a Map of the validator actions in this Result.\n@return Map of validator actions.\n@deprecated Use getActions() to return the set of actions\n            the isValid(name) and getResult(name) methods\n            to determine the contents of ResultStatus.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Iterator<String>]getActions()", "name": "getActions", "arg_nums": 0, "params": [], "return_type": "Iterator<String>", "signature": "public Iterator<String> getActions()", "original_string": "    public Iterator<String> getActions() {\n        return Collections.unmodifiableMap(hAction).keySet().iterator();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Iterator<String>", "classes": []}, "docstring": "\nGets an Iterator of the action names contained in this Result.\n@return The set of action names.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Field]getField()", "name": "getField", "arg_nums": 0, "params": [], "return_type": "Field", "signature": "public Field getField()", "original_string": "    public Field getField() {\n        return field;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Field", "classes": []}, "docstring": "\nReturns the Field that was validated.\n@return The Field associated with this result.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[Object]getResult(String)", "name": "getResult", "arg_nums": 1, "params": [{"name": "validatorName", "type": "String"}], "return_type": "Object", "signature": "public Object getResult(final String validatorName)", "original_string": "    public Object getResult(final String validatorName) {\n        final ResultStatus status = hAction.get(validatorName);\n        return status == null ? null : status.getResult();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nGets the result of a validation.\n@param validatorName Name of the validator.\n@return The validation result.\n"}, {"uris": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "validatorName", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String validatorName)", "original_string": "    public boolean isValid(final String validatorName) {\n        final ResultStatus status = hAction.get(validatorName);\n        return status != null && status.isValid();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/ValidatorResult.java", "class_name": "ValidatorResult", "class_uri": "src/main/java/org/apache/commons/validator/ValidatorResult.java.ValidatorResult", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nIndicate whether a specified validation passed.\n@param validatorName Name of the validator.\n@return true if the validation passed.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[int]adjustForLineEnding(String,int)", "name": "adjustForLineEnding", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "lineEndLength", "type": "int"}], "return_type": "int", "signature": "private static int adjustForLineEnding(final String value, final int lineEndLength)", "original_string": "    private static int adjustForLineEnding(final String value, final int lineEndLength) {\n        int nCount = 0;\n        int rCount = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) == '\\n') {\n                nCount++;\n            }\n            if (value.charAt(i) == '\\r') {\n                rCount++;\n            }\n        }\n        final int rnCount = rCount + nCount;\n        return nCount * lineEndLength - rnCount;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate an adjustment amount for line endings.\n\nSee Bug 37962 for the rational behind this.\n\n@param value The value validation is being performed on.\n@param lineEndLength The length to use for line endings.\n@return the adjustment amount.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isBlankOrNull(String)", "name": "isBlankOrNull", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isBlankOrNull(final String value)", "original_string": "    public static boolean isBlankOrNull(final String value) {\n        // Don't trim is already empty.\n        return value == null || value.isEmpty() || value.trim().isEmpty();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the field isn't null and length of the field is greater\nthan zero not including whitespace.</p>\n\n@param value The value validation is being performed on.\n@return true if blank or null.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isByte(String)", "name": "isByte", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isByte(final String value)", "original_string": "    public static boolean isByte(final String value) {\n        return GenericTypeValidator.formatByte(value) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value can safely be converted to a byte primitive.</p>\n\n@param value The value validation is being performed on.\n@return true if the value can be converted to a Byte.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isCreditCard(String)", "name": "isCreditCard", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isCreditCard(final String value)", "original_string": "    public static boolean isCreditCard(final String value) {\n        return CREDIT_CARD_VALIDATOR.isValid(value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field is a valid credit card number.\n@param value The value validation is being performed on.\n@return true if the value is valid Credit Card Number.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isDate(String,Locale)", "name": "isDate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "boolean", "signature": "public static boolean isDate(final String value, final Locale locale)", "original_string": "    public static boolean isDate(final String value, final Locale locale) {\n        return DateValidator.getInstance().isValid(value, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the field is a valid date.  The {@link Locale} is\nused with {@link DateFormat}.  The setLenient method\nis set to {@code false} for all.</p>\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the date format, defaults to the\nsystem default if null.\n@return true if the value can be converted to a Date.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isDate(String,String,boolean)", "name": "isDate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "datePattern", "type": "String"}, {"name": "strict", "type": "boolean"}], "return_type": "boolean", "signature": "public static boolean isDate(final String value, final String datePattern, final boolean strict)", "original_string": "    public static boolean isDate(final String value, final String datePattern, final boolean strict) {\n        // TODO method isValid() not yet supported in routines version\n        return org.apache.commons.validator.DateValidator.getInstance().isValid(value, datePattern, strict);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the field is a valid date.  The pattern is used with\n{@link SimpleDateFormat}.  If strict is true, then the\nlength will be checked so '2/12/1999' will not pass validation with\nthe format 'MM/dd/yyyy' because the month isn't two digits.\nThe setLenient method is set to {@code false} for all.</p>\n\n@param value The value validation is being performed on.\n@param datePattern The pattern passed to {@link SimpleDateFormat}.\n@param strict Whether or not to have an exact match of the datePattern.\n@return true if the value can be converted to a Date.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isDouble(String)", "name": "isDouble", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isDouble(final String value)", "original_string": "    public static boolean isDouble(final String value) {\n        return GenericTypeValidator.formatDouble(value) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value can safely be converted to a double primitive.</p>\n\n@param value The value validation is being performed on.\n@return true if the value can be converted to a Double.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isEmail(String)", "name": "isEmail", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isEmail(final String value)", "original_string": "    public static boolean isEmail(final String value) {\n        return EmailValidator.getInstance().isValid(value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a field has a valid e-mail address.</p>\n\n@param value The value validation is being performed on.\n@return true if the value is valid Email Address.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isFloat(String)", "name": "isFloat", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isFloat(final String value)", "original_string": "    public static boolean isFloat(final String value) {\n        return GenericTypeValidator.formatFloat(value) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value can safely be converted to a float primitive.</p>\n\n@param value The value validation is being performed on.\n@return true if the value can be converted to a Float.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(byte,byte,byte)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "byte"}, {"name": "min", "type": "byte"}, {"name": "max", "type": "byte"}], "return_type": "boolean", "signature": "public static boolean isInRange(final byte value, final byte min, final byte max)", "original_string": "    public static boolean isInRange(final byte value, final byte min, final byte max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a value is within a range (min &amp; max specified\nin the vars attribute).</p>\n\n@param value The value validation is being performed on.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return true if the value is in the specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(double,double,double)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "double"}, {"name": "min", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public static boolean isInRange(final double value, final double min, final double max)", "original_string": "    public static boolean isInRange(final double value, final double min, final double max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a value is within a range (min &amp; max specified\nin the vars attribute).</p>\n\n@param value The value validation is being performed on.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return true if the value is in the specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(float,float,float)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "float"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "return_type": "boolean", "signature": "public static boolean isInRange(final float value, final float min, final float max)", "original_string": "    public static boolean isInRange(final float value, final float min, final float max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a value is within a range (min &amp; max specified\nin the vars attribute).</p>\n\n@param value The value validation is being performed on.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return true if the value is in the specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(int,int,int)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "int"}, {"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "boolean", "signature": "public static boolean isInRange(final int value, final int min, final int max)", "original_string": "    public static boolean isInRange(final int value, final int min, final int max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a value is within a range (min &amp; max specified\nin the vars attribute).</p>\n\n@param value The value validation is being performed on.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return true if the value is in the specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(long,long,long)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "long"}, {"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public static boolean isInRange(final long value, final long min, final long max)", "original_string": "    public static boolean isInRange(final long value, final long min, final long max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a value is within a range (min &amp; max specified\nin the vars attribute).</p>\n\n@param value The value validation is being performed on.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return true if the value is in the specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInRange(short,short,short)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "short"}, {"name": "min", "type": "short"}, {"name": "max", "type": "short"}], "return_type": "boolean", "signature": "public static boolean isInRange(final short value, final short min, final short max)", "original_string": "    public static boolean isInRange(final short value, final short min, final short max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a value is within a range (min &amp; max specified\nin the vars attribute).</p>\n\n@param value The value validation is being performed on.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return true if the value is in the specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isInt(String)", "name": "isInt", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isInt(final String value)", "original_string": "    public static boolean isInt(final String value) {\n        return GenericTypeValidator.formatInt(value) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value can safely be converted to a int primitive.</p>\n\n@param value The value validation is being performed on.\n@return true if the value can be converted to an Integer.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isLong(String)", "name": "isLong", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isLong(final String value)", "original_string": "    public static boolean isLong(final String value) {\n        return GenericTypeValidator.formatLong(value) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value can safely be converted to a long primitive.</p>\n\n@param value The value validation is being performed on.\n@return true if the value can be converted to a Long.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isShort(String)", "name": "isShort", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isShort(final String value)", "original_string": "    public static boolean isShort(final String value) {\n        return GenericTypeValidator.formatShort(value) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value can safely be converted to a short primitive.</p>\n\n@param value The value validation is being performed on.\n@return true if the value can be converted to a Short.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]isUrl(String)", "name": "isUrl", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public static boolean isUrl(final String value)", "original_string": "    public static boolean isUrl(final String value) {\n        return URL_VALIDATOR.isValid(value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a field is a valid URL address.</p>\nIf you need to modify what is considered valid then\nconsider using the UrlValidator directly.\n\n@param value The value validation is being performed on.\n@return true if the value is valid Url.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]matchRegexp(String,String)", "name": "matchRegexp", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "regexp", "type": "String"}], "return_type": "boolean", "signature": "public static boolean matchRegexp(final String value, final String regexp)", "original_string": "    public static boolean matchRegexp(final String value, final String regexp) {\n        if (regexp == null || regexp.isEmpty()) {\n            return false;\n        }\n\n        return Pattern.matches(regexp, value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value matches the regular expression.</p>\n\n@param value The value validation is being performed on.\n@param regexp The regular expression.\n@return true if matches the regular expression.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxLength(String,int)", "name": "maxLength", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "max", "type": "int"}], "return_type": "boolean", "signature": "public static boolean maxLength(final String value, final int max)", "original_string": "    public static boolean maxLength(final String value, final int max) {\n        return value.length() <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value's length is less than or equal to the max.</p>\n\n@param value The value validation is being performed on.\n@param max The maximum length.\n@return true if the value's length is less than the specified maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxLength(String,int,int)", "name": "maxLength", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "max", "type": "int"}, {"name": "lineEndLength", "type": "int"}], "return_type": "boolean", "signature": "public static boolean maxLength(final String value, final int max, final int lineEndLength)", "original_string": "    public static boolean maxLength(final String value, final int max, final int lineEndLength) {\n        final int adjustAmount = adjustForLineEnding(value, lineEndLength);\n        return value.length() + adjustAmount <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value's adjusted length is less than or equal to the max.</p>\n\n@param value The value validation is being performed on.\n@param max The maximum length.\n@param lineEndLength The length to use for line endings.\n@return true if the value's length is less than the specified maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(double,double)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public static boolean maxValue(final double value, final double max)", "original_string": "    public static boolean maxValue(final double value, final double max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is less than or equal to the max.</p>\n\n@param value The value validation is being performed on.\n@param max The maximum numeric value.\n@return true if the value is &lt;= the specified maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(float,float)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "float"}, {"name": "max", "type": "float"}], "return_type": "boolean", "signature": "public static boolean maxValue(final float value, final float max)", "original_string": "    public static boolean maxValue(final float value, final float max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is less than or equal to the max.</p>\n\n@param value The value validation is being performed on.\n@param max The maximum numeric value.\n@return true if the value is &lt;= the specified maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(int,int)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "boolean", "signature": "public static boolean maxValue(final int value, final int max)", "original_string": "    public static boolean maxValue(final int value, final int max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is less than or equal to the max.</p>\n\n@param value The value validation is being performed on.\n@param max The maximum numeric value.\n@return true if the value is &lt;= the specified maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]maxValue(long,long)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public static boolean maxValue(final long value, final long max)", "original_string": "    public static boolean maxValue(final long value, final long max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is less than or equal to the max.</p>\n\n@param value The value validation is being performed on.\n@param max The maximum numeric value.\n@return true if the value is &lt;= the specified maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minLength(String,int)", "name": "minLength", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "min", "type": "int"}], "return_type": "boolean", "signature": "public static boolean minLength(final String value, final int min)", "original_string": "    public static boolean minLength(final String value, final int min) {\n        return value.length() >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value's length is greater than or equal to the min.</p>\n\n@param value The value validation is being performed on.\n@param min The minimum length.\n@return true if the value's length is more than the specified minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minLength(String,int,int)", "name": "minLength", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "min", "type": "int"}, {"name": "lineEndLength", "type": "int"}], "return_type": "boolean", "signature": "public static boolean minLength(final String value, final int min, final int lineEndLength)", "original_string": "    public static boolean minLength(final String value, final int min, final int lineEndLength) {\n        final int adjustAmount = adjustForLineEnding(value, lineEndLength);\n        return value.length() + adjustAmount >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value's adjusted length is greater than or equal to the min.</p>\n\n@param value The value validation is being performed on.\n@param min The minimum length.\n@param lineEndLength The length to use for line endings.\n@return true if the value's length is more than the specified minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(double,double)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "double"}, {"name": "min", "type": "double"}], "return_type": "boolean", "signature": "public static boolean minValue(final double value, final double min)", "original_string": "    public static boolean minValue(final double value, final double min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is greater than or equal to the min.</p>\n\n@param value The value validation is being performed on.\n@param min The minimum numeric value.\n@return true if the value is &gt;= the specified minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(float,float)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "float"}, {"name": "min", "type": "float"}], "return_type": "boolean", "signature": "public static boolean minValue(final float value, final float min)", "original_string": "    public static boolean minValue(final float value, final float min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is greater than or equal to the min.</p>\n\n@param value The value validation is being performed on.\n@param min The minimum numeric value.\n@return true if the value is &gt;= the specified minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(int,int)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "int"}, {"name": "min", "type": "int"}], "return_type": "boolean", "signature": "public static boolean minValue(final int value, final int min)", "original_string": "    public static boolean minValue(final int value, final int min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is greater than or equal to the min.</p>\n\n@param value The value validation is being performed on.\n@param min The minimum numeric value.\n@return true if the value is &gt;= the specified minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator.[boolean]minValue(long,long)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "long"}, {"name": "min", "type": "long"}], "return_type": "boolean", "signature": "public static boolean minValue(final long value, final long min)", "original_string": "    public static boolean minValue(final long value, final long min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/GenericValidator.java", "class_name": "GenericValidator", "class_uri": "src/main/java/org/apache/commons/validator/GenericValidator.java.GenericValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the value is greater than or equal to the min.</p>\n\n@param value The value validation is being performed on.\n@param min The minimum numeric value.\n@return true if the value is &gt;= the specified minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[DateValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "DateValidator", "signature": "public static DateValidator getInstance()", "original_string": "    public static DateValidator getInstance() {\n        return DATE_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "DateValidator", "classes": []}, "docstring": "\nReturns the Singleton instance of this validator.\n@return A singleton instance of the DateValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[]DateValidator()", "name": "DateValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "protected DateValidator()", "original_string": "    protected DateValidator() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nProtected constructor for subclasses to use.\n"}, {"uris": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[boolean]isValid(String,Locale)", "name": "isValid", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "boolean", "signature": "public boolean isValid(final String value, final Locale locale)", "original_string": "    public boolean isValid(final String value, final Locale locale) {\n\n        if (value == null) {\n            return false;\n        }\n\n        DateFormat formatter;\n        if (locale != null) {\n            formatter = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n        } else {\n            formatter =\n                    DateFormat.getDateInstance(\n                            DateFormat.SHORT,\n                            Locale.getDefault());\n        }\n\n        formatter.setLenient(false);\n\n        try {\n            formatter.parse(value);\n        } catch (final ParseException e) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the field is a valid date.  The {@link Locale} is\nused with {@link DateFormat}.  The setLenient method\nis set to {@code false} for all.</p>\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the date format, defaults to the default\nsystem default if null.\n@return true if the date is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator.[boolean]isValid(String,String,boolean)", "name": "isValid", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "datePattern", "type": "String"}, {"name": "strict", "type": "boolean"}], "return_type": "boolean", "signature": "public boolean isValid(final String value, final String datePattern, final boolean strict)", "original_string": "    public boolean isValid(final String value, final String datePattern, final boolean strict) {\n\n        if (value == null\n                || datePattern == null\n                || datePattern.isEmpty()) {\n\n            return false;\n        }\n\n        final SimpleDateFormat formatter = new SimpleDateFormat(datePattern);\n        formatter.setLenient(false);\n\n        try {\n            formatter.parse(value);\n        } catch (final ParseException e) {\n            return false;\n        }\n\n        if (strict && datePattern.length() != value.length()) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if the field is a valid date.  The pattern is used with\n{@link SimpleDateFormat}.  If strict is true, then the\nlength will be checked so '2/12/1999' will not pass validation with\nthe format 'MM/dd/yyyy' because the month isn't two digits.\nThe setLenient method is set to {@code false} for all.</p>\n\n@param value The value validation is being performed on.\n@param datePattern The pattern passed to {@link SimpleDateFormat}.\n@param strict Whether or not to have an exact match of the datePattern.\n@return true if the date is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]addConstant(String,String)", "name": "addConstant", "arg_nums": 2, "params": [{"name": "name", "type": "String"}, {"name": "value", "type": "String"}], "return_type": "void", "signature": "public void addConstant(final String name, final String value)", "original_string": "    public void addConstant(final String name, final String value) {\n        if (constants.containsKey(name)) {\n            getLog().error(\"Constant '\" + name + \"' already exists in FormSet[\" + displayKey() + \"] - ignoring.\");\n        } else {\n            constants.put(name, value);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code Constant} to the locale level.\n\n@param name   The constant name\n@param value  The constant value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]addForm(Form)", "name": "addForm", "arg_nums": 1, "params": [{"name": "f", "type": "Form"}], "return_type": "void", "signature": "public void addForm(final Form f)", "original_string": "    public void addForm(final Form f) {\n\n        final String formName = f.getName();\n        if (forms.containsKey(formName)) {\n            getLog().error(\"Form '\" + formName + \"' already exists in FormSet[\" + displayKey() + \"] - ignoring.\");\n\n        } else {\n            forms.put(f.getName(), f);\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code Form} to the {@code FormSet}.\n\n@param f  The form\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]displayKey()", "name": "displayKey", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String displayKey()", "original_string": "    public String displayKey() {\n        final StringBuilder results = new StringBuilder();\n        if (language != null && !language.isEmpty()) {\n            results.append(\"language=\");\n            results.append(language);\n        }\n        if (country != null && !country.isEmpty()) {\n            if (results.length() > 0) {\n                results.append(\", \");\n            }\n            results.append(\"country=\");\n            results.append(country);\n        }\n        if (variant != null && !variant.isEmpty()) {\n            if (results.length() > 0) {\n                results.append(\", \");\n            }\n            results.append(\"variant=\");\n            results.append(variant);\n        }\n        if (results.length() == 0) {\n            results.append(\"default\");\n        }\n\n        return results.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object's key.\n\n@return   A string representation of the key\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]getCountry()", "name": "getCountry", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getCountry()", "original_string": "    public String getCountry() {\n        return country;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the equivalent of the country component of {@link Locale}.\n\n@return   The country value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[Form]getForm(String)", "name": "getForm", "arg_nums": 1, "params": [{"name": "formName", "type": "String"}], "return_type": "Form", "signature": "public Form getForm(final String formName)", "original_string": "    public Form getForm(final String formName) {\n        return forms.get(formName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Form", "classes": []}, "docstring": "\nRetrieve a {@code Form} based on the form name.\n\n@param formName  The form name\n@return          The form\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[Map<String, Form>]getForms()", "name": "getForms", "arg_nums": 0, "params": [], "return_type": "Map<String, Form>", "signature": "public Map<String, Form> getForms()", "original_string": "    public Map<String, Form> getForms() {\n        return Collections.unmodifiableMap(forms);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Map<String, Form>", "classes": []}, "docstring": "\nA {@link Map} of {@code Form}s is returned as an unmodifiable\n{@link Map} with the key based on the form name.\n\n@return   The forms map\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]getLanguage()", "name": "getLanguage", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getLanguage()", "original_string": "    public String getLanguage() {\n        return language;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the equivalent of the language component of {@link Locale}.\n\n@return   The language value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[Log]getLog()", "name": "getLog", "arg_nums": 0, "params": [], "return_type": "Log", "signature": "private Log getLog()", "original_string": "    private Log getLog() {\n        if (log == null) {\n            log = LogFactory.getLog(FormSet.class);\n        }\n        return log;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Log", "classes": []}, "docstring": "\nAccessor method for Log instance.\n\nThe Log instance variable is transient and\naccessing it through this method ensures it\nis re-initialized when this instance is\nde-serialized.\n\n@return The Log instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[int]getType()", "name": "getType", "arg_nums": 0, "params": [], "return_type": "int", "signature": "protected int getType()", "original_string": "    protected int getType() {\n        if (getVariant() != null) {\n            if (getLanguage() == null || getCountry() == null) {\n                throw new NullPointerException(\"When variant is specified, country and language must be specified.\");\n            }\n            return VARIANT_FORMSET;\n        }\n        if (getCountry() != null) {\n            if (getLanguage() == null) {\n                throw new NullPointerException(\"When country is specified, language must be specified.\");\n            }\n            return COUNTRY_FORMSET;\n        }\n        if (getLanguage() != null) {\n            return LANGUAGE_FORMSET;\n        }\n        return GLOBAL_FORMSET;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns the type of {@code FormSet}:{@code GLOBAL_FORMSET},\n{@code LANGUAGE_FORMSET},{@code COUNTRY_FORMSET} or {@code VARIANT_FORMSET}\n.\n\n@return                       The type value\n@since 1.2.0\n@throws NullPointerException  if there is inconsistency in the locale\n     definition (not sure about this)\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]getVariant()", "name": "getVariant", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getVariant()", "original_string": "    public String getVariant() {\n        return variant;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the equivalent of the variant component of {@link Locale}.\n\n@return   The variant value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[boolean]isMerged()", "name": "isMerged", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "protected boolean isMerged()", "original_string": "    protected boolean isMerged() {\n        return merged;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nHas this formSet been merged?\n\n@return   true if it has been merged\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[boolean]isProcessed()", "name": "isProcessed", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isProcessed()", "original_string": "    public boolean isProcessed() {\n        return processed;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nWhether or not the this {@code FormSet} was processed for replacing\nvariables in strings with their values.\n\n@return   The processed value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]merge(FormSet)", "name": "merge", "arg_nums": 1, "params": [{"name": "depends", "type": "FormSet"}], "return_type": "void", "signature": "protected void merge(final FormSet depends)", "original_string": "    protected void merge(final FormSet depends) {\n        if (depends != null) {\n            final Map<String, Form> pForms = getForms();\n            final Map<String, Form> dForms = depends.getForms();\n            for (final Entry<String, Form> entry : dForms.entrySet()) {\n                final String key = entry.getKey();\n                final Form pForm = pForms.get(key);\n                if (pForm != null) { // merge, but principal 'rules', don't overwrite\n                    // anything\n                    pForm.merge(entry.getValue());\n                } else { // just add\n                    addForm(entry.getValue());\n                }\n            }\n        }\n        merged = true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nMerges the given {@code FormSet} into this one. If any of {@code depends}\ns {@code Forms} are not in this {@code FormSet} then, include\nthem, else merge both {@code Forms}. Theoretically we should only\nmerge a \"parent\" formSet.\n\n@param depends  FormSet to be merged\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]process(Map<String, String>)", "name": "process", "arg_nums": 1, "params": [{"name": "globalConstants", "type": "Map<String, String>"}], "return_type": "void", "signature": "synchronized void process(final Map<String, String> globalConstants)", "original_string": "    synchronized void process(final Map<String, String> globalConstants) {\n        for (final Form f : forms.values()) {\n            f.process(globalConstants, constants, forms);\n        }\n\n        processed = true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "synchronized", "marker_annotations": [], "non_marker_annotations": ["synchronized"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nProcesses all of the {@code Form}s.\n\n@param globalConstants  Global constants\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]setCountry(String)", "name": "setCountry", "arg_nums": 1, "params": [{"name": "country", "type": "String"}], "return_type": "void", "signature": "public void setCountry(final String country)", "original_string": "    public void setCountry(final String country) {\n        this.country = country;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the equivalent of the country component of {@link Locale}.\n\n@param country  The new country value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]setLanguage(String)", "name": "setLanguage", "arg_nums": 1, "params": [{"name": "language", "type": "String"}], "return_type": "void", "signature": "public void setLanguage(final String language)", "original_string": "    public void setLanguage(final String language) {\n        this.language = language;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the equivalent of the language component of {@link Locale}.\n\n@param language  The new language value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[void]setVariant(String)", "name": "setVariant", "arg_nums": 1, "params": [{"name": "variant", "type": "String"}], "return_type": "void", "signature": "public void setVariant(final String variant)", "original_string": "    public void setVariant(final String variant) {\n        this.variant = variant;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the equivalent of the variant component of {@link Locale}.\n\n@param variant  The new variant value\n"}, {"uris": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"FormSet: language=\");\n        results.append(language);\n        results.append(\"  country=\");\n        results.append(country);\n        results.append(\"  variant=\");\n        results.append(variant);\n        results.append(\"\\n\");\n\n        for (final Object name : getForms().values()) {\n            results.append(\"   \");\n            results.append(name);\n            results.append(\"\\n\");\n        }\n\n        return results.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/FormSet.java", "class_name": "FormSet", "class_uri": "src/main/java/org/apache/commons/validator/FormSet.java.FormSet", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object.\n\n@return   A string representation\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[Object]clone()", "name": "clone", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "@Override\n    public Object clone()", "original_string": "    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nCreates and returns a copy of this object.\n@return A copy of the Msg.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]getBundle()", "name": "getBundle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getBundle()", "original_string": "    public String getBundle() {\n        return bundle;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the resource bundle name.\n@return The bundle name.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]getKey()", "name": "getKey", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getKey()", "original_string": "    public String getKey() {\n        return key;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the key/value.\n@return The message key/value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getName()", "original_string": "    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name of the dependency.\n@return The dependency name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[boolean]isResource()", "name": "isResource", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isResource()", "original_string": "    public boolean isResource() {\n        return resource;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether or not the key is a resource key or literal value.\n@return {@code true} if key is a resource key.\n@since 1.1.4\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setBundle(String)", "name": "setBundle", "arg_nums": 1, "params": [{"name": "bundle", "type": "String"}], "return_type": "void", "signature": "public void setBundle(final String bundle)", "original_string": "    public void setBundle(final String bundle) {\n        this.bundle = bundle;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the resource bundle name.\n@param bundle The new bundle name.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setKey(String)", "name": "setKey", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "void", "signature": "public void setKey(final String key)", "original_string": "    public void setKey(final String key) {\n        this.key = key;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the key/value.\n@param key The message key/value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setName(String)", "name": "setName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "public void setName(final String name)", "original_string": "    public void setName(final String name) {\n        this.name = name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name of the dependency.\n@param name The dependency name.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[void]setResource(boolean)", "name": "setResource", "arg_nums": 1, "params": [{"name": "resource", "type": "boolean"}], "return_type": "void", "signature": "public void setResource(final boolean resource)", "original_string": "    public void setResource(final boolean resource) {\n        this.resource = resource;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets whether or not the key is a resource.\n@param resource If true indicates the key is a resource.\n@since 1.1.4\n"}, {"uris": "src/main/java/org/apache/commons/validator/Msg.java.Msg.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"Msg: name=\");\n        results.append(name);\n        results.append(\"  key=\");\n        results.append(key);\n        results.append(\"  resource=\");\n        results.append(resource);\n        results.append(\"  bundle=\");\n        results.append(bundle);\n        results.append(\"\\n\");\n\n        return results.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Msg.java", "class_name": "Msg", "class_uri": "src/main/java/org/apache/commons/validator/Msg.java.Msg", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object.\n@return Msg String representation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[void]addField(Field)", "name": "addField", "arg_nums": 1, "params": [{"name": "f", "type": "Field"}], "return_type": "void", "signature": "public void addField(final Field f)", "original_string": "    public void addField(final Field f) {\n        lFields.add(f);\n        getFieldMap().put(f.getKey(), f);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nAdd a {@code Field} to the {@code Form}.\n\n@param f  The field\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[boolean]containsField(String)", "name": "containsField", "arg_nums": 1, "params": [{"name": "fieldName", "type": "String"}], "return_type": "boolean", "signature": "public boolean containsField(final String fieldName)", "original_string": "    public boolean containsField(final String fieldName) {\n        return getFieldMap().containsKey(fieldName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if this Form contains a Field with the given name.\n\n@param fieldName  The field name\n@return           True if this form contains the field by the given name\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[String]getExtends()", "name": "getExtends", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getExtends()", "original_string": "    public String getExtends() {\n        return inherit;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name/key of the parent set of validation rules.\n\n@return   The extends value\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[Field]getField(String)", "name": "getField", "arg_nums": 1, "params": [{"name": "fieldName", "type": "String"}], "return_type": "Field", "signature": "public Field getField(final String fieldName)", "original_string": "    public Field getField(final String fieldName) {\n        return getFieldMap().get(fieldName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Field", "classes": []}, "docstring": "\nReturns the Field with the given name or null if this Form has no such\nfield.\n\n@param fieldName  The field name\n@return           The field value\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[Map<String, Field>]getFieldMap()", "name": "getFieldMap", "arg_nums": 0, "params": [], "return_type": "Map<String, Field>", "signature": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, Field> getFieldMap()", "original_string": "    @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected Map<String, Field> getFieldMap() {\n        return hFields;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "@SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n    protected", "marker_annotations": [], "non_marker_annotations": ["@SuppressWarnings(\"unchecked\")", "protected"], "comments": ["// FastHashMap is not generic"], "return_type": "Map<String, Field>", "classes": []}, "docstring": "\nReturns a Map of String field keys to Field objects.\n\n@return   The fieldMap value\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[List<Field>]getFields()", "name": "getFields", "arg_nums": 0, "params": [], "return_type": "List<Field>", "signature": "public List<Field> getFields()", "original_string": "    public List<Field> getFields() {\n        return Collections.unmodifiableList(lFields);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "List<Field>", "classes": []}, "docstring": "\nA {@code List} of {@code Field}s is returned as an unmodifiable\n{@code List}.\n\n@return   The fields value\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getName()", "original_string": "    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name/key of the set of validation rules.\n\n@return   The name value\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[boolean]isExtending()", "name": "isExtending", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isExtending()", "original_string": "    public boolean isExtending() {\n        return inherit != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nGets extends flag.\n\n@return   The extending value\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[boolean]isProcessed()", "name": "isProcessed", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isProcessed()", "original_string": "    public boolean isProcessed() {\n        return processed;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nWhether or not the this {@code Form} was processed for replacing\nvariables in strings with their values.\n\n@return   The processed value\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[void]merge(Form)", "name": "merge", "arg_nums": 1, "params": [{"name": "depends", "type": "Form"}], "return_type": "void", "signature": "protected void merge(final Form depends)", "original_string": "    protected void merge(final Form depends) {\n\n        final List<Field> templFields = new ArrayList<>();\n        @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n        final\n        Map<String, Field> temphFields = new FastHashMap();\n        for (final Field defaultField : depends.getFields()) {\n            if (defaultField != null) {\n                final String fieldKey = defaultField.getKey();\n                if (!containsField(fieldKey)) {\n                    templFields.add(defaultField);\n                    temphFields.put(fieldKey, defaultField);\n                }\n                else {\n                    final Field old = getField(fieldKey);\n                    getFieldMap().remove(fieldKey);\n                    lFields.remove(old);\n                    templFields.add(old);\n                    temphFields.put(fieldKey, old);\n                }\n            }\n        }\n        lFields.addAll(0, templFields);\n        getFieldMap().putAll(temphFields);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nMerges the given form into this one. For any field in {@code depends}\nnot present in this form, include it. {@code depends} has precedence\nin the way the fields are ordered.\n\n@param depends  the form we want to merge\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[void]process(Map<String, String>,Map<String, String>,Map<String, Form>)", "name": "process", "arg_nums": 3, "params": [{"name": "globalConstants", "type": "Map<String, String>"}, {"name": "constants", "type": "Map<String, String>"}, {"name": "forms", "type": "Map<String, Form>"}], "return_type": "void", "signature": "protected void process(final Map<String, String> globalConstants, final Map<String, String> constants, final Map<String, Form> forms)", "original_string": "    protected void process(final Map<String, String> globalConstants, final Map<String, String> constants, final Map<String, Form> forms) {\n        if (isProcessed()) {\n            return;\n        }\n\n        int n = 0; //we want the fields from its parent first\n        if (isExtending()) {\n            final Form parent = forms.get(inherit);\n            if (parent != null) {\n                if (!parent.isProcessed()) {\n                    // we want to go all the way up the tree\n                    parent.process(constants, globalConstants, forms);\n                }\n                for (final Field f : parent.getFields()) {\n                    // we want to be able to override any fields we like\n                    if (getFieldMap().get(f.getKey()) == null) {\n                        lFields.add(n, f);\n                        getFieldMap().put(f.getKey(), f);\n                        n++;\n                    }\n                }\n            }\n        }\n        hFields.setFast(true);\n        // no need to reprocess parent's fields, we iterate from 'n'\n        for (final Iterator<Field> i = lFields.listIterator(n); i.hasNext(); ) {\n            final Field f = i.next();\n            f.process(globalConstants, constants);\n        }\n\n        processed = true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nProcesses all of the {@code Form}'s {@code Field}s.\n\n@param globalConstants  A map of global constants\n@param constants        Local constants\n@param forms            Map of forms\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[void]setExtends(String)", "name": "setExtends", "arg_nums": 1, "params": [{"name": "inherit", "type": "String"}], "return_type": "void", "signature": "public void setExtends(final String inherit)", "original_string": "    public void setExtends(final String inherit) {\n        this.inherit = inherit;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name/key of the parent set of validation rules.\n\n@param inherit  The new extends value\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[void]setName(String)", "name": "setName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "public void setName(final String name)", "original_string": "    public void setName(final String name) {\n        this.name = name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name/key of the set of validation rules.\n\n@param name  The new name value\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"Form: \");\n        results.append(name);\n        results.append(\"\\n\");\n\n        for (final Field lField : lFields) {\n            results.append(\"\\tField: \\n\");\n            results.append(lField);\n            results.append(\"\\n\");\n        }\n\n        return results.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object.\n\n@return string representation\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>,int)", "name": "validate", "arg_nums": 3, "params": [{"name": "params", "type": "Map<String, Object>"}, {"name": "actions", "type": "Map<String, ValidatorAction>"}, {"name": "page", "type": "int"}], "return_type": "ValidatorResults", "signature": "ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions, final int page)", "original_string": "    ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions, final int page)\n        throws ValidatorException {\n        return validate(params, actions, page, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "ValidatorResults", "classes": []}, "docstring": "\nValidate all Fields in this Form on the given page and below.\n\n@param params               A Map of parameter class names to parameter\n     values to pass into validation methods.\n@param actions              A Map of validator names to ValidatorAction\n     objects.\n@param page                 Fields on pages higher than this will not be\n     validated.\n@return                     A ValidatorResults object containing all\n     validation messages.\n@throws ValidatorException\n"}, {"uris": "src/main/java/org/apache/commons/validator/Form.java.Form.[ValidatorResults]validate(Map<String, Object>,Map<String, ValidatorAction>,int,String)", "name": "validate", "arg_nums": 4, "params": [{"name": "params", "type": "Map<String, Object>"}, {"name": "actions", "type": "Map<String, ValidatorAction>"}, {"name": "page", "type": "int"}, {"name": "fieldName", "type": "String"}], "return_type": "ValidatorResults", "signature": "ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions, final int page, final String fieldName)", "original_string": "    ValidatorResults validate(final Map<String, Object> params, final Map<String, ValidatorAction> actions, final int page, final String fieldName)\n            throws ValidatorException {\n        final ValidatorResults results = new ValidatorResults();\n        params.put(Validator.VALIDATOR_RESULTS_PARAM, results);\n\n        // Only validate a single field if specified\n        if (fieldName != null) {\n            final Field field = getFieldMap().get(fieldName);\n\n            if (field == null) {\n                throw new ValidatorException(\"Unknown field \" + fieldName + \" in form \" + getName());\n            }\n            params.put(Validator.FIELD_PARAM, field);\n\n            if (field.getPage() <= page) {\n                results.merge(field.validate(params, actions));\n            }\n        } else {\n            for (final Field field : lFields) {\n\n                params.put(Validator.FIELD_PARAM, field);\n\n                if (field.getPage() <= page) {\n                    results.merge(field.validate(params, actions));\n                }\n            }\n        }\n\n        return results;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Form.java", "class_name": "Form", "class_uri": "src/main/java/org/apache/commons/validator/Form.java.Form", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "ValidatorResults", "classes": []}, "docstring": "\nValidate all Fields in this Form on the given page and below.\n\n@param params               A Map of parameter class names to parameter\n     values to pass into validation methods.\n@param actions              A Map of validator names to ValidatorAction\n     objects.\n@param page                 Fields on pages higher than this will not be\n     validated.\n@return                     A ValidatorResults object containing all\n     validation messages.\n@throws ValidatorException\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator()", "name": "UrlValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public UrlValidator()", "original_string": "    public UrlValidator() {\n        this(null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a UrlValidator with default properties.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator(int)", "name": "UrlValidator", "arg_nums": 1, "params": [{"name": "options", "type": "int"}], "return_type": "", "signature": "public UrlValidator(final int options)", "original_string": "    public UrlValidator(final int options) {\n        this(null, options);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nInitialize a UrlValidator with the given validation options.\n@param options The options should be set using the public constants declared in\nthis class.  To set multiple options you simply add them together.  For example,\nALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator(String[])", "name": "UrlValidator", "arg_nums": 1, "params": [{"name": "schemes", "type": "String[]"}], "return_type": "", "signature": "public UrlValidator(final String[] schemes)", "original_string": "    public UrlValidator(final String[] schemes) {\n        this(schemes, 0);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nBehavior of validation is modified by passing in several strings options:\n@param schemes Pass in one or more URL schemes to consider valid, passing in\n       a null will default to \"http,https,ftp\" being valid.\n       If a non-null schemes is specified then all valid schemes must\n       be specified. Setting the ALLOW_ALL_SCHEMES option will\n       ignore the contents of schemes.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[]UrlValidator(String[],int)", "name": "UrlValidator", "arg_nums": 2, "params": [{"name": "schemes", "type": "String[]"}, {"name": "options", "type": "int"}], "return_type": "", "signature": "public UrlValidator(String[] schemes, final int options)", "original_string": "    public UrlValidator(String[] schemes, final int options) {\n        this.options = new Flags(options);\n\n        if (this.options.isOn(ALLOW_ALL_SCHEMES)) {\n            return;\n        }\n\n        if (schemes == null) {\n            schemes = defaultSchemes;\n        }\n\n        allowedSchemes.addAll(Arrays.asList(schemes));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nBehavour of validation is modified by passing in options:\n@param schemes The set of valid schemes.\n@param options The options should be set using the public constants declared in\nthis class.  To set multiple options you simply add them together.  For example,\nALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[int]countToken(String,String)", "name": "countToken", "arg_nums": 2, "params": [{"name": "token", "type": "String"}, {"name": "target", "type": "String"}], "return_type": "int", "signature": "protected int countToken(final String token, final String target)", "original_string": "    protected int countToken(final String token, final String target) {\n        int tokenIndex = 0;\n        int count = 0;\n        while (tokenIndex != -1) {\n            tokenIndex = target.indexOf(token, tokenIndex);\n            if (tokenIndex > -1) {\n                tokenIndex++;\n                count++;\n            }\n        }\n        return count;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns the number of times the token appears in the target.\n@param token Token value to be counted.\n@param target Target value to count tokens in.\n@return the number of tokens.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String value)", "original_string": "    public boolean isValid(final String value) {\n        if (value == null) {\n            return false;\n        }\n        if (!LEGAL_ASCII_PATTERN.matcher(value).matches()) {\n           return false;\n        }\n\n        // Check the whole url address structure\n        final Matcher urlMatcher = URL_PATTERN.matcher(value);\n        if (!urlMatcher.matches()) {\n            return false;\n        }\n\n        if (!isValidScheme(urlMatcher.group(PARSE_URL_SCHEME))) {\n            return false;\n        }\n\n        if (!isValidAuthority(urlMatcher.group(PARSE_URL_AUTHORITY))) {\n            return false;\n        }\n\n        if (!isValidPath(urlMatcher.group(PARSE_URL_PATH))) {\n            return false;\n        }\n\n        if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {\n            return false;\n        }\n\n        if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a field has a valid URL address.</p>\n\n@param value The value validation is being performed on.  A {@code null}\nvalue is considered invalid.\n@return true if the URL is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidAuthority(String)", "name": "isValidAuthority", "arg_nums": 1, "params": [{"name": "authority", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidAuthority(final String authority)", "original_string": "    protected boolean isValidAuthority(final String authority) {\n        if (authority == null) {\n            return false;\n        }\n\n        final InetAddressValidator inetAddressValidator =\n                InetAddressValidator.getInstance();\n\n        final Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authority);\n        if (!authorityMatcher.matches()) {\n            return false;\n        }\n\n        boolean hostname = false;\n        // check if authority is IP address or hostname\n        String hostIP = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n        final boolean ipV4Address = inetAddressValidator.isValid(hostIP);\n\n        if (!ipV4Address) {\n            // Domain is hostname name\n            hostname = DOMAIN_PATTERN.matcher(hostIP).matches();\n        }\n\n        //rightmost hostname will never start with a digit.\n        if (hostname) {\n            // LOW-TECH FIX FOR VALIDATOR-202\n            // TODO: Rewrite to use ArrayList and .add semantics: see VALIDATOR-203\n            final char[] chars = hostIP.toCharArray();\n            int size = 1;\n            for (final char element : chars) {\n                if (element == '.') {\n                    size++;\n                }\n            }\n            final String[] domainSegment = new String[size];\n            boolean match = true;\n            int segmentCount = 0;\n            int segmentLength = 0;\n\n            while (match) {\n                final Matcher atomMatcher = ATOM_PATTERN.matcher(hostIP);\n                match = atomMatcher.matches();\n                if (match) {\n                    domainSegment[segmentCount] = atomMatcher.group(1);\n                    segmentLength = domainSegment[segmentCount].length() + 1;\n                    hostIP =\n                            segmentLength >= hostIP.length()\n                            ? \"\"\n                            : hostIP.substring(segmentLength);\n\n                    segmentCount++;\n                }\n            }\n            final String topLevel = domainSegment[segmentCount - 1];\n            if (topLevel.length() < 2 || topLevel.length() > 4) { // CHECKSTYLE IGNORE MagicNumber (deprecated code)\n                return false;\n            }\n\n            // First letter of top level must be a alpha\n            if (!ALPHA_PATTERN.matcher(topLevel.substring(0, 1)).matches()) {\n                return false;\n            }\n\n            // Make sure there's a host name preceding the authority.\n            if (segmentCount < 2) {\n                return false;\n            }\n        }\n\n        if (!hostname && !ipV4Address) {\n            return false;\n        }\n\n        final String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);\n        if (port != null && !PORT_PATTERN.matcher(port).matches()) {\n            return false;\n        }\n\n        final String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n        if (!GenericValidator.isBlankOrNull(extra)) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the authority is properly formatted.  An authority is the combination\nof hostname and port.  A {@code null} authority value is considered invalid.\n@param authority Authority value to validate.\n@return true if authority (hostname and port) is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidFragment(String)", "name": "isValidFragment", "arg_nums": 1, "params": [{"name": "fragment", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidFragment(final String fragment)", "original_string": "    protected boolean isValidFragment(final String fragment) {\n        if (fragment == null) {\n            return true;\n        }\n\n        return options.isOff(NO_FRAGMENTS);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the given fragment is null or fragments are allowed.\n@param fragment Fragment value to validate.\n@return true if fragment is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidPath(String)", "name": "isValidPath", "arg_nums": 1, "params": [{"name": "path", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidPath(final String path)", "original_string": "    protected boolean isValidPath(final String path) {\n        if (path == null) {\n            return false;\n        }\n\n        if (!PATH_PATTERN.matcher(path).matches()) {\n            return false;\n        }\n\n        final int slash2Count = countToken(\"//\", path);\n        if (options.isOff(ALLOW_2_SLASHES) && slash2Count > 0) {\n            return false;\n        }\n\n        final int slashCount = countToken(\"/\", path);\n        final int dot2Count = countToken(\"..\", path);\n        if (dot2Count > 0 && slashCount - slash2Count - 1 <= dot2Count) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the path is valid.  A {@code null} value is considered invalid.\n@param path Path value to validate.\n@return true if path is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidQuery(String)", "name": "isValidQuery", "arg_nums": 1, "params": [{"name": "query", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidQuery(final String query)", "original_string": "    protected boolean isValidQuery(final String query) {\n        if (query == null) {\n            return true;\n        }\n\n        return QUERY_PATTERN.matcher(query).matches();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the query is null or it's a properly formatted query string.\n@param query Query value to validate.\n@return true if query is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator.[boolean]isValidScheme(String)", "name": "isValidScheme", "arg_nums": 1, "params": [{"name": "scheme", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidScheme(final String scheme)", "original_string": "    protected boolean isValidScheme(final String scheme) {\n        if (scheme == null) {\n            return false;\n        }\n\n        if (!SCHEME_PATTERN.matcher(scheme).matches()) {\n            return false;\n        }\n\n        if (options.isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme)) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate scheme. If schemes[] was initialized to a non null,\nthen only those scheme's are allowed.  Note this is slightly different\nthan for the constructor.\n@param scheme The scheme to validate.  A {@code null} value is considered\ninvalid.\n@return true if valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[EmailValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "EmailValidator", "signature": "public static EmailValidator getInstance()", "original_string": "    public static EmailValidator getInstance() {\n        return EMAIL_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "EmailValidator", "classes": []}, "docstring": "\nReturns the Singleton instance of this validator.\n@return singleton instance of this validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[]EmailValidator()", "name": "EmailValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "protected EmailValidator()", "original_string": "    protected EmailValidator() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nProtected constructor for subclasses to use.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "email", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String email)", "original_string": "    public boolean isValid(final String email) {\n        return org.apache.commons.validator.routines.EmailValidator.getInstance().isValid(email);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a field has a valid e-mail address.</p>\n\n@param email The value validation is being performed on.  A {@code null}\nvalue is considered invalid.\n@return true if the email address is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidDomain(String)", "name": "isValidDomain", "arg_nums": 1, "params": [{"name": "domain", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidDomain(final String domain)", "original_string": "    protected boolean isValidDomain(final String domain) {\n        boolean symbolic = false;\n\n        // see if domain is an IP address in brackets\n        final Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);\n\n        if (ipDomainMatcher.matches()) {\n            final InetAddressValidator inetAddressValidator =\n                    InetAddressValidator.getInstance();\n            if (inetAddressValidator.isValid(ipDomainMatcher.group(1))) {\n                return true;\n            }\n        } else {\n            // Domain is symbolic name\n            symbolic = DOMAIN_PATTERN.matcher(domain).matches();\n        }\n\n        if (!symbolic) {\n            return false;\n        }\n        if (!isValidSymbolicDomain(domain)) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the domain component of an email address is valid.\n@param domain being validated.\n@return true if the email address's domain is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidIpAddress(String)", "name": "isValidIpAddress", "arg_nums": 1, "params": [{"name": "ipAddress", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidIpAddress(final String ipAddress)", "original_string": "    protected boolean isValidIpAddress(final String ipAddress) {\n        final Matcher ipAddressMatcher = IP_DOMAIN_PATTERN.matcher(ipAddress);\n        for (int i = 1; i <= 4; i++) { // CHECKSTYLE IGNORE MagicNumber\n            final String ipSegment = ipAddressMatcher.group(i);\n            if (ipSegment == null || ipSegment.isEmpty()) {\n                return false;\n            }\n\n            int iIpSegment = 0;\n\n            try {\n                iIpSegment = Integer.parseInt(ipSegment);\n            } catch (final NumberFormatException e) {\n                return false;\n            }\n\n            if (iIpSegment > 255) { // CHECKSTYLE IGNORE MagicNumber\n                return false;\n            }\n\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidates an IP address. Returns true if valid.\n@param ipAddress IP address\n@return true if the ip address is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidSymbolicDomain(String)", "name": "isValidSymbolicDomain", "arg_nums": 1, "params": [{"name": "domain", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidSymbolicDomain(String domain)", "original_string": "    protected boolean isValidSymbolicDomain(String domain) {\n        final String[] domainSegment = new String[10]; // CHECKSTYLE IGNORE MagicNumber\n        boolean match = true;\n        int i = 0;\n        final Matcher atomMatcher = ATOM_PATTERN.matcher(domain);\n        while (match) {\n            match = atomMatcher.matches();\n            if (match) {\n                domainSegment[i] = atomMatcher.group(1);\n                final int l = domainSegment[i].length() + 1;\n                domain =\n                        l >= domain.length()\n                        ? \"\"\n                        : domain.substring(l);\n\n                i++;\n            }\n        }\n\n        final int len = i;\n\n        // Make sure there's a host name preceding the domain.\n        if (len < 2) {\n            return false;\n        }\n\n        final String tld = domainSegment[len - 1];\n        if (tld.length() <= 1) {\n            return false;\n        }\n        if (! TLD_PATTERN.matcher(tld).matches()) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidates a symbolic domain name.  Returns true if it's valid.\n@param domain symbolic domain name\n@return true if the symbolic domain name is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[boolean]isValidUser(String)", "name": "isValidUser", "arg_nums": 1, "params": [{"name": "user", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidUser(final String user)", "original_string": "    protected boolean isValidUser(final String user) {\n        return USER_PATTERN.matcher(user).matches();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the user component of an email address is valid.\n@param user being validated\n@return true if the user name is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator.[String]stripComments(String)", "name": "stripComments", "arg_nums": 1, "params": [{"name": "emailStr", "type": "String"}], "return_type": "String", "signature": "protected String stripComments(final String emailStr)", "original_string": "    protected String stripComments(final String emailStr) {\n        String result = emailStr;\n        final String commentPat = \"^((?:[^\\\"\\\\\\\\]|\\\\\\\\.)*(?:\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"(?:[^\\\"\\\\\\\\]|\\111111\\\\\\\\.)*)*)\\\\((?:[^()\\\\\\\\]|\\\\\\\\.)*\\\\)/\";\n        final Pattern commentMatcher = Pattern.compile(commentPat);\n\n        while (commentMatcher.matcher(result).matches()) {\n            result = result.replaceFirst(commentPat, \"\\1 \");\n        }\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nRecursively remove comments, and replace with a single space. The simpler regexps in the Email Addressing FAQ are imperfect - they will miss escaped\nchars in atoms, for example. Derived From Mail::RFC822::Address\n\n@param emailStr The email address\n@return address with comments removed.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[Object]clone()", "name": "clone", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "@Override\n    public Object clone()", "original_string": "    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nCreates and returns a copy of this object.\n@return A copy of this object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]getBundle()", "name": "getBundle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getBundle()", "original_string": "    public String getBundle() {\n        return bundle;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the resource bundle name.\n@return the bundle name.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]getKey()", "name": "getKey", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getKey()", "original_string": "    public String getKey() {\n        return key;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the key/value.\n@return the key value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getName()", "original_string": "    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name of the dependency.\n@return the name of the dependency.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[int]getPosition()", "name": "getPosition", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getPosition()", "original_string": "    public int getPosition() {\n        return position;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nArgument's replacement position.\n@return This argument's replacement position.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[boolean]isResource()", "name": "isResource", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isResource()", "original_string": "    public boolean isResource() {\n        return resource;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether or not the key is a resource key or literal value.\n@return {@code true} if key is a resource key.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setBundle(String)", "name": "setBundle", "arg_nums": 1, "params": [{"name": "bundle", "type": "String"}], "return_type": "void", "signature": "public void setBundle(final String bundle)", "original_string": "    public void setBundle(final String bundle) {\n        this.bundle = bundle;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the resource bundle name.\n@param bundle The new bundle name.\n@since 1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setKey(String)", "name": "setKey", "arg_nums": 1, "params": [{"name": "key", "type": "String"}], "return_type": "void", "signature": "public void setKey(final String key)", "original_string": "    public void setKey(final String key) {\n        this.key = key;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the key/value.\n@param key They to access the argument.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setName(String)", "name": "setName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "public void setName(final String name)", "original_string": "    public void setName(final String name) {\n        this.name = name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name of the dependency.\n@param name the name of the dependency.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setPosition(int)", "name": "setPosition", "arg_nums": 1, "params": [{"name": "position", "type": "int"}], "return_type": "void", "signature": "public void setPosition(final int position)", "original_string": "    public void setPosition(final int position) {\n        this.position = position;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets this argument's replacement position.\n@param position set this argument's replacement position.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[void]setResource(boolean)", "name": "setResource", "arg_nums": 1, "params": [{"name": "resource", "type": "boolean"}], "return_type": "void", "signature": "public void setResource(final boolean resource)", "original_string": "    public void setResource(final boolean resource) {\n        this.resource = resource;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets whether or not the key is a resource.\n@param resource If true indicates the key is a resource.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Arg.java.Arg.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        // @formatter:off\n        return new StringBuilder()\n            .append(\"Arg: name=\")\n            .append(name)\n            .append(\"  key=\")\n            .append(key)\n            .append(\"  position=\")\n            .append(position)\n            .append(\"  bundle=\")\n            .append(bundle)\n            .append(\"  resource=\")\n            .append(resource)\n            .append(\"\\n\")\n            .toString();\n        // @formatter:on\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Arg.java", "class_name": "Arg", "class_uri": "src/main/java/org/apache/commons/validator/Arg.java.Arg", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object.\n@return a string representation of the object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[]Var()", "name": "Var", "arg_nums": 0, "params": [], "return_type": "", "signature": "public Var()", "original_string": "    public Var() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nDefault Constructor.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[]Var(String,String,String)", "name": "Var", "arg_nums": 3, "params": [{"name": "name", "type": "String"}, {"name": "value", "type": "String"}, {"name": "jsType", "type": "String"}], "return_type": "", "signature": "public Var(final String name, final String value, final String jsType)", "original_string": "    public Var(final String name, final String value, final String jsType) {\n        this.name = name;\n        this.value = value;\n        this.jsType = jsType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a variable with a specified name, value\nand JavaScript type.\n@param name Variable name.\n@param value Variable value.\n@param jsType Variable JavaScript type.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[Object]clone()", "name": "clone", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "@Override\n    public Object clone()", "original_string": "    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(e.toString(), e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nCreates and returns a copy of this object.\n@return A copy of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getBundle()", "name": "getBundle", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getBundle()", "original_string": "    public String getBundle() {\n        return bundle;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns the resource bundle name.\n@return The bundle name.\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getJsType()", "name": "getJsType", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getJsType()", "original_string": "    public String getJsType() {\n        return jsType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the JavaScript type of the variable.\n@return The JavaScript type of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getName()", "name": "getName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getName()", "original_string": "    public String getName() {\n        return name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the name of the variable.\n@return The name of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[String]getValue()", "name": "getValue", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getValue()", "original_string": "    public String getValue() {\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the value of the variable.\n@return The value of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[boolean]isResource()", "name": "isResource", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isResource()", "original_string": "    public boolean isResource() {\n        return resource;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether or not the value is a resource key or literal value.\n@return {@code true} if value is a resource key.\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setBundle(String)", "name": "setBundle", "arg_nums": 1, "params": [{"name": "bundle", "type": "String"}], "return_type": "void", "signature": "public void setBundle(final String bundle)", "original_string": "    public void setBundle(final String bundle) {\n        this.bundle = bundle;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the resource bundle name.\n@param bundle The new bundle name.\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setJsType(String)", "name": "setJsType", "arg_nums": 1, "params": [{"name": "jsType", "type": "String"}], "return_type": "void", "signature": "public void setJsType(final String jsType)", "original_string": "    public void setJsType(final String jsType) {\n        this.jsType = jsType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the JavaScript type of the variable.\n@param jsType The JavaScript type of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setName(String)", "name": "setName", "arg_nums": 1, "params": [{"name": "name", "type": "String"}], "return_type": "void", "signature": "public void setName(final String name)", "original_string": "    public void setName(final String name) {\n        this.name = name;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name of the variable.\n@param name The name of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setResource(boolean)", "name": "setResource", "arg_nums": 1, "params": [{"name": "resource", "type": "boolean"}], "return_type": "void", "signature": "public void setResource(final boolean resource)", "original_string": "    public void setResource(final boolean resource) {\n        this.resource = resource;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets whether or not the value is a resource.\n@param resource If true indicates the value is a resource.\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[void]setValue(String)", "name": "setValue", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "void", "signature": "public void setValue(final String value)", "original_string": "    public void setValue(final String value) {\n        this.value = value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the value of the variable.\n@param value The value of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Var.java.Var.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder results = new StringBuilder();\n\n        results.append(\"Var: name=\");\n        results.append(name);\n        results.append(\"  value=\");\n        results.append(value);\n        results.append(\"  resource=\");\n        results.append(resource);\n        if (resource) {\n            results.append(\"  bundle=\");\n            results.append(bundle);\n        }\n        results.append(\"  jsType=\");\n        results.append(jsType);\n        results.append(\"\\n\");\n\n        return results.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Var.java", "class_name": "Var", "class_uri": "src/main/java/org/apache/commons/validator/Var.java.Var", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a string representation of the object.\n@return A string representation of the variable.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[]Validator(ValidatorResources)", "name": "Validator", "arg_nums": 1, "params": [{"name": "resources", "type": "ValidatorResources"}], "return_type": "", "signature": "public Validator(final ValidatorResources resources)", "original_string": "    public Validator(final ValidatorResources resources) {\n        this(resources, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a {@code Validator} that will\nuse the {@code ValidatorResources}\npassed in to retrieve pluggable validators\nthe different sets of validation rules.\n\n@param resources {@code ValidatorResources} to use during validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[]Validator(ValidatorResources,String)", "name": "Validator", "arg_nums": 2, "params": [{"name": "resources", "type": "ValidatorResources"}, {"name": "formName", "type": "String"}], "return_type": "", "signature": "public Validator(final ValidatorResources resources, final String formName)", "original_string": "    public Validator(final ValidatorResources resources, final String formName) {\n        if (resources == null) {\n            throw new IllegalArgumentException(\"Resources cannot be null.\");\n        }\n\n        this.resources = resources;\n        this.formName = formName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a {@code Validator} that will\nuse the {@code ValidatorResources}\npassed in to retrieve pluggable validators\nthe different sets of validation rules.\n\n@param resources {@code ValidatorResources} to use during validation.\n@param formName Key used for retrieving the set of validation rules.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[]Validator(ValidatorResources,String,String)", "name": "Validator", "arg_nums": 3, "params": [{"name": "resources", "type": "ValidatorResources"}, {"name": "formName", "type": "String"}, {"name": "fieldName", "type": "String"}], "return_type": "", "signature": "public Validator(final ValidatorResources resources, final String formName, final String fieldName)", "original_string": "    public Validator(final ValidatorResources resources, final String formName, final String fieldName) {\n        if (resources == null) {\n            throw new IllegalArgumentException(\"Resources cannot be null.\");\n        }\n\n        this.resources = resources;\n        this.formName = formName;\n        this.fieldName = fieldName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a {@code Validator} that will\nuse the {@code ValidatorResources}\npassed in to retrieve pluggable validators\nthe different sets of validation rules.\n\n@param resources {@code ValidatorResources} to use during validation.\n@param formName Key used for retrieving the set of validation rules.\n@param fieldName Key used for retrieving the set of validation rules for a field\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]clear()", "name": "clear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void clear()", "original_string": "    public void clear() {\n        formName = null;\n        fieldName = null;\n        parameters = new HashMap<>();\n        page = 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nClears the form name, resources that were added, and the page that was\nset (if any).  This can be called to reinitialize the Validator instance\nso it can be reused.  The form name (key to set of validation rules) and any\nresources needed, like the JavaBean being validated, will need to\nset and/or added to this instance again.  The\n{@code ValidatorResources} will not be removed since it can be used\nagain and is thread safe.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[ClassLoader]getClassLoader()", "name": "getClassLoader", "arg_nums": 0, "params": [], "return_type": "ClassLoader", "signature": "public ClassLoader getClassLoader()", "original_string": "    public ClassLoader getClassLoader() {\n        if (classLoader != null) {\n            return classLoader;\n        }\n\n        if (useContextClassLoader) {\n            final ClassLoader contextLoader = Thread.currentThread().getContextClassLoader();\n            if (contextLoader != null) {\n                return contextLoader;\n            }\n        }\n\n        return this.getClass().getClassLoader();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ClassLoader", "classes": []}, "docstring": "\nGets the class loader to be used for instantiating application objects\nwhen required.  This is determined based upon the following rules:\n<ul>\n<li>The class loader set by {@code setClassLoader()}, if any</li>\n<li>The thread context class loader, if it exists and the\n    {@code useContextClassLoader} property is set to true</li>\n<li>The class loader used to load the Digester class itself.\n</ul>\n@return the class loader.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[String]getFormName()", "name": "getFormName", "arg_nums": 0, "params": [], "return_type": "String", "signature": "public String getFormName()", "original_string": "    public String getFormName() {\n        return formName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nGets the form name which is the key to a set of validation rules.\n@return the name of the form.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[boolean]getOnlyReturnErrors()", "name": "getOnlyReturnErrors", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean getOnlyReturnErrors()", "original_string": "    public boolean getOnlyReturnErrors() {\n        return onlyReturnErrors;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the Validator is only returning Fields that fail validation.\n@return whether only failed fields are returned.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[int]getPage()", "name": "getPage", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getPage()", "original_string": "    public int getPage() {\n        return page;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the page.\n\n<p>\nThis in conjunction with the page property of\na {@code Field} can control the processing of fields. If the field's\npage is less than or equal to this page value, it will be processed.\n</p>\n\n@return the page number.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[Object]getParameterValue(String)", "name": "getParameterValue", "arg_nums": 1, "params": [{"name": "parameterClassName", "type": "String"}], "return_type": "Object", "signature": "public Object getParameterValue(final String parameterClassName)", "original_string": "    public Object getParameterValue(final String parameterClassName) {\n        return parameters.get(parameterClassName);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nReturns the value of the specified parameter that will be used during the\nprocessing of validations.\n\n@param parameterClassName The full class name of the parameter of the\nvalidation method that corresponds to the value/instance passed in with it.\n@return value of the specified parameter.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[boolean]getUseContextClassLoader()", "name": "getUseContextClassLoader", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean getUseContextClassLoader()", "original_string": "    public boolean getUseContextClassLoader() {\n        return useContextClassLoader;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nGets the boolean as to whether the context classloader should be used.\n@return whether the context classloader should be used.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setClassLoader(ClassLoader)", "name": "setClassLoader", "arg_nums": 1, "params": [{"name": "classLoader", "type": "ClassLoader"}], "return_type": "void", "signature": "public void setClassLoader(final ClassLoader classLoader)", "original_string": "    public void setClassLoader(final ClassLoader classLoader) {\n        this.classLoader = classLoader;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the class loader to be used for instantiating application objects\nwhen required.\n\n@param classLoader The new class loader to use, or {@code null}\n to revert to the standard rules\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setFieldName(String)", "name": "setFieldName", "arg_nums": 1, "params": [{"name": "fieldName", "type": "String"}], "return_type": "void", "signature": "public void setFieldName(final String fieldName)", "original_string": "    public void setFieldName(final String fieldName) {\n        this.fieldName = fieldName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the name of the field to validate in a form (optional)\n\n@param fieldName The name of the field in a form set\n@since 1.2.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setFormName(String)", "name": "setFormName", "arg_nums": 1, "params": [{"name": "formName", "type": "String"}], "return_type": "void", "signature": "public void setFormName(final String formName)", "original_string": "    public void setFormName(final String formName) {\n        this.formName = formName;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the form name which is the key to a set of validation rules.\n@param formName the name of the form.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setOnlyReturnErrors(boolean)", "name": "setOnlyReturnErrors", "arg_nums": 1, "params": [{"name": "onlyReturnErrors", "type": "boolean"}], "return_type": "void", "signature": "public void setOnlyReturnErrors(final boolean onlyReturnErrors)", "original_string": "    public void setOnlyReturnErrors(final boolean onlyReturnErrors) {\n        this.onlyReturnErrors = onlyReturnErrors;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nConfigures which Fields the Validator returns from the validate() method.  Set this\nto true to only return Fields that failed validation.  By default, validate() returns\nall fields.\n@param onlyReturnErrors whether only failed fields are returned.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setPage(int)", "name": "setPage", "arg_nums": 1, "params": [{"name": "page", "type": "int"}], "return_type": "void", "signature": "public void setPage(final int page)", "original_string": "    public void setPage(final int page) {\n        this.page = page;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets the page.\n<p>\nThis in conjunction with the page property of\na {@code Field} can control the processing of fields. If the field's page\nis less than or equal to this page value, it will be processed.\n</p>\n\n@param page the page number.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setParameter(String,Object)", "name": "setParameter", "arg_nums": 2, "params": [{"name": "parameterClassName", "type": "String"}, {"name": "parameterValue", "type": "Object"}], "return_type": "void", "signature": "public void setParameter(final String parameterClassName, final Object parameterValue)", "original_string": "    public void setParameter(final String parameterClassName, final Object parameterValue) {\n        parameters.put(parameterClassName, parameterValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets a parameter of a pluggable validation method.\n\n@param parameterClassName The full class name of the parameter of the\nvalidation method that corresponds to the value/instance passed in with it.\n\n@param parameterValue The instance that will be passed into the\nvalidation method.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[void]setUseContextClassLoader(boolean)", "name": "setUseContextClassLoader", "arg_nums": 1, "params": [{"name": "useContextClassLoader", "type": "boolean"}], "return_type": "void", "signature": "public void setUseContextClassLoader(final boolean useContextClassLoader)", "original_string": "    public void setUseContextClassLoader(final boolean useContextClassLoader) {\n        this.useContextClassLoader = useContextClassLoader;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nSets whether to use the Context ClassLoader (the one found by\ncalling {@code Thread.currentThread().getContextClassLoader()})\nto resolve/load classes that are defined in various rules.  If not\nusing Context ClassLoader, then the class-loading defaults to\nusing the calling-class' ClassLoader.\n\n@param useContextClassLoader determines whether to use Context ClassLoader.\n"}, {"uris": "src/main/java/org/apache/commons/validator/Validator.java.Validator.[ValidatorResults]validate()", "name": "validate", "arg_nums": 0, "params": [], "return_type": "ValidatorResults", "signature": "public ValidatorResults validate()", "original_string": "    public ValidatorResults validate() throws ValidatorException {\n        Locale locale = (Locale) getParameterValue(LOCALE_PARAM);\n\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n\n        setParameter(VALIDATOR_PARAM, this);\n\n        final Form form = resources.getForm(locale, formName);\n        if (form != null) {\n            setParameter(FORM_PARAM, form);\n            return form.validate(\n                parameters,\n                resources.getValidatorActions(),\n                page,\n                fieldName);\n        }\n\n        return new ValidatorResults();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/Validator.java", "class_name": "Validator", "class_uri": "src/main/java/org/apache/commons/validator/Validator.java.Validator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "ValidatorResults", "classes": []}, "docstring": "\nPerforms validations based on the configured resources.\n\n@return The {@link Map} returned uses the property of the\n{@code Field} for the key and the value is the number of error the\nfield had.\n@throws ValidatorException If an error occurs during validation\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[void]adjustToTimeZone(Calendar,TimeZone)", "name": "adjustToTimeZone", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "void", "signature": "public static void adjustToTimeZone(final Calendar value, final TimeZone timeZone)", "original_string": "    public static void adjustToTimeZone(final Calendar value, final TimeZone timeZone) {\n        if (value.getTimeZone().hasSameRules(timeZone)) {\n            value.setTimeZone(timeZone);\n        } else {\n            final int year = value.get(Calendar.YEAR);\n            final int month = value.get(Calendar.MONTH);\n            final int date = value.get(Calendar.DATE);\n            final int hour = value.get(Calendar.HOUR_OF_DAY);\n            final int minute = value.get(Calendar.MINUTE);\n            value.setTimeZone(timeZone);\n            value.set(year, month, date, hour, minute);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\n<p>Adjusts a Calendar's value to a different TimeZone.</p>\n\n@param value The value to adjust.\n@param timeZone The new time zone to use to adjust the Calendar to.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[CalendarValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "CalendarValidator", "signature": "public static CalendarValidator getInstance()", "original_string": "    public static CalendarValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CalendarValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the CalendarValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[]CalendarValidator()", "name": "CalendarValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public CalendarValidator()", "original_string": "    public CalendarValidator() {\n        this(true, DateFormat.SHORT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance with <em>short</em>\ndate style.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[]CalendarValidator(boolean,int)", "name": "CalendarValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "dateStyle", "type": "int"}], "return_type": "", "signature": "public CalendarValidator(final boolean strict, final int dateStyle)", "original_string": "    public CalendarValidator(final boolean strict, final int dateStyle) {\n        super(strict, dateStyle, -1);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with the specified <em>strict</em>\nand <em>date style</em> parameters.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param dateStyle the date style to use for Locale validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareDates(Calendar,Calendar)", "name": "compareDates", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareDates(final Calendar value, final Calendar compare)", "original_string": "    public int compareDates(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.DATE);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Dates (day, month and year - not time).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the dates are equal, -1 if first\ndate is less than the seconds and +1 if the first\ndate is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareMonths(Calendar,Calendar)", "name": "compareMonths", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareMonths(final Calendar value, final Calendar compare)", "original_string": "    public int compareMonths(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.MONTH);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Months (month and year).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the months are equal, -1 if first\nparameter's month is less than the seconds and +1 if the first\nparameter's month is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareQuarters(Calendar,Calendar)", "name": "compareQuarters", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareQuarters(final Calendar value, final Calendar compare)", "original_string": "    public int compareQuarters(final Calendar value, final Calendar compare) {\n        return compareQuarters(value, compare, 1);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Quarters (quarter and year).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to check the value against.\n@return Zero if the quarters are equal, -1 if first\nparameter's quarter is less than the seconds and +1 if the first\nparameter's quarter is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareQuarters(Calendar,Calendar,int)", "name": "compareQuarters", "arg_nums": 3, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}, {"name": "monthOfFirstQuarter", "type": "int"}], "return_type": "int", "signature": "@Override\n    public int compareQuarters(final Calendar value, final Calendar compare, final int monthOfFirstQuarter)", "original_string": "    @Override\n    public int compareQuarters(final Calendar value, final Calendar compare, final int monthOfFirstQuarter) {\n        return super.compareQuarters(value, compare, monthOfFirstQuarter);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Quarters (quarter and year).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@param monthOfFirstQuarter The  month that the first quarter starts.\n@return Zero if the quarters are equal, -1 if first\nparameter's quarter is less than the seconds and +1 if the first\nparameter's quarter is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareWeeks(Calendar,Calendar)", "name": "compareWeeks", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareWeeks(final Calendar value, final Calendar compare)", "original_string": "    public int compareWeeks(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.WEEK_OF_YEAR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Weeks (week and year).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the weeks are equal, -1 if first\nparameter's week is less than the seconds and +1 if the first\nparameter's week is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[int]compareYears(Calendar,Calendar)", "name": "compareYears", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareYears(final Calendar value, final Calendar compare)", "original_string": "    public int compareYears(final Calendar value, final Calendar compare) {\n        return compare(value, compare, Calendar.YEAR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Years.</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the years are equal, -1 if first\nparameter's year is less than the seconds and +1 if the first\nparameter's year is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return ((DateFormat) formatter).getCalendar();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Convert the parsed {@code Date} to a {@link Calendar}.</p>\n\n@param value The parsed {@code Date} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed value converted to a {@link Calendar}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value)", "original_string": "    public Calendar validate(final String value) {\n        return (Calendar) parse(value, (String) null, (Locale) null, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the default\n   {@link Locale} and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@return The parsed {@link Calendar} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final Locale locale)", "original_string": "    public Calendar validate(final String value, final Locale locale) {\n        return (Calendar) parse(value, (String) null, locale, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the specified\n   {@link Locale} and default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,Locale,TimeZone)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final Locale locale, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, locale, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the specified\n   {@link Locale} and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the date format, system default if null.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern)", "original_string": "    public Calendar validate(final String value, final String pattern) {\n        return (Calendar) parse(value, pattern, (Locale) null, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the specified\n   <em>pattern</em> and default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Calendar validate(final String value, final String pattern, final Locale locale) {\n        return (Calendar) parse(value, pattern, locale, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the specified pattern\n   and {@link Locale} and the default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String,Locale,TimeZone)", "name": "validate", "arg_nums": 4, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, locale, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the specified\n   pattern, and {@link Locale} and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,String,TimeZone)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final String pattern, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the specified\n   <em>pattern</em> and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator.[Calendar]validate(String,TimeZone)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java", "class_name": "CalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CalendarValidator.java.CalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a {@link Calendar} using the specified\n   {@code TimeZone} and default {@link Locale}.\n\n@param value The value validation is being performed on.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[TimeValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "TimeValidator", "signature": "public static TimeValidator getInstance()", "original_string": "    public static TimeValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "TimeValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the TimeValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[]TimeValidator()", "name": "TimeValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public TimeValidator()", "original_string": "    public TimeValidator() {\n        this(true, DateFormat.SHORT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance with <em>short</em>\ntime style.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[]TimeValidator(boolean,int)", "name": "TimeValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "timeStyle", "type": "int"}], "return_type": "", "signature": "public TimeValidator(final boolean strict, final int timeStyle)", "original_string": "    public TimeValidator(final boolean strict, final int timeStyle) {\n        super(strict, -1, timeStyle);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with the specified <em>strict</em>\nand <em>time style</em> parameters.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param timeStyle the time style to use for Locale validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareHours(Calendar,Calendar)", "name": "compareHours", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareHours(final Calendar value, final Calendar compare)", "original_string": "    public int compareHours(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.HOUR_OF_DAY);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Hours.</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the hours are equal, -1 if first\nparameter's hour is less than the seconds and +1 if the first\nparameter's hour is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareMinutes(Calendar,Calendar)", "name": "compareMinutes", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareMinutes(final Calendar value, final Calendar compare)", "original_string": "    public int compareMinutes(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.MINUTE);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Minutes (hours and minutes).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the hours are equal, -1 if first\nparameter's minutes are less than the seconds and +1 if the first\nparameter's minutes are greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareSeconds(Calendar,Calendar)", "name": "compareSeconds", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareSeconds(final Calendar value, final Calendar compare)", "original_string": "    public int compareSeconds(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.SECOND);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Seconds (hours, minutes and seconds).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the hours are equal, -1 if first\nparameter's seconds are less than the seconds and +1 if the first\nparameter's seconds are greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[int]compareTime(Calendar,Calendar)", "name": "compareTime", "arg_nums": 2, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}], "return_type": "int", "signature": "public int compareTime(final Calendar value, final Calendar compare)", "original_string": "    public int compareTime(final Calendar value, final Calendar compare) {\n        return compareTime(value, compare, Calendar.MILLISECOND);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Times (hour, minute, second and millisecond - not date).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@return Zero if the hours are equal, -1 if first\ntime is less than the seconds and +1 if the first\ntime is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return ((DateFormat) formatter).getCalendar();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Convert the parsed {@code Date} to a {@link Calendar}.</p>\n\n@param value The parsed {@code Date} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed value converted to a {@link Calendar}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value)", "original_string": "    public Calendar validate(final String value) {\n        return (Calendar) parse(value, (String) null, (Locale) null, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the default {@link Locale}\n   and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@return The parsed {@link Calendar} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final Locale locale)", "original_string": "    public Calendar validate(final String value, final Locale locale) {\n        return (Calendar) parse(value, (String) null, locale, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the specified {@link Locale}\n   default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the time format, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,Locale,TimeZone)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final Locale locale, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, locale, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the specified {@link Locale}\n   and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the time format, system default if null.\n@param timeZone The Time Zone used to parse the time, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern)", "original_string": "    public Calendar validate(final String value, final String pattern) {\n        return (Calendar) parse(value, pattern, (Locale) null, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the specified <em>pattern</em> and\n   default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Calendar validate(final String value, final String pattern, final Locale locale) {\n        return (Calendar) parse(value, pattern, locale, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the specified pattern and {@link Locale}\n   and the default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String,Locale,TimeZone)", "name": "validate", "arg_nums": 4, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, locale, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the specified pattern, {@link Locale}\n   and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,String,TimeZone)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final String pattern, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final String pattern, final TimeZone timeZone) {\n        return (Calendar) parse(value, pattern, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the specified <em>pattern</em>\n   and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@param timeZone The Time Zone used to parse the time, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator.[Calendar]validate(String,TimeZone)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "public Calendar validate(final String value, final TimeZone timeZone)", "original_string": "    public Calendar validate(final String value, final TimeZone timeZone) {\n        return (Calendar) parse(value, (String) null, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java", "class_name": "TimeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/TimeValidator.java.TimeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Validate/convert a time using the specified {@code TimeZone}\n   and default {@link Locale}.\n\n@param value The value validation is being performed on.\n@param timeZone The Time Zone used to parse the time, system default if null.\n@return The parsed {@link Calendar} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[ISINValidator]getInstance(boolean)", "name": "getInstance", "arg_nums": 1, "params": [{"name": "checkCountryCode", "type": "boolean"}], "return_type": "ISINValidator", "signature": "public static ISINValidator getInstance(final boolean checkCountryCode)", "original_string": "    public static ISINValidator getInstance(final boolean checkCountryCode) {\n        return checkCountryCode ? ISIN_VALIDATOR_TRUE : ISIN_VALIDATOR_FALSE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java", "class_name": "ISINValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ISINValidator", "classes": []}, "docstring": "\nGets the singleton instance of the ISIN validator.\n\n@param checkCountryCode whether to check the country-code prefix or not\n@return A singleton instance of the appropriate ISIN validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[]ISINValidator(boolean)", "name": "ISINValidator", "arg_nums": 1, "params": [{"name": "checkCountryCode", "type": "boolean"}], "return_type": "", "signature": "private ISINValidator(final boolean checkCountryCode)", "original_string": "    private ISINValidator(final boolean checkCountryCode) {\n        this.checkCountryCode = checkCountryCode;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java", "class_name": "ISINValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[boolean]checkCode(String)", "name": "checkCode", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "private boolean checkCode(final String code)", "original_string": "    private boolean checkCode(final String code) {\n        return Arrays.binarySearch(CCODES, code) >= 0 || Arrays.binarySearch(SPECIALS, code) >= 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java", "class_name": "ISINValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String code)", "original_string": "    public boolean isValid(final String code) {\n        final boolean valid = VALIDATOR.isValid(code);\n        if (valid && checkCountryCode) {\n            return checkCode(code.substring(0, 2));\n        }\n        return valid;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java", "class_name": "ISINValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the code is a valid ISIN code after any transformation\nby the validate routine.\n\n@param code The code to validate.\n@return {@code true} if a valid ISIN\ncode, otherwise {@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator.[Object]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "Object", "signature": "public Object validate(final String code)", "original_string": "    public Object validate(final String code) {\n        final Object validate = VALIDATOR.validate(code);\n        if (validate != null && checkCountryCode) {\n            return checkCode(code.substring(0, 2)) ? validate : null;\n        }\n        return validate;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java", "class_name": "ISINValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISINValidator.java.ISINValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nChecks the code is valid ISIN code.\n\n@param code The code to validate.\n@return A valid ISIN code if valid, otherwise {@code null}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[FloatValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "FloatValidator", "signature": "public static FloatValidator getInstance()", "original_string": "    public static FloatValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FloatValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the FloatValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[]FloatValidator()", "name": "FloatValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public FloatValidator()", "original_string": "    public FloatValidator() {\n        this(true, STANDARD_FORMAT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[]FloatValidator(boolean,int)", "name": "FloatValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}], "return_type": "", "signature": "public FloatValidator(final boolean strict, final int formatType)", "original_string": "    public FloatValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]isInRange(float,float,float)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "float"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "return_type": "boolean", "signature": "public boolean isInRange(final float value, final float min, final float max)", "original_string": "    public boolean isInRange(final float value, final float min, final float max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]isInRange(Float,float,float)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "Float"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "return_type": "boolean", "signature": "public boolean isInRange(final Float value, final float min, final float max)", "original_string": "    public boolean isInRange(final Float value, final float min, final float max) {\n        return isInRange(value.floatValue(), min, max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]maxValue(float,float)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "float"}, {"name": "max", "type": "float"}], "return_type": "boolean", "signature": "public boolean maxValue(final float value, final float max)", "original_string": "    public boolean maxValue(final float value, final float max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]maxValue(Float,float)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "Float"}, {"name": "max", "type": "float"}], "return_type": "boolean", "signature": "public boolean maxValue(final Float value, final float max)", "original_string": "    public boolean maxValue(final Float value, final float max) {\n        return maxValue(value.floatValue(), max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]minValue(float,float)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "float"}, {"name": "min", "type": "float"}], "return_type": "boolean", "signature": "public boolean minValue(final float value, final float min)", "original_string": "    public boolean minValue(final float value, final float min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[boolean]minValue(Float,float)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "Float"}, {"name": "min", "type": "float"}], "return_type": "boolean", "signature": "public boolean minValue(final Float value, final float min)", "original_string": "    public boolean minValue(final Float value, final float min) {\n        return minValue(value.floatValue(), min);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        final double doubleValue = ((Number) value).doubleValue();\n\n        if (doubleValue > 0) {\n            if (doubleValue < Float.MIN_VALUE) {\n                return null;\n            }\n            if (doubleValue > Float.MAX_VALUE) {\n                return null;\n            }\n        } else if (doubleValue < 0) {\n            final double posDouble = doubleValue * -1;\n            if (posDouble < Float.MIN_VALUE) {\n                return null;\n            }\n            if (posDouble > Float.MAX_VALUE) {\n                return null;\n            }\n        }\n\n        return Float.valueOf((float) doubleValue);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Perform further validation and convert the {@code Number} to\na {@code Float}.</p>\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed {@code Number} converted to a\n  {@code Float} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Float", "signature": "public Float validate(final String value)", "original_string": "    public Float validate(final String value) {\n        return (Float) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Float} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code Float} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Float", "signature": "public Float validate(final String value, final Locale locale)", "original_string": "    public Float validate(final String value, final Locale locale) {\n        return (Float) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Float} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code Float} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Float", "signature": "public Float validate(final String value, final String pattern)", "original_string": "    public Float validate(final String value, final String pattern) {\n        return (Float) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Float} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@code Float} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator.[Float]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Float", "signature": "public Float validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Float validate(final String value, final String pattern, final Locale locale) {\n        return (Float) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java", "class_name": "FloatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/FloatValidator.java.FloatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Float", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Float} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Float} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CodeValidator]createRangeValidator(CreditCardRange[],CheckDigit)", "name": "createRangeValidator", "arg_nums": 2, "params": [{"name": "creditCardRanges", "type": "CreditCardRange[]"}, {"name": "digitCheck", "type": "CheckDigit"}], "return_type": "CodeValidator", "signature": "static CodeValidator createRangeValidator(final CreditCardRange[] creditCardRanges, final CheckDigit digitCheck)", "original_string": "    static CodeValidator createRangeValidator(final CreditCardRange[] creditCardRanges, final CheckDigit digitCheck) {\n        return new CodeValidator(\n                // must be numeric (rest of validation is done later)\n                new RegexValidator(\"(\\\\d+)\") {\n                    private static final long serialVersionUID = 1L;\n                    private final transient CreditCardRange[] ccr = creditCardRanges.clone();\n\n                    @Override\n                    public boolean isValid(final String value) {\n                        return validate(value) != null;\n                    }\n\n                    @Override\n                    public String[] match(final String value) {\n                        return new String[] { validate(value) };\n                    }\n\n                    @Override\n                    // must return full string\n                    public String validate(final String value) {\n                        if (super.match(value) != null) {\n                            final int length = value.length();\n                            for (final CreditCardRange range : ccr) {\n                                if (validLength(length, range)) {\n                                    if (range.high == null) { // single prefix only\n                                        if (value.startsWith(range.low)) {\n                                            return value;\n                                        }\n                                    } else if (range.low.compareTo(value) <= 0 // no need to trim value here\n                                            &&\n                                    // here we have to ignore digits beyond the prefix\n                                            range.high.compareTo(value.substring(0, range.high.length())) >= 0) {\n                                        return value;\n                                    }\n                                }\n                            }\n                        }\n                        return null;\n                    }\n                }, digitCheck);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "CodeValidator", "classes": []}, "docstring": " package protected for unit test access"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CreditCardValidator]genericCreditCardValidator()", "name": "genericCreditCardValidator", "arg_nums": 0, "params": [], "return_type": "CreditCardValidator", "signature": "public static CreditCardValidator genericCreditCardValidator()", "original_string": "    public static CreditCardValidator genericCreditCardValidator() {\n        return genericCreditCardValidator(MIN_CC_LENGTH, MAX_CC_LENGTH);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CreditCardValidator", "classes": []}, "docstring": "\nCreates a new generic CreditCardValidator which validates the syntax and check digit only.\nDoes not check the Issuer Identification Number (IIN)\n\n@return the validator\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CreditCardValidator]genericCreditCardValidator(int)", "name": "genericCreditCardValidator", "arg_nums": 1, "params": [{"name": "length", "type": "int"}], "return_type": "CreditCardValidator", "signature": "public static CreditCardValidator genericCreditCardValidator(final int length)", "original_string": "    public static CreditCardValidator genericCreditCardValidator(final int length) {\n        return genericCreditCardValidator(length, length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CreditCardValidator", "classes": []}, "docstring": "\nCreates a new generic CreditCardValidator which validates the syntax and check digit only.\nDoes not check the Issuer Identification Number (IIN)\n\n@param length exact length\n@return the validator\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[CreditCardValidator]genericCreditCardValidator(int,int)", "name": "genericCreditCardValidator", "arg_nums": 2, "params": [{"name": "minLen", "type": "int"}, {"name": "maxLen", "type": "int"}], "return_type": "CreditCardValidator", "signature": "public static CreditCardValidator genericCreditCardValidator(final int minLen, final int maxLen)", "original_string": "    public static CreditCardValidator genericCreditCardValidator(final int minLen, final int maxLen) {\n        return new CreditCardValidator(new CodeValidator[] {new CodeValidator(\"(\\\\d+)\", minLen, maxLen, LUHN_VALIDATOR)});\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CreditCardValidator", "classes": []}, "docstring": "\nCreates a new generic CreditCardValidator which validates the syntax and check digit only.\nDoes not check the Issuer Identification Number (IIN)\n\n@param minLen minimum allowed length\n@param maxLen maximum allowed length\n@return the validator\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[boolean]validLength(int,CreditCardRange)", "name": "validLength", "arg_nums": 2, "params": [{"name": "valueLength", "type": "int"}, {"name": "range", "type": "CreditCardRange"}], "return_type": "boolean", "signature": "static boolean validLength(final int valueLength, final CreditCardRange range)", "original_string": "    static boolean validLength(final int valueLength, final CreditCardRange range) {\n        if (range.lengths != null) {\n            for (final int length : range.lengths) {\n                if (valueLength == length) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        return valueLength >= range.minLen && valueLength <= range.maxLen;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": " package protected for unit test access"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator()", "name": "CreditCardValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public CreditCardValidator()", "original_string": "    public CreditCardValidator() {\n        this(AMEX + VISA + MASTERCARD + DISCOVER);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new CreditCardValidator with default options.\nThe default options are:\nAMEX, VISA, MASTERCARD and DISCOVER\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(CodeValidator[])", "name": "CreditCardValidator", "arg_nums": 1, "params": [{"name": "creditCardValidators", "type": "CodeValidator[]"}], "return_type": "", "signature": "public CreditCardValidator(final CodeValidator[] creditCardValidators)", "original_string": "    public CreditCardValidator(final CodeValidator[] creditCardValidators) {\n        if (creditCardValidators == null) {\n            throw new IllegalArgumentException(\"Card validators are missing\");\n        }\n        Collections.addAll(cardTypes, creditCardValidators);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new CreditCardValidator with the specified {@link CodeValidator}s.\n@param creditCardValidators Set of valid code validators\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(CodeValidator[],CreditCardRange[])", "name": "CreditCardValidator", "arg_nums": 2, "params": [{"name": "creditCardValidators", "type": "CodeValidator[]"}, {"name": "creditCardRanges", "type": "CreditCardRange[]"}], "return_type": "", "signature": "public CreditCardValidator(final CodeValidator[] creditCardValidators, final CreditCardRange[] creditCardRanges)", "original_string": "    public CreditCardValidator(final CodeValidator[] creditCardValidators, final CreditCardRange[] creditCardRanges) {\n        if (creditCardValidators == null) {\n            throw new IllegalArgumentException(\"Card validators are missing\");\n        }\n        if (creditCardRanges == null) {\n            throw new IllegalArgumentException(\"Card ranges are missing\");\n        }\n        Collections.addAll(cardTypes, creditCardValidators);\n        Collections.addAll(cardTypes, createRangeValidator(creditCardRanges, LUHN_VALIDATOR));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new CreditCardValidator with the specified {@link CodeValidator}s\nand {@link CreditCardRange}s.\n<p>\nThis can be used to combine predefined validators such as {@link #MASTERCARD_VALIDATOR}\nwith additional validators using the simpler {@link CreditCardRange}s.\n@param creditCardValidators Set of valid code validators\n@param creditCardRanges Set of valid code validators\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(CreditCardRange[])", "name": "CreditCardValidator", "arg_nums": 1, "params": [{"name": "creditCardRanges", "type": "CreditCardRange[]"}], "return_type": "", "signature": "public CreditCardValidator(final CreditCardRange[] creditCardRanges)", "original_string": "    public CreditCardValidator(final CreditCardRange[] creditCardRanges) {\n        if (creditCardRanges == null) {\n            throw new IllegalArgumentException(\"Card ranges are missing\");\n        }\n        Collections.addAll(cardTypes, createRangeValidator(creditCardRanges, LUHN_VALIDATOR));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new CreditCardValidator with the specified {@link CreditCardRange}s.\n@param creditCardRanges Set of valid code validators\n@since 1.6\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[]CreditCardValidator(long)", "name": "CreditCardValidator", "arg_nums": 1, "params": [{"name": "options", "type": "long"}], "return_type": "", "signature": "public CreditCardValidator(final long options)", "original_string": "    public CreditCardValidator(final long options) {\n        if (isOn(options, VISA)) {\n            cardTypes.add(VISA_VALIDATOR);\n        }\n\n        if (isOn(options, VPAY)) {\n            cardTypes.add(VPAY_VALIDATOR);\n        }\n\n        if (isOn(options, AMEX)) {\n            cardTypes.add(AMEX_VALIDATOR);\n        }\n\n        if (isOn(options, MASTERCARD)) {\n            cardTypes.add(MASTERCARD_VALIDATOR);\n        }\n\n        if (isOn(options, MASTERCARD_PRE_OCT2016)) {\n            cardTypes.add(MASTERCARD_VALIDATOR_PRE_OCT2016);\n        }\n\n        if (isOn(options, DISCOVER)) {\n            cardTypes.add(DISCOVER_VALIDATOR);\n        }\n\n        if (isOn(options, DINERS)) {\n            cardTypes.add(DINERS_VALIDATOR);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new CreditCardValidator with the specified options.\n@param options Pass in\nCreditCardValidator.VISA + CreditCardValidator.AMEX to specify that\nthose are the only valid card types.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[boolean]isOn(long,long)", "name": "isOn", "arg_nums": 2, "params": [{"name": "options", "type": "long"}, {"name": "flag", "type": "long"}], "return_type": "boolean", "signature": "private boolean isOn(final long options, final long flag)", "original_string": "    private boolean isOn(final long options, final long flag) {\n        return (options & flag) > 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given flag is on.  If the flag is not a power of 2\n(ie. 3) this tests whether the combination of flags is on.\n\n@param options The options specified.\n@param flag Flag value to check.\n\n@return whether the specified flag value is on.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "card", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String card)", "original_string": "    public boolean isValid(final String card) {\n        if (GenericValidator.isBlankOrNull(card)) {\n            return false;\n        }\n        for (final CodeValidator cardType : cardTypes) {\n            if (cardType.isValid(card)) {\n                return true;\n            }\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the field is a valid credit card number.\n@param card The card number to validate.\n@return Whether the card number is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator.[Object]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "card", "type": "String"}], "return_type": "Object", "signature": "public Object validate(final String card)", "original_string": "    public Object validate(final String card) {\n        if (GenericValidator.isBlankOrNull(card)) {\n            return null;\n        }\n        Object result = null;\n        for (final CodeValidator cardType : cardTypes) {\n            result = cardType.validate(card);\n            if (result != null) {\n                return result;\n            }\n        }\n        return null;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java", "class_name": "CreditCardValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CreditCardValidator.java.CreditCardValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nChecks if the field is a valid credit card number.\n@param card The card number to validate.\n@return The card number if valid or {@code null}\nif invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[ShortValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "ShortValidator", "signature": "public static ShortValidator getInstance()", "original_string": "    public static ShortValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ShortValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the ShortValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[]ShortValidator()", "name": "ShortValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ShortValidator()", "original_string": "    public ShortValidator() {\n        this(true, STANDARD_FORMAT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[]ShortValidator(boolean,int)", "name": "ShortValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}], "return_type": "", "signature": "public ShortValidator(final boolean strict, final int formatType)", "original_string": "    public ShortValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]isInRange(short,short,short)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "short"}, {"name": "min", "type": "short"}, {"name": "max", "type": "short"}], "return_type": "boolean", "signature": "public boolean isInRange(final short value, final short min, final short max)", "original_string": "    public boolean isInRange(final short value, final short min, final short max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]isInRange(Short,short,short)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "Short"}, {"name": "min", "type": "short"}, {"name": "max", "type": "short"}], "return_type": "boolean", "signature": "public boolean isInRange(final Short value, final short min, final short max)", "original_string": "    public boolean isInRange(final Short value, final short min, final short max) {\n        return isInRange(value.shortValue(), min, max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]maxValue(short,short)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "short"}, {"name": "max", "type": "short"}], "return_type": "boolean", "signature": "public boolean maxValue(final short value, final short max)", "original_string": "    public boolean maxValue(final short value, final short max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]maxValue(Short,short)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "Short"}, {"name": "max", "type": "short"}], "return_type": "boolean", "signature": "public boolean maxValue(final Short value, final short max)", "original_string": "    public boolean maxValue(final Short value, final short max) {\n        return maxValue(value.shortValue(), max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]minValue(short,short)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "short"}, {"name": "min", "type": "short"}], "return_type": "boolean", "signature": "public boolean minValue(final short value, final short min)", "original_string": "    public boolean minValue(final short value, final short min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[boolean]minValue(Short,short)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "Short"}, {"name": "min", "type": "short"}], "return_type": "boolean", "signature": "public boolean minValue(final Short value, final short min)", "original_string": "    public boolean minValue(final Short value, final short min) {\n        return minValue(value.shortValue(), min);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        final long longValue = ((Number) value).longValue();\n\n        if (longValue < Short.MIN_VALUE ||\n            longValue > Short.MAX_VALUE) {\n            return null;\n        }\n        return Short.valueOf((short) longValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Perform further validation and convert the {@code Number} to\na {@code Short}.</p>\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed {@code Number} converted to a\n  {@code Short} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Short", "signature": "public Short validate(final String value)", "original_string": "    public Short validate(final String value) {\n        return (Short) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Short} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code Short} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Short", "signature": "public Short validate(final String value, final Locale locale)", "original_string": "    public Short validate(final String value, final Locale locale) {\n        return (Short) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Short} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code Short} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Short", "signature": "public Short validate(final String value, final String pattern)", "original_string": "    public Short validate(final String value, final String pattern) {\n        return (Short) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Short} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@code Short} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator.[Short]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Short", "signature": "public Short validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Short validate(final String value, final String pattern, final Locale locale) {\n        return (Short) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java", "class_name": "ShortValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ShortValidator.java.ShortValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Short", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Short} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Short} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[IBANValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "IBANValidator", "signature": "public static IBANValidator getInstance()", "original_string": "    public static IBANValidator getInstance() {\n        return DEFAULT_IBAN_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "IBANValidator", "classes": []}, "docstring": "\nGets the singleton instance of the IBAN validator using the default formats\n\n@return A singleton instance of the IBAN validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[]IBANValidator()", "name": "IBANValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public IBANValidator()", "original_string": "    public IBANValidator() {\n        this(DEFAULT_VALIDATORS);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a default IBAN validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[]IBANValidator(Validator[])", "name": "IBANValidator", "arg_nums": 1, "params": [{"name": "validators", "type": "Validator[]"}], "return_type": "", "signature": "public IBANValidator(final Validator[] validators)", "original_string": "    public IBANValidator(final Validator[] validators) {\n        this.validatorMap = createValidators(validators);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate an IBAN validator from the specified map of IBAN formats.\n\n@param validators map of IBAN formats\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[ConcurrentMap<String, Validator>]createValidators(Validator[])", "name": "createValidators", "arg_nums": 1, "params": [{"name": "validators", "type": "Validator[]"}], "return_type": "ConcurrentMap<String, Validator>", "signature": "private ConcurrentMap<String, Validator> createValidators(final Validator[] validators)", "original_string": "    private ConcurrentMap<String, Validator> createValidators(final Validator[] validators) {\n        final ConcurrentMap<String, Validator> map = new ConcurrentHashMap<>();\n        for (final Validator validator : validators) {\n            map.put(validator.countryCode, validator);\n            for (final String otherCC : validator.otherCountryCodes) {\n                map.put(otherCC, validator);\n            }\n        }\n        return map;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "ConcurrentMap<String, Validator>", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator[]]getDefaultValidators()", "name": "getDefaultValidators", "arg_nums": 0, "params": [], "return_type": "Validator[]", "signature": "public Validator[] getDefaultValidators()", "original_string": "    public Validator[] getDefaultValidators() {\n        return Arrays.copyOf(DEFAULT_VALIDATORS, DEFAULT_VALIDATORS.length);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Validator[]", "classes": []}, "docstring": "\nGets a copy of the default Validators.\n\n@return a copy of the default Validator array\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator]getValidator(String)", "name": "getValidator", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "Validator", "signature": "public Validator getValidator(final String code)", "original_string": "    public Validator getValidator(final String code) {\n        if (code == null || code.length() < SHORT_CODE_LEN) { // ensure we can extract the code\n            return null;\n        }\n        final String key = code.substring(0, SHORT_CODE_LEN);\n        return validatorMap.get(key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Validator", "classes": []}, "docstring": "\nGets the Validator for a given IBAN\n\n@param code a string starting with the ISO country code (e.g. an IBAN)\n\n@return the validator or {@code null} if there is not one registered.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[boolean]hasValidator(String)", "name": "hasValidator", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "public boolean hasValidator(final String code)", "original_string": "    public boolean hasValidator(final String code) {\n        return getValidator(code) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nDoes the class have the required validator?\n\n@param code the code to check\n@return true if there is a validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String code)", "original_string": "    public boolean isValid(final String code) {\n        final Validator formatValidator = getValidator(code);\n        if (formatValidator == null || code.length() != formatValidator.ibanLength || !formatValidator.regexValidator.isValid(code)) {\n            return false;\n        }\n        return IBANCheckDigit.IBAN_CHECK_DIGIT.isValid(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate an IBAN Code\n\n@param code The value validation is being performed on\n@return {@code true} if the value is valid\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator]setValidator(String,int,String)", "name": "setValidator", "arg_nums": 3, "params": [{"name": "countryCode", "type": "String"}, {"name": "length", "type": "int"}, {"name": "format", "type": "String"}], "return_type": "Validator", "signature": "public Validator setValidator(final String countryCode, final int length, final String format)", "original_string": "    public Validator setValidator(final String countryCode, final int length, final String format) {\n        if (this == DEFAULT_IBAN_VALIDATOR) {\n            throw new IllegalStateException(\"The singleton validator cannot be modified\");\n        }\n        if (length < 0) {\n            return validatorMap.remove(countryCode);\n        }\n        return setValidator(new Validator(countryCode, length, format));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Validator", "classes": []}, "docstring": "\nInstalls a validator.\nWill replace any existing entry which has the same countryCode.\n\n@param countryCode the country code\n@param length the length of the IBAN. Must be &ge; 8 and &le; 32.\nIf the length is &lt; 0, the validator is removed, and the format is not used.\n@param format the format of the IBAN (as a regular expression)\n@return the previous Validator, or {@code null} if there was none\n@throws IllegalArgumentException if there is a problem\n@throws IllegalStateException if an attempt is made to modify the singleton validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator.[Validator]setValidator(Validator)", "name": "setValidator", "arg_nums": 1, "params": [{"name": "validator", "type": "Validator"}], "return_type": "Validator", "signature": "public Validator setValidator(final Validator validator)", "original_string": "    public Validator setValidator(final Validator validator) {\n        if (this == DEFAULT_IBAN_VALIDATOR) {\n            throw new IllegalStateException(\"The singleton validator cannot be modified\");\n        }\n        return validatorMap.put(validator.countryCode, validator);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java", "class_name": "IBANValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IBANValidator.java.IBANValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Validator", "classes": []}, "docstring": "\nInstalls a validator.\nWill replace any existing entry which has the same countryCode\n\n@param validator the instance to install.\n@return the previous Validator, or {@code null} if there was none\n@throws IllegalStateException if an attempt is made to modify the singleton validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimalValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "BigDecimalValidator", "signature": "public static BigDecimalValidator getInstance()", "original_string": "    public static BigDecimalValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "BigDecimalValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the BigDecimalValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[]BigDecimalValidator()", "name": "BigDecimalValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public BigDecimalValidator()", "original_string": "    public BigDecimalValidator() {\n        this(true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[]BigDecimalValidator(boolean)", "name": "BigDecimalValidator", "arg_nums": 1, "params": [{"name": "strict", "type": "boolean"}], "return_type": "", "signature": "public BigDecimalValidator(final boolean strict)", "original_string": "    public BigDecimalValidator(final boolean strict) {\n        this(strict, STANDARD_FORMAT, true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting.</p>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[]BigDecimalValidator(boolean,int,boolean)", "name": "BigDecimalValidator", "arg_nums": 3, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}, {"name": "allowFractions", "type": "boolean"}], "return_type": "", "signature": "protected BigDecimalValidator(final boolean strict, final int formatType,\n            final boolean allowFractions)", "original_string": "    protected BigDecimalValidator(final boolean strict, final int formatType,\n            final boolean allowFractions) {\n        super(strict, formatType, allowFractions);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n@param allowFractions {@code true} if fractions are\n       allowed or {@code false} if integers only.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[boolean]isInRange(BigDecimal,double,double)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "BigDecimal"}, {"name": "min", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public boolean isInRange(final BigDecimal value, final double min, final double max)", "original_string": "    public boolean isInRange(final BigDecimal value, final double min, final double max) {\n        return value.doubleValue() >= min && value.doubleValue() <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[boolean]maxValue(BigDecimal,double)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "BigDecimal"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public boolean maxValue(final BigDecimal value, final double max)", "original_string": "    public boolean maxValue(final BigDecimal value, final double max) {\n        return value.doubleValue() <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[boolean]minValue(BigDecimal,double)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "BigDecimal"}, {"name": "min", "type": "double"}], "return_type": "boolean", "signature": "public boolean minValue(final BigDecimal value, final double min)", "original_string": "    public boolean minValue(final BigDecimal value, final double min) {\n        return value.doubleValue() >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        BigDecimal decimal;\n        if (value instanceof Long) {\n            decimal = BigDecimal.valueOf(((Long) value).longValue());\n        } else {\n            decimal = new BigDecimal(value.toString());\n        }\n\n        final int scale = determineScale((NumberFormat) formatter);\n        if (scale >= 0) {\n            decimal = decimal.setScale(scale, BigDecimal.ROUND_DOWN);\n        }\n\n        return decimal;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nConvert the parsed value to a {@code BigDecimal}.\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed {@code Number} converted to a\n        {@code BigDecimal}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "BigDecimal", "signature": "public BigDecimal validate(final String value)", "original_string": "    public BigDecimal validate(final String value) {\n        return (BigDecimal) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigDecimal} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code BigDecimal} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "BigDecimal", "signature": "public BigDecimal validate(final String value, final Locale locale)", "original_string": "    public BigDecimal validate(final String value, final Locale locale) {\n        return (BigDecimal) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigDecimal} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "BigDecimal", "signature": "public BigDecimal validate(final String value, final String pattern)", "original_string": "    public BigDecimal validate(final String value, final String pattern) {\n        return (BigDecimal) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigDecimal} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator.[BigDecimal]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "BigDecimal", "signature": "public BigDecimal validate(final String value, final String pattern, final Locale locale)", "original_string": "    public BigDecimal validate(final String value, final String pattern, final Locale locale) {\n        return (BigDecimal) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java", "class_name": "BigDecimalValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigDecimalValidator.java.BigDecimalValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigDecimal", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigDecimal} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[]AbstractFormatValidator(boolean)", "name": "AbstractFormatValidator", "arg_nums": 1, "params": [{"name": "strict", "type": "boolean"}], "return_type": "", "signature": "public AbstractFormatValidator(final boolean strict)", "original_string": "    public AbstractFormatValidator(final boolean strict) {\n        this.strict = strict;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with the specified strict setting.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[String]format(Object)", "name": "format", "arg_nums": 1, "params": [{"name": "value", "type": "Object"}], "return_type": "String", "signature": "public String format(final Object value)", "original_string": "    public String format(final Object value) {\n        return format(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object into a {@link String} using\nthe default Locale.</p>\n\n@param value The value validation is being performed on.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[String]format(Object,Format)", "name": "format", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "String", "signature": "protected String format(final Object value, final Format formatter)", "original_string": "    protected String format(final Object value, final Format formatter) {\n        return formatter.format(value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format a value with the specified {@code Format}.</p>\n\n@param value The value to be formatted.\n@param formatter The Format to use.\n@return The formatted value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[String]format(Object,Locale)", "name": "format", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "locale", "type": "Locale"}], "return_type": "String", "signature": "public String format(final Object value, final Locale locale)", "original_string": "    public String format(final Object value, final Locale locale) {\n        return format(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object into a {@link String} using\nthe specified Locale.</p>\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the Format.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[String]format(Object,String)", "name": "format", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "pattern", "type": "String"}], "return_type": "String", "signature": "public String format(final Object value, final String pattern)", "original_string": "    public String format(final Object value, final String pattern) {\n        return format(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object into a {@link String} using\nthe specified pattern.</p>\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to format the value.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[String]format(Object,String,Locale)", "name": "format", "arg_nums": 3, "params": [{"name": "value", "type": "Object"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "String", "signature": "public String format(final Object value, final String pattern, final Locale locale)", "original_string": "    public String format(final Object value, final String pattern, final Locale locale) {\n        final Format formatter = getFormat(pattern, locale);\n        return format(value, formatter);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object using the specified pattern and/or\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to format the value.\n@param locale The locale to use for the Format.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[Format]getFormat(String,Locale)", "name": "getFormat", "arg_nums": 2, "params": [{"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Format", "signature": "protected abstract Format getFormat(String pattern, Locale locale)", "original_string": "    protected abstract Format getFormat(String pattern, Locale locale);", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "Format", "classes": []}, "docstring": "\n<p>Returns a {@code Format} for the specified <em>pattern</em>\n   and/or {@link Locale}.</p>\n\n@param pattern The pattern used to validate the value against or\n       {@code null} to use the default for the {@link Locale}.\n@param locale The locale to use for the currency format, system default if null.\n@return The {@code NumberFormat} to created.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[boolean]isStrict()", "name": "isStrict", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isStrict()", "original_string": "    public boolean isStrict() {\n        return strict;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Indicates whether validated values should adhere\n   strictly to the {@code Format} used.</p>\n\n<p>Typically implementations of {@code Format}\n   ignore invalid characters at the end of the value\n   and just stop parsing. For example parsing a date\n   value of {@code 01/01/20x0} using a pattern\n   of {@code dd/MM/yyyy} will result in a year\n   of {@code 20} if {@code strict} is set\n   to {@code false}, whereas setting {@code strict}\n   to {@code true} will cause this value to fail\n   validation.</p>\n\n@return {@code true} if strict {@code Format}\n        parsing should be used.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String value)", "original_string": "    public boolean isValid(final String value) {\n        return isValid(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Validate using the default {@link Locale}.\n\n@param value The value validation is being performed on.\n@return {@code true} if the value is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[boolean]isValid(String,Locale)", "name": "isValid", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "boolean", "signature": "public boolean isValid(final String value, final Locale locale)", "original_string": "    public boolean isValid(final String value, final Locale locale) {\n        return isValid(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Validate using the specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the Format, defaults to the default\n@return {@code true} if the value is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[boolean]isValid(String,String)", "name": "isValid", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String value, final String pattern)", "original_string": "    public boolean isValid(final String value, final String pattern) {\n        return isValid(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Validate using the specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return {@code true} if the value is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[boolean]isValid(String,String,Locale)", "name": "isValid", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "boolean", "signature": "public abstract boolean isValid(String value, String pattern, Locale locale)", "original_string": "    public abstract boolean isValid(String value, String pattern, Locale locale);", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "public abstract", "marker_annotations": [], "non_marker_annotations": ["public", "abstract"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Validate using the specified pattern and/or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to format the value.\n@param locale The locale to use for the Format, defaults to the default\n@return {@code true} if the value is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[Object]parse(String,Format)", "name": "parse", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "protected Object parse(final String value, final Format formatter)", "original_string": "    protected Object parse(final String value, final Format formatter) {\n        final ParsePosition pos = new ParsePosition(0);\n        Object parsedValue = formatter.parseObject(value, pos);\n        if (pos.getErrorIndex() > -1) {\n            return null;\n        }\n        if (isStrict() && pos.getIndex() < value.length()) {\n            return null;\n        }\n        if (parsedValue != null) {\n            parsedValue = processParsedValue(parsedValue, formatter);\n        }\n        return parsedValue;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Parse the value with the specified {@code Format}.</p>\n\n@param value The value to be parsed.\n@param formatter The Format to parse the value with.\n@return The parsed value if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "protected abstract Object processParsedValue(Object value, Format formatter)", "original_string": "    protected abstract Object processParsedValue(Object value, Format formatter);", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java", "class_name": "AbstractFormatValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractFormatValidator.java.AbstractFormatValidator", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Process the parsed value, performing any further validation\n   and type conversion required.</p>\n\n@param value The parsed object created.\n@param formatter The Format used to parse the value with.\n@return The parsed value converted to the appropriate type\n        if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[ISBNValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "ISBNValidator", "signature": "public static ISBNValidator getInstance()", "original_string": "    public static ISBNValidator getInstance() {\n        return ISBN_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ISBNValidator", "classes": []}, "docstring": "\nGets the singleton instance of the ISBN validator which\nconverts ISBN-10 codes to ISBN-13.\n\n@return A singleton instance of the ISBN validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[ISBNValidator]getInstance(boolean)", "name": "getInstance", "arg_nums": 1, "params": [{"name": "convert", "type": "boolean"}], "return_type": "ISBNValidator", "signature": "public static ISBNValidator getInstance(final boolean convert)", "original_string": "    public static ISBNValidator getInstance(final boolean convert) {\n        return convert ? ISBN_VALIDATOR : ISBN_VALIDATOR_NO_CONVERT;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ISBNValidator", "classes": []}, "docstring": "\nGets the singleton instance of the ISBN validator specifying\nwhether ISBN-10 codes should be converted to ISBN-13.\n\n@param convert {@code true} if valid ISBN-10 codes\nshould be converted to ISBN-13 codes or {@code false}\nif valid ISBN-10 codes should be returned unchanged.\n@return A singleton instance of the ISBN validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[]ISBNValidator()", "name": "ISBNValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ISBNValidator()", "original_string": "    public ISBNValidator() {\n        this(true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an ISBN validator which converts ISBN-10 codes\nto ISBN-13.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[]ISBNValidator(boolean)", "name": "ISBNValidator", "arg_nums": 1, "params": [{"name": "convert", "type": "boolean"}], "return_type": "", "signature": "public ISBNValidator(final boolean convert)", "original_string": "    public ISBNValidator(final boolean convert) {\n        this.convert = convert;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an ISBN validator indicating whether\nISBN-10 codes should be converted to ISBN-13.\n\n@param convert {@code true} if valid ISBN-10 codes\nshould be converted to ISBN-13 codes or {@code false}\nif valid ISBN-10 codes should be returned unchanged.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]convertToISBN13(String)", "name": "convertToISBN13", "arg_nums": 1, "params": [{"name": "isbn10", "type": "String"}], "return_type": "String", "signature": "public String convertToISBN13(final String isbn10)", "original_string": "    public String convertToISBN13(final String isbn10) {\n\n        if (isbn10 == null) {\n            return null;\n        }\n\n        final String input = isbn10.trim();\n        if (input.length() != ISBN_10_LEN) {\n            throw new IllegalArgumentException(\"Invalid length \" + input.length() + \" for '\" + input + \"'\");\n        }\n\n        // Calculate the new ISBN-13 code (drop the original checkdigit)\n        String isbn13 = \"978\" + input.substring(0, ISBN_10_LEN - 1);\n        try {\n            final String checkDigit = isbn13Validator.getCheckDigit().calculate(isbn13);\n            isbn13 += checkDigit;\n            return isbn13;\n        } catch (final CheckDigitException e) {\n            throw new IllegalArgumentException(\"Check digit error for '\" + input + \"' - \" + e.getMessage());\n        }\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nConvert an ISBN-10 code to an ISBN-13 code.\n<p>\nThis method requires a valid ISBN-10 with NO formatting\ncharacters.\n\n@param isbn10 The ISBN-10 code to convert\n@return A converted ISBN-13 code or {@code null}\nif the ISBN-10 code is not valid\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String code)", "original_string": "    public boolean isValid(final String code) {\n        return isValidISBN13(code) || isValidISBN10(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck the code is either a valid ISBN-10 or ISBN-13 code.\n\n@param code The code to validate.\n@return {@code true} if a valid ISBN-10 or\nISBN-13 code, otherwise {@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[boolean]isValidISBN10(String)", "name": "isValidISBN10", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidISBN10(final String code)", "original_string": "    public boolean isValidISBN10(final String code) {\n        return isbn10Validator.isValid(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck the code is a valid ISBN-10 code.\n\n@param code The code to validate.\n@return {@code true} if a valid ISBN-10\ncode, otherwise {@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[boolean]isValidISBN13(String)", "name": "isValidISBN13", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidISBN13(final String code)", "original_string": "    public boolean isValidISBN13(final String code) {\n        return isbn13Validator.isValid(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck the code is a valid ISBN-13 code.\n\n@param code The code to validate.\n@return {@code true} if a valid ISBN-13\ncode, otherwise {@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "public String validate(final String code)", "original_string": "    public String validate(final String code) {\n        String result = validateISBN13(code);\n        if (result == null) {\n            result = validateISBN10(code);\n            if (result != null && convert) {\n                result = convertToISBN13(result);\n            }\n        }\n        return result;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCheck the code is either a valid ISBN-10 or ISBN-13 code.\n<p>\nIf valid, this method returns the ISBN code with\nformatting characters removed (i.e. space or hyphen).\n<p>\nConverts an ISBN-10 codes to ISBN-13 if\n{@code convertToISBN13} is {@code true}.\n\n@param code The code to validate.\n@return A valid ISBN code if valid, otherwise {@code null}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]validateISBN10(String)", "name": "validateISBN10", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "public String validateISBN10(final String code)", "original_string": "    public String validateISBN10(final String code) {\n        final Object result = isbn10Validator.validate(code);\n        return Objects.toString(result, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCheck the code is a valid ISBN-10 code.\n<p>\nIf valid, this method returns the ISBN-10 code with\nformatting characters removed (i.e. space or hyphen).\n\n@param code The code to validate.\n@return A valid ISBN-10 code if valid,\notherwise {@code null}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator.[String]validateISBN13(String)", "name": "validateISBN13", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "public String validateISBN13(final String code)", "original_string": "    public String validateISBN13(final String code) {\n        final Object result = isbn13Validator.validate(code);\n        return Objects.toString(result, null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java", "class_name": "ISBNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISBNValidator.java.ISBNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCheck the code is a valid ISBN-13 code.\n<p>\nIf valid, this method returns the ISBN-13 code with\nformatting characters removed (i.e. space or hyphen).\n\n@param code The code to validate.\n@return A valid ISBN-13 code if valid,\notherwise {@code null}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]arrayContains(String[],String)", "name": "arrayContains", "arg_nums": 2, "params": [{"name": "sortedArray", "type": "String[]"}, {"name": "key", "type": "String"}], "return_type": "boolean", "signature": "private static boolean arrayContains(final String[] sortedArray, final String key)", "original_string": "    private static boolean arrayContains(final String[] sortedArray, final String key) {\n        return Arrays.binarySearch(sortedArray, key) >= 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if a sorted array contains the specified key\n\n@param sortedArray the array to search\n@param key the key to find\n@return {@code true} if the array contains the key\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[DomainValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "DomainValidator", "signature": "public static synchronized DomainValidator getInstance()", "original_string": "    public static synchronized DomainValidator getInstance() {\n        inUse = true;\n        return LazyHolder.DOMAIN_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public static synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "static", "synchronized"], "comments": [], "return_type": "DomainValidator", "classes": []}, "docstring": "\nReturns the singleton instance of this validator. It\n will not consider local addresses as valid.\n@return the singleton instance of this validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[DomainValidator]getInstance(boolean)", "name": "getInstance", "arg_nums": 1, "params": [{"name": "allowLocal", "type": "boolean"}], "return_type": "DomainValidator", "signature": "public static synchronized DomainValidator getInstance(final boolean allowLocal)", "original_string": "    public static synchronized DomainValidator getInstance(final boolean allowLocal) {\n        inUse = true;\n        if (allowLocal) {\n            return LazyHolder.DOMAIN_VALIDATOR_WITH_LOCAL;\n        }\n        return LazyHolder.DOMAIN_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public static synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "static", "synchronized"], "comments": [], "return_type": "DomainValidator", "classes": []}, "docstring": "\nReturns the singleton instance of this validator,\n with local validation as required.\n@param allowLocal Should local addresses be considered valid?\n@return the singleton instance of this validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[DomainValidator]getInstance(boolean,List<Item>)", "name": "getInstance", "arg_nums": 2, "params": [{"name": "allowLocal", "type": "boolean"}, {"name": "items", "type": "List<Item>"}], "return_type": "DomainValidator", "signature": "public static synchronized DomainValidator getInstance(final boolean allowLocal, final List<Item> items)", "original_string": "    public static synchronized DomainValidator getInstance(final boolean allowLocal, final List<Item> items) {\n        inUse = true;\n        return new DomainValidator(allowLocal, items);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public static synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "static", "synchronized"], "comments": [], "return_type": "DomainValidator", "classes": []}, "docstring": "\nReturns a new instance of this validator.\nThe user can provide a list of {@link Item} entries which can\nbe used to override the generic and country code lists.\nNote that any such entries override values provided by the\n{@link #updateTLDOverride(ArrayType, String[])} method\nIf an entry for a particular type is not provided, then\nthe class override (if any) is retained.\n\n@param allowLocal Should local addresses be considered valid?\n@param items   array of {@link Item} entries\n@return an instance of this validator\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String[]]getTLDEntries(ArrayType)", "name": "getTLDEntries", "arg_nums": 1, "params": [{"name": "table", "type": "ArrayType"}], "return_type": "String[]", "signature": "public static synchronized String[] getTLDEntries(final ArrayType table)", "original_string": "    public static synchronized String[] getTLDEntries(final ArrayType table) {\n        final String[] array;\n        switch (table) {\n        case COUNTRY_CODE_MINUS:\n            array = countryCodeTLDsMinus;\n            break;\n        case COUNTRY_CODE_PLUS:\n            array = countryCodeTLDsPlus;\n            break;\n        case GENERIC_MINUS:\n            array = genericTLDsMinus;\n            break;\n        case GENERIC_PLUS:\n            array = genericTLDsPlus;\n            break;\n        case LOCAL_MINUS:\n            array = localTLDsMinus;\n            break;\n        case LOCAL_PLUS:\n            array = localTLDsPlus;\n            break;\n        case GENERIC_RO:\n            array = GENERIC_TLDS;\n            break;\n        case COUNTRY_CODE_RO:\n            array = COUNTRY_CODE_TLDS;\n            break;\n        case INFRASTRUCTURE_RO:\n            array = INFRASTRUCTURE_TLDS;\n            break;\n        case LOCAL_RO:\n            array = LOCAL_TLDS;\n            break;\n        default:\n            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);\n        }\n        return Arrays.copyOf(array, array.length); // clone the array\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public static synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "static", "synchronized"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets a copy of a class level internal array.\n@param table the array type (any of the enum values)\n@return a copy of the array\n@throws IllegalArgumentException if the table type is unexpected (should not happen)\n@since 1.5.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isOnlyASCII(String)", "name": "isOnlyASCII", "arg_nums": 1, "params": [{"name": "input", "type": "String"}], "return_type": "boolean", "signature": "private static boolean isOnlyASCII(final String input)", "original_string": "    private static boolean isOnlyASCII(final String input) {\n        if (input == null) {\n            return true;\n        }\n        for (int i = 0; i < input.length(); i++) {\n            if (input.charAt(i) > 0x7F) { // CHECKSTYLE IGNORE MagicNumber\n                return false;\n            }\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if input contains only ASCII\nTreats null as all ASCII\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String]unicodeToASCII(String)", "name": "unicodeToASCII", "arg_nums": 1, "params": [{"name": "input", "type": "String"}], "return_type": "String", "signature": "static String unicodeToASCII(final String input)", "original_string": "    static String unicodeToASCII(final String input) {\n        if (isOnlyASCII(input)) { // skip possibly expensive processing\n            return input;\n        }\n        try {\n            final String ascii = IDN.toASCII(input);\n            if (IDNBUGHOLDER.IDN_TOASCII_PRESERVES_TRAILING_DOTS) {\n                return ascii;\n            }\n            final int length = input.length();\n            if (length == 0) { // check there is a last character\n                return input;\n            }\n            // RFC3490 3.1. 1)\n            // Whenever dots are used as label separators, the following\n            // characters MUST be recognized as dots: U+002E (full stop), U+3002\n            // (ideographic full stop), U+FF0E (fullwidth full stop), U+FF61\n            // (halfwidth ideographic full stop).\n            final char lastChar = input.charAt(length - 1); // fetch original last char\n            switch (lastChar) {\n            case '\\u002E': // \".\" full stop\n            case '\\u3002': // ideographic full stop\n            case '\\uFF0E': // fullwidth full stop\n            case '\\uFF61': // halfwidth ideographic full stop\n                return ascii + \".\"; // restore the missing stop\n            default:\n                return ascii;\n            }\n        } catch (final IllegalArgumentException e) { // input is not valid\n            return input;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "static", "marker_annotations": [], "non_marker_annotations": ["static"], "comments": [], "return_type": "String", "classes": []}, "docstring": " Needed by UrlValidator"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[void]updateTLDOverride(ArrayType)", "name": "updateTLDOverride", "arg_nums": 1, "params": [{"name": "table", "type": "ArrayType"}], "return_type": "void", "signature": "public static synchronized void updateTLDOverride(final ArrayType table, final String... tlds)", "original_string": "    public static synchronized void updateTLDOverride(final ArrayType table, final String... tlds) {\n        if (inUse) {\n            throw new IllegalStateException(\"Can only invoke this method before calling getInstance\");\n        }\n        final String[] copy = new String[tlds.length];\n        // Comparisons are always done with lower-case entries\n        for (int i = 0; i < tlds.length; i++) {\n            copy[i] = tlds[i].toLowerCase(Locale.ENGLISH);\n        }\n        Arrays.sort(copy);\n        switch (table) {\n        case COUNTRY_CODE_MINUS:\n            countryCodeTLDsMinus = copy;\n            break;\n        case COUNTRY_CODE_PLUS:\n            countryCodeTLDsPlus = copy;\n            break;\n        case GENERIC_MINUS:\n            genericTLDsMinus = copy;\n            break;\n        case GENERIC_PLUS:\n            genericTLDsPlus = copy;\n            break;\n        case LOCAL_MINUS:\n            localTLDsMinus = copy;\n            break;\n        case LOCAL_PLUS:\n            localTLDsPlus = copy;\n            break;\n        case COUNTRY_CODE_RO:\n        case GENERIC_RO:\n        case INFRASTRUCTURE_RO:\n        case LOCAL_RO:\n            throw new IllegalArgumentException(\"Cannot update the table: \" + table);\n        default:\n            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public static synchronized", "marker_annotations": [], "non_marker_annotations": ["public", "static", "synchronized"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nUpdate one of the TLD override arrays.\nThis must only be done at program startup, before any instances are accessed using getInstance.\n<p>\nFor example:\n<p>\n{@code DomainValidator.updateTLDOverride(ArrayType.GENERIC_PLUS, \"apache\")}\n<p>\nTo clear an override array, provide an empty array.\n\n@param table the table to update, see {@link DomainValidator.ArrayType}\nMust be one of the following\n<ul>\n<li>COUNTRY_CODE_MINUS</li>\n<li>COUNTRY_CODE_PLUS</li>\n<li>GENERIC_MINUS</li>\n<li>GENERIC_PLUS</li>\n<li>LOCAL_MINUS</li>\n<li>LOCAL_PLUS</li>\n</ul>\n@param tlds the array of TLDs, must not be null\n@throws IllegalStateException if the method is called after getInstance\n@throws IllegalArgumentException if one of the read-only tables is requested\n@since 1.5.0\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[]DomainValidator(boolean)", "name": "DomainValidator", "arg_nums": 1, "params": [{"name": "allowLocal", "type": "boolean"}], "return_type": "", "signature": "private DomainValidator(final boolean allowLocal)", "original_string": "    private DomainValidator(final boolean allowLocal) {\n        this.allowLocal = allowLocal;\n        // link to class overrides\n        myCountryCodeTLDsMinus = countryCodeTLDsMinus;\n        myCountryCodeTLDsPlus = countryCodeTLDsPlus;\n        myGenericTLDsPlus = genericTLDsPlus;\n        myGenericTLDsMinus = genericTLDsMinus;\n        myLocalTLDsPlus = localTLDsPlus;\n        myLocalTLDsMinus = localTLDsMinus;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nPrivate constructor.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[]DomainValidator(boolean,List<Item>)", "name": "DomainValidator", "arg_nums": 2, "params": [{"name": "allowLocal", "type": "boolean"}, {"name": "items", "type": "List<Item>"}], "return_type": "", "signature": "private DomainValidator(final boolean allowLocal, final List<Item> items)", "original_string": "    private DomainValidator(final boolean allowLocal, final List<Item> items) {\n        this.allowLocal = allowLocal;\n\n        // default to class overrides\n        String[] ccMinus = countryCodeTLDsMinus;\n        String[] ccPlus = countryCodeTLDsPlus;\n        String[] genMinus = genericTLDsMinus;\n        String[] genPlus = genericTLDsPlus;\n        String[] localMinus = localTLDsMinus;\n        String[] localPlus = localTLDsPlus;\n\n        // apply the instance overrides\n        for (final Item item : items) {\n            final String[] copy = new String[item.values.length];\n            // Comparisons are always done with lower-case entries\n            for (int i = 0; i < item.values.length; i++) {\n                copy[i] = item.values[i].toLowerCase(Locale.ENGLISH);\n            }\n            Arrays.sort(copy);\n            switch (item.type) {\n            case COUNTRY_CODE_MINUS: {\n                ccMinus = copy;\n                break;\n            }\n            case COUNTRY_CODE_PLUS: {\n                ccPlus = copy;\n                break;\n            }\n            case GENERIC_MINUS: {\n                genMinus = copy;\n                break;\n            }\n            case GENERIC_PLUS: {\n                genPlus = copy;\n                break;\n            }\n            case LOCAL_MINUS: {\n                localMinus = copy;\n                break;\n            }\n            case LOCAL_PLUS: {\n                localPlus = copy;\n                break;\n            }\n            default:\n                break;\n            }\n        }\n\n        // init the instance overrides\n        myCountryCodeTLDsMinus = ccMinus;\n        myCountryCodeTLDsPlus = ccPlus;\n        myGenericTLDsMinus = genMinus;\n        myGenericTLDsPlus = genPlus;\n        myLocalTLDsMinus = localMinus;\n        myLocalTLDsPlus = localPlus;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nPrivate constructor, allowing local overrides\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String]chompLeadingDot(String)", "name": "chompLeadingDot", "arg_nums": 1, "params": [{"name": "str", "type": "String"}], "return_type": "String", "signature": "private String chompLeadingDot(final String str)", "original_string": "    private String chompLeadingDot(final String str) {\n        if (str.startsWith(\".\")) {\n            return str.substring(1);\n        }\n        return str;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[String[]]getOverrides(ArrayType)", "name": "getOverrides", "arg_nums": 1, "params": [{"name": "table", "type": "ArrayType"}], "return_type": "String[]", "signature": "public String[] getOverrides(final ArrayType table)", "original_string": "    public String[] getOverrides(final ArrayType table) {\n        final String[] array;\n        switch (table) {\n        case COUNTRY_CODE_MINUS:\n            array = myCountryCodeTLDsMinus;\n            break;\n        case COUNTRY_CODE_PLUS:\n            array = myCountryCodeTLDsPlus;\n            break;\n        case GENERIC_MINUS:\n            array = myGenericTLDsMinus;\n            break;\n        case GENERIC_PLUS:\n            array = myGenericTLDsPlus;\n            break;\n        case LOCAL_MINUS:\n            array = myLocalTLDsMinus;\n            break;\n        case LOCAL_PLUS:\n            array = myLocalTLDsPlus;\n            break;\n        default:\n            throw new IllegalArgumentException(UNEXPECTED_ENUM_VALUE + table);\n        }\n        return Arrays.copyOf(array, array.length); // clone the array\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nGets a copy of an instance level internal array.\n@param table the array type (any of the enum values)\n@return a copy of the array\n@throws IllegalArgumentException if the table type is unexpected, e.g. GENERIC_RO\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isAllowLocal()", "name": "isAllowLocal", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isAllowLocal()", "original_string": "    public boolean isAllowLocal() {\n        return allowLocal;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nDoes this instance allow local addresses?\n\n@return true if local addresses are allowed.\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "domain", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(String domain)", "original_string": "    public boolean isValid(String domain) {\n        if (domain == null) {\n            return false;\n        }\n        domain = unicodeToASCII(domain);\n        // hosts must be equally reachable via punycode and Unicode\n        // Unicode is never shorter than punycode, so check punycode\n        // if domain did not convert, then it will be caught by ASCII\n        // checks in the regexes below\n        if (domain.length() > MAX_DOMAIN_LENGTH) {\n            return false;\n        }\n        final String[] groups = domainRegex.match(domain);\n        if (groups != null && groups.length > 0) {\n            return isValidTld(groups[0]);\n        }\n        return allowLocal && hostnameRegex.isValid(domain);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the specified {@link String} parses\nas a valid domain name with a recognized top-level domain.\nThe parsing is case-insensitive.\n@param domain the parameter to check for domain name syntax\n@return true if the parameter is a valid domain name\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidCountryCodeTld(String)", "name": "isValidCountryCodeTld", "arg_nums": 1, "params": [{"name": "ccTld", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidCountryCodeTld(final String ccTld)", "original_string": "    public boolean isValidCountryCodeTld(final String ccTld) {\n        final String key = chompLeadingDot(unicodeToASCII(ccTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(COUNTRY_CODE_TLDS, key) || arrayContains(myCountryCodeTLDsPlus, key)) && !arrayContains(myCountryCodeTLDsMinus, key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the specified {@link String} matches any\nIANA-defined country code top-level domain. Leading dots are\nignored if present. The search is case-insensitive.\n@param ccTld the parameter to check for country code TLD status, not null\n@return true if the parameter is a country code TLD\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidDomainSyntax(String)", "name": "isValidDomainSyntax", "arg_nums": 1, "params": [{"name": "domain", "type": "String"}], "return_type": "boolean", "signature": "final boolean isValidDomainSyntax(String domain)", "original_string": "    final boolean isValidDomainSyntax(String domain) {\n        if (domain == null) {\n            return false;\n        }\n        domain = unicodeToASCII(domain);\n        // hosts must be equally reachable via punycode and Unicode\n        // Unicode is never shorter than punycode, so check punycode\n        // if domain did not convert, then it will be caught by ASCII\n        // checks in the regexes below\n        if (domain.length() > MAX_DOMAIN_LENGTH) {\n            return false;\n        }\n        final String[] groups = domainRegex.match(domain);\n        return groups != null && groups.length > 0 || hostnameRegex.isValid(domain);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "final", "marker_annotations": [], "non_marker_annotations": ["final"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": " must agree with isValid() above"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidGenericTld(String)", "name": "isValidGenericTld", "arg_nums": 1, "params": [{"name": "gTld", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidGenericTld(final String gTld)", "original_string": "    public boolean isValidGenericTld(final String gTld) {\n        final String key = chompLeadingDot(unicodeToASCII(gTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(GENERIC_TLDS, key) || arrayContains(myGenericTLDsPlus, key)) && !arrayContains(myGenericTLDsMinus, key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the specified {@link String} matches any\nIANA-defined generic top-level domain. Leading dots are ignored\nif present. The search is case-insensitive.\n@param gTld the parameter to check for generic TLD status, not null\n@return true if the parameter is a generic TLD\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidInfrastructureTld(String)", "name": "isValidInfrastructureTld", "arg_nums": 1, "params": [{"name": "iTld", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidInfrastructureTld(final String iTld)", "original_string": "    public boolean isValidInfrastructureTld(final String iTld) {\n        final String key = chompLeadingDot(unicodeToASCII(iTld).toLowerCase(Locale.ENGLISH));\n        return arrayContains(INFRASTRUCTURE_TLDS, key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the specified {@link String} matches any\nIANA-defined infrastructure top-level domain. Leading dots are\nignored if present. The search is case-insensitive.\n@param iTld the parameter to check for infrastructure TLD status, not null\n@return true if the parameter is an infrastructure TLD\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidLocalTld(String)", "name": "isValidLocalTld", "arg_nums": 1, "params": [{"name": "lTld", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidLocalTld(final String lTld)", "original_string": "    public boolean isValidLocalTld(final String lTld) {\n        final String key = chompLeadingDot(unicodeToASCII(lTld).toLowerCase(Locale.ENGLISH));\n        return (arrayContains(LOCAL_TLDS, key) || arrayContains(myLocalTLDsPlus, key))\n                && !arrayContains(myLocalTLDsMinus, key);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the specified {@link String} matches any\nwidely used \"local\" domains (localhost or localdomain). Leading dots are\nignored if present. The search is case-insensitive.\n@param lTld the parameter to check for local TLD status, not null\n@return true if the parameter is an local TLD\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator.[boolean]isValidTld(String)", "name": "isValidTld", "arg_nums": 1, "params": [{"name": "tld", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidTld(final String tld)", "original_string": "    public boolean isValidTld(final String tld) {\n        if (allowLocal && isValidLocalTld(tld)) {\n            return true;\n        }\n        return isValidInfrastructureTld(tld)\n                || isValidGenericTld(tld)\n                || isValidCountryCodeTld(tld);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java", "class_name": "DomainValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DomainValidator.java.DomainValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the specified {@link String} matches any\nIANA-defined top-level domain. Leading dots are ignored if present.\nThe search is case-insensitive.\n<p>\nIf allowLocal is true, the TLD is checked using {@link #isValidLocalTld(String)}.\nThe TLD is then checked against {@link #isValidInfrastructureTld(String)},\n{@link #isValidGenericTld(String)} and {@link #isValidCountryCodeTld(String)}\n@param tld the parameter to check for TLD status, not null\n@return true if the parameter is a TLD\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[BigDecimalValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "BigDecimalValidator", "signature": "public static BigDecimalValidator getInstance()", "original_string": "    public static BigDecimalValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java", "class_name": "CurrencyValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "BigDecimalValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the CurrencyValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[]CurrencyValidator()", "name": "CurrencyValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public CurrencyValidator()", "original_string": "    public CurrencyValidator() {\n        this(true, true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java", "class_name": "CurrencyValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[]CurrencyValidator(boolean,boolean)", "name": "CurrencyValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "allowFractions", "type": "boolean"}], "return_type": "", "signature": "public CurrencyValidator(final boolean strict, final boolean allowFractions)", "original_string": "    public CurrencyValidator(final boolean strict, final boolean allowFractions) {\n        super(strict, CURRENCY_FORMAT, allowFractions);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java", "class_name": "CurrencyValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with the specified strict setting.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param allowFractions {@code true} if fractions are\n       allowed or {@code false} if integers only.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator.[Object]parse(String,Format)", "name": "parse", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object parse(final String value, final Format formatter)", "original_string": "    @Override\n    protected Object parse(final String value, final Format formatter) {\n\n        // Initial parse of the value\n        Object parsedValue = super.parse(value, formatter);\n        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {\n            return parsedValue;\n        }\n\n        // Re-parse using a pattern without the currency symbol\n        final DecimalFormat decimalFormat = (DecimalFormat) formatter;\n        final String pattern = decimalFormat.toPattern();\n        if (pattern.indexOf(CURRENCY_SYMBOL) >= 0) {\n            final StringBuilder buffer = new StringBuilder(pattern.length());\n            for (int i = 0; i < pattern.length(); i++) {\n                if (pattern.charAt(i) != CURRENCY_SYMBOL) {\n                    buffer.append(pattern.charAt(i));\n                }\n            }\n            decimalFormat.applyPattern(buffer.toString());\n            parsedValue = super.parse(value, decimalFormat);\n        }\n        return parsedValue;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java", "class_name": "CurrencyValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CurrencyValidator.java.CurrencyValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Parse the value with the specified {@code Format}.</p>\n\n<p>This implementation is lenient whether the currency symbol\n   is present or not. The default {@code NumberFormat}\n   behavior is for the parsing to \"fail\" if the currency\n   symbol is missing. This method re-parses with a format\n   without the currency symbol if it fails initially.</p>\n\n@param value The value to be parsed.\n@param formatter The Format to parse the value with.\n@return The parsed value if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[]AbstractNumberValidator(boolean,int,boolean)", "name": "AbstractNumberValidator", "arg_nums": 3, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}, {"name": "allowFractions", "type": "boolean"}], "return_type": "", "signature": "public AbstractNumberValidator(final boolean strict, final int formatType, final boolean allowFractions)", "original_string": "    public AbstractNumberValidator(final boolean strict, final int formatType, final boolean allowFractions) {\n        super(strict);\n        this.allowFractions = allowFractions;\n        this.formatType = formatType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with specified <em>strict</em>\nand <em>decimal</em> parameters.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n@param allowFractions {@code true} if fractions are\n       allowed or {@code false} if integers only.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[int]determineScale(NumberFormat)", "name": "determineScale", "arg_nums": 1, "params": [{"name": "format", "type": "NumberFormat"}], "return_type": "int", "signature": "protected int determineScale(final NumberFormat format)", "original_string": "    protected int determineScale(final NumberFormat format) {\n        if (!isStrict()) {\n            return -1;\n        }\n        if (!isAllowFractions() || format.isParseIntegerOnly()) {\n            return 0;\n        }\n        final int minimumFraction = format.getMinimumFractionDigits();\n        final int maximumFraction = format.getMaximumFractionDigits();\n        if (minimumFraction != maximumFraction) {\n            return -1;\n        }\n        int scale = minimumFraction;\n        if (format instanceof DecimalFormat) {\n            final int multiplier = ((DecimalFormat) format).getMultiplier();\n            if (multiplier == 100) { // CHECKSTYLE IGNORE MagicNumber\n                scale += 2; // CHECKSTYLE IGNORE MagicNumber\n            } else if (multiplier == 1000) { // CHECKSTYLE IGNORE MagicNumber\n                scale += 3; // CHECKSTYLE IGNORE MagicNumber\n            }\n        } else if (formatType == PERCENT_FORMAT) {\n            scale += 2; // CHECKSTYLE IGNORE MagicNumber\n        }\n        return scale;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Returns the <em>multiplier</em> of the {@code NumberFormat}.</p>\n\n@param format The {@code NumberFormat} to determine the\n       multiplier of.\n@return The multiplying factor for the format.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[Format]getFormat(Locale)", "name": "getFormat", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "Format", "signature": "protected Format getFormat(final Locale locale)", "original_string": "    protected Format getFormat(final Locale locale) {\n        NumberFormat formatter;\n        switch (formatType) {\n        case CURRENCY_FORMAT:\n            if (locale == null) {\n                formatter = NumberFormat.getCurrencyInstance();\n            } else {\n                formatter = NumberFormat.getCurrencyInstance(locale);\n            }\n            break;\n        case PERCENT_FORMAT:\n            if (locale == null) {\n                formatter = NumberFormat.getPercentInstance();\n            } else {\n                formatter = NumberFormat.getPercentInstance(locale);\n            }\n            break;\n        default:\n            if (locale == null) {\n                formatter = NumberFormat.getInstance();\n            } else {\n                formatter = NumberFormat.getInstance(locale);\n            }\n            if (!isAllowFractions()) {\n                formatter.setParseIntegerOnly(true);\n            }\n            break;\n        }\n        return formatter;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Format", "classes": []}, "docstring": "\n<p>Returns a {@code NumberFormat} for the specified Locale.</p>\n\n@param locale The locale a {@code NumberFormat} is required for,\n  system default if null.\n@return The {@code NumberFormat} to created.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[Format]getFormat(String,Locale)", "name": "getFormat", "arg_nums": 2, "params": [{"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Format", "signature": "@Override\n    protected Format getFormat(final String pattern, final Locale locale)", "original_string": "    @Override\n    protected Format getFormat(final String pattern, final Locale locale) {\n\n        NumberFormat formatter;\n        final boolean usePattern = !GenericValidator.isBlankOrNull(pattern);\n        if (!usePattern) {\n            formatter = (NumberFormat) getFormat(locale);\n        } else if (locale == null) {\n            formatter = new DecimalFormat(pattern);\n        } else {\n            final DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);\n            formatter = new DecimalFormat(pattern, symbols);\n        }\n\n        if (!isAllowFractions()) {\n            formatter.setParseIntegerOnly(true);\n        }\n        return formatter;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Format", "classes": []}, "docstring": "\n<p>Returns a {@code NumberFormat} for the specified <em>pattern</em>\n   and/or {@link Locale}.</p>\n\n@param pattern The pattern used to validate the value against or\n       {@code null} to use the default for the {@link Locale}.\n@param locale The locale to use for the currency format, system default if null.\n@return The {@code NumberFormat} to created.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[int]getFormatType()", "name": "getFormatType", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getFormatType()", "original_string": "    public int getFormatType() {\n        return formatType;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Indicates the type of {@code NumberFormat} created\n   by this validator instance.</p>\n\n@return the format type created.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[boolean]isAllowFractions()", "name": "isAllowFractions", "arg_nums": 0, "params": [], "return_type": "boolean", "signature": "public boolean isAllowFractions()", "original_string": "    public boolean isAllowFractions() {\n        return allowFractions;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Indicates whether the number being validated is\n   a decimal or integer.</p>\n\n@return {@code true} if decimals are allowed\n      or {@code false} if the number is an integer.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[boolean]isInRange(Number,Number,Number)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "Number"}, {"name": "min", "type": "Number"}, {"name": "max", "type": "Number"}], "return_type": "boolean", "signature": "public boolean isInRange(final Number value, final Number min, final Number max)", "original_string": "    public boolean isInRange(final Number value, final Number min, final Number max) {\n        return minValue(value, min) && maxValue(value, max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The value validation is being performed on.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[boolean]isValid(String,String,Locale)", "name": "isValid", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String value, final String pattern, final Locale locale)", "original_string": "    @Override\n    public boolean isValid(final String value, final String pattern, final Locale locale) {\n        return parse(value, pattern, locale) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Validate using the specified {@link Locale}.</p>\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return {@code true} if the value is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[boolean]maxValue(Number,Number)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "Number"}, {"name": "max", "type": "Number"}], "return_type": "boolean", "signature": "public boolean maxValue(final Number value, final Number max)", "original_string": "    public boolean maxValue(final Number value, final Number max) {\n        if (isAllowFractions()) {\n            return value.doubleValue() <= max.doubleValue();\n        }\n        return value.longValue() <= max.longValue();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[boolean]minValue(Number,Number)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "Number"}, {"name": "min", "type": "Number"}], "return_type": "boolean", "signature": "public boolean minValue(final Number value, final Number min)", "original_string": "    public boolean minValue(final Number value, final Number min) {\n        if (isAllowFractions()) {\n            return value.doubleValue() >= min.doubleValue();\n        }\n        return value.longValue() >= min.longValue();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[Object]parse(String,String,Locale)", "name": "parse", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Object", "signature": "protected Object parse(String value, final String pattern, final Locale locale)", "original_string": "    protected Object parse(String value, final String pattern, final Locale locale) {\n        value = value == null ? null : value.trim();\n        final String value1 = value;\n        if (GenericValidator.isBlankOrNull(value1)) {\n            return null;\n        }\n        final Format formatter = getFormat(pattern, locale);\n        return parse(value, formatter);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Parse the value using the specified pattern.</p>\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed value if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected abstract Object processParsedValue(Object value, Format formatter)", "original_string": "    @Override\n    protected abstract Object processParsedValue(Object value, Format formatter);", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java", "class_name": "AbstractNumberValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractNumberValidator.java.AbstractNumberValidator", "attributes": {"modifiers": "@Override\n    protected abstract", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Process the parsed value, performing any further validation\n   and type conversion required.</p>\n\n@param value The parsed object created.\n@param formatter The Format used to parse the value with.\n@return The parsed value converted to the appropriate type\n        if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[DateValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "DateValidator", "signature": "public static DateValidator getInstance()", "original_string": "    public static DateValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "DateValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the DateValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[]DateValidator()", "name": "DateValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public DateValidator()", "original_string": "    public DateValidator() {\n        this(true, DateFormat.SHORT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance with <em>short</em>\ndate style.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[]DateValidator(boolean,int)", "name": "DateValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "dateStyle", "type": "int"}], "return_type": "", "signature": "public DateValidator(final boolean strict, final int dateStyle)", "original_string": "    public DateValidator(final boolean strict, final int dateStyle) {\n        super(strict, dateStyle, -1);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with the specified <em>strict</em>\nand <em>date style</em> parameters.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param dateStyle the date style to use for Locale validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareDates(Date,Date,TimeZone)", "name": "compareDates", "arg_nums": 3, "params": [{"name": "value", "type": "Date"}, {"name": "compare", "type": "Date"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "int", "signature": "public int compareDates(final Date value, final Date compare, final TimeZone timeZone)", "original_string": "    public int compareDates(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.DATE);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Dates (day, month and year - not time).</p>\n\n@param value The {@link Calendar} value to check.\n@param compare The {@link Calendar} to compare the value to.\n@param timeZone The Time Zone used to compare the dates, system default if null.\n@return Zero if the dates are equal, -1 if first\ndate is less than the seconds and +1 if the first\ndate is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareMonths(Date,Date,TimeZone)", "name": "compareMonths", "arg_nums": 3, "params": [{"name": "value", "type": "Date"}, {"name": "compare", "type": "Date"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "int", "signature": "public int compareMonths(final Date value, final Date compare, final TimeZone timeZone)", "original_string": "    public int compareMonths(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.MONTH);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Months (month and year).</p>\n\n@param value The {@code Date} value to check.\n@param compare The {@code Date} to compare the value to.\n@param timeZone The Time Zone used to compare the dates, system default if null.\n@return Zero if the months are equal, -1 if first\nparameter's month is less than the seconds and +1 if the first\nparameter's month is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareQuarters(Date,Date,TimeZone)", "name": "compareQuarters", "arg_nums": 3, "params": [{"name": "value", "type": "Date"}, {"name": "compare", "type": "Date"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "int", "signature": "public int compareQuarters(final Date value, final Date compare, final TimeZone timeZone)", "original_string": "    public int compareQuarters(final Date value, final Date compare, final TimeZone timeZone) {\n        return compareQuarters(value, compare, timeZone, 1);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Quarters (quarter and year).</p>\n\n@param value The {@code Date} value to check.\n@param compare The {@code Date} to compare the value to.\n@param timeZone The Time Zone used to compare the dates, system default if null.\n@return Zero if the months are equal, -1 if first\nparameter's quarter is less than the seconds and +1 if the first\nparameter's quarter is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareQuarters(Date,Date,TimeZone,int)", "name": "compareQuarters", "arg_nums": 4, "params": [{"name": "value", "type": "Date"}, {"name": "compare", "type": "Date"}, {"name": "timeZone", "type": "TimeZone"}, {"name": "monthOfFirstQuarter", "type": "int"}], "return_type": "int", "signature": "public int compareQuarters(final Date value, final Date compare, final TimeZone timeZone, final int monthOfFirstQuarter)", "original_string": "    public int compareQuarters(final Date value, final Date compare, final TimeZone timeZone, final int monthOfFirstQuarter) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return super.compareQuarters(calendarValue, calendarCompare, monthOfFirstQuarter);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Quarters (quarter and year).</p>\n\n@param value The {@code Date} value to check.\n@param compare The {@code Date} to compare the value to.\n@param timeZone The Time Zone used to compare the dates, system default if null.\n@param monthOfFirstQuarter The  month that the first quarter starts.\n@return Zero if the quarters are equal, -1 if first\nparameter's quarter is less than the seconds and +1 if the first\nparameter's quarter is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareWeeks(Date,Date,TimeZone)", "name": "compareWeeks", "arg_nums": 3, "params": [{"name": "value", "type": "Date"}, {"name": "compare", "type": "Date"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "int", "signature": "public int compareWeeks(final Date value, final Date compare, final TimeZone timeZone)", "original_string": "    public int compareWeeks(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.WEEK_OF_YEAR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Weeks (week and year).</p>\n\n@param value The {@code Date} value to check.\n@param compare The {@code Date} to compare the value to.\n@param timeZone The Time Zone used to compare the dates, system default if null.\n@return Zero if the weeks are equal, -1 if first\nparameter's week is less than the seconds and +1 if the first\nparameter's week is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[int]compareYears(Date,Date,TimeZone)", "name": "compareYears", "arg_nums": 3, "params": [{"name": "value", "type": "Date"}, {"name": "compare", "type": "Date"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "int", "signature": "public int compareYears(final Date value, final Date compare, final TimeZone timeZone)", "original_string": "    public int compareYears(final Date value, final Date compare, final TimeZone timeZone) {\n        final Calendar calendarValue = getCalendar(value, timeZone);\n        final Calendar calendarCompare = getCalendar(compare, timeZone);\n        return compare(calendarValue, calendarCompare, Calendar.YEAR);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compare Years.</p>\n\n@param value The {@code Date} value to check.\n@param compare The {@code Date} to compare the value to.\n@param timeZone The Time Zone used to compare the dates, system default if null.\n@return Zero if the years are equal, -1 if first\nparameter's year is less than the seconds and +1 if the first\nparameter's year is greater than.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Calendar]getCalendar(Date,TimeZone)", "name": "getCalendar", "arg_nums": 2, "params": [{"name": "value", "type": "Date"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Calendar", "signature": "private Calendar getCalendar(final Date value, final TimeZone timeZone)", "original_string": "    private Calendar getCalendar(final Date value, final TimeZone timeZone) {\n        Calendar calendar;\n        if (timeZone != null) {\n            calendar = Calendar.getInstance(timeZone);\n        } else {\n            calendar = Calendar.getInstance();\n        }\n        calendar.setTime(value);\n        return calendar;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "Calendar", "classes": []}, "docstring": "\n<p>Convert a {@code Date} to a {@link Calendar}.</p>\n\n@param value The date value to be converted.\n@return The converted {@link Calendar}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return value;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Returns the parsed {@code Date} unchanged.</p>\n\n@param value The parsed {@code Date} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed value converted to a {@link Calendar}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Date", "signature": "public Date validate(final String value)", "original_string": "    public Date validate(final String value) {\n        return (Date) parse(value, (String) null, (Locale) null, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the default\n   {@link Locale} and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code Date} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Date", "signature": "public Date validate(final String value, final Locale locale)", "original_string": "    public Date validate(final String value, final Locale locale) {\n        return (Date) parse(value, (String) null, locale, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the specified\n   {@link Locale} and default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Date} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,Locale,TimeZone)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Date", "signature": "public Date validate(final String value, final Locale locale, final TimeZone timeZone)", "original_string": "    public Date validate(final String value, final Locale locale, final TimeZone timeZone) {\n        return (Date) parse(value, (String) null, locale, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the specified\n   {@link Locale} and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the date format, system default if null.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@code Date} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Date", "signature": "public Date validate(final String value, final String pattern)", "original_string": "    public Date validate(final String value, final String pattern) {\n        return (Date) parse(value, pattern, (Locale) null, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the specified\n   <em>pattern</em> and default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@return The parsed {@code Date} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Date", "signature": "public Date validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Date validate(final String value, final String pattern, final Locale locale) {\n        return (Date) parse(value, pattern, locale, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the specified pattern\n   and {@link Locale} and the default {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Date} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String,Locale,TimeZone)", "name": "validate", "arg_nums": 4, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Date", "signature": "public Date validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone)", "original_string": "    public Date validate(final String value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        return (Date) parse(value, pattern, locale, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the specified\n   pattern, and {@link Locale} and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@code Date} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,String,TimeZone)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Date", "signature": "public Date validate(final String value, final String pattern, final TimeZone timeZone)", "original_string": "    public Date validate(final String value, final String pattern, final TimeZone timeZone) {\n        return (Date) parse(value, pattern, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the specified\n   <em>pattern</em> and {@code TimeZone}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@code Date} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator.[Date]validate(String,TimeZone)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Date", "signature": "public Date validate(final String value, final TimeZone timeZone)", "original_string": "    public Date validate(final String value, final TimeZone timeZone) {\n        return (Date) parse(value, (String) null, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DateValidator.java", "class_name": "DateValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DateValidator.java.DateValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Date", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Date} using the specified\n   {@code TimeZone} and default {@link Locale}.\n\n@param value The value validation is being performed on.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed {@code Date} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[int]toCompileFlags(boolean)", "name": "toCompileFlags", "arg_nums": 1, "params": [{"name": "caseSensitive", "type": "boolean"}], "return_type": "int", "signature": "private static int toCompileFlags(final boolean caseSensitive)", "original_string": "    private static int toCompileFlags(final boolean caseSensitive) {\n        return caseSensitive ? CASE_SENSITIVE : Pattern.CASE_INSENSITIVE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(int)", "name": "RegexValidator", "arg_nums": 1, "params": [{"name": "flags", "type": "int"}], "return_type": "", "signature": "private RegexValidator(final int flags, final String... regexs)", "original_string": "    private RegexValidator(final int flags, final String... regexs) {\n        if (regexs == null || regexs.length == 0) {\n            throw new IllegalArgumentException(\"Regular expressions are missing\");\n        }\n        patterns = new Pattern[regexs.length];\n        for (int i = 0; i < regexs.length; i++) {\n            final String regex = regexs[i];\n            if (regex == null || regex.isEmpty()) {\n                throw new IllegalArgumentException(\"Regular expression[\" + i + \"] is missing\");\n            }\n            patterns[i] = Pattern.compile(regex, flags);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance that matches any one of the set of regular expressions with the specified case sensitivity.\n\n@param regexs The set of regular expressions this validator will validate against\n@param flags  See {@link Pattern#compile(String, int)}. sensitive</i>, otherwise matching is <em>case in-sensitive</em>\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(List<String>)", "name": "RegexValidator", "arg_nums": 1, "params": [{"name": "regexs", "type": "List<String>"}], "return_type": "", "signature": "RegexValidator(final List<String> regexs)", "original_string": "    RegexValidator(final List<String> regexs) {\n        this(CASE_SENSITIVE, regexs.toArray(new String[] {}));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new <em>case sensitive</em> instance that matches any one in the list of regular expressions.\n\n@param regexs The set of regular expressions this validator will validate against\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(String)", "name": "RegexValidator", "arg_nums": 1, "params": [{"name": "regex", "type": "String"}], "return_type": "", "signature": "public RegexValidator(final String regex)", "original_string": "    public RegexValidator(final String regex) {\n        this(CASE_SENSITIVE, regex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new <em>case sensitive</em> instance for a single regular expression.\n\n@param regex The regular expression this validator will validate against\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator()", "name": "RegexValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public RegexValidator(final String... regexs)", "original_string": "    public RegexValidator(final String... regexs) {\n        this(CASE_SENSITIVE, regexs);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new <em>case sensitive</em> instance that matches any one in the array of regular expressions.\n\n@param regexs The set of regular expressions this validator will validate against\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(String,boolean)", "name": "RegexValidator", "arg_nums": 2, "params": [{"name": "regex", "type": "String"}, {"name": "caseSensitive", "type": "boolean"}], "return_type": "", "signature": "public RegexValidator(final String regex, final boolean caseSensitive)", "original_string": "    public RegexValidator(final String regex, final boolean caseSensitive) {\n        this(toCompileFlags(caseSensitive), regex);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance for a single regular expression with the specified case sensitivity.\n\n@param regex         The regular expression this validator will validate against\n@param caseSensitive when {@code true} matching is <i>case sensitive</i>, otherwise matching is <em>case in-sensitive</em>\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[]RegexValidator(String[],boolean)", "name": "RegexValidator", "arg_nums": 2, "params": [{"name": "regexs", "type": "String[]"}, {"name": "caseSensitive", "type": "boolean"}], "return_type": "", "signature": "public RegexValidator(final String[] regexs, final boolean caseSensitive)", "original_string": "    public RegexValidator(final String[] regexs, final boolean caseSensitive) {\n        this(toCompileFlags(caseSensitive), regexs);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance that matches any one of the set of regular expressions with the specified case sensitivity.\n\n@param regexs        The set of regular expressions this validator will validate against\n@param caseSensitive when {@code true} matching is <i>case sensitive</i>, otherwise matching is <em>case in-sensitive</em>\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[Pattern[]]getPatterns()", "name": "getPatterns", "arg_nums": 0, "params": [], "return_type": "Pattern[]", "signature": "public Pattern[] getPatterns()", "original_string": "    public Pattern[] getPatterns() {\n        return patterns.clone();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Pattern[]", "classes": []}, "docstring": "\nGets a copy of the Patterns.\n\n@return a copy of the Patterns.\n@since 1.8\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String value)", "original_string": "    public boolean isValid(final String value) {\n        if (value == null) {\n            return false;\n        }\n        for (final Pattern pattern : patterns) {\n            if (pattern.matcher(value).matches()) {\n                return true;\n            }\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidates a value against the set of regular expressions.\n\n@param value The value to validate.\n@return {@code true} if the value is valid otherwise {@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[String[]]match(String)", "name": "match", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "String[]", "signature": "public String[] match(final String value)", "original_string": "    public String[] match(final String value) {\n        if (value == null) {\n            return null;\n        }\n        for (final Pattern pattern : patterns) {\n            final Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                final int count = matcher.groupCount();\n                final String[] groups = new String[count];\n                for (int j = 0; j < count; j++) {\n                    groups[j] = matcher.group(j + 1);\n                }\n                return groups;\n            }\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String[]", "classes": []}, "docstring": "\nValidates a value against the set of regular expressions returning the array of matched groups.\n\n@param value The value to validate.\n@return String array of the <em>groups</em> matched if valid or {@code null} if invalid\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder buffer = new StringBuilder();\n        buffer.append(\"RegexValidator{\");\n        for (int i = 0; i < patterns.length; i++) {\n            if (i > 0) {\n                buffer.append(\",\");\n            }\n            buffer.append(patterns[i].pattern());\n        }\n        buffer.append(\"}\");\n        return buffer.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nProvides a String representation of this validator.\n\n@return A String representation of this validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator.[String]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "String", "signature": "public String validate(final String value)", "original_string": "    public String validate(final String value) {\n        if (value == null) {\n            return null;\n        }\n        for (final Pattern pattern : patterns) {\n            final Matcher matcher = pattern.matcher(value);\n            if (matcher.matches()) {\n                final int count = matcher.groupCount();\n                if (count == 1) {\n                    return matcher.group(1);\n                }\n                final StringBuilder buffer = new StringBuilder();\n                for (int j = 0; j < count; j++) {\n                    final String component = matcher.group(j + 1);\n                    if (component != null) {\n                        buffer.append(component);\n                    }\n                }\n                return buffer.toString();\n            }\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java", "class_name": "RegexValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/RegexValidator.java.RegexValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nValidates a value against the set of regular expressions returning a String value of the aggregated groups.\n\n@param value The value to validate.\n@return Aggregated String value comprised of the <em>groups</em> matched if valid or {@code null} if invalid\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(RegexValidator,CheckDigit)", "name": "CodeValidator", "arg_nums": 2, "params": [{"name": "regexValidator", "type": "RegexValidator"}, {"name": "checkdigit", "type": "CheckDigit"}], "return_type": "", "signature": "public CodeValidator(final RegexValidator regexValidator, final CheckDigit checkdigit)", "original_string": "    public CodeValidator(final RegexValidator regexValidator, final CheckDigit checkdigit) {\n        this(regexValidator, -1, -1, checkdigit);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a code validator with a specified regular expression,\nvalidator and {@link CheckDigit} validation.\n\n@param regexValidator The format regular expression validator\n@param checkdigit The check digit validation routine.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(RegexValidator,int,CheckDigit)", "name": "CodeValidator", "arg_nums": 3, "params": [{"name": "regexValidator", "type": "RegexValidator"}, {"name": "length", "type": "int"}, {"name": "checkdigit", "type": "CheckDigit"}], "return_type": "", "signature": "public CodeValidator(final RegexValidator regexValidator, final int length, final CheckDigit checkdigit)", "original_string": "    public CodeValidator(final RegexValidator regexValidator, final int length, final CheckDigit checkdigit) {\n        this(regexValidator, length, length, checkdigit);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a code validator with a specified regular expression,\nvalidator, length and {@link CheckDigit} validation.\n\n@param regexValidator The format regular expression validator\n@param length The length of the code\n (sets the mimimum/maximum to the same value)\n@param checkdigit The check digit validation routine\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(RegexValidator,int,int,CheckDigit)", "name": "CodeValidator", "arg_nums": 4, "params": [{"name": "regexValidator", "type": "RegexValidator"}, {"name": "minLength", "type": "int"}, {"name": "maxLength", "type": "int"}, {"name": "checkdigit", "type": "CheckDigit"}], "return_type": "", "signature": "public CodeValidator(final RegexValidator regexValidator, final int minLength, final int maxLength,\n            final CheckDigit checkdigit)", "original_string": "    public CodeValidator(final RegexValidator regexValidator, final int minLength, final int maxLength,\n            final CheckDigit checkdigit) {\n        this.regexValidator = regexValidator;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        this.checkdigit = checkdigit;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a code validator with a specified regular expression\nvalidator, minimum/maximum length and {@link CheckDigit} validation.\n\n@param regexValidator The format regular expression validator\n@param minLength The minimum length of the code\n@param maxLength The maximum length of the code\n@param checkdigit The check digit validation routine\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(String,CheckDigit)", "name": "CodeValidator", "arg_nums": 2, "params": [{"name": "regex", "type": "String"}, {"name": "checkdigit", "type": "CheckDigit"}], "return_type": "", "signature": "public CodeValidator(final String regex, final CheckDigit checkdigit)", "original_string": "    public CodeValidator(final String regex, final CheckDigit checkdigit) {\n        this(regex, -1, -1, checkdigit);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a code validator with a specified regular\nexpression and {@link CheckDigit}.\nThe RegexValidator validator is created to be case-sensitive\n\n@param regex The format regular expression\n@param checkdigit The check digit validation routine\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(String,int,CheckDigit)", "name": "CodeValidator", "arg_nums": 3, "params": [{"name": "regex", "type": "String"}, {"name": "length", "type": "int"}, {"name": "checkdigit", "type": "CheckDigit"}], "return_type": "", "signature": "public CodeValidator(final String regex, final int length, final CheckDigit checkdigit)", "original_string": "    public CodeValidator(final String regex, final int length, final CheckDigit checkdigit) {\n        this(regex, length, length, checkdigit);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a code validator with a specified regular\nexpression, length and {@link CheckDigit}.\nThe RegexValidator validator is created to be case-sensitive\n\n@param regex The format regular expression.\n@param length The length of the code\n (sets the mimimum/maximum to the same)\n@param checkdigit The check digit validation routine\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[]CodeValidator(String,int,int,CheckDigit)", "name": "CodeValidator", "arg_nums": 4, "params": [{"name": "regex", "type": "String"}, {"name": "minLength", "type": "int"}, {"name": "maxLength", "type": "int"}, {"name": "checkdigit", "type": "CheckDigit"}], "return_type": "", "signature": "public CodeValidator(final String regex, final int minLength, final int maxLength,\n            final CheckDigit checkdigit)", "original_string": "    public CodeValidator(final String regex, final int minLength, final int maxLength,\n            final CheckDigit checkdigit) {\n        this.regexValidator = GenericValidator.isBlankOrNull(regex) ? null : new RegexValidator(regex);\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        this.checkdigit = checkdigit;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a code validator with a specified regular\nexpression, minimum/maximum length and {@link CheckDigit} validation.\nThe RegexValidator validator is created to be case-sensitive\n\n@param regex The regular expression\n@param minLength The minimum length of the code\n@param maxLength The maximum length of the code\n@param checkdigit The check digit validation routine\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[CheckDigit]getCheckDigit()", "name": "getCheckDigit", "arg_nums": 0, "params": [], "return_type": "CheckDigit", "signature": "public CheckDigit getCheckDigit()", "original_string": "    public CheckDigit getCheckDigit() {\n        return checkdigit;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "CheckDigit", "classes": []}, "docstring": "\nGets the check digit validation routine.\n<p>\n<b>N.B.</b> Optional, if not set no Check Digit\nvalidation will be performed on the code.\n\n@return The check digit validation routine\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[int]getMaxLength()", "name": "getMaxLength", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getMaxLength()", "original_string": "    public int getMaxLength() {\n        return maxLength;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the maximum length of the code.\n<p>\n<b>N.B.</b> Optional, if less than zero the\nmaximum length will not be checked.\n\n@return The maximum length of the code or\n{@code -1} if the code has no maximum length\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[int]getMinLength()", "name": "getMinLength", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getMinLength()", "original_string": "    public int getMinLength() {\n        return minLength;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the minimum length of the code.\n<p>\n<b>N.B.</b> Optional, if less than zero the\nminimum length will not be checked.\n\n@return The minimum length of the code or\n{@code -1} if the code has no minimum length\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[RegexValidator]getRegexValidator()", "name": "getRegexValidator", "arg_nums": 0, "params": [], "return_type": "RegexValidator", "signature": "public RegexValidator getRegexValidator()", "original_string": "    public RegexValidator getRegexValidator() {\n        return regexValidator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "RegexValidator", "classes": []}, "docstring": "\nGets the <em>regular expression</em> validator.\n<p>\n<b>N.B.</b> Optional, if not set no regular\nexpression validation will be performed on the code.\n\n@return The regular expression validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "input", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String input)", "original_string": "    public boolean isValid(final String input) {\n        return validate(input) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate the code returning either {@code true}\nor {@code false}.\n<p>\nThis calls {@link #validate(String)} and returns false\nif the return value is null, true otherwise.\n<p>\nNote that {@link #validate(String)} trims the input\nand if there is a {@link RegexValidator} it may also\nchange the input as part of the validation.\n\n@param input The code to validate\n@return {@code true} if valid, otherwise\n{@code false}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator.[Object]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "input", "type": "String"}], "return_type": "Object", "signature": "public Object validate(final String input)", "original_string": "    public Object validate(final String input) {\n        if (input == null) {\n            return null;\n        }\n        String code = input.trim();\n        if (code.isEmpty()) {\n            return null;\n        }\n        // validate/reformat using regular expression\n        if (regexValidator != null) {\n            code = regexValidator.validate(code);\n            if (code == null) {\n                return null;\n            }\n        }\n        // check the length (must be done after validate as that can change the code)\n        if (minLength >= 0 && code.length() < minLength ||\n            maxLength >= 0 && code.length() > maxLength) {\n            return null;\n        }\n        // validate the check digit\n        if (checkdigit != null && !checkdigit.isValid(code)) {\n            return null;\n        }\n        return code;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java", "class_name": "CodeValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/CodeValidator.java.CodeValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nValidate the code returning either the valid code or\n{@code null} if invalid.\n<p>\nNote that this method trims the input\nand if there is a {@link RegexValidator} it may also\nchange the input as part of the validation.\n\n@param input The code to validate\n@return The code if valid, otherwise {@code null}\nif invalid\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[LongValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "LongValidator", "signature": "public static LongValidator getInstance()", "original_string": "    public static LongValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "LongValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the LongValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[]LongValidator()", "name": "LongValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public LongValidator()", "original_string": "    public LongValidator() {\n        this(true, STANDARD_FORMAT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[]LongValidator(boolean,int)", "name": "LongValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}], "return_type": "", "signature": "public LongValidator(final boolean strict, final int formatType)", "original_string": "    public LongValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]isInRange(long,long,long)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "long"}, {"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public boolean isInRange(final long value, final long min, final long max)", "original_string": "    public boolean isInRange(final long value, final long min, final long max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]isInRange(Long,long,long)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "Long"}, {"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public boolean isInRange(final Long value, final long min, final long max)", "original_string": "    public boolean isInRange(final Long value, final long min, final long max) {\n        return isInRange(value.longValue(), min, max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]maxValue(long,long)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public boolean maxValue(final long value, final long max)", "original_string": "    public boolean maxValue(final long value, final long max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]maxValue(Long,long)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "Long"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public boolean maxValue(final Long value, final long max)", "original_string": "    public boolean maxValue(final Long value, final long max) {\n        return maxValue(value.longValue(), max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]minValue(long,long)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "long"}, {"name": "min", "type": "long"}], "return_type": "boolean", "signature": "public boolean minValue(final long value, final long min)", "original_string": "    public boolean minValue(final long value, final long min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[boolean]minValue(Long,long)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "Long"}, {"name": "min", "type": "long"}], "return_type": "boolean", "signature": "public boolean minValue(final Long value, final long min)", "original_string": "    public boolean minValue(final Long value, final long min) {\n        return minValue(value.longValue(), min);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        // Parsed value will be Long if it fits in a long and is not fractional\n        if (value instanceof Long) {\n            return value;\n        }\n        return null;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nConvert the parsed value to a {@code Long}.\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed {@code Number} converted to a\n        {@code Long}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Long", "signature": "public Long validate(final String value)", "original_string": "    public Long validate(final String value) {\n        return (Long) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Long} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code Long} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Long", "signature": "public Long validate(final String value, final Locale locale)", "original_string": "    public Long validate(final String value, final Locale locale) {\n        return (Long) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Long} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code Long} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Long", "signature": "public Long validate(final String value, final String pattern)", "original_string": "    public Long validate(final String value, final String pattern) {\n        return (Long) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Long} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@code Long} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator.[Long]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Long", "signature": "public Long validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Long validate(final String value, final String pattern, final Locale locale) {\n        return (Long) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/LongValidator.java", "class_name": "LongValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/LongValidator.java.LongValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Long", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Long} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Long} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[IntegerValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "IntegerValidator", "signature": "public static IntegerValidator getInstance()", "original_string": "    public static IntegerValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "IntegerValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the IntegerValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[]IntegerValidator()", "name": "IntegerValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public IntegerValidator()", "original_string": "    public IntegerValidator() {\n        this(true, STANDARD_FORMAT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[]IntegerValidator(boolean,int)", "name": "IntegerValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}], "return_type": "", "signature": "public IntegerValidator(final boolean strict, final int formatType)", "original_string": "    public IntegerValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]isInRange(int,int,int)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "int"}, {"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "boolean", "signature": "public boolean isInRange(final int value, final int min, final int max)", "original_string": "    public boolean isInRange(final int value, final int min, final int max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]isInRange(Integer,int,int)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "Integer"}, {"name": "min", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "boolean", "signature": "public boolean isInRange(final Integer value, final int min, final int max)", "original_string": "    public boolean isInRange(final Integer value, final int min, final int max) {\n        return isInRange(value.intValue(), min, max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]maxValue(int,int)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "int"}, {"name": "max", "type": "int"}], "return_type": "boolean", "signature": "public boolean maxValue(final int value, final int max)", "original_string": "    public boolean maxValue(final int value, final int max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]maxValue(Integer,int)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "Integer"}, {"name": "max", "type": "int"}], "return_type": "boolean", "signature": "public boolean maxValue(final Integer value, final int max)", "original_string": "    public boolean maxValue(final Integer value, final int max) {\n        return maxValue(value.intValue(), max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]minValue(int,int)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "int"}, {"name": "min", "type": "int"}], "return_type": "boolean", "signature": "public boolean minValue(final int value, final int min)", "original_string": "    public boolean minValue(final int value, final int min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[boolean]minValue(Integer,int)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "Integer"}, {"name": "min", "type": "int"}], "return_type": "boolean", "signature": "public boolean minValue(final Integer value, final int min)", "original_string": "    public boolean minValue(final Integer value, final int min) {\n        return minValue(value.intValue(), min);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        // Parsed value will be Long if it fits in a long and is not fractional\n        if (value instanceof Long) {\n            final long longValue = ((Long) value).longValue();\n            if (longValue >= Integer.MIN_VALUE &&\n                longValue <= Integer.MAX_VALUE) {\n                return Integer.valueOf((int) longValue);\n            }\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Perform further validation and convert the {@code Number} to\nan {@code Integer}.</p>\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed {@code Number} converted to an\n  {@code Integer} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Integer", "signature": "public Integer validate(final String value)", "original_string": "    public Integer validate(final String value) {\n        return (Integer) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\n<p>Validate/convert an {@code Integer} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code Integer} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Integer", "signature": "public Integer validate(final String value, final Locale locale)", "original_string": "    public Integer validate(final String value, final Locale locale) {\n        return (Integer) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\n<p>Validate/convert an {@code Integer} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code Integer} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Integer", "signature": "public Integer validate(final String value, final String pattern)", "original_string": "    public Integer validate(final String value, final String pattern) {\n        return (Integer) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\n<p>Validate/convert an {@code Integer} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@code Integer} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator.[Integer]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Integer", "signature": "public Integer validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Integer validate(final String value, final String pattern, final Locale locale) {\n        return (Integer) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java", "class_name": "IntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/IntegerValidator.java.IntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Integer", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Integer} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Integer} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[InetAddressValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "InetAddressValidator", "signature": "public static InetAddressValidator getInstance()", "original_string": "    public static InetAddressValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java", "class_name": "InetAddressValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "InetAddressValidator", "classes": []}, "docstring": "\nReturns the singleton instance of this validator.\n\n@return the singleton instance of this validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "inetAddress", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String inetAddress)", "original_string": "    public boolean isValid(final String inetAddress) {\n        return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java", "class_name": "InetAddressValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nChecks if the specified string is a valid IPv4 or IPv6 address.\n\n@param inetAddress the string to validate\n@return true if the string validates as an IP address\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[boolean]isValidInet4Address(String)", "name": "isValidInet4Address", "arg_nums": 1, "params": [{"name": "inet4Address", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidInet4Address(final String inet4Address)", "original_string": "    public boolean isValidInet4Address(final String inet4Address) {\n        // verify that address conforms to generic IPv4 format\n        final String[] groups = IPV4_VALIDATOR.match(inet4Address);\n        if (groups == null) {\n            return false;\n        }\n        // verify that address subgroups are legal\n        for (final String ipSegment : groups) {\n            if (GenericValidator.isBlankOrNull(ipSegment)) {\n                return false;\n            }\n            int iIpSegment = 0;\n            try {\n                iIpSegment = Integer.parseInt(ipSegment);\n            } catch (final NumberFormatException e) {\n                return false;\n            }\n            if (iIpSegment > IPV4_MAX_OCTET_VALUE) {\n                return false;\n            }\n            if (ipSegment.length() > 1 && ipSegment.startsWith(\"0\")) {\n                return false;\n            }\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java", "class_name": "InetAddressValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidates an IPv4 address. Returns true if valid.\n\n@param inet4Address the IPv4 address to validate\n@return true if the argument contains a valid IPv4 address\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator.[boolean]isValidInet6Address(String)", "name": "isValidInet6Address", "arg_nums": 1, "params": [{"name": "inet6Address", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValidInet6Address(String inet6Address)", "original_string": "    public boolean isValidInet6Address(String inet6Address) {\n        String[] parts;\n        // remove prefix size. This will appear after the zone id (if any)\n        parts = inet6Address.split(\"/\", -1);\n        if (parts.length > 2) {\n            return false; // can only have one prefix specifier\n        }\n        if (parts.length == 2) {\n            if (!DIGITS_PATTERN.matcher(parts[1]).matches()) {\n                return false; // not a valid number\n            }\n            final int bits = Integer.parseInt(parts[1]); // cannot fail because of RE check\n            if (bits < 0 || bits > MAX_BYTE) {\n                return false; // out of range\n            }\n        }\n        // remove zone-id\n        parts = parts[0].split(\"%\", -1);\n        if (parts.length > 2) {\n            return false;\n        }\n        // The id syntax is implementation independent, but it presumably cannot allow:\n        // whitespace, '/' or '%'\n        if (parts.length == 2 && !ID_CHECK_PATTERN.matcher(parts[1]).matches()) {\n            return false; // invalid id\n        }\n        inet6Address = parts[0];\n        final boolean containsCompressedZeroes = inet6Address.contains(\"::\");\n        if (containsCompressedZeroes && inet6Address.indexOf(\"::\") != inet6Address.lastIndexOf(\"::\")) {\n            return false;\n        }\n        final boolean startsWithCompressed = inet6Address.startsWith(\"::\");\n        final boolean endsWithCompressed = inet6Address.endsWith(\"::\");\n        final boolean endsWithSep = inet6Address.endsWith(\":\");\n        if (inet6Address.startsWith(\":\") && !startsWithCompressed || endsWithSep && !endsWithCompressed) {\n            return false;\n        }\n        String[] octets = inet6Address.split(\":\");\n        if (containsCompressedZeroes) {\n            final List<String> octetList = new ArrayList<>(Arrays.asList(octets));\n            if (endsWithCompressed) {\n                // String.split() drops ending empty segments\n                octetList.add(\"\");\n            } else if (startsWithCompressed && !octetList.isEmpty()) {\n                octetList.remove(0);\n            }\n            octets = octetList.toArray(new String[0]);\n        }\n        if (octets.length > IPV6_MAX_HEX_GROUPS) {\n            return false;\n        }\n        int validOctets = 0;\n        int emptyOctets = 0; // consecutive empty chunks\n        for (int index = 0; index < octets.length; index++) {\n            final String octet = octets[index];\n            if (GenericValidator.isBlankOrNull(octet)) {\n                emptyOctets++;\n                if (emptyOctets > 1) {\n                    return false;\n                }\n            } else {\n                emptyOctets = 0;\n                // Is last chunk an IPv4 address?\n                if (index == octets.length - 1 && octet.contains(\".\")) {\n                    if (!isValidInet4Address(octet)) {\n                        return false;\n                    }\n                    validOctets += 2;\n                    continue;\n                }\n                if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {\n                    return false;\n                }\n                int octetInt = 0;\n                try {\n                    octetInt = Integer.parseInt(octet, BASE_16);\n                } catch (final NumberFormatException e) {\n                    return false;\n                }\n                if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {\n                    return false;\n                }\n            }\n            validOctets++;\n        }\n        if (validOctets > IPV6_MAX_HEX_GROUPS || validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes) {\n            return false;\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java", "class_name": "InetAddressValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/InetAddressValidator.java.InetAddressValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidates an IPv6 address. Returns true if valid.\n\n@param inet6Address the IPv6 address to validate\n@return true if the argument contains a valid IPv6 address\n\n@since 1.4.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[BigDecimalValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "BigDecimalValidator", "signature": "public static BigDecimalValidator getInstance()", "original_string": "    public static BigDecimalValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java", "class_name": "PercentValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "BigDecimalValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the PercentValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[]PercentValidator()", "name": "PercentValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public PercentValidator()", "original_string": "    public PercentValidator() {\n        this(true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java", "class_name": "PercentValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[]PercentValidator(boolean)", "name": "PercentValidator", "arg_nums": 1, "params": [{"name": "strict", "type": "boolean"}], "return_type": "", "signature": "public PercentValidator(final boolean strict)", "original_string": "    public PercentValidator(final boolean strict) {\n        super(strict, PERCENT_FORMAT, true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java", "class_name": "PercentValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with the specified strict setting.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator.[Object]parse(String,Format)", "name": "parse", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object parse(final String value, final Format formatter)", "original_string": "    @Override\n    protected Object parse(final String value, final Format formatter) {\n\n        // Initial parse of the value\n        BigDecimal parsedValue = (BigDecimal) super.parse(value, formatter);\n        if (parsedValue != null || !(formatter instanceof DecimalFormat)) {\n            return parsedValue;\n        }\n\n        // Re-parse using a pattern without the percent symbol\n        final DecimalFormat decimalFormat = (DecimalFormat) formatter;\n        final String pattern = decimalFormat.toPattern();\n        if (pattern.indexOf(PERCENT_SYMBOL) >= 0) {\n            final StringBuilder buffer = new StringBuilder(pattern.length());\n            for (int i = 0; i < pattern.length(); i++) {\n                if (pattern.charAt(i) != PERCENT_SYMBOL) {\n                    buffer.append(pattern.charAt(i));\n                }\n            }\n            decimalFormat.applyPattern(buffer.toString());\n            parsedValue = (BigDecimal) super.parse(value, decimalFormat);\n\n            // If parsed OK, divide by 100 to get percent\n            if (parsedValue != null) {\n                parsedValue = parsedValue.multiply(POINT_ZERO_ONE);\n            }\n\n        }\n        return parsedValue;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java", "class_name": "PercentValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/PercentValidator.java.PercentValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Parse the value with the specified {@code Format}.</p>\n\n<p>This implementation is lenient whether the currency symbol\n   is present or not. The default {@code NumberFormat}\n   behavior is for the parsing to \"fail\" if the currency\n   symbol is missing. This method re-parses with a format\n   without the currency symbol if it fails initially.</p>\n\n@param value The value to be parsed.\n@param formatter The Format to parse the value with.\n@return The parsed value if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[UrlValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "UrlValidator", "signature": "public static UrlValidator getInstance()", "original_string": "    public static UrlValidator getInstance() {\n        return DEFAULT_URL_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "UrlValidator", "classes": []}, "docstring": "\nReturns the singleton instance of this class with default schemes and options.\n@return singleton instance with default schemes and options\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isOn(long,long)", "name": "isOn", "arg_nums": 2, "params": [{"name": "flag", "type": "long"}, {"name": "options", "type": "long"}], "return_type": "boolean", "signature": "private static boolean isOn(final long flag, final long options)", "original_string": "    private static boolean isOn(final long flag, final long options) {\n        return (options & flag) > 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "private static", "marker_annotations": [], "non_marker_annotations": ["private", "static"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given flag is on.  If the flag is not a power of 2\n(e.g. 3) this tests whether the combination of flags is on.\n\n@param flag Flag value to check.\n@param options what to check\n\n@return whether the specified flag value is on.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator()", "name": "UrlValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public UrlValidator()", "original_string": "    public UrlValidator() {\n        this(null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance with default properties.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(long)", "name": "UrlValidator", "arg_nums": 1, "params": [{"name": "options", "type": "long"}], "return_type": "", "signature": "public UrlValidator(final long options)", "original_string": "    public UrlValidator(final long options) {\n        this(null, null, options);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance with the given validation options.\n@param options The options should be set using the public constants declared in\nthis class.  To set multiple options you simply add them together.  For example,\nALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(RegexValidator,long)", "name": "UrlValidator", "arg_nums": 2, "params": [{"name": "authorityValidator", "type": "RegexValidator"}, {"name": "options", "type": "long"}], "return_type": "", "signature": "public UrlValidator(final RegexValidator authorityValidator, final long options)", "original_string": "    public UrlValidator(final RegexValidator authorityValidator, final long options) {\n        this(null, authorityValidator, options);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a new instance with the given validation options.\n@param authorityValidator Regular expression validator used to validate the authority part\nThis allows the user to override the standard set of domains.\n@param options Validation options. Set using the public constants of this class.\nTo set multiple options, simply add them together:\n<p>{@code ALLOW_2_SLASHES + NO_FRAGMENTS}</p>\nenables both of those options.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[])", "name": "UrlValidator", "arg_nums": 1, "params": [{"name": "schemes", "type": "String[]"}], "return_type": "", "signature": "public UrlValidator(final String[] schemes)", "original_string": "    public UrlValidator(final String[] schemes) {\n        this(schemes, 0L);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nBehavior of validation is modified by passing in several strings options:\n@param schemes Pass in one or more URL schemes to consider valid, passing in\n       a null will default to \"http,https,ftp\" being valid.\n       If a non-null schemes is specified then all valid schemes must\n       be specified. Setting the ALLOW_ALL_SCHEMES option will\n       ignore the contents of schemes.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[],long)", "name": "UrlValidator", "arg_nums": 2, "params": [{"name": "schemes", "type": "String[]"}, {"name": "options", "type": "long"}], "return_type": "", "signature": "public UrlValidator(final String[] schemes, final long options)", "original_string": "    public UrlValidator(final String[] schemes, final long options) {\n        this(schemes, null, options);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nBehavior of validation is modified by passing in options:\n@param schemes The set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.\n@param options The options should be set using the public constants declared in\nthis class.  To set multiple options you simply add them together.  For example,\nALLOW_2_SLASHES + NO_FRAGMENTS enables both of those options.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[],RegexValidator,long)", "name": "UrlValidator", "arg_nums": 3, "params": [{"name": "schemes", "type": "String[]"}, {"name": "authorityValidator", "type": "RegexValidator"}, {"name": "options", "type": "long"}], "return_type": "", "signature": "public UrlValidator(final String[] schemes, final RegexValidator authorityValidator, final long options)", "original_string": "    public UrlValidator(final String[] schemes, final RegexValidator authorityValidator, final long options) {\n        this(schemes, authorityValidator, options, DomainValidator.getInstance(isOn(ALLOW_LOCAL_URLS, options)));\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCustomizable constructor. Validation behavior is modified by passing in options.\n@param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.\n@param authorityValidator Regular expression validator used to validate the authority part\n@param options Validation options. Set using the public constants of this class.\nTo set multiple options, simply add them together:\n<p>{@code ALLOW_2_SLASHES + NO_FRAGMENTS}</p>\nenables both of those options.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[]UrlValidator(String[],RegexValidator,long,DomainValidator)", "name": "UrlValidator", "arg_nums": 4, "params": [{"name": "schemes", "type": "String[]"}, {"name": "authorityValidator", "type": "RegexValidator"}, {"name": "options", "type": "long"}, {"name": "domainValidator", "type": "DomainValidator"}], "return_type": "", "signature": "public UrlValidator(String[] schemes, final RegexValidator authorityValidator, final long options, final DomainValidator domainValidator)", "original_string": "    public UrlValidator(String[] schemes, final RegexValidator authorityValidator, final long options, final DomainValidator domainValidator) {\n        this.options = options;\n        if (domainValidator == null) {\n            throw new IllegalArgumentException(\"DomainValidator must not be null\");\n        }\n        if (domainValidator.isAllowLocal() != (options & ALLOW_LOCAL_URLS) > 0) {\n            throw new IllegalArgumentException(\"DomainValidator disagrees with ALLOW_LOCAL_URLS setting\");\n        }\n        this.domainValidator = domainValidator;\n\n        if (isOn(ALLOW_ALL_SCHEMES)) {\n            allowedSchemes = Collections.emptySet();\n        } else {\n            if (schemes == null) {\n                schemes = DEFAULT_SCHEMES;\n            }\n            allowedSchemes = new HashSet<>(schemes.length);\n            for (final String scheme : schemes) {\n                allowedSchemes.add(scheme.toLowerCase(Locale.ENGLISH));\n            }\n        }\n\n        this.authorityValidator = authorityValidator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCustomizable constructor. Validation behavior is modified by passing in options.\n@param schemes the set of valid schemes. Ignored if the ALLOW_ALL_SCHEMES option is set.\n@param authorityValidator Regular expression validator used to validate the authority part\n@param options Validation options. Set using the public constants of this class.\nTo set multiple options, simply add them together:\n<p>{@code ALLOW_2_SLASHES + NO_FRAGMENTS}</p>\nenables both of those options.\n@param domainValidator the DomainValidator to use; must agree with ALLOW_LOCAL_URLS setting\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[int]countToken(String,String)", "name": "countToken", "arg_nums": 2, "params": [{"name": "token", "type": "String"}, {"name": "target", "type": "String"}], "return_type": "int", "signature": "protected int countToken(final String token, final String target)", "original_string": "    protected int countToken(final String token, final String target) {\n        int tokenIndex = 0;\n        int count = 0;\n        while (tokenIndex != -1) {\n            tokenIndex = target.indexOf(token, tokenIndex);\n            if (tokenIndex > -1) {\n                tokenIndex++;\n                count++;\n            }\n        }\n        return count;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nReturns the number of times the token appears in the target.\n@param token Token value to be counted.\n@param target Target value to count tokens in.\n@return the number of tokens.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isOff(long)", "name": "isOff", "arg_nums": 1, "params": [{"name": "flag", "type": "long"}], "return_type": "boolean", "signature": "private boolean isOff(final long flag)", "original_string": "    private boolean isOff(final long flag) {\n        return (options & flag) == 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given flag is off.  If the flag is not a power of 2\n(ie. 3) this tests whether the combination of flags is off.\n\n@param flag Flag value to check.\n\n@return whether the specified flag value is off.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isOn(long)", "name": "isOn", "arg_nums": 1, "params": [{"name": "flag", "type": "long"}], "return_type": "boolean", "signature": "private boolean isOn(final long flag)", "original_string": "    private boolean isOn(final long flag) {\n        return (options & flag) > 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given flag is on.  If the flag is not a power of 2\n(ie. 3) this tests whether the combination of flags is on.\n\n@param flag Flag value to check.\n\n@return whether the specified flag value is on.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String value)", "original_string": "    public boolean isValid(final String value) {\n        if (value == null) {\n            return false;\n        }\n\n        URI uri; // ensure value is a valid URI\n        try {\n            uri = new URI(value);\n        } catch (final URISyntaxException e) {\n            return false;\n        }\n        // OK, perform additional validation\n\n        final String scheme = uri.getScheme();\n        if (!isValidScheme(scheme)) {\n            return false;\n        }\n\n        final String authority = uri.getRawAuthority();\n        if (\"file\".equals(scheme) && GenericValidator.isBlankOrNull(authority)) { // Special case - file: allows an empty authority\n            return true; // this is a local file - nothing more to do here\n        }\n        if (\"file\".equals(scheme) && authority != null && authority.contains(\":\")) {\n            return false;\n        }\n        // Validate the authority\n        if (!isValidAuthority(authority)) {\n            return false;\n        }\n\n        if (!isValidPath(uri.getRawPath())) {\n            return false;\n        }\n\n        if (!isValidQuery(uri.getRawQuery())) {\n            return false;\n        }\n\n        if (!isValidFragment(uri.getRawFragment())) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a field has a valid URL address.</p>\n\nNote that the method calls #isValidAuthority()\nwhich checks that the domain is valid.\n\n@param value The value validation is being performed on.  A {@code null}\nvalue is considered invalid.\n@return true if the URL is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidAuthority(String)", "name": "isValidAuthority", "arg_nums": 1, "params": [{"name": "authority", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidAuthority(final String authority)", "original_string": "    protected boolean isValidAuthority(final String authority) {\n        if (authority == null) {\n            return false;\n        }\n\n        // check manual authority validation if specified\n        if (authorityValidator != null && authorityValidator.isValid(authority)) {\n            return true;\n        }\n        // convert to ASCII if possible\n        final String authorityASCII = DomainValidator.unicodeToASCII(authority);\n\n        final Matcher authorityMatcher = AUTHORITY_PATTERN.matcher(authorityASCII);\n        if (!authorityMatcher.matches()) {\n            return false;\n        }\n\n        // We have to process IPV6 separately because that is parsed in a different group\n        final String ipv6 = authorityMatcher.group(PARSE_AUTHORITY_IPV6);\n        if (ipv6 != null) {\n            final InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();\n            if (!inetAddressValidator.isValidInet6Address(ipv6)) {\n                return false;\n            }\n        } else {\n            final String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);\n            // check if authority is hostname or IP address:\n            // try a hostname first since that's much more likely\n            if (!domainValidator.isValid(hostLocation)) {\n                // try an IPv4 address\n                final InetAddressValidator inetAddressValidator = InetAddressValidator.getInstance();\n                if (!inetAddressValidator.isValidInet4Address(hostLocation)) {\n                    // isn't IPv4, so the URL is invalid\n                    return false;\n                }\n            }\n            final String port = authorityMatcher.group(PARSE_AUTHORITY_PORT);\n            if (!GenericValidator.isBlankOrNull(port)) {\n                try {\n                    final int iPort = Integer.parseInt(port);\n                    if (iPort < 0 || iPort > MAX_UNSIGNED_16_BIT_INT) {\n                        return false;\n                    }\n                } catch (final NumberFormatException nfe) {\n                    return false; // this can happen for big numbers\n                }\n            }\n        }\n\n        final String extra = authorityMatcher.group(PARSE_AUTHORITY_EXTRA);\n        if (extra != null && !extra.trim().isEmpty()) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the authority is properly formatted.  An authority is the combination\nof hostname and port.  A {@code null} authority value is considered invalid.\nNote: this implementation validates the domain unless a RegexValidator was provided.\nIf a RegexValidator was supplied and it matches, then the authority is regarded\nas valid with no further checks, otherwise the method checks against the\nAUTHORITY_PATTERN and the DomainValidator (ALLOW_LOCAL_URLS)\n@param authority Authority value to validate, alllows IDN\n@return true if authority (hostname and port) is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidFragment(String)", "name": "isValidFragment", "arg_nums": 1, "params": [{"name": "fragment", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidFragment(final String fragment)", "original_string": "    protected boolean isValidFragment(final String fragment) {\n        if (fragment == null) {\n            return true;\n        }\n\n        return isOff(NO_FRAGMENTS);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the given fragment is null or fragments are allowed.\n@param fragment Fragment value to validate.\n@return true if fragment is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidPath(String)", "name": "isValidPath", "arg_nums": 1, "params": [{"name": "path", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidPath(final String path)", "original_string": "    protected boolean isValidPath(final String path) {\n        if (path == null) {\n            return false;\n        }\n\n        if (!PATH_PATTERN.matcher(path).matches()) {\n            return false;\n        }\n\n        try {\n            // Don't omit host otherwise leading path may be taken as host if it starts with //\n            final URI uri = new URI(null, \"localhost\", path, null);\n            final String norm = uri.normalize().getPath();\n            if (norm.startsWith(\"/../\") // Trying to go via the parent dir\n                    || norm.equals(\"/..\")) { // Trying to go to the parent dir\n                return false;\n            }\n        } catch (final URISyntaxException e) {\n            return false;\n        }\n\n        final int slash2Count = countToken(\"//\", path);\n        if (isOff(ALLOW_2_SLASHES) && slash2Count > 0) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the path is valid.  A {@code null} value is considered invalid.\n@param path Path value to validate.\n@return true if path is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidQuery(String)", "name": "isValidQuery", "arg_nums": 1, "params": [{"name": "query", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidQuery(final String query)", "original_string": "    protected boolean isValidQuery(final String query) {\n        if (query == null) {\n            return true;\n        }\n        return QUERY_PATTERN.matcher(query).matches();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the query is null or it's a properly formatted query string.\n@param query Query value to validate.\n@return true if query is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator.[boolean]isValidScheme(String)", "name": "isValidScheme", "arg_nums": 1, "params": [{"name": "scheme", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidScheme(final String scheme)", "original_string": "    protected boolean isValidScheme(final String scheme) {\n        if (scheme == null) {\n            return false;\n        }\n\n        if (!SCHEME_PATTERN.matcher(scheme).matches()) {\n            return false;\n        }\n\n        if (isOff(ALLOW_ALL_SCHEMES) && !allowedSchemes.contains(scheme.toLowerCase(Locale.ENGLISH))) {\n            return false;\n        }\n\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java", "class_name": "UrlValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/UrlValidator.java.UrlValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate scheme. If schemes[] was initialized to a non null,\nthen only those schemes are allowed.\nOtherwise the default schemes are \"http\", \"https\", \"ftp\".\nMatching is case-blind.\n@param scheme The scheme to validate.  A {@code null} value is considered\ninvalid.\n@return true if valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[EmailValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "EmailValidator", "signature": "public static EmailValidator getInstance()", "original_string": "    public static EmailValidator getInstance() {\n        return EMAIL_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "EmailValidator", "classes": []}, "docstring": "\nReturns the Singleton instance of this validator.\n\n@return singleton instance of this validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[EmailValidator]getInstance(boolean)", "name": "getInstance", "arg_nums": 1, "params": [{"name": "allowLocal", "type": "boolean"}], "return_type": "EmailValidator", "signature": "public static EmailValidator getInstance(final boolean allowLocal)", "original_string": "    public static EmailValidator getInstance(final boolean allowLocal) {\n        return getInstance(allowLocal, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "EmailValidator", "classes": []}, "docstring": "\nReturns the Singleton instance of this validator,\n with local validation as required.\n\n@param allowLocal Should local addresses be considered valid?\n@return singleton instance of this validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[EmailValidator]getInstance(boolean,boolean)", "name": "getInstance", "arg_nums": 2, "params": [{"name": "allowLocal", "type": "boolean"}, {"name": "allowTld", "type": "boolean"}], "return_type": "EmailValidator", "signature": "public static EmailValidator getInstance(final boolean allowLocal, final boolean allowTld)", "original_string": "    public static EmailValidator getInstance(final boolean allowLocal, final boolean allowTld) {\n        if (allowLocal) {\n            if (allowTld) {\n                return EMAIL_VALIDATOR_WITH_LOCAL_WITH_TLD;\n            }\n            return EMAIL_VALIDATOR_WITH_LOCAL;\n        }\n        if (allowTld) {\n            return EMAIL_VALIDATOR_WITH_TLD;\n        }\n        return EMAIL_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "EmailValidator", "classes": []}, "docstring": "\nReturns the Singleton instance of this validator, with local validation as required.\n\n@param allowLocal Should local addresses be considered valid?\n@param allowTld   Should TLDs be allowed?\n@return singleton instance of this validator\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[]EmailValidator(boolean)", "name": "EmailValidator", "arg_nums": 1, "params": [{"name": "allowLocal", "type": "boolean"}], "return_type": "", "signature": "protected EmailValidator(final boolean allowLocal)", "original_string": "    protected EmailValidator(final boolean allowLocal) {\n        this(allowLocal, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nProtected constructor for subclasses to use.\n\n@param allowLocal Should local addresses be considered valid?\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[]EmailValidator(boolean,boolean)", "name": "EmailValidator", "arg_nums": 2, "params": [{"name": "allowLocal", "type": "boolean"}, {"name": "allowTld", "type": "boolean"}], "return_type": "", "signature": "protected EmailValidator(final boolean allowLocal, final boolean allowTld)", "original_string": "    protected EmailValidator(final boolean allowLocal, final boolean allowTld) {\n        this.allowTld = allowTld;\n        this.domainValidator = DomainValidator.getInstance(allowLocal);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nProtected constructor for subclasses to use.\n\n@param allowLocal Should local addresses be considered valid?\n@param allowTld Should TLDs be allowed?\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[]EmailValidator(boolean,boolean,DomainValidator)", "name": "EmailValidator", "arg_nums": 3, "params": [{"name": "allowLocal", "type": "boolean"}, {"name": "allowTld", "type": "boolean"}, {"name": "domainValidator", "type": "DomainValidator"}], "return_type": "", "signature": "public EmailValidator(final boolean allowLocal, final boolean allowTld, final DomainValidator domainValidator)", "original_string": "    public EmailValidator(final boolean allowLocal, final boolean allowTld, final DomainValidator domainValidator) {\n        this.allowTld = allowTld;\n        if (domainValidator == null) {\n            throw new IllegalArgumentException(\"DomainValidator cannot be null\");\n        }\n        if (domainValidator.isAllowLocal() != allowLocal) {\n            throw new IllegalArgumentException(\"DomainValidator must agree with allowLocal setting\");\n        }\n        this.domainValidator = domainValidator;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nconstructor for creating instances with the specified domainValidator\n\n@param allowLocal Should local addresses be considered valid?\n@param allowTld Should TLDs be allowed?\n@param domainValidator allow override of the DomainValidator.\nThe instance must have the same allowLocal setting.\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "email", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String email)", "original_string": "    public boolean isValid(final String email) {\n        if (email == null) {\n            return false;\n        }\n        if (email.endsWith(\".\")) { // check this first - it's cheap!\n            return false;\n        }\n        // Check the whole email address structure\n        final Matcher emailMatcher = EMAIL_PATTERN.matcher(email);\n        if (!emailMatcher.matches()) {\n            return false;\n        }\n        if (!isValidUser(emailMatcher.group(1))) {\n            return false;\n        }\n        if (!isValidDomain(emailMatcher.group(2))) {\n            return false;\n        }\n        return true;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Checks if a field has a valid e-mail address.</p>\n\n@param email The value validation is being performed on.  A {@code null}\n             value is considered invalid.\n@return true if the email address is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[boolean]isValidDomain(String)", "name": "isValidDomain", "arg_nums": 1, "params": [{"name": "domain", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidDomain(final String domain)", "original_string": "    protected boolean isValidDomain(final String domain) {\n        // see if domain is an IP address in brackets\n        final Matcher ipDomainMatcher = IP_DOMAIN_PATTERN.matcher(domain);\n\n        if (ipDomainMatcher.matches()) {\n            final InetAddressValidator inetAddressValidator =\n                    InetAddressValidator.getInstance();\n            return inetAddressValidator.isValid(ipDomainMatcher.group(1));\n        }\n        // Domain is symbolic name\n        if (allowTld) {\n            return domainValidator.isValid(domain) || !domain.startsWith(\".\") && domainValidator.isValidTld(domain);\n        }\n        return domainValidator.isValid(domain);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the domain component of an email address is valid.\n\n@param domain being validated, may be in IDN format\n@return true if the email address's domain is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator.[boolean]isValidUser(String)", "name": "isValidUser", "arg_nums": 1, "params": [{"name": "user", "type": "String"}], "return_type": "boolean", "signature": "protected boolean isValidUser(final String user)", "original_string": "    protected boolean isValidUser(final String user) {\n\n        if (user == null || user.length() > MAX_USERNAME_LEN) {\n            return false;\n        }\n\n        return USER_PATTERN.matcher(user).matches();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java", "class_name": "EmailValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/EmailValidator.java.EmailValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nReturns true if the user component of an email address is valid.\n\n@param user being validated\n@return true if the user name is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigIntegerValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "BigIntegerValidator", "signature": "public static BigIntegerValidator getInstance()", "original_string": "    public static BigIntegerValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "BigIntegerValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the BigIntegerValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[]BigIntegerValidator()", "name": "BigIntegerValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public BigIntegerValidator()", "original_string": "    public BigIntegerValidator() {\n        this(true, STANDARD_FORMAT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[]BigIntegerValidator(boolean,int)", "name": "BigIntegerValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}], "return_type": "", "signature": "public BigIntegerValidator(final boolean strict, final int formatType)", "original_string": "    public BigIntegerValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[boolean]isInRange(BigInteger,long,long)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "BigInteger"}, {"name": "min", "type": "long"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public boolean isInRange(final BigInteger value, final long min, final long max)", "original_string": "    public boolean isInRange(final BigInteger value, final long min, final long max) {\n        return value.longValue() >= min && value.longValue() <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[boolean]maxValue(BigInteger,long)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "BigInteger"}, {"name": "max", "type": "long"}], "return_type": "boolean", "signature": "public boolean maxValue(final BigInteger value, final long max)", "original_string": "    public boolean maxValue(final BigInteger value, final long max) {\n        return value.longValue() <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[boolean]minValue(BigInteger,long)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "BigInteger"}, {"name": "min", "type": "long"}], "return_type": "boolean", "signature": "public boolean minValue(final BigInteger value, final long min)", "original_string": "    public boolean minValue(final BigInteger value, final long min) {\n        return value.longValue() >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        return BigInteger.valueOf(((Number) value).longValue());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nConvert the parsed value to a {@code BigInteger}.\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed {@code Number} converted to a\n        {@code BigInteger}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "BigInteger", "signature": "public BigInteger validate(final String value)", "original_string": "    public BigInteger validate(final String value) {\n        return (BigInteger) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigInteger", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigInteger} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code BigInteger} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "BigInteger", "signature": "public BigInteger validate(final String value, final Locale locale)", "original_string": "    public BigInteger validate(final String value, final Locale locale) {\n        return (BigInteger) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigInteger", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigInteger} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code BigInteger} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "BigInteger", "signature": "public BigInteger validate(final String value, final String pattern)", "original_string": "    public BigInteger validate(final String value, final String pattern) {\n        return (BigInteger) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigInteger", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigInteger} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@code BigInteger} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator.[BigInteger]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "BigInteger", "signature": "public BigInteger validate(final String value, final String pattern, final Locale locale)", "original_string": "    public BigInteger validate(final String value, final String pattern, final Locale locale) {\n        return (BigInteger) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java", "class_name": "BigIntegerValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/BigIntegerValidator.java.BigIntegerValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "BigInteger", "classes": []}, "docstring": "\n<p>Validate/convert a {@code BigInteger} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code BigInteger} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[]AbstractCalendarValidator(boolean,int,int)", "name": "AbstractCalendarValidator", "arg_nums": 3, "params": [{"name": "strict", "type": "boolean"}, {"name": "dateStyle", "type": "int"}, {"name": "timeStyle", "type": "int"}], "return_type": "", "signature": "public AbstractCalendarValidator(final boolean strict, final int dateStyle, final int timeStyle)", "original_string": "    public AbstractCalendarValidator(final boolean strict, final int dateStyle, final int timeStyle) {\n        super(strict);\n        this.dateStyle = dateStyle;\n        this.timeStyle = timeStyle;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an instance with the specified <em>strict</em>,\n<em>time</em> and <em>date</em> style parameters.\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param dateStyle the date style to use for Locale validation.\n@param timeStyle the time style to use for Locale validation.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[int]calculateCompareResult(Calendar,Calendar,int)", "name": "calculateCompareResult", "arg_nums": 3, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}, {"name": "field", "type": "int"}], "return_type": "int", "signature": "private int calculateCompareResult(final Calendar value, final Calendar compare, final int field)", "original_string": "    private int calculateCompareResult(final Calendar value, final Calendar compare, final int field) {\n        final int difference = value.get(field) - compare.get(field);\n        if (difference < 0) {\n            return -1;\n        }\n        if (difference > 0) {\n            return 1;\n        }\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compares the field from two calendars indicating whether the field for the\n   first calendar is equal to, less than or greater than the field from the\n   second calendar.\n\n@param value The Calendar value.\n@param compare The {@link Calendar} to check the value against.\n@param field The field to compare for the calendars.\n@return Zero if the first calendar's field is equal to the seconds, -1\n        if it is less than the seconds or +1 if it is greater than the seconds.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[int]calculateQuarter(Calendar,int)", "name": "calculateQuarter", "arg_nums": 2, "params": [{"name": "calendar", "type": "Calendar"}, {"name": "monthOfFirstQuarter", "type": "int"}], "return_type": "int", "signature": "private int calculateQuarter(final Calendar calendar, final int monthOfFirstQuarter)", "original_string": "    private int calculateQuarter(final Calendar calendar, final int monthOfFirstQuarter) {\n        // Add Year\n        int year = calendar.get(Calendar.YEAR);\n\n        final int month = calendar.get(Calendar.MONTH) + 1;\n        final int relativeMonth = month >= monthOfFirstQuarter\n                          ? month - monthOfFirstQuarter\n                          : month + 12 - monthOfFirstQuarter; // CHECKSTYLE IGNORE MagicNumber\n        final int quarter = relativeMonth / 3 + 1; // CHECKSTYLE IGNORE MagicNumber\n        // adjust the year if the quarter doesn't start in January\n        if (month < monthOfFirstQuarter) {\n            --year;\n        }\n        return year * 10 + quarter; // CHECKSTYLE IGNORE MagicNumber\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Calculate the quarter for the specified Calendar.</p>\n\n@param calendar The Calendar value.\n@param monthOfFirstQuarter The  month that the first quarter starts.\n@return The calculated quarter.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[int]compare(Calendar,Calendar,int)", "name": "compare", "arg_nums": 3, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}, {"name": "field", "type": "int"}], "return_type": "int", "signature": "protected int compare(final Calendar value, final Calendar compare, final int field)", "original_string": "    protected int compare(final Calendar value, final Calendar compare, final int field) {\n\n        int result;\n\n        // Compare Year\n        result = calculateCompareResult(value, compare, Calendar.YEAR);\n        if (result != 0 || field == Calendar.YEAR) {\n            return result;\n        }\n\n        // Compare Week of Year\n        if (field == Calendar.WEEK_OF_YEAR) {\n            return calculateCompareResult(value, compare, Calendar.WEEK_OF_YEAR);\n        }\n\n        // Compare Day of the Year\n        if (field == Calendar.DAY_OF_YEAR) {\n            return calculateCompareResult(value, compare, Calendar.DAY_OF_YEAR);\n        }\n\n        // Compare Month\n        result = calculateCompareResult(value, compare, Calendar.MONTH);\n        if (result != 0 || field == Calendar.MONTH) {\n            return result;\n        }\n\n        // Compare Week of Month\n        if (field == Calendar.WEEK_OF_MONTH) {\n            return calculateCompareResult(value, compare, Calendar.WEEK_OF_MONTH);\n        }\n\n        // Compare Date\n        result = calculateCompareResult(value, compare, Calendar.DATE);\n        if (result != 0 || field == Calendar.DATE ||\n                          field == Calendar.DAY_OF_WEEK ||\n                          field == Calendar.DAY_OF_WEEK_IN_MONTH) {\n            return result;\n        }\n\n        // Compare Time fields\n        return compareTime(value, compare, field);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compares a calendar value to another, indicating whether it is\n   equal, less then or more than at a specified level.</p>\n\n@param value The Calendar value.\n@param compare The {@link Calendar} to check the value against.\n@param field The field <em>level</em> to compare to - e.g. specifying\n       {@code Calendar.MONTH} will compare the year and month\n       portions of the calendar.\n@return Zero if the first value is equal to the second, -1\n        if it is less than the second or +1 if it is greater than the second.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[int]compareQuarters(Calendar,Calendar,int)", "name": "compareQuarters", "arg_nums": 3, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}, {"name": "monthOfFirstQuarter", "type": "int"}], "return_type": "int", "signature": "protected int compareQuarters(final Calendar value, final Calendar compare, final int monthOfFirstQuarter)", "original_string": "    protected int compareQuarters(final Calendar value, final Calendar compare, final int monthOfFirstQuarter) {\n        final int valueQuarter = calculateQuarter(value, monthOfFirstQuarter);\n        final int compareQuarter = calculateQuarter(compare, monthOfFirstQuarter);\n        if (valueQuarter < compareQuarter) {\n            return -1;\n        }\n        if (valueQuarter > compareQuarter) {\n            return 1;\n        }\n        return 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compares a calendar's quarter value to another, indicating whether it is\n   equal, less then or more than the specified quarter.</p>\n\n@param value The Calendar value.\n@param compare The {@link Calendar} to check the value against.\n@param monthOfFirstQuarter The  month that the first quarter starts.\n@return Zero if the first quarter is equal to the second, -1\n        if it is less than the second or +1 if it is greater than the second.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[int]compareTime(Calendar,Calendar,int)", "name": "compareTime", "arg_nums": 3, "params": [{"name": "value", "type": "Calendar"}, {"name": "compare", "type": "Calendar"}, {"name": "field", "type": "int"}], "return_type": "int", "signature": "protected int compareTime(final Calendar value, final Calendar compare, final int field)", "original_string": "    protected int compareTime(final Calendar value, final Calendar compare, final int field) {\n\n        int result;\n\n        // Compare Hour\n        result = calculateCompareResult(value, compare, Calendar.HOUR_OF_DAY);\n        if (result != 0 || field == Calendar.HOUR || field == Calendar.HOUR_OF_DAY) {\n            return result;\n        }\n\n        // Compare Minute\n        result = calculateCompareResult(value, compare, Calendar.MINUTE);\n        if (result != 0 || field == Calendar.MINUTE) {\n            return result;\n        }\n\n        // Compare Second\n        result = calculateCompareResult(value, compare, Calendar.SECOND);\n        if (result != 0 || field == Calendar.SECOND) {\n            return result;\n        }\n\n        // Compare Milliseconds\n        if (field == Calendar.MILLISECOND) {\n            return calculateCompareResult(value, compare, Calendar.MILLISECOND);\n        }\n\n        throw new IllegalArgumentException(\"Invalid field: \" + field);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Compares a calendar time value to another, indicating whether it is\n   equal, less then or more than at a specified level.</p>\n\n@param value The Calendar value.\n@param compare The {@link Calendar} to check the value against.\n@param field The field <em>level</em> to compare to - e.g. specifying\n       {@code Calendar.MINUTE} will compare the hours and minutes\n       portions of the calendar.\n@return Zero if the first value is equal to the second, -1\n        if it is less than the second or +1 if it is greater than the second.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[String]format(Object,Format)", "name": "format", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "String", "signature": "@Override\n    protected String format(Object value, final Format formatter)", "original_string": "    @Override\n    protected String format(Object value, final Format formatter) {\n        if (value == null) {\n            return null;\n        }\n        if (value instanceof Calendar) {\n            value = ((Calendar) value).getTime();\n        }\n        return formatter.format(value);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format a value with the specified {@code DateFormat}.</p>\n\n@param value The value to be formatted.\n@param formatter The Format to use.\n@return The formatted value.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[String]format(Object,Locale,TimeZone)", "name": "format", "arg_nums": 3, "params": [{"name": "value", "type": "Object"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "String", "signature": "public String format(final Object value, final Locale locale, final TimeZone timeZone)", "original_string": "    public String format(final Object value, final Locale locale, final TimeZone timeZone) {\n        return format(value, (String) null, locale, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object into a {@link String} using\nthe specified Locale.</p>\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the Format.\n@param timeZone The Time Zone used to format the date,\n system default if null (unless value is a {@link Calendar}.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[String]format(Object,String,Locale)", "name": "format", "arg_nums": 3, "params": [{"name": "value", "type": "Object"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "String", "signature": "@Override\n    public String format(final Object value, final String pattern, final Locale locale)", "original_string": "    @Override\n    public String format(final Object value, final String pattern, final Locale locale) {\n        return format(value, pattern, locale, (TimeZone) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object using the specified pattern and/or\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to format the value.\n@param locale The locale to use for the Format.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[String]format(Object,String,Locale,TimeZone)", "name": "format", "arg_nums": 4, "params": [{"name": "value", "type": "Object"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "String", "signature": "public String format(final Object value, final String pattern, final Locale locale, final TimeZone timeZone)", "original_string": "    public String format(final Object value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        final DateFormat formatter = (DateFormat) getFormat(pattern, locale);\n        if (timeZone != null) {\n            formatter.setTimeZone(timeZone);\n        } else if (value instanceof Calendar) {\n            formatter.setTimeZone(((Calendar) value).getTimeZone());\n        }\n        return format(value, formatter);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object using the specified pattern and/or\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to format the value.\n@param locale The locale to use for the Format.\n@param timeZone The Time Zone used to format the date,\n system default if null (unless value is a {@link Calendar}.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[String]format(Object,String,TimeZone)", "name": "format", "arg_nums": 3, "params": [{"name": "value", "type": "Object"}, {"name": "pattern", "type": "String"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "String", "signature": "public String format(final Object value, final String pattern, final TimeZone timeZone)", "original_string": "    public String format(final Object value, final String pattern, final TimeZone timeZone) {\n        return format(value, pattern, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object into a {@link String} using\nthe specified pattern.</p>\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to format the value.\n@param timeZone The Time Zone used to format the date,\n system default if null (unless value is a {@link Calendar}.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[String]format(Object,TimeZone)", "name": "format", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "String", "signature": "public String format(final Object value, final TimeZone timeZone)", "original_string": "    public String format(final Object value, final TimeZone timeZone) {\n        return format(value, (String) null, (Locale) null, timeZone);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Format an object into a {@link String} using\nthe default Locale.</p>\n\n@param value The value validation is being performed on.\n@param timeZone The Time Zone used to format the date,\n system default if null (unless value is a {@link Calendar}.\n@return The value formatted as a {@link String}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[Format]getFormat(Locale)", "name": "getFormat", "arg_nums": 1, "params": [{"name": "locale", "type": "Locale"}], "return_type": "Format", "signature": "protected Format getFormat(final Locale locale)", "original_string": "    protected Format getFormat(final Locale locale) {\n        DateFormat formatter;\n        if (dateStyle >= 0 && timeStyle >= 0) {\n            if (locale == null) {\n                formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle);\n            } else {\n                formatter = DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);\n            }\n        } else if (timeStyle >= 0) {\n            if (locale == null) {\n                formatter = DateFormat.getTimeInstance(timeStyle);\n            } else {\n                formatter = DateFormat.getTimeInstance(timeStyle, locale);\n            }\n        } else {\n            final int useDateStyle = dateStyle >= 0 ? dateStyle : DateFormat.SHORT;\n            if (locale == null) {\n                formatter = DateFormat.getDateInstance(useDateStyle);\n            } else {\n                formatter = DateFormat.getDateInstance(useDateStyle, locale);\n            }\n        }\n        formatter.setLenient(false);\n        return formatter;\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Format", "classes": []}, "docstring": "\n<p>Returns a {@code DateFormat} for the specified Locale.</p>\n\n@param locale The locale a {@code DateFormat} is required for,\n       system default if null.\n@return The {@code DateFormat} to created.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[Format]getFormat(String,Locale)", "name": "getFormat", "arg_nums": 2, "params": [{"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Format", "signature": "@Override\n    protected Format getFormat(final String pattern, final Locale locale)", "original_string": "    @Override\n    protected Format getFormat(final String pattern, final Locale locale) {\n        DateFormat formatter;\n        final boolean usePattern = !GenericValidator.isBlankOrNull(pattern);\n        if (!usePattern) {\n            formatter = (DateFormat) getFormat(locale);\n        } else if (locale == null) {\n            formatter = new SimpleDateFormat(pattern);\n        } else {\n            final DateFormatSymbols symbols = new DateFormatSymbols(locale);\n            formatter = new SimpleDateFormat(pattern, symbols);\n        }\n        formatter.setLenient(false);\n        return formatter;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Format", "classes": []}, "docstring": "\n<p>Returns a {@code DateFormat} for the specified <em>pattern</em>\n   and/or {@link Locale}.</p>\n\n@param pattern The pattern used to validate the value against or\n       {@code null} to use the default for the {@link Locale}.\n@param locale The locale to use for the currency format, system default if null.\n@return The {@code DateFormat} to created.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[boolean]isValid(String,String,Locale)", "name": "isValid", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String value, final String pattern, final Locale locale)", "original_string": "    @Override\n    public boolean isValid(final String value, final String pattern, final Locale locale) {\n        return parse(value, pattern, locale, (TimeZone) null) != null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Validate using the specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to format the value.\n@param locale The locale to use for the Format, defaults to the default\n@return {@code true} if the value is valid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[Object]parse(String,String,Locale,TimeZone)", "name": "parse", "arg_nums": 4, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}, {"name": "timeZone", "type": "TimeZone"}], "return_type": "Object", "signature": "protected Object parse(String value, final String pattern, final Locale locale, final TimeZone timeZone)", "original_string": "    protected Object parse(String value, final String pattern, final Locale locale, final TimeZone timeZone) {\n        value = value == null ? null : value.trim();\n        final String value1 = value;\n        if (GenericValidator.isBlankOrNull(value1)) {\n            return null;\n        }\n        final DateFormat formatter = (DateFormat) getFormat(pattern, locale);\n        if (timeZone != null) {\n            formatter.setTimeZone(timeZone);\n        }\n        return parse(value, formatter);\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Checks if the value is valid against a specified pattern.</p>\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@param timeZone The Time Zone used to parse the date, system default if null.\n@return The parsed value if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected abstract Object processParsedValue(Object value, Format formatter)", "original_string": "    @Override\n    protected abstract Object processParsedValue(Object value, Format formatter);", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java", "class_name": "AbstractCalendarValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/AbstractCalendarValidator.java.AbstractCalendarValidator", "attributes": {"modifiers": "@Override\n    protected abstract", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Process the parsed value, performing any further validation\n   and type conversion required.</p>\n\n@param value The parsed object created.\n@param formatter The Format used to parse the value with.\n@return The parsed value converted to the appropriate type\n        if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[ISSNValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "ISSNValidator", "signature": "public static ISSNValidator getInstance()", "original_string": "    public static ISSNValidator getInstance() {\n        return ISSN_VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java", "class_name": "ISSNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ISSNValidator", "classes": []}, "docstring": "\nGets the singleton instance of the ISSN validator.\n\n@return A singleton instance of the ISSN validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[String]convertToEAN13(String,String)", "name": "convertToEAN13", "arg_nums": 2, "params": [{"name": "issn", "type": "String"}, {"name": "suffix", "type": "String"}], "return_type": "String", "signature": "public String convertToEAN13(final String issn, final String suffix)", "original_string": "    public String convertToEAN13(final String issn, final String suffix) {\n        if (suffix == null || !suffix.matches(\"\\\\d\\\\d\")) {\n            throw new IllegalArgumentException(\"Suffix must be two digits: '\" + suffix + \"'\");\n        }\n        final Object result = validate(issn);\n        if (result == null) {\n            return null;\n        }\n        // Calculate the new EAN-13 code\n        final String input = result.toString();\n        String ean13 = ISSN_PREFIX + input.substring(0, input.length() - 1) + suffix;\n        try {\n            final String checkDigit = EAN13CheckDigit.EAN13_CHECK_DIGIT.calculate(ean13);\n            ean13 += checkDigit;\n            return ean13;\n        } catch (final CheckDigitException e) { // Should not happen\n            throw new IllegalArgumentException(\"Check digit error for '\" + ean13 + \"' - \" + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java", "class_name": "ISSNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nConverts an ISSN code to an EAN-13 code.\n<p>\nThis method requires a valid ISSN code.\nIt may contain a leading 'ISSN ' prefix,\nas the input is passed through the {@link #validate(String)}\nmethod.\n</p>\n\n@param issn The ISSN code to convert\n@param suffix the two digit suffix, e.g. \"00\"\n@return A converted EAN-13 code or {@code null}\nif the input ISSN code is not valid\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[String]extractFromEAN13(String)", "name": "extractFromEAN13", "arg_nums": 1, "params": [{"name": "ean13", "type": "String"}], "return_type": "String", "signature": "public String extractFromEAN13(final String ean13)", "original_string": "    public String extractFromEAN13(final String ean13) {\n        String input = ean13.trim();\n        if (input.length() != EAN_ISSN_LEN ) {\n            throw new IllegalArgumentException(\"Invalid length \" + input.length() + \" for '\" + input + \"'\");\n        }\n        if (!input.startsWith(ISSN_PREFIX)) {\n            throw new IllegalArgumentException(\"Prefix must be \" + ISSN_PREFIX + \" to contain an ISSN: '\" + ean13 + \"'\");\n        }\n        final Object result = validateEan(input);\n        if (result == null) {\n            return null;\n        }\n        // Calculate the ISSN code\n        input = result.toString();\n        try {\n            //CHECKSTYLE:OFF: MagicNumber\n            final String issnBase = input.substring(3, 10); // TODO: how to derive these\n            //CHECKSTYLE:ON: MagicNumber\n            final String checkDigit = ISSNCheckDigit.ISSN_CHECK_DIGIT.calculate(issnBase);\n            return issnBase + checkDigit;\n        } catch (final CheckDigitException e) { // Should not happen\n            throw new IllegalArgumentException(\"Check digit error for '\" + ean13 + \"' - \" + e.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java", "class_name": "ISSNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nExtracts an ISSN code from an ISSN-EAN-13 code.\n<p>\nThis method requires a valid ISSN-EAN-13 code with NO formatting\ncharacters.\nThat is a 13 digit EAN-13 code with the '977' prefix.\n</p>\n\n@param ean13 The ISSN code to convert\n@return A valid ISSN code or {@code null}\nif the input ISSN EAN-13 code is not valid\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "public boolean isValid(final String code)", "original_string": "    public boolean isValid(final String code) {\n        return VALIDATOR.isValid(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java", "class_name": "ISSNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the code is a valid ISSN code after any transformation\nby the validate routine.\n\n@param code The code to validate.\n@return {@code true} if a valid ISSN\ncode, otherwise {@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[Object]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "Object", "signature": "public Object validate(final String code)", "original_string": "    public Object validate(final String code) {\n        return VALIDATOR.validate(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java", "class_name": "ISSNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nChecks the code is valid ISSN code.\n<p>\nIf valid, this method returns the ISSN code with\nthe 'ISSN ' prefix removed (if it was present)\n</p>\n\n@param code The code to validate.\n@return A valid ISSN code if valid, otherwise {@code null}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator.[Object]validateEan(String)", "name": "validateEan", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "Object", "signature": "public Object validateEan(final String code)", "original_string": "    public Object validateEan(final String code) {\n        return EAN_VALIDATOR.validate(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java", "class_name": "ISSNValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ISSNValidator.java.ISSNValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nChecks the code is a valid EAN code.\n<p>\nIf valid, this method returns the EAN code\n</p>\n\n@param code The code to validate.\n@return A valid EAN code if valid, otherwise {@code null}.\n@since 1.7\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[ByteValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "ByteValidator", "signature": "public static ByteValidator getInstance()", "original_string": "    public static ByteValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "ByteValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the ByteValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[]ByteValidator()", "name": "ByteValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ByteValidator()", "original_string": "    public ByteValidator() {\n        this(true, STANDARD_FORMAT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[]ByteValidator(boolean,int)", "name": "ByteValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}], "return_type": "", "signature": "public ByteValidator(final boolean strict, final int formatType)", "original_string": "    public ByteValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]isInRange(byte,byte,byte)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "byte"}, {"name": "min", "type": "byte"}, {"name": "max", "type": "byte"}], "return_type": "boolean", "signature": "public boolean isInRange(final byte value, final byte min, final byte max)", "original_string": "    public boolean isInRange(final byte value, final byte min, final byte max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]isInRange(Byte,byte,byte)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "Byte"}, {"name": "min", "type": "byte"}, {"name": "max", "type": "byte"}], "return_type": "boolean", "signature": "public boolean isInRange(final Byte value, final byte min, final byte max)", "original_string": "    public boolean isInRange(final Byte value, final byte min, final byte max) {\n        return isInRange(value.byteValue(), min, max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]maxValue(byte,byte)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "byte"}, {"name": "max", "type": "byte"}], "return_type": "boolean", "signature": "public boolean maxValue(final byte value, final byte max)", "original_string": "    public boolean maxValue(final byte value, final byte max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]maxValue(Byte,byte)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "Byte"}, {"name": "max", "type": "byte"}], "return_type": "boolean", "signature": "public boolean maxValue(final Byte value, final byte max)", "original_string": "    public boolean maxValue(final Byte value, final byte max) {\n        return maxValue(value.byteValue(), max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]minValue(byte,byte)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "byte"}, {"name": "min", "type": "byte"}], "return_type": "boolean", "signature": "public boolean minValue(final byte value, final byte min)", "original_string": "    public boolean minValue(final byte value, final byte min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[boolean]minValue(Byte,byte)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "Byte"}, {"name": "min", "type": "byte"}], "return_type": "boolean", "signature": "public boolean minValue(final Byte value, final byte min)", "original_string": "    public boolean minValue(final Byte value, final byte min) {\n        return minValue(value.byteValue(), min);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n\n        // Parsed value will be Long if it fits in a long and is not fractional\n        if (value instanceof Long) {\n            final long longValue = ((Long) value).longValue();\n            if (longValue >= Byte.MIN_VALUE &&\n                longValue <= Byte.MAX_VALUE) {\n                return Byte.valueOf((byte) longValue);\n            }\n        }\n        return null;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\n<p>Perform further validation and convert the {@code Number} to\na {@code Byte}.</p>\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The parsed {@code Number} converted to a\n  {@code Byte} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Byte", "signature": "public Byte validate(final String value)", "original_string": "    public Byte validate(final String value) {\n        return (Byte) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Byte} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code Byte} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Byte", "signature": "public Byte validate(final String value, final Locale locale)", "original_string": "    public Byte validate(final String value, final Locale locale) {\n        return (Byte) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Byte} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code Byte} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Byte", "signature": "public Byte validate(final String value, final String pattern)", "original_string": "    public Byte validate(final String value, final String pattern) {\n        return (Byte) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Byte} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@code Byte} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator.[Byte]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Byte", "signature": "public Byte validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Byte validate(final String value, final String pattern, final Locale locale) {\n        return (Byte) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java", "class_name": "ByteValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/ByteValidator.java.ByteValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Byte", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Byte} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Byte} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[DoubleValidator]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "DoubleValidator", "signature": "public static DoubleValidator getInstance()", "original_string": "    public static DoubleValidator getInstance() {\n        return VALIDATOR;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "DoubleValidator", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the DoubleValidator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[]DoubleValidator()", "name": "DoubleValidator", "arg_nums": 0, "params": [], "return_type": "", "signature": "public DoubleValidator()", "original_string": "    public DoubleValidator() {\n        this(true, STANDARD_FORMAT);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a <em>strict</em> instance.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[]DoubleValidator(boolean,int)", "name": "DoubleValidator", "arg_nums": 2, "params": [{"name": "strict", "type": "boolean"}, {"name": "formatType", "type": "int"}], "return_type": "", "signature": "public DoubleValidator(final boolean strict, final int formatType)", "original_string": "    public DoubleValidator(final boolean strict, final int formatType) {\n        super(strict, formatType, true);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\n<p>Construct an instance with the specified strict setting\n   and format type.</p>\n\n<p>The {@code formatType} specified what type of\n   {@code NumberFormat} is created - valid types\n   are:</p>\n   <ul>\n      <li>AbstractNumberValidator.STANDARD_FORMAT -to create\n          <em>standard</em> number formats (the default).</li>\n      <li>AbstractNumberValidator.CURRENCY_FORMAT -to create\n          <em>currency</em> number formats.</li>\n      <li>AbstractNumberValidator.PERCENT_FORMAT -to create\n          <em>percent</em> number formats (the default).</li>\n   </ul>\n\n@param strict {@code true} if strict\n       {@code Format} parsing should be used.\n@param formatType The {@code NumberFormat} type to\n       create for validation, default is STANDARD_FORMAT.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]isInRange(double,double,double)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "double"}, {"name": "min", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public boolean isInRange(final double value, final double min, final double max)", "original_string": "    public boolean isInRange(final double value, final double min, final double max) {\n        return value >= min && value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]isInRange(Double,double,double)", "name": "isInRange", "arg_nums": 3, "params": [{"name": "value", "type": "Double"}, {"name": "min", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public boolean isInRange(final Double value, final double min, final double max)", "original_string": "    public boolean isInRange(final Double value, final double min, final double max) {\n        return isInRange(value.doubleValue(), min, max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is within a specified range.\n\n@param value The {@code Number} value to check.\n@param min The minimum value of the range.\n@param max The maximum value of the range.\n@return {@code true} if the value is within the\n        specified range.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]maxValue(double,double)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "double"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public boolean maxValue(final double value, final double max)", "original_string": "    public boolean maxValue(final double value, final double max) {\n        return value <= max;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]maxValue(Double,double)", "name": "maxValue", "arg_nums": 2, "params": [{"name": "value", "type": "Double"}, {"name": "max", "type": "double"}], "return_type": "boolean", "signature": "public boolean maxValue(final Double value, final double max)", "original_string": "    public boolean maxValue(final Double value, final double max) {\n        return maxValue(value.doubleValue(), max);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is less than or equal to a maximum.\n\n@param value The value validation is being performed on.\n@param max The maximum value.\n@return {@code true} if the value is less than\n        or equal to the maximum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]minValue(double,double)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "double"}, {"name": "min", "type": "double"}], "return_type": "boolean", "signature": "public boolean minValue(final double value, final double min)", "original_string": "    public boolean minValue(final double value, final double min) {\n        return value >= min;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[boolean]minValue(Double,double)", "name": "minValue", "arg_nums": 2, "params": [{"name": "value", "type": "Double"}, {"name": "min", "type": "double"}], "return_type": "boolean", "signature": "public boolean minValue(final Double value, final double min)", "original_string": "    public boolean minValue(final Double value, final double min) {\n        return minValue(value.doubleValue(), min);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nCheck if the value is greater than or equal to a minimum.\n\n@param value The value validation is being performed on.\n@param min The minimum value.\n@return {@code true} if the value is greater than\n        or equal to the minimum.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Object]processParsedValue(Object,Format)", "name": "processParsedValue", "arg_nums": 2, "params": [{"name": "value", "type": "Object"}, {"name": "formatter", "type": "Format"}], "return_type": "Object", "signature": "@Override\n    protected Object processParsedValue(final Object value, final Format formatter)", "original_string": "    @Override\n    protected Object processParsedValue(final Object value, final Format formatter) {\n        if (value instanceof Double) {\n            return value;\n        }\n        return Double.valueOf(((Number) value).doubleValue());\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nConvert the parsed value to a {@code Double}.\n\n@param value The parsed {@code Number} object created.\n@param formatter The Format used to parse the value with.\n@return The validated/converted {@code Double} value if valid\nor {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String)", "name": "validate", "arg_nums": 1, "params": [{"name": "value", "type": "String"}], "return_type": "Double", "signature": "public Double validate(final String value)", "original_string": "    public Double validate(final String value) {\n        return (Double) parse(value, (String) null, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Double} using the default\n   {@link Locale}.\n\n@param value The value validation is being performed on.\n@return The parsed {@code Double} if valid or {@code null}\n if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String,Locale)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Double", "signature": "public Double validate(final String value, final Locale locale)", "original_string": "    public Double validate(final String value, final Locale locale) {\n        return (Double) parse(value, (String) null, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Double} using the\n   specified {@link Locale}.\n\n@param value The value validation is being performed on.\n@param locale The locale to use for the number format, system default if null.\n@return The parsed {@code Double} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String,String)", "name": "validate", "arg_nums": 2, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}], "return_type": "Double", "signature": "public Double validate(final String value, final String pattern)", "original_string": "    public Double validate(final String value, final String pattern) {\n        return (Double) parse(value, pattern, (Locale) null);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Double} using the\n   specified <em>pattern</em>.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against.\n@return The parsed {@code BigDecimal} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator.[Double]validate(String,String,Locale)", "name": "validate", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "pattern", "type": "String"}, {"name": "locale", "type": "Locale"}], "return_type": "Double", "signature": "public Double validate(final String value, final String pattern, final Locale locale)", "original_string": "    public Double validate(final String value, final String pattern, final Locale locale) {\n        return (Double) parse(value, pattern, locale);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java", "class_name": "DoubleValidator", "class_uri": "src/main/java/org/apache/commons/validator/routines/DoubleValidator.java.DoubleValidator", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "Double", "classes": []}, "docstring": "\n<p>Validate/convert a {@code Double} using the\n   specified pattern and/ or {@link Locale}.\n\n@param value The value validation is being performed on.\n@param pattern The pattern used to validate the value against, or the\n       default for the {@link Locale} if {@code null}.\n@param locale The locale to use for the date format, system default if null.\n@return The parsed {@code Double} if valid or {@code null} if invalid.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit.[]CUSIPCheckDigit()", "name": "CUSIPCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public CUSIPCheckDigit()", "original_string": "    public CUSIPCheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java", "class_name": "CUSIPCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a CUSIP Identifier Check Digit routine.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit.[int]toInt(char,int,int)", "name": "toInt", "arg_nums": 3, "params": [{"name": "character", "type": "char"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)\n            throws CheckDigitException {\n        final int charValue = Character.getNumericValue(character);\n        // the final character is only allowed to reach 9\n        final int charMax = rightPos == 1 ? 9 : 35;  // CHECKSTYLE IGNORE MagicNumber\n        if (charValue < 0 || charValue > charMax) {\n            throw new CheckDigitException(\"Invalid Character[\" +\n                    leftPos + \",\" + rightPos + \"] = '\" + charValue + \"' out of range 0 to \" + charMax);\n        }\n        return charValue;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java", "class_name": "CUSIPCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nConvert a character at a specified position to an integer value.\n\n@param character The character to convert\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The position of the character in the code, counting from right to left\n@return The integer value of the character\n@throws CheckDigitException if the character is not alphanumeric\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 2];\n        final int weightedValue = charValue * weight;\n        return sumDigits(weightedValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java", "class_name": "CUSIPCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CUSIPCheckDigit.java.CUSIPCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Calculates the <em>weighted</em> value of a character in the\ncode at a specified position.</p>\n\n<p>For CUSIP (from right to left) <b>odd</b> digits are weighted\nwith a factor of <b>one</b> and <b>even</b> digits with a factor\nof <b>two</b>. Weighted values &gt; 9, have 9 subtracted</p>\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The position of the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java.EAN13CheckDigit.[]EAN13CheckDigit()", "name": "EAN13CheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public EAN13CheckDigit()", "original_string": "    public EAN13CheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java", "class_name": "EAN13CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java.EAN13CheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Check Digit routine for EAN/UPC.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java.EAN13CheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return charValue * POSITION_WEIGHT[rightPos % 2];\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java", "class_name": "EAN13CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/EAN13CheckDigit.java.EAN13CheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Calculates the <em>weighted</em> value of a character in the\ncode at a specified position.</p>\n\n<p>For EAN-13 (from right to left) <b>odd</b> digits are weighted\nwith a factor of <b>one</b> and <b>even</b> digits with a factor\nof <b>three</b>.</p>\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java.ISBNCheckDigit.[String]calculate(String)", "name": "calculate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    public String calculate(final String code)", "original_string": "    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"ISBN Code is missing\");\n        }\n        if (code.length() == 9) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN10_CHECK_DIGIT.calculate(code);\n        }\n        if (code.length() == 12) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN13_CHECK_DIGIT.calculate(code);\n        }\n        throw new CheckDigitException(\"Invalid ISBN Length = \" + code.length());\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java", "class_name": "ISBNCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java.ISBNCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCalculate an ISBN-10 or ISBN-13 check digit, depending\non the length of the code.\n<p>\nIf the length of the code is 9, it is treated as an ISBN-10\ncode or if the length of the code is 12, it is treated as an ISBN-13\ncode.\n\n@param code The ISBN code to validate (should have a length of\n9 or 12)\n@return The ISBN-10 check digit if the length is 9 or an ISBN-13\ncheck digit if the length is 12.\n@throws CheckDigitException if the code is missing, or an invalid\nlength (i.e. not 9 or 12) or if there is an error calculating the\ncheck digit.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java.ISBNCheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String code)", "original_string": "    @Override\n    public boolean isValid(final String code) {\n        if (code == null) {\n            return false;\n        }\n        if (code.length() == 10) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN10_CHECK_DIGIT.isValid(code);\n        }\n        if (code.length() == 13) { // CHECKSTYLE IGNORE MagicNumber\n            return ISBN13_CHECK_DIGIT.isValid(code);\n        }\n        return false;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java", "class_name": "ISBNCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBNCheckDigit.java.ISBNCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n<p>Validate an ISBN-10 or ISBN-13 check digit, depending\non the length of the code.</p>\n<p>\nIf the length of the code is 10, it is treated as an ISBN-10\ncode or ff the length of the code is 13, it is treated as an ISBN-13\ncode.\n\n@param code The ISBN code to validate (should have a length of\n10 or 13)\n@return {@code true} if the code has a length of 10 and is\na valid ISBN-10 check digit or the code has a length of 13 and is\na valid ISBN-13 check digit - otherwise {@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[CheckDigit]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "CheckDigit", "signature": "public static CheckDigit getInstance()", "original_string": "    public static CheckDigit getInstance() {\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java", "class_name": "ECNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CheckDigit", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the EC Number validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[]ECNumberCheckDigit()", "name": "ECNumberCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private ECNumberCheckDigit()", "original_string": "    private ECNumberCheckDigit() {\n        super(MODULUS_11);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java", "class_name": "ECNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 11 Check Digit routine.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[String]calculate(String)", "name": "calculate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    public String calculate(final String code)", "original_string": "    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"Code is missing\");\n        }\n        final int modulusResult = INSTANCE.calculateModulus(code, false);\n        return toCheckDigit(modulusResult);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java", "class_name": "ECNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n{@inheritDoc}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String code)", "original_string": "    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        final Object cde = REGEX_VALIDATOR.validate(code);\n        if (!(cde instanceof String)) {\n            return false;\n        }\n        try {\n            final int modulusResult = INSTANCE.calculateModulus((String) cde, true);\n            return modulusResult == Character.getNumericValue(code.charAt(code.length() - 1));\n        } catch (final CheckDigitException ex) {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java", "class_name": "ECNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n{@inheritDoc}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return leftPos >= EC_LEN ? 0 : charValue * leftPos;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java", "class_name": "ECNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ECNumberCheckDigit.java.ECNumberCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculates the <em>weighted</em> value of a character in the\ncode at a specified position.\n\n<p>For EC number digits are weighted by their position from left to right.</p>\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[]SedolCheckDigit()", "name": "SedolCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public SedolCheckDigit()", "original_string": "    public SedolCheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java", "class_name": "SedolCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Check Digit routine for ISBN-10.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[int]calculateModulus(String,boolean)", "name": "calculateModulus", "arg_nums": 2, "params": [{"name": "code", "type": "String"}, {"name": "includesCheckDigit", "type": "boolean"}], "return_type": "int", "signature": "@Override\n    protected int calculateModulus(final String code, final boolean includesCheckDigit)", "original_string": "    @Override\n    protected int calculateModulus(final String code, final boolean includesCheckDigit) throws CheckDigitException {\n        if (code.length() > POSITION_WEIGHT.length) {\n            throw new CheckDigitException(\"Invalid Code Length = \" + code.length());\n        }\n        return super.calculateModulus(code, includesCheckDigit);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java", "class_name": "SedolCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate the modulus for an SEDOL code.\n\n@param code The code to calculate the modulus for.\n@param includesCheckDigit Whether the code includes the Check Digit or not.\n@return The modulus value\n@throws CheckDigitException if an error occurs calculating the modulus\nfor the specified code\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[int]toInt(char,int,int)", "name": "toInt", "arg_nums": 3, "params": [{"name": "character", "type": "char"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos) throws CheckDigitException {\n        final int charValue = Character.getNumericValue(character);\n        // the check digit is only allowed to reach 9\n        final int charMax = rightPos == 1 ? 9 : MAX_ALPHANUMERIC_VALUE; // CHECKSTYLE IGNORE MagicNumber\n        if (charValue < 0 || charValue > charMax) {\n            throw new CheckDigitException(\"Invalid Character[\" + leftPos + \",\" + rightPos + \"] = '\" + charValue + \"' out of range 0 to \" + charMax);\n        }\n        return charValue;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java", "class_name": "SedolCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nConvert a character at a specified position to an integer value.\n\n@param character The character to convert\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The integer value of the character\n@throws CheckDigitException if character is not alphanumeric\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return charValue * POSITION_WEIGHT[leftPos - 1];\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java", "class_name": "SedolCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/SedolCheckDigit.java.SedolCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculates the <em>weighted</em> value of a character in the\ncode at a specified position.\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit.[]ISINCheckDigit()", "name": "ISINCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ISINCheckDigit()", "original_string": "    public ISINCheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java", "class_name": "ISINCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an ISIN Identifier Check Digit routine.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit.[int]calculateModulus(String,boolean)", "name": "calculateModulus", "arg_nums": 2, "params": [{"name": "code", "type": "String"}, {"name": "includesCheckDigit", "type": "boolean"}], "return_type": "int", "signature": "@Override\n    protected int calculateModulus(final String code, final boolean includesCheckDigit)", "original_string": "    @Override\n    protected int calculateModulus(final String code, final boolean includesCheckDigit) throws CheckDigitException {\n        final StringBuilder transformed = new StringBuilder(code.length() * 2); // CHECKSTYLE IGNORE MagicNumber\n        if (includesCheckDigit) {\n            final char checkDigit = code.charAt(code.length() - 1); // fetch the last character\n            if (!Character.isDigit(checkDigit)) {\n                throw new CheckDigitException(\"Invalid checkdigit[\" + checkDigit + \"] in \" + code);\n            }\n        }\n        for (int i = 0; i < code.length(); i++) {\n            final int charValue = Character.getNumericValue(code.charAt(i));\n            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {\n                throw new CheckDigitException(\"Invalid Character[\" + (i + 1) + \"] = '\" + charValue + \"'\");\n            }\n            // this converts alphanumerics to two digits\n            // so there is no need to overload toInt()\n            transformed.append(charValue);\n        }\n        return super.calculateModulus(transformed.toString(), includesCheckDigit);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java", "class_name": "ISINCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate the modulus for an ISIN code.\n\n@param code The code to calculate the modulus for.\n@param includesCheckDigit Whether the code includes the Check Digit or not.\n@return The modulus value\n@throws CheckDigitException if an error occurs calculating the modulus\nfor the specified code\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber\n        final int weightedValue = charValue * weight;\n        return sumDigits(weightedValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java", "class_name": "ISINCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISINCheckDigit.java.ISINCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Calculates the <em>weighted</em> value of a character in the\ncode at a specified position.</p>\n\n<p>For ISIN (from right to left) <b>odd</b> digits are weighted\nwith a factor of <b>one</b> and <b>even</b> digits with a factor\nof <b>two</b>. Weighted values are reduced to their digital root</p>\n\n@param charValue The numeric value of the character.\n@param leftPos  The position of the character in the code, counting from left to right\n@param rightPos The position of the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[int]sumDigits(int)", "name": "sumDigits", "arg_nums": 1, "params": [{"name": "number", "type": "int"}], "return_type": "int", "signature": "public static int sumDigits(final int number)", "original_string": "    public static int sumDigits(final int number) {\n        int total = 0;\n        int todo = number;\n        while (todo > 0) {\n            total += todo % 10; // CHECKSTYLE IGNORE MagicNumber\n            todo /= 10; // CHECKSTYLE IGNORE MagicNumber\n        }\n        return total;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nAdd together the individual digits in a number.\n\n@param number The number whose digits are to be added\n@return The sum of the digits\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[]ModulusCheckDigit()", "name": "ModulusCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "ModulusCheckDigit()", "original_string": "    ModulusCheckDigit() {\n        this(MODULUS_10);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 {@link CheckDigit} routine for a specified modulus.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[]ModulusCheckDigit(int)", "name": "ModulusCheckDigit", "arg_nums": 1, "params": [{"name": "modulus", "type": "int"}], "return_type": "", "signature": "public ModulusCheckDigit(final int modulus)", "original_string": "    public ModulusCheckDigit(final int modulus) {\n        this.modulus = modulus;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a {@link CheckDigit} routine for a specified modulus.\n\n@param modulus The modulus value to use for the check digit calculation\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[String]calculate(String)", "name": "calculate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    public String calculate(final String code)", "original_string": "    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"Code is missing\");\n        }\n        final int modulusResult = calculateModulus(code, false);\n        final int charValue = (modulus - modulusResult) % modulus;\n        return toCheckDigit(charValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCalculate a modulus <em>Check Digit</em> for a code which does not yet have one.\n\n@param code The code for which to calculate the Check Digit;\nthe check digit should not be included\n@return The calculated Check Digit\n@throws CheckDigitException if an error occurs calculating the check digit\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[int]calculateModulus(String,boolean)", "name": "calculateModulus", "arg_nums": 2, "params": [{"name": "code", "type": "String"}, {"name": "includesCheckDigit", "type": "boolean"}], "return_type": "int", "signature": "protected int calculateModulus(final String code, final boolean includesCheckDigit)", "original_string": "    protected int calculateModulus(final String code, final boolean includesCheckDigit) throws CheckDigitException {\n        int total = 0;\n        for (int i = 0; i < code.length(); i++) {\n            final int lth = code.length() + (includesCheckDigit ? 0 : 1);\n            final int leftPos = i + 1;\n            final int rightPos = lth - i;\n            final int charValue = toInt(code.charAt(i), leftPos, rightPos);\n            total += weightedValue(charValue, leftPos, rightPos);\n        }\n        if (total == 0) {\n            throw new CheckDigitException(\"Invalid code, sum is zero\");\n        }\n        return total % modulus;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate the modulus for a code.\n\n@param code The code to calculate the modulus for.\n@param includesCheckDigit Whether the code includes the Check Digit or not.\n@return The modulus value\n@throws CheckDigitException if an error occurs calculating the modulus\nfor the specified code\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[int]getModulus()", "name": "getModulus", "arg_nums": 0, "params": [], "return_type": "int", "signature": "public int getModulus()", "original_string": "    public int getModulus() {\n        return modulus;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nGets the modulus value this check digit routine is based on.\n\n@return The modulus value this check digit routine is based on\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String code)", "original_string": "    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        try {\n            final int modulusResult = calculateModulus(code, true);\n            return modulusResult == 0;\n        } catch (final CheckDigitException ex) {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate a modulus check digit for a code.\n\n@param code The code to validate\n@return {@code true} if the check digit is valid, otherwise\n{@code false}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[String]toCheckDigit(int)", "name": "toCheckDigit", "arg_nums": 1, "params": [{"name": "charValue", "type": "int"}], "return_type": "String", "signature": "protected String toCheckDigit(final int charValue)", "original_string": "    protected String toCheckDigit(final int charValue) throws CheckDigitException {\n        if (charValue >= 0 && charValue <= 9) { // CHECKSTYLE IGNORE MagicNumber\n            return Integer.toString(charValue);\n        }\n        throw new CheckDigitException(\"Invalid Check Digit Value =\" + +charValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nConvert an integer value to a check digit.\n<p>\n<b>Note:</b> this implementation only handles single-digit numeric values\nFor non-numeric characters, override this method to provide\ninteger--&gt;character conversion.\n\n@param charValue The integer value of the character\n@return The converted character\n@throws CheckDigitException if integer character value\ndoesn't represent a numeric character\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[int]toInt(char,int,int)", "name": "toInt", "arg_nums": 3, "params": [{"name": "character", "type": "char"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "protected int toInt(final char character, final int leftPos, final int rightPos)", "original_string": "    protected int toInt(final char character, final int leftPos, final int rightPos) throws CheckDigitException {\n        if (Character.isDigit(character)) {\n            return Character.getNumericValue(character);\n        }\n        throw new CheckDigitException(\"Invalid Character[\" + leftPos + \"] = '\" + character + \"'\");\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nConvert a character at a specified position to an integer value.\n<p>\n<b>Note:</b> this implementation only handlers numeric values\nFor non-numeric characters, override this method to provide\ncharacter--&gt;integer conversion.\n\n@param character The character to convert\n@param leftPos The position of the character in the code, counting from left to right (for identifiying the position in the string)\n@param rightPos The position of the character in the code, counting from right to left (not used here)\n@return The integer value of the character\n@throws CheckDigitException if character is non-numeric\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "protected abstract int weightedValue(int charValue, int leftPos, int rightPos)", "original_string": "    protected abstract int weightedValue(int charValue, int leftPos, int rightPos) throws CheckDigitException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java", "class_name": "ModulusCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusCheckDigit.java.ModulusCheckDigit", "attributes": {"modifiers": "protected abstract", "marker_annotations": [], "non_marker_annotations": ["protected", "abstract"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculates the <em>weighted</em> value of a character in the\ncode at a specified position.\n<p>\nSome modulus routines weight the value of a character\ndepending on its position in the code (e.g. ISBN-10), while\nothers use different weighting factors for odd/even positions\n(e.g. EAN or Luhn). Implement the appropriate mechanism\nrequired by overriding this method.\n\n@param charValue The numeric value of the character\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The weighted value of the character\n@throws CheckDigitException if an error occurs calculating\nthe weighted value\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java.LuhnCheckDigit.[]LuhnCheckDigit()", "name": "LuhnCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public LuhnCheckDigit()", "original_string": "    public LuhnCheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java", "class_name": "LuhnCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java.LuhnCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Luhn Check Digit routine.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java.LuhnCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 2]; // CHECKSTYLE IGNORE MagicNumber\n        final int weightedValue = charValue * weight;\n        return weightedValue > 9 ? weightedValue - 9 : weightedValue; // CHECKSTYLE IGNORE MagicNumber\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java", "class_name": "LuhnCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/LuhnCheckDigit.java.LuhnCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Calculates the <em>weighted</em> value of a character in the\ncode at a specified position.</p>\n\n<p>For Luhn (from right to left) <b>odd</b> digits are weighted\nwith a factor of <b>one</b> and <b>even</b> digits with a factor\nof <b>two</b>. Weighted values &gt; 9, have 9 subtracted</p>\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The position of the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[CheckDigit]getInstance()", "name": "getInstance", "arg_nums": 0, "params": [], "return_type": "CheckDigit", "signature": "public static CheckDigit getInstance()", "original_string": "    public static CheckDigit getInstance() {\n        return INSTANCE;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java", "class_name": "CASNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "CheckDigit", "classes": []}, "docstring": "\nGets the singleton instance of this validator.\n@return A singleton instance of the CAS Number validator.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[]CASNumberCheckDigit()", "name": "CASNumberCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "private CASNumberCheckDigit()", "original_string": "    private CASNumberCheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java", "class_name": "CASNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Check Digit routine for CAS Numbers.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[String]calculate(String)", "name": "calculate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    public String calculate(final String code)", "original_string": "    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"Code is missing\");\n        }\n        final int modulusResult = INSTANCE.calculateModulus(code, false);\n        return toCheckDigit(modulusResult);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java", "class_name": "CASNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n{@inheritDoc}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String code)", "original_string": "    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        final Object cde = REGEX_VALIDATOR.validate(code);\n        if (!(cde instanceof String)) {\n            return false;\n        }\n        try {\n            final int modulusResult = INSTANCE.calculateModulus((String) cde, true);\n            return modulusResult == Character.getNumericValue(code.charAt(code.length() - 1));\n        } catch (final CheckDigitException ex) {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java", "class_name": "CASNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\n{@inheritDoc}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[(rightPos - 1) % MODULUS_10];\n        return charValue * weight;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java", "class_name": "CASNumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CASNumberCheckDigit.java.CASNumberCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculates the <em>weighted</em> value of a character in the code at a specified position.\n<p>\nCAS numbers are weighted in the following manner:\n</p>\n<pre>{@code\n   right position: 1  2  3  4  5  6  7  8  9 10\n           weight: 1  2  3  4  5  6  7  8  9  0\n}</pre>\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java.ABANumberCheckDigit.[]ABANumberCheckDigit()", "name": "ABANumberCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ABANumberCheckDigit()", "original_string": "    public ABANumberCheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java", "class_name": "ABANumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java.ABANumberCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Check Digit routine for ABA Numbers.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java.ABANumberCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int weight = POSITION_WEIGHT[rightPos % 3]; // CHECKSTYLE IGNORE MagicNumber\n        return charValue * weight;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java", "class_name": "ABANumberCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ABANumberCheckDigit.java.ABANumberCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculates the <em>weighted</em> value of a character in the\ncode at a specified position.\n<p>\nABA Routing numbers are weighted in the following manner:\n<pre>{@code\n    left position: 1  2  3  4  5  6  7  8  9\n           weight: 3  7  1  3  7  1  3  7  1\n}</pre>\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java.CheckDigit.[String]calculate(String)", "name": "calculate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "String calculate(String code)", "original_string": "    String calculate(String code) throws CheckDigitException;", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java", "class_name": "CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java.CheckDigit", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCalculates the <em>Check Digit</em> for a code.\n\n@param code The code to calculate the Check Digit for.\nThe string must not include the check digit\n@return The calculated Check Digit\n@throws CheckDigitException if an error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java.CheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "boolean isValid(String code)", "original_string": "    boolean isValid(String code);", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java", "class_name": "CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java.CheckDigit", "attributes": {"modifiers": "", "marker_annotations": [], "non_marker_annotations": [], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidates the check digit for the code.\n\n@param code The code to validate, the string must include the check digit.\n@return {@code true} if the check digit is valid, otherwise\n{@code false}.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[]ISBN10CheckDigit()", "name": "ISBN10CheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ISBN10CheckDigit()", "original_string": "    public ISBN10CheckDigit() {\n        super(MODULUS_11);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java", "class_name": "ISBN10CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 11 Check Digit routine for ISBN-10.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[String]toCheckDigit(int)", "name": "toCheckDigit", "arg_nums": 1, "params": [{"name": "charValue", "type": "int"}], "return_type": "String", "signature": "@Override\n    protected String toCheckDigit(final int charValue)", "original_string": "    @Override\n    protected String toCheckDigit(final int charValue)\n            throws CheckDigitException {\n        if (charValue == 10) {  // CHECKSTYLE IGNORE MagicNumber\n            return \"X\";\n        }\n        return super.toCheckDigit(charValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java", "class_name": "ISBN10CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Convert an integer value to a character at a specified position.</p>\n\n<p>Value '10' for position 1 (check digit) converted to 'X'.</p>\n\n@param charValue The integer value of the character.\n@return The converted character.\n@throws CheckDigitException if an error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[int]toInt(char,int,int)", "name": "toInt", "arg_nums": 3, "params": [{"name": "character", "type": "char"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)\n            throws CheckDigitException {\n        if (rightPos == 1 && character == 'X') {\n            return 10;  // CHECKSTYLE IGNORE MagicNumber\n        }\n        return super.toInt(character, leftPos, rightPos);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java", "class_name": "ISBN10CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\n<p>Convert a character at a specified position to an\ninteger value.</p>\n\n<p>Character 'X' check digit converted to 10.</p>\n\n@param character The character to convert.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The position of the character in the code, counting from right to left\n@return The integer value of the character.\n@throws CheckDigitException if an error occurs.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        return charValue * rightPos;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java", "class_name": "ISBN10CheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISBN10CheckDigit.java.ISBN10CheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculates the <em>weighted</em> value of a character in the\ncode at a specified position.\n\n<p>For ISBN-10 (from right to left) digits are weighted\nby their position.</p>\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from left to right\n@param rightPos The positionof the character in the code, counting from right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException.[]CheckDigitException()", "name": "CheckDigitException", "arg_nums": 0, "params": [], "return_type": "", "signature": "public CheckDigitException()", "original_string": "    public CheckDigitException() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java", "class_name": "CheckDigitException", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an Exception with no message.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException.[]CheckDigitException(String)", "name": "CheckDigitException", "arg_nums": 1, "params": [{"name": "msg", "type": "String"}], "return_type": "", "signature": "public CheckDigitException(final String msg)", "original_string": "    public CheckDigitException(final String msg) {\n        super(msg);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java", "class_name": "CheckDigitException", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an Exception with a message.\n\n@param msg The error message.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException.[]CheckDigitException(String,Throwable)", "name": "CheckDigitException", "arg_nums": 2, "params": [{"name": "msg", "type": "String"}, {"name": "cause", "type": "Throwable"}], "return_type": "", "signature": "public CheckDigitException(final String msg, final Throwable cause)", "original_string": "    public CheckDigitException(final String msg, final Throwable cause) {\n        super(msg, cause);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java", "class_name": "CheckDigitException", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigitException.java.CheckDigitException", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs an Exception with a message and\nthe underlying cause.\n\n@param msg The error message.\n@param cause The underlying cause of the error\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[]IBANCheckDigit()", "name": "IBANCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public IBANCheckDigit()", "original_string": "    public IBANCheckDigit() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java", "class_name": "IBANCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs Check Digit routine for IBAN Numbers.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[String]calculate(String)", "name": "calculate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    public String calculate(String code)", "original_string": "    @Override\n    public String calculate(String code) throws CheckDigitException {\n        if (code == null || code.length() < MIN_CODE_LEN) {\n            throw new CheckDigitException(\"Invalid Code length=\" + (code == null ? 0 : code.length()));\n        }\n        code = code.substring(0, 2) + \"00\" + code.substring(4); // CHECKSTYLE IGNORE MagicNumber\n        final int modulusResult = calculateModulus(code);\n        final int charValue = 98 - modulusResult; // CHECKSTYLE IGNORE MagicNumber\n        final String checkDigit = Integer.toString(charValue);\n        return charValue > 9 ? checkDigit : \"0\" + checkDigit; // CHECKSTYLE IGNORE MagicNumber\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java", "class_name": "IBANCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCalculate the <em>Check Digit</em> for an IBAN code.\n<p>\n<b>Note:</b> The check digit is the third and fourth\ncharacters and is set to the value \"{@code 00}\".\n\n@param code The code to calculate the Check Digit for\n@return The calculated Check Digit as 2 numeric decimal characters, e.g. \"42\"\n@throws CheckDigitException if an error occurs calculating\nthe check digit for the specified code\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[int]calculateModulus(String)", "name": "calculateModulus", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "int", "signature": "private int calculateModulus(final String code)", "original_string": "    private int calculateModulus(final String code) throws CheckDigitException {\n        final String reformattedCode = code.substring(4) + code.substring(0, 4); // CHECKSTYLE IGNORE MagicNumber\n        long total = 0;\n        for (int i = 0; i < reformattedCode.length(); i++) {\n            final int charValue = Character.getNumericValue(reformattedCode.charAt(i));\n            if (charValue < 0 || charValue > MAX_ALPHANUMERIC_VALUE) {\n                throw new CheckDigitException(\"Invalid Character[\" + i + \"] = '\" + charValue + \"'\");\n            }\n            total = (charValue > 9 ? total * 100 : total * 10) + charValue; // CHECKSTYLE IGNORE MagicNumber\n            if (total > MAX) {\n                total %= MODULUS;\n            }\n        }\n        return (int) (total % MODULUS);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java", "class_name": "IBANCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate the modulus for a code.\n\n@param code The code to calculate the modulus for.\n@return The modulus value\n@throws CheckDigitException if an error occurs calculating the modulus\nfor the specified code\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String code)", "original_string": "    @Override\n    public boolean isValid(final String code) {\n        if (code == null || code.length() < MIN_CODE_LEN) {\n            return false;\n        }\n        final String check = code.substring(2, 4); // CHECKSTYLE IGNORE MagicNumber\n        if (\"00\".equals(check) || \"01\".equals(check) || \"99\".equals(check)) {\n            return false;\n        }\n        try {\n            return calculateModulus(code) == 1;\n        } catch (final CheckDigitException ex) {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java", "class_name": "IBANCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/IBANCheckDigit.java.IBANCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate the check digit of an IBAN code.\n\n@param code The code to validate\n@return {@code true} if the check digit is valid, otherwise\n{@code false}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[]ModulusTenCheckDigit(int[])", "name": "ModulusTenCheckDigit", "arg_nums": 1, "params": [{"name": "postitionWeight", "type": "int[]"}], "return_type": "", "signature": "public ModulusTenCheckDigit(final int[] postitionWeight)", "original_string": "    public ModulusTenCheckDigit(final int[] postitionWeight) {\n        this(postitionWeight, false, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "class_name": "ModulusTenCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Check Digit routine with the specified weighting\nfrom left to right.\n\n@param postitionWeight the weighted values to apply based on the\n           character position\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[]ModulusTenCheckDigit(int[],boolean)", "name": "ModulusTenCheckDigit", "arg_nums": 2, "params": [{"name": "postitionWeight", "type": "int[]"}, {"name": "useRightPos", "type": "boolean"}], "return_type": "", "signature": "public ModulusTenCheckDigit(final int[] postitionWeight, final boolean useRightPos)", "original_string": "    public ModulusTenCheckDigit(final int[] postitionWeight, final boolean useRightPos) {\n        this(postitionWeight, useRightPos, false);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "class_name": "ModulusTenCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Check Digit routine with the specified weighting,\nindicating whether its from the left or right.\n\n@param postitionWeight the weighted values to apply based on the\n           character position\n@param useRightPos {@code true} if use positionWeights from right to\n           left\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[]ModulusTenCheckDigit(int[],boolean,boolean)", "name": "ModulusTenCheckDigit", "arg_nums": 3, "params": [{"name": "postitionWeight", "type": "int[]"}, {"name": "useRightPos", "type": "boolean"}, {"name": "sumWeightedDigits", "type": "boolean"}], "return_type": "", "signature": "public ModulusTenCheckDigit(final int[] postitionWeight, final boolean useRightPos, final boolean sumWeightedDigits)", "original_string": "    public ModulusTenCheckDigit(final int[] postitionWeight, final boolean useRightPos, final boolean sumWeightedDigits) {\n        this.postitionWeight = Arrays.copyOf(postitionWeight, postitionWeight.length);\n        this.useRightPos = useRightPos;\n        this.sumWeightedDigits = sumWeightedDigits;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "class_name": "ModulusTenCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nConstructs a modulus 10 Check Digit routine with the specified weighting,\nindicating whether its from the left or right and whether the weighted\ndigits should be summed.\n\n@param postitionWeight the weighted values to apply based on the\n           character position\n@param useRightPos {@code true} if use positionWeights from right to\n           left\n@param sumWeightedDigits {@code true} if sum the digits of the\n           weighted value\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String code)", "original_string": "    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        if (!Character.isDigit(code.charAt(code.length() - 1))) {\n            return false;\n        }\n        return super.isValid(code);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "class_name": "ModulusTenCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate a modulus check digit for a code.\n<p>\nNote: assumes last digit is the check digit\n\n@param code The code to validate\n@return {@code true} if the check digit is valid, otherwise\n        {@code false}\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[int]toInt(char,int,int)", "name": "toInt", "arg_nums": 3, "params": [{"name": "character", "type": "char"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos) throws CheckDigitException {\n        final int num = Character.getNumericValue(character);\n        if (num < 0) {\n            throw new CheckDigitException(\"Invalid Character[\" + leftPos + \"] = '\" + character + \"'\");\n        }\n        return num;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "class_name": "ModulusTenCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nConvert a character at a specified position to an integer value.\n<p>\n<b>Note:</b> this implementation only handlers values that\nCharacter.getNumericValue(char) returns a non-negative number.\n\n@param character The character to convert\n@param leftPos The position of the character in the code, counting from\n           left to right (for identifying the position in the string)\n@param rightPos The position of the character in the code, counting from\n           right to left (not used here)\n@return The integer value of the character\n@throws CheckDigitException if Character.getNumericValue(char) returns a\n            negative number\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        return getClass().getSimpleName() + \"[postitionWeight=\" + Arrays.toString(postitionWeight) + \", useRightPos=\"\n                + useRightPos + \", sumWeightedDigits=\" + sumWeightedDigits + \"]\";\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "class_name": "ModulusTenCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturn a string representation of this implementation.\n\n@return a string representation\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) {\n        final int pos = useRightPos ? rightPos : leftPos;\n        final int weight = postitionWeight[(pos - 1) % postitionWeight.length];\n        int weightedValue = charValue * weight;\n        if (sumWeightedDigits) {\n            weightedValue = sumDigits(weightedValue);\n        }\n        return weightedValue;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java", "class_name": "ModulusTenCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ModulusTenCheckDigit.java.ModulusTenCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculates the <em>weighted</em> value of a character in the code at a\nspecified position.\n\n@param charValue The numeric value of the character.\n@param leftPos The position of the character in the code, counting from\n           left to right\n@param rightPos The position of the character in the code, counting from\n           right to left\n@return The weighted value of the character.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[]ISSNCheckDigit()", "name": "ISSNCheckDigit", "arg_nums": 0, "params": [], "return_type": "", "signature": "public ISSNCheckDigit()", "original_string": "    public ISSNCheckDigit() {\n        super(MODULUS_11);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java", "class_name": "ISSNCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreates the instance using a checkdigit modulus of 11.\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[String]toCheckDigit(int)", "name": "toCheckDigit", "arg_nums": 1, "params": [{"name": "charValue", "type": "int"}], "return_type": "String", "signature": "@Override\n    protected String toCheckDigit(final int charValue)", "original_string": "    @Override\n    protected String toCheckDigit(final int charValue) throws CheckDigitException {\n        if (charValue == 10) { // CHECKSTYLE IGNORE MagicNumber\n            return \"X\";\n        }\n        return super.toCheckDigit(charValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java", "class_name": "ISSNCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "String", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[int]toInt(char,int,int)", "name": "toInt", "arg_nums": 3, "params": [{"name": "character", "type": "char"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int toInt(final char character, final int leftPos, final int rightPos)\n            throws CheckDigitException {\n        if (rightPos == 1 && character == 'X') {\n            return 10; // CHECKSTYLE IGNORE MagicNumber\n        }\n        return super.toInt(character, leftPos, rightPos);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java", "class_name": "ISSNCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit.[int]weightedValue(int,int,int)", "name": "weightedValue", "arg_nums": 3, "params": [{"name": "charValue", "type": "int"}, {"name": "leftPos", "type": "int"}, {"name": "rightPos", "type": "int"}], "return_type": "int", "signature": "@Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos)", "original_string": "    @Override\n    protected int weightedValue(final int charValue, final int leftPos, final int rightPos) throws CheckDigitException {\n        return charValue * (9 - leftPos); // CHECKSTYLE IGNORE MagicNumber\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java", "class_name": "ISSNCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/ISSNCheckDigit.java.ISSNCheckDigit", "attributes": {"modifiers": "@Override\n    protected", "marker_annotations": ["@Override"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "int", "classes": []}, "docstring": ""}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit.[String]calculate(String)", "name": "calculate", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "String", "signature": "@Override\n    public String calculate(final String code)", "original_string": "    @Override\n    public String calculate(final String code) throws CheckDigitException {\n        if (GenericValidator.isBlankOrNull(code)) {\n            throw new CheckDigitException(\"Code is missing\");\n        }\n        final int checksum = calculateChecksum(code, false);\n        return Integer.toString(INV_TABLE[checksum]);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java", "class_name": "VerhoeffCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nCalculate a Verhoeff <em>Check Digit</em> for a code.\n\n@param code The code to calculate the Check Digit for\n@return The calculated Check Digit\n@throws CheckDigitException if an error occurs calculating\nthe check digit for the specified code\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit.[int]calculateChecksum(String,boolean)", "name": "calculateChecksum", "arg_nums": 2, "params": [{"name": "code", "type": "String"}, {"name": "includesCheckDigit", "type": "boolean"}], "return_type": "int", "signature": "private int calculateChecksum(final String code, final boolean includesCheckDigit)", "original_string": "    private int calculateChecksum(final String code, final boolean includesCheckDigit) throws CheckDigitException {\n        int checksum = 0;\n        for (int i = 0; i < code.length(); i++) {\n            final int idx = code.length() - (i + 1);\n            final int num = Character.getNumericValue(code.charAt(idx));\n            if (num < 0 || num > 9) { // CHECKSTYLE IGNORE MagicNumber\n                throw new CheckDigitException(\"Invalid Character[\" +\n                        i + \"] = '\" + (int) code.charAt(idx) + \"'\");\n            }\n            final int pos = includesCheckDigit ? i : i + 1;\n            checksum = D_TABLE[checksum][P_TABLE[pos % 8][num]]; // CHECKSTYLE IGNORE MagicNumber\n        }\n        return checksum;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java", "class_name": "VerhoeffCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit", "attributes": {"modifiers": "private", "marker_annotations": [], "non_marker_annotations": ["private"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nCalculate the checksum.\n\n@param code The code to calculate the checksum for.\n@param includesCheckDigit Whether the code includes the Check Digit or not.\n@return The checksum value\n@throws CheckDigitException if the code contains an invalid character (i.e. not numeric)\n"}, {"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit.[boolean]isValid(String)", "name": "isValid", "arg_nums": 1, "params": [{"name": "code", "type": "String"}], "return_type": "boolean", "signature": "@Override\n    public boolean isValid(final String code)", "original_string": "    @Override\n    public boolean isValid(final String code) {\n        if (GenericValidator.isBlankOrNull(code)) {\n            return false;\n        }\n        try {\n            return calculateChecksum(code, true) == 0;\n        } catch (final CheckDigitException e) {\n            return false;\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java", "class_name": "VerhoeffCheckDigit", "class_uri": "src/main/java/org/apache/commons/validator/routines/checkdigit/VerhoeffCheckDigit.java.VerhoeffCheckDigit", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nValidate the Verhoeff <em>Check Digit</em> for a code.\n\n@param code The code to validate\n@return {@code true} if the check digit is valid,\notherwise {@code false}\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[]Flags()", "name": "Flags", "arg_nums": 0, "params": [], "return_type": "", "signature": "public Flags()", "original_string": "    public Flags() {\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nCreate a new Flags object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[]Flags(long)", "name": "Flags", "arg_nums": 1, "params": [{"name": "flags", "type": "long"}], "return_type": "", "signature": "public Flags(final long flags)", "original_string": "    public Flags(final long flags) {\n        this.flags = flags;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "", "classes": []}, "docstring": "\nInitialize a new Flags object with the given flags.\n\n@param flags collection of boolean flags to represent.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]clear()", "name": "clear", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void clear()", "original_string": "    public void clear() {\n        flags = 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTurn off all flags.  This is a synonym for {@code turnOffAll()}.\n@since 1.1.1\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[Object]clone()", "name": "clone", "arg_nums": 0, "params": [], "return_type": "Object", "signature": "@Override\n    public Object clone()", "original_string": "    @Override\n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (final CloneNotSupportedException e) {\n            throw new UnsupportedOperationException(\"Couldn't clone Flags object.\", e);\n        }\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "Object", "classes": []}, "docstring": "\nClone this Flags object.\n\n@return a copy of this object.\n@see Object#clone()\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[boolean]equals(Object)", "name": "equals", "arg_nums": 1, "params": [{"name": "obj", "type": "Object"}], "return_type": "boolean", "signature": "@Override\n    public boolean equals(final Object obj)", "original_string": "    @Override\n    public boolean equals(final Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof Flags)) {\n            return false;\n        }\n        final Flags other = (Flags) obj;\n        return flags == other.flags;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests if two Flags objects are in the same state.\n@param obj object being tested\n@see Object#equals(Object)\n\n@return whether the objects are equal.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[long]getFlags()", "name": "getFlags", "arg_nums": 0, "params": [], "return_type": "long", "signature": "public long getFlags()", "original_string": "    public long getFlags() {\n        return flags;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "long", "classes": []}, "docstring": "\nReturns the current flags.\n\n@return collection of boolean flags represented.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[int]hashCode()", "name": "hashCode", "arg_nums": 0, "params": [], "return_type": "int", "signature": "@Override\n    public int hashCode()", "original_string": "    @Override\n    public int hashCode() {\n        return (int) flags;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "int", "classes": []}, "docstring": "\nThe hash code is based on the current state of the flags.\n@see Object#hashCode()\n\n@return the hash code for this object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[boolean]isOff(long)", "name": "isOff", "arg_nums": 1, "params": [{"name": "flag", "type": "long"}], "return_type": "boolean", "signature": "public boolean isOff(final long flag)", "original_string": "    public boolean isOff(final long flag) {\n        return (flags & flag) == 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given flag is off.  If the flag is not a power of 2\n(ie. 3) this tests whether the combination of flags is off.\n\n@param flag Flag value to check.\n\n@return whether the specified flag value is off.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[boolean]isOn(long)", "name": "isOn", "arg_nums": 1, "params": [{"name": "flag", "type": "long"}], "return_type": "boolean", "signature": "public boolean isOn(final long flag)", "original_string": "    public boolean isOn(final long flag) {\n        return (flags & flag) == flag;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "boolean", "classes": []}, "docstring": "\nTests whether the given flag is on.  If the flag is not a power of 2\n(ie. 3) this tests whether the combination of flags is on.\n\n@param flag Flag value to check.\n\n@return whether the specified flag value is on.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[String]toString()", "name": "toString", "arg_nums": 0, "params": [], "return_type": "String", "signature": "@Override\n    public String toString()", "original_string": "    @Override\n    public String toString() {\n        final StringBuilder bin = new StringBuilder(Long.toBinaryString(flags));\n        for (int i = 64 - bin.length(); i > 0; i--) { // CHECKSTYLE IGNORE MagicNumber\n            bin.insert(0, \"0\");\n        }\n        return bin.toString();\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "@Override\n    public", "marker_annotations": ["@Override"], "non_marker_annotations": ["public"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nReturns a 64 length String with the first flag on the right and the\n64th flag on the left.  A 1 indicates the flag is on, a 0 means it's\noff.\n\n@return string representation of this object.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOff(long)", "name": "turnOff", "arg_nums": 1, "params": [{"name": "flag", "type": "long"}], "return_type": "void", "signature": "public void turnOff(final long flag)", "original_string": "    public void turnOff(final long flag) {\n        flags &= ~flag;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTurns off the given flag.  If the flag is not a power of 2 (ie. 3) this\nturns off multiple flags.\n\n@param flag Flag value to turn off.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOffAll()", "name": "turnOffAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void turnOffAll()", "original_string": "    public void turnOffAll() {\n        flags = 0;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTurn off all flags.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOn(long)", "name": "turnOn", "arg_nums": 1, "params": [{"name": "flag", "type": "long"}], "return_type": "void", "signature": "public void turnOn(final long flag)", "original_string": "    public void turnOn(final long flag) {\n        flags |= flag;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTurns on the given flag.  If the flag is not a power of 2 (ie. 3) this\nturns on multiple flags.\n\n@param flag Flag value to turn on.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags.[void]turnOnAll()", "name": "turnOnAll", "arg_nums": 0, "params": [], "return_type": "void", "signature": "public void turnOnAll()", "original_string": "    public void turnOnAll() {\n        flags = 0xFFFFFFFFFFFFFFFFL;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/Flags.java", "class_name": "Flags", "class_uri": "src/main/java/org/apache/commons/validator/util/Flags.java.Flags", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTurn on all 64 flags.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[FastHashMap]copyFastHashMap(FastHashMap)", "name": "copyFastHashMap", "arg_nums": 1, "params": [{"name": "fastHashMap", "type": "FastHashMap"}], "return_type": "FastHashMap", "signature": "@Deprecated\n    public static FastHashMap copyFastHashMap(final FastHashMap fastHashMap)", "original_string": "    @Deprecated\n    public static FastHashMap copyFastHashMap(final FastHashMap fastHashMap) {\n        final FastHashMap results = new FastHashMap();\n        @SuppressWarnings(\"unchecked\") // FastHashMap is not generic\n        final Iterator<Entry<String, ?>> iterator = fastHashMap.entrySet().iterator();\n        while (iterator.hasNext()) {\n            final Entry<String, ?> entry = iterator.next();\n            final String key = entry.getKey();\n            final Object value = entry.getValue();\n            if (value instanceof Msg) {\n                results.put(key, ((Msg) value).clone());\n            } else if (value instanceof Arg) {\n                results.put(key, ((Arg) value).clone());\n            } else if (value instanceof Var) {\n                results.put(key, ((Var) value).clone());\n            } else {\n                results.put(key, value);\n            }\n        }\n        results.setFast(true);\n        return results;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java", "class_name": "ValidatorUtils", "class_uri": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils", "attributes": {"modifiers": "@Deprecated\n    public static", "marker_annotations": ["@Deprecated"], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "FastHashMap", "classes": []}, "docstring": "\nMakes a deep copy of a {@code FastHashMap} if the values\nare {@code Msg}, {@code Arg},\nor {@code Var}.  Otherwise it is a shallow copy.\n\n@param fastHashMap {@code FastHashMap} to copy.\n@return FastHashMap A copy of the {@code FastHashMap} that was\npassed in.\n@deprecated This method is not part of Validator's public API.  Validator\nwill use it internally until FastHashMap references are removed.  Use\ncopyMap() instead.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[Map<String, Object>]copyMap(Map<String, Object>)", "name": "copyMap", "arg_nums": 1, "params": [{"name": "map", "type": "Map<String, Object>"}], "return_type": "Map<String, Object>", "signature": "public static Map<String, Object> copyMap(final Map<String, Object> map)", "original_string": "    public static Map<String, Object> copyMap(final Map<String, Object> map) {\n        final Map<String, Object> results = new HashMap<>(map.size());\n        map.forEach((key, value) -> {\n            if (value instanceof Msg) {\n                results.put(key, ((Msg) value).clone());\n            } else if (value instanceof Arg) {\n                results.put(key, ((Arg) value).clone());\n            } else if (value instanceof Var) {\n                results.put(key, ((Var) value).clone());\n            } else {\n                results.put(key, value);\n            }\n        });\n        return results;\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java", "class_name": "ValidatorUtils", "class_uri": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "Map<String, Object>", "classes": []}, "docstring": "\nMakes a deep copy of a {@link Map} if the values are\n{@code Msg}, {@code Arg}, or {@code Var}.  Otherwise,\nit is a shallow copy.\n\n@param map The source Map to copy.\n\n@return A copy of the {@link Map} that was passed in.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[String]getValueAsString(Object,String)", "name": "getValueAsString", "arg_nums": 2, "params": [{"name": "bean", "type": "Object"}, {"name": "property", "type": "String"}], "return_type": "String", "signature": "public static String getValueAsString(final Object bean, final String property)", "original_string": "    public static String getValueAsString(final Object bean, final String property) {\n        Object value = null;\n\n        try {\n            value = PropertyUtils.getProperty(bean, property);\n\n        } catch (final ReflectiveOperationException e) {\n            LOG.error(e.getMessage(), e);\n        }\n\n        if (value == null) {\n            return null;\n        }\n\n        if (value instanceof String[]) {\n            return ((String[]) value).length > 0 ? value.toString() : \"\";\n\n        }\n        if (value instanceof Collection) {\n            return ((Collection<?>) value).isEmpty() ? \"\" : value.toString();\n\n        }\n        return value.toString();\n\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java", "class_name": "ValidatorUtils", "class_uri": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\nConvenience method for getting a value from a bean property as a\n{@link String}.  If the property is a {@code String[]} or\n{@link Collection} and it is empty, an empty {@link String}\n\"\" is returned.  Otherwise, property.toString() is returned.  This method\nmay return {@code null} if there was an error retrieving the\nproperty.\n\n@param bean The bean object.\n@param property The name of the property to access.\n\n@return The value of the property.\n"}, {"uris": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils.[String]replace(String,String,String)", "name": "replace", "arg_nums": 3, "params": [{"name": "value", "type": "String"}, {"name": "key", "type": "String"}, {"name": "replaceValue", "type": "String"}], "return_type": "String", "signature": "public static String replace(final String value, final String key, final String replaceValue)", "original_string": "    public static String replace(final String value, final String key, final String replaceValue) {\n        if (value == null || key == null || replaceValue == null) {\n            return value;\n        }\n        return value.replace(key, replaceValue);\n    }", "default_arguments": null, "file": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java", "class_name": "ValidatorUtils", "class_uri": "src/main/java/org/apache/commons/validator/util/ValidatorUtils.java.ValidatorUtils", "attributes": {"modifiers": "public static", "marker_annotations": [], "non_marker_annotations": ["public", "static"], "comments": [], "return_type": "String", "classes": []}, "docstring": "\n<p>Replace part of a {@link String} with another value.</p>\n\n@param value {@link String} to perform the replacement on.\n@param key The name of the constant.\n@param replaceValue The value of the constant.\n\n@return The modified value.\n"}]