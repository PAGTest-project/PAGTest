[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines.checkdigit;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ISBNCheckDigit_isValidTest {\n    private ISBNCheckDigit routine;\n\n    @BeforeEach\n    protected void setUp() {\n        routine = ISBNCheckDigit.ISBN_CHECK_DIGIT;\n    }\n\n    @Test\n    public void testIsValidWithNullCode() {\n        assertFalse(routine.isValid(null), \"isValid() with null code\");\n    }\n\n    @Test\n    public void testIsValidWithValidISBN10() {\n        assertTrue(routine.isValid(\"020163385X\"), \"isValid() with valid ISBN-10\");\n    }\n\n    @Test\n    public void testIsValidWithValidISBN13() {\n        assertTrue(routine.isValid(\"9780072129519\"), \"isValid() with valid ISBN-13\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidLength() {\n        assertFalse(routine.isValid(\"123456789\"), \"isValid() with length 9\");\n        assertFalse(routine.isValid(\"12345678901\"), \"isValid() with length 11\");\n        assertFalse(routine.isValid(\"123456789012\"), \"isValid() with length 12\");\n        assertFalse(routine.isValid(\"12345678901234\"), \"isValid() with length 14\");\n    }\n\n    @Test\n    public void testIsValidWithInvalidCheckDigit() {\n        assertFalse(routine.isValid(\"0201633851\"), \"isValid() with invalid ISBN-10 check digit\");\n        assertFalse(routine.isValid(\"9780072129518\"), \"isValid() with invalid ISBN-13 check digit\");\n    }\n}\n"}]