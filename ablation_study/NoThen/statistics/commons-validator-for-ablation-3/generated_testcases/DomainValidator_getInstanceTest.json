[{"strategy": "retry", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\n\npublic class DomainValidator_getInstanceTest {\n    private DomainValidator validator;\n\n    @BeforeEach\n    public void setUp() {\n        validator = DomainValidator.getInstance(false);\n    }\n\n    @Test\n    public void testGetInstanceWithLocalAllowed() {\n        DomainValidator localValidator = DomainValidator.getInstance(true);\n        assertNotNull(localValidator);\n        assertTrue(localValidator.isAllowLocal());\n    }\n\n    @Test\n    public void testGetInstanceWithLocalNotAllowed() {\n        DomainValidator nonLocalValidator = DomainValidator.getInstance(false);\n        assertNotNull(nonLocalValidator);\n        assertFalse(nonLocalValidator.isAllowLocal());\n    }\n\n    @Test\n    public void testGetInstanceWithCustomTLDs() {\n        DomainValidator.Item item = new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"custom\");\n        DomainValidator customValidator = DomainValidator.getInstance(false, Arrays.asList(item));\n        assertNotNull(customValidator);\n        assertTrue(customValidator.isValidTld(\"custom\"));\n    }\n\n    @Test\n    public void testGetInstanceWithInvalidCustomTLDs() {\n        DomainValidator.Item item = new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"invalid\");\n        DomainValidator customValidator = DomainValidator.getInstance(false, Arrays.asList(item));\n        assertNotNull(customValidator);\n        assertFalse(customValidator.isValidTld(\"invalid\"));\n    }\n\n    @Test\n    public void testGetInstanceWithLocalAndCustomTLDs() {\n        DomainValidator.Item item = new DomainValidator.Item(DomainValidator.ArrayType.GENERIC_PLUS, \"localcustom\");\n        DomainValidator localCustomValidator = DomainValidator.getInstance(true, Arrays.asList(item));\n        assertNotNull(localCustomValidator);\n        assertTrue(localCustomValidator.isAllowLocal());\n        assertTrue(localCustomValidator.isValidTld(\"localcustom\"));\n    }\n}\n"}]