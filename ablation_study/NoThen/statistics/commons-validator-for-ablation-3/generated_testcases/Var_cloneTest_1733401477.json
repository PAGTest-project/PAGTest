[{"strategy": "generate", "code": "\npackage org.apache.commons.validator;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class Var_cloneTest {\n\n    private Var var;\n\n    @BeforeEach\n    public void setUp() {\n        var = new Var(\"testName\", \"testValue\", \"testJsType\");\n        var.setResource(true);\n        var.setBundle(\"testBundle\");\n    }\n\n    @Test\n    public void testClone() {\n        Var clonedVar = (Var) var.clone();\n\n        assertNotNull(clonedVar, \"Cloned object is null.\");\n        assertEquals(var.getName(), clonedVar.getName(), \"Cloned name is wrong\");\n        assertEquals(var.getValue(), clonedVar.getValue(), \"Cloned value is wrong\");\n        assertEquals(var.getJsType(), clonedVar.getJsType(), \"Cloned jsType is wrong\");\n        assertEquals(var.isResource(), clonedVar.isResource(), \"Cloned resource status is wrong\");\n        assertEquals(var.getBundle(), clonedVar.getBundle(), \"Cloned bundle is wrong\");\n    }\n\n    @Test\n    public void testCloneWithDefaultConstructor() {\n        Var defaultVar = new Var();\n        defaultVar.setName(\"defaultName\");\n        defaultVar.setValue(\"defaultValue\");\n        defaultVar.setJsType(\"defaultJsType\");\n        defaultVar.setResource(false);\n        defaultVar.setBundle(null);\n\n        Var clonedDefaultVar = (Var) defaultVar.clone();\n\n        assertNotNull(clonedDefaultVar, \"Cloned object is null.\");\n        assertEquals(defaultVar.getName(), clonedDefaultVar.getName(), \"Cloned name is wrong\");\n        assertEquals(defaultVar.getValue(), clonedDefaultVar.getValue(), \"Cloned value is wrong\");\n        assertEquals(defaultVar.getJsType(), clonedDefaultVar.getJsType(), \"Cloned jsType is wrong\");\n        assertEquals(defaultVar.isResource(), clonedDefaultVar.isResource(), \"Cloned resource status is wrong\");\n        assertEquals(defaultVar.getBundle(), clonedDefaultVar.getBundle(), \"Cloned bundle is wrong\");\n    }\n\n    @Test\n    public void testCloneWithResourceFalse() {\n        var.setResource(false);\n        var.setBundle(null);\n\n        Var clonedVar = (Var) var.clone();\n\n        assertNotNull(clonedVar, \"Cloned object is null.\");\n        assertEquals(var.getName(), clonedVar.getName(), \"Cloned name is wrong\");\n        assertEquals(var.getValue(), clonedVar.getValue(), \"Cloned value is wrong\");\n        assertEquals(var.getJsType(), clonedVar.getJsType(), \"Cloned jsType is wrong\");\n        assertEquals(var.isResource(), clonedVar.isResource(), \"Cloned resource status is wrong\");\n        assertEquals(var.getBundle(), clonedVar.getBundle(), \"Cloned bundle is wrong\");\n    }\n}\n"}]