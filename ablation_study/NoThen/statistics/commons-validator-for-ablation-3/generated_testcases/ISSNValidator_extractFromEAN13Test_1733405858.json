[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport org.apache.commons.validator.routines.checkdigit.CheckDigitException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ISSNValidator_extractFromEAN13Test {\n\n    private ISSNValidator issnValidator;\n\n    @BeforeEach\n    public void setUp() {\n        issnValidator = new ISSNValidator();\n    }\n\n    @Test\n    public void testExtractFromEAN13Valid() {\n        String ean13 = \"9771144875007\";\n        String expectedISSN = \"1144875X\";\n        assertEquals(expectedISSN, issnValidator.extractFromEAN13(ean13));\n    }\n\n    @Test\n    public void testExtractFromEAN13InvalidLength() {\n        String ean13 = \"977114487500\";\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            issnValidator.extractFromEAN13(ean13);\n        });\n        assertTrue(exception.getMessage().contains(\"Invalid length\"));\n    }\n\n    @Test\n    public void testExtractFromEAN13InvalidPrefix() {\n        String ean13 = \"9781144875007\";\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            issnValidator.extractFromEAN13(ean13);\n        });\n        assertTrue(exception.getMessage().contains(\"Prefix must be 977\"));\n    }\n\n    @Test\n    public void testExtractFromEAN13NullResult() {\n        String ean13 = \"9771111111111\"; // Assuming this is an invalid EAN-13 code\n        assertNull(issnValidator.extractFromEAN13(ean13));\n    }\n\n    @Test\n    public void testExtractFromEAN13CheckDigitException() {\n        String ean13 = \"9771144875007\";\n        // Assuming a mock or a way to force a CheckDigitException\n        // This test case is more complex and might require mocking or changing the implementation\n        // to simulate a CheckDigitException.\n        // For simplicity, we assume the method handles it correctly and throws IllegalArgumentException.\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            issnValidator.extractFromEAN13(ean13);\n        });\n        assertTrue(exception.getMessage().contains(\"Check digit error\"));\n    }\n}\n"}]