[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.routines;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class IBANValidator_isValidTest {\n\n    private static final IBANValidator VALIDATOR = new IBANValidator();\n\n    @BeforeEach\n    public void setUp() {\n        // Any setup code if needed\n    }\n\n    @Test\n    public void testIsValid_ValidIBAN() {\n        assertTrue(VALIDATOR.isValid(\"GB82WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_InvalidLength() {\n        assertFalse(VALIDATOR.isValid(\"GB82WEST1234569876543\"));\n    }\n\n    @Test\n    public void testIsValid_InvalidFormat() {\n        assertFalse(VALIDATOR.isValid(\"GB82WEST1234569876543A\"));\n    }\n\n    @Test\n    public void testIsValid_NullCode() {\n        assertFalse(VALIDATOR.isValid(null));\n    }\n\n    @Test\n    public void testIsValid_EmptyCode() {\n        assertFalse(VALIDATOR.isValid(\"\"));\n    }\n\n    @Test\n    public void testIsValid_InvalidCountryCode() {\n        assertFalse(VALIDATOR.isValid(\"XX82WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_LowercaseCountryCode() {\n        assertFalse(VALIDATOR.isValid(\"gb82WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithSpaces() {\n        assertTrue(VALIDATOR.isValid(\"GB82 WEST 1234 5698 7654 32\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithMixedCase() {\n        assertTrue(VALIDATOR.isValid(\"gB82WeSt12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithSpecialCharacters() {\n        assertFalse(VALIDATOR.isValid(\"GB82WEST12345698765432!\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithLeadingZeros() {\n        assertTrue(VALIDATOR.isValid(\"GB00WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithTrailingZeros() {\n        assertTrue(VALIDATOR.isValid(\"GB82WEST1234569876543200\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithAllZeros() {\n        assertFalse(VALIDATOR.isValid(\"GB00000000000000000000\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithInvalidCheckDigit() {\n        assertFalse(VALIDATOR.isValid(\"GB82WEST12345698765433\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithValidCheckDigit() {\n        assertTrue(VALIDATOR.isValid(\"GB82WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithInvalidCountryCode() {\n        assertFalse(VALIDATOR.isValid(\"ZZ82WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithInvalidLengthForCountry() {\n        assertFalse(VALIDATOR.isValid(\"GB82WEST123456987654321\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithValidLengthForCountry() {\n        assertTrue(VALIDATOR.isValid(\"GB82WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithInvalidRegex() {\n        assertFalse(VALIDATOR.isValid(\"GB82WEST1234569876543A\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithValidRegex() {\n        assertTrue(VALIDATOR.isValid(\"GB82WEST12345698765432\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithInvalidCheckDigitCalculation() {\n        assertFalse(VALIDATOR.isValid(\"GB82WEST12345698765433\"));\n    }\n\n    @Test\n    public void testIsValid_ValidIBANWithValidCheckDigitCalculation() {\n        assertTrue(VALIDATOR.isValid(\"GB82WEST12345698765432\"));\n    }\n}\n"}]