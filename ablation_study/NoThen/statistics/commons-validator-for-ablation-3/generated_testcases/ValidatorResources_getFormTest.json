[{"strategy": "retry", "code": "\npackage org.apache.commons.validator;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class ValidatorResources_getFormTest {\n\n    private ValidatorResources validatorResources;\n    private FormSet formSet;\n    private Form form;\n\n    @BeforeEach\n    public void setUp() {\n        validatorResources = new ValidatorResources();\n        formSet = mock(FormSet.class);\n        form = mock(Form.class);\n    }\n\n    @Test\n    public void testGetForm_LanguageCountryVariant() {\n        // Given\n        String language = \"en\";\n        String country = \"US\";\n        String variant = \"NY\";\n        String formKey = \"testForm\";\n        String key = \"en_US_NY\";\n\n        Map<String, FormSet> formSets = new HashMap<>();\n        formSets.put(key, formSet);\n        when(formSet.getForm(formKey)).thenReturn(form);\n        validatorResources.hFormSets = new FastHashMap(formSets);\n\n        // When\n        Form result = validatorResources.getForm(language, country, variant, formKey);\n\n        // Then\n        assertEquals(form, result);\n    }\n\n    @Test\n    public void testGetForm_LanguageCountry() {\n        // Given\n        String language = \"en\";\n        String country = \"US\";\n        String variant = \"NY\";\n        String formKey = \"testForm\";\n        String key = \"en_US\";\n\n        Map<String, FormSet> formSets = new HashMap<>();\n        formSets.put(key, formSet);\n        when(formSet.getForm(formKey)).thenReturn(form);\n        validatorResources.hFormSets = new FastHashMap(formSets);\n\n        // When\n        Form result = validatorResources.getForm(language, country, variant, formKey);\n\n        // Then\n        assertEquals(form, result);\n    }\n\n    @Test\n    public void testGetForm_Language() {\n        // Given\n        String language = \"en\";\n        String country = \"US\";\n        String variant = \"NY\";\n        String formKey = \"testForm\";\n        String key = \"en\";\n\n        Map<String, FormSet> formSets = new HashMap<>();\n        formSets.put(key, formSet);\n        when(formSet.getForm(formKey)).thenReturn(form);\n        validatorResources.hFormSets = new FastHashMap(formSets);\n\n        // When\n        Form result = validatorResources.getForm(language, country, variant, formKey);\n\n        // Then\n        assertEquals(form, result);\n    }\n\n    @Test\n    public void testGetForm_DefaultFormSet() {\n        // Given\n        String language = \"en\";\n        String country = \"US\";\n        String variant = \"NY\";\n        String formKey = \"testForm\";\n\n        validatorResources.defaultFormSet = formSet;\n        when(formSet.getForm(formKey)).thenReturn(form);\n\n        // When\n        Form result = validatorResources.getForm(language, country, variant, formKey);\n\n        // Then\n        assertEquals(form, result);\n    }\n\n    @Test\n    public void testGetForm_NotFound() {\n        // Given\n        String language = \"en\";\n        String country = \"US\";\n        String variant = \"NY\";\n        String formKey = \"testForm\";\n\n        validatorResources.defaultFormSet = formSet;\n        when(formSet.getForm(formKey)).thenReturn(null);\n\n        // When\n        Form result = validatorResources.getForm(language, country, variant, formKey);\n\n        // Then\n        assertNull(result);\n    }\n}\n"}]