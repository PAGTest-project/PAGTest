[{"strategy": "generate", "code": "\npackage org.apache.commons.validator.util;\n\nimport org.apache.commons.beanutils.PropertyUtils;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.when;\n\npublic class ValidatorUtils_getValueAsStringTest {\n\n    @Test\n    public void testGetValueAsString_PropertyFound() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"someProperty\";\n        String expectedValue = \"someValue\";\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(expectedValue);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(expectedValue, result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyNotFound() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"nonExistentProperty\";\n        when(PropertyUtils.getProperty(bean, property)).thenThrow(new ReflectiveOperationException());\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertNull(result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsEmptyStringArray() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"someProperty\";\n        String[] emptyArray = new String[0];\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(emptyArray);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsNonEmptyStringArray() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"someProperty\";\n        String[] nonEmptyArray = {\"value1\", \"value2\"};\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(nonEmptyArray);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(nonEmptyArray.toString(), result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsEmptyCollection() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"someProperty\";\n        Collection<?> emptyCollection = Collections.emptyList();\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(emptyCollection);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testGetValueAsString_PropertyIsNonEmptyCollection() throws Exception {\n        // Given\n        Object bean = new Object();\n        String property = \"someProperty\";\n        Collection<?> nonEmptyCollection = Collections.singletonList(\"value\");\n        when(PropertyUtils.getProperty(bean, property)).thenReturn(nonEmptyCollection);\n\n        // When\n        String result = ValidatorUtils.getValueAsString(bean, property);\n\n        // Then\n        assertEquals(nonEmptyCollection.toString(), result);\n    }\n}\n"}]