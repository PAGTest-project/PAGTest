[{"uris": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java.CheckDigit", "name": "CheckDigit", "file_path": "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java", "superclasses": [], "methods": ["[String]calculate(String)", "[boolean]isValid(String)"], "method_uris": ["src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java.CheckDigit.[String]calculate(String)", "src/main/java/org/apache/commons/validator/routines/checkdigit/CheckDigit.java.CheckDigit.[boolean]isValid(String)"], "overrides": null, "attributes": null, "class_docstring": "\n<b>Check Digit</b> calculation and validation.\n<p>\nThe logic for validating check digits has previously been\nembedded within the logic for specific code validation, which\nincludes other validations such as verifying the format\nor length of a code. {@link CheckDigit} provides for separating out\nthe check digit calculation logic enabling it to be more easily\ntested and reused.\n</p>\n<p>\nAlthough Commons Validator is primarily concerned with validation,\n{@link CheckDigit} also defines behavior for calculating/generating check\ndigits, since it makes sense that users will want to (re-)use the\nsame logic for both. The {@link org.apache.commons.validator.routines.ISBNValidator}\nmakes specific use of this feature by providing the facility to validate ISBN-10 codes\nand then convert them to the new ISBN-13 standard.\n</p>\n<p>\nCheckDigit is used by the new generic {@link CodeValidator} implementation.\n</p>\n\n<h2>Implementations</h2>\nSee the\n<a href=\"package-summary.html\">Package Summary</a> for a full\nlist of implementations provided within Commons Validator.\n\n@see org.apache.commons.validator.routines.CodeValidator\n@since 1.4\n", "original_string": "public interface CheckDigit {\n\n    /**\n     * Calculates the <em>Check Digit</em> for a code.\n     *\n     * @param code The code to calculate the Check Digit for.\n     * The string must not include the check digit\n     * @return The calculated Check Digit\n     * @throws CheckDigitException if an error occurs.\n     */\n    String calculate(String code) throws CheckDigitException;\n\n    /**\n     * Validates the check digit for the code.\n     *\n     * @param code The code to validate, the string must include the check digit.\n     * @return {@code true} if the check digit is valid, otherwise\n     * {@code false}.\n     */\n    boolean isValid(String code);\n\n}"}]