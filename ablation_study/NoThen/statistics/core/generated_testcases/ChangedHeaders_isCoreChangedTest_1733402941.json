[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.openapitools.openapidiff.core.model.BackwardIncompatibleProp.RESPONSE_HEADERS_DECREASED;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport io.swagger.v3.oas.models.headers.Header;\n\npublic class ChangedHeaders_isCoreChangedTest {\n\n    private ChangedHeaders changedHeaders;\n    private Map<String, Header> oldHeaders;\n    private Map<String, Header> newHeaders;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        oldHeaders = new HashMap<>();\n        newHeaders = new HashMap<>();\n        context = new DiffContext(null);\n        changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n    }\n\n    @Test\n    public void testIsCoreChangedNoChanges() {\n        changedHeaders.setIncreased(new HashMap<>());\n        changedHeaders.setMissing(new HashMap<>());\n        assertEquals(DiffResult.NO_CHANGES, changedHeaders.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChangedCompatible() {\n        Map<String, Header> increased = new HashMap<>();\n        increased.put(\"header1\", new Header());\n        changedHeaders.setIncreased(increased);\n        changedHeaders.setMissing(new HashMap<>());\n        assertEquals(DiffResult.COMPATIBLE, changedHeaders.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChangedIncompatible() {\n        Map<String, Header> missing = new HashMap<>();\n        missing.put(\"header1\", new Header());\n        changedHeaders.setIncreased(new HashMap<>());\n        changedHeaders.setMissing(missing);\n        assertEquals(DiffResult.INCOMPATIBLE, changedHeaders.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChangedIncompatibleWithContext() {\n        Map<String, Header> missing = new HashMap<>();\n        missing.put(\"header1\", new Header());\n        changedHeaders.setIncreased(new HashMap<>());\n        changedHeaders.setMissing(missing);\n        context = new DiffContext(null).copyWithMethod(null).copyWithRequired(true);\n        changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedHeaders.isCoreChanged());\n    }\n}\n"}]