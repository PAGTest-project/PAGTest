[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.openapitools.openapidiff.core.exception.RendererException;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.Collections;\n\nclass MarkdownRender_renderTest {\n\n    @Mock\n    private ChangedOpenApi diff;\n\n    @Mock\n    private OutputStreamWriter outputStreamWriter;\n\n    private MarkdownRender markdownRender;\n\n    @BeforeEach\n    void setUp() {\n        MockitoAnnotations.openMocks(this);\n        markdownRender = new MarkdownRender();\n    }\n\n    @Test\n    void testRender_Successful() throws IOException {\n        when(diff.getNewEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getMissingEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getDeprecatedEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getChangedOperations()).thenReturn(Collections.emptyList());\n\n        markdownRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    void testRender_IOException() throws IOException {\n        when(diff.getNewEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getMissingEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getDeprecatedEndpoints()).thenReturn(Collections.emptyList());\n        when(diff.getChangedOperations()).thenReturn(Collections.emptyList());\n        doThrow(new IOException()).when(outputStreamWriter).close();\n\n        assertThrows(RendererException.class, () -> {\n            markdownRender.render(diff, outputStreamWriter);\n        });\n    }\n}\n"}]