[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.headers.Header;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ChangedHeaders_equalsTest {\n\n    @Test\n    public void testEquals_SameInstance() {\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = new DiffContext(null);\n        ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n        assertTrue(changedHeaders.equals(changedHeaders));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = new DiffContext(null);\n        ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n        assertFalse(changedHeaders.equals(new Object()));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = new DiffContext(null);\n        ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n        assertFalse(changedHeaders.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentFields() {\n        Map<String, Header> oldHeaders1 = new HashMap<>();\n        Map<String, Header> newHeaders1 = new HashMap<>();\n        DiffContext context1 = new DiffContext(null);\n        ChangedHeaders changedHeaders1 = new ChangedHeaders(oldHeaders1, newHeaders1, context1);\n\n        Map<String, Header> oldHeaders2 = new HashMap<>();\n        Map<String, Header> newHeaders2 = new HashMap<>();\n        DiffContext context2 = new DiffContext(null);\n        ChangedHeaders changedHeaders2 = new ChangedHeaders(oldHeaders2, newHeaders2, context2);\n\n        // Initialize the fields that are not initialized in the constructor\n        changedHeaders1.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n        changedHeaders2.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n        assertFalse(changedHeaders1.equals(changedHeaders2));\n    }\n\n    @Test\n    public void testEquals_SameFields() {\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = new DiffContext(null);\n        ChangedHeaders changedHeaders1 = new ChangedHeaders(oldHeaders, newHeaders, context);\n        ChangedHeaders changedHeaders2 = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n        // Initialize the fields that are not initialized in the constructor\n        changedHeaders1.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n        changedHeaders2.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n        assertTrue(changedHeaders1.equals(changedHeaders2));\n    }\n}\n"}]