[{"uris": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java.RequestDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java", "class_name": "RequestDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java.RequestDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java.ReferenceDiffCacheTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java", "class_name": "ReferenceDiffCacheTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java.ReferenceDiffCacheTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getChangedOperations()).hasSize(3);\n\n    ChangedOperation changedOperation1 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet/{petId}\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation1).isNotNull();\n    assertThat(changedOperation1.isCompatible()).isFalse();\n    ChangedSecurityRequirements changedSecurityRequirements1 =\n        changedOperation1.getSecurityRequirements();\n    assertThat(changedSecurityRequirements1).isNotNull();\n    assertThat(changedSecurityRequirements1.isCompatible()).isFalse();\n    assertThat(changedSecurityRequirements1.getIncreased()).hasSize(1);\n    assertThat(changedSecurityRequirements1.getChanged()).hasSize(1);\n    ChangedSecurityRequirement changedSecurityRequirement1 =\n        changedSecurityRequirements1.getChanged().get(0);\n    assertThat(changedSecurityRequirement1.getChanged()).hasSize(1);\n    ChangedSecuritySchemeScopes changedScopes1 =\n        changedSecurityRequirement1.getChanged().get(0).getChangedScopes();\n    assertThat(changedScopes1)\n        .isNotNull()\n        .satisfies(\n            stringListDiff ->\n                assertThat(stringListDiff.getIncreased())\n                    .hasSize(1)\n                    .first()\n                    .asString()\n                    .isEqualTo(\"read:pets\"));\n\n    ChangedOperation changedOperation2 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet3\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation2).isNotNull();\n    assertThat(changedOperation2.isCompatible()).isFalse();\n    ChangedSecurityRequirements changedSecurityRequirements2 =\n        changedOperation2.getSecurityRequirements();\n    assertThat(changedSecurityRequirements2).isNotNull();\n    assertThat(changedSecurityRequirements2.isCompatible()).isFalse();\n    assertThat(changedSecurityRequirements2.getChanged()).hasSize(1);\n    ChangedSecurityRequirement changedSecurityRequirement2 =\n        changedSecurityRequirements2.getChanged().get(0);\n    assertThat(changedSecurityRequirement2.getChanged()).hasSize(1);\n    ChangedOAuthFlow changedImplicitOAuthFlow2 =\n        changedSecurityRequirement2.getChanged().get(0).getOAuthFlows().getImplicitOAuthFlow();\n    assertThat(changedImplicitOAuthFlow2).isNotNull();\n    assertThat(changedImplicitOAuthFlow2.isAuthorizationUrl()).isTrue();\n\n    ChangedOperation changedOperation3 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet/findByStatus2\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation3).isNotNull();\n    assertThat(changedOperation3.isCompatible()).isTrue();\n    ChangedSecurityRequirements changedSecurityRequirements3 =\n        changedOperation3.getSecurityRequirements();\n    assertThat(changedSecurityRequirements3).isNotNull();\n    assertThat(changedSecurityRequirements3.getIncreased()).hasSize(1);\n    SecurityRequirement securityRequirement3 = changedSecurityRequirements3.getIncreased().get(0);\n    assertThat(securityRequirement3)\n        .hasSize(1)\n        .hasEntrySatisfying(\"petstore_auth\", values -> assertThat(values).hasSize(2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "class_name": "SecurityDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest.[void]testWithUnknownSecurityScheme()", "name": "testWithUnknownSecurityScheme", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testWithUnknownSecurityScheme()", "original_string": "  @Test\n  public void testWithUnknownSecurityScheme() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC3, OPENAPI_DOC3));\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC4, OPENAPI_DOC4));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "class_name": "SecurityDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest.[void]testMissingSecurityDefinition()", "name": "testMissingSecurityDefinition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testMissingSecurityDefinition()", "original_string": "  @Test\n  public void testMissingSecurityDefinition() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC5, OPENAPI_DOC5));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "class_name": "SecurityDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiChangedEndpoints(\"parameters_diff_1.yaml\", \"parameters_diff_2.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MaximumDecreased()", "name": "issue458MaximumDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MaximumDecreased()", "original_string": "  @Test\n  public void issue458MaximumDecreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_2.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MaximumIncreased()", "name": "issue458MaximumIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MaximumIncreased()", "original_string": "  @Test\n  public void issue458MaximumIncreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_3.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MinimumDecreased()", "name": "issue458MinimumDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MinimumDecreased()", "original_string": "  @Test\n  public void issue458MinimumDecreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_4.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MinimumIncreased()", "name": "issue458MinimumIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MinimumIncreased()", "original_string": "  @Test\n  public void issue458MinimumIncreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_5.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458IntegerFormatChanged()", "name": "issue458IntegerFormatChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458IntegerFormatChanged()", "original_string": "  @Test\n  public void issue458IntegerFormatChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_6.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumChanged()", "name": "issue458ExclusiveMinimumChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumChanged()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_7.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumChanged()", "name": "issue458ExclusiveMaximumChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumChanged()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_8.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumRemoved()", "name": "issue458ExclusiveMinimumRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_9.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumRemoved()", "name": "issue458ExclusiveMaximumRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_10.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumTrueToFalse()", "name": "issue458ExclusiveMaximumTrueToFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumTrueToFalse()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumTrueToFalse() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_12.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumTrueToFalse()", "name": "issue458ExclusiveMinimumTrueToFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumTrueToFalse()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumTrueToFalse() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_13.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumTrueRemoved()", "name": "issue458ExclusiveMaximumTrueRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumTrueRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumTrueRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_12.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumTrueRemoved()", "name": "issue458ExclusiveMinimumTrueRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumTrueRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumTrueRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_13.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue488RenameParameterAddAndRemoveParameterReturnFalse()", "name": "issue488RenameParameterAddAndRemoveParameterReturnFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue488RenameParameterAddAndRemoveParameterReturnFalse()", "original_string": "  @Test\n  public void issue488RenameParameterAddAndRemoveParameterReturnFalse() {\n    assertOpenApiChangedEndpoints(\"issue-488-1.json\", \"issue-488-2.json\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]testGeneratedApiSame()", "name": "testGeneratedApiSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGeneratedApiSame()", "original_string": "  @Test\n  public void testGeneratedApiSame() {\n    OpenAPI generated = largeGeneratedApi();\n    assertOpenApiAreEquals(generated, generated);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]testGeneratedApiDifferent()", "name": "testGeneratedApiDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGeneratedApiDifferent()", "original_string": "  @Test\n  public void testGeneratedApiDifferent() {\n    OpenAPI generated = largeGeneratedApi();\n    OpenAPI generated2 = largeGeneratedApi();\n    assertOpenApiBackwardIncompatible(generated, generated2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java", "class_name": "AddPropDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiBackwardCompatible(OPENAPI_DOC1, OPENAPI_DOC2, true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java", "class_name": "AddPropDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "class_name": "RecursiveSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest.[void]testDiffDifferentCyclic()", "name": "testDiffDifferentCyclic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferentCyclic()", "original_string": "  @Test\n  public void testDiffDifferentCyclic() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC1, OPENAPI_DOC3);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "class_name": "RecursiveSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "class_name": "RecursiveSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    JsonRender render = new JsonRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java", "class_name": "JsonRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest.[void]renderDoesNotFailForJsr310Types()", "name": "renderDoesNotFailForJsr310Types", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailForJsr310Types()", "original_string": "  @Test\n  public void renderDoesNotFailForJsr310Types() {\n    JsonRender render = new JsonRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"jsr310_property_1.yaml\", \"jsr310_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java", "class_name": "JsonRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange()", "original_string": "  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsDeletedSectionWhenEndpointIsDeleted()", "name": "renderShowsWhatsDeletedSectionWhenEndpointIsDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsDeletedSectionWhenEndpointIsDeleted()", "original_string": "  @Test\n  public void renderShowsWhatsDeletedSectionWhenEndpointIsDeleted() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"delete_endpoint_1.yaml\", \"delete_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's Deleted\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsNewSectionWhenEndpointIsAdded()", "name": "renderShowsWhatsNewSectionWhenEndpointIsAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsNewSectionWhenEndpointIsAdded()", "original_string": "  @Test\n  public void renderShowsWhatsNewSectionWhenEndpointIsAdded() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"add_endpoint_1.yaml\", \"add_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's New\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated()", "name": "renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated()", "original_string": "  @Test\n  public void renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"deprecate_endpoint_1.yaml\", \"deprecate_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's Deprecated\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged()", "name": "renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged()", "original_string": "  @Test\n  public void renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"change_endpoint_1.yaml\", \"change_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .contains(\"What's Changed\")\n        .containsSubsequence(\"- GET    /widgets\", \"Parameter:\", \"- Changed query-param-1 in query\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java.ResponseHeaderDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n\n    Map<String, ChangedResponse> changedResponses =\n        changedOpenApi.getChangedOperations().get(0).getApiResponses().getChanged();\n    assertThat(changedResponses).isNotEmpty();\n    assertThat(changedResponses).containsKey(\"200\");\n    ChangedHeaders changedHeaders = changedResponses.get(\"200\").getHeaders();\n    assertThat(changedHeaders.isDifferent()).isTrue();\n    assertThat(changedHeaders.getChanged()).hasSize(1);\n    assertThat(changedHeaders.getIncreased()).hasSize(1);\n    assertThat(changedHeaders.getMissing()).hasSize(1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java", "class_name": "ResponseHeaderDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java.ResponseHeaderDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n\n    Map<String, ChangedResponse> changedResponses =\n        changedOpenApi.getChangedOperations().get(0).getApiResponses().getChanged();\n    assertThat(changedResponses).containsKey(\"200\");\n\n    ChangedResponse changedResponse = changedResponses.get(\"200\");\n    Content oldContent = changedResponse.getOldApiResponse().getContent();\n    Content newContent = changedResponse.getNewApiResponse().getContent();\n    assertThat(oldContent.get(\"application/json\").getSchema()).isNull();\n    assertThat(newContent.get(\"application/json\").getSchema()).isNotNull();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java", "class_name": "ResponseAddedContentSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest.[void]testDiffCanBeRendered()", "name": "testDiffCanBeRendered", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffCanBeRendered()", "original_string": "  @Test\n  public void testDiffCanBeRendered() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new ConsoleRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n\n    outputStream = new ByteArrayOutputStream();\n    outputStreamWriter = new OutputStreamWriter(outputStream);\n    render = new HtmlRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n\n    outputStream = new ByteArrayOutputStream();\n    outputStreamWriter = new OutputStreamWriter(outputStream);\n    render = new MarkdownRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java", "class_name": "ResponseAddedContentSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java.HtmlRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    HtmlRender render = new HtmlRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java", "class_name": "HtmlRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java.HtmlRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java.AllOfOneOfDiffTest.[void]allOfReferringToOneOfSchemasAreSupported()", "name": "allOfReferringToOneOfSchemasAreSupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void allOfReferringToOneOfSchemasAreSupported()", "original_string": "  @Test\n  void allOfReferringToOneOfSchemasAreSupported() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"issue-317_1.json\", \"issue-317_2.json\");\n    assertThat(diff.isCoreChanged().isUnchanged());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java", "class_name": "AllOfOneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java.AllOfOneOfDiffTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest.[void]testDiffWithOverloadedParameterTypes()", "name": "testDiffWithOverloadedParameterTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testDiffWithOverloadedParameterTypes()", "original_string": "  @Test\n  void testDiffWithOverloadedParameterTypes() {\n    assertDoesNotThrow(\n        () -> OpenApiCompare.fromLocations(OVERLOADED_PARAMETERS, OVERLOADED_PARAMETERS));\n    assertOpenApiAreEquals(OVERLOADED_PARAMETERS, OVERLOADED_PARAMETERS);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java", "class_name": "ParametersOverloadingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest.[void]testDiffWithDuplicatedParameterTypes()", "name": "testDiffWithDuplicatedParameterTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testDiffWithDuplicatedParameterTypes()", "original_string": "  @Test\n  void testDiffWithDuplicatedParameterTypes() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(DUPLICATED_PARAMETER_TYPES, DUPLICATED_PARAMETER_TYPES),\n        \"Two path items have the same signature: /projects/{}\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java", "class_name": "ParametersOverloadingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java", "class_name": "AddPropPutDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest.[void]testFieldAdditionalInPutApiIsCompatible()", "name": "testFieldAdditionalInPutApiIsCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testFieldAdditionalInPutApiIsCompatible()", "original_string": "  @Test\n  public void testFieldAdditionalInPutApiIsCompatible() {\n    // See https://github.com/OpenAPITools/openapi-diff/pull/537\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java", "class_name": "AddPropPutDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testEqual()", "name": "testEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEqual()", "original_string": "  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(OPENAPI_PATH1, OPENAPI_PATH2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testMultiplePathWithSameSignature()", "name": "testMultiplePathWithSameSignature", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testMultiplePathWithSameSignature()", "original_string": "  @Test\n  public void testMultiplePathWithSameSignature() {\n    assertThrows(\n        IllegalArgumentException.class, () -> assertOpenApiAreEquals(OPENAPI_PATH3, OPENAPI_PATH3));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testSameTemplateDifferentMethods()", "name": "testSameTemplateDifferentMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSameTemplateDifferentMethods()", "original_string": "  @Test\n  public void testSameTemplateDifferentMethods() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_PATH1, OPENAPI_PATH4);\n    assertThat(changedOpenApi.getNewEndpoints())\n        .hasSize(1)\n        .satisfiesExactly(\n            endpoint ->\n                assertThat(endpoint.getOperation().getOperationId()).isEqualTo(\"deletePet\"));\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testDiffWithSimilarBeginningPaths()", "name": "testDiffWithSimilarBeginningPaths", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffWithSimilarBeginningPaths()", "original_string": "  @Test\n  public void testDiffWithSimilarBeginningPaths() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_PATH5, OPENAPI_PATH6);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromSpecifications(\n            changedOpenApi.getOldSpecOpenApi(), changedOpenApi.getNewSpecOpenApi());\n    assertThat(diff.getChangedOperations()).isEmpty();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java.OperationDiffTest.[void]testContentDiffWithOneEmptyMediaType()", "name": "testContentDiffWithOneEmptyMediaType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContentDiffWithOneEmptyMediaType()", "original_string": "  @Test\n  public void testContentDiffWithOneEmptyMediaType() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isChanged()).isEqualTo(DiffResult.METADATA);\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.getChangedOperations().size()).isEqualTo(1);\n    assertThat(changedOpenApi.getChangedOperations().get(0).getOperationId().isDifferent())\n        .isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java", "class_name": "OperationDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java.OperationDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testEqual()", "name": "testEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEqual()", "original_string": "  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(OPENAPI_DOC2, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testNewApi()", "name": "testNewApi", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testNewApi()", "original_string": "  @Test\n  public void testNewApi() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_EMPTY_DOC, OPENAPI_DOC2);\n    List<Endpoint> newEndpoints = changedOpenApi.getNewEndpoints();\n    List<Endpoint> missingEndpoints = changedOpenApi.getMissingEndpoints();\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(newEndpoints).isNotEmpty();\n    assertThat(missingEndpoints).isEmpty();\n    assertThat(changedEndPoints).isEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDeprecatedApi()", "name": "testDeprecatedApi", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeprecatedApi()", "original_string": "  @Test\n  public void testDeprecatedApi() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_EMPTY_DOC);\n    List<Endpoint> newEndpoints = changedOpenApi.getNewEndpoints();\n    List<Endpoint> missingEndpoints = changedOpenApi.getMissingEndpoints();\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(newEndpoints).isEmpty();\n    assertThat(missingEndpoints).isNotEmpty();\n    assertThat(changedEndPoints).isEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDiff()", "name": "testDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff()", "original_string": "  @Test\n  public void testDiff() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(changedEndPoints).isNotEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDiffAndMarkdown()", "name": "testDiffAndMarkdown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffAndMarkdown()", "original_string": "  @Test\n  public void testDiffAndMarkdown() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new MarkdownRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDiffAndJson()", "name": "testDiffAndJson", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffAndJson()", "original_string": "  @Test\n  public void testDiffAndJson() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new JsonRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testComparisonConsistency()", "name": "testComparisonConsistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testComparisonConsistency()", "original_string": "  @Test\n  public void testComparisonConsistency() {\n    final OpenAPI oldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI newSpec = loadSpecFromFile(OPENAPI_DOC3);\n\n    final ChangedOpenApi diff1 = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    assertThat(diff1.isChanged()).isEqualTo(DiffResult.NO_CHANGES);\n    assertThat(diff1.getNewEndpoints()).isEmpty();\n    assertThat(diff1.getMissingEndpoints()).isEmpty();\n    assertThat(diff1.getChangedOperations()).isEmpty();\n\n    final ChangedOpenApi diff2 = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    assertThat(diff2.isChanged()).isEqualTo(DiffResult.NO_CHANGES);\n    assertThat(diff2.getNewEndpoints()).isEmpty();\n    assertThat(diff2.getMissingEndpoints()).isEmpty();\n    assertThat(diff2.getChangedOperations()).isEmpty();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Testing that repetitive specs comparisons has to produce consistent result."}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testSpecObjectsAreNotChangesAfterComparison()", "name": "testSpecObjectsAreNotChangesAfterComparison", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSpecObjectsAreNotChangesAfterComparison()", "original_string": "  @Test\n  public void testSpecObjectsAreNotChangesAfterComparison() {\n    final OpenAPI oldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI newSpec = loadSpecFromFile(OPENAPI_DOC3);\n\n    OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n\n    final OpenAPI expectedOldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI expectedNewSpec = loadSpecFromFile(OPENAPI_DOC3);\n    assertThat(oldSpec).isEqualTo(expectedOldSpec);\n    assertThat(newSpec).isEqualTo(expectedNewSpec);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "name": "renderDoesNotCauseStackOverflowWithRecursiveDefinitions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "original_string": "  @Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"recursive_old.yaml\", \"recursive_new.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange()", "original_string": "  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]validateAsciiDocChangeFile()", "name": "validateAsciiDocChangeFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void validateAsciiDocChangeFile()", "original_string": "  @Test\n  public void validateAsciiDocChangeFile() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .isEqualTo(\n            \"= TITLE (v 1.0.0)\\n\"\n                + \":reproducible:\\n\"\n                + \":sectlinks:\\n\"\n                + \":toc:\\n\"\n                + \"\\n\"\n                + \"== What's Changed\\n\"\n                + \"=== GET   /\\n\"\n                + \"* Return Type:\\n\"\n                + \"** Changed default \\n\"\n                + \"** Media types:\\n\"\n                + \"*** Changed application/json\\n\"\n                + \"*** Schema:\\n\"\n                + \"Backward compatible\\n\"\n                + \"\\n\"\n                + \"\\n\"\n                + \"NOTE: API changes are backward compatible\\n\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]validateAsciiDocRangeStatus()", "name": "validateAsciiDocRangeStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void validateAsciiDocRangeStatus()", "original_string": "  @Test\n  public void validateAsciiDocRangeStatus() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .isEqualTo(\n            \"= PROJECTS API (v 1.0.0)\\n\"\n                + \":reproducible:\\n\"\n                + \":sectlinks:\\n\"\n                + \":toc:\\n\"\n                + \"\\n\"\n                + \"== What's Changed\\n\"\n                + \"=== GET   /pet/\\n\"\n                + \"* Return Type:\\n\"\n                + \"** Add 4XX \\n\"\n                + \"** Deleted 405 Method Not Allowed\\n\"\n                + \"\\n\"\n                + \"\\n\"\n                + \"WARNING: API changes broke backward compatibility\\n\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java.AdditionalPropertiesTest.[void]booleanAdditionalPropertiesAreSupported()", "name": "booleanAdditionalPropertiesAreSupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void booleanAdditionalPropertiesAreSupported()", "original_string": "  @Test\n  void booleanAdditionalPropertiesAreSupported() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"issue-256_1.json\", \"issue-256_2.json\");\n    ConsoleRender render = new ConsoleRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java", "class_name": "AdditionalPropertiesTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java.AdditionalPropertiesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffSameWithAllOf()", "name": "testDiffSameWithAllOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSameWithAllOf()", "original_string": "  @Test\n  public void testDiffSameWithAllOf() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffDifferent1()", "name": "testDiffDifferent1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent1()", "original_string": "  @Test\n  public void testDiffDifferent1() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC3);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffDifferent2()", "name": "testDiffDifferent2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent2()", "original_string": "  @Test\n  public void testDiffDifferent2() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC4);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testDiffDifferentMapping()", "name": "testDiffDifferentMapping", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferentMapping()", "original_string": "  @Test\n  public void testDiffDifferentMapping() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testDiffSameWithOneOf()", "name": "testDiffSameWithOneOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSameWithOneOf()", "original_string": "  @Test\n  public void testDiffSameWithOneOf() {\n    assertOpenApiAreEquals(OPENAPI_DOC2, OPENAPI_DOC3);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testComposedSchema()", "name": "testComposedSchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testComposedSchema()", "original_string": "  @Test\n  public void testComposedSchema() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC4, OPENAPI_DOC5);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testComposedSchemaDiff()", "name": "testComposedSchemaDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testComposedSchemaDiff()", "original_string": "  @Test\n  public void testComposedSchemaDiff() {\n    assertOpenApiAreEquals(OPENAPI_DOC10, OPENAPI_DOC10);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testOneOfDiscrimitatorChanged()", "name": "testOneOfDiscrimitatorChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testOneOfDiscrimitatorChanged()", "original_string": "  @Test\n  public void testOneOfDiscrimitatorChanged() {\n    // The oneOf 'discriminator' changed: 'realtype' -> 'othertype':\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC6, OPENAPI_DOC7);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testOneOfDiscrimitatorMissingSameOrder()", "name": "testOneOfDiscrimitatorMissingSameOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testOneOfDiscrimitatorMissingSameOrder()", "original_string": "  @Test\n  public void testOneOfDiscrimitatorMissingSameOrder() {\n    assertOpenApiAreEquals(OPENAPI_DOC8, OPENAPI_DOC8);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testOneOfDiscrimitatorMissingDifferentOrder()", "name": "testOneOfDiscrimitatorMissingDifferentOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testOneOfDiscrimitatorMissingDifferentOrder()", "original_string": "  @Test\n  public void testOneOfDiscrimitatorMissingDifferentOrder() {\n    assertOpenApiAreEquals(OPENAPI_DOC8, OPENAPI_DOC9);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest.[void]pathSamePathParamsDiffParamSameAsInPathButSchemaDiff()", "name": "pathSamePathParamsDiffParamSameAsInPathButSchemaDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")\n  public void pathSamePathParamsDiffParamSameAsInPathButSchemaDiff()", "original_string": "  @Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")\n  public void pathSamePathParamsDiffParamSameAsInPathButSchemaDiff() {\n    final Logger logger = LoggerFactory.getLogger(PathParameterSchemaDiffTest.class);\n    logger.info(TEST_MSG_1);\n    String OPENAPI_DOC1 = \"path_parameter_diff_param_schema_diff_old.yaml\";\n    String OPENAPI_DOC2 = \"path_parameter_diff_param_schema_diff_new.yaml\";\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    Assertions.assertTrue(diff.isDifferent());\n    Assertions.assertFalse(diff.isCompatible());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java", "class_name": "PathParameterSchemaDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest", "attributes": {"modifiers": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest.[void]pathSamePathParamsDiffParamNameDiffSchemaSame()", "name": "pathSamePathParamsDiffParamNameDiffSchemaSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")\n  public void pathSamePathParamsDiffParamNameDiffSchemaSame()", "original_string": "  @Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")\n  public void pathSamePathParamsDiffParamNameDiffSchemaSame() {\n    final Logger logger = LoggerFactory.getLogger(PathParameterSchemaDiffTest.class);\n    logger.info(TEST_MSG_2);\n    String OPENAPI_DOC1 = \"path_parameter_diff_param_name_diff_old.yaml\";\n    String OPENAPI_DOC2 = \"path_parameter_diff_param_name_diff_new.yaml\";\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    Assertions.assertFalse(diff.isDifferent());\n    Assertions.assertTrue(diff.isCompatible());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java", "class_name": "PathParameterSchemaDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest", "attributes": {"modifiers": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest.[void]testArrayDiffDifferent()", "name": "testArrayDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testArrayDiffDifferent()", "original_string": "  @Test\n  public void testArrayDiffDifferent() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC31, OPENAPI_DOC32);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java", "class_name": "ArrayDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest.[void]testArrayDiffSame()", "name": "testArrayDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testArrayDiffSame()", "original_string": "  @Test\n  public void testArrayDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC31, OPENAPI_DOC31);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java", "class_name": "ArrayDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "class_name": "MarkdownRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest.[void]renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "name": "renderDoesNotCauseStackOverflowWithRecursiveDefinitions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "original_string": "  @Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"recursive_old.yaml\", \"recursive_new.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "class_name": "MarkdownRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest.[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange()", "original_string": "  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "class_name": "MarkdownRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testContentDiffWithOneEmptyMediaType()", "name": "testContentDiffWithOneEmptyMediaType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContentDiffWithOneEmptyMediaType()", "original_string": "  @Test\n  public void testContentDiffWithOneEmptyMediaType() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isIncompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testContentDiffWithEmptyMediaTypes()", "name": "testContentDiffWithEmptyMediaTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContentDiffWithEmptyMediaTypes()", "original_string": "  @Test\n  public void testContentDiffWithEmptyMediaTypes() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC1);\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testSameContentDiff()", "name": "testSameContentDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSameContentDiff()", "original_string": "  @Test\n  public void testSameContentDiff() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC2, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testAddedResponseContentTypeDiff()", "name": "testAddedResponseContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddedResponseContentTypeDiff()", "original_string": "  @Test\n  public void testAddedResponseContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_response_add_1.yaml\", \"content_type_response_add_2.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testRemovedResponseContentTypeDiff()", "name": "testRemovedResponseContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRemovedResponseContentTypeDiff()", "original_string": "  @Test\n  public void testRemovedResponseContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_response_add_2.yaml\", \"content_type_response_add_1.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isFalse();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testAddedRequestContentTypeDiff()", "name": "testAddedRequestContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddedRequestContentTypeDiff()", "original_string": "  @Test\n  public void testAddedRequestContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_request_add_1.yaml\", \"content_type_request_add_2.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testRemovedRequestContentTypeDiff()", "name": "testRemovedRequestContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRemovedRequestContentTypeDiff()", "original_string": "  @Test\n  public void testRemovedRequestContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_request_add_2.yaml\", \"content_type_request_add_1.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isFalse();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest.[void]testEqual()", "name": "testEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEqual()", "original_string": "  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(SWAGGER_DOC1, SWAGGER_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java", "class_name": "Swagger2CompatibilityTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest.[void]testSwagger2ToOpenapi3()", "name": "testSwagger2ToOpenapi3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSwagger2ToOpenapi3()", "original_string": "  @Test\n  public void testSwagger2ToOpenapi3() {\n    assertOpenApiAreEquals(SWAGGER_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java", "class_name": "Swagger2CompatibilityTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java.ConsoleRender_titleTest.[void]testTitle()", "name": "testTitle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testTitle()", "original_string": "  @Test\n  public void testTitle() {\n    ConsoleRender consoleRender = new ConsoleRender();\n    String expected =\n        \"==========================================================================\\n\"\n            + \"==                                Title                                 ==\\n\"\n            + \"==========================================================================\\n\";\n    String actual = consoleRender.title(\"Title\", '=');\n    assertEquals(expected, actual);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java", "class_name": "ConsoleRender_titleTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java.ConsoleRender_titleTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_filenameIsNull_doesNothing()", "name": "writeToFile_filenameIsNull_doesNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void writeToFile_filenameIsNull_doesNothing()", "original_string": "  @Test\n  void writeToFile_filenameIsNull_doesNothing() {\n    assertDoesNotThrow(() -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_filenameIsEmpty_doesNothing()", "name": "writeToFile_filenameIsEmpty_doesNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void writeToFile_filenameIsEmpty_doesNothing()", "original_string": "  @Test\n  void writeToFile_filenameIsEmpty_doesNothing() {\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, StringUtils.EMPTY));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_fileExists_overwrites_file(Path)", "name": "writeToFile_fileExists_overwrites_file", "arg_nums": 1, "params": [{"name": "tempDir", "type": "Path"}], "return_type": "void", "signature": "@Test\n  void writeToFile_fileExists_overwrites_file(@TempDir Path tempDir)", "original_string": "  @Test\n  void writeToFile_fileExists_overwrites_file(@TempDir Path tempDir) throws IOException {\n    final Path path = tempDir.resolve(\"output.txt\");\n    Files.write(path, \"Test\".getBytes(StandardCharsets.UTF_8));\n\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, path.toString()));\n    assertThat(path).exists().content().isNotEqualTo(\"Test\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_fileDoesNotExist_createsFile(Path)", "name": "writeToFile_fileDoesNotExist_createsFile", "arg_nums": 1, "params": [{"name": "tempDir", "type": "Path"}], "return_type": "void", "signature": "@Test\n  void writeToFile_fileDoesNotExist_createsFile(@TempDir Path tempDir)", "original_string": "  @Test\n  void writeToFile_fileDoesNotExist_createsFile(@TempDir Path tempDir) {\n    final Path path = tempDir.resolve(\"output.txt\");\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, path.toString()));\n    assertThat(path).exists().content().isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    assertTrue(changedHeaders.equals(changedHeaders));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    assertFalse(changedHeaders.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders changedHeaders = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    assertFalse(changedHeaders.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentFields()", "original_string": "  @Test\n  public void testEquals_DifferentFields() {\n    Map<String, Header> oldHeaders1 = new HashMap<>();\n    Map<String, Header> newHeaders1 = new HashMap<>();\n    DiffContext context1 = new DiffContext(null);\n    ChangedHeaders changedHeaders1 = new ChangedHeaders(oldHeaders1, newHeaders1, context1);\n\n    Map<String, Header> oldHeaders2 = new HashMap<>();\n    Map<String, Header> newHeaders2 = new HashMap<>();\n    DiffContext context2 = new DiffContext(null);\n    ChangedHeaders changedHeaders2 = new ChangedHeaders(oldHeaders2, newHeaders2, context2);\n\n    // Initialize the fields that are not initialized in the constructor\n    changedHeaders1\n        .setIncreased(new HashMap<>())\n        .setMissing(new HashMap<>())\n        .setChanged(new HashMap<>());\n    changedHeaders2\n        .setIncreased(new HashMap<>())\n        .setMissing(new HashMap<>())\n        .setChanged(new HashMap<>());\n\n    // Ensure the fields are different\n    changedHeaders1.getIncreased().put(\"key1\", new Header());\n    changedHeaders2.getIncreased().put(\"key2\", new Header());\n\n    assertFalse(changedHeaders1.equals(changedHeaders2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_SameFields()", "name": "testEquals_SameFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameFields()", "original_string": "  @Test\n  public void testEquals_SameFields() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n    ChangedHeaders changedHeaders1 = new ChangedHeaders(oldHeaders, newHeaders, context);\n    ChangedHeaders changedHeaders2 = new ChangedHeaders(oldHeaders, newHeaders, context);\n\n    // Initialize the fields that are not initialized in the constructor\n    changedHeaders1\n        .setIncreased(new HashMap<>())\n        .setMissing(new HashMap<>())\n        .setChanged(new HashMap<>());\n    changedHeaders2\n        .setIncreased(new HashMap<>())\n        .setMissing(new HashMap<>())\n        .setChanged(new HashMap<>());\n\n    assertTrue(changedHeaders1.equals(changedHeaders2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java.ChangedResponse_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    ApiResponse oldApiResponse = new ApiResponse().description(\"Old Response\");\n    ApiResponse newApiResponse = new ApiResponse().description(\"New Response\");\n    DiffContext context = new DiffContext(null);\n    ChangedResponse changedResponse = new ChangedResponse(oldApiResponse, newApiResponse, context);\n\n    int expectedHashCode =\n        Objects.hash(oldApiResponse, newApiResponse, context, null, null, null, null);\n    assertEquals(expectedHashCode, changedResponse.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java", "class_name": "ChangedResponse_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java.ChangedResponse_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java.PendingChanged_setValueTest.[void]testSetValue_FirstTime()", "name": "testSetValue_FirstTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetValue_FirstTime()", "original_string": "  @Test\n  public void testSetValue_FirstTime() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    Optional<String> value = Optional.of(\"test\");\n\n    pendingChanged.setValue(value);\n\n    assertTrue(pendingChanged.isValueSet());\n    assertTrue(pendingChanged.isPresent());\n    assertEquals(\"test\", pendingChanged.get());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java", "class_name": "PendingChanged_setValueTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java.PendingChanged_setValueTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java.PendingChanged_setValueTest.[void]testSetValue_SecondTime()", "name": "testSetValue_SecondTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetValue_SecondTime()", "original_string": "  @Test\n  public void testSetValue_SecondTime() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    Optional<String> value = Optional.of(\"test\");\n\n    pendingChanged.setValue(value);\n\n    IllegalStateException exception =\n        assertThrows(\n            IllegalStateException.class,\n            () -> {\n              pendingChanged.setValue(value);\n            });\n\n    assertEquals(\n        \"PendingChanged may not be set more than once. Value was already set.\",\n        exception.getMessage());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java", "class_name": "PendingChanged_setValueTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_setValueTest.java.PendingChanged_setValueTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testPendingChangedValueSetBeforeListeners()", "name": "testPendingChangedValueSetBeforeListeners", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testPendingChangedValueSetBeforeListeners()", "original_string": "  @Test\n  public void testPendingChangedValueSetBeforeListeners() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    changed.setValue(Optional.of(\"Hello\"));\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testPendingChangedValueSetAfterListeners()", "name": "testPendingChangedValueSetAfterListeners", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testPendingChangedValueSetAfterListeners()", "original_string": "  @Test\n  public void testPendingChangedValueSetAfterListeners() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    changed.setValue(Optional.of(\"Hello\"));\n    assertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testPendingChangedValueEMpty()", "name": "testPendingChangedValueEMpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testPendingChangedValueEMpty()", "original_string": "  @Test\n  public void testPendingChangedValueEMpty() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    changed.setValue(Optional.empty());\n    assertion.assertSet(false);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testRealizedChange()", "name": "testRealizedChange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRealizedChange()", "original_string": "  @Test\n  public void testRealizedChange() {\n    RealizedChanged<String> changed = new RealizedChanged<>(\"hello\");\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testRealizedChangeEmpty()", "name": "testRealizedChangeEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRealizedChangeEmpty()", "original_string": "  @Test\n  public void testRealizedChangeEmpty() {\n    RealizedChanged<String> changed = new RealizedChanged<>(Optional.empty());\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(false);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testFlatMap()", "name": "testFlatMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testFlatMap()", "original_string": "  @Test\n  public void testFlatMap() {\n    PendingChanged<ChangedWriteOnly> flatMapPending = new PendingChanged<>();\n\n    changed.whenSet((value) -> this.whenSet = value);\n\n    DeferredChanged<ChangedWriteOnly> chainedChanged =\n        changed.flatMap(\n            (value) -> {\n              System.out.println(\"Flatmap called\");\n              return flatMapPending;\n            });\n    chainedChanged.whenSet(value -> chainedValue = value);\n\n    DeferredChanged<ChangedWriteOnly> mappedDeferred =\n        changed.map(value -> new ChangedWriteOnly(false, true, null));\n    mappedDeferred.ifPresent(v -> mappedValue = v);\n\n    Assertions.assertFalse(whenSet.isPresent());\n    Assertions.assertFalse(chainedValue.isPresent());\n    Assertions.assertNull(mappedValue);\n\n    changed.setValue(Optional.of(new ChangedReadOnly(false, true, null)));\n    Assertions.assertTrue(whenSet.isPresent());\n    Assertions.assertNotNull(mappedValue);\n    Assertions.assertFalse(chainedValue.isPresent());\n\n    flatMapPending.setValue(Optional.of(new ChangedWriteOnly(false, true, null)));\n    Assertions.assertTrue(whenSet.isPresent());\n    Assertions.assertTrue(chainedValue.isPresent());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testDeferredBuilderEmpty()", "name": "testDeferredBuilderEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeferredBuilderEmpty()", "original_string": "  @Test\n  public void testDeferredBuilderEmpty() {\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertSet(false);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testDeferredBuilderAllRealized()", "name": "testDeferredBuilderAllRealized", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeferredBuilderAllRealized()", "original_string": "  @Test\n  public void testDeferredBuilderAllRealized() {\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    builder.add(new RealizedChanged<>(\"hello\"));\n    builder.add(new RealizedChanged<>(\"bye\"));\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testDeferredBuilderPending()", "name": "testDeferredBuilderPending", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeferredBuilderPending()", "original_string": "  @Test\n  public void testDeferredBuilderPending() {\n    PendingChanged<String> changed = new PendingChanged<>();\n\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    builder.add(new RealizedChanged<>(\"hello\"));\n    builder.add(changed);\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertNotSet();\n\n    changed.setValue(Optional.of(\"hello\"));\n    builderAssertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest.[void]testBuild_WithEmptyDeferredValues()", "name": "testBuild_WithEmptyDeferredValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testBuild_WithEmptyDeferredValues()", "original_string": "  @Test\n  public void testBuild_WithEmptyDeferredValues() {\n    DeferredChanged<List<Optional<? super String>>> result = builder.build();\n    assertEquals(DeferredChanged.empty(), result);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java", "class_name": "DeferredBuilder_buildTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest.[void]testBuild_WithNonEmptyDeferredValues()", "name": "testBuild_WithNonEmptyDeferredValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testBuild_WithNonEmptyDeferredValues()", "original_string": "  @Test\n  public void testBuild_WithNonEmptyDeferredValues() {\n    builder.add(deferred1);\n    builder.add(deferred2);\n\n    DeferredChanged<List<Optional<? super String>>> result = builder.build();\n\n    verify(deferred1).whenSet(any());\n    verify(deferred2).whenSet(any());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java", "class_name": "DeferredBuilder_buildTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilder_buildTest.java.DeferredBuilder_buildTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_numericrange_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMaxCreated()", "name": "requestExclusiveMaxCreated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMaxCreated()", "original_string": "  @Test\n  public void requestExclusiveMaxCreated() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_max_created.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMaxSet()", "name": "requestExclusiveMaxSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMaxSet()", "original_string": "  @Test\n  public void requestExclusiveMaxSet() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_max_set.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMinCreated()", "name": "requestExclusiveMinCreated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMinCreated()", "original_string": "  @Test\n  public void requestExclusiveMinCreated() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_min_created.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMinSet()", "name": "requestExclusiveMinSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMinSet()", "original_string": "  @Test\n  public void requestExclusiveMinSet() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_min_set.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMaxAdded()", "name": "requestMaxAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMaxAdded()", "original_string": "  @Test\n  public void requestMaxAdded() {\n    assertIncompatibleRequest(\"bc_request_numericrange_max_added.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMaxDecreased()", "name": "requestMaxDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMaxDecreased()", "original_string": "  @Test\n  public void requestMaxDecreased() {\n    assertIncompatibleRequest(\"bc_request_numericrange_max_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMinAdded()", "name": "requestMinAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMinAdded()", "original_string": "  @Test\n  public void requestMinAdded() {\n    assertIncompatibleRequest(\"bc_request_numericrange_min_added.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMinIncreased()", "name": "requestMinIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMinIncreased()", "original_string": "  @Test\n  public void requestMinIncreased() {\n    assertIncompatibleRequest(\"bc_request_numericrange_min_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMaxDeleted()", "name": "responseExclusiveMaxDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMaxDeleted()", "original_string": "  @Test\n  public void responseExclusiveMaxDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_max_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMaxUnset()", "name": "responseExclusiveMaxUnset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMaxUnset()", "original_string": "  @Test\n  public void responseExclusiveMaxUnset() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_max_unset.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMinDeleted()", "name": "responseExclusiveMinDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMinDeleted()", "original_string": "  @Test\n  public void responseExclusiveMinDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_min_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMinUnset()", "name": "responseExclusiveMinUnset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMinUnset()", "original_string": "  @Test\n  public void responseExclusiveMinUnset() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_min_unset.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMaxDeleted()", "name": "responseMaxDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMaxDeleted()", "original_string": "  @Test\n  public void responseMaxDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_max_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMaxIncreased()", "name": "responseMaxIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMaxIncreased()", "original_string": "  @Test\n  public void responseMaxIncreased() {\n    assertIncompatibleResponse(\"bc_response_numericrange_max_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMinDecreased()", "name": "responseMinDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMinDecreased()", "original_string": "  @Test\n  public void responseMinDecreased() {\n    assertIncompatibleResponse(\"bc_response_numericrange_min_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMinDeleted()", "name": "responseMinDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMinDeleted()", "original_string": "  @Test\n  public void responseMinDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_min_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_scheme_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]bearerFormatChanged()", "name": "bearerFormatChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void bearerFormatChanged()", "original_string": "  @Test\n  public void bearerFormatChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_BEARER_FORMAT_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_bearer_format_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]inChanged()", "name": "inChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void inChanged()", "original_string": "  @Test\n  public void inChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_scheme_in_changed.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]openIdConnectUrlChanged()", "name": "openIdConnectUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void openIdConnectUrlChanged()", "original_string": "  @Test\n  public void openIdConnectUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OPENIDCONNECT_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_open_id_connect_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]schemeChanged()", "name": "schemeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void schemeChanged()", "original_string": "  @Test\n  public void schemeChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_SCHEME_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_scheme_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]typeChanged()", "name": "typeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void typeChanged()", "original_string": "  @Test\n  public void typeChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_scheme_type_changed.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]scopesIncreased()", "name": "scopesIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void scopesIncreased()", "original_string": "  @Test\n  public void scopesIncreased() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_SCOPES_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_scopes_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_readonly_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]requestReadOnlyIncreased()", "name": "requestReadOnlyIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestReadOnlyIncreased()", "original_string": "  @Test\n  public void requestReadOnlyIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_READONLY_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_readonly_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]requestReadOnlyRequiredDecreased()", "name": "requestReadOnlyRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestReadOnlyRequiredDecreased()", "original_string": "  @Test\n  public void requestReadOnlyRequiredDecreased() {\n    // Incompatible because a prev RO prop (invalid) is now not RO and required\n    BackwardIncompatibleProp prop = REQUEST_READONLY_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_readonly_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "class_name": "PathsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_paths_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "class_name": "PathsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_paths_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "class_name": "PathsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "class_name": "ApiResponseBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_apiresponse_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "class_name": "ApiResponseBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = RESPONSE_RESPONSES_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_apiresponse_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "class_name": "ApiResponseBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_schema_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]discriminatorChanged()", "name": "discriminatorChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void discriminatorChanged()", "original_string": "  @Test\n  public void discriminatorChanged() {\n    BackwardIncompatibleProp prop = SCHEMA_DISCRIMINATOR_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_schema_discriminator_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]requestFormatDecreased()", "name": "requestFormatDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestFormatDecreased()", "original_string": "  @Test\n  public void requestFormatDecreased() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_request_schema_format_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]requestFormatIncreased()", "name": "requestFormatIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestFormatIncreased()", "original_string": "  @Test\n  public void requestFormatIncreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertOpenApiBackwardIncompatible(BASE, \"bc_request_schema_format_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]requestPropsPutIncreased()", "name": "requestPropsPutIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestPropsPutIncreased()", "original_string": "  @Test\n  public void requestPropsPutIncreased() {\n    // See https://github.com/OpenAPITools/openapi-diff/issues/537\n    assertSpecChangedButCompatible(BASE, \"bc_request_schema_props_put_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]responseFormatDecreased()", "name": "responseFormatDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseFormatDecreased()", "original_string": "  @Test\n  public void responseFormatDecreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertOpenApiBackwardIncompatible(BASE, \"bc_response_schema_format_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]responseFormatIncreased()", "name": "responseFormatIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseFormatIncreased()", "original_string": "  @Test\n  public void responseFormatIncreased() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_response_schema_format_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]responsePropsRequiredDecreased()", "name": "responsePropsRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responsePropsRequiredDecreased()", "original_string": "  @Test\n  public void responsePropsRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_schema_props_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]typeChanged()", "name": "typeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void typeChanged()", "original_string": "  @Test\n  public void typeChanged() {\n    BackwardIncompatibleProp prop = SCHEMA_TYPE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_schema_type_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_content_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]requestDecreased()", "name": "requestDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestDecreased()", "original_string": "  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_CONTENT_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_content_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]responseDecreased()", "name": "responseDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseDecreased()", "original_string": "  @Test\n  public void responseDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_CONTENT_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_content_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest.[void]maxLengthUnchanged()", "name": "maxLengthUnchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void maxLengthUnchanged()", "original_string": "  @Test\n  public void maxLengthUnchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "class_name": "MaxLengthBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest.[void]requestMaxLengthDecreased()", "name": "requestMaxLengthDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMaxLengthDecreased()", "original_string": "  @Test\n  public void requestMaxLengthDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_MAX_LENGTH_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_maxlength_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "class_name": "MaxLengthBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest.[void]responseMaxLengthIncreased()", "name": "responseMaxLengthIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMaxLengthIncreased()", "original_string": "  @Test\n  public void responseMaxLengthIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_MAX_LENGTH_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_maxlength_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "class_name": "MaxLengthBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "class_name": "HeadersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_headers_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "class_name": "HeadersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest.[void]responseDecreased()", "name": "responseDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseDecreased()", "original_string": "  @Test\n  public void responseDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADERS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_headers_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "class_name": "HeadersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java", "class_name": "OperationBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_operation_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java", "class_name": "OperationBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_request_params_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_params_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]requiredIncreased()", "name": "requiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requiredIncreased()", "original_string": "  @Test\n  public void requiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_params_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java", "class_name": "RequestBodyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest.[void]requiredChanged()", "name": "requiredChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requiredChanged()", "original_string": "  @Test\n  public void requiredChanged() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_body_required_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java", "class_name": "RequestBodyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_oneof_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]requestDecreased()", "name": "requestDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestDecreased()", "original_string": "  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_ONEOF_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_oneof_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]responseIncreased()", "name": "responseIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseIncreased()", "original_string": "  @Test\n  public void responseIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_ONEOF_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_oneof_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "class_name": "SecurityRequirementBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_requirement_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "class_name": "SecurityRequirementBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest.[void]schemesIncreased()", "name": "schemesIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void schemesIncreased()", "original_string": "  @Test\n  public void schemesIncreased() {\n    BackwardIncompatibleProp prop = SECURITY_REQUIREMENT_SCHEMES_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_security_requirement_schemes_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "class_name": "SecurityRequirementBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_header_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]responseExplodeChanged()", "name": "responseExplodeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExplodeChanged()", "original_string": "  @Test\n  public void responseExplodeChanged() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_EXPLODE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_response_header_explode_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]responseRequiredDecreased()", "name": "responseRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseRequiredDecreased()", "original_string": "  @Test\n  public void responseRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_header_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]responseRequiredIncreased()", "name": "responseRequiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseRequiredIncreased()", "original_string": "  @Test\n  public void responseRequiredIncreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_header_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_enum_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]requestDecreased()", "name": "requestDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestDecreased()", "original_string": "  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_ENUM_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_enum_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]responseIncreased()", "name": "responseIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseIncreased()", "original_string": "  @Test\n  public void responseIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_ENUM_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_enum_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]authorizationUrlChanged()", "name": "authorizationUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void authorizationUrlChanged()", "original_string": "  @Test\n  public void authorizationUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_authorization_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]refreshUrlChanged()", "name": "refreshUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void refreshUrlChanged()", "original_string": "  @Test\n  public void refreshUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_refresh_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]tokenUrlChanged()", "name": "tokenUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void tokenUrlChanged()", "original_string": "  @Test\n  public void tokenUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_token_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_writeonly_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]responseWriteOnlyIncreased()", "name": "responseWriteOnlyIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseWriteOnlyIncreased()", "original_string": "  @Test\n  public void responseWriteOnlyIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_WRITEONLY_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_writeonly_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]responseWriteOnlyRequiredDecreased()", "name": "responseWriteOnlyRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseWriteOnlyRequiredDecreased()", "original_string": "  @Test\n  public void responseWriteOnlyRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_WRITEONLY_REQUIRED_DECREASED;\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertSpecIncompatible(BASE, \"bc_response_writeonly_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "class_name": "OpenApiBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_openapi_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "class_name": "OpenApiBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest.[void]endpointsDecreased()", "name": "endpointsDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void endpointsDecreased()", "original_string": "  @Test\n  public void endpointsDecreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_openapi_endpoints_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "class_name": "OpenApiBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_request_param_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]allowEmptyValueDecreased()", "name": "allowEmptyValueDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void allowEmptyValueDecreased()", "original_string": "  @Test\n  public void allowEmptyValueDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_ALLOWEMPTY_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_param_allowemptyvalue_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]explodeChanged()", "name": "explodeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void explodeChanged()", "original_string": "  @Test\n  public void explodeChanged() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_EXPLODE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_request_param_explode_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]requiredIncreased()", "name": "requiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requiredIncreased()", "original_string": "  @Test\n  public void requiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_param_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]styleChanged()", "name": "styleChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void styleChanged()", "original_string": "  @Test\n  public void styleChanged() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_STYLE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_request_param_style_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_requirements_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = SECURITY_REQUIREMENTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_security_requirements_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " requirements should be compatible."}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]schemeTypeChanged()", "name": "schemeTypeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void schemeTypeChanged()", "original_string": "  @Test\n  public void schemeTypeChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_requirements_scheme_type_changed.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " TODO: A missing incompatible check seems to be if requirements increase from zero to 1 or more"}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_required_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]requestRequiredIncreased()", "name": "requestRequiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestRequiredIncreased()", "original_string": "  @Test\n  public void requestRequiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]responseRequiredDecreased()", "name": "responseRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseRequiredDecreased()", "original_string": "  @Test\n  public void responseRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "class_name": "PathBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_path_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "class_name": "PathBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest.[void]opsDecreased()", "name": "opsDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void opsDecreased()", "original_string": "  @Test\n  public void opsDecreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_path_ops_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "class_name": "PathBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]