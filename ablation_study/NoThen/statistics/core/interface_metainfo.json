[{"uris": "src/main/java/org/openapitools/openapidiff/core/output/Render.java.Render", "name": "Render", "file_path": "src/main/java/org/openapitools/openapidiff/core/output/Render.java", "superclasses": [], "methods": ["[void]render(ChangedOpenApi,OutputStreamWriter)", "[void]safelyAppend(OutputStreamWriter,String)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/output/Render.java.Render.[void]render(ChangedOpenApi,OutputStreamWriter)", "src/main/java/org/openapitools/openapidiff/core/output/Render.java.Render.[void]safelyAppend(OutputStreamWriter,String)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Render {\n\n  void render(ChangedOpenApi diff, OutputStreamWriter outputStreamWriter);\n\n  default void safelyAppend(OutputStreamWriter outputStreamWriter, String csq) {\n    try {\n      outputStreamWriter.append(csq);\n    } catch (IOException ex) {\n      throw new RendererException(ex);\n    }\n  }\n}"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed", "name": "Changed", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/Changed.java", "superclasses": [], "methods": ["[DiffResult]result(Changed)", "[DiffResult]isChanged()", "[boolean]isCompatible()", "[boolean]isIncompatible()", "[boolean]isUnchanged()", "[boolean]isDifferent()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[DiffResult]result(Changed)", "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[DiffResult]isChanged()", "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isCompatible()", "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isIncompatible()", "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isUnchanged()", "src/main/java/org/openapitools/openapidiff/core/model/Changed.java.Changed.[boolean]isDifferent()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface Changed {\n  static DiffResult result(Changed changed) {\n    return Optional.ofNullable(changed).map(Changed::isChanged).orElse(DiffResult.NO_CHANGES);\n  }\n\n  DiffResult isChanged();\n\n  default boolean isCompatible() {\n    return isChanged().isCompatible();\n  }\n\n  default boolean isIncompatible() {\n    return isChanged().isIncompatible();\n  }\n\n  default boolean isUnchanged() {\n    return isChanged().isUnchanged();\n  }\n\n  default boolean isDifferent() {\n    return isChanged().isDifferent();\n  }\n}"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged", "name": "ComposedChanged", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java", "superclasses": ["Changed"], "methods": ["[List<Changed>]getChangedElements()", "[DiffResult]isCoreChanged()", "[DiffResult]isChanged()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged.[List<Changed>]getChangedElements()", "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged.[DiffResult]isCoreChanged()", "src/main/java/org/openapitools/openapidiff/core/model/ComposedChanged.java.ComposedChanged.[DiffResult]isChanged()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface ComposedChanged extends Changed {\n\n  @NotNull\n  List<Changed> getChangedElements();\n\n  @NotNull\n  DiffResult isCoreChanged();\n\n  @Override\n  default DiffResult isChanged() {\n    DiffResult elementsResult =\n        DiffResult.fromWeight(\n            getChangedElements().stream()\n                .filter(Objects::nonNull)\n                .map(Changed::isChanged)\n                .mapToInt(DiffResult::getWeight)\n                .max()\n                .orElse(0));\n    if (isCoreChanged().getWeight() > elementsResult.getWeight()) {\n      return isCoreChanged();\n    } else {\n      return elementsResult;\n    }\n  }\n}"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged", "name": "DeferredChanged", "file_path": "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java", "superclasses": [], "methods": ["[void]ifPresent(Consumer<T>)", "[void]whenSet(Consumer<Optional<T>>)", "[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "[DeferredChanged<T>]empty()", "[DeferredChanged<T>]ofNullable(T)", "[DeferredChanged<ChangedResponse>]of(Optional<T>)", "[boolean]isPresent()", "[boolean]isValueSet()", "[T]get()"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[void]ifPresent(Consumer<T>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[void]whenSet(Consumer<Optional<T>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<Q>]map(Function<Optional<T>, Q>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<Q>]mapOptional(Function<Optional<T>, Optional<Q>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<Q>]flatMap(Function<Optional<T>, DeferredChanged<Q>>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<T>]empty()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<T>]ofNullable(T)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[DeferredChanged<ChangedResponse>]of(Optional<T>)", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[boolean]isPresent()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[boolean]isValueSet()", "src/main/java/org/openapitools/openapidiff/core/model/deferred/DeferredChanged.java.DeferredChanged.[T]get()"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface DeferredChanged<T> {\n\n  void ifPresent(Consumer<T> consumer);\n\n  void whenSet(Consumer<Optional<T>> consumer);\n\n  <Q> DeferredChanged<Q> map(Function<Optional<T>, Q> consumer);\n\n  <Q> DeferredChanged<Q> mapOptional(Function<Optional<T>, Optional<Q>> consumer);\n\n  <Q> DeferredChanged<Q> flatMap(Function<Optional<T>, DeferredChanged<Q>> consumer);\n\n  static <T> DeferredChanged<T> empty() {\n    return RealizedChanged.empty();\n  }\n\n  static <T> DeferredChanged<T> ofNullable(@Nullable T value) {\n    return new RealizedChanged<>(value);\n  }\n\n  static <T extends Changed> DeferredChanged<ChangedResponse> of(Optional<T> changed) {\n    return new RealizedChanged(changed);\n  }\n\n  boolean isPresent();\n\n  boolean isValueSet();\n\n  T get();\n}"}, {"uris": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff", "name": "ExtensionDiff", "file_path": "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java", "superclasses": [], "methods": ["[ExtensionDiff]setOpenApiDiff(OpenApiDiff)", "[String]getName()", "[Changed]diff(Change<?>,DiffContext)", "[boolean]isParentApplicable(Change.Type,Object,Object,DiffContext)"], "method_uris": ["src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[ExtensionDiff]setOpenApiDiff(OpenApiDiff)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[String]getName()", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[Changed]diff(Change<?>,DiffContext)", "src/main/java/org/openapitools/openapidiff/core/compare/ExtensionDiff.java.ExtensionDiff.[boolean]isParentApplicable(Change.Type,Object,Object,DiffContext)"], "overrides": null, "attributes": null, "class_docstring": "", "original_string": "public interface ExtensionDiff {\n\n  ExtensionDiff setOpenApiDiff(OpenApiDiff openApiDiff);\n\n  String getName();\n\n  Changed diff(Change<?> extension, DiffContext context);\n\n  default boolean isParentApplicable(\n      Change.Type type, Object object, Object extension, DiffContext context) {\n    return true;\n  }\n}"}]