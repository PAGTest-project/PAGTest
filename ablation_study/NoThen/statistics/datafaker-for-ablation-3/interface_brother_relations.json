[{"uris": "src/test/java/net/datafaker/sequence/Data.java.Data", "name": "Data", "methods": ["[String]name()", "[String]value()", "[String]range()", "[String]unit()"], "implementations": ["src/test/java/net/datafaker/sequence/Data.java.BloodPressure", "src/test/java/net/datafaker/sequence/Data.java.Glucose", "src/test/java/net/datafaker/sequence/Data.java.Temperature"]}, {"uris": "src/main/java/net/datafaker/providers/base/ProviderRegistration.java.ProviderRegistration", "name": "ProviderRegistration", "methods": ["[B]getFaker()", "[FakerContext]getContext()", "[AP]getProvider(String)", "[AP]getProvider(Class<AP>,Function<PR, AP>)", "[String]resolve(String)", "[String]resolve(String,Supplier<String>)", "[String]numerify(String)", "[String]letterify(String)", "[String]letterify(String,boolean)", "[String]bothify(String)", "[String]bothify(String,boolean)", "[String]regexify(String)", "[String]examplify(String)", "[String]templatify(String,char)", "[String]templatify(String,Map<Character, String[]>)", "[String]csv(int)", "[String]csv(String,char,boolean,int)", "[String]json()", "[String]jsona()", "[RandomService]random()", "[String]expression(String)", "[FakeValuesService]fakeValuesService()", "[Options]options()", "[void]addPath(Locale,Path)", "[void]addUrl(Locale,URL)"], "implementations": []}, {"uris": "src/main/java/net/datafaker/providers/base/BaseProviders.java.BaseProviders", "name": "BaseProviders", "methods": ["[Address]address()", "[Ancient]ancient()", "[Animal]animal()", "[App]app()", "[Appliance]appliance()", "[Artist]artist()", "[Australia]australia()", "[Aviation]aviation()", "[Aws]aws()", "[Azure]azure()", "[Barcode]barcode()", "[BloodType]bloodtype()", "[Book]book()", "[Bool]bool()", "[Brand]brand()", "[Business]business()", "[Camera]camera()", "[Cannabis]cannabis()", "[Cat]cat()", "[Chiquito]chiquito()", "[CNPJ]cnpj()", "[Code]code()", "[Coin]coin()", "[Color]color()", "[Commerce]commerce()", "[Community]community()", "[Company]company()", "[Compass]compass()", "[Computer]computer()", "[Construction]construction()", "[Cosmere]cosmere()", "[Country]country()", "[CPF]cpf()", "[CryptoCoin]cryptoCoin()", "[CultureSeries]cultureSeries()", "[Currency]currency()", "[DateAndTime]date()", "[DcComics]dcComics()", "[Demographic]demographic()", "[Device]device()", "[Dog]dog()", "[Domain]domain()", "[DrivingLicense]drivingLicense()", "[Drone]drone()", "[DungeonsAndDragons]dungeonsAndDragons()", "[Educator]educator()", "[ElectricalComponents]electricalComponents()", "[Emoji]emoji()", "[FakeDuration]duration()", "[FamousLastWords]famousLastWords()", "[File]file()", "[Finance]finance()", "[FinancialTerms]financialTerms()", "[FunnyName]funnyName()", "[GarmentSize]garmentSize()", "[Gender]gender()", "[GreekPhilosopher]greekPhilosopher()", "[Hacker]hacker()", "[Hashing]hashing()", "[Hipster]hipster()", "[Hobby]hobby()", "[Hololive]hololive()", "[Horse]horse()", "[House]house()", "[IdNumber]idNumber()", "[Image]image()", "[IndustrySegments]industrySegments()", "[Internet]internet()", "[Job]job()", "[Kpop]kpop()", "[LanguageCode]languageCode()", "[LargeLanguageModel]largeLanguageModel()", "[Locality]locality()", "[Location]location()", "[Lorem]lorem()", "[Marketing]marketing()", "[Matz]matz()", "[Mbti]mbti()", "[Measurement]measurement()", "[Medical]medical()", "[Military]military()", "[Money]money()", "[Mood]mood()", "[Mountain]mountain()", "[Mountaineering]mountaineering()", "[Music]music()", "[Name]name()", "[Nation]nation()", "[NatoPhoneticAlphabet]natoPhoneticAlphabet()", "[Nigeria]nigeria()", "[Number]number()", "[OlympicSport]olympicSport()", "[Passport]passport()", "[PhoneNumber]phoneNumber()", "[Photography]photography()", "[Planet]planet()", "[ProgrammingLanguage]programmingLanguage()", "[Relationship]relationships()", "[Restaurant]restaurant()", "[Robin]robin()", "[RockBand]rockBand()", "[Science]science()", "[SlackEmoji]slackEmoji()", "[Shakespeare]shakespeare()", "[Sip]sip()", "[Size]size()", "[Space]space()", "[Stock]stock()", "[Subscription]subscription()", "[Superhero]superhero()", "[Team]team()", "[Text]text()", "[Time]time()", "[TimeAndDate]timeAndDate()", "[Tire]tire()", "[Transport]transport()", "[Twitter]twitter()", "[Unique]unique()", "[University]university()", "[Vehicle]vehicle()", "[Verb]verb()", "[Weather]weather()", "[Word]word()", "[Yoda]yoda()", "[Zodiac]zodiac()", "[Pronouns]pronouns()"], "implementations": ["src/main/java/net/datafaker/Faker.java.Faker", "src/main/java/net/datafaker/providers/base/BaseFaker.java.BaseFaker"]}, {"uris": "src/main/java/net/datafaker/providers/sport/SportProviders.java.SportProviders", "name": "SportProviders", "methods": ["[Baseball]baseball()", "[Basketball]basketball()", "[Chess]chess()", "[Cricket]cricket()", "[EnglandFootBall]englandfootball()", "[Football]football()", "[Formula1]formula1()", "[Volleyball]volleyball()"], "implementations": ["src/main/java/net/datafaker/Faker.java.Faker", "src/main/java/net/datafaker/providers/sport/SportFaker.java.SportFaker"]}, {"uris": "src/main/java/net/datafaker/providers/videogame/VideoGameProviders.java.VideoGameProviders", "name": "VideoGameProviders", "methods": ["[Battlefield1]battlefield1()", "[ClashOfClans]clashOfClans()", "[Control]control()", "[DarkSouls]darkSouls()", "[Dota2]dota2()", "[EldenRing]eldenRing()", "[ElderScrolls]elderScrolls()", "[Esports]esports()", "[Fallout]fallout()", "[FinalFantasyXIV]finalFantasyXIV()", "[HalfLife]halfLife()", "[Hearthstone]hearthstone()", "[HeroesOfTheStorm]heroesOfTheStorm()", "[LeagueOfLegends]leagueOfLegends()", "[MarvelSnap]marvelSnap()", "[MassEffect]massEffect()", "[Minecraft]minecraft()", "[Myst]myst()", "[Overwatch]overwatch()", "[RedDeadRedemption2]redDeadRedemption2()", "[SonicTheHedgehog]sonicTheHedgehog()", "[SoulKnight]soulKnight()", "[StarCraft]starCraft()", "[StreetFighter]streetFighter()", "[SuperMario]superMario()", "[SuperSmashBros]superSmashBros()", "[Touhou]touhou()", "[VideoGame]videoGame()", "[WarhammerFantasy]warhammerFantasy()", "[WorldOfWarcraft]worldOfWarcraft()", "[Zelda]zelda()"], "implementations": ["src/main/java/net/datafaker/Faker.java.Faker", "src/main/java/net/datafaker/providers/videogame/VideoGameFaker.java.VideoGameFaker"]}, {"uris": "src/main/java/net/datafaker/providers/healthcare/HealthcareProviders.java.HealthcareProviders", "name": "HealthcareProviders", "methods": ["[CareProvider]careProvider()", "[Disease]disease()", "[Medication]medication()", "[MedicalProcedure]medicalProcedure()", "[Observation]observation()"], "implementations": ["src/main/java/net/datafaker/Faker.java.Faker", "src/main/java/net/datafaker/providers/healthcare/HealthcareFaker.java.HealthcareFaker"]}, {"uris": "src/main/java/net/datafaker/providers/entertainment/EntertainmentProviders.java.EntertainmentProviders", "name": "EntertainmentProviders", "methods": ["[AquaTeenHungerForce]aquaTeenHungerForce()", "[Avatar]avatar()", "[BackToTheFuture]backToTheFuture()", "[Babylon5]babylon5()", "[BigBangTheory]bigBangTheory()", "[Boardgame]boardgame()", "[BojackHorseman]bojackHorseman()", "[BossaNova]bossaNova()", "[BreakingBad]breakingBad()", "[BrooklynNineNine]brooklynNineNine()", "[Buffy]buffy()", "[ChuckNorris]chuckNorris()", "[CowboyBebop]cowboyBebop()", "[Departed]departed()", "[DetectiveConan]detectiveConan()", "[DoctorWho]doctorWho()", "[Doraemon]doraemon()", "[DragonBall]dragonBall()", "[DumbAndDumber]dumbAndDumber()", "[Dune]dune()", "[FamilyGuy]familyGuy()", "[FinalSpace]finalSpace()", "[FreshPrinceOfBelAir]freshPrinceOfBelAir()", "[Friends]friends()", "[FullmetalAlchemist]fullMetalAlchemist()", "[Futurama]futurama()", "[GameOfThrones]gameOfThrones()", "[Ghostbusters]ghostbusters()", "[GratefulDead]gratefulDead()", "[HarryPotter]harryPotter()", "[HeyArnold]heyArnold()", "[HitchhikersGuideToTheGalaxy]hitchhikersGuideToTheGalaxy()", "[Hobbit]hobbit()", "[HowIMetYourMother]howIMetYourMother()", "[HowToTrainYourDragon]howToTrainYourDragon()", "[Joke]joke()", "[Kaamelott]kaamelott()", "[Lebowski]lebowski()", "[LordOfTheRings]lordOfTheRings()", "[MoneyHeist]moneyHeist()", "[Movie]movie()", "[Naruto]naruto()", "[NewGirl]newGirl()", "[OnePiece]onePiece()", "[OscarMovie]oscarMovie()", "[Pokemon]pokemon()", "[PrincessBride]princessBride()", "[ResidentEvil]residentEvil()", "[RickAndMorty]rickAndMorty()", "[RuPaulDragRace]ruPaulDragRace()", "[Seinfeld]seinfeld()", "[Show]show()", "[SiliconValley]siliconValley()", "[Simpsons]simpsons()", "[SouthPark]southPark()", "[Spongebob]spongebob()", "[Stargate]stargate()", "[StarTrek]starTrek()", "[StarWars]starWars()", "[StrangerThings]strangerThings()", "[StudioGhibli]studioGhibli()", "[Suits]suits()", "[Supernatural]supernatural()", "[SwordArtOnline]swordArtOnline()", "[TheExpanse]theExpanse()", "[TheItCrowd]theItCrowd()", "[TheKingkillerChronicle]theKingkillerChronicle()", "[TheRoom]theRoom()", "[TheThickOfIt]theThickOfIt()", "[TheVentureBros]theVentureBros()", "[Tron]tron()", "[TwinPeaks]twinPeaks()", "[VForVendetta]vForVendetta()", "[Witcher]witcher()"], "implementations": ["src/main/java/net/datafaker/Faker.java.Faker", "src/main/java/net/datafaker/providers/entertainment/EntertainmentFaker.java.EntertainmentFaker"]}, {"uris": "src/main/java/net/datafaker/providers/food/FoodProviders.java.FoodProviders", "name": "FoodProviders", "methods": ["[Beer]beer()", "[Coffee]coffee()", "[Dessert]dessert()", "[Food]food()", "[Tea]tea()"], "implementations": ["src/main/java/net/datafaker/Faker.java.Faker", "src/main/java/net/datafaker/providers/food/FoodFaker.java.FoodFaker"]}, {"uris": "src/main/java/net/datafaker/idnumbers/IdNumberGenerator.java.IdNumberGenerator", "name": "IdNumberGenerator", "methods": ["[String]countryCode()", "[String]generateValid(BaseProviders)", "[String]generateInvalid(BaseProviders)", "[PersonIdNumber]generateValid(BaseProviders,IdNumberRequest)"], "implementations": ["src/main/java/net/datafaker/idnumbers/BulgarianIdNumber.java.BulgarianIdNumber", "src/main/java/net/datafaker/idnumbers/UkrainianIdNumber.java.UkrainianIdNumber", "src/main/java/net/datafaker/idnumbers/GeorgianIdNumber.java.GeorgianIdNumber", "src/main/java/net/datafaker/idnumbers/MoldovanIdNumber.java.MoldovanIdNumber", "src/main/java/net/datafaker/idnumbers/EstonianIdNumber.java.EstonianIdNumber", "src/main/java/net/datafaker/idnumbers/AlbanianIdNumber.java.AlbanianIdNumber", "src/main/java/net/datafaker/idnumbers/RomanianIdNumber.java.RomanianIdNumber", "src/main/java/net/datafaker/idnumbers/PolishIdNumber.java.PolishIdNumber", "src/main/java/net/datafaker/idnumbers/SouthKoreanIdNumber.java.SouthKoreanIdNumber", "src/main/java/net/datafaker/idnumbers/MexicanIdNumber.java.MexicanIdNumber", "src/main/java/net/datafaker/idnumbers/SouthAfricanIdNumber.java.SouthAfricanIdNumber", "src/main/java/net/datafaker/idnumbers/AmericanIdNumber.java.AmericanIdNumber", "src/main/java/net/datafaker/idnumbers/SwedenIdNumber.java.SwedenIdNumber", "src/main/java/net/datafaker/idnumbers/ChineseIdNumber.java.ChineseIdNumber", "src/main/java/net/datafaker/idnumbers/MacedonianIdNumber.java.MacedonianIdNumber", "src/main/java/net/datafaker/idnumbers/SingaporeIdNumber.java.SingaporeIdNumber", "src/main/java/net/datafaker/idnumbers/PortugueseIdNumber.java.PortugueseIdNumber"]}, {"uris": "src/main/java/net/datafaker/service/FakeValuesInterface.java.FakeValuesInterface", "name": "FakeValuesInterface", "methods": ["[Map<String, Object>]get(String)"], "implementations": ["src/main/java/net/datafaker/service/FakeValuesGrouping.java.FakeValuesGrouping", "src/main/java/net/datafaker/service/FakeValues.java.FakeValues"]}, {"uris": "src/main/java/net/datafaker/transformations/Field.java.Field", "name": "Field", "methods": ["[String]getName()", "[OUT]transform(IN)", "[SimpleField<MyObject, MyType>]field(String,Function<MyObject, MyType>)", "[SimpleField<MyObject, MyType>]field(String,Supplier<MyType>)", "[CompositeField<MyObject, MyType>]compositeField(String,Field<MyObject, MyType>[])"], "implementations": []}, {"uris": "src/main/java/net/datafaker/transformations/Transformer.java.Transformer", "name": "Transformer", "methods": ["[OUT]apply(IN,Schema<IN, ?>)", "[OUT]apply(IN,Schema<IN, ?>,long)", "[OUT]generate(Iterable<IN>,Schema<IN, ?>)", "[OUT]generate(Schema<IN, ?>,int)", "[String]getStartStream(Schema<IN, ?>)", "[String]getEndStream()", "[String]getLineSeparator()", "[String]getElementSeparator()", "[Stream<OUT>]generateStream(Schema<IN, ?>,long)"], "implementations": []}, {"uris": "src/main/java/net/datafaker/transformations/sql/TriFunction.java.TriFunction", "name": "TriFunction", "methods": ["[R]apply(A,B,C)"], "implementations": []}]