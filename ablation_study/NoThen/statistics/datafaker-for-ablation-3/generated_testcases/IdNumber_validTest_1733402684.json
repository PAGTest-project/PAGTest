[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class IdNumber_validTest {\n\n    @Test\n    public void testValidWithCountryProvider() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        IdNumberGenerator idNumberGenerator = Mockito.mock(IdNumberGenerator.class);\n        IdNumber idNumber = new IdNumber(faker);\n        idNumber.countryProviders.put(\"US\", idNumberGenerator);\n\n        when(faker.getContext().getLocale().getCountry()).thenReturn(\"US\");\n        when(idNumberGenerator.generateValid(faker)).thenReturn(\"123-45-6789\");\n\n        // When\n        String result = idNumber.valid();\n\n        // Then\n        assertEquals(\"123-45-6789\", result);\n    }\n\n    @Test\n    public void testValidWithoutCountryProvider() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        IdNumber idNumber = new IdNumber(faker);\n\n        when(faker.getContext().getLocale().getCountry()).thenReturn(\"XX\");\n        when(faker.numerify(Mockito.anyString())).thenReturn(\"123456789\");\n        when(faker.resolve(Mockito.anyString())).thenReturn(\"id_number.valid\");\n\n        // When\n        String result = idNumber.valid();\n\n        // Then\n        assertEquals(\"123456789\", result);\n    }\n}\n"}]