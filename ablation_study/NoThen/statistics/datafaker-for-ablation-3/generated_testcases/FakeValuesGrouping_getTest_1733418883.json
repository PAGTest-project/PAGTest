[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.mockito.Mockito.*;\n\npublic class FakeValuesGrouping_getTest {\n\n    private FakeValuesGrouping fakeValuesGrouping;\n    private FakeValuesInterface mockFakeValues;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesGrouping = new FakeValuesGrouping();\n        mockFakeValues = mock(FakeValuesInterface.class);\n    }\n\n    @Test\n    public void testGet_WithSingleFakeValue() {\n        // Given\n        Map<String, Object> mockMap = new HashMap<>();\n        mockMap.put(\"key1\", \"value1\");\n        when(mockFakeValues.get(\"key1\")).thenReturn(mockMap);\n        fakeValuesGrouping.add(mockFakeValues);\n\n        // When\n        Map result = fakeValuesGrouping.get(\"key1\");\n\n        // Then\n        assertEquals(mockMap, result);\n    }\n\n    @Test\n    public void testGet_WithMultipleFakeValues() {\n        // Given\n        Map<String, Object> mockMap1 = new HashMap<>();\n        mockMap1.put(\"key1\", \"value1\");\n        Map<String, Object> mockMap2 = new HashMap<>();\n        mockMap2.put(\"key1\", \"value2\");\n        when(mockFakeValues.get(\"key1\")).thenReturn(mockMap1, mockMap2);\n        fakeValuesGrouping.add(mockFakeValues);\n\n        // When\n        Map result = fakeValuesGrouping.get(\"key1\");\n\n        // Then\n        Map<String, Object> expectedMap = new HashMap<>();\n        expectedMap.put(\"key1\", \"value2\");\n        assertEquals(expectedMap, result);\n    }\n\n    @Test\n    public void testGet_WithNoFakeValues() {\n        // Given\n        when(mockFakeValues.get(\"key1\")).thenReturn(null);\n        fakeValuesGrouping.add(mockFakeValues);\n\n        // When\n        Map result = fakeValuesGrouping.get(\"key1\");\n\n        // Then\n        assertNull(result);\n    }\n\n    @Test\n    public void testGet_WithEmptyKey() {\n        // Given\n        when(mockFakeValues.get(\"\")).thenReturn(Collections.emptyMap());\n        fakeValuesGrouping.add(mockFakeValues);\n\n        // When\n        Map result = fakeValuesGrouping.get(\"\");\n\n        // Then\n        assertEquals(Collections.emptyMap(), result);\n    }\n}\n"}]