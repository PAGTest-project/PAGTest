[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport java.util.concurrent.Callable;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\nimport net.datafaker.service.FakerContext;\nimport net.datafaker.service.FakeValuesService;\n\nclass BaseFaker_doWithTest {\n\n    @Test\n    void testDoWithSuccess() throws Exception {\n        // Given\n        BaseFaker baseFaker = spy(new BaseFaker());\n        FakerContext context = mock(FakerContext.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        doReturn(context).when(baseFaker).getContext();\n        doReturn(fakeValuesService).when(baseFaker).getFakeValuesService();\n\n        Locale originalLocale = Locale.ENGLISH;\n        Locale newLocale = Locale.FRENCH;\n        when(context.getLocale()).thenReturn(originalLocale);\n\n        Callable<String> callable = () -> \"success\";\n\n        // When\n        String result = baseFaker.doWith(callable, newLocale);\n\n        // Then\n        assertEquals(\"success\", result);\n        verify(context).setCurrentLocale(newLocale);\n        verify(fakeValuesService).updateFakeValuesInterfaceMap(anyList());\n        verify(context).setCurrentLocale(originalLocale);\n    }\n\n    @Test\n    void testDoWithException() {\n        // Given\n        BaseFaker baseFaker = spy(new BaseFaker());\n        FakerContext context = mock(FakerContext.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        doReturn(context).when(baseFaker).getContext();\n        doReturn(fakeValuesService).when(baseFaker).getFakeValuesService();\n\n        Locale originalLocale = Locale.ENGLISH;\n        Locale newLocale = Locale.FRENCH;\n        when(context.getLocale()).thenReturn(originalLocale);\n\n        Callable<String> callable = () -> {\n            throw new Exception(\"test exception\");\n        };\n\n        // When\n        RuntimeException thrown = assertThrows(RuntimeException.class, () -> {\n            baseFaker.doWith(callable, newLocale);\n        });\n\n        // Then\n        assertEquals(\"test exception\", thrown.getCause().getMessage());\n        verify(context).setCurrentLocale(newLocale);\n        verify(fakeValuesService).updateFakeValuesInterfaceMap(anyList());\n        verify(context).setCurrentLocale(originalLocale);\n    }\n}\n"}]