[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.service.RandomService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class ChineseIdNumber_generateValidTest {\n\n    private BaseProviders faker;\n    private RandomService randomService;\n    private IdNumberRequest request;\n    private ChineseIdNumber chineseIdNumber;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        randomService = Mockito.mock(RandomService.class);\n        request = new IdNumberRequest(18, 60, \"MALE\");\n        chineseIdNumber = new ChineseIdNumber();\n\n        when(faker.random()).thenReturn(randomService);\n        when(faker.options().option(ChineseIdNumber.LOCATIONS)).thenReturn(\"110000\");\n        when(faker.date().birthday(18, 60)).thenReturn(LocalDate.of(1990, 1, 1));\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        when(randomService.nextInt(10)).thenReturn(1, 2, 3);\n\n        // When\n        PersonIdNumber result = chineseIdNumber.generateValid(faker, request);\n\n        // Then\n        assertEquals(\"11000019900101123\", result.getIdNumber());\n        assertEquals(LocalDate.of(1990, 1, 1), result.getBirthday());\n        assertEquals(\"MALE\", result.getGender());\n    }\n}\n"}]