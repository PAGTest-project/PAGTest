[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\n\npublic class MacedonianIdNumber_generateValidTest {\n    private MacedonianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MacedonianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        String basePart = \"010190000000\";\n        String expectedIdNumber = basePart + \"6\"; // Assuming checksum for this basePart is 6\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.gender()).thenReturn(gender);\n        when(generator.basePart(faker, birthday, gender)).thenReturn(basePart);\n        when(generator.checksum(basePart)).thenReturn(6);\n\n        IdNumberRequest request = mock(IdNumberRequest.class);\n\n        // When\n        PersonIdNumber result = generator.generateValid(faker, request);\n\n        // Then\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        String basePart = \"010190000000\";\n        String expectedInvalidIdNumber = basePart + \"7\"; // Assuming checksum for this basePart is 6, invalid checksum would be 7\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.gender()).thenReturn(gender);\n        when(generator.basePart(faker, birthday, gender)).thenReturn(basePart);\n        when(generator.checksum(basePart)).thenReturn(6);\n\n        // When\n        String result = generator.generateInvalid(faker);\n\n        // Then\n        assertEquals(expectedInvalidIdNumber, result);\n    }\n\n    @Test\n    public void testChecksum() {\n        assertEquals(6, generator.checksum(\"010100650000\"));\n        assertEquals(4, generator.checksum(\"923456789012\"));\n    }\n}\n"}]