[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport java.util.Set;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass FakeValuesGrouping_addTest {\n\n    @Test\n    void testAddWithFakeValues() {\n        // Given\n        FakeValuesContext context = FakeValuesContext.of(Locale.ENGLISH, \"file\", \"path\");\n        FakeValues fakeValue = FakeValues.of(context);\n        Set<String> paths = Set.of(\"path1\", \"path2\");\n        // Mocking getPaths to return predefined paths\n        fakeValue.getPaths = () -> paths;\n\n        FakeValuesGrouping grouping = new FakeValuesGrouping();\n\n        // When\n        grouping.add(fakeValue);\n\n        // Then\n        for (String path : paths) {\n            assertTrue(grouping.fakeValues.containsKey(path));\n            assertTrue(grouping.fakeValues.get(path).contains(fakeValue));\n        }\n    }\n\n    @Test\n    void testAddWithFakeValuesGrouping() {\n        // Given\n        FakeValuesGrouping grouping1 = new FakeValuesGrouping();\n        FakeValuesGrouping grouping2 = new FakeValuesGrouping();\n\n        // When\n        grouping1.add(grouping2);\n\n        // Then\n        assertEquals(grouping2.fakeValues, grouping1.fakeValues);\n    }\n\n    @Test\n    void testAddWithUnsupportedType() {\n        // Given\n        FakeValuesGrouping grouping = new FakeValuesGrouping();\n        FakeValuesInterface unsupportedValue = new FakeValuesInterface() {};\n\n        // When & Then\n        assertThrows(RuntimeException.class, () -> grouping.add(unsupportedValue));\n    }\n}\n"}]