[{"strategy": "retry", "code": "\npackage net.datafaker.transformations.sql;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\nimport net.datafaker.transformations.Schema;\nimport net.datafaker.transformations.Field;\nimport net.datafaker.transformations.sql.SqlTransformer.Case;\nimport net.datafaker.transformations.sql.SqlTransformer.Casing;\n\npublic class SqlTransformer_applyTest {\n\n    @Test\n    public void testApply_NoFields() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, false, -1, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field[0]);\n\n        CharSequence result = transformer.apply(new Object(), schema, 0);\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testApply_NonBatchMode() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, false, -1, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ? extends CharSequence>[] fields = new Field[1];\n        fields[0] = mock(Field.class);\n        when(fields[0].getName()).thenReturn(\"field1\");\n        when(schema.getFields()).thenReturn(fields);\n\n        CharSequence result = transformer.apply(new Object(), schema, 0);\n        assertEquals(\"INSERT INTO MyTable (field1) VALUES ()\", result);\n    }\n\n    @Test\n    public void testApply_BatchMode_FirstRow() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, true, 2, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ? extends CharSequence>[] fields = new Field[1];\n        fields[0] = mock(Field.class);\n        when(fields[0].getName()).thenReturn(\"field1\");\n        when(schema.getFields()).thenReturn(fields);\n\n        CharSequence result = transformer.apply(new Object(), schema, 0);\n        assertEquals(\"INSERT INTO MyTable (field1) VALUES ()\", result);\n    }\n\n    @Test\n    public void testApply_BatchMode_OtherRow() {\n        SqlTransformer<Object> transformer = new SqlTransformer<>(null, \"MyTable\", '\\'', null, \"\\\"\\\"\", Casing.TO_UPPER, true, 2, Case.UPPERCASE, false);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ? extends CharSequence>[] fields = new Field[1];\n        fields[0] = mock(Field.class);\n        when(fields[0].getName()).thenReturn(\"field1\");\n        when(schema.getFields()).thenReturn(fields);\n\n        CharSequence result = transformer.apply(new Object(), schema, 1);\n        assertEquals(\", INSERT INTO MyTable (field1) VALUES ()\", result);\n    }\n}\n"}]