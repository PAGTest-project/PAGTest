[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class UkrainianIdNumber_generateInvalidTest {\n\n    @Test\n    public void testGenerateInvalid() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        String dob = DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(birthday);\n        String numbers = \"1234\";\n        int multiplied = Utils.multiply(dob + numbers, new int[]{7, 3, 1, 7, 3, 1, 7, 3, 1, 7, 3, 1});\n        int checksum = (multiplied + 1) % 10;\n        String expected = dob + \"-\" + numbers + checksum;\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.numerify(\"####\")).thenReturn(numbers);\n\n        UkrainianIdNumber ukrainianIdNumber = new UkrainianIdNumber();\n\n        // When\n        String result = ukrainianIdNumber.generateInvalid(faker);\n\n        // Then\n        assertEquals(expected, result);\n    }\n}\n"}]