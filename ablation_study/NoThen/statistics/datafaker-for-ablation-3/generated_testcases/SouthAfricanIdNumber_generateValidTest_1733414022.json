[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.LocalDate;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class SouthAfricanIdNumber_generateValidTest {\n\n    private SouthAfricanIdNumber southAfricanIdNumber;\n    private BaseProviders mockBaseProviders;\n\n    @BeforeEach\n    public void setUp() {\n        southAfricanIdNumber = new SouthAfricanIdNumber();\n        mockBaseProviders = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateValid_Female() {\n        IdNumberRequest request = mock(IdNumberRequest.class);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.FEMALE;\n\n        when(Utils.birthday(mockBaseProviders, request)).thenReturn(birthday);\n        when(Utils.gender(mockBaseProviders, request)).thenReturn(gender);\n        when(mockBaseProviders.number().numberBetween(0, 5000)).thenReturn(1234);\n        when(mockBaseProviders.options().option(SouthAfricanIdNumber.CODE_PATTERN)).thenReturn(\"08\");\n\n        PersonIdNumber result = southAfricanIdNumber.generateValid(mockBaseProviders, request);\n\n        assertEquals(\"900101123408\", result.getIdNumber().substring(0, 12));\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n\n    @Test\n    public void testGenerateValid_Male() {\n        IdNumberRequest request = mock(IdNumberRequest.class);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n\n        when(Utils.birthday(mockBaseProviders, request)).thenReturn(birthday);\n        when(Utils.gender(mockBaseProviders, request)).thenReturn(gender);\n        when(mockBaseProviders.number().numberBetween(5000, 10_000)).thenReturn(6789);\n        when(mockBaseProviders.options().option(SouthAfricanIdNumber.CODE_PATTERN)).thenReturn(\"18\");\n\n        PersonIdNumber result = southAfricanIdNumber.generateValid(mockBaseProviders, request);\n\n        assertEquals(\"900101678918\", result.getIdNumber().substring(0, 12));\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]