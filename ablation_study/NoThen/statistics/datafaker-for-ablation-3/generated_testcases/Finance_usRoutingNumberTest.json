[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class Finance_usRoutingNumberTest {\n    private Finance finance;\n\n    @BeforeEach\n    public void setUp() {\n        finance = new Finance(new BaseProviders() {});\n    }\n\n    @Test\n    void testUsRoutingNumberValidFormat() {\n        String routingNumber = finance.usRoutingNumber();\n        assertTrue(routingNumber.matches(\"\\\\d{9}\"));\n    }\n\n    @Test\n    void testUsRoutingNumberChecksum() {\n        String routingNumber = finance.usRoutingNumber();\n        int checkDigit = Character.getNumericValue(routingNumber.charAt(8));\n        String base = routingNumber.substring(0, 8);\n        int calculatedCheckDigit = calculateCheckDigit(base);\n        assertEquals(calculatedCheckDigit, checkDigit);\n    }\n\n    private int calculateCheckDigit(String base) {\n        int check =\n            Character.getNumericValue(base.charAt(0)) * 3\n            + Character.getNumericValue(base.charAt(1)) * 7\n            + Character.getNumericValue(base.charAt(2))\n            + Character.getNumericValue(base.charAt(3)) * 3\n            + Character.getNumericValue(base.charAt(4)) * 7\n            + Character.getNumericValue(base.charAt(5))\n            + Character.getNumericValue(base.charAt(6)) * 3\n            + Character.getNumericValue(base.charAt(7)) * 7;\n        return Math.abs(check % 10 - 10) % 10;\n    }\n}\n"}]