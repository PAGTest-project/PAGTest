[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.Faker;\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class RomanianIdNumber_generateValidTest {\n    private RomanianIdNumber impl;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        impl = new RomanianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        LocalDate birthday = LocalDate.of(1990, 8, 19);\n        Gender gender = Gender.MALE;\n        IdNumberRequest request = mock(IdNumberRequest.class);\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.gender().binaryTypes()).thenReturn(gender.toString());\n\n        // When\n        PersonIdNumber result = impl.generateValid(faker, request);\n\n        // Then\n        assertEquals(gender, result.getGender());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(13, result.getIdNumber().length()); // Assuming the ID number should be 13 characters long\n    }\n\n    @Test\n    public void testChecksum() {\n        assertEquals(1, impl.checksum(\"198081945678\"));\n        assertEquals(4, impl.checksum(\"293052637289\"));\n    }\n}\n"}]