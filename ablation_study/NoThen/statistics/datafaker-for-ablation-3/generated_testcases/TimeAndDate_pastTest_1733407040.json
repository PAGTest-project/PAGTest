[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.Instant;\nimport java.util.concurrent.TimeUnit;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TimeAndDate_pastTest {\n    private TimeAndDate timeAndDate;\n\n    @BeforeEach\n    public void setUp() {\n        timeAndDate = new TimeAndDate(new BaseProviders());\n    }\n\n    @Test\n    public void testPastWithinRange() {\n        long atMost = 1000; // 1 second\n        TimeUnit unit = TimeUnit.MILLISECONDS;\n        Instant referenceDate = Instant.now();\n        Instant pastDate = timeAndDate.past(atMost, unit, referenceDate);\n        assertTrue(pastDate.isBefore(referenceDate));\n        assertTrue(referenceDate.toEpochMilli() - pastDate.toEpochMilli() < atMost);\n    }\n\n    @Test\n    public void testPastWithLargeRange() {\n        long atMost = TimeUnit.DAYS.toMillis(365); // 1 year\n        TimeUnit unit = TimeUnit.MILLISECONDS;\n        Instant referenceDate = Instant.now();\n        Instant pastDate = timeAndDate.past(atMost, unit, referenceDate);\n        assertTrue(pastDate.isBefore(referenceDate));\n        assertTrue(referenceDate.toEpochMilli() - pastDate.toEpochMilli() < atMost);\n    }\n\n    @Test\n    public void testPastWithSmallRange() {\n        long atMost = 1; // 1 millisecond\n        TimeUnit unit = TimeUnit.MILLISECONDS;\n        Instant referenceDate = Instant.now();\n        Instant pastDate = timeAndDate.past(atMost, unit, referenceDate);\n        assertTrue(pastDate.isBefore(referenceDate));\n        assertTrue(referenceDate.toEpochMilli() - pastDate.toEpochMilli() < atMost);\n    }\n}\n"}]