[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.sql.Timestamp;\nimport java.util.concurrent.TimeUnit;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class DateAndTime_futureTest {\n    private DateAndTime dateAndTime;\n\n    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseProviders();\n        dateAndTime = new DateAndTime(faker);\n    }\n\n    @Test\n    void testFutureDateWithReferenceDate() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        Timestamp futureDate = dateAndTime.future(1, TimeUnit.SECONDS, now);\n        assertThat(futureDate.getTime()).isGreaterThan(now.getTime())\n                .isLessThan(now.getTime() + 1000);\n    }\n\n    @Test\n    void testFutureDateWithMinimumTime() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        Timestamp futureDate = dateAndTime.future(2, 1, TimeUnit.SECONDS);\n        assertThat(futureDate.getTime()).isGreaterThan(now.getTime() + 1000)\n                .isLessThan(now.getTime() + 2000);\n    }\n\n    @Test\n    void testFutureDateToString() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        String futureDateString = dateAndTime.future(1, TimeUnit.SECONDS, now, \"yyyy-MM-dd HH:mm:ss\");\n        Timestamp futureDate = Timestamp.valueOf(futureDateString);\n        assertThat(futureDate.getTime()).isGreaterThan(now.getTime())\n                .isLessThan(now.getTime() + 1000);\n    }\n\n    @Test\n    void testFutureDateBetweenRange() {\n        Timestamp now = new Timestamp(System.currentTimeMillis());\n        Timestamp futureDate = dateAndTime.future(2, TimeUnit.SECONDS, now);\n        Timestamp minDate = new Timestamp(now.getTime() + 1);\n        Timestamp maxDate = new Timestamp(now.getTime() + 2000);\n        assertThat(futureDate).isBetween(minDate, maxDate);\n    }\n}\n"}]