[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.util.Random;\nimport java.util.stream.Stream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\npublic class RandomService_nextLongTest {\n\n    private RandomService randomService;\n\n    @BeforeEach\n    public void setUp() {\n        randomService = new RandomService(new Random());\n    }\n\n    @Test\n    void testNextLongWithPositiveBound() {\n        long bound = 100L;\n        long result = randomService.nextLong(bound);\n        assertThat(result).isGreaterThanOrEqualTo(0L).isLessThan(bound);\n    }\n\n    @Test\n    void testNextLongWithBoundOne() {\n        long bound = 1L;\n        long result = randomService.nextLong(bound);\n        assertThat(result).isEqualTo(0L);\n    }\n\n    @Test\n    void testNextLongWithNegativeBound() {\n        long bound = -100L;\n        assertThatThrownBy(() -> randomService.nextLong(bound))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessage(\"bound must be positive: \" + bound);\n    }\n\n    @Test\n    void testNextLongWithZeroBound() {\n        long bound = 0L;\n        assertThatThrownBy(() -> randomService.nextLong(bound))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasMessage(\"bound must be positive: \" + bound);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"randomServiceProvider\")\n    void testNextLongWithinBoundary(RandomService randomService) {\n        long bound = 100L;\n        for (int i = 0; i < 10; i++) {\n            long result = randomService.nextLong(bound);\n            assertThat(result).isGreaterThanOrEqualTo(0L).isLessThan(bound);\n        }\n    }\n\n    private static Stream<Arguments> randomServiceProvider() {\n        return Stream.of(\n                Arguments.of(new RandomService(new Random())),\n                Arguments.of(new RandomService())\n        );\n    }\n}\n"}]