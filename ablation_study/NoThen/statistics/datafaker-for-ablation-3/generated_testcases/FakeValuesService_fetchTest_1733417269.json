[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FakeValuesService_fetchTest {\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n    }\n\n    @Test\n    public void testFetchWithSingleElementList() {\n        List<String> singleElementList = List.of(\"singleElement\");\n        fakeValuesService.updateFakeValuesInterfaceMap(List.of(FakeValuesService.DEFAULT_LOCALE));\n        Object result = fakeValuesService.fetch(\"key\", context);\n        assertEquals(singleElementList.get(0), result);\n    }\n\n    @Test\n    public void testFetchWithMultipleElementList() {\n        List<String> multipleElementList = List.of(\"element1\", \"element2\", \"element3\");\n        fakeValuesService.updateFakeValuesInterfaceMap(List.of(FakeValuesService.DEFAULT_LOCALE));\n        Object result = fakeValuesService.fetch(\"key\", context);\n        assertTrue(multipleElementList.contains(result));\n    }\n\n    @Test\n    public void testFetchWithEmptyList() {\n        List<String> emptyList = List.of();\n        fakeValuesService.updateFakeValuesInterfaceMap(List.of(FakeValuesService.DEFAULT_LOCALE));\n        Object result = fakeValuesService.fetch(\"key\", context);\n        assertNull(result);\n    }\n\n    @Test\n    public void testFetchWithNonListObject() {\n        Object nonListObject = \"notAList\";\n        fakeValuesService.updateFakeValuesInterfaceMap(List.of(FakeValuesService.DEFAULT_LOCALE));\n        Object result = fakeValuesService.fetch(\"key\", context);\n        assertNull(result);\n    }\n\n    @Test\n    public void testFetchWithNullObject() {\n        fakeValuesService.updateFakeValuesInterfaceMap(List.of(FakeValuesService.DEFAULT_LOCALE));\n        Object result = fakeValuesService.fetch(\"key\", context);\n        assertNull(result);\n    }\n}\n"}]