[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\n\npublic class BulgarianIdNumber_generateInvalidTest {\n    private BulgarianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new BulgarianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        LocalDate birthDate = LocalDate.of(1980, 3, 20);\n        when(faker.timeAndDate().birthday()).thenReturn(birthDate);\n        when(faker.number().numberBetween(0, 5)).thenReturn(2);\n        when(faker.number().digits(2)).thenReturn(\"05\");\n\n        String basePart = \"800320053\";\n        when(faker.number().digits(2)).thenReturn(\"05\");\n        when(faker.number().numberBetween(0, 5)).thenReturn(2);\n\n        String invalidId = generator.generateInvalid(faker);\n        assertEquals(basePart + \"2\", invalidId);\n    }\n\n    @Test\n    void testChecksum() {\n        assertEquals(1, generator.checksum(\"803205603\"));\n        assertEquals(8, generator.checksum(\"800101000\"));\n        assertEquals(8, generator.checksum(\"750102001\"));\n        assertEquals(0, generator.checksum(\"820630876\"));\n        assertEquals(7, generator.checksum(\"560628204\"));\n        assertEquals(3, generator.checksum(\"752316926\"));\n        assertEquals(5, generator.checksum(\"755201000\"));\n        assertEquals(0, generator.checksum(\"754201103\"));\n    }\n}\n"}]