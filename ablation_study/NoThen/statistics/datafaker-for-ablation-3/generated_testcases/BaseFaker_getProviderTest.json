[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Map;\nimport java.util.IdentityHashMap;\nimport java.util.function.Function;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nclass BaseFaker_getProviderTest {\n\n    private BaseFaker baseFaker;\n    private Map<Class<?>, AbstractProvider<?>> providersCache;\n\n    @BeforeEach\n    void setUp() {\n        baseFaker = new BaseFaker();\n        providersCache = new IdentityHashMap<>();\n        baseFaker.providersCache = providersCache;\n    }\n\n    @Test\n    void testGetProvider() {\n        // Given\n        Class<TestProvider> clazz = TestProvider.class;\n        Function<ProviderRegistration, TestProvider> valueSupplier = mock(Function.class);\n        ProviderRegistration faker = baseFaker.getFaker();\n        TestProvider expectedProvider = new TestProvider(faker);\n        when(valueSupplier.apply(faker)).thenReturn(expectedProvider);\n\n        // When\n        TestProvider actualProvider = baseFaker.getProvider(clazz, valueSupplier);\n\n        // Then\n        assertEquals(expectedProvider, actualProvider);\n        assertEquals(expectedProvider, providersCache.get(clazz));\n    }\n\n    static class TestProvider extends AbstractProvider<ProviderRegistration> {\n        protected TestProvider(ProviderRegistration faker) {\n            super(faker);\n        }\n    }\n}\n"}]