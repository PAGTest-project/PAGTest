[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.Test;\nimport java.net.MalformedURLException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Locale;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass FakeValuesService_addPathTest {\n\n    @Test\n    void testAddPath_ValidPath() throws MalformedURLException {\n        // Given\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        Locale locale = Locale.ENGLISH;\n        Path validPath = Paths.get(\"validFile.txt\");\n        when(Files.exists(validPath)).thenReturn(true);\n        when(Files.isDirectory(validPath)).thenReturn(false);\n        when(Files.isReadable(validPath)).thenReturn(true);\n\n        // When\n        fakeValuesService.addPath(locale, validPath);\n\n        // Then (no exception is thrown)\n    }\n\n    @Test\n    void testAddPath_InvalidPath() {\n        // Given\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        Locale locale = Locale.ENGLISH;\n        Path invalidPath = Paths.get(\"invalidFile.txt\");\n        when(Files.exists(invalidPath)).thenReturn(false);\n\n        // When and Then\n        assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, invalidPath));\n    }\n\n    @Test\n    void testAddPath_MalformedURL() {\n        // Given\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        Locale locale = Locale.ENGLISH;\n        Path validPath = Paths.get(\"validFile.txt\");\n        when(Files.exists(validPath)).thenReturn(true);\n        when(Files.isDirectory(validPath)).thenReturn(false);\n        when(Files.isReadable(validPath)).thenReturn(true);\n        doThrow(new MalformedURLException()).when(validPath).toUri().toURL();\n\n        // When and Then\n        assertThrows(IllegalArgumentException.class, () -> fakeValuesService.addPath(locale, validPath));\n    }\n}\n"}]