[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.Instant;\nimport java.util.concurrent.TimeUnit;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport net.datafaker.service.RandomService;\n\npublic class TimeAndDate_futureTest {\n    private TimeAndDate timeAndDate;\n\n    @BeforeEach\n    public void setUp() {\n        timeAndDate = new TimeAndDate(new BaseProviders() {\n            @Override\n            public RandomService random() {\n                return new RandomService();\n            }\n        });\n    }\n\n    @Test\n    public void testFutureWithReferenceDate() {\n        long atMost = 1000;\n        TimeUnit unit = TimeUnit.MILLISECONDS;\n        Instant referenceDate = Instant.now();\n\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertTrue(futureDate.isAfter(referenceDate));\n        assertTrue(futureDate.toEpochMilli() < referenceDate.toEpochMilli() + atMost);\n    }\n\n    @Test\n    public void testFutureWithLargeTimeUnit() {\n        long atMost = 1;\n        TimeUnit unit = TimeUnit.DAYS;\n        Instant referenceDate = Instant.now();\n\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertTrue(futureDate.isAfter(referenceDate));\n        assertTrue(futureDate.toEpochMilli() < referenceDate.toEpochMilli() + TimeUnit.DAYS.toMillis(atMost));\n    }\n\n    @Test\n    public void testFutureWithSmallTimeUnit() {\n        long atMost = 1000;\n        TimeUnit unit = TimeUnit.MICROSECONDS;\n        Instant referenceDate = Instant.now();\n\n        Instant futureDate = timeAndDate.future(atMost, unit, referenceDate);\n\n        assertTrue(futureDate.isAfter(referenceDate));\n        assertTrue(futureDate.toEpochMilli() < referenceDate.toEpochMilli() + TimeUnit.MICROSECONDS.toMillis(atMost));\n    }\n}\n"}]