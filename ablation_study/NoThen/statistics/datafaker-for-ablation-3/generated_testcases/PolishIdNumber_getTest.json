[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static net.datafaker.providers.base.PersonIdNumber.Gender.FEMALE;\nimport static net.datafaker.providers.base.PersonIdNumber.Gender.MALE;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class PolishIdNumber_getTest {\n\n    @Test\n    public void testGetWithMaleGender() {\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthDate = LocalDate.of(1990, 1, 1);\n        PolishIdNumber.Gender requestedGender = PolishIdNumber.Gender.MALE;\n\n        PolishIdNumber polishIdNumber = new PolishIdNumber();\n        String result = polishIdNumber.get(faker, birthDate, requestedGender);\n\n        assertEquals(PolishIdNumber.Gender.MALE, polishIdNumber.pickGender(faker, requestedGender));\n    }\n\n    @Test\n    public void testGetWithFemaleGender() {\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthDate = LocalDate.of(1990, 1, 1);\n        PolishIdNumber.Gender requestedGender = PolishIdNumber.Gender.FEMALE;\n\n        PolishIdNumber polishIdNumber = new PolishIdNumber();\n        String result = polishIdNumber.get(faker, birthDate, requestedGender);\n\n        assertEquals(PolishIdNumber.Gender.FEMALE, polishIdNumber.pickGender(faker, requestedGender));\n    }\n\n    @Test\n    public void testGetWithAnyGender() {\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthDate = LocalDate.of(1990, 1, 1);\n        PolishIdNumber.Gender requestedGender = PolishIdNumber.Gender.ANY;\n\n        when(faker.random().nextInt(2)).thenReturn(0); // Mocking to return MALE\n\n        PolishIdNumber polishIdNumber = new PolishIdNumber();\n        String result = polishIdNumber.get(faker, birthDate, requestedGender);\n\n        assertEquals(PolishIdNumber.Gender.MALE, polishIdNumber.pickGender(faker, requestedGender));\n    }\n\n    @Test\n    public void testGetWithNullGender() {\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        LocalDate birthDate = LocalDate.of(1990, 1, 1);\n        PolishIdNumber.Gender requestedGender = null;\n\n        when(faker.random().nextInt(2)).thenReturn(1); // Mocking to return FEMALE\n\n        PolishIdNumber polishIdNumber = new PolishIdNumber();\n        String result = polishIdNumber.get(faker, birthDate, requestedGender);\n\n        assertEquals(PolishIdNumber.Gender.FEMALE, polishIdNumber.pickGender(faker, requestedGender));\n    }\n}\n"}]