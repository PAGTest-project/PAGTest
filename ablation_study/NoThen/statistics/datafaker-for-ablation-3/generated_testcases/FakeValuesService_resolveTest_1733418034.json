[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport java.util.function.Supplier;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class FakeValuesService_resolveTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n    private ProviderRegistration root;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        root = new ProviderRegistration() {\n            @Override\n            public FakerContext getContext() {\n                return context;\n            }\n\n            @Override\n            public Object getProvider(String providerClassName) {\n                return null;\n            }\n\n            @Override\n            public Object getProvider(Class<?> providerClass, java.util.function.Function<ProviderRegistration, Object> providerFunction) {\n                return null;\n            }\n        };\n    }\n\n    @Test\n    public void testResolveWithValidKey() {\n        String key = \"validKey\";\n        Object current = new Object();\n        Supplier<String> exceptionMessage = () -> \"Exception message\";\n\n        String result = fakeValuesService.resolve(key, current, root, exceptionMessage, context);\n\n        assertNotNull(result);\n        assertNotEquals(\"Exception message\", result);\n    }\n\n    @Test\n    public void testResolveWithInvalidKey() {\n        String key = \"invalidKey\";\n        Object current = new Object();\n        Supplier<String> exceptionMessage = () -> \"Exception message\";\n\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            fakeValuesService.resolve(key, current, root, exceptionMessage, context);\n        });\n\n        assertEquals(\"Exception message\", exception.getMessage());\n    }\n\n    @Test\n    public void testResolveWithNullRoot() {\n        String key = \"validKey\";\n        Object current = new Object();\n        Supplier<String> exceptionMessage = () -> \"Exception message\";\n\n        String result = fakeValuesService.resolve(key, current, null, exceptionMessage, context);\n\n        assertNotNull(result);\n        assertNotEquals(\"Exception message\", result);\n    }\n\n    @Test\n    public void testResolveWithNullCurrent() {\n        String key = \"validKey\";\n        Supplier<String> exceptionMessage = () -> \"Exception message\";\n\n        String result = fakeValuesService.resolve(key, null, root, exceptionMessage, context);\n\n        assertNotNull(result);\n        assertNotEquals(\"Exception message\", result);\n    }\n\n    @Test\n    public void testResolveWithNullExceptionMessage() {\n        String key = \"validKey\";\n        Object current = new Object();\n\n        String result = fakeValuesService.resolve(key, current, root, null, context);\n\n        assertNotNull(result);\n    }\n}\n"}]