[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class FakeValuesService_safeFetchTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        fakeValuesService = new FakeValuesService();\n    }\n\n    @Test\n    public void testSafeFetchWithNullObject() {\n        String result = fakeValuesService.safeFetch(\"nonExistentKey\", context, \"defaultIfNull\");\n        assertEquals(\"defaultIfNull\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithSingleString() {\n        // Assuming fetchObject returns a single string for \"singleStringKey\"\n        String result = fakeValuesService.safeFetch(\"singleStringKey\", context, \"defaultIfNull\");\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testSafeFetchWithList() {\n        // Assuming fetchObject returns a list for \"listKey\"\n        String result = fakeValuesService.safeFetch(\"listKey\", context, \"defaultIfNull\");\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testSafeFetchWithSlashDelimitedRegex() {\n        // Assuming fetchObject returns a slash-delimited regex string for \"regexKey\"\n        String result = fakeValuesService.safeFetch(\"regexKey\", context, \"defaultIfNull\");\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testSafeFetchWithEmptyList() {\n        // Assuming fetchObject returns an empty list for \"emptyListKey\"\n        String result = fakeValuesService.safeFetch(\"emptyListKey\", context, \"defaultIfNull\");\n        assertEquals(\"defaultIfNull\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithMultipleStringsInList() {\n        // Assuming fetchObject returns a list with multiple strings for \"multiStringListKey\"\n        String result = fakeValuesService.safeFetch(\"multiStringListKey\", context, \"defaultIfNull\");\n        assertNotNull(result);\n    }\n}\n"}]