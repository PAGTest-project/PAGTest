[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport java.nio.charset.StandardCharsets;\n\npublic class Sip_bodyStringTest {\n    private Sip sip;\n\n    @BeforeEach\n    public void setUp() {\n        sip = new Sip(new BaseProviders() {});\n    }\n\n    @Test\n    void bodyString_returnsValidSdpFormat() {\n        String sut = sip.bodyString();\n        assertThat(sut).startsWith(\"v=0\\n\");\n        assertThat(sut).contains(\"o=\");\n        assertThat(sut).contains(\"s=-\\n\");\n        assertThat(sut).contains(\"c=IN IP4 \");\n        assertThat(sut).contains(\"t=0 0\\n\");\n        assertThat(sut).contains(\"m=audio \");\n        assertThat(sut).contains(\" RTP/AVP 0\\n\");\n        assertThat(sut).contains(\"a=rtpmap:0 PCMU/8000\");\n    }\n\n    @Test\n    void bodyBytes_returnsValidByteArray() {\n        byte[] sut = sip.bodyBytes();\n        String bodyString = sip.bodyString();\n        assertThat(sut).isEqualTo(bodyString.getBytes(StandardCharsets.UTF_8));\n    }\n\n    @Test\n    void nameAddress_returnsValidNameAddressFormat() {\n        String sut = sip.nameAddress();\n        assertThat(sut).startsWith(\"<sip:\");\n        assertThat(sut).contains(\"@\");\n        assertThat(sut).contains(\":\");\n        assertThat(sut).endsWith(\">\");\n    }\n}\n"}]