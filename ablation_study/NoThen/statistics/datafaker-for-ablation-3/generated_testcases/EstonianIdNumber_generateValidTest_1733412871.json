[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class EstonianIdNumber_generateValidTest {\n\n    private EstonianIdNumber estonianIdNumber;\n    private BaseProviders faker;\n    private IdNumberRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        estonianIdNumber = new EstonianIdNumber();\n        faker = Mockito.mock(BaseProviders.class);\n        request = Mockito.mock(IdNumberRequest.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        LocalDate birthday = LocalDate.of(2000, 1, 1);\n        Gender gender = Gender.MALE;\n        String baseDigits = \"5000101000\";\n        String expectedIdNumber = baseDigits + \"0\"; // Assuming checksum is 0 for simplicity\n\n        when(Utils.birthday(faker, request)).thenReturn(birthday);\n        when(Utils.gender(faker, request)).thenReturn(gender);\n        when(estonianIdNumber.basePart(faker, birthday, gender)).thenReturn(baseDigits);\n        when(estonianIdNumber.checksum(baseDigits)).thenReturn(0);\n\n        PersonIdNumber result = estonianIdNumber.generateValid(faker, request);\n\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n\n    @Test\n    public void testGenerateValidWithFemale() {\n        LocalDate birthday = LocalDate.of(2000, 1, 1);\n        Gender gender = Gender.FEMALE;\n        String baseDigits = \"6000101000\";\n        String expectedIdNumber = baseDigits + \"0\"; // Assuming checksum is 0 for simplicity\n\n        when(Utils.birthday(faker, request)).thenReturn(birthday);\n        when(Utils.gender(faker, request)).thenReturn(gender);\n        when(estonianIdNumber.basePart(faker, birthday, gender)).thenReturn(baseDigits);\n        when(estonianIdNumber.checksum(baseDigits)).thenReturn(0);\n\n        PersonIdNumber result = estonianIdNumber.generateValid(faker, request);\n\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]