[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.DateTimeParseException;\n\nclass SouthAfricanIdNumber_isValidEnZASsnTest {\n\n    @Test\n    void testIsValidEnZASsn_ValidSsn() {\n        // Given\n        BaseProviders faker = mock(BaseProviders.class);\n        IdNumberRequest request = mock(IdNumberRequest.class);\n        when(request.getGender()).thenReturn(Gender.FEMALE);\n        when(request.getBirthday()).thenReturn(LocalDate.of(1990, 1, 1));\n        when(faker.number()).thenReturn(new BaseProviders.Number());\n        when(faker.number().numberBetween(0, 5000)).thenReturn(1234);\n        when(faker.options().option(SouthAfricanIdNumber.CODE_PATTERN)).thenReturn(\"18\");\n\n        SouthAfricanIdNumber idNumberGenerator = new SouthAfricanIdNumber();\n        PersonIdNumber validSsn = idNumberGenerator.generateValid(faker, request);\n\n        // When\n        boolean isValid = SouthAfricanIdNumber.isValidEnZASsn(validSsn.getIdNumber());\n\n        // Then\n        assertTrue(isValid);\n    }\n\n    @Test\n    void testIsValidEnZASsn_InvalidLength() {\n        // Given\n        String invalidLengthSsn = \"123456789012\"; // 12 characters instead of 13\n\n        // When\n        boolean isValid = SouthAfricanIdNumber.isValidEnZASsn(invalidLengthSsn);\n\n        // Then\n        assertFalse(isValid);\n    }\n\n    @Test\n    void testIsValidEnZASsn_InvalidDate() {\n        // Given\n        String invalidDateSsn = \"9902305678901\"; // Invalid date (February 30th)\n\n        // When\n        boolean isValid = SouthAfricanIdNumber.isValidEnZASsn(invalidDateSsn);\n\n        // Then\n        assertFalse(isValid);\n    }\n\n    @Test\n    void testIsValidEnZASsn_InvalidChecksum() {\n        // Given\n        String invalidChecksumSsn = \"9001015000089\"; // Correct date, but incorrect checksum\n\n        // When\n        boolean isValid = SouthAfricanIdNumber.isValidEnZASsn(invalidChecksumSsn);\n\n        // Then\n        assertFalse(isValid);\n    }\n}\n"}]