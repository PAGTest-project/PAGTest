[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class Text_textTest {\n\n    private Text textProvider;\n\n    @BeforeEach\n    public void setUp() {\n        textProvider = new Text(new BaseProviders() {});\n    }\n\n    @Test\n    void testTextWithMinimumLength() {\n        int minimumLength = 5;\n        int maximumLength = 10;\n        boolean includeUppercase = true;\n        boolean includeSpecial = true;\n        boolean includeDigit = true;\n\n        String result = textProvider.text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n        assertTrue(result.length() >= minimumLength && result.length() <= maximumLength);\n    }\n\n    @Test\n    void testTextWithoutUppercase() {\n        int minimumLength = 5;\n        int maximumLength = 10;\n        boolean includeUppercase = false;\n        boolean includeSpecial = true;\n        boolean includeDigit = true;\n\n        String result = textProvider.text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n        assertTrue(result.matches(\"[^A-Z]*\"));\n    }\n\n    @Test\n    void testTextWithoutSpecial() {\n        int minimumLength = 5;\n        int maximumLength = 10;\n        boolean includeUppercase = true;\n        boolean includeSpecial = false;\n        boolean includeDigit = true;\n\n        String result = textProvider.text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n        assertTrue(result.matches(\"[^@#$%^&*]*\"));\n    }\n\n    @Test\n    void testTextWithoutDigit() {\n        int minimumLength = 5;\n        int maximumLength = 10;\n        boolean includeUppercase = true;\n        boolean includeSpecial = true;\n        boolean includeDigit = false;\n\n        String result = textProvider.text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n        assertTrue(result.matches(\"[^0-9]*\"));\n    }\n\n    @Test\n    void testTextWithExactLength() {\n        int minimumLength = 7;\n        int maximumLength = 7;\n        boolean includeUppercase = true;\n        boolean includeSpecial = true;\n        boolean includeDigit = true;\n\n        String result = textProvider.text(minimumLength, maximumLength, includeUppercase, includeSpecial, includeDigit);\n        assertEquals(7, result.length());\n    }\n}\n"}]