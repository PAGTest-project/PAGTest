[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class FakeValuesService_fileExpressionTest {\n\n    private FakeValuesService fakeValuesService;\n    private BaseFaker baseFaker;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        baseFaker = new BaseFaker();\n        fakeValuesService = baseFaker.fakeValuesService();\n        context = baseFaker.getContext();\n    }\n\n    @Test\n    public void testFileExpressionSuccess() {\n        Path path = Paths.get(\"src/test/resources/testfile.txt\");\n        BaseFaker faker = new BaseFaker();\n        String result = fakeValuesService.fileExpression(path, faker, context);\n        assertEquals(\"Processed content of testfile.txt\", result);\n    }\n\n    @Test\n    public void testFileExpressionIOException() {\n        Path path = Paths.get(\"nonexistentfile.txt\");\n        BaseFaker faker = new BaseFaker();\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            fakeValuesService.fileExpression(path, faker, context);\n        });\n        assertEquals(\"Failed to read \\\"nonexistentfile.txt\\\"\", exception.getMessage());\n    }\n\n    @Test\n    public void testFileExpressionWithLocale() {\n        Path path = Paths.get(\"src/test/resources/testfile_en_US.txt\");\n        BaseFaker faker = new BaseFaker(Locale.US);\n        String result = fakeValuesService.fileExpression(path, faker, context);\n        assertEquals(\"Processed content of testfile_en_US.txt\", result);\n    }\n}\n"}]