[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class AlbanianIdNumber_generateInvalidTest {\n\n    @Test\n    public void testGenerateInvalid() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        AlbanianIdNumber idNumberGenerator = new AlbanianIdNumber();\n\n        // Mock generateValid to return a known valid PIN\n        when(faker.number().numberBetween(93, 99)).thenReturn(95);\n        when(faker.number().digits(3)).thenReturn(\"123\");\n        when(faker.date().birthday()).thenReturn(LocalDate.of(1990, 5, 15));\n        when(faker.gender()).thenReturn(Gender.FEMALE);\n\n        String validPin = \"905515123W\"; // Example valid PIN\n        when(idNumberGenerator.generateValid(faker)).thenReturn(validPin);\n\n        // When\n        String invalidPin = idNumberGenerator.generateInvalid(faker);\n\n        // Then\n        assertEquals(\"909515123W\", invalidPin);\n    }\n}\n"}]