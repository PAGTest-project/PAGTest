[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\n\npublic class MacedonianIdNumber_generateInvalidTest {\n    private MacedonianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MacedonianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().numberBetween(0, 2)).thenReturn(0);\n        when(faker.number().numberBetween(0, 500)).thenReturn(123);\n        when(faker.number().numberBetween(500, 1000)).thenReturn(678);\n\n        Gender gender = Gender.MALE;\n        String basePart = \"010190041123\";\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().numberBetween(0, MacedonianIdNumber.REGIONS_SIZE)).thenReturn(0);\n        when(faker.number().numberBetween(0, 500)).thenReturn(123);\n\n        String expectedInvalidId = basePart + ((generator.checksum(basePart) + 1) % 10);\n        String actualInvalidId = generator.generateInvalid(faker);\n\n        assertEquals(expectedInvalidId, actualInvalidId);\n    }\n\n    @Test\n    public void testChecksum() {\n        assertEquals(6, generator.checksum(\"010100650000\"));\n        assertEquals(4, generator.checksum(\"923456789012\"));\n    }\n}\n"}]