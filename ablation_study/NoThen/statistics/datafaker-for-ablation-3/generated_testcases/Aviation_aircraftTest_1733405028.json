[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class Aviation_aircraftTest {\n    private Aviation aviation;\n\n    @BeforeEach\n    public void setUp() {\n        BaseProviders faker = new BaseProviders() {\n            @Override\n            public Number number() {\n                return new Number() {\n                    @Override\n                    public int numberBetween(int min, int max) {\n                        return (int) (Math.random() * (max - min) + min);\n                    }\n                };\n            }\n        };\n        aviation = new Aviation(faker);\n    }\n\n    @Test\n    void aircraft_shouldReturnOneOfSixTypes() {\n        String result = aviation.aircraft();\n        assertThat(result).isIn(\n            \"aviation.aircraft.airplane\",\n            \"aviation.aircraft.warplane\",\n            \"aviation.aircraft.army_helicopter\",\n            \"aviation.aircraft.civil_helicopter\",\n            \"aviation.aircraft.general\",\n            \"aviation.aircraft.cargo\"\n        );\n    }\n\n    @Test\n    void airplane_shouldReturnAirplaneType() {\n        assertThat(aviation.airplane()).isEqualTo(\"aviation.aircraft.airplane\");\n    }\n\n    @Test\n    void warplane_shouldReturnWarplaneType() {\n        assertThat(aviation.warplane()).isEqualTo(\"aviation.aircraft.warplane\");\n    }\n\n    @Test\n    void general_shouldReturnGeneralType() {\n        assertThat(aviation.general()).isEqualTo(\"aviation.aircraft.general\");\n    }\n\n    @Test\n    void cargo_shouldReturnCargoType() {\n        assertThat(aviation.cargo()).isEqualTo(\"aviation.aircraft.cargo\");\n    }\n\n    @Test\n    void armyHelicopter_shouldReturnArmyHelicopterType() {\n        assertThat(aviation.armyHelicopter()).isEqualTo(\"aviation.aircraft.army_helicopter\");\n    }\n\n    @Test\n    void civilHelicopter_shouldReturnCivilHelicopterType() {\n        assertThat(aviation.civilHelicopter()).isEqualTo(\"aviation.aircraft.civil_helicopter\");\n    }\n\n    @Test\n    void flight_default_shouldMatchPattern() {\n        assertThat(aviation.flight()).matches(\"[A-Z0-9]{2}\\\\d{1,4}\");\n    }\n}\n"}]