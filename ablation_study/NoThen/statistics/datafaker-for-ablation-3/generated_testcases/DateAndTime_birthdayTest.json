[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.sql.Timestamp;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class DateAndTime_birthdayTest {\n    private DateAndTime dateAndTime;\n\n    @BeforeEach\n    public void setUp() {\n        dateAndTime = new DateAndTime(new BaseFaker());\n    }\n\n    @Test\n    public void testBirthdayWithEqualAges() {\n        int minAge = 30;\n        int maxAge = 30;\n        Timestamp birthday = dateAndTime.birthday(minAge, maxAge);\n        LocalDateTime expectedDateTime = LocalDateTime.of(LocalDate.now().minusYears(maxAge), LocalTime.MIDNIGHT);\n        Timestamp expectedTimestamp = Timestamp.valueOf(expectedDateTime);\n        assertTrue(birthday.equals(expectedTimestamp));\n    }\n\n    @Test\n    public void testBirthdayWithDifferentAges() {\n        int minAge = 18;\n        int maxAge = 65;\n        Timestamp birthday = dateAndTime.birthday(minAge, maxAge);\n        LocalDate from = LocalDate.now().minusYears(maxAge);\n        LocalDate to = LocalDate.now().minusYears(minAge);\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isAfter(from) || birthday.toLocalDateTime().toLocalDate().isEqual(from));\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isBefore(to) || birthday.toLocalDateTime().toLocalDate().isEqual(to));\n    }\n\n    @Test\n    public void testBirthdayWithNegativeAges() {\n        int minAge = -5;\n        int maxAge = -1;\n        Timestamp birthday = dateAndTime.birthday(minAge, maxAge);\n        LocalDate from = LocalDate.now().minusYears(maxAge);\n        LocalDate to = LocalDate.now().minusYears(minAge);\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isAfter(from) || birthday.toLocalDateTime().toLocalDate().isEqual(from));\n        assertTrue(birthday.toLocalDateTime().toLocalDate().isBefore(to) || birthday.toLocalDateTime().toLocalDate().isEqual(to));\n    }\n}\n"}]