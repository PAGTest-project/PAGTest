[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.time.LocalDate;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class TimeAndDate_birthdayTest {\n    private TimeAndDate timeAndDate;\n\n    @BeforeEach\n    public void setUp() {\n        timeAndDate = new TimeAndDate(new BaseProviders() {});\n    }\n\n    @Test\n    public void testBirthdayWithEqualAges() {\n        int minAge = 30;\n        int maxAge = 30;\n        LocalDate expectedBirthday = LocalDate.now().minusYears(maxAge);\n        LocalDate actualBirthday = timeAndDate.birthday(minAge, maxAge);\n        assertEquals(expectedBirthday, actualBirthday);\n    }\n\n    @Test\n    public void testBirthdayWithDifferentAges() {\n        int minAge = 18;\n        int maxAge = 65;\n        LocalDate actualBirthday = timeAndDate.birthday(minAge, maxAge);\n        LocalDate minBirthday = LocalDate.now().minusYears(minAge);\n        LocalDate maxBirthday = LocalDate.now().minusYears(maxAge);\n        assertTrue(actualBirthday.isAfter(maxBirthday) || actualBirthday.isEqual(maxBirthday));\n        assertTrue(actualBirthday.isBefore(minBirthday) || actualBirthday.isEqual(minBirthday));\n    }\n\n    @Test\n    public void testBirthdayWithNegativeAges() {\n        int minAge = -5;\n        int maxAge = -1;\n        LocalDate actualBirthday = timeAndDate.birthday(minAge, maxAge);\n        LocalDate minBirthday = LocalDate.now().minusYears(minAge);\n        LocalDate maxBirthday = LocalDate.now().minusYears(maxAge);\n        assertTrue(actualBirthday.isAfter(maxBirthday) || actualBirthday.isEqual(maxBirthday));\n        assertTrue(actualBirthday.isBefore(minBirthday) || actualBirthday.isEqual(minBirthday));\n    }\n}\n"}]