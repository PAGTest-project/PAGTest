[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport net.datafaker.internal.helper.SingletonLocale;\nimport org.junit.jupiter.api.Test;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class FakeValuesService_fetchObjectTest {\n\n    @Test\n    public void testFetchObject_SingleLocale_FoundInCache() {\n        // Given\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        FakerContext context = mock(FakerContext.class);\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        when(context.getLocaleChain()).thenReturn(Collections.singletonList(locale));\n\n        Map<String, Object> mockMap = mock(Map.class);\n        when(mockMap.get(\"key\")).thenReturn(\"value\");\n        fakeValuesService.key2fetchedObject.put(locale, mockMap);\n\n        // When\n        String result = fakeValuesService.fetchObject(\"key\", context);\n\n        // Then\n        assertEquals(\"value\", result);\n    }\n\n    @Test\n    public void testFetchObject_MultipleLocales_FoundInFakeValuesInterfaceMap() {\n        // Given\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        FakerContext context = mock(FakerContext.class);\n        SingletonLocale locale1 = SingletonLocale.get(Locale.ENGLISH);\n        SingletonLocale locale2 = SingletonLocale.get(Locale.FRENCH);\n        when(context.getLocaleChain()).thenReturn(List.of(locale1, locale2));\n\n        FakeValuesInterface fakeValuesInterface = mock(FakeValuesInterface.class);\n        when(fakeValuesInterface.get(\"key\")).thenReturn(\"value\");\n        fakeValuesService.fakeValuesInterfaceMap.put(locale2, fakeValuesInterface);\n\n        // When\n        String result = fakeValuesService.fetchObject(\"key\", context);\n\n        // Then\n        assertEquals(\"value\", result);\n    }\n\n    @Test\n    public void testFetchObject_MultipleLocales_DefaultLocaleExcluded() {\n        // Given\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        FakerContext context = mock(FakerContext.class);\n        SingletonLocale locale1 = SingletonLocale.get(Locale.ENGLISH);\n        SingletonLocale locale2 = SingletonLocale.get(Locale.FRENCH);\n        when(context.getLocaleChain()).thenReturn(List.of(locale1, locale2));\n\n        Map<String, Object> mockMap = mock(Map.class);\n        when(mockMap.get(\"key\")).thenReturn(\"value\");\n        fakeValuesService.key2fetchedObject.put(locale2, mockMap);\n\n        // When\n        String result = fakeValuesService.fetchObject(\"key\", context);\n\n        // Then\n        assertEquals(\"value\", result);\n    }\n\n    @Test\n    public void testFetchObject_ResultIsList_ProcessedCorrectly() {\n        // Given\n        FakeValuesService fakeValuesService = new FakeValuesService();\n        FakerContext context = mock(FakerContext.class);\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        when(context.getLocaleChain()).thenReturn(Collections.singletonList(locale));\n\n        List<String> listResult = List.of(\"item1\", \"item2\");\n        FakeValuesInterface fakeValuesInterface = mock(FakeValuesInterface.class);\n        when(fakeValuesInterface.get(\"key\")).thenReturn(listResult);\n        fakeValuesService.fakeValuesInterfaceMap.put(locale, fakeValuesInterface);\n\n        // When\n        List<?> result = fakeValuesService.fetchObject(\"key\", context);\n\n        // Then\n        assertEquals(listResult, result);\n    }\n}\n"}]