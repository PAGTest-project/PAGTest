[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class File_fileNameTest {\n\n    @Test\n    public void testFileNameWithAllNullInputs() {\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        File file = new File(faker);\n\n        when(faker.internet().slug()).thenReturn(\"defaultDir\");\n        when(faker.lorem().word()).thenReturn(\"defaultName\");\n        when(file.extension()).thenReturn(\"defaultExt\");\n\n        String expected = \"defaultDir\" + System.getProperty(\"file.separator\") + \"defaultname.defaultExt\";\n        assertEquals(expected, file.fileName(null, null, null, null));\n    }\n\n    @Test\n    public void testFileNameWithAllInputsProvided() {\n        String dir = \"providedDir\";\n        String name = \"providedName\";\n        String ext = \"providedExt\";\n        String sep = \"/\";\n\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        File file = new File(faker);\n\n        String expected = dir + sep + name + \".\" + ext;\n        assertEquals(expected, file.fileName(dir, name, ext, sep));\n    }\n}\n"}]