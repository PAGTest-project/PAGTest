{"file_path": "src/test/java/net/datafaker/sequence/FakeStreamTest.java", "testclass_name": "FakeStreamTest", "dependencies": ["package net.datafaker.sequence;", "import net.datafaker.AbstractFakerTest;", "import net.datafaker.providers.base.Address;", "import net.datafaker.providers.base.BaseFaker;", "import net.datafaker.providers.base.Name;", "import net.datafaker.transformations.CompositeField;", "import net.datafaker.transformations.CsvTransformer;", "import net.datafaker.transformations.Field;", "import net.datafaker.transformations.JsonTransformer;", "import net.datafaker.transformations.Schema;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.ValueSource;", "import java.util.List;", "import java.util.Random;", "import java.util.function.Supplier;", "import java.util.stream.Collectors;", "import java.util.stream.Stream;", "import static net.datafaker.transformations.Field.compositeField;", "import static net.datafaker.transformations.Field.field;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "FakeStreamTest", "description": "Test suite for generating and transforming streams of fake data using the FakeSequence class.", "class_members": {"variables": [], "methods": [], "nested_classes": []}, "fixtures": [], "test_cases": [{"name": "generateFiniteStream", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a finite stream of names with a specified length range."}, {"name": "generateInfiniteStream", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of an infinite stream of names."}, {"name": "generateStreamOfNames", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream of names with a specified length."}, {"name": "generateStreamOfDigits", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Number"], "class_members": []}, "category": "unit", "description": "Tests the generation of an infinite stream of digits."}, {"name": "generateNullStream", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream with a high null rate."}, {"name": "illegalNullRate", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the handling of illegal null rates by throwing an IllegalArgumentException."}, {"name": "generateStreamPassingSuppliersAsList", "primary_tested": ["BaseFaker.stream(List)"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream by passing suppliers as a list."}, {"name": "generateStreamWithRepeatableFaker", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream using a repeatable faker with a specific seed."}, {"name": "generateStreamWithDifferentObjects", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name", "Random"], "class_members": []}, "category": "unit", "description": "Tests the generation of a stream with different types of objects."}, {"name": "checkWrongArguments", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the handling of wrong arguments by throwing an IllegalArgumentException."}, {"name": "singletonTest", "primary_tested": ["BaseFaker.stream(Supplier[])"], "external_dependencies": {"modules": ["BaseFaker"], "class_members": []}, "category": "unit", "description": "Tests the generation of a singleton from a stream."}, {"name": "isInfiniteTest", "primary_tested": ["FakeSequence.isInfinite()"], "external_dependencies": {"modules": ["BaseFaker", "Name"], "class_members": []}, "category": "unit", "description": "Tests the detection of infinite streams."}, {"name": "toCsv", "primary_tested": ["CsvTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the transformation of a stream to CSV format."}, {"name": "toCsvFromInfiniteSequence", "primary_tested": ["CsvTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "CsvTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the handling of an infinite sequence when transforming to CSV, expecting an IllegalArgumentException."}, {"name": "toJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the transformation of a stream to JSON format."}, {"name": "toJsonFromInfiniteSequence", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "JsonTransformer", "Schema"], "class_members": []}, "category": "unit", "description": "Tests the handling of an infinite sequence when transforming to JSON, expecting an IllegalArgumentException."}, {"name": "toNestedJson", "primary_tested": ["JsonTransformer.generate(Iterable, Schema)"], "external_dependencies": {"modules": ["BaseFaker", "JsonTransformer", "Schema", "Address", "Name"], "class_members": []}, "category": "unit", "description": "Tests the transformation of a stream to nested JSON format."}, {"name": "testIterator", "primary_tested": ["FakeSequence.iterator()"], "external_dependencies": {"modules": ["BaseFaker", "Number"], "class_members": []}, "category": "unit", "description": "Tests the iteration over a finite stream of digits."}, {"name": "testIteratorInfinite", "primary_tested": ["FakeSequence.iterator()"], "external_dependencies": {"modules": ["BaseFaker", "Number"], "class_members": []}, "category": "unit", "description": "Tests the iteration over an infinite stream of digits."}]}