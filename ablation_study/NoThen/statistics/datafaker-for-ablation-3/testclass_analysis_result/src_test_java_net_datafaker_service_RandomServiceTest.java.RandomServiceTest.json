{"file_path": "src/test/java/net/datafaker/service/RandomServiceTest.java", "testclass_name": "RandomServiceTest", "dependencies": ["package net.datafaker.service;", "import net.datafaker.AbstractFakerTest;", "import org.assertj.core.api.Condition;", "import org.junit.jupiter.api.Test;", "import org.junit.jupiter.params.ParameterizedTest;", "import org.junit.jupiter.params.provider.Arguments;", "import org.junit.jupiter.params.provider.MethodSource;", "import java.util.Random;", "import java.util.stream.Stream;", "import static org.assertj.core.api.Assertions.allOf;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "RandomServiceTest", "description": "Unit tests for the RandomService class, focusing on various random number generation methods and their boundaries.", "class_members": {"methods": [{"name": "randomServiceProvider", "signature": "private static Stream<Arguments> randomServiceProvider()"}]}, "fixtures": [], "test_cases": [{"name": "testPositiveBoundariesOnly", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that an IllegalArgumentException is thrown when the boundary is zero."}, {"name": "testLongWithinBoundary", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated long values are within the specified boundary."}, {"name": "testLongMaxBoundary", "primary_tested": ["RandomService.nextLong(long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated long values are within the maximum boundary."}, {"name": "testIntInRange", "primary_tested": ["RandomService.nextInt(int,int)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated integer values are within the specified range."}, {"name": "nextInt_returnsValueWithinGivenRange", "primary_tested": ["RandomService.nextInt(int,int)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated integer values are within the given range."}, {"name": "predictableRandomRange", "primary_tested": ["RandomService.nextInt()", "RandomService.nextInt(int)", "RandomService.nextInt(int,int)", "RandomService.nextFloat()", "RandomService.nextLong()", "RandomService.nextLong(long)", "RandomService.nextLong(long,long)", "RandomService.nextBoolean()"], "external_dependencies": {"modules": ["RandomService", "Random"]}, "category": "unit", "description": "Tests predictable random number generation with a fixed seed."}, {"name": "testDoubleInRange", "primary_tested": ["RandomService.nextDouble(double,double)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated double values are within the specified range."}, {"name": "testLongInRange", "primary_tested": ["RandomService.nextLong(long,long)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated long values are within the specified range."}, {"name": "testHex", "primary_tested": ["RandomService.hex(int)"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the generated hex string matches the expected pattern."}, {"name": "testDefaultHex", "primary_tested": ["RandomService.hex()"], "external_dependencies": {"modules": ["RandomService"]}, "category": "unit", "description": "Tests that the default generated hex string matches the expected pattern."}]}