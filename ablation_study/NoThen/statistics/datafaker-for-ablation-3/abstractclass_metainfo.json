[{"uris": "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence", "name": "FakeSequence", "file_path": "src/main/java/net/datafaker/sequence/FakeSequence.java", "superclasses": "", "methods": ["[]FakeSequence(List<Supplier<T>>,int,int,RandomService,double)", "[Sequence]get()", "[boolean]isInfinite()", "[T]singleton()"], "method_uris": ["src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[]FakeSequence(List<Supplier<T>>,int,int,RandomService,double)", "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[Sequence]get()", "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[boolean]isInfinite()", "src/main/java/net/datafaker/sequence/FakeSequence.java.FakeSequence.[T]singleton()"], "overrides": null, "attributes": [{"original_string": "    public static abstract class Builder<T> {\n        protected final List<Supplier<T>> suppliers;\n        protected int minLength = -1;\n        protected int maxLength = -1;\n        protected double nullRate = 0d;\n        protected BaseProviders faker;\n\n        protected Builder() {\n            suppliers = new ArrayList<>();\n        }\n\n        protected Builder(List<Supplier<T>> list) {\n            suppliers = new ArrayList<>(list);\n        }\n\n        @SafeVarargs\n        protected Builder(Supplier<T>... elems) {\n            suppliers = new ArrayList<>(Arrays.asList(elems));\n        }\n\n        public FakeSequence.Builder<T> faker(BaseProviders faker) {\n            this.faker = faker;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> minLen(int minLength) {\n            this.minLength = minLength;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> maxLen(int maxLength) {\n            this.maxLength = maxLength;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> len(int length) {\n            return len(length, length);\n        }\n\n        public FakeSequence.Builder<T> len(int minLength, int maxLength) {\n            this.maxLength = maxLength;\n            this.minLength = minLength;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> nullRate(double nullRate) {\n            if (nullRate < 0 || nullRate > 1) {\n                throw new IllegalArgumentException(\"Null rate should be between 0 and 1 (received: %s)\".formatted(nullRate));\n            }\n            this.nullRate = nullRate;\n            return this;\n        }\n\n        @SafeVarargs\n        public final FakeSequence.Builder<T> suppliers(Supplier<T>... suppliers) {\n            Objects.requireNonNull(suppliers);\n            this.suppliers.addAll(Arrays.asList(suppliers));\n            return this;\n        }\n\n        public abstract FakeSequence<T> build();\n\n        /**\n         * @param <S> might be Stream or List.\n         * @return List or Stream with generated random values.\n         */\n        public <S> S generate() {\n            return build().get();\n        }\n    }", "definition": "    public static abstract class Builder<T>", "class_docstring": "", "name": "Builder", "super_interfaces": [], "superclasses": "", "attributes": {"modifiers": "public static abstract", "marker_annotations": [], "non_marker_annotations": ["public", "static", "abstract"], "comments": [], "fields": [{"attribute_expression": "protected final List<Supplier<T>> suppliers;", "docstring": "", "modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "List<Supplier<T>>", "name": "suppliers", "syntax_pass": true}, {"attribute_expression": "protected int minLength = -1;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "int", "name": "minLength = -1", "syntax_pass": true}, {"attribute_expression": "protected int maxLength = -1;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "int", "name": "maxLength = -1", "syntax_pass": true}, {"attribute_expression": "protected double nullRate = 0d;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "double", "name": "nullRate = 0d", "syntax_pass": true}, {"attribute_expression": "protected BaseProviders faker;", "docstring": "", "modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "type": "BaseProviders", "name": "faker", "syntax_pass": true}], "classes": []}, "syntax_pass": true, "methods": [{"syntax_pass": true, "original_string": "        protected Builder() {\n            suppliers = new ArrayList<>();\n        }", "docstring": "", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [], "body": "                            {\n            suppliers = new ArrayList<>();\n        }", "signature": "protected Builder()"}, {"syntax_pass": true, "original_string": "        protected Builder(List<Supplier<T>> list) {\n            suppliers = new ArrayList<>(list);\n        }", "docstring": "", "attributes": {"modifiers": "protected", "marker_annotations": [], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [{"name": "list", "type": "List<Supplier<T>>"}], "body": "                                                  {\n            suppliers = new ArrayList<>(list);\n        }", "signature": "protected Builder(List<Supplier<T>> list)"}, {"syntax_pass": true, "original_string": "        @SafeVarargs\n        protected Builder(Supplier<T>... elems) {\n            suppliers = new ArrayList<>(Arrays.asList(elems));\n        }", "docstring": "", "attributes": {"modifiers": "@SafeVarargs\n        protected", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["protected"], "comments": [], "return_type": "", "classes": []}, "name": "Builder", "params": [], "body": "                                                {\n            suppliers = new ArrayList<>(Arrays.asList(elems));\n        }", "signature": "@SafeVarargs\n        protected Builder(Supplier<T>... elems)"}, {"syntax_pass": true, "original_string": "        public FakeSequence.Builder<T> faker(BaseProviders faker) {\n            this.faker = faker;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "name": "faker", "params": [{"name": "faker", "type": "BaseProviders"}], "body": "                                                                  {\n            this.faker = faker;\n            return this;\n        }", "signature": "public FakeSequence.Builder<T> faker(BaseProviders faker)"}, {"syntax_pass": true, "original_string": "        public FakeSequence.Builder<T> minLen(int minLength) {\n            this.minLength = minLength;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "name": "minLen", "params": [{"name": "minLength", "type": "int"}], "body": "                                                             {\n            this.minLength = minLength;\n            return this;\n        }", "signature": "public FakeSequence.Builder<T> minLen(int minLength)"}, {"syntax_pass": true, "original_string": "        public FakeSequence.Builder<T> maxLen(int maxLength) {\n            this.maxLength = maxLength;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "name": "maxLen", "params": [{"name": "maxLength", "type": "int"}], "body": "                                                             {\n            this.maxLength = maxLength;\n            return this;\n        }", "signature": "public FakeSequence.Builder<T> maxLen(int maxLength)"}, {"syntax_pass": true, "original_string": "        public FakeSequence.Builder<T> len(int length) {\n            return len(length, length);\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "name": "len", "params": [{"name": "length", "type": "int"}], "body": "                                                       {\n            return len(length, length);\n        }", "signature": "public FakeSequence.Builder<T> len(int length)"}, {"syntax_pass": true, "original_string": "        public FakeSequence.Builder<T> len(int minLength, int maxLength) {\n            this.maxLength = maxLength;\n            this.minLength = minLength;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "name": "len", "params": [{"name": "minLength", "type": "int"}, {"name": "maxLength", "type": "int"}], "body": "                                                                         {\n            this.maxLength = maxLength;\n            this.minLength = minLength;\n            return this;\n        }", "signature": "public FakeSequence.Builder<T> len(int minLength, int maxLength)"}, {"syntax_pass": true, "original_string": "        public FakeSequence.Builder<T> nullRate(double nullRate) {\n            if (nullRate < 0 || nullRate > 1) {\n                throw new IllegalArgumentException(\"Null rate should be between 0 and 1 (received: %s)\".formatted(nullRate));\n            }\n            this.nullRate = nullRate;\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "name": "nullRate", "params": [{"name": "nullRate", "type": "double"}], "body": "                                                                 {\n            if (nullRate < 0 || nullRate > 1) {\n                throw new IllegalArgumentException(\"Null rate should be between 0 and 1 (received: %s)\".formatted(nullRate));\n            }\n            this.nullRate = nullRate;\n            return this;\n        }", "signature": "public FakeSequence.Builder<T> nullRate(double nullRate)"}, {"syntax_pass": true, "original_string": "        @SafeVarargs\n        public final FakeSequence.Builder<T> suppliers(Supplier<T>... suppliers) {\n            Objects.requireNonNull(suppliers);\n            this.suppliers.addAll(Arrays.asList(suppliers));\n            return this;\n        }", "docstring": "", "attributes": {"modifiers": "@SafeVarargs\n        public final", "marker_annotations": ["@SafeVarargs"], "non_marker_annotations": ["public", "final"], "comments": [], "return_type": "FakeSequence.Builder<T>", "classes": []}, "name": "suppliers", "params": [], "body": "                                                                                 {\n            Objects.requireNonNull(suppliers);\n            this.suppliers.addAll(Arrays.asList(suppliers));\n            return this;\n        }", "signature": "@SafeVarargs\n        public final FakeSequence.Builder<T> suppliers(Supplier<T>... suppliers)"}, {"syntax_pass": true, "original_string": "        public abstract FakeSequence<T> build();", "docstring": "", "attributes": {"modifiers": "public abstract", "marker_annotations": [], "non_marker_annotations": ["public", "abstract"], "comments": [], "return_type": "FakeSequence<T>", "classes": []}, "name": "build", "params": [], "body": "", "signature": "public abstract FakeSequence<T> build()"}, {"syntax_pass": true, "original_string": "        public <S> S generate() {\n            return build().get();\n        }", "docstring": "\n@param <S> might be Stream or List.\n@return List or Stream with generated random values.\n", "attributes": {"modifiers": "public", "marker_annotations": [], "non_marker_annotations": ["public"], "comments": [], "return_type": "S", "classes": []}, "name": "generate", "params": [], "body": "                                {\n            return build().get();\n        }", "signature": "public <S> S generate()"}]}], "class_docstring": "", "original_string": "public abstract class FakeSequence<T> implements Iterable<T> {\n    protected final RandomService randomService;\n    protected final List<Supplier<T>> suppliers;\n    protected final double nullRate;\n    protected final int minLength;\n    protected final int maxLength;\n\n    protected FakeSequence(List<Supplier<T>> suppliers, int minLength, int maxLength, RandomService randomService, double nullRate) {\n        this.suppliers = suppliers;\n        this.minLength = minLength;\n        this.maxLength = maxLength;\n        this.randomService = randomService;\n        this.nullRate = nullRate;\n    }\n\n    public abstract <Sequence> Sequence get();\n\n    public boolean isInfinite() {\n        return false;\n    }\n\n    public T singleton() {\n        if (nullRate == 0d || randomService.nextDouble() >= nullRate) {\n            return suppliers.get(randomService.nextInt(suppliers.size())).get();\n        }\n        return null;\n    }\n\n    public static abstract class Builder<T> {\n        protected final List<Supplier<T>> suppliers;\n        protected int minLength = -1;\n        protected int maxLength = -1;\n        protected double nullRate = 0d;\n        protected BaseProviders faker;\n\n        protected Builder() {\n            suppliers = new ArrayList<>();\n        }\n\n        protected Builder(List<Supplier<T>> list) {\n            suppliers = new ArrayList<>(list);\n        }\n\n        @SafeVarargs\n        protected Builder(Supplier<T>... elems) {\n            suppliers = new ArrayList<>(Arrays.asList(elems));\n        }\n\n        public FakeSequence.Builder<T> faker(BaseProviders faker) {\n            this.faker = faker;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> minLen(int minLength) {\n            this.minLength = minLength;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> maxLen(int maxLength) {\n            this.maxLength = maxLength;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> len(int length) {\n            return len(length, length);\n        }\n\n        public FakeSequence.Builder<T> len(int minLength, int maxLength) {\n            this.maxLength = maxLength;\n            this.minLength = minLength;\n            return this;\n        }\n\n        public FakeSequence.Builder<T> nullRate(double nullRate) {\n            if (nullRate < 0 || nullRate > 1) {\n                throw new IllegalArgumentException(\"Null rate should be between 0 and 1 (received: %s)\".formatted(nullRate));\n            }\n            this.nullRate = nullRate;\n            return this;\n        }\n\n        @SafeVarargs\n        public final FakeSequence.Builder<T> suppliers(Supplier<T>... suppliers) {\n            Objects.requireNonNull(suppliers);\n            this.suppliers.addAll(Arrays.asList(suppliers));\n            return this;\n        }\n\n        public abstract FakeSequence<T> build();\n\n        /**\n         * @param <S> might be Stream or List.\n         * @return List or Stream with generated random values.\n         */\n        public <S> S generate() {\n            return build().get();\n        }\n    }\n\n}", "super_interfaces": ["Iterable<T>"], "fields": [{"attribute_expression": "protected final RandomService randomService;", "docstring": "", "modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "RandomService", "name": "randomService", "syntax_pass": true}, {"attribute_expression": "protected final List<Supplier<T>> suppliers;", "docstring": "", "modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "List<Supplier<T>>", "name": "suppliers", "syntax_pass": true}, {"attribute_expression": "protected final double nullRate;", "docstring": "", "modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "double", "name": "nullRate", "syntax_pass": true}, {"attribute_expression": "protected final int minLength;", "docstring": "", "modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "int", "name": "minLength", "syntax_pass": true}, {"attribute_expression": "protected final int maxLength;", "docstring": "", "modifiers": "protected final", "marker_annotations": [], "non_marker_annotations": ["protected", "final"], "comments": [], "type": "int", "name": "maxLength", "syntax_pass": true}]}]