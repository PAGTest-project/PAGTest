[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class AutoInvest_submitOneTimeTransactionTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private AutoInvest autoInvest;\n\n    @Before\n    public void setUp() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.autoInvest = new AutoInvest(baseUrl, MockData.API_KEY, MockData.SECRET_KEY, true, null);\n    }\n\n    @Test\n    public void testSubmitOneTimeTransactionSuccess() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"sourceType\", \"MAIN_SITE\");\n        parameters.put(\"subscriptionAmount\", 100.0);\n        parameters.put(\"sourceAsset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = autoInvest.submitOneTimeTransaction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test\n    public void testSubmitOneTimeTransactionMissingRequiredParameter() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"sourceType\", \"MAIN_SITE\");\n        parameters.put(\"sourceAsset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> autoInvest.submitOneTimeTransaction(parameters));\n    }\n\n    @Test\n    public void testSubmitOneTimeTransactionInvalidParameterType() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"sourceType\", 123); // Invalid type\n        parameters.put(\"subscriptionAmount\", 100.0);\n        parameters.put(\"sourceAsset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> autoInvest.submitOneTimeTransaction(parameters));\n    }\n}\n"}]