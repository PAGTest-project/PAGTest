[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport com.binance.connector.client.exceptions.BinanceClientException;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.exceptions.BinanceServerException;\nimport com.binance.connector.client.utils.httpclient.HttpClientSingleton;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport java.io.IOException;\nimport java.net.ConnectException;\nimport java.net.UnknownHostException;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.*;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class ResponseHandler_handleResponseTest {\n\n    @Mock\n    private OkHttpClient mockClient;\n\n    @Mock\n    private ResponseBody mockResponseBody;\n\n    @Test\n    public void testHandleResponse_SuccessfulResponse_ShowLimitUsage() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://test.com\").build();\n        ProxyAuth mockProxy = mock(ProxyAuth.class);\n\n        Response mockResponse = mock(Response.class);\n        when(HttpClientSingleton.getHttpClient(mockProxy)).thenReturn(mockClient);\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(mockResponse);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponse.code()).thenReturn(200);\n        when(mockResponseBody.string()).thenReturn(\"{}\");\n        when(mockResponse.header(\"X-SAPI-USED-IP-WEIGHT-1M\")).thenReturn(\"100\");\n        when(mockResponse.header(\"X-SAPI-USED-UID-WEIGHT-1M\")).thenReturn(\"200\");\n        when(mockResponse.header(\"x-mbx-used-weight\")).thenReturn(\"300\");\n        when(mockResponse.header(\"x-mbx-used-weight-1m\")).thenReturn(\"400\");\n\n        String result = ResponseHandler.handleResponse(mockRequest, true, mockProxy);\n\n        assertEquals(\"{\\\"x-sapi-used-ip-weight-1m\\\":\\\"100\\\",\\\"x-sapi-used-uid-weight-1m\\\":\\\"200\\\",\\\"x-mbx-used-weight\\\":\\\"300\\\",\\\"x-mbx-used-weight-1m\\\":\\\"400\\\",\\\"data\\\":\\\"{}\\\"}\", result);\n    }\n\n    @Test\n    public void testHandleResponse_ClientError() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://test.com\").build();\n        ProxyAuth mockProxy = mock(ProxyAuth.class);\n\n        Response mockResponse = mock(Response.class);\n        when(HttpClientSingleton.getHttpClient(mockProxy)).thenReturn(mockClient);\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(mockResponse);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponse.code()).thenReturn(400);\n        when(mockResponseBody.string()).thenReturn(\"{\\\"msg\\\":\\\"Client Error\\\", \\\"code\\\":1000}\");\n\n        try {\n            ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n            fail(\"Expected BinanceClientException to be thrown\");\n        } catch (BinanceClientException e) {\n            assertEquals(\"Client Error\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testHandleResponse_ServerError() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://test.com\").build();\n        ProxyAuth mockProxy = mock(ProxyAuth.class);\n\n        Response mockResponse = mock(Response.class);\n        when(HttpClientSingleton.getHttpClient(mockProxy)).thenReturn(mockClient);\n        when(mockClient.newCall(mockRequest).execute()).thenReturn(mockResponse);\n        when(mockResponse.body()).thenReturn(mockResponseBody);\n        when(mockResponse.code()).thenReturn(500);\n        when(mockResponseBody.string()).thenReturn(\"Server Error\");\n\n        try {\n            ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n            fail(\"Expected BinanceServerException to be thrown\");\n        } catch (BinanceServerException e) {\n            assertEquals(\"Server Error\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testHandleResponse_IOException() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://test.com\").build();\n        ProxyAuth mockProxy = mock(ProxyAuth.class);\n\n        when(HttpClientSingleton.getHttpClient(mockProxy)).thenReturn(mockClient);\n        when(mockClient.newCall(mockRequest).execute()).thenThrow(new IOException(\"Network error\"));\n\n        try {\n            ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n            fail(\"Expected BinanceConnectorException to be thrown\");\n        } catch (BinanceConnectorException e) {\n            assertEquals(\"[ResponseHandler] OKHTTP Error: Network error\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testHandleResponse_ConnectException() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://test.com\").build();\n        ProxyAuth mockProxy = mock(ProxyAuth.class);\n\n        when(HttpClientSingleton.getHttpClient(mockProxy)).thenReturn(mockClient);\n        when(mockClient.newCall(mockRequest).execute()).thenThrow(new ConnectException(\"Connection refused\"));\n\n        try {\n            ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n            fail(\"Expected BinanceConnectorException to be thrown\");\n        } catch (BinanceConnectorException e) {\n            assertEquals(\"[ResponseHandler] Proxy Connection Error: Connection refused\", e.getMessage());\n        }\n    }\n\n    @Test\n    public void testHandleResponse_UnknownHostException() throws IOException {\n        Request mockRequest = new Request.Builder().url(\"http://test.com\").build();\n        ProxyAuth mockProxy = mock(ProxyAuth.class);\n\n        when(HttpClientSingleton.getHttpClient(mockProxy)).thenReturn(mockClient);\n        when(mockClient.newCall(mockRequest).execute()).thenThrow(new UnknownHostException(\"Unknown host\"));\n\n        try {\n            ResponseHandler.handleResponse(mockRequest, false, mockProxy);\n            fail(\"Expected BinanceConnectorException to be thrown\");\n        } catch (BinanceConnectorException e) {\n            assertEquals(\"[ResponseHandler] Proxy Unknown Host Error: Unknown host\", e.getMessage());\n        }\n    }\n}\n"}]