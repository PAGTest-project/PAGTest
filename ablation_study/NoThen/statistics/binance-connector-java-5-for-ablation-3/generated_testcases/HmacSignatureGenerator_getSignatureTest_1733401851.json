[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class HmacSignatureGenerator_getSignatureTest {\n\n    private HmacSignatureGenerator generator;\n    private String apiSecret;\n\n    @Before\n    public void setUp() {\n        apiSecret = \"testSecret\";\n        generator = new HmacSignatureGenerator(apiSecret);\n    }\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        String data = \"testData\";\n        String expectedSignature = \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\";\n\n        String actualSignature = generator.getSignature(data);\n\n        assertEquals(expectedSignature, actualSignature);\n    }\n\n    @Test\n    public void testGetSignature_Exception() throws Exception {\n        String data = \"testData\";\n\n        HmacSignatureGenerator faultyGenerator = new HmacSignatureGenerator(\"faultySecret\") {\n            @Override\n            public String getSignature(String data) {\n                try {\n                    SecretKeySpec secretKeySpec = new SecretKeySpec(apiSecret.getBytes(), \"InvalidAlgorithm\");\n                    Mac mac = Mac.getInstance(\"InvalidAlgorithm\");\n                    mac.init(secretKeySpec);\n                    return Hex.encodeHexString(mac.doFinal(data.getBytes()));\n                } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n                    throw new RuntimeException(\"Failed to calculate hmac-sha256\", e);\n                }\n            }\n        };\n\n        assertThrows(RuntimeException.class, () -> faultyGenerator.getSignature(data));\n    }\n}\n"}]