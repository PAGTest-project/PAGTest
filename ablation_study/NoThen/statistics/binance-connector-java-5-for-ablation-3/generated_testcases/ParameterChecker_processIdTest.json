[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport java.util.UUID;\n\npublic class ParameterChecker_processIdTest {\n\n    @Test\n    public void testProcessIdWithValidInteger() {\n        Integer id = 123;\n        String name = \"testId\";\n        assertEquals(id, ParameterChecker.processId(id, name));\n    }\n\n    @Test\n    public void testProcessIdWithValidString() {\n        String id = \"456\";\n        String name = \"testId\";\n        assertEquals(id, ParameterChecker.processId(id, name));\n    }\n\n    @Test\n    public void testProcessIdWithNull() {\n        String name = \"testId\";\n        String result = (String) ParameterChecker.processId(null, name);\n        assertNotNull(result);\n        try {\n            UUID.fromString(result);\n        } catch (IllegalArgumentException e) {\n            fail(\"Generated UUID is not valid\");\n        }\n    }\n\n    @Test\n    public void testProcessIdWithEmptyString() {\n        String id = \"\";\n        String name = \"testId\";\n        String result = (String) ParameterChecker.processId(id, name);\n        assertNotNull(result);\n        try {\n            UUID.fromString(result);\n        } catch (IllegalArgumentException e) {\n            fail(\"Generated UUID is not valid\");\n        }\n    }\n\n    @Test\n    public void testProcessIdWithInvalidType() {\n        Double id = 123.45;\n        String name = \"testId\";\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.processId(id, name));\n    }\n}\n"}]