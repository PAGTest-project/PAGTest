[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.MockWebServerDispatcher;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\n\npublic class Trade_ocoOrderTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(\"/\").toString();\n    }\n\n    @Test\n    public void testOcoOrderWithoutParameters() {\n        String path = \"/api/v3/order/oco\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(\"/\", path, \"{}\", HttpMethod.POST, 200);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Trade trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n        assertThrows(BinanceConnectorException.class, () -> trade.ocoOrder(parameters));\n    }\n\n    @Test\n    public void testOcoOrderWithValidParameters() {\n        String path = \"/api/v3/order/oco?symbol=BNBUSDT&side=BUY&quantity=1&price=100&stopPrice=90\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", 1);\n        parameters.put(\"price\", 100);\n        parameters.put(\"stopPrice\", 90);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(\"/\", path, \"{}\", HttpMethod.POST, 200);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Trade trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n        String result = trade.ocoOrder(parameters);\n        assertEquals(\"{}\", result);\n    }\n\n    @Test\n    public void testOcoOrderWithMissingRequiredParameter() {\n        String path = \"/api/v3/order/oco?symbol=BNBUSDT&side=BUY&quantity=1&price=100\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", 1);\n        parameters.put(\"price\", 100);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(\"/\", path, \"{}\", HttpMethod.POST, 200);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Trade trade = new Trade(baseUrl, \"apiKey\", \"secretKey\", false, null);\n        assertThrows(BinanceConnectorException.class, () -> trade.ocoOrder(parameters));\n    }\n}\n"}]