[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.impl.SpotClientImpl;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Market_exchangeInfoTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Market market;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.market = new Market(baseUrl, \"apiKey\", false, new ProxyAuth(null, null));\n    }\n\n    @Test\n    public void testExchangeInfoSymbolAndSymbolsTogether() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"symbols\", new ArrayList<>());\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.exchangeInfo(parameters);\n        });\n    }\n\n    @Test\n    public void testExchangeInfoSymbolAndPermissionsTogether() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"permissions\", new ArrayList<>());\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.exchangeInfo(parameters);\n        });\n    }\n\n    @Test\n    public void testExchangeInfoSymbolsAndPermissionsTogether() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", new ArrayList<>());\n        parameters.put(\"permissions\", new ArrayList<>());\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.exchangeInfo(parameters);\n        });\n    }\n\n    @Test\n    public void testExchangeInfoValidParameters() {\n        String path = \"/api/v3/exchangeInfo?symbols=%5B%22BNBUSDT%22%2C%22BTCUSDT%22%5D\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", new ArrayList<String>() {{\n            add(\"BNBUSDT\");\n            add(\"BTCUSDT\");\n        }});\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = market.exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n}\n"}]