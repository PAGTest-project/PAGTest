[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport static org.mockito.Mockito.*;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class Mining_hashrateResaleDetailTest {\n    private Mining mining;\n    private String baseUrl;\n    private boolean showLimitUsage;\n\n    @Mock\n    private RequestHandler requestHandler;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://api.binance.com\";\n        String apiKey = \"testApiKey\";\n        String secretKey = \"testSecretKey\";\n        showLimitUsage = true;\n        ProxyAuth proxy = null;\n        mining = new Mining(baseUrl, apiKey, secretKey, showLimitUsage, proxy);\n        mining.requestHandler = requestHandler;\n    }\n\n    @Test\n    public void testHashrateResaleDetailSuccess() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", 12345);\n        parameters.put(\"userName\", \"testUser\");\n\n        when(requestHandler.sendSignedRequest(anyString(), anyString(), anyMap(), any(HttpMethod.class), anyBoolean())).thenReturn(\"{\\\"success\\\":true}\");\n\n        String result = mining.hashrateResaleDetail(parameters);\n        assertEquals(\"{\\\"success\\\":true}\", result);\n    }\n\n    @Test\n    public void testHashrateResaleDetailMissingConfigId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"testUser\");\n\n        assertThrows(BinanceConnectorException.class, () -> mining.hashrateResaleDetail(parameters));\n    }\n\n    @Test\n    public void testHashrateResaleDetailMissingUserName() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", 12345);\n\n        assertThrows(BinanceConnectorException.class, () -> mining.hashrateResaleDetail(parameters));\n    }\n\n    @Test\n    public void testHashrateResaleDetailInvalidConfigId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", \"invalidConfigId\");\n        parameters.put(\"userName\", \"testUser\");\n\n        assertThrows(BinanceConnectorException.class, () -> mining.hashrateResaleDetail(parameters));\n    }\n\n    @Test\n    public void testHashrateResaleDetailInvalidUserName() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", 12345);\n        parameters.put(\"userName\", 12345);\n\n        assertThrows(BinanceConnectorException.class, () -> mining.hashrateResaleDetail(parameters));\n    }\n}\n"}]