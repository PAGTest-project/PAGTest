[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Futures_futuresTransferHistoryTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private static final Long startTime = 1617600000000L;\n    private static final Long endTime = 1617686400000L;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testFuturesTransferHistory() {\n        String path = String.format(\"/sapi/v1/futures/transfer?asset=%s&startTime=%s\", \"USDT\", startTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"startTime\", startTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        Futures futures = new Futures(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, null);\n        String result = futures.futuresTransferHistory(parameters);\n        assertEquals(\"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", result.replace(\"{\\\"data\\\":\\\"\", \"\").replace(\"\\\"}\", \"\"));\n    }\n\n    @Test\n    public void testFuturesTransferHistoryMissingStartTime() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        Futures futures = new Futures(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, null);\n        assertThrows(BinanceConnectorException.class, () -> futures.futuresTransferHistory(parameters));\n    }\n\n    @Test\n    public void testFuturesTransferHistoryMissingAsset() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n\n        Futures futures = new Futures(baseUrl, MockData.API_KEY, new HmacSignatureGenerator(MockData.SECRET_KEY), true, null);\n        assertThrows(BinanceConnectorException.class, () -> futures.futuresTransferHistory(parameters));\n    }\n}\n"}]