[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.SpotClient;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.impl.SpotClientImpl;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class CryptoLoans_loanBorrowTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n    }\n\n    @Test\n    public void testLoanBorrow() {\n        String path = \"/sapi/v1/loan/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"loanTerm\", 30);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }\n\n    @Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testLoanBorrowMissingParameters() {\n        String path = \"/sapi/v1/loan/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createCryptoLoans().loanBorrow(parameters);\n    }\n}\n"}]