[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;\nimport org.bouncycastle.crypto.signers.Ed25519Signer;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Ed25519SignatureGenerator_getSignatureTest {\n\n    private Ed25519SignatureGenerator signatureGenerator;\n    private Ed25519PrivateKeyParameters mockPrivateKey;\n\n    @Before\n    public void setUp() throws Exception {\n        mockPrivateKey = mock(Ed25519PrivateKeyParameters.class);\n        signatureGenerator = new Ed25519SignatureGenerator(\"dummyPrivateKeyPath\") {\n            @Override\n            public Ed25519PrivateKeyParameters getPrivateKey() {\n                return mockPrivateKey;\n            }\n\n            @Override\n            public Ed25519Signer createSigner() {\n                return new Ed25519Signer();\n            }\n        };\n    }\n\n    @Test\n    public void testGetSignature() {\n        String data = \"testData\";\n        byte[] dataBytes = data.getBytes(StandardCharsets.UTF_8);\n\n        Ed25519Signer mockSigner = mock(Ed25519Signer.class);\n        byte[] mockSignatureBytes = \"mockSignature\".getBytes(StandardCharsets.UTF_8);\n        when(mockSigner.generateSignature()).thenReturn(mockSignatureBytes);\n\n        Ed25519SignatureGenerator spyGenerator = spy(signatureGenerator);\n        doReturn(mockSigner).when(spyGenerator).createSigner();\n\n        String expectedSignature = Base64.getEncoder().encodeToString(mockSignatureBytes);\n        String actualSignature = spyGenerator.getSignature(data);\n\n        verify(mockSigner).init(true, mockPrivateKey);\n        verify(mockSigner).update(dataBytes, 0, dataBytes.length);\n        assertEquals(expectedSignature, actualSignature);\n    }\n}\n"}]