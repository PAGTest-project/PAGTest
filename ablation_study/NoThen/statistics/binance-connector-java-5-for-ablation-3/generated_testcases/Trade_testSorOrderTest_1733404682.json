[{"strategy": "generate", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class Trade_testSorOrderTest {\n\n    private Trade trade;\n    private String baseUrl = \"https://api.binance.com\";\n    private String apiKey = \"testApiKey\";\n    private String secretKey = \"testSecretKey\";\n    private boolean showLimitUsage = false;\n    private ProxyAuth proxy = null;\n\n    @Mock\n    private RequestHandler requestHandler;\n\n    @Before\n    public void setUp() {\n        trade = new Trade(baseUrl, apiKey, secretKey, showLimitUsage, proxy);\n        trade.requestHandler = requestHandler;\n    }\n\n    @Test\n    public void testSorOrder() {\n        // Given\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", 1.0);\n\n        // When\n        trade.testSorOrder(parameters);\n\n        // Then\n        verify(requestHandler).sendSignedRequest(baseUrl, \"/api/v3/sor/order/test\", parameters, HttpMethod.POST, showLimitUsage);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testSorOrderMissingQuantity() {\n        // Given\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n\n        // When\n        trade.testSorOrder(parameters);\n    }\n}\n"}]