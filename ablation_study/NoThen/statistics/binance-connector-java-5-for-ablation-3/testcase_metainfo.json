[{"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest.[void]testCheckOnlyOneOfParameters_OnlyOneParameterPresent()", "name": "testCheckOnlyOneOfParameters_OnlyOneParameterPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOnlyOneOfParameters_OnlyOneParameterPresent()", "original_string": "    @Test\n    public void testCheckOnlyOneOfParameters_OnlyOneParameterPresent() {\n        JSONObject params = new JSONObject();\n        params.put(\"param1\", \"value1\");\n        ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\", \"param3\");\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "class_name": "ParameterChecker_checkOnlyOneOfParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest.[void]testCheckOnlyOneOfParameters_MoreThanOneParameterPresent()", "name": "testCheckOnlyOneOfParameters_MoreThanOneParameterPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOnlyOneOfParameters_MoreThanOneParameterPresent()", "original_string": "    @Test\n    public void testCheckOnlyOneOfParameters_MoreThanOneParameterPresent() {\n        JSONObject params = new JSONObject();\n        params.put(\"param1\", \"value1\");\n        params.put(\"param2\", \"value2\");\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\", \"param3\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "class_name": "ParameterChecker_checkOnlyOneOfParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest.[void]testCheckOnlyOneOfParameters_NoParametersPresent()", "name": "testCheckOnlyOneOfParameters_NoParametersPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOnlyOneOfParameters_NoParametersPresent()", "original_string": "    @Test\n    public void testCheckOnlyOneOfParameters_NoParametersPresent() {\n        JSONObject params = new JSONObject();\n        ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\", \"param3\");\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "class_name": "ParameterChecker_checkOnlyOneOfParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest.[void]testCheckOnlyOneOfParameters_NullParams()", "name": "testCheckOnlyOneOfParameters_NullParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOnlyOneOfParameters_NullParams()", "original_string": "    @Test\n    public void testCheckOnlyOneOfParameters_NullParams() {\n        JSONObject params = null;\n        ParameterChecker.checkOnlyOneOfParameters(params, \"param1\", \"param2\", \"param3\");\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java", "class_name": "ParameterChecker_checkOnlyOneOfParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOnlyOneOfParametersTest.java.ParameterChecker_checkOnlyOneOfParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest.[void]testAddKeyValueWithNullParameters()", "name": "testAddKeyValueWithNullParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddKeyValueWithNullParameters()", "original_string": "    @Test\n    public void testAddKeyValueWithNullParameters() {\n        JSONObject result = JSONParser.addKeyValue(null, \"key1\", \"value1\");\n        assertEquals(\"value1\", result.get(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "class_name": "JSONParser_addKeyValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest.[void]testAddKeyValueWithExistingParameters()", "name": "testAddKeyValueWithExistingParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddKeyValueWithExistingParameters()", "original_string": "    @Test\n    public void testAddKeyValueWithExistingParameters() {\n        JSONObject parameters = new JSONObject();\n        parameters.put(\"key2\", \"value2\");\n        JSONObject result = JSONParser.addKeyValue(parameters, \"key1\", \"value1\");\n        assertEquals(\"value1\", result.get(\"key1\"));\n        assertEquals(\"value2\", result.get(\"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "class_name": "JSONParser_addKeyValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest.[void]testAddKeyValueWithNullValue()", "name": "testAddKeyValueWithNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddKeyValueWithNullValue()", "original_string": "    @Test\n    public void testAddKeyValueWithNullValue() {\n        JSONObject parameters = new JSONObject();\n        JSONObject result = JSONParser.addKeyValue(parameters, \"key1\", null);\n        assertNull(result.opt(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "class_name": "JSONParser_addKeyValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest.[void]testAddKeyValueWithExistingKey()", "name": "testAddKeyValueWithExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAddKeyValueWithExistingKey()", "original_string": "    @Test\n    public void testAddKeyValueWithExistingKey() {\n        JSONObject parameters = new JSONObject();\n        parameters.put(\"key1\", \"oldValue\");\n        JSONObject result = JSONParser.addKeyValue(parameters, \"key1\", \"newValue\");\n        assertEquals(\"newValue\", result.get(\"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java", "class_name": "JSONParser_addKeyValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_addKeyValueTest.java.JSONParser_addKeyValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest.[void]testCheckParameterTypeValidString()", "name": "testCheckParameterTypeValidString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckParameterTypeValidString()", "original_string": "    @Test\n    public void testCheckParameterTypeValidString() {\n        String validString = \"testString\";\n        ParameterChecker.checkParameterType(validString, String.class, \"testParameter\");\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "class_name": "ParameterChecker_checkParameterTypeTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest.[void]testCheckParameterTypeValidInteger()", "name": "testCheckParameterTypeValidInteger", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckParameterTypeValidInteger()", "original_string": "    @Test\n    public void testCheckParameterTypeValidInteger() {\n        Integer validInteger = 123;\n        ParameterChecker.checkParameterType(validInteger, Integer.class, \"testParameter\");\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "class_name": "ParameterChecker_checkParameterTypeTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest.[void]testCheckParameterTypeInvalidType()", "name": "testCheckParameterTypeInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckParameterTypeInvalidType()", "original_string": "    @Test\n    public void testCheckParameterTypeInvalidType() {\n        Integer invalidType = 123;\n        assertThrows(BinanceConnectorException.class, () -> {\n            ParameterChecker.checkParameterType(invalidType, String.class, \"testParameter\");\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "class_name": "ParameterChecker_checkParameterTypeTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest.[void]testCheckParameterTypeEmptyString()", "name": "testCheckParameterTypeEmptyString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckParameterTypeEmptyString()", "original_string": "    @Test\n    public void testCheckParameterTypeEmptyString() {\n        String emptyString = \"\";\n        assertThrows(BinanceConnectorException.class, () -> {\n            ParameterChecker.checkParameterType(emptyString, String.class, \"testParameter\");\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java", "class_name": "ParameterChecker_checkParameterTypeTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkParameterTypeTest.java.ParameterChecker_checkParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest.[void]testJoinQueryParametersWithNullParams()", "name": "testJoinQueryParametersWithNullParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithNullParams()", "original_string": "    @Test\n    public void testJoinQueryParametersWithNullParams() {\n        StringBuilder sb = new StringBuilder();\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, null);\n        assertEquals(sb.toString(), result.toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "class_name": "UrlBuilder_joinQueryParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest.[void]testJoinQueryParametersWithEmptyParams()", "name": "testJoinQueryParametersWithEmptyParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithEmptyParams()", "original_string": "    @Test\n    public void testJoinQueryParametersWithEmptyParams() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(sb.toString(), result.toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "class_name": "UrlBuilder_joinQueryParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest.[void]testJoinQueryParametersWithStringParams()", "name": "testJoinQueryParametersWithStringParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithStringParams()", "original_string": "    @Test\n    public void testJoinQueryParametersWithStringParams() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"key1\", \"value1\");\n        params.put(\"key2\", \"value2\");\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(\"key1=value1&key2=value2\", result.toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "class_name": "UrlBuilder_joinQueryParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest.[void]testJoinQueryParametersWithDoubleParams()", "name": "testJoinQueryParametersWithDoubleParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithDoubleParams()", "original_string": "    @Test\n    public void testJoinQueryParametersWithDoubleParams() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"key1\", 123.456);\n        params.put(\"key2\", 789.012);\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(\"key1=123.456&key2=789.012\", result.toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "class_name": "UrlBuilder_joinQueryParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest.[void]testJoinQueryParametersWithMixedParams()", "name": "testJoinQueryParametersWithMixedParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithMixedParams()", "original_string": "    @Test\n    public void testJoinQueryParametersWithMixedParams() {\n        StringBuilder sb = new StringBuilder();\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"key1\", \"value1\");\n        params.put(\"key2\", 123.456);\n        StringBuilder result = UrlBuilder.joinQueryParameters(sb, params);\n        assertEquals(\"key1=value1&key2=123.456\", result.toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java", "class_name": "UrlBuilder_joinQueryParametersTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinQueryParametersTest.java.UrlBuilder_joinQueryParametersTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest.[void]testGetJSONIntValueSuccess()", "name": "testGetJSONIntValueSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONIntValueSuccess()", "original_string": "    @Test\n    public void testGetJSONIntValueSuccess() {\n        assertEquals(42, JSONParser.getJSONIntValue(mockJson, \"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "class_name": "JSONParser_getJSONIntValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest.[void]testGetJSONIntValueMissingKey()", "name": "testGetJSONIntValueMissingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONIntValueMissingKey()", "original_string": "    @Test\n    public void testGetJSONIntValueMissingKey() {\n        assertThrows(JSONException.class, () -> JSONParser.getJSONIntValue(mockJson, \"missingKey\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "class_name": "JSONParser_getJSONIntValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest.[void]testGetJSONIntValueInvalidJson()", "name": "testGetJSONIntValueInvalidJson", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONIntValueInvalidJson()", "original_string": "    @Test\n    public void testGetJSONIntValueInvalidJson() {\n        String invalidJson = \"{invalidJson}\";\n        assertThrows(JSONException.class, () -> JSONParser.getJSONIntValue(invalidJson, \"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "class_name": "JSONParser_getJSONIntValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest.[void]testGetJSONIntValueNonIntValue()", "name": "testGetJSONIntValueNonIntValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONIntValueNonIntValue()", "original_string": "    @Test\n    public void testGetJSONIntValueNonIntValue() {\n        assertThrows(JSONException.class, () -> JSONParser.getJSONIntValue(mockJson, \"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java", "class_name": "JSONParser_getJSONIntValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_getJSONIntValueTest.java.JSONParser_getJSONIntValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest.[void]testBuildStreamUrlWithStreams()", "name": "testBuildStreamUrlWithStreams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildStreamUrlWithStreams()", "original_string": "    @Test\n    public void testBuildStreamUrlWithStreams() {\n        String baseUrl = \"https://example.com\";\n        ArrayList<String> streams = new ArrayList<>();\n        streams.add(\"stream1\");\n        streams.add(\"stream2\");\n        String expected = \"https://example.com/stream?streams=stream1/stream2\";\n        assertEquals(expected, UrlBuilder.buildStreamUrl(baseUrl, streams));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java", "class_name": "UrlBuilder_buildStreamUrlTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest.[void]testBuildStreamUrlWithoutStreams()", "name": "testBuildStreamUrlWithoutStreams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildStreamUrlWithoutStreams()", "original_string": "    @Test\n    public void testBuildStreamUrlWithoutStreams() {\n        String baseUrl = \"https://example.com\";\n        ArrayList<String> streams = new ArrayList<>();\n        String expected = \"https://example.com/stream\";\n        assertEquals(expected, UrlBuilder.buildStreamUrl(baseUrl, streams));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java", "class_name": "UrlBuilder_buildStreamUrlTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest.[void]testBuildStreamUrlWithNullStreams()", "name": "testBuildStreamUrlWithNullStreams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildStreamUrlWithNullStreams()", "original_string": "    @Test\n    public void testBuildStreamUrlWithNullStreams() {\n        String baseUrl = \"https://example.com\";\n        String expected = \"https://example.com/stream\";\n        assertEquals(expected, UrlBuilder.buildStreamUrl(baseUrl, null));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java", "class_name": "UrlBuilder_buildStreamUrlTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildStreamUrlTest.java.UrlBuilder_buildStreamUrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest.[void]testCheckOneOfParametersRequired_AllParametersMissing()", "name": "testCheckOneOfParametersRequired_AllParametersMissing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOneOfParametersRequired_AllParametersMissing()", "original_string": "    @Test\n    public void testCheckOneOfParametersRequired_AllParametersMissing() {\n        JSONObject params = new JSONObject();\n        String[] parameters = {\"param1\", \"param2\", \"param3\"};\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOneOfParametersRequired(params, parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java", "class_name": "ParameterChecker_checkOneOfParametersRequiredTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest.[void]testCheckOneOfParametersRequired_OneParameterPresent()", "name": "testCheckOneOfParametersRequired_OneParameterPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOneOfParametersRequired_OneParameterPresent()", "original_string": "    @Test\n    public void testCheckOneOfParametersRequired_OneParameterPresent() {\n        JSONObject params = new JSONObject();\n        params.put(\"param2\", \"value2\");\n        String[] parameters = {\"param1\", \"param2\", \"param3\"};\n        ParameterChecker.checkOneOfParametersRequired(params, parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java", "class_name": "ParameterChecker_checkOneOfParametersRequiredTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest.[void]testCheckOneOfParametersRequired_AllParametersPresent()", "name": "testCheckOneOfParametersRequired_AllParametersPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOneOfParametersRequired_AllParametersPresent()", "original_string": "    @Test\n    public void testCheckOneOfParametersRequired_AllParametersPresent() {\n        JSONObject params = new JSONObject();\n        params.put(\"param1\", \"value1\");\n        params.put(\"param2\", \"value2\");\n        params.put(\"param3\", \"value3\");\n        String[] parameters = {\"param1\", \"param2\", \"param3\"};\n        ParameterChecker.checkOneOfParametersRequired(params, parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java", "class_name": "ParameterChecker_checkOneOfParametersRequiredTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest.[void]testCheckOneOfParametersRequired_NullParams()", "name": "testCheckOneOfParametersRequired_NullParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckOneOfParametersRequired_NullParams()", "original_string": "    @Test\n    public void testCheckOneOfParametersRequired_NullParams() {\n        JSONObject params = null;\n        String[] parameters = {\"param1\", \"param2\", \"param3\"};\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOneOfParametersRequired(params, parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java", "class_name": "ParameterChecker_checkOneOfParametersRequiredTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkOneOfParametersRequiredTest.java.ParameterChecker_checkOneOfParametersRequiredTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest.[void]testProcessIdWithValidInteger()", "name": "testProcessIdWithValidInteger", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testProcessIdWithValidInteger()", "original_string": "    @Test\n    public void testProcessIdWithValidInteger() {\n        Integer id = 123;\n        String name = \"testId\";\n        assertEquals(id, ParameterChecker.processId(id, name));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "class_name": "ParameterChecker_processIdTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest.[void]testProcessIdWithValidString()", "name": "testProcessIdWithValidString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testProcessIdWithValidString()", "original_string": "    @Test\n    public void testProcessIdWithValidString() {\n        String id = \"456\";\n        String name = \"testId\";\n        assertEquals(id, ParameterChecker.processId(id, name));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "class_name": "ParameterChecker_processIdTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest.[void]testProcessIdWithNull()", "name": "testProcessIdWithNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testProcessIdWithNull()", "original_string": "    @Test\n    public void testProcessIdWithNull() {\n        String name = \"testId\";\n        String result = (String) ParameterChecker.processId(null, name);\n        assertNotNull(result);\n        try {\n            UUID.fromString(result);\n        } catch (IllegalArgumentException e) {\n            fail(\"Generated UUID is not valid\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "class_name": "ParameterChecker_processIdTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest.[void]testProcessIdWithEmptyString()", "name": "testProcessIdWithEmptyString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testProcessIdWithEmptyString()", "original_string": "    @Test\n    public void testProcessIdWithEmptyString() {\n        String id = \"\";\n        String name = \"testId\";\n        String result = (String) ParameterChecker.processId(id, name);\n        assertNotNull(result);\n        try {\n            UUID.fromString(result);\n        } catch (IllegalArgumentException e) {\n            fail(\"Generated UUID is not valid\");\n        }\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "class_name": "ParameterChecker_processIdTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest.[void]testProcessIdWithInvalidType()", "name": "testProcessIdWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testProcessIdWithInvalidType()", "original_string": "    @Test\n    public void testProcessIdWithInvalidType() {\n        Double id = 123.45;\n        String name = \"testId\";\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.processId(id, name));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java", "class_name": "ParameterChecker_processIdTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_processIdTest.java.ParameterChecker_processIdTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest.[void]testJoinStreamUrlsWithEmptyStreams()", "name": "testJoinStreamUrlsWithEmptyStreams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinStreamUrlsWithEmptyStreams()", "original_string": "    @Test\n    public void testJoinStreamUrlsWithEmptyStreams() {\n        StringBuilder sb = new StringBuilder();\n        ArrayList<String> streams = new ArrayList<>();\n        assertEquals(sb.toString(), UrlBuilder.joinStreamUrls(sb, streams).toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "class_name": "UrlBuilder_joinStreamUrlsTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest.[void]testJoinStreamUrlsWithSingleStream()", "name": "testJoinStreamUrlsWithSingleStream", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinStreamUrlsWithSingleStream()", "original_string": "    @Test\n    public void testJoinStreamUrlsWithSingleStream() {\n        StringBuilder sb = new StringBuilder();\n        ArrayList<String> streams = new ArrayList<>();\n        streams.add(\"stream1\");\n        assertEquals(\"stream1\", UrlBuilder.joinStreamUrls(sb, streams).toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "class_name": "UrlBuilder_joinStreamUrlsTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest.[void]testJoinStreamUrlsWithMultipleStreams()", "name": "testJoinStreamUrlsWithMultipleStreams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinStreamUrlsWithMultipleStreams()", "original_string": "    @Test\n    public void testJoinStreamUrlsWithMultipleStreams() {\n        StringBuilder sb = new StringBuilder();\n        ArrayList<String> streams = new ArrayList<>();\n        streams.add(\"stream1\");\n        streams.add(\"stream2\");\n        streams.add(\"stream3\");\n        assertEquals(\"stream1/stream2/stream3\", UrlBuilder.joinStreamUrls(sb, streams).toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "class_name": "UrlBuilder_joinStreamUrlsTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest.[void]testJoinStreamUrlsWithNullStreams()", "name": "testJoinStreamUrlsWithNullStreams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinStreamUrlsWithNullStreams()", "original_string": "    @Test\n    public void testJoinStreamUrlsWithNullStreams() {\n        StringBuilder sb = new StringBuilder();\n        assertEquals(sb.toString(), UrlBuilder.joinStreamUrls(sb, null).toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java", "class_name": "UrlBuilder_joinStreamUrlsTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_joinStreamUrlsTest.java.UrlBuilder_joinStreamUrlsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest.[void]testPullValue_NullParameters()", "name": "testPullValue_NullParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPullValue_NullParameters()", "original_string": "    @Test\n    public void testPullValue_NullParameters() {\n        // Given\n        JSONObject parameters = null;\n        String key = \"testKey\";\n\n        // When\n        Object result = JSONParser.pullValue(parameters, key);\n\n        // Then\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "class_name": "JSONParser_pullValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest.[void]testPullValue_ExistingKey()", "name": "testPullValue_ExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPullValue_ExistingKey()", "original_string": "    @Test\n    public void testPullValue_ExistingKey() {\n        // Given\n        JSONObject parameters = new JSONObject();\n        String key = \"testKey\";\n        String value = \"testValue\";\n        parameters.put(key, value);\n\n        // When\n        Object result = JSONParser.pullValue(parameters, key);\n\n        // Then\n        assertEquals(value, result);\n        assertFalse(parameters.has(key));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "class_name": "JSONParser_pullValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest.[void]testPullValue_NonExistingKey()", "name": "testPullValue_NonExistingKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPullValue_NonExistingKey()", "original_string": "    @Test\n    public void testPullValue_NonExistingKey() {\n        // Given\n        JSONObject parameters = new JSONObject();\n        String key = \"testKey\";\n\n        // When\n        Object result = JSONParser.pullValue(parameters, key);\n\n        // Then\n        assertNull(result);\n        assertFalse(parameters.has(key));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java", "class_name": "JSONParser_pullValueTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_pullValueTest.java.JSONParser_pullValueTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java.JSONParser_sortJSONObjectTest.[void]testSortJSONObject()", "name": "testSortJSONObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSortJSONObject()", "original_string": "    @Test\n    public void testSortJSONObject() {\n        // Given\n        JSONObject parameters = new JSONObject();\n        JSONParser.addKeyValue(parameters, \"c\", 3);\n        JSONParser.addKeyValue(parameters, \"a\", 1);\n        JSONParser.addKeyValue(parameters, \"b\", 2);\n\n        // When\n        Map<String, Object> sortedParams = JSONParser.sortJSONObject(parameters);\n\n        // Then\n        Map<String, Object> expectedSortedParams = new LinkedHashMap<>();\n        expectedSortedParams.put(\"a\", 1);\n        expectedSortedParams.put(\"b\", 2);\n        expectedSortedParams.put(\"c\", 3);\n\n        assertEquals(expectedSortedParams, sortedParams);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java", "class_name": "JSONParser_sortJSONObjectTest", "class_uri": "src/test/java/com/binance/connector/client/utils/JSONParser_sortJSONObjectTest.java.JSONParser_sortJSONObjectTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java.ParameterChecker_checkRequiredParameterTest.[void]testCheckRequiredParameterPresent()", "name": "testCheckRequiredParameterPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckRequiredParameterPresent()", "original_string": "    @Test\n    public void testCheckRequiredParameterPresent() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"requiredParam\", \"value\");\n        ParameterChecker.checkRequiredParameter(parameters, \"requiredParam\");\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java", "class_name": "ParameterChecker_checkRequiredParameterTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java.ParameterChecker_checkRequiredParameterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java.ParameterChecker_checkRequiredParameterTest.[void]testCheckRequiredParameterMissing()", "name": "testCheckRequiredParameterMissing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCheckRequiredParameterMissing()", "original_string": "    @Test\n    public void testCheckRequiredParameterMissing() {\n        Map<String, Object> parameters = new HashMap<>();\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkRequiredParameter(parameters, \"requiredParam\"));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java", "class_name": "ParameterChecker_checkRequiredParameterTest", "class_uri": "src/test/java/com/binance/connector/client/utils/ParameterChecker_checkRequiredParameterTest.java.ParameterChecker_checkRequiredParameterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest.[void]testBuildPublicRequestPost()", "name": "testBuildPublicRequestPost", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildPublicRequestPost()", "original_string": "    @Test\n    public void testBuildPublicRequestPost() {\n        Request request = RequestBuilder.buildPublicRequest(VALID_URL, HttpMethod.POST);\n        assertEquals(HttpMethod.POST.toString(), request.method());\n        assertEquals(VALID_URL, request.url().toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "class_name": "RequestBuilder_buildPublicRequestTest", "class_uri": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest.[void]testBuildPublicRequestGet()", "name": "testBuildPublicRequestGet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildPublicRequestGet()", "original_string": "    @Test\n    public void testBuildPublicRequestGet() {\n        Request request = RequestBuilder.buildPublicRequest(VALID_URL, HttpMethod.GET);\n        assertEquals(HttpMethod.GET.toString(), request.method());\n        assertEquals(VALID_URL, request.url().toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "class_name": "RequestBuilder_buildPublicRequestTest", "class_uri": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest.[void]testBuildPublicRequestPut()", "name": "testBuildPublicRequestPut", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildPublicRequestPut()", "original_string": "    @Test\n    public void testBuildPublicRequestPut() {\n        Request request = RequestBuilder.buildPublicRequest(VALID_URL, HttpMethod.PUT);\n        assertEquals(HttpMethod.PUT.toString(), request.method());\n        assertEquals(VALID_URL, request.url().toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "class_name": "RequestBuilder_buildPublicRequestTest", "class_uri": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest.[void]testBuildPublicRequestDelete()", "name": "testBuildPublicRequestDelete", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildPublicRequestDelete()", "original_string": "    @Test\n    public void testBuildPublicRequestDelete() {\n        Request request = RequestBuilder.buildPublicRequest(VALID_URL, HttpMethod.DELETE);\n        assertEquals(HttpMethod.DELETE.toString(), request.method());\n        assertEquals(VALID_URL, request.url().toString());\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "class_name": "RequestBuilder_buildPublicRequestTest", "class_uri": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest.[void]testBuildPublicRequestInvalidHttpMethod()", "name": "testBuildPublicRequestInvalidHttpMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildPublicRequestInvalidHttpMethod()", "original_string": "    @Test\n    public void testBuildPublicRequestInvalidHttpMethod() {\n        assertThrows(BinanceConnectorException.class, () -> {\n            RequestBuilder.buildPublicRequest(VALID_URL, HttpMethod.valueOf(\"INVALID\"));\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "class_name": "RequestBuilder_buildPublicRequestTest", "class_uri": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest.[void]testBuildPublicRequestInvalidUrl()", "name": "testBuildPublicRequestInvalidUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildPublicRequestInvalidUrl()", "original_string": "    @Test\n    public void testBuildPublicRequestInvalidUrl() {\n        assertThrows(BinanceConnectorException.class, () -> {\n            RequestBuilder.buildPublicRequest(INVALID_URL, HttpMethod.GET);\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java", "class_name": "RequestBuilder_buildPublicRequestTest", "class_uri": "src/test/java/com/binance/connector/client/utils/RequestBuilder_buildPublicRequestTest.java.RequestBuilder_buildPublicRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest.[void]testBuildFullUrlWithoutParameters()", "name": "testBuildFullUrlWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildFullUrlWithoutParameters()", "original_string": "    @Test\n    public void testBuildFullUrlWithoutParameters() {\n        String baseUrl = \"https://api.binance.com\";\n        String urlPath = \"/v3/order\";\n        Map<String, Object> parameters = null;\n\n        String expected = \"https://api.binance.com/v3/order\";\n        String actual = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java", "class_name": "UrlBuilder_buildFullUrlTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest.[void]testBuildFullUrlWithParameters()", "name": "testBuildFullUrlWithParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildFullUrlWithParameters()", "original_string": "    @Test\n    public void testBuildFullUrlWithParameters() {\n        String baseUrl = \"https://api.binance.com\";\n        String urlPath = \"/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"timeInForce\", \"GTC\");\n        parameters.put(\"quantity\", 0.01);\n        parameters.put(\"price\", 50000.0);\n\n        String expected = \"https://api.binance.com/v3/order?symbol=BTCUSDT&side=BUY&type=LIMIT&timeInForce=GTC&quantity=0.01&price=50000\";\n        String actual = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java", "class_name": "UrlBuilder_buildFullUrlTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest.[void]testBuildFullUrlWithEmptyParameters()", "name": "testBuildFullUrlWithEmptyParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildFullUrlWithEmptyParameters()", "original_string": "    @Test\n    public void testBuildFullUrlWithEmptyParameters() {\n        String baseUrl = \"https://api.binance.com\";\n        String urlPath = \"/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        String expected = \"https://api.binance.com/v3/order\";\n        String actual = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java", "class_name": "UrlBuilder_buildFullUrlTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest.[void]testBuildFullUrlWithEncodedParameters()", "name": "testBuildFullUrlWithEncodedParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildFullUrlWithEncodedParameters()", "original_string": "    @Test\n    public void testBuildFullUrlWithEncodedParameters() {\n        String baseUrl = \"https://api.binance.com\";\n        String urlPath = \"/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"symbols\", \"BNBUSDT,BTCUSDT\");\n\n        String expected = \"https://api.binance.com/v3/order?email=alice%40test.com&symbols=BNBUSDT%2CBTCUSDT\";\n        String actual = UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters);\n\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java", "class_name": "UrlBuilder_buildFullUrlTest", "class_uri": "src/test/java/com/binance/connector/client/utils/UrlBuilder_buildFullUrlTest.java.UrlBuilder_buildFullUrlTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java.SubAccount_managedSubAccountSnapshotTest.[void]testManagedSubAccountSnapshotWithoutParameters()", "name": "testManagedSubAccountSnapshotWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubAccountSnapshotWithoutParameters()", "original_string": "    @Test\n    public void testManagedSubAccountSnapshotWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/accountSnapshot\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubAccountSnapshot(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java", "class_name": "SubAccount_managedSubAccountSnapshotTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java.SubAccount_managedSubAccountSnapshotTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java.SubAccount_managedSubAccountSnapshotTest.[void]testManagedSubAccountSnapshotWithValidParameters()", "name": "testManagedSubAccountSnapshotWithValidParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubAccountSnapshotWithValidParameters()", "original_string": "    @Test\n    public void testManagedSubAccountSnapshotWithValidParameters() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/accountSnapshot?email=%s&type=SPOT\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"type\", \"SPOT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubAccountSnapshot(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java", "class_name": "SubAccount_managedSubAccountSnapshotTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubAccountSnapshotTest.java.SubAccount_managedSubAccountSnapshotTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java.SubAccount_managedSubDepositTest.[void]testManagedSubDeposit()", "name": "testManagedSubDeposit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubDeposit()", "original_string": "    @Test\n    public void testManagedSubDeposit() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/deposit?toEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubDeposit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java", "class_name": "SubAccount_managedSubDepositTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java.SubAccount_managedSubDepositTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java.SubAccount_managedSubDepositTest.[void]testManagedSubDepositWithoutRequiredParameters()", "name": "testManagedSubDepositWithoutRequiredParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubDepositWithoutRequiredParameters()", "original_string": "    @Test\n    public void testManagedSubDepositWithoutRequiredParameters() {\n        String path = \"/sapi/v1/managed-subaccount/deposit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubDeposit(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java", "class_name": "SubAccount_managedSubDepositTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubDepositTest.java.SubAccount_managedSubDepositTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java.CryptoLoans_loanBorrowTest.[void]testLoanBorrow()", "name": "testLoanBorrow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanBorrow()", "original_string": "    @Test\n    public void testLoanBorrow() {\n        String path = \"/sapi/v1/loan/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"loanTerm\", 30);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java", "class_name": "CryptoLoans_loanBorrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java.CryptoLoans_loanBorrowTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java.CryptoLoans_loanBorrowTest.[void]testLoanBorrowMissingParameters()", "name": "testLoanBorrowMissingParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testLoanBorrowMissingParameters()", "original_string": "    @Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testLoanBorrowMissingParameters() {\n        String path = \"/sapi/v1/loan/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createCryptoLoans().loanBorrow(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java", "class_name": "CryptoLoans_loanBorrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanBorrowTest.java.CryptoLoans_loanBorrowTest", "attributes": {"modifiers": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java.SubAccount_futuresTransferTest.[void]testFuturesTransferSuccess()", "name": "testFuturesTransferSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferSuccess()", "original_string": "    @Test\n    public void testFuturesTransferSuccess() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/transfer?email=%s&asset=%s&amount=%s&type=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"BTC\"), \"1.0\", \"1\");\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n        parameters.put(\"type\", 1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java", "class_name": "SubAccount_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java.SubAccount_futuresTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java.SubAccount_futuresTransferTest.[void]testFuturesTransferMissingRequiredParameter()", "name": "testFuturesTransferMissingRequiredParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferMissingRequiredParameter()", "original_string": "    @Test\n    public void testFuturesTransferMissingRequiredParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"type\", 1);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java", "class_name": "SubAccount_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java.SubAccount_futuresTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java.SubAccount_futuresTransferTest.[void]testFuturesTransferInvalidType()", "name": "testFuturesTransferInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferInvalidType()", "original_string": "    @Test\n    public void testFuturesTransferInvalidType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n        parameters.put(\"type\", \"invalid\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java", "class_name": "SubAccount_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresTransferTest.java.SubAccount_futuresTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java.VIPLoans_repayTest.[void]testRepaySuccess()", "name": "testRepaySuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepaySuccess()", "original_string": "    @Test\n    public void testRepaySuccess() {\n        String path = \"/sapi/v1/loan/vip/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n        parameters.put(\"amount\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = vipLoans.repay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java", "class_name": "VIPLoans_repayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java.VIPLoans_repayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java.VIPLoans_repayTest.[void]testRepayMissingOrderId()", "name": "testRepayMissingOrderId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepayMissingOrderId()", "original_string": "    @Test\n    public void testRepayMissingOrderId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", 100.0);\n\n        assertThrows(BinanceConnectorException.class, () -> vipLoans.repay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java", "class_name": "VIPLoans_repayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java.VIPLoans_repayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java.VIPLoans_repayTest.[void]testRepayMissingAmount()", "name": "testRepayMissingAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepayMissingAmount()", "original_string": "    @Test\n    public void testRepayMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n\n        assertThrows(BinanceConnectorException.class, () -> vipLoans.repay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java", "class_name": "VIPLoans_repayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/VIPLoans_repayTest.java.VIPLoans_repayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest.[void]testUniversalTransferSuccess()", "name": "testUniversalTransferSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransferSuccess()", "original_string": "    @Test\n    public void testUniversalTransferSuccess() {\n        String path = String.format(\"/sapi/v1/sub-account/universalTransfer?fromAccountType=%s&toAccountType=%s&asset=%s&amount=100\",\n                UrlBuilder.urlEncode(\"SPOT\"), UrlBuilder.urlEncode(\"MARGIN\"), UrlBuilder.urlEncode(\"BTC\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"MARGIN\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", 100);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().universalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java", "class_name": "SubAccount_universalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest.[void]testUniversalTransferMissingAmount()", "name": "testUniversalTransferMissingAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransferMissingAmount()", "original_string": "    @Test\n    public void testUniversalTransferMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"MARGIN\");\n        parameters.put(\"asset\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().universalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java", "class_name": "SubAccount_universalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest.[void]testUniversalTransferInvalidAsset()", "name": "testUniversalTransferInvalidAsset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransferInvalidAsset()", "original_string": "    @Test\n    public void testUniversalTransferInvalidAsset() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"MARGIN\");\n        parameters.put(\"asset\", 123); // Invalid asset type\n        parameters.put(\"amount\", 100);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().universalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java", "class_name": "SubAccount_universalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_universalTransferTest.java.SubAccount_universalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Convert_quoteInquiryTest.java.Convert_quoteInquiryTest.[void]testQuoteInquirySuccess()", "name": "testQuoteInquirySuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQuoteInquirySuccess()", "original_string": "    @Test\n    public void testQuoteInquirySuccess() {\n        String path = \"/sapi/v1/convert/getQuote?fromAsset=BTC&toAsset=USDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().quoteInquiry(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Convert_quoteInquiryTest.java", "class_name": "Convert_quoteInquiryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Convert_quoteInquiryTest.java.Convert_quoteInquiryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Convert_quoteInquiryTest.java.Convert_quoteInquiryTest.[void]testQuoteInquiryMissingParameter()", "name": "testQuoteInquiryMissingParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQuoteInquiryMissingParameter()", "original_string": "    @Test\n    public void testQuoteInquiryMissingParameter() {\n        String path = \"/sapi/v1/convert/getQuote?fromAsset=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAsset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createConvert().quoteInquiry(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Convert_quoteInquiryTest.java", "class_name": "Convert_quoteInquiryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Convert_quoteInquiryTest.java.Convert_quoteInquiryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest.[void]testManagedSubWithdrawWithoutParameters()", "name": "testManagedSubWithdrawWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubWithdrawWithoutParameters()", "original_string": "    @Test\n    public void testManagedSubWithdrawWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubWithdraw(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "class_name": "SubAccount_managedSubWithdrawTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest.[void]testManagedSubWithdrawWithValidParameters()", "name": "testManagedSubWithdrawWithValidParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubWithdrawWithValidParameters()", "original_string": "    @Test\n    public void testManagedSubWithdrawWithValidParameters() {\n        String path = \"/sapi/v1/managed-subaccount/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"test@example.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "class_name": "SubAccount_managedSubWithdrawTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest.[void]testManagedSubWithdrawWithMissingRequiredParameter()", "name": "testManagedSubWithdrawWithMissingRequiredParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubWithdrawWithMissingRequiredParameter()", "original_string": "    @Test\n    public void testManagedSubWithdrawWithMissingRequiredParameter() {\n        String path = \"/sapi/v1/managed-subaccount/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"test@example.com\");\n        parameters.put(\"asset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubWithdraw(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java", "class_name": "SubAccount_managedSubWithdrawTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_managedSubWithdrawTest.java.SubAccount_managedSubWithdrawTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest.[void]testKlinesWithoutSymbol()", "name": "testKlinesWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKlinesWithoutSymbol()", "original_string": "    @Test\n    public void testKlinesWithoutSymbol() {\n        String path = \"/api/v3/klines\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"interval\", \"1h\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java", "class_name": "Market_klinesTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest.[void]testKlinesWithoutInterval()", "name": "testKlinesWithoutInterval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKlinesWithoutInterval()", "original_string": "    @Test\n    public void testKlinesWithoutInterval() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java", "class_name": "Market_klinesTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest.[void]testKlinesSuccess()", "name": "testKlinesSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKlinesSuccess()", "original_string": "    @Test\n    public void testKlinesSuccess() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT&interval=1h\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1h\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().klines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java", "class_name": "Market_klinesTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_klinesTest.java.Market_klinesTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest.[void]testCollateralRepayRate()", "name": "testCollateralRepayRate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRepayRate()", "original_string": "    @Test\n    public void testCollateralRepayRate() {\n        String path = \"/sapi/v1/loan/repay/collateral/rate?loanCoin=BTC&collateralCoin=ETH&repayAmount=1.0\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"repayAmount\", \"1.0\"); // Changed from 1.0 to \"1.0\"\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().collateralRepayRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java", "class_name": "CryptoLoans_collateralRepayRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest.[void]testCollateralRepayRateMissingLoanCoin()", "name": "testCollateralRepayRateMissingLoanCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRepayRateMissingLoanCoin()", "original_string": "    @Test\n    public void testCollateralRepayRateMissingLoanCoin() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"ETH\");\n        parameters.put(\"repayAmount\", \"1.0\"); // Changed from 1.0 to \"1.0\"\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().collateralRepayRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java", "class_name": "CryptoLoans_collateralRepayRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest.[void]testCollateralRepayRateMissingCollateralCoin()", "name": "testCollateralRepayRateMissingCollateralCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRepayRateMissingCollateralCoin()", "original_string": "    @Test\n    public void testCollateralRepayRateMissingCollateralCoin() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"repayAmount\", \"1.0\"); // Changed from 1.0 to \"1.0\"\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().collateralRepayRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java", "class_name": "CryptoLoans_collateralRepayRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest.[void]testCollateralRepayRateMissingRepayAmount()", "name": "testCollateralRepayRateMissingRepayAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRepayRateMissingRepayAmount()", "original_string": "    @Test\n    public void testCollateralRepayRateMissingRepayAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralCoin\", \"ETH\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().collateralRepayRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java", "class_name": "CryptoLoans_collateralRepayRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_collateralRepayRateTest.java.CryptoLoans_collateralRepayRateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest.[void]testSetFlexibleAutoSubscribe()", "name": "testSetFlexibleAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetFlexibleAutoSubscribe()", "original_string": "    @Test\n    public void testSetFlexibleAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe?productId=40607&autoSubscribe=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setFlexibleAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java", "class_name": "SimpleEarn_setFlexibleAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest.[void]testSetFlexibleAutoSubscribeMissingProductId()", "name": "testSetFlexibleAutoSubscribeMissingProductId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetFlexibleAutoSubscribeMissingProductId()", "original_string": "    @Test\n    public void testSetFlexibleAutoSubscribeMissingProductId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"autoSubscribe\", true);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setFlexibleAutoSubscribe(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java", "class_name": "SimpleEarn_setFlexibleAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest.[void]testSetFlexibleAutoSubscribeMissingAutoSubscribe()", "name": "testSetFlexibleAutoSubscribeMissingAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetFlexibleAutoSubscribeMissingAutoSubscribe()", "original_string": "    @Test\n    public void testSetFlexibleAutoSubscribeMissingAutoSubscribe() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setFlexibleAutoSubscribe(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java", "class_name": "SimpleEarn_setFlexibleAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setFlexibleAutoSubscribeTest.java.SimpleEarn_setFlexibleAutoSubscribeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest.[void]testUniversalTransfer()", "name": "testUniversalTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransfer()", "original_string": "    @Test\n    public void testUniversalTransfer() {\n        String path = \"/sapi/v1/asset/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_C2C\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"0.1\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().universalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java", "class_name": "Wallet_universalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest.[void]testUniversalTransferMissingRequiredParameter()", "name": "testUniversalTransferMissingRequiredParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = BinanceConnectorException.class)\n    public void testUniversalTransferMissingRequiredParameter()", "original_string": "    @Test(expected = BinanceConnectorException.class)\n    public void testUniversalTransferMissingRequiredParameter() {\n        String path = \"/sapi/v1/asset/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MAIN_C2C\");\n        parameters.put(\"asset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createWallet().universalTransfer(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java", "class_name": "Wallet_universalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_universalTransferTest.java.Wallet_universalTransferTest", "attributes": {"modifiers": "@Test(expected = BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java.SubAccount_futuresPositionRiskV2Test.[void]testFuturesPositionRiskV2WithoutParameters()", "name": "testFuturesPositionRiskV2WithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesPositionRiskV2WithoutParameters()", "original_string": "    @Test\n    public void testFuturesPositionRiskV2WithoutParameters() {\n        String path = \"/sapi/v2/sub-account/futures/positionRisk\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresPositionRiskV2(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java", "class_name": "SubAccount_futuresPositionRiskV2Test", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java.SubAccount_futuresPositionRiskV2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java.SubAccount_futuresPositionRiskV2Test.[void]testFuturesPositionRiskV2WithValidParameters()", "name": "testFuturesPositionRiskV2WithValidParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesPositionRiskV2WithValidParameters()", "original_string": "    @Test\n    public void testFuturesPositionRiskV2WithValidParameters() {\n        String path = String.format(\"/sapi/v2/sub-account/futures/positionRisk?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", 1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresPositionRiskV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java", "class_name": "SubAccount_futuresPositionRiskV2Test", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresPositionRiskV2Test.java.SubAccount_futuresPositionRiskV2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest.[void]testSubAccountToSubAccountSuccess()", "name": "testSubAccountToSubAccountSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubAccountToSubAccountSuccess()", "original_string": "    @Test\n    public void testSubAccountToSubAccountSuccess() {\n        String path = \"/sapi/v1/sub-account/transfer/subToSub\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", 0.1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountToSubAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java", "class_name": "SubAccount_subAccountToSubAccountTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest.[void]testSubAccountToSubAccountMissingParameter()", "name": "testSubAccountToSubAccountMissingParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubAccountToSubAccountMissingParameter()", "original_string": "    @Test\n    public void testSubAccountToSubAccountMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToSubAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java", "class_name": "SubAccount_subAccountToSubAccountTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest.[void]testSubAccountToSubAccountInvalidEmail()", "name": "testSubAccountToSubAccountInvalidEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubAccountToSubAccountInvalidEmail()", "original_string": "    @Test\n    public void testSubAccountToSubAccountInvalidEmail() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"invalidEmail\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", 0.1);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToSubAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java", "class_name": "SubAccount_subAccountToSubAccountTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToSubAccountTest.java.SubAccount_subAccountToSubAccountTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest.[void]testFlexibleLoanRepaySuccess()", "name": "testFlexibleLoanRepaySuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanRepaySuccess()", "original_string": "    @Test\n    public void testFlexibleLoanRepaySuccess() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java", "class_name": "CryptoLoans_flexibleLoanRepayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest.[void]testFlexibleLoanRepayMissingRepayAmount()", "name": "testFlexibleLoanRepayMissingRepayAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanRepayMissingRepayAmount()", "original_string": "    @Test\n    public void testFlexibleLoanRepayMissingRepayAmount() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanRepay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java", "class_name": "CryptoLoans_flexibleLoanRepayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest.[void]testFlexibleLoanRepayInvalidLoanCoin()", "name": "testFlexibleLoanRepayInvalidLoanCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanRepayInvalidLoanCoin()", "original_string": "    @Test\n    public void testFlexibleLoanRepayInvalidLoanCoin() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", 123); // Invalid type\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanRepay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java", "class_name": "CryptoLoans_flexibleLoanRepayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest.[void]testFlexibleLoanRepayInvalidCollateralCoin()", "name": "testFlexibleLoanRepayInvalidCollateralCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanRepayInvalidCollateralCoin()", "original_string": "    @Test\n    public void testFlexibleLoanRepayInvalidCollateralCoin() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", 123); // Invalid type\n        parameters.put(\"repayAmount\", 100.0);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanRepay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java", "class_name": "CryptoLoans_flexibleLoanRepayTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanRepayTest.java.CryptoLoans_flexibleLoanRepayTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest.[void]testCancelReplaceWithoutParameters()", "name": "testCancelReplaceWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelReplaceWithoutParameters()", "original_string": "    @Test\n    public void testCancelReplaceWithoutParameters() {\n        String path = \"/api/v3/order/cancelReplace\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> trade.cancelReplace(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java", "class_name": "Trade_cancelReplaceTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest.[void]testCancelReplaceWithValidParameters()", "name": "testCancelReplaceWithValidParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelReplaceWithValidParameters()", "original_string": "    @Test\n    public void testCancelReplaceWithValidParameters() {\n        String path = \"/api/v3/order/cancelReplace?symbol=BNBUSDT&side=BUY&type=LIMIT&cancelReplaceMode=STOP_ON_FAILURE\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"cancelReplaceMode\", \"STOP_ON_FAILURE\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = trade.cancelReplace(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java", "class_name": "Trade_cancelReplaceTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest.[void]testCancelReplaceWithMissingMandatoryParameter()", "name": "testCancelReplaceWithMissingMandatoryParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelReplaceWithMissingMandatoryParameter()", "original_string": "    @Test\n    public void testCancelReplaceWithMissingMandatoryParameter() {\n        String path = \"/api/v3/order/cancelReplace?symbol=BNBUSDT&side=BUY&type=LIMIT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        assertThrows(BinanceConnectorException.class, () -> trade.cancelReplace(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java", "class_name": "Trade_cancelReplaceTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Trade_cancelReplaceTest.java.Trade_cancelReplaceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest.[void]testFlexibleSubscriptionPreview()", "name": "testFlexibleSubscriptionPreview", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleSubscriptionPreview()", "original_string": "    @Test\n    public void testFlexibleSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscriptionPreview?productId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", 1.1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "class_name": "SimpleEarn_flexibleSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest.[void]testFlexibleSubscriptionPreviewWithoutProductId()", "name": "testFlexibleSubscriptionPreviewWithoutProductId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = BinanceConnectorException.class)\n    public void testFlexibleSubscriptionPreviewWithoutProductId()", "original_string": "    @Test(expected = BinanceConnectorException.class)\n    public void testFlexibleSubscriptionPreviewWithoutProductId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", 1.1);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createSimpleEarn().flexibleSubscriptionPreview(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "class_name": "SimpleEarn_flexibleSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest", "attributes": {"modifiers": "@Test(expected = BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest.[void]testFlexibleSubscriptionPreviewWithoutAmount()", "name": "testFlexibleSubscriptionPreviewWithoutAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = BinanceConnectorException.class)\n    public void testFlexibleSubscriptionPreviewWithoutAmount()", "original_string": "    @Test(expected = BinanceConnectorException.class)\n    public void testFlexibleSubscriptionPreviewWithoutAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createSimpleEarn().flexibleSubscriptionPreview(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java", "class_name": "SimpleEarn_flexibleSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_flexibleSubscriptionPreviewTest.java.SimpleEarn_flexibleSubscriptionPreviewTest", "attributes": {"modifiers": "@Test(expected = BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java.SubAccount_futuresInternalTransferTest.[void]testFuturesInternalTransferSuccess()", "name": "testFuturesInternalTransferSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesInternalTransferSuccess()", "original_string": "    @Test\n    public void testFuturesInternalTransferSuccess() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/internalTransfer?fromEmail=%s&toEmail=%s&futuresType=%s&asset=%s&amount=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"), \"1\", \"BTC\", \"1.0\");\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"futuresType\", 1);\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresInternalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java", "class_name": "SubAccount_futuresInternalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java.SubAccount_futuresInternalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java.SubAccount_futuresInternalTransferTest.[void]testFuturesInternalTransferMissingParameter()", "name": "testFuturesInternalTransferMissingParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesInternalTransferMissingParameter()", "original_string": "    @Test\n    public void testFuturesInternalTransferMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"futuresType\", 1);\n        parameters.put(\"asset\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresInternalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java", "class_name": "SubAccount_futuresInternalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresInternalTransferTest.java.SubAccount_futuresInternalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest.[void]testSetLockedAutoSubscribe()", "name": "testSetLockedAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetLockedAutoSubscribe()", "original_string": "    @Test\n    public void testSetLockedAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"1234\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "class_name": "SimpleEarn_setLockedAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest.[void]testSetLockedAutoSubscribeInvalidPositionId()", "name": "testSetLockedAutoSubscribeInvalidPositionId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetLockedAutoSubscribeInvalidPositionId()", "original_string": "    @Test\n    public void testSetLockedAutoSubscribeInvalidPositionId() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"invalid\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "class_name": "SimpleEarn_setLockedAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest.[void]testSetLockedAutoSubscribeMissingAutoSubscribe()", "name": "testSetLockedAutoSubscribeMissingAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testSetLockedAutoSubscribeMissingAutoSubscribe()", "original_string": "    @Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testSetLockedAutoSubscribeMissingAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"1234\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java", "class_name": "SimpleEarn_setLockedAutoSubscribeTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_setLockedAutoSubscribeTest.java.SimpleEarn_setLockedAutoSubscribeTest", "attributes": {"modifiers": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest.[void]testFuturesTransferSuccess()", "name": "testFuturesTransferSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferSuccess()", "original_string": "    @Test\n    public void testFuturesTransferSuccess() {\n        String path = \"/sapi/v1/futures/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", 100.0);\n        parameters.put(\"type\", 1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = futures.futuresTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "class_name": "Futures_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest.[void]testFuturesTransferMissingAsset()", "name": "testFuturesTransferMissingAsset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferMissingAsset()", "original_string": "    @Test\n    public void testFuturesTransferMissingAsset() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", 100.0);\n        parameters.put(\"type\", 1);\n\n        assertThrows(BinanceConnectorException.class, () -> futures.futuresTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "class_name": "Futures_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest.[void]testFuturesTransferMissingAmount()", "name": "testFuturesTransferMissingAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferMissingAmount()", "original_string": "    @Test\n    public void testFuturesTransferMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"type\", 1);\n\n        assertThrows(BinanceConnectorException.class, () -> futures.futuresTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "class_name": "Futures_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest.[void]testFuturesTransferInvalidType()", "name": "testFuturesTransferInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferInvalidType()", "original_string": "    @Test\n    public void testFuturesTransferInvalidType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", 100.0);\n        parameters.put(\"type\", \"invalid\");\n\n        assertThrows(BinanceConnectorException.class, () -> futures.futuresTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java", "class_name": "Futures_futuresTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Futures_futuresTransferTest.java.Futures_futuresTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java.SubAccount_updateIpRestrictionTest.[void]testUpdateIpRestrictionSuccess()", "name": "testUpdateIpRestrictionSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateIpRestrictionSuccess()", "original_string": "    @Test\n    public void testUpdateIpRestrictionSuccess() {\n        String path = String.format(\"/sapi/v2/sub-account/subAccountApi/ipRestriction?email=%s&subAccountApiKey=abc&status=active\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n        parameters.put(\"status\", \"active\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().updateIpRestriction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java", "class_name": "SubAccount_updateIpRestrictionTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java.SubAccount_updateIpRestrictionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java.SubAccount_updateIpRestrictionTest.[void]testUpdateIpRestrictionMissingParameter()", "name": "testUpdateIpRestrictionMissingParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateIpRestrictionMissingParameter()", "original_string": "    @Test\n    public void testUpdateIpRestrictionMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().updateIpRestriction(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java", "class_name": "SubAccount_updateIpRestrictionTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_updateIpRestrictionTest.java.SubAccount_updateIpRestrictionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java.Margin_nextHourlyInterestRateTest.[void]testNextHourlyInterestRate()", "name": "testNextHourlyInterestRate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextHourlyInterestRate()", "original_string": "    @Test\n    public void testNextHourlyInterestRate() {\n        String path = \"/sapi/v1/margin/next-hourly-interest-rate?assets=BTC&isIsolated=false\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assets\", \"BTC\");\n        parameters.put(\"isIsolated\", false);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = margin.nextHourlyInterestRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java", "class_name": "Margin_nextHourlyInterestRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java.Margin_nextHourlyInterestRateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java.Margin_nextHourlyInterestRateTest.[void]testNextHourlyInterestRateMissingAssets()", "name": "testNextHourlyInterestRateMissingAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextHourlyInterestRateMissingAssets()", "original_string": "    @Test\n    public void testNextHourlyInterestRateMissingAssets() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"isIsolated\", false);\n\n        assertThrows(BinanceConnectorException.class, () -> margin.nextHourlyInterestRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java", "class_name": "Margin_nextHourlyInterestRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java.Margin_nextHourlyInterestRateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java.Margin_nextHourlyInterestRateTest.[void]testNextHourlyInterestRateMissingIsIsolated()", "name": "testNextHourlyInterestRateMissingIsIsolated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNextHourlyInterestRateMissingIsIsolated()", "original_string": "    @Test\n    public void testNextHourlyInterestRateMissingIsIsolated() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assets\", \"BTC\");\n\n        assertThrows(BinanceConnectorException.class, () -> margin.nextHourlyInterestRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java", "class_name": "Margin_nextHourlyInterestRateTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Margin_nextHourlyInterestRateTest.java.Margin_nextHourlyInterestRateTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest.[void]testLockedSubscriptionPreview()", "name": "testLockedSubscriptionPreview", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedSubscriptionPreview()", "original_string": "    @Test\n    public void testLockedSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview?projectId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "class_name": "SimpleEarn_lockedSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest.[void]testLockedSubscriptionPreviewWithoutProjectId()", "name": "testLockedSubscriptionPreviewWithoutProjectId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedSubscriptionPreviewWithoutProjectId()", "original_string": "    @Test\n    public void testLockedSubscriptionPreviewWithoutProjectId() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview?amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().lockedSubscriptionPreview(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "class_name": "SimpleEarn_lockedSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest.[void]testLockedSubscriptionPreviewWithoutAmount()", "name": "testLockedSubscriptionPreviewWithoutAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedSubscriptionPreviewWithoutAmount()", "original_string": "    @Test\n    public void testLockedSubscriptionPreviewWithoutAmount() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview?projectId=40607\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"40607\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().lockedSubscriptionPreview(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java", "class_name": "SimpleEarn_lockedSubscriptionPreviewTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_lockedSubscriptionPreviewTest.java.SimpleEarn_lockedSubscriptionPreviewTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test.[void]testFuturesAccountV2()", "name": "testFuturesAccountV2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesAccountV2()", "original_string": "    @Test\n    public void testFuturesAccountV2() {\n        String path = String.format(\"/sapi/v2/sub-account/futures/account?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", 1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java", "class_name": "SubAccount_futuresAccountV2Test", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test.[void]testFuturesAccountV2WithoutParameters()", "name": "testFuturesAccountV2WithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesAccountV2WithoutParameters()", "original_string": "    @Test\n    public void testFuturesAccountV2WithoutParameters() {\n        String path = \"/sapi/v2/sub-account/futures/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccountV2(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java", "class_name": "SubAccount_futuresAccountV2Test", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_futuresAccountV2Test.java.SubAccount_futuresAccountV2Test", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest.[void]testEnableLeverageToken()", "name": "testEnableLeverageToken", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableLeverageToken()", "original_string": "    @Test\n    public void testEnableLeverageToken() {\n        String path = String.format(\"/sapi/v1/sub-account/blvt/enable?email=%s&enableBlvt=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"true\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"enableBlvt\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableLeverageToken(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "class_name": "SubAccount_enableLeverageTokenTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest.[void]testEnableLeverageTokenMissingEmail()", "name": "testEnableLeverageTokenMissingEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableLeverageTokenMissingEmail()", "original_string": "    @Test\n    public void testEnableLeverageTokenMissingEmail() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"enableBlvt\", true);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableLeverageToken(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "class_name": "SubAccount_enableLeverageTokenTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest.[void]testEnableLeverageTokenMissingEnableBlvt()", "name": "testEnableLeverageTokenMissingEnableBlvt", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableLeverageTokenMissingEnableBlvt()", "original_string": "    @Test\n    public void testEnableLeverageTokenMissingEnableBlvt() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableLeverageToken(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java", "class_name": "SubAccount_enableLeverageTokenTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_enableLeverageTokenTest.java.SubAccount_enableLeverageTokenTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java.SubAccount_getFuturesInternalTransferTest.[void]testGetFuturesInternalTransfer()", "name": "testGetFuturesInternalTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFuturesInternalTransfer()", "original_string": "    @Test\n    public void testGetFuturesInternalTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/internalTransfer?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().getFuturesInternalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java", "class_name": "SubAccount_getFuturesInternalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java.SubAccount_getFuturesInternalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java.SubAccount_getFuturesInternalTransferTest.[void]testGetFuturesInternalTransferMissingEmail()", "name": "testGetFuturesInternalTransferMissingEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFuturesInternalTransferMissingEmail()", "original_string": "    @Test\n    public void testGetFuturesInternalTransferMissingEmail() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"futuresType\", futuresType);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().getFuturesInternalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java", "class_name": "SubAccount_getFuturesInternalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java.SubAccount_getFuturesInternalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java.SubAccount_getFuturesInternalTransferTest.[void]testGetFuturesInternalTransferMissingFuturesType()", "name": "testGetFuturesInternalTransferMissingFuturesType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFuturesInternalTransferMissingFuturesType()", "original_string": "    @Test\n    public void testGetFuturesInternalTransferMissingFuturesType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().getFuturesInternalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java", "class_name": "SubAccount_getFuturesInternalTransferTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_getFuturesInternalTransferTest.java.SubAccount_getFuturesInternalTransferTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest.[void]testLoanAdjustLTVWithoutParameters()", "name": "testLoanAdjustLTVWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAdjustLTVWithoutParameters()", "original_string": "    @Test\n    public void testLoanAdjustLTVWithoutParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanAdjustLTV(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java", "class_name": "CryptoLoans_loanAdjustLTVTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest.[void]testLoanAdjustLTVWithParameters()", "name": "testLoanAdjustLTVWithParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAdjustLTVWithParameters()", "original_string": "    @Test\n    public void testLoanAdjustLTVWithParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv?orderId=123456&amount=100.5&direction=ADDITIONAL\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", 123456L);\n        parameters.put(\"amount\", 100.5);\n        parameters.put(\"direction\", \"ADDITIONAL\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAdjustLTV(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java", "class_name": "CryptoLoans_loanAdjustLTVTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_loanAdjustLTVTest.java.CryptoLoans_loanAdjustLTVTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java.SubAccount_subAccountToMasterTest.[void]testSubAccountToMasterSuccess()", "name": "testSubAccountToMasterSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubAccountToMasterSuccess()", "original_string": "    @Test\n    public void testSubAccountToMasterSuccess() {\n        String path = String.format(\"/sapi/v1/sub-account/transfer/subToMaster?asset=%s&amount=%s\",\n                UrlBuilder.urlEncode(\"BTC\"), UrlBuilder.urlEncode(\"1.0\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountToMaster(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java", "class_name": "SubAccount_subAccountToMasterTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java.SubAccount_subAccountToMasterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java.SubAccount_subAccountToMasterTest.[void]testSubAccountToMasterMissingAsset()", "name": "testSubAccountToMasterMissingAsset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubAccountToMasterMissingAsset()", "original_string": "    @Test\n    public void testSubAccountToMasterMissingAsset() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", \"1.0\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToMaster(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java", "class_name": "SubAccount_subAccountToMasterTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java.SubAccount_subAccountToMasterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java.SubAccount_subAccountToMasterTest.[void]testSubAccountToMasterMissingAmount()", "name": "testSubAccountToMasterMissingAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubAccountToMasterMissingAmount()", "original_string": "    @Test\n    public void testSubAccountToMasterMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToMaster(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java", "class_name": "SubAccount_subAccountToMasterTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_subAccountToMasterTest.java.SubAccount_subAccountToMasterTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest.[void]testFlexibleLoanBorrow()", "name": "testFlexibleLoanBorrow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanBorrow()", "original_string": "    @Test\n    public void testFlexibleLoanBorrow() {\n        String path = \"/sapi/v1/loan/flexible/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "class_name": "CryptoLoans_flexibleLoanBorrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest.[void]testFlexibleLoanBorrowMissingLoanCoin()", "name": "testFlexibleLoanBorrowMissingLoanCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = BinanceConnectorException.class)\n    public void testFlexibleLoanBorrowMissingLoanCoin()", "original_string": "    @Test(expected = BinanceConnectorException.class)\n    public void testFlexibleLoanBorrowMissingLoanCoin() {\n        String path = \"/sapi/v1/loan/flexible/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createCryptoLoans().flexibleLoanBorrow(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "class_name": "CryptoLoans_flexibleLoanBorrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest", "attributes": {"modifiers": "@Test(expected = BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest.[void]testFlexibleLoanBorrowMissingCollateralCoin()", "name": "testFlexibleLoanBorrowMissingCollateralCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = BinanceConnectorException.class)\n    public void testFlexibleLoanBorrowMissingCollateralCoin()", "original_string": "    @Test(expected = BinanceConnectorException.class)\n    public void testFlexibleLoanBorrowMissingCollateralCoin() {\n        String path = \"/sapi/v1/loan/flexible/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createCryptoLoans().flexibleLoanBorrow(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java", "class_name": "CryptoLoans_flexibleLoanBorrowTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/CryptoLoans_flexibleLoanBorrowTest.java.CryptoLoans_flexibleLoanBorrowTest", "attributes": {"modifiers": "@Test(expected = BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest.[void]testCloudMiningHistory()", "name": "testCloudMiningHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloudMiningHistory()", "original_string": "    @Test\n    public void testCloudMiningHistory() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 1607639000000L);\n        parameters.put(\"endTime\", 1607643000000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().cloudMiningHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "class_name": "Wallet_cloudMiningHistoryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest.[void]testCloudMiningHistoryMissingStartTime()", "name": "testCloudMiningHistoryMissingStartTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testCloudMiningHistoryMissingStartTime()", "original_string": "    @Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testCloudMiningHistoryMissingStartTime() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"endTime\", 1607643000000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createWallet().cloudMiningHistory(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "class_name": "Wallet_cloudMiningHistoryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest", "attributes": {"modifiers": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest.[void]testCloudMiningHistoryMissingEndTime()", "name": "testCloudMiningHistoryMissingEndTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testCloudMiningHistoryMissingEndTime()", "original_string": "    @Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public void testCloudMiningHistoryMissingEndTime() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", 1607639000000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        client.createWallet().cloudMiningHistory(parameters);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java", "class_name": "Wallet_cloudMiningHistoryTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Wallet_cloudMiningHistoryTest.java.Wallet_cloudMiningHistoryTest", "attributes": {"modifiers": "@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)\n    public", "marker_annotations": [], "non_marker_annotations": ["@Test(expected = com.binance.connector.client.exceptions.BinanceConnectorException.class)", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest.[void]testHashrateResaleRequestSuccess()", "name": "testHashrateResaleRequestSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashrateResaleRequestSuccess()", "original_string": "    @Test\n    public void testHashrateResaleRequestSuccess() {\n        String path = \"/sapi/v1/mining/hash-transfer/config\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"testUser\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", 1672531200000L);\n        parameters.put(\"startDate\", 1672444800000L);\n        parameters.put(\"toPoolUser\", \"testPoolUser\");\n        parameters.put(\"hashRate\", 500000000000L);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = mining.hashrateResaleRequest(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java", "class_name": "Mining_hashrateResaleRequestTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest.[void]testHashrateResaleRequestMissingParameter()", "name": "testHashrateResaleRequestMissingParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashrateResaleRequestMissingParameter()", "original_string": "    @Test\n    public void testHashrateResaleRequestMissingParameter() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"testUser\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", 1672531200000L);\n        parameters.put(\"startDate\", 1672444800000L);\n        parameters.put(\"toPoolUser\", \"testPoolUser\");\n\n        assertThrows(BinanceConnectorException.class, () -> mining.hashrateResaleRequest(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java", "class_name": "Mining_hashrateResaleRequestTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Mining_hashrateResaleRequestTest.java.Mining_hashrateResaleRequestTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest.[void]testExchangeInfoSymbolAndSymbolsTogether()", "name": "testExchangeInfoSymbolAndSymbolsTogether", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoSymbolAndSymbolsTogether()", "original_string": "    @Test\n    public void testExchangeInfoSymbolAndSymbolsTogether() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"symbols\", new ArrayList<>());\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.exchangeInfo(parameters);\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java", "class_name": "Market_exchangeInfoTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest.[void]testExchangeInfoSymbolAndPermissionsTogether()", "name": "testExchangeInfoSymbolAndPermissionsTogether", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoSymbolAndPermissionsTogether()", "original_string": "    @Test\n    public void testExchangeInfoSymbolAndPermissionsTogether() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"permissions\", new ArrayList<>());\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.exchangeInfo(parameters);\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java", "class_name": "Market_exchangeInfoTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest.[void]testExchangeInfoSymbolsAndPermissionsTogether()", "name": "testExchangeInfoSymbolsAndPermissionsTogether", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoSymbolsAndPermissionsTogether()", "original_string": "    @Test\n    public void testExchangeInfoSymbolsAndPermissionsTogether() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", new ArrayList<>());\n        parameters.put(\"permissions\", new ArrayList<>());\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.exchangeInfo(parameters);\n        });\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java", "class_name": "Market_exchangeInfoTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest.[void]testExchangeInfoValidParameters()", "name": "testExchangeInfoValidParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoValidParameters()", "original_string": "    @Test\n    public void testExchangeInfoValidParameters() {\n        String path = \"/api/v3/exchangeInfo?symbols=%5B%22BNBUSDT%22%2C%22BTCUSDT%22%5D\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", new ArrayList<String>() {{\n            add(\"BNBUSDT\");\n            add(\"BTCUSDT\");\n        }});\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = market.exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java", "class_name": "Market_exchangeInfoTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/Market_exchangeInfoTest.java.Market_exchangeInfoTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java.AutoInvest_redeemIndexPlanTest.[void]testRedeemIndexPlanWithoutParameters()", "name": "testRedeemIndexPlanWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemIndexPlanWithoutParameters()", "original_string": "    @Test\n    public void testRedeemIndexPlanWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().redeemIndexPlan(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java", "class_name": "AutoInvest_redeemIndexPlanTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java.AutoInvest_redeemIndexPlanTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java.AutoInvest_redeemIndexPlanTest.[void]testRedeemIndexPlanWithValidParameters()", "name": "testRedeemIndexPlanWithValidParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemIndexPlanWithValidParameters()", "original_string": "    @Test\n    public void testRedeemIndexPlanWithValidParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem?indexId=12345&redemptionPercentage=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", 12345L);\n        parameters.put(\"redemptionPercentage\", 10);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().redeemIndexPlan(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java", "class_name": "AutoInvest_redeemIndexPlanTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_redeemIndexPlanTest.java.AutoInvest_redeemIndexPlanTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest.[void]testTargetAssetRoiList()", "name": "testTargetAssetRoiList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTargetAssetRoiList()", "original_string": "    @Test\n    public void testTargetAssetRoiList() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"targetAsset\", \"BTC\");\n        parameters.put(\"hisRoiType\", \"FIVE_YEAR\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().targetAssetRoiList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java", "class_name": "AutoInvest_targetAssetRoiListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest.[void]testTargetAssetRoiListMissingTargetAsset()", "name": "testTargetAssetRoiListMissingTargetAsset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTargetAssetRoiListMissingTargetAsset()", "original_string": "    @Test\n    public void testTargetAssetRoiListMissingTargetAsset() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"hisRoiType\", \"FIVE_YEAR\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().targetAssetRoiList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java", "class_name": "AutoInvest_targetAssetRoiListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest.[void]testTargetAssetRoiListMissingHisRoiType()", "name": "testTargetAssetRoiListMissingHisRoiType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTargetAssetRoiListMissingHisRoiType()", "original_string": "    @Test\n    public void testTargetAssetRoiListMissingHisRoiType() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"targetAsset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().targetAssetRoiList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java", "class_name": "AutoInvest_targetAssetRoiListTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/AutoInvest_targetAssetRoiListTest.java.AutoInvest_targetAssetRoiListTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest.[void]testSubscribeFlexibleProductSuccess()", "name": "testSubscribeFlexibleProductSuccess", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribeFlexibleProductSuccess()", "original_string": "    @Test\n    public void testSubscribeFlexibleProductSuccess() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscribe?productId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", 1.1);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().subscribeFlexibleProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java", "class_name": "SimpleEarn_subscribeFlexibleProductTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest.[void]testSubscribeFlexibleProductMissingProductId()", "name": "testSubscribeFlexibleProductMissingProductId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribeFlexibleProductMissingProductId()", "original_string": "    @Test\n    public void testSubscribeFlexibleProductMissingProductId() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", 1.1);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().subscribeFlexibleProduct(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java", "class_name": "SimpleEarn_subscribeFlexibleProductTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest.[void]testSubscribeFlexibleProductMissingAmount()", "name": "testSubscribeFlexibleProductMissingAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribeFlexibleProductMissingAmount()", "original_string": "    @Test\n    public void testSubscribeFlexibleProductMissingAmount() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().subscribeFlexibleProduct(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java", "class_name": "SimpleEarn_subscribeFlexibleProductTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SimpleEarn_subscribeFlexibleProductTest.java.SimpleEarn_subscribeFlexibleProductTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest.[void]testDepositAddress()", "name": "testDepositAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddress()", "original_string": "    @Test\n    public void testDepositAddress() {\n        String path = String.format(\"/sapi/v1/capital/deposit/subAddress?email=%s&coin=BTC\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"coin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().depositAddress(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java", "class_name": "SubAccount_depositAddressTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest.[void]testDepositAddressMissingEmail()", "name": "testDepositAddressMissingEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddressMissingEmail()", "original_string": "    @Test\n    public void testDepositAddressMissingEmail() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().depositAddress(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java", "class_name": "SubAccount_depositAddressTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest.[void]testDepositAddressMissingCoin()", "name": "testDepositAddressMissingCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddressMissingCoin()", "original_string": "    @Test\n    public void testDepositAddressMissingCoin() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().depositAddress(parameters));\n    }", "default_arguments": null, "file": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java", "class_name": "SubAccount_depositAddressTest", "class_uri": "src/test/java/com/binance/connector/client/impl/spot/SubAccount_depositAddressTest.java.SubAccount_depositAddressTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestJSONParser.java.TestJSONParser.[void]testGetJSONStringValue()", "name": "testGetJSONStringValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONStringValue()", "original_string": "    @Test\n    public void testGetJSONStringValue() {\n        assertEquals(\"value1\", JSONParser.getJSONStringValue(mockJson, \"key1\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestJSONParser.java", "class_name": "TestJSONParser", "class_uri": "src/test/java/unit/TestJSONParser.java.TestJSONParser", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestJSONParser.java.TestJSONParser.[void]testGetJSONIntValue()", "name": "testGetJSONIntValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONIntValue()", "original_string": "    @Test\n    public void testGetJSONIntValue() {\n        assertEquals(value2, JSONParser.getJSONIntValue(mockJson, \"key2\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestJSONParser.java", "class_name": "TestJSONParser", "class_uri": "src/test/java/unit/TestJSONParser.java.TestJSONParser", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestJSONParser.java.TestJSONParser.[void]testGetJSONStringValueThrowException()", "name": "testGetJSONStringValueThrowException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONStringValueThrowException()", "original_string": "    @Test\n    public void testGetJSONStringValueThrowException() {\n        assertThrows(JSONException.class, () -> JSONParser.getJSONStringValue(mockJson, \"InvalidKey\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestJSONParser.java", "class_name": "TestJSONParser", "class_uri": "src/test/java/unit/TestJSONParser.java.TestJSONParser", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestJSONParser.java.TestJSONParser.[void]testGetJSONIntValueThrowException()", "name": "testGetJSONIntValueThrowException", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetJSONIntValueThrowException()", "original_string": "    @Test\n    public void testGetJSONIntValueThrowException() {\n        assertThrows(JSONException.class, () -> JSONParser.getJSONIntValue(mockJson, \"InvalidKey\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestJSONParser.java", "class_name": "TestJSONParser", "class_uri": "src/test/java/unit/TestJSONParser.java.TestJSONParser", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler.[void]testHandleResponse()", "name": "testHandleResponse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHandleResponse()", "original_string": "    @Test\n    public void testHandleResponse() {\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_OK)\n                .setBody(VALID_RESPONSE));\n\n        String result = ResponseHandler.handleResponse(request, false, null);\n        assertEquals(VALID_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestResponseHandler.java", "class_name": "TestResponseHandler", "class_uri": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler.[void]testWith400JSONErrorMsg()", "name": "testWith400JSONErrorMsg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWith400JSONErrorMsg()", "original_string": "    @Test\n    public void testWith400JSONErrorMsg() {\n        String mockErrorMsg = \"{\\\"code\\\":-1000, \\\"msg\\\":\\\"error\\\"}\";\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_CLIENT_ERROR)\n                .setBody(mockErrorMsg));\n\n        BinanceClientException thrown = assertThrows(BinanceClientException.class, () -> ResponseHandler.handleResponse(request, false, null));\n        assertTrue(thrown.getMessage().contains(mockErrorMsg));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestResponseHandler.java", "class_name": "TestResponseHandler", "class_uri": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler.[void]testWith400ErrorMsg()", "name": "testWith400ErrorMsg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWith400ErrorMsg()", "original_string": "    @Test\n    public void testWith400ErrorMsg() {\n        String mockErrorMsg = \"Error Message\";\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_CLIENT_ERROR)\n                .setBody(mockErrorMsg));\n\n        BinanceClientException thrown = assertThrows(BinanceClientException.class, () -> ResponseHandler.handleResponse(request, false, null));\n        assertTrue(thrown.getMessage().contains(mockErrorMsg));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestResponseHandler.java", "class_name": "TestResponseHandler", "class_uri": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler.[void]testWith500ErrorMsg()", "name": "testWith500ErrorMsg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWith500ErrorMsg()", "original_string": "    @Test\n    public void testWith500ErrorMsg() {\n        String mockErrorMsg = \"Error Message\";\n        mockWebServer.enqueue(new MockResponse()\n                .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n                .setResponseCode(MockData.HTTP_STATUS_SERVER_ERROR)\n                .setBody(mockErrorMsg));\n\n        BinanceServerException thrown = assertThrows(BinanceServerException.class, () -> ResponseHandler.handleResponse(request, false, null));\n        assertTrue(thrown.getMessage().contains(mockErrorMsg));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestResponseHandler.java", "class_name": "TestResponseHandler", "class_uri": "src/test/java/unit/TestResponseHandler.java.TestResponseHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testBuildFullUrl()", "name": "testBuildFullUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildFullUrl()", "original_string": "    @Test\n    public void testBuildFullUrl() {\n        String fullUrl = \"www.test.com/url/path?key1=value1&key2=2&key3=0.0006\";\n        assertEquals(fullUrl, UrlBuilder.buildFullUrl(baseUrl, urlPath, mockParameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testBuildFullUrlWithoutParams()", "name": "testBuildFullUrlWithoutParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildFullUrlWithoutParams()", "original_string": "    @Test\n    public void testBuildFullUrlWithoutParams() {\n        assertEquals(baseUrl + urlPath, UrlBuilder.buildFullUrl(baseUrl, urlPath, null));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testJoinQueryParameters()", "name": "testJoinQueryParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParameters()", "original_string": "    @Test\n    public void testJoinQueryParameters() {\n        String joinedQuery = \"key1=value1&key2=2&key3=0.0006\";\n        assertEquals(joinedQuery, UrlBuilder.joinQueryParameters(mockParameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testJoinLargeQueryParameters()", "name": "testJoinLargeQueryParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinLargeQueryParameters()", "original_string": "    @Test\n    public void testJoinLargeQueryParameters() {\n        mockParameters.put(\"key4\", extensiveDecimalsDouble);\n        mockParameters.put(\"key5\", highDouble);\n        String joinedQuery = \"key1=value1&key2=2&key3=0.0006&key4=1.123456789101112&key5=10000.1\";\n        assertEquals(joinedQuery, UrlBuilder.joinQueryParameters(mockParameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testJoinQueryParametersWithoutParams()", "name": "testJoinQueryParametersWithoutParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithoutParams()", "original_string": "    @Test\n    public void testJoinQueryParametersWithoutParams() {\n        assertEquals(\"\", UrlBuilder.joinQueryParameters(null));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testJoinQueryParametersWithEmptyParams()", "name": "testJoinQueryParametersWithEmptyParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithEmptyParams()", "original_string": "    @Test\n    public void testJoinQueryParametersWithEmptyParams() {\n        String joinedQuery = \"\"; \n        assertEquals(joinedQuery, UrlBuilder.joinQueryParameters(new LinkedHashMap<String, Object>()));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testJoinQueryParametersWithLocaleIT()", "name": "testJoinQueryParametersWithLocaleIT", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testJoinQueryParametersWithLocaleIT()", "original_string": "    @Test\n    public void testJoinQueryParametersWithLocaleIT() {\n\n        Locale.setDefault(new Locale(\"it\", \"IT\"));\n\n        String joinedQuery = String.format(\"key1=%s&key2=%s\", extensiveDecimalsDouble, highDouble);\n        String buildQuery = UrlBuilder.joinQueryParameters(mockDoubleParameters);\n        assertEquals(joinedQuery, buildQuery);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "\nTests joinQueryParameters method's behaviour when it's Locale.IT by checking if the Double value is not changed to \".\" to \",\".\nAlso tests if there's no drop of 0s, addition of group separator \",\" and limitation on decimals number.\n"}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testBuildStreamUrl()", "name": "testBuildStreamUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildStreamUrl()", "original_string": "    @Test\n    public void testBuildStreamUrl() {\n        String streamUrl = \"www.test.com/stream?streams=stream1/stream2/stream3\";\n        assertEquals(streamUrl, UrlBuilder.buildStreamUrl(baseUrl, mockStreams));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testBuildStreamUrlWitoutParams()", "name": "testBuildStreamUrlWitoutParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildStreamUrlWitoutParams()", "original_string": "    @Test\n    public void testBuildStreamUrlWitoutParams() {\n        String streamUrl = \"www.test.com/stream\";\n        assertEquals(streamUrl, UrlBuilder.buildStreamUrl(baseUrl, null));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder.[void]testBuildStreamUrlWithEmptyParams()", "name": "testBuildStreamUrlWithEmptyParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBuildStreamUrlWithEmptyParams()", "original_string": "    @Test\n    public void testBuildStreamUrlWithEmptyParams() {\n        String streamUrl = \"www.test.com/stream\";\n        assertEquals(streamUrl, UrlBuilder.buildStreamUrl(baseUrl, new ArrayList<String>()));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestUrlBuilder.java", "class_name": "TestUrlBuilder", "class_uri": "src/test/java/unit/TestUrlBuilder.java.TestUrlBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker.[void]testcheckParameter()", "name": "testcheckParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testcheckParameter()", "original_string": "    @Test\n    public void testcheckParameter() {\n        ParameterChecker.checkParameter(MockData.MOCK_PARAMETERS, \"key1\", String.class);\n        ParameterChecker.checkParameter(MockData.MOCK_PARAMETERS, \"key2\", Integer.class);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestParameterChecker.java", "class_name": "TestParameterChecker", "class_uri": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker.[void]testcheckParameterNoKey()", "name": "testcheckParameterNoKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testcheckParameterNoKey()", "original_string": "    @Test\n    public void testcheckParameterNoKey() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkRequiredParameter(MockData.MOCK_PARAMETERS, \"InvalidKey\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestParameterChecker.java", "class_name": "TestParameterChecker", "class_uri": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker.[void]testcheckParameterWrongType()", "name": "testcheckParameterWrongType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testcheckParameterWrongType()", "original_string": "    @Test\n    public void testcheckParameterWrongType() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(mockObject, Integer.class, \"mockObject\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestParameterChecker.java", "class_name": "TestParameterChecker", "class_uri": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker.[void]testcheckEmptyString()", "name": "testcheckEmptyString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testcheckEmptyString()", "original_string": "    @Test\n    public void testcheckEmptyString() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(emptyString, String.class, \"mockObject\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestParameterChecker.java", "class_name": "TestParameterChecker", "class_uri": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker.[void]testcheckNull()", "name": "testcheckNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testcheckNull()", "original_string": "    @Test\n    public void testcheckNull() {\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkParameterType(null, String.class, \"mockObject\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestParameterChecker.java", "class_name": "TestParameterChecker", "class_uri": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker.[void]testMoreThanOneAllowedParam()", "name": "testMoreThanOneAllowedParam", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMoreThanOneAllowedParam()", "original_string": "    @Test\n    public void testMoreThanOneAllowedParam() {\n        String[] symbols = new String[]{\"BTCUSDT\", \"BNBUSDT\"};\n        String[] permissions =  new String[]{\"SPOT\", \"MARGIN\"};\n\n        JSONObject params = new JSONObject();\n        params.put(\"symbols\", symbols);\n        params.put(\"permissions\", permissions);\n\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOnlyOneOfParameters(params, \"symbols\", \"permissions\"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestParameterChecker.java", "class_name": "TestParameterChecker", "class_uri": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker.[void]testNoOneOfTheRequiredPrams()", "name": "testNoOneOfTheRequiredPrams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoOneOfTheRequiredPrams()", "original_string": "    @Test\n    public void testNoOneOfTheRequiredPrams() {\n\n        // params without either one of required params (orderId or origClientOrderId)\n        JSONObject params = new JSONObject();\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOneOfParametersRequired(params, \"orderId\", \"origClientOrderId\"));\n        // no params\n        assertThrows(BinanceConnectorException.class, () -> ParameterChecker.checkOneOfParametersRequired(null, \"orderId\", \"origClientOrderId\"));\n\n    }", "default_arguments": null, "file": "src/test/java/unit/TestParameterChecker.java", "class_name": "TestParameterChecker", "class_uri": "src/test/java/unit/TestParameterChecker.java.TestParameterChecker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testPublicPostMethod()", "name": "testPublicPostMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPublicPostMethod()", "original_string": "    @Test\n    public void testPublicPostMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.POST);\n        assertEquals(request.method(), HttpMethod.POST.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testPublicGetMethod()", "name": "testPublicGetMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPublicGetMethod()", "original_string": "    @Test\n    public void testPublicGetMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.GET);\n        assertEquals(request.method(), HttpMethod.GET.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testPublicPutMethod()", "name": "testPublicPutMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPublicPutMethod()", "original_string": "    @Test\n    public void testPublicPutMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.PUT);\n        assertEquals(request.method(), HttpMethod.PUT.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testPublicDeleteMethod()", "name": "testPublicDeleteMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPublicDeleteMethod()", "original_string": "    @Test\n    public void testPublicDeleteMethod() {\n        Request request = RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.DELETE);\n        assertEquals(request.method(), HttpMethod.DELETE.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testPublicInvalidMethod()", "name": "testPublicInvalidMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPublicInvalidMethod()", "original_string": "    @Test\n    public void testPublicInvalidMethod() {\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildPublicRequest(fullUrl, HttpMethod.INVALID));\n        assertTrue(thrown.getMessage().contains(\"Invalid HTTP method: \"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testPublicInvalidUrl()", "name": "testPublicInvalidUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPublicInvalidUrl()", "original_string": "    @Test\n    public void testPublicInvalidUrl() {\n        String invalidUrl = \"invalid\";\n\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildPublicRequest(invalidUrl, HttpMethod.POST));\n        assertTrue(thrown.getMessage().contains(\"Invalid URL: \"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testApiKeyPostMethod()", "name": "testApiKeyPostMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiKeyPostMethod()", "original_string": "    @Test\n    public void testApiKeyPostMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.POST, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.POST.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testApiKeyGetMethod()", "name": "testApiKeyGetMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiKeyGetMethod()", "original_string": "    @Test\n    public void testApiKeyGetMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.GET, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.GET.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testApiKeyPutMethod()", "name": "testApiKeyPutMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiKeyPutMethod()", "original_string": "    @Test\n    public void testApiKeyPutMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.PUT, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.PUT.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testApiKeyDeleteMethod()", "name": "testApiKeyDeleteMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiKeyDeleteMethod()", "original_string": "    @Test\n    public void testApiKeyDeleteMethod() {\n        Request request = RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.DELETE, MockData.API_KEY);\n        assertEquals(request.method(), HttpMethod.DELETE.toString());\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testApiKeyInvalidMethod()", "name": "testApiKeyInvalidMethod", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiKeyInvalidMethod()", "original_string": "    @Test\n    public void testApiKeyInvalidMethod() {\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildApiKeyRequest(fullUrl, HttpMethod.INVALID, MockData.API_KEY));\n        assertTrue(thrown.getMessage().contains(\"Invalid HTTP method: \"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testApiKeyInvalidUrl()", "name": "testApiKeyInvalidUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiKeyInvalidUrl()", "original_string": "    @Test\n    public void testApiKeyInvalidUrl() {\n        String invalidUrl = \"invalid\";\n\n        BinanceConnectorException thrown = assertThrows(BinanceConnectorException.class, () -> RequestBuilder.buildApiKeyRequest(invalidUrl, HttpMethod.POST, MockData.API_KEY));\n        assertTrue(thrown.getMessage().contains(\"Invalid URL: \"));\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder.[void]testWebSocketUrl()", "name": "testWebSocketUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWebSocketUrl()", "original_string": "    @Test\n    public void testWebSocketUrl() {\n        Request request = RequestBuilder.buildWebSocketRequest(fullUrl);\n        assertEquals(request.url().toString(), fullUrl);\n    }", "default_arguments": null, "file": "src/test/java/unit/TestRequestBuilder.java", "class_name": "TestRequestBuilder", "class_uri": "src/test/java/unit/TestRequestBuilder.java.TestRequestBuilder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests.[void]testHmacSignatureGeneratorWithoutSecretKey()", "name": "testHmacSignatureGeneratorWithoutSecretKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHmacSignatureGeneratorWithoutSecretKey()", "original_string": "    @Test\n    public void testHmacSignatureGeneratorWithoutSecretKey() {\n        assertThrows(BinanceConnectorException.class, () ->  new HmacSignatureGenerator(\"\"));\n        assertThrows(BinanceConnectorException.class, () ->  new HmacSignatureGenerator(null));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestSignedRequests.java", "class_name": "TestSignedRequests", "class_uri": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests.[void]testRsaSignatureGeneratorWithoutPrivateKey()", "name": "testRsaSignatureGeneratorWithoutPrivateKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRsaSignatureGeneratorWithoutPrivateKey()", "original_string": "    @Test\n    public void testRsaSignatureGeneratorWithoutPrivateKey() {\n        assertThrows(BinanceConnectorException.class, () ->  new RsaSignatureGenerator(\"\"));\n        assertThrows(BinanceConnectorException.class, () ->  new RsaSignatureGenerator(null));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestSignedRequests.java", "class_name": "TestSignedRequests", "class_uri": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests.[void]testSignedRequestWithoutConnectingFirst()", "name": "testSignedRequestWithoutConnectingFirst", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSignedRequestWithoutConnectingFirst()", "original_string": "    @Test\n    public void testSignedRequestWithoutConnectingFirst() {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(MockData.SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(MockData.API_KEY, signatureGenerator, MockData.WS_BASE_URL);\n        assertThrows(BinanceConnectorException.class, () -> client.general().ping(null));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestSignedRequests.java", "class_name": "TestSignedRequests", "class_uri": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests.[void]testSignedRequestWithoutSignatureGenerator()", "name": "testSignedRequestWithoutSignatureGenerator", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSignedRequestWithoutSignatureGenerator()", "original_string": "    @Test\n    public void testSignedRequestWithoutSignatureGenerator() {\n        WebSocketApiClient client = new WebSocketApiClientImpl();\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        assertThrows(BinanceConnectorException.class, () -> client.account().accountStatus(null));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestSignedRequests.java", "class_name": "TestSignedRequests", "class_uri": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests.[void]testSignedRequestWithoutApiKey()", "name": "testSignedRequestWithoutApiKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSignedRequestWithoutApiKey()", "original_string": "    @Test\n    public void testSignedRequestWithoutApiKey() {\n        HmacSignatureGenerator signatureGenerator = new HmacSignatureGenerator(MockData.SECRET_KEY);\n        WebSocketApiClient client = new WebSocketApiClientImpl(\"\", signatureGenerator, MockData.WS_BASE_URL);\n        client.connect(((event) -> {\n            System.out.println(event);\n        }));\n        assertThrows(BinanceConnectorException.class, () -> client.account().accountStatus(null));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestSignedRequests.java", "class_name": "TestSignedRequests", "class_uri": "src/test/java/unit/websocketapi/TestSignedRequests.java.TestSignedRequests", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler.[void]testRequestWithoutWebSocketConnection()", "name": "testRequestWithoutWebSocketConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequestWithoutWebSocketConnection()", "original_string": "    @Test\n    public void testRequestWithoutWebSocketConnection() {\n        assertThrows(BinanceConnectorException.class, () -> new WebSocketApiRequestHandler(null, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "class_name": "TestWebSocketApiRequestHandler", "class_uri": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler.[void]testPublicRequestWithoutMandatoryParams()", "name": "testPublicRequestWithoutMandatoryParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPublicRequestWithoutMandatoryParams()", "original_string": "    @Test\n    public void testPublicRequestWithoutMandatoryParams() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handler.publicRequest(\"\", params));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "class_name": "TestWebSocketApiRequestHandler", "class_uri": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler.[void]testApiRequestWithoutMandatoryParams()", "name": "testApiRequestWithoutMandatoryParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiRequestWithoutMandatoryParams()", "original_string": "    @Test\n    public void testApiRequestWithoutMandatoryParams() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handler.apiRequest(\"\", params));\n\n        WebSocketApiRequestHandler handlerWithoutApiKey = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, null, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handlerWithoutApiKey.apiRequest(\"trades.historical\", params));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "class_name": "TestWebSocketApiRequestHandler", "class_uri": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler.[void]testSignedRequestWithoutMandatoryParams()", "name": "testSignedRequestWithoutMandatoryParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSignedRequestWithoutMandatoryParams()", "original_string": "    @Test\n    public void testSignedRequestWithoutMandatoryParams() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handler.signedRequest(\"\", params));\n\n        WebSocketApiRequestHandler handlerWithoutApiKey = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, null, MockData.HMAC_SIGNATURE_GENERATOR);\n        assertThrows(BinanceConnectorException.class, () -> handlerWithoutApiKey.signedRequest(\"order.test\", params));\n\n        WebSocketApiRequestHandler handlerWithoutsignGenerator = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, null);\n        assertThrows(BinanceConnectorException.class, () -> handlerWithoutsignGenerator.signedRequest(\"order.test\", params));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "class_name": "TestWebSocketApiRequestHandler", "class_uri": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler.[void]testRequestWithInvalidRequestId()", "name": "testRequestWithInvalidRequestId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRequestWithInvalidRequestId()", "original_string": "    @Test\n    public void testRequestWithInvalidRequestId() {\n        WebSocketApiRequestHandler handler = new WebSocketApiRequestHandler(MockData.WS_CONNECTION, MockData.API_KEY, MockData.HMAC_SIGNATURE_GENERATOR);\n        params.put(\"requestId\", invalidReqId);\n        assertThrows(BinanceConnectorException.class, () -> handler.publicRequest(\"ping\", params));\n    }", "default_arguments": null, "file": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java", "class_name": "TestWebSocketApiRequestHandler", "class_uri": "src/test/java/unit/websocketapi/TestWebSocketApiRequestHandler.java.TestWebSocketApiRequestHandler", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk.[void]testFuturesPositionRiskWithoutParameters()", "name": "testFuturesPositionRiskWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesPositionRiskWithoutParameters()", "original_string": "    @Test\n    public void testFuturesPositionRiskWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/positionRisk\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresPositionRisk(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java", "class_name": "TestFuturesPositionRisk", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk.[void]testFuturesPositionRisk()", "name": "testFuturesPositionRisk", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesPositionRisk()", "original_string": "    @Test\n    public void testFuturesPositionRisk() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/positionRisk?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresPositionRisk(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java", "class_name": "TestFuturesPositionRisk", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesPositionRisk.java.TestFuturesPositionRisk", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2.[void]testFuturesPositionRiskWithoutParameters()", "name": "testFuturesPositionRiskWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesPositionRiskWithoutParameters()", "original_string": "    @Test\n    public void testFuturesPositionRiskWithoutParameters() {\n        String path = \"/sapi/v2/sub-account/futures/positionRisk\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresPositionRiskV2(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java", "class_name": "TestFuturesPositionRiskV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2.[void]testFuturesPositionRisk()", "name": "testFuturesPositionRisk", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesPositionRisk()", "original_string": "    @Test\n    public void testFuturesPositionRisk() {\n        String path = String.format(\"/sapi/v2/sub-account/futures/positionRisk?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresPositionRiskV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java", "class_name": "TestFuturesPositionRiskV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesPositionRiskV2.java.TestFuturesPositionRiskV2", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2.[void]testFuturesAccountWithoutParameters()", "name": "testFuturesAccountWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesAccountWithoutParameters()", "original_string": "    @Test\n    public void testFuturesAccountWithoutParameters() {\n        String path = \"/sapi/v2/sub-account/futures/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccountV2(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java", "class_name": "TestFuturesAccountV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2.[void]testFuturesAccount()", "name": "testFuturesAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesAccount()", "original_string": "    @Test\n    public void testFuturesAccount() {\n        String path = String.format(\"/sapi/v2/sub-account/futures/account?email=%s&futuresType=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java", "class_name": "TestFuturesAccountV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccountV2.java.TestFuturesAccountV2", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount.[void]testFuturesAccountWithoutParameters()", "name": "testFuturesAccountWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesAccountWithoutParameters()", "original_string": "    @Test\n    public void testFuturesAccountWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java", "class_name": "TestFuturesAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount.[void]testFuturesAccount()", "name": "testFuturesAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesAccount()", "original_string": "    @Test\n    public void testFuturesAccount() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/account?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java", "class_name": "TestFuturesAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccount.java.TestFuturesAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2.[void]testFuturesSummaryWithoutType()", "name": "testFuturesSummaryWithoutType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesSummaryWithoutType()", "original_string": "    @Test\n    public void testFuturesSummaryWithoutType() {\n        String path = \"/sapi/v2/sub-account/futures/accountSummary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresAccountSummaryV2(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java", "class_name": "TestFuturesAccountSummaryV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2.[void]testFuturesSummary()", "name": "testFuturesSummary", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesSummary()", "original_string": "    @Test\n    public void testFuturesSummary() {\n        String path = \"/sapi/v2/sub-account/futures/accountSummary?futuresType=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"futuresType\", futuresType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountSummaryV2(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java", "class_name": "TestFuturesAccountSummaryV2", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesAccountSummaryV2.java.TestFuturesAccountSummaryV2", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory.[void]testDepositHistWithoutParameters()", "name": "testDepositHistWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositHistWithoutParameters()", "original_string": "    @Test\n    public void testDepositHistWithoutParameters() {\n        String path = \"/sapi/v1/capital/deposit/subHisrec\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().depositHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDepositHistory.java", "class_name": "TestDepositHistory", "class_uri": "src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory.[void]testDepositHist()", "name": "testDepositHist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositHist()", "original_string": "    @Test\n    public void testDepositHist() {\n        String path = String.format(\"/sapi/v1/capital/deposit/subHisrec?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().depositHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDepositHistory.java", "class_name": "TestDepositHistory", "class_uri": "src/test/java/unit/spot/subaccount/TestDepositHistory.java.TestDepositHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer.[void]testFuturesInternalTransWithoutParameters()", "name": "testFuturesInternalTransWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesInternalTransWithoutParameters()", "original_string": "    @Test\n    public void testFuturesInternalTransWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/internalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresInternalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java", "class_name": "TestFuturesInternalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer.[void]testFuturesInternalTrans()", "name": "testFuturesInternalTrans", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesInternalTrans()", "original_string": "    @Test\n    public void testFuturesInternalTrans() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/internalTransfer?fromEmail=%s&toEmail=%s&futuresType=1&asset=BNB&amount=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresInternalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java", "class_name": "TestFuturesInternalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesInternalTransfer.java.TestFuturesInternalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestTransferHistory.java.TestTransferHistory.[void]testTransferHist()", "name": "testTransferHist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransferHist()", "original_string": "    @Test\n    public void testTransferHist() {\n        String path = \"/sapi/v1/sub-account/transfer/subUserHistory?asset=BNB&type=1&startTime=100001&endTime=100002&limit=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"type\", type);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().transferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestTransferHistory.java", "class_name": "TestTransferHistory", "class_uri": "src/test/java/unit/spot/subaccount/TestTransferHistory.java.TestTransferHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction.[void]testGetIpRestrictionWithoutParameters()", "name": "testGetIpRestrictionWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIpRestrictionWithoutParameters()", "original_string": "    @Test\n    public void testGetIpRestrictionWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/subAccountApi/ipRestriction\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().getIpRestriction(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java", "class_name": "TestGetIpRestriction", "class_uri": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction.[void]testGetIpRestriction()", "name": "testGetIpRestriction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetIpRestriction()", "original_string": "    @Test\n    public void testGetIpRestriction() {\n        String path = String.format(\"/sapi/v1/sub-account/subAccountApi/ipRestriction?email=%s&subAccountApiKey=abc\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().getIpRestriction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java", "class_name": "TestGetIpRestriction", "class_uri": "src/test/java/unit/spot/subaccount/TestGetIpRestriction.java.TestGetIpRestriction", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken.[void]testEnableTokenWithoutParameters()", "name": "testEnableTokenWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableTokenWithoutParameters()", "original_string": "    @Test\n    public void testEnableTokenWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/blvt/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableLeverageToken(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java", "class_name": "TestEnableLeverageToken", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken.[void]testEnableToken()", "name": "testEnableToken", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableToken()", "original_string": "    @Test\n    public void testEnableToken() {\n        String path = String.format(\"/sapi/v1/sub-account/blvt/enable?email=%s&enableBlvt=true\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"enableBlvt\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableLeverageToken(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java", "class_name": "TestEnableLeverageToken", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableLeverageToken.java.TestEnableLeverageToken", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures.[void]testEnableFuturesWithoutEmail()", "name": "testEnableFuturesWithoutEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableFuturesWithoutEmail()", "original_string": "    @Test\n    public void testEnableFuturesWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/futures/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableFutures(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableFutures.java", "class_name": "TestEnableFutures", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures.[void]testEnableFutures()", "name": "testEnableFutures", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableFutures()", "original_string": "    @Test\n    public void testEnableFutures() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/enable?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableFutures(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableFutures.java", "class_name": "TestEnableFutures", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableFutures.java.TestEnableFutures", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit.[void]testManagedSubDepositWithoutParameters()", "name": "testManagedSubDepositWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubDepositWithoutParameters()", "original_string": "    @Test\n    public void testManagedSubDepositWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/deposit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubDeposit(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java", "class_name": "TestManagedSubDeposit", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit.[void]testManagedSubWithdraw()", "name": "testManagedSubWithdraw", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubWithdraw()", "original_string": "    @Test\n    public void testManagedSubWithdraw() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/deposit?toEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubDeposit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java", "class_name": "TestManagedSubDeposit", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubDeposit.java.TestManagedSubDeposit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin.[void]testEnableMarginWithoutEmail()", "name": "testEnableMarginWithoutEmail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableMarginWithoutEmail()", "original_string": "    @Test\n    public void testEnableMarginWithoutEmail() {\n        String path = \"/sapi/v1/sub-account/margin/enable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().enableMargin(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableMargin.java", "class_name": "TestEnableMargin", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin.[void]testEnableMargin()", "name": "testEnableMargin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableMargin()", "original_string": "    @Test\n    public void testEnableMargin() {\n        String path = String.format(\"/sapi/v1/sub-account/margin/enable?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().enableMargin(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestEnableMargin.java", "class_name": "TestEnableMargin", "class_uri": "src/test/java/unit/spot/subaccount/TestEnableMargin.java.TestEnableMargin", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java.TestFuturesSummary.[void]testFuturesSummary()", "name": "testFuturesSummary", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesSummary()", "original_string": "    @Test\n    public void testFuturesSummary() {\n        String path = \"/sapi/v1/sub-account/futures/accountSummary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresAccountSummary(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java", "class_name": "TestFuturesSummary", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesSummary.java.TestFuturesSummary", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails.[void]testManagedSubDetailsWithoutParameters()", "name": "testManagedSubDetailsWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubDetailsWithoutParameters()", "original_string": "    @Test\n    public void testManagedSubDetailsWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubDetails(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java", "class_name": "TestManagedSubDetails", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails.[void]testManagedSubDetails()", "name": "testManagedSubDetails", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubDetails()", "original_string": "    @Test\n    public void testManagedSubDetails() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/asset?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubDetails(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java", "class_name": "TestManagedSubDetails", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubDetails.java.TestManagedSubDetails", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress.[void]testDepositAddressWithoutParameters()", "name": "testDepositAddressWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddressWithoutParameters()", "original_string": "    @Test\n    public void testDepositAddressWithoutParameters() {\n        String path = \"/sapi/v1/capital/deposit/subAddress\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().depositAddress(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDepositAddress.java", "class_name": "TestDepositAddress", "class_uri": "src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress.[void]testDepositAddress()", "name": "testDepositAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddress()", "original_string": "    @Test\n    public void testDepositAddress() {\n        String path = String.format(\"/sapi/v1/capital/deposit/subAddress?email=%s&coin=BNB\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"coin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().depositAddress(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDepositAddress.java", "class_name": "TestDepositAddress", "class_uri": "src/test/java/unit/spot/subaccount/TestDepositAddress.java.TestDepositAddress", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster.[void]testSubToMasterWithoutParameters()", "name": "testSubToMasterWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubToMasterWithoutParameters()", "original_string": "    @Test\n    public void testSubToMasterWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/transfer/subToMaster\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToMaster(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java", "class_name": "TestSubAccountToMaster", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster.[void]testSubToMaster()", "name": "testSubToMaster", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubToMaster()", "original_string": "    @Test\n    public void testSubToMaster() {\n        String path = \"/sapi/v1/sub-account/transfer/subToMaster?asset=BNB&amount=0.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountToMaster(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java", "class_name": "TestSubAccountToMaster", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountToMaster.java.TestSubAccountToMaster", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountList.java.TestSubAccountList.[void]testSubAccountList()", "name": "testSubAccountList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubAccountList()", "original_string": "    @Test\n    public void testSubAccountList() {\n        String path = String.format(\"/sapi/v1/sub-account/list?email=%s&isFreeze=true&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"isFreeze\", true);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountList.java", "class_name": "TestSubAccountList", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountList.java.TestSubAccountList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction.[void]testUpdateIpRestrictionWithoutParameters()", "name": "testUpdateIpRestrictionWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateIpRestrictionWithoutParameters()", "original_string": "    @Test\n    public void testUpdateIpRestrictionWithoutParameters() {\n        String path = \"/sapi/v2/sub-account/subAccountApi/ipRestriction\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().updateIpRestriction(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java", "class_name": "TestUpdateIpRestriction", "class_uri": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction.[void]testUpdateIpRestriction()", "name": "testUpdateIpRestriction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUpdateIpRestriction()", "original_string": "    @Test\n    public void testUpdateIpRestriction() {\n        String path = String.format(\"/sapi/v2/sub-account/subAccountApi/ipRestriction?email=%s&subAccountApiKey=abc&status=2&ipAddress=1.2.3.4\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n        parameters.put(\"status\", \"2\");\n        parameters.put(\"ipAddress\", \"1.2.3.4\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().updateIpRestriction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java", "class_name": "TestUpdateIpRestriction", "class_uri": "src/test/java/unit/spot/subaccount/TestUpdateIpRestriction.java.TestUpdateIpRestriction", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets.[void]testAssetsWithoutParameters()", "name": "testAssetsWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetsWithoutParameters()", "original_string": "    @Test\n    public void testAssetsWithoutParameters() {\n        String path = \"/sapi/v3/sub-account/assets\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().assets(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestAssets.java", "class_name": "TestAssets", "class_uri": "src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets.[void]testAssets()", "name": "testAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssets()", "original_string": "    @Test\n    public void testAssets() {\n        String path = String.format(\"/sapi/v3/sub-account/assets?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().assets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestAssets.java", "class_name": "TestAssets", "class_uri": "src/test/java/unit/spot/subaccount/TestAssets.java.TestAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer.[void]testFuturesTransWithoutParameters()", "name": "testFuturesTransWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransWithoutParameters()", "original_string": "    @Test\n    public void testFuturesTransWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().futuresTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java", "class_name": "TestFuturesTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer.[void]testFuturesTrans()", "name": "testFuturesTrans", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTrans()", "original_string": "    @Test\n    public void testFuturesTrans() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/transfer?email=%s&asset=BNB&amount=0.1&type=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().futuresTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java", "class_name": "TestFuturesTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestFuturesTransfer.java.TestFuturesTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList.[void]testDeleteIpListWithoutParameters()", "name": "testDeleteIpListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDeleteIpListWithoutParameters()", "original_string": "    @Test\n    public void testDeleteIpListWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().deleteIpList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java", "class_name": "TestDeleteIpList", "class_uri": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList.[void]testDeleteIpList()", "name": "testDeleteIpList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void  testDeleteIpList()", "original_string": "    @Test\n    public void  testDeleteIpList() {\n        String path = String.format(\"/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList?email=%s&subAccountApiKey=abc\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"subAccountApiKey\", \"abc\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().deleteIpList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java", "class_name": "TestDeleteIpList", "class_uri": "src/test/java/unit/spot/subaccount/TestDeleteIpList.java.TestDeleteIpList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount.[void]testMarginWithoutParameters()", "name": "testMarginWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMarginWithoutParameters()", "original_string": "    @Test\n    public void testMarginWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/margin/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().marginAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginAccount.java", "class_name": "TestMarginAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount.[void]testMargin()", "name": "testMargin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMargin()", "original_string": "    @Test\n    public void testMargin() {\n        String path = String.format(\"/sapi/v1/sub-account/margin/account?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().marginAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginAccount.java", "class_name": "TestMarginAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginAccount.java.TestMarginAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java.TestMarginAccountSummary.[void]testMarginSummary()", "name": "testMarginSummary", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMarginSummary()", "original_string": "    @Test\n    public void testMarginSummary() {\n        String path = \"/sapi/v1/sub-account/margin/accountSummary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().marginAccountSummary(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java", "class_name": "TestMarginAccountSummary", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginAccountSummary.java.TestMarginAccountSummary", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer.[void]testGetFuturesInternalTransferWithoutParameters()", "name": "testGetFuturesInternalTransferWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFuturesInternalTransferWithoutParameters()", "original_string": "    @Test\n    public void testGetFuturesInternalTransferWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/futures/internalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().getFuturesInternalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java", "class_name": "TestGetFuturesInternalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer.[void]testGetFuturesInternalTransfer()", "name": "testGetFuturesInternalTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFuturesInternalTransfer()", "original_string": "    @Test\n    public void testGetFuturesInternalTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/futures/internalTransfer?email=%s&futuresType=1&startTime=100001&endTime=100002&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"futuresType\", futuresType);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().getFuturesInternalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java", "class_name": "TestGetFuturesInternalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestGetFuturesInternalTransfer.java.TestGetFuturesInternalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer.[void]testUniversalTransferWithoutParameters()", "name": "testUniversalTransferWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransferWithoutParameters()", "original_string": "    @Test\n    public void testUniversalTransferWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/universalTransfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().universalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java", "class_name": "TestUniversalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer.[void]testUniversalTransfer()", "name": "testUniversalTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransfer()", "original_string": "    @Test\n    public void testUniversalTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/universalTransfer?fromEmail=%s&toEmail=%s&fromAccountType=SPOT&toAccountType=USDT_FUTURE&asset=BNB&amount=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"fromAccountType\", \"SPOT\");\n        parameters.put(\"toAccountType\", \"USDT_FUTURE\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().universalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java", "class_name": "TestUniversalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestUniversalTransfer.java.TestUniversalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestAccountStatus.java.TestAccountStatus.[void]testAccountStatus()", "name": "testAccountStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountStatus()", "original_string": "    @Test\n    public void testAccountStatus() {\n        String path = String.format(\"/sapi/v1/sub-account/status?email=%s\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().accountStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestAccountStatus.java", "class_name": "TestAccountStatus", "class_uri": "src/test/java/unit/spot/subaccount/TestAccountStatus.java.TestAccountStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer.[void]testMarginTransferWithoutParameters()", "name": "testMarginTransferWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMarginTransferWithoutParameters()", "original_string": "    @Test\n    public void testMarginTransferWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/margin/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().marginTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java", "class_name": "TestMarginTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer.[void]testMarginTransfer()", "name": "testMarginTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMarginTransfer()", "original_string": "    @Test\n    public void testMarginTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/margin/transfer?email=%s&asset=BNB&amount=0.1&type=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().marginTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java", "class_name": "TestMarginTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestMarginTransfer.java.TestMarginTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java.TestSpotAccountSummary.[void]testSpotAccountSummary()", "name": "testSpotAccountSummary", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSpotAccountSummary()", "original_string": "    @Test\n    public void testSpotAccountSummary() {\n        String path = String.format(\"/sapi/v1/sub-account/spotSummary?email=%s&page=1&size=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"page\", page);\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().spotAccountSummary(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java", "class_name": "TestSpotAccountSummary", "class_uri": "src/test/java/unit/spot/subaccount/TestSpotAccountSummary.java.TestSpotAccountSummary", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount.[void]testSubToSubWithoutParameters()", "name": "testSubToSubWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubToSubWithoutParameters()", "original_string": "    @Test\n    public void testSubToSubWithoutParameters() {\n        String path = \"/sapi/v1/sub-account/transfer/subToSub\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().subAccountToSubAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java", "class_name": "TestSubAccountToSubAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount.[void]testSubToSub()", "name": "testSubToSub", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubToSub()", "original_string": "    @Test\n    public void testSubToSub() {\n        String path = String.format(\"/sapi/v1/sub-account/transfer/subToSub?toEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"toEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().subAccountToSubAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java", "class_name": "TestSubAccountToSubAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestSubAccountToSubAccount.java.TestSubAccountToSubAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer.[void]testUniversalTransfer()", "name": "testUniversalTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransfer()", "original_string": "    @Test\n    public void testUniversalTransfer() {\n        String path = String.format(\"/sapi/v1/sub-account/universalTransfer?fromEmail=%s&toEmail=%s&startTime=100001&endTime=100002&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().queryUniversalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java", "class_name": "TestQueryUniversalTransfer", "class_uri": "src/test/java/unit/spot/subaccount/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot.[void]testManagedSubAccountSnapshotWithoutParameters()", "name": "testManagedSubAccountSnapshotWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubAccountSnapshotWithoutParameters()", "original_string": "    @Test\n    public void testManagedSubAccountSnapshotWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/accountSnapshot\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubAccountSnapshot(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java", "class_name": "TestManagedSubAccountSnapshot", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot.[void]testManagedSubAccountSnapshot()", "name": "testManagedSubAccountSnapshot", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubAccountSnapshot()", "original_string": "    @Test\n    public void testManagedSubAccountSnapshot() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/accountSnapshot?email=%s&type=SPOT\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"type\", \"SPOT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubAccountSnapshot(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java", "class_name": "TestManagedSubAccountSnapshot", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubAccountSnapshot.java.TestManagedSubAccountSnapshot", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java.TestSpotTransferHistory.[void]testSpotTransferHistory()", "name": "testSpotTransferHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSpotTransferHistory()", "original_string": "    @Test\n    public void testSpotTransferHistory() {\n        String path = String.format(\"/sapi/v1/sub-account/sub/transfer/history?fromEmail=%s&toEmail=%s&startTime=100001&endTime=100002&page=1&limit=1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"), UrlBuilder.urlEncode(\"bob@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"toEmail\", \"bob@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"page\", page);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().spotTransferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java", "class_name": "TestSpotTransferHistory", "class_uri": "src/test/java/unit/spot/subaccount/TestSpotTransferHistory.java.TestSpotTransferHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw.[void]testManagedSubWithdrawWithoutParameters()", "name": "testManagedSubWithdrawWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubWithdrawWithoutParameters()", "original_string": "    @Test\n    public void testManagedSubWithdrawWithoutParameters() {\n        String path = \"/sapi/v1/managed-subaccount/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().managedSubWithdraw(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java", "class_name": "TestManagedSubWithdraw", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw.[void]testManagedSubWithdraw()", "name": "testManagedSubWithdraw", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testManagedSubWithdraw()", "original_string": "    @Test\n    public void testManagedSubWithdraw() {\n        String path = String.format(\"/sapi/v1/managed-subaccount/withdraw?fromEmail=%s&asset=BNB&amount=0.1\",\n                UrlBuilder.urlEncode(\"alice@test.com\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromEmail\", \"alice@test.com\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().managedSubWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java", "class_name": "TestManagedSubWithdraw", "class_uri": "src/test/java/unit/spot/subaccount/TestManagedSubWithdraw.java.TestManagedSubWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount.[void]testCreateVirtualSubAccountWithoutString()", "name": "testCreateVirtualSubAccountWithoutString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateVirtualSubAccountWithoutString()", "original_string": "    @Test\n    public void testCreateVirtualSubAccountWithoutString() {\n        String path = \"/sapi/v1/sub-account/virtualSubAccount\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSubAccount().createVirtualSubAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java", "class_name": "TestCreateVirtualSubAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount.[void]testCreateVirtualSubAccount()", "name": "testCreateVirtualSubAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateVirtualSubAccount()", "original_string": "    @Test\n    public void testCreateVirtualSubAccount() {\n        String path = \"/sapi/v1/sub-account/virtualSubAccount?subAccountString=sub.account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"subAccountString\", \"sub.account\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSubAccount().createVirtualSubAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java", "class_name": "TestCreateVirtualSubAccount", "class_uri": "src/test/java/unit/spot/subaccount/TestCreateVirtualSubAccount.java.TestCreateVirtualSubAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier.[void]testIsolatedMarginTierWithoutParameters()", "name": "testIsolatedMarginTierWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsolatedMarginTierWithoutParameters()", "original_string": "    @Test\n    public void testIsolatedMarginTierWithoutParameters() {\n        String path = \"/sapi/v1/margin/isolatedMarginTier\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().isolatedMarginTier(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java", "class_name": "TestIsolatedMarginTier", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier.[void]testIsolatedMarginTier()", "name": "testIsolatedMarginTier", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsolatedMarginTier()", "original_string": "    @Test\n    public void testIsolatedMarginTier() {\n        String path = \"/sapi/v1/margin/isolatedMarginTier?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().isolatedMarginTier(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java", "class_name": "TestIsolatedMarginTier", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedMarginTier.java.TestIsolatedMarginTier", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetOcoOrder.java.TestGetOcoOrder.[void]testGetOcoOrder()", "name": "testGetOcoOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOcoOrder()", "original_string": "    @Test\n    public void testGetOcoOrder() {\n        String path = \"/sapi/v1/margin/orderList?symbol=BNBUSDT&orderListId=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderListId\", orderListId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOcoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetOcoOrder.java", "class_name": "TestGetOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestGetOcoOrder.java.TestGetOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java.TestAllIsolatedSymbols.[void]testAllIsolatedSymbols()", "name": "testAllIsolatedSymbols", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllIsolatedSymbols()", "original_string": "    @Test\n    public void testAllIsolatedSymbols() {\n        String path = \"/sapi/v1/margin/isolated/allPairs\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getAllIsolatedSymbols(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java", "class_name": "TestAllIsolatedSymbols", "class_uri": "src/test/java/unit/spot/margin/TestAllIsolatedSymbols.java.TestAllIsolatedSymbols", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java.TestGetMarginOpenOrders.[void]testGetMarginOpenOrders()", "name": "testGetMarginOpenOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetMarginOpenOrders()", "original_string": "    @Test\n    public void testGetMarginOpenOrders() {\n        String path = \"/sapi/v1/margin/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java", "class_name": "TestGetMarginOpenOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetMarginOpenOrders.java.TestGetMarginOpenOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders.[void]testGetAllMarginOrdersWithoutParameters()", "name": "testGetAllMarginOrdersWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAllMarginOrdersWithoutParameters()", "original_string": "    @Test\n    public void testGetAllMarginOrdersWithoutParameters() {\n        String path = \"/sapi/v1/margin/allOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().getAllOrders(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java", "class_name": "TestGetAllMarginOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders.[void]testGetAllMarginOrders()", "name": "testGetAllMarginOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAllMarginOrders()", "original_string": "    @Test\n    public void testGetAllMarginOrders() {\n        String path = \"/sapi/v1/margin/allOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getAllOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java", "class_name": "TestGetAllMarginOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetAllMarginOrders.java.TestGetAllMarginOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestOrderRateLimit.java.TestOrderRateLimit.[void]testOrderRateLimit()", "name": "testOrderRateLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrderRateLimit()", "original_string": "    @Test\n    public void testOrderRateLimit() {\n        String path = \"/sapi/v1/margin/rateLimit/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().orderRateLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestOrderRateLimit.java", "class_name": "TestOrderRateLimit", "class_uri": "src/test/java/unit/spot/margin/TestOrderRateLimit.java.TestOrderRateLimit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow.[void]testMaxBorrowWithoutParameters()", "name": "testMaxBorrowWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxBorrowWithoutParameters()", "original_string": "    @Test\n    public void testMaxBorrowWithoutParameters() {\n        String path = \"/sapi/v1/margin/maxBorrowable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().maxBorrow(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMaxBorrow.java", "class_name": "TestMaxBorrow", "class_uri": "src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow.[void]testMaxBorrow()", "name": "testMaxBorrow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxBorrow()", "original_string": "    @Test\n    public void testMaxBorrow() {\n        String path = \"/sapi/v1/margin/maxBorrowable?asset=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().maxBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMaxBorrow.java", "class_name": "TestMaxBorrow", "class_uri": "src/test/java/unit/spot/margin/TestMaxBorrow.java.TestMaxBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedAccount.java.TestIsolatedAccount.[void]testIsolatedAccount()", "name": "testIsolatedAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsolatedAccount()", "original_string": "    @Test\n    public void testIsolatedAccount() {\n        String path = String.format(\"/sapi/v1/margin/isolated/account?symbols=%s\",\n                UrlBuilder.urlEncode(\"BNBUSDT,BTCUSDT\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", \"BNBUSDT,BTCUSDT\");\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().isolatedAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedAccount.java", "class_name": "TestIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedAccount.java.TestIsolatedAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable.[void]testMaxTransferableWithoutParameters()", "name": "testMaxTransferableWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxTransferableWithoutParameters()", "original_string": "    @Test\n    public void testMaxTransferableWithoutParameters() {\n        String path = \"/sapi/v1/margin/maxTransferable\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().maxTransferable(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMaxTransferable.java", "class_name": "TestMaxTransferable", "class_uri": "src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable.[void]testMaxTransferable()", "name": "testMaxTransferable", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMaxTransferable()", "original_string": "    @Test\n    public void testMaxTransferable() {\n        String path = \"/sapi/v1/margin/maxTransferable?asset=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().maxTransferable(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMaxTransferable.java", "class_name": "TestMaxTransferable", "class_uri": "src/test/java/unit/spot/margin/TestMaxTransferable.java.TestMaxTransferable", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestLeverageBracket.java.TestLeverageBracket.[void]testLeverageBracket()", "name": "testLeverageBracket", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLeverageBracket()", "original_string": "    @Test\n    public void testLeverageBracket() {\n        String path = \"/sapi/v1/margin/leverageBracket\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().leverageBracket();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestLeverageBracket.java", "class_name": "TestLeverageBracket", "class_uri": "src/test/java/unit/spot/margin/TestLeverageBracket.java.TestLeverageBracket", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java.TestSmallLiabilityAssets.[void]testSmallLiabilityAssets()", "name": "testSmallLiabilityAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSmallLiabilityAssets()", "original_string": "    @Test\n    public void testSmallLiabilityAssets() {\n        String path = \"/sapi/v1/margin/exchange-small-liability\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().smallLiabilityAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java", "class_name": "TestSmallLiabilityAssets", "class_uri": "src/test/java/unit/spot/margin/TestSmallLiabilityAssets.java.TestSmallLiabilityAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestTransferHistory.java.TestTransferHistory.[void]testTransferHistory()", "name": "testTransferHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransferHistory()", "original_string": "    @Test\n    public void testTransferHistory() {\n        String path = \"/sapi/v1/margin/transfer?asset=BNB&type=ROLL_IN&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"type\", \"ROLL_IN\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().transferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestTransferHistory.java", "class_name": "TestTransferHistory", "class_uri": "src/test/java/unit/spot/margin/TestTransferHistory.java.TestTransferHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder.[void]testCancelAllMarginOcoOrderWithoutParameters()", "name": "testCancelAllMarginOcoOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelAllMarginOcoOrderWithoutParameters()", "original_string": "    @Test\n    public void testCancelAllMarginOcoOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().cancelOcoOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java", "class_name": "TestCancelMarginOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder.[void]testCancelAllMarginOcoOrder()", "name": "testCancelAllMarginOcoOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelAllMarginOcoOrder()", "original_string": "    @Test\n    public void testCancelAllMarginOcoOrder() {\n        String path = \"/sapi/v1/margin/orderList?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().cancelOcoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java", "class_name": "TestCancelMarginOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestCancelMarginOcoOrder.java.TestCancelMarginOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder.[void]testMarginOrderWithoutParameters()", "name": "testMarginOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMarginOrderWithoutParameters()", "original_string": "    @Test\n    public void testMarginOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().getOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetMarginOrder.java", "class_name": "TestGetMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder.[void]testMarginOrder()", "name": "testMarginOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMarginOrder()", "original_string": "    @Test\n    public void testMarginOrder() {\n        String path = \"/sapi/v1/margin/order?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetMarginOrder.java", "class_name": "TestGetMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestGetMarginOrder.java.TestGetMarginOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate.[void]testGetAFutureHourlyInterestRateWithoutParameters()", "name": "testGetAFutureHourlyInterestRateWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAFutureHourlyInterestRateWithoutParameters()", "original_string": "    @Test\n    public void testGetAFutureHourlyInterestRateWithoutParameters() {\n        String path = \"/sapi/v1/margin/next-hourly-interest-rate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().nextHourlyInterestRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java", "class_name": "TestNextHourlyInterestRate", "class_uri": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate.[void]testGetAFutureHourlyInterestRate()", "name": "testGetAFutureHourlyInterestRate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAFutureHourlyInterestRate()", "original_string": "    @Test\n    public void testGetAFutureHourlyInterestRate() {\n        String path = \"/sapi/v1/margin/next-hourly-interest-rate?assets=BTC&isIsolated=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assets\", \"BTC\");\n        parameters.put(\"isIsolated\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().nextHourlyInterestRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java", "class_name": "TestNextHourlyInterestRate", "class_uri": "src/test/java/unit/spot/margin/TestNextHourlyInterestRate.java.TestNextHourlyInterestRate", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java.TestIsolatedMarginData.[void]testIsolatedMarginData()", "name": "testIsolatedMarginData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsolatedMarginData()", "original_string": "    @Test\n    public void testIsolatedMarginData() {\n        String path = \"/sapi/v1/margin/isolatedMarginData?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().isolatedMarginData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java", "class_name": "TestIsolatedMarginData", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedMarginData.java.TestIsolatedMarginData", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders.[void]testCancelAllMarginOrdersWithoutParameters()", "name": "testCancelAllMarginOrdersWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelAllMarginOrdersWithoutParameters()", "original_string": "    @Test\n    public void testCancelAllMarginOrdersWithoutParameters() {\n        String path = \"/sapi/v1/margin/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().cancelOpenOrders(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java", "class_name": "TestCancelAllMarginOrders", "class_uri": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders.[void]testCancelAllMarginOrders()", "name": "testCancelAllMarginOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelAllMarginOrders()", "original_string": "    @Test\n    public void testCancelAllMarginOrders() {\n        String path = \"/sapi/v1/margin/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().cancelOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java", "class_name": "TestCancelAllMarginOrders", "class_uri": "src/test/java/unit/spot/margin/TestCancelAllMarginOrders.java.TestCancelAllMarginOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAllAssets.java.TestAllAssets.[void]testAllAssets()", "name": "testAllAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllAssets()", "original_string": "    @Test\n    public void testAllAssets() {\n        String path = \"/sapi/v1/margin/allAssets\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().allAssets();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAllAssets.java", "class_name": "TestAllAssets", "class_uri": "src/test/java/unit/spot/margin/TestAllAssets.java.TestAllAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestTrades.java.TestTrades.[void]testTradesWithoutParameters()", "name": "testTradesWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithoutParameters()", "original_string": "    @Test\n    public void testTradesWithoutParameters() {\n        String path = \"/sapi/v1/margin/myTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().trades(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestTrades.java", "class_name": "TestTrades", "class_uri": "src/test/java/unit/spot/margin/TestTrades.java.TestTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestTrades.java.TestTrades.[void]testTrades()", "name": "testTrades", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTrades()", "original_string": "    @Test\n    public void testTrades() {\n        String path = \"/sapi/v1/margin/myTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().trades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestTrades.java", "class_name": "TestTrades", "class_uri": "src/test/java/unit/spot/margin/TestTrades.java.TestTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java.TestForceLiquidationRec.[void]testForceLiquidationRec()", "name": "testForceLiquidationRec", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testForceLiquidationRec()", "original_string": "    @Test\n    public void testForceLiquidationRec() {\n        String path = \"/sapi/v1/margin/forceLiquidationRec?startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().forceLiquidationRec(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java", "class_name": "TestForceLiquidationRec", "class_uri": "src/test/java/unit/spot/margin/TestForceLiquidationRec.java.TestForceLiquidationRec", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestInterestHistory.java.TestInterestHistory.[void]testInterestHistory()", "name": "testInterestHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInterestHistory()", "original_string": "    @Test\n    public void testInterestHistory() {\n        String path = \"/sapi/v1/margin/interestHistory?asset=BNB&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().interestHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestInterestHistory.java", "class_name": "TestInterestHistory", "class_uri": "src/test/java/unit/spot/margin/TestInterestHistory.java.TestInterestHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex.[void]testPriceIndexWithoutParameters()", "name": "testPriceIndexWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPriceIndexWithoutParameters()", "original_string": "    @Test\n    public void testPriceIndexWithoutParameters() {\n        String path = \"/sapi/v1/margin/priceIndex\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().priceIndex(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestPriceIndex.java", "class_name": "TestPriceIndex", "class_uri": "src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex.[void]testPriceIndex()", "name": "testPriceIndex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPriceIndex()", "original_string": "    @Test\n    public void testPriceIndex() {\n        String path = \"/sapi/v1/margin/priceIndex?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().priceIndex(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestPriceIndex.java", "class_name": "TestPriceIndex", "class_uri": "src/test/java/unit/spot/margin/TestPriceIndex.java.TestPriceIndex", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow.[void]testCapitalFlowWithoutParameters()", "name": "testCapitalFlowWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCapitalFlowWithoutParameters()", "original_string": "    @Test\n    public void testCapitalFlowWithoutParameters() {\n        String path = \"/sapi/v1/margin/capital-flow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().capitalFlow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCapitalFlow.java", "class_name": "TestCapitalFlow", "class_uri": "src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow.[void]testCapitalFlow()", "name": "testCapitalFlow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCapitalFlow()", "original_string": "    @Test\n    public void testCapitalFlow() {\n        String path = \"/sapi/v1/margin/capital-flow?asset=USDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().capitalFlow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCapitalFlow.java", "class_name": "TestCapitalFlow", "class_uri": "src/test/java/unit/spot/margin/TestCapitalFlow.java.TestCapitalFlow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory.[void]testSmallLiabilityExchangeHistoryWithoutParameters()", "name": "testSmallLiabilityExchangeHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSmallLiabilityExchangeHistoryWithoutParameters()", "original_string": "    @Test\n    public void testSmallLiabilityExchangeHistoryWithoutParameters() {\n        String path = \"/sapi/v1/margin/exchange-small-liability-history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().smallLiabilityExchangeHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java", "class_name": "TestSmallLiabilityExchangeHistory", "class_uri": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory.[void]testSmallLiabilityExchangeHistory()", "name": "testSmallLiabilityExchangeHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSmallLiabilityExchangeHistory()", "original_string": "    @Test\n    public void testSmallLiabilityExchangeHistory() {\n        String path = \"/sapi/v1/margin/exchange-small-liability-history?current=1&size=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"current\", current);\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().smallLiabilityExchangeHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java", "class_name": "TestSmallLiabilityExchangeHistory", "class_uri": "src/test/java/unit/spot/margin/TestSmallLiabilityExchangeHistory.java.TestSmallLiabilityExchangeHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder.[void]testNewMarginOrderWithoutParameters()", "name": "testNewMarginOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewMarginOrderWithoutParameters()", "original_string": "    @Test\n    public void testNewMarginOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().newOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNewMarginOrder.java", "class_name": "TestNewMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder.[void]testNewMarginOrder()", "name": "testNewMarginOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewMarginOrder()", "original_string": "    @Test\n    public void testNewMarginOrder() {\n        String path = \"/sapi/v1/margin/order?symbol=BNBUSDT&side=BUY&type=MARKET\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().newOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNewMarginOrder.java", "class_name": "TestNewMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestNewMarginOrder.java.TestNewMarginOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java.TestCrossMarginCollateralRatio.[void]testCrossMarginCollateralRatio()", "name": "testCrossMarginCollateralRatio", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCrossMarginCollateralRatio()", "original_string": "    @Test\n    public void testCrossMarginCollateralRatio() {\n        String path = \"/sapi/v1/margin/crossMarginCollateralRatio\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().crossMarginCollateralRatio();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java", "class_name": "TestCrossMarginCollateralRatio", "class_uri": "src/test/java/unit/spot/margin/TestCrossMarginCollateralRatio.java.TestCrossMarginCollateralRatio", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java.TestIsolatedAccountLimit.[void]testIsolatedAccountLimit()", "name": "testIsolatedAccountLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIsolatedAccountLimit()", "original_string": "    @Test\n    public void testIsolatedAccountLimit() {\n        String path = \"/sapi/v1/margin/isolated/accountLimit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getIsolatedAccountLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java", "class_name": "TestIsolatedAccountLimit", "class_uri": "src/test/java/unit/spot/margin/TestIsolatedAccountLimit.java.TestIsolatedAccountLimit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetBnbBurn.java.TestGetBnbBurn.[void]testGetBnbBurn()", "name": "testGetBnbBurn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetBnbBurn()", "original_string": "    @Test\n    public void testGetBnbBurn() {\n        String path = \"/sapi/v1/bnbBurn\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getBnbBurn(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetBnbBurn.java", "class_name": "TestGetBnbBurn", "class_uri": "src/test/java/unit/spot/margin/TestGetBnbBurn.java.TestGetBnbBurn", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount.[void]testEnableIsolatedAccountWithoutParameters()", "name": "testEnableIsolatedAccountWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableIsolatedAccountWithoutParameters()", "original_string": "    @Test\n    public void testEnableIsolatedAccountWithoutParameters() {\n        String path = \"/sapi/v1/margin/isolated/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().enableIsolatedAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java", "class_name": "TestEnableIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount.[void]testEnableIsolatedAccount()", "name": "testEnableIsolatedAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableIsolatedAccount()", "original_string": "    @Test\n    public void testEnableIsolatedAccount() {\n        String path = \"/sapi/v1/margin/isolated/account?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().enableIsolatedAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java", "class_name": "TestEnableIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestEnableIsolatedAccount.java.TestEnableIsolatedAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestMarginAccount.java.TestMarginAccount.[void]testMarginAccount()", "name": "testMarginAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMarginAccount()", "original_string": "    @Test\n    public void testMarginAccount() {\n        String path = \"/sapi/v1/margin/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().account(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestMarginAccount.java", "class_name": "TestMarginAccount", "class_uri": "src/test/java/unit/spot/margin/TestMarginAccount.java.TestMarginAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java.TestGetAllMarginOcoOrders.[void]testGetAllMarginOcoOrders()", "name": "testGetAllMarginOcoOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAllMarginOcoOrders()", "original_string": "    @Test\n    public void testGetAllMarginOcoOrders() {\n        String path = \"/sapi/v1/margin/allOrderList?symbol=BNBUSDT&fromId=1&startTime=12345678&endTime=12345679\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"fromId\", fromId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getAllOcoOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java", "class_name": "TestGetAllMarginOcoOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetAllMarginOcoOrders.java.TestGetAllMarginOcoOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestBnbBurn.java.TestBnbBurn.[void]testBnbBurn()", "name": "testBnbBurn", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBnbBurn()", "original_string": "    @Test\n    public void testBnbBurn() {\n        String path = \"/sapi/v1/bnbBurn?spotBNBBurn=true&interestBNBBurn=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"spotBNBBurn\", \"true\");\n        parameters.put(\"interestBNBBurn\", \"true\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().bnbBurn(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestBnbBurn.java", "class_name": "TestBnbBurn", "class_uri": "src/test/java/unit/spot/margin/TestBnbBurn.java.TestBnbBurn", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder.[void]testNewMarginOcoOrderWithoutParameters()", "name": "testNewMarginOcoOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewMarginOcoOrderWithoutParameters()", "original_string": "    @Test\n    public void testNewMarginOcoOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order/oco\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().ocoOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java", "class_name": "TestNewMarginOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder.[void]testNewMarginOcoOrder()", "name": "testNewMarginOcoOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewMarginOcoOrder()", "original_string": "    @Test\n    public void testNewMarginOcoOrder() {\n        String path = \"/sapi/v1/margin/order/oco?symbol=BNBUSDT&side=BUY&quantity=0.1&price=350&stopPrice=400\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"price\", price);\n        parameters.put(\"stopPrice\", stopPrice);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().ocoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java", "class_name": "TestNewMarginOcoOrder", "class_uri": "src/test/java/unit/spot/margin/TestNewMarginOcoOrder.java.TestNewMarginOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java.TestExchangeSmallLiability.[void]testExchangeSmallLiability()", "name": "testExchangeSmallLiability", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeSmallLiability()", "original_string": "    @Test\n    public void testExchangeSmallLiability() {\n        String path = \"/sapi/v1/margin/exchange-small-liability?assetNames=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"assetNames\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().exchangeSmallLiability(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java", "class_name": "TestExchangeSmallLiability", "class_uri": "src/test/java/unit/spot/margin/TestExchangeSmallLiability.java.TestExchangeSmallLiability", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory.[void]testAvailableInventoryWithoutParameters()", "name": "testAvailableInventoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAvailableInventoryWithoutParameters()", "original_string": "    @Test\n    public void testAvailableInventoryWithoutParameters() {\n        String path = \"/sapi/v1/margin/available-inventory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().availableInventory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAvailableInventory.java", "class_name": "TestAvailableInventory", "class_uri": "src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory.[void]testAvailableInventory()", "name": "testAvailableInventory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAvailableInventory()", "original_string": "    @Test\n    public void testAvailableInventory() {\n        String path = \"/sapi/v1/margin/available-inventory?type=MARGIN\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"MARGIN\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().availableInventory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAvailableInventory.java", "class_name": "TestAvailableInventory", "class_uri": "src/test/java/unit/spot/margin/TestAvailableInventory.java.TestAvailableInventory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestDelistSchedule.java.TestDelistSchedule.[void]testDelistSchedule()", "name": "testDelistSchedule", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDelistSchedule()", "original_string": "    @Test\n    public void testDelistSchedule() {\n        String path = \"/sapi/v1/margin/delist-schedule\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().delistSchedule(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestDelistSchedule.java", "class_name": "TestDelistSchedule", "class_uri": "src/test/java/unit/spot/margin/TestDelistSchedule.java.TestDelistSchedule", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCrossMarginData.java.TestCrossMarginData.[void]testCrossMarginData()", "name": "testCrossMarginData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCrossMarginData()", "original_string": "    @Test\n    public void testCrossMarginData() {\n        String path = \"/sapi/v1/margin/crossMarginData?coin=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().crossMarginData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCrossMarginData.java", "class_name": "TestCrossMarginData", "class_uri": "src/test/java/unit/spot/margin/TestCrossMarginData.java.TestCrossMarginData", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory.[void]testInterestRateHistoryWithoutParameters()", "name": "testInterestRateHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInterestRateHistoryWithoutParameters()", "original_string": "    @Test\n    public void testInterestRateHistoryWithoutParameters() {\n        String path = \"/sapi/v1/margin/interestRateHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().interestRateHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestInterestRateHistory.java", "class_name": "TestInterestRateHistory", "class_uri": "src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory.[void]testInterestRateHistory()", "name": "testInterestRateHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInterestRateHistory()", "original_string": "    @Test\n    public void testInterestRateHistory() {\n        String path = \"/sapi/v1/margin/interestRateHistory?asset=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().interestRateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestInterestRateHistory.java", "class_name": "TestInterestRateHistory", "class_uri": "src/test/java/unit/spot/margin/TestInterestRateHistory.java.TestInterestRateHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage.[void]testAdjustCrossMarginMaxLeverageWithoutParameters()", "name": "testAdjustCrossMarginMaxLeverageWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdjustCrossMarginMaxLeverageWithoutParameters()", "original_string": "    @Test\n    public void testAdjustCrossMarginMaxLeverageWithoutParameters() {\n        String path = \"/sapi/v1/margin/max-leverage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().adjustCrossMarginMaxLeverage(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java", "class_name": "TestAdjustCrossMarginMaxLeverage", "class_uri": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage.[void]testAdjustCrossMarginMaxLeverage()", "name": "testAdjustCrossMarginMaxLeverage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAdjustCrossMarginMaxLeverage()", "original_string": "    @Test\n    public void testAdjustCrossMarginMaxLeverage() {\n        String path = \"/sapi/v1/margin/max-leverage?maxLeverage=3\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"maxLeverage\", leverage);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().adjustCrossMarginMaxLeverage(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java", "class_name": "TestAdjustCrossMarginMaxLeverage", "class_uri": "src/test/java/unit/spot/margin/TestAdjustCrossMarginMaxLeverage.java.TestAdjustCrossMarginMaxLeverage", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java.TestGetMarginOcoOpenOrders.[void]testGetMarginOcoOpenOrders()", "name": "testGetMarginOcoOpenOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetMarginOcoOpenOrders()", "original_string": "    @Test\n    public void testGetMarginOcoOpenOrders() {\n        String path = \"/sapi/v1/margin/openOrderList?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().getOcoOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java", "class_name": "TestGetMarginOcoOpenOrders", "class_uri": "src/test/java/unit/spot/margin/TestGetMarginOcoOpenOrders.java.TestGetMarginOcoOpenOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestTradeCoeff.java.TestTradeCoeff.[void]testTradeCoeff()", "name": "testTradeCoeff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradeCoeff()", "original_string": "    @Test\n    public void testTradeCoeff() {\n        String path = \"/sapi/v1/margin/tradeCoeff\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().tradeCoeff(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestTradeCoeff.java", "class_name": "TestTradeCoeff", "class_uri": "src/test/java/unit/spot/margin/TestTradeCoeff.java.TestTradeCoeff", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder.[void]testCancelMarginOrderWithoutParameters()", "name": "testCancelMarginOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelMarginOrderWithoutParameters()", "original_string": "    @Test\n    public void testCancelMarginOrderWithoutParameters() {\n        String path = \"/sapi/v1/margin/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().cancelOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java", "class_name": "TestCancelMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder.[void]testCancelMarginOcoOrder()", "name": "testCancelMarginOcoOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelMarginOcoOrder()", "original_string": "    @Test\n    public void testCancelMarginOcoOrder() {\n        String path = \"/sapi/v1/margin/order?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().cancelOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java", "class_name": "TestCancelMarginOrder", "class_uri": "src/test/java/unit/spot/margin/TestCancelMarginOrder.java.TestCancelMarginOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestAllPairs.java.TestAllPairs.[void]testAllPairs()", "name": "testAllPairs", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllPairs()", "original_string": "    @Test\n    public void testAllPairs() {\n        String path = \"/sapi/v1/margin/allPairs\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().allPairs();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestAllPairs.java", "class_name": "TestAllPairs", "class_uri": "src/test/java/unit/spot/margin/TestAllPairs.java.TestAllPairs", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount.[void]testDisableIsolatedAccountWithoutParameters()", "name": "testDisableIsolatedAccountWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisableIsolatedAccountWithoutParameters()", "original_string": "    @Test\n    public void testDisableIsolatedAccountWithoutParameters() {\n        String path = \"/sapi/v1/margin/isolated/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMargin().disableIsolatedAccount(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java", "class_name": "TestDisableIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount.[void]testDisableIsolatedAccount()", "name": "testDisableIsolatedAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisableIsolatedAccount()", "original_string": "    @Test\n    public void testDisableIsolatedAccount() {\n        String path = \"/sapi/v1/margin/isolated/account?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMargin().disableIsolatedAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java", "class_name": "TestDisableIsolatedAccount", "class_uri": "src/test/java/unit/spot/margin/TestDisableIsolatedAccount.java.TestDisableIsolatedAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java.TestAutoRepayFuturesStatus.[void]testAutoRepayFuturesStatus()", "name": "testAutoRepayFuturesStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAutoRepayFuturesStatus()", "original_string": "    @Test\n    public void testAutoRepayFuturesStatus() {\n        String path = \"/sapi/v1/portfolio/repay-futures-switch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().autoRepayFuturesStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java", "class_name": "TestAutoRepayFuturesStatus", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAutoRepayFuturesStatus.java.TestAutoRepayFuturesStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java.TestAssetIndexPrice.[void]testQueryPortfolioMarginAssetIndexPrice()", "name": "testQueryPortfolioMarginAssetIndexPrice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueryPortfolioMarginAssetIndexPrice()", "original_string": "    @Test\n    public void testQueryPortfolioMarginAssetIndexPrice() {\n        String path = \"/sapi/v1/portfolio/asset-index-price\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().assetIndexPrice(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java", "class_name": "TestAssetIndexPrice", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAssetIndexPrice.java.TestAssetIndexPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer.[void]testBnbTransferWithoutParameters()", "name": "testBnbTransferWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBnbTransferWithoutParameters()", "original_string": "    @Test\n    public void testBnbTransferWithoutParameters() {\n        String path = \"/sapi/v1/portfolio/bnb-transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createPortfolioMargin().bnbTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java", "class_name": "TestBnbTransfer", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer.[void]testBnbTransfer()", "name": "testBnbTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBnbTransfer()", "original_string": "    @Test\n    public void testBnbTransfer() {\n        String path = \"/sapi/v1/portfolio/bnb-transfer?transferSide=TO_UM&amount=1.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transferSide\", \"TO_UM\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().bnbTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java", "class_name": "TestBnbTransfer", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestBnbTransfer.java.TestBnbTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java.TestGetAccount.[void]testGetAccount()", "name": "testGetAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAccount()", "original_string": "    @Test\n    public void testGetAccount() {\n        String path = \"/sapi/v1/portfolio/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().getAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java", "class_name": "TestGetAccount", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestGetAccount.java.TestGetAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java.TestCollateralRate.[void]testCollateralRate()", "name": "testCollateralRate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRate()", "original_string": "    @Test\n    public void testCollateralRate() {\n        String path = \"/sapi/v1/portfolio/collateralRate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().collateralRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java", "class_name": "TestCollateralRate", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestCollateralRate.java.TestCollateralRate", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java.TestBankruptcyLoanRecord.[void]testBankruptcyLoanRecord()", "name": "testBankruptcyLoanRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBankruptcyLoanRecord()", "original_string": "    @Test\n    public void testBankruptcyLoanRecord() {\n        String path = \"/sapi/v1/portfolio/pmLoan\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().bankruptcyLoanRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java", "class_name": "TestBankruptcyLoanRecord", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestBankruptcyLoanRecord.java.TestBankruptcyLoanRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestInterestHistory.java.TestInterestHistory.[void]testInterestHistory()", "name": "testInterestHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testInterestHistory()", "original_string": "    @Test\n    public void testInterestHistory() {\n        String path = \"/sapi/v1/portfolio/interest-history?asset=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().interestHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestInterestHistory.java", "class_name": "TestInterestHistory", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestInterestHistory.java.TestInterestHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java.TestRepayFutures.[void]testRepayFutures()", "name": "testRepayFutures", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepayFutures()", "original_string": "    @Test\n    public void testRepayFutures() {\n        String path = \"/sapi/v1/portfolio/repay-futures-negative-balance\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().repayFutures(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java", "class_name": "TestRepayFutures", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestRepayFutures.java.TestRepayFutures", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection.[void]testAssetCollectionWithoutParameters()", "name": "testAssetCollectionWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetCollectionWithoutParameters()", "original_string": "    @Test\n    public void testAssetCollectionWithoutParameters() {\n        String path = \"/sapi/v1/portfolio/asset-collection\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createPortfolioMargin().assetCollection(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java", "class_name": "TestAssetCollection", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection.[void]testAssetCollection()", "name": "testAssetCollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetCollection()", "original_string": "    @Test\n    public void testAssetCollection() {\n        String path = \"/sapi/v1/portfolio/asset-collection?asset=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().assetCollection(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java", "class_name": "TestAssetCollection", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAssetCollection.java.TestAssetCollection", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java.TestAssetLeverage.[void]testAssetLeverage()", "name": "testAssetLeverage", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetLeverage()", "original_string": "    @Test\n    public void testAssetLeverage() {\n        String path = \"/sapi/v1/portfolio/margin-asset-leverage\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().assetLeverage();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java", "class_name": "TestAssetLeverage", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAssetLeverage.java.TestAssetLeverage", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures.[void]testSwitchAutoRepayFuturesWithoutParameters()", "name": "testSwitchAutoRepayFuturesWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchAutoRepayFuturesWithoutParameters()", "original_string": "    @Test\n    public void testSwitchAutoRepayFuturesWithoutParameters() {\n        String path = \"/sapi/v1/portfolio/repay-futures-switch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createPortfolioMargin().switchAutoRepayFutures(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java", "class_name": "TestSwitchAutoRepayFutures", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures.[void]testSwitchAutoRepayFutures()", "name": "testSwitchAutoRepayFutures", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchAutoRepayFutures()", "original_string": "    @Test\n    public void testSwitchAutoRepayFutures() {\n        String path = \"/sapi/v1/portfolio/repay-futures-switch?autoRepay=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"autoRepay\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().switchAutoRepayFutures(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java", "class_name": "TestSwitchAutoRepayFutures", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestSwitchAutoRepayFutures.java.TestSwitchAutoRepayFutures", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestRepay.java.TestRepay.[void]testRepay()", "name": "testRepay", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepay()", "original_string": "    @Test\n    public void testRepay() {\n        String path = \"/sapi/v1/portfolio/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().repay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestRepay.java", "class_name": "TestRepay", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestRepay.java.TestRepay", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java.TestAutoCollection.[void]testFundAutocollection()", "name": "testFundAutocollection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFundAutocollection()", "original_string": "    @Test\n    public void testFundAutocollection() {\n        String path = \"/sapi/v1/portfolio/auto-collection\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPortfolioMargin().autoCollection(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java", "class_name": "TestAutoCollection", "class_uri": "src/test/java/unit/spot/portfoliomargin/TestAutoCollection.java.TestAutoCollection", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder.[void]testCancelOrderWithoutParameters()", "name": "testCancelOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOrderWithoutParameters()", "original_string": "    @Test\n    public void testCancelOrderWithoutParameters() {\n        String path = \"/sapi/v1/algo/spot/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSpotAlgo().cancelOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java", "class_name": "TestCancelOrder", "class_uri": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder.[void]testCancelOrder()", "name": "testCancelOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOrder()", "original_string": "    @Test\n    public void testCancelOrder() {\n        String path = \"/sapi/v1/algo/spot/order?algoId=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().cancelOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java", "class_name": "TestCancelOrder", "class_uri": "src/test/java/unit/spot/spotalgo/TestCancelOrder.java.TestCancelOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java.TestGetHistoricalOrders.[void]testGetHistoricalOrders()", "name": "testGetHistoricalOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetHistoricalOrders()", "original_string": "    @Test\n    public void testGetHistoricalOrders() {\n        String path = \"/sapi/v1/algo/spot/historicalOrders?symbol=BNBUSDT&side=SELL\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().getHistoricalOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java", "class_name": "TestGetHistoricalOrders", "class_uri": "src/test/java/unit/spot/spotalgo/TestGetHistoricalOrders.java.TestGetHistoricalOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders.[void]testQuerySubOrdersWithoutParameters()", "name": "testQuerySubOrdersWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQuerySubOrdersWithoutParameters()", "original_string": "    @Test\n    public void testQuerySubOrdersWithoutParameters() {\n        String path = \"/sapi/v1/algo/spot/subOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSpotAlgo().getSubOrders(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java", "class_name": "TestGetSubOrders", "class_uri": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders.[void]testQuerySubOrders()", "name": "testQuerySubOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQuerySubOrders()", "original_string": "    @Test\n    public void testQuerySubOrders() {\n        String path = \"/sapi/v1/algo/spot/subOrders?algoId=14511\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algoId\", algoId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().getSubOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java", "class_name": "TestGetSubOrders", "class_uri": "src/test/java/unit/spot/spotalgo/TestGetSubOrders.java.TestGetSubOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java.TestGetOpenTwapOrders.[void]testGetOpenOrders()", "name": "testGetOpenOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOpenOrders()", "original_string": "    @Test\n    public void testGetOpenOrders() {\n        String path = \"/sapi/v1/algo/spot/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java", "class_name": "TestGetOpenTwapOrders", "class_uri": "src/test/java/unit/spot/spotalgo/TestGetOpenTwapOrders.java.TestGetOpenTwapOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder.[void]testTwapOrderWithoutParameters()", "name": "testTwapOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwapOrderWithoutParameters()", "original_string": "    @Test\n    public void testTwapOrderWithoutParameters() {\n        String path = \"/sapi/v1/algo/spot/newOrderTwap\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSpotAlgo().twapOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java", "class_name": "TestTwapOrder", "class_uri": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder.[void]testTwapOrder()", "name": "testTwapOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTwapOrder()", "original_string": "    @Test\n    public void testTwapOrder() {\n        String path = \"/sapi/v1/algo/spot/newOrderTwap?symbol=BNBUSDT&side=SELL&quantity=1&duration=300\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"duration\", duration);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSpotAlgo().twapOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java", "class_name": "TestTwapOrder", "class_uri": "src/test/java/unit/spot/spotalgo/TestTwapOrder.java.TestTwapOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/pay/TestTransactions.java.TestTransactions.[void]testTransactions()", "name": "testTransactions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransactions()", "original_string": "    @Test\n    public void testTransactions() {\n        String path = \"/sapi/v1/pay/transactions\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createPay().transactions(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/pay/TestTransactions.java", "class_name": "TestTransactions", "class_uri": "src/test/java/unit/spot/pay/TestTransactions.java.TestTransactions", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleList.java.TestHashrateResaleList.[void]testHashrateResaleList()", "name": "testHashrateResaleList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashrateResaleList()", "original_string": "    @Test\n    public void testHashrateResaleList() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/details/list?pageIndex=1&pageSize=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"pageIndex\", pageIndex);\n        parameters.put(\"pageSize\", pageSize);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().hashrateResaleList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleList.java", "class_name": "TestHashrateResaleList", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleList.java.TestHashrateResaleList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest.[void]testHashrateResaleRequestWithoutParameters()", "name": "testHashrateResaleRequestWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashrateResaleRequestWithoutParameters()", "original_string": "    @Test\n    public void testHashrateResaleRequestWithoutParameters() {\n        String path = \"/sapi/v1/mining/hash-transfer/config\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().hashrateResaleRequest(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java", "class_name": "TestHashrateResaleRequest", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest.[void]testHashrateResaleRequest()", "name": "testHashrateResaleRequest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashrateResaleRequest()", "original_string": "    @Test\n    public void testHashrateResaleRequest() {\n        String path = \"/sapi/v1/mining/hash-transfer/config?userName=test&algo=sha256&endDate=1234567&startDate=1234566&toPoolUser=test&hashRate=1111\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"userName\", \"test\");\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"endDate\", endDate);\n        parameters.put(\"startDate\", startDate);\n        parameters.put(\"toPoolUser\", \"test\");\n        parameters.put(\"hashRate\", hashRate);\n\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().hashrateResaleRequest(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java", "class_name": "TestHashrateResaleRequest", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleRequest.java.TestHashrateResaleRequest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList.[void]testAccountListWithoutParameters()", "name": "testAccountListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountListWithoutParameters()", "original_string": "    @Test\n    public void testAccountListWithoutParameters() {\n        String path = \"/sapi/v1/mining/statistics/user/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().accountList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAccountList.java", "class_name": "TestAccountList", "class_uri": "src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList.[void]testAccountList()", "name": "testAccountList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountList()", "original_string": "    @Test\n    public void testAccountList() {\n        String path = \"/sapi/v1/mining/statistics/user/list?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().accountList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAccountList.java", "class_name": "TestAccountList", "class_uri": "src/test/java/unit/spot/mining/TestAccountList.java.TestAccountList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList.[void]testDetailMinerListWithoutParameters()", "name": "testDetailMinerListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDetailMinerListWithoutParameters()", "original_string": "    @Test\n    public void testDetailMinerListWithoutParameters() {\n        String path = \"/sapi/v1/mining/worker/detail\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().detailMinerList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestDetailMinerList.java", "class_name": "TestDetailMinerList", "class_uri": "src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList.[void]testDetailMinerList()", "name": "testDetailMinerList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDetailMinerList()", "original_string": "    @Test\n    public void testDetailMinerList() {\n        String path = \"/sapi/v1/mining/worker/detail?algo=sha256&userName=test1&workerName=test2\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test1\");\n        parameters.put(\"workerName\", \"test2\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().detailMinerList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestDetailMinerList.java", "class_name": "TestDetailMinerList", "class_uri": "src/test/java/unit/spot/mining/TestDetailMinerList.java.TestDetailMinerList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList.[void]testMinerListWithoutParameters()", "name": "testMinerListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinerListWithoutParameters()", "original_string": "    @Test\n    public void testMinerListWithoutParameters() {\n        String path = \"/sapi/v1/mining/worker/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().minerList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestMinerList.java", "class_name": "TestMinerList", "class_uri": "src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList.[void]testMinerList()", "name": "testMinerList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMinerList()", "original_string": "    @Test\n    public void testMinerList() {\n        String path = \"/sapi/v1/mining/worker/list?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().minerList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestMinerList.java", "class_name": "TestMinerList", "class_uri": "src/test/java/unit/spot/mining/TestMinerList.java.TestMinerList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList.[void]testBonusListWithoutParameters()", "name": "testBonusListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBonusListWithoutParameters()", "original_string": "    @Test\n    public void testBonusListWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/other\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().bonusList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestBonusList.java", "class_name": "TestBonusList", "class_uri": "src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList.[void]testBonusList()", "name": "testBonusList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBonusList()", "original_string": "    @Test\n    public void testBonusList() {\n        String path = \"sapi/v1/mining/payment/other?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().bonusList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestBonusList.java", "class_name": "TestBonusList", "class_uri": "src/test/java/unit/spot/mining/TestBonusList.java.TestBonusList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig.[void]testCancelHashrateResaleConfigWithoutParameters()", "name": "testCancelHashrateResaleConfigWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelHashrateResaleConfigWithoutParameters()", "original_string": "    @Test\n    public void testCancelHashrateResaleConfigWithoutParameters() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/cancel\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().cancelHashrateResaleConfig(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java", "class_name": "TestCancelHashrateResaleConfig", "class_uri": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig.[void]testCancelHashrateResaleConfig()", "name": "testCancelHashrateResaleConfig", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelHashrateResaleConfig()", "original_string": "    @Test\n    public void testCancelHashrateResaleConfig() {\n        String path = \"/sapi/v1/mining/hash-transfer/config/cancel?configId=123&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().cancelHashrateResaleConfig(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java", "class_name": "TestCancelHashrateResaleConfig", "class_uri": "src/test/java/unit/spot/mining/TestCancelHashrateResaleConfig.java.TestCancelHashrateResaleConfig", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning.[void]testAccountEarningWithoutParameters()", "name": "testAccountEarningWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountEarningWithoutParameters()", "original_string": "    @Test\n    public void testAccountEarningWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/uid\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().accountEarning(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAccountEarning.java", "class_name": "TestAccountEarning", "class_uri": "src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning.[void]testAccountEarning()", "name": "testAccountEarning", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountEarning()", "original_string": "    @Test\n    public void testAccountEarning() {\n        String path = \"/sapi/v1/mining/payment/uid?algo=sha256\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().accountEarning(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAccountEarning.java", "class_name": "TestAccountEarning", "class_uri": "src/test/java/unit/spot/mining/TestAccountEarning.java.TestAccountEarning", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList.[void]testStatisticsListWithoutParameters()", "name": "testStatisticsListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStatisticsListWithoutParameters()", "original_string": "    @Test\n    public void testStatisticsListWithoutParameters() {\n        String path = \"/sapi/v1/mining/statistics/user/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().statsticsList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestStatisticsList.java", "class_name": "TestStatisticsList", "class_uri": "src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList.[void]testStatisticsList()", "name": "testStatisticsList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testStatisticsList()", "original_string": "    @Test\n    public void testStatisticsList() {\n        String path = \"/sapi/v1/mining/statistics/user/status?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().statsticsList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestStatisticsList.java", "class_name": "TestStatisticsList", "class_uri": "src/test/java/unit/spot/mining/TestStatisticsList.java.TestStatisticsList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestAlogrithm.java.TestAlogrithm.[void]testAlogrithm()", "name": "testAlogrithm", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAlogrithm()", "original_string": "    @Test\n    public void testAlogrithm() {\n        String path = \"/sapi/v1/mining/pub/algoList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().algorithm(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestAlogrithm.java", "class_name": "TestAlogrithm", "class_uri": "src/test/java/unit/spot/mining/TestAlogrithm.java.TestAlogrithm", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestCoinName.java.TestCoinName.[void]testCoinName()", "name": "testCoinName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCoinName()", "original_string": "    @Test\n    public void testCoinName() {\n        String path = \"/sapi/v1/mining/pub/coinList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().coinName(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestCoinName.java", "class_name": "TestCoinName", "class_uri": "src/test/java/unit/spot/mining/TestCoinName.java.TestCoinName", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList.[void]testEarningListWithoutParameters()", "name": "testEarningListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEarningListWithoutParameters()", "original_string": "    @Test\n    public void testEarningListWithoutParameters() {\n        String path = \"/sapi/v1/mining/payment/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().earningList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestEarningList.java", "class_name": "TestEarningList", "class_uri": "src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList.[void]testEarningList()", "name": "testEarningList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEarningList()", "original_string": "    @Test\n    public void testEarningList() {\n        String path = \"/sapi/v1/mining/payment/list?algo=sha256&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"algo\", \"sha256\");\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().earningList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestEarningList.java", "class_name": "TestEarningList", "class_uri": "src/test/java/unit/spot/mining/TestEarningList.java.TestEarningList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail.[void]testHashrateResaleDetailWithoutParameters()", "name": "testHashrateResaleDetailWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashrateResaleDetailWithoutParameters()", "original_string": "    @Test\n    public void testHashrateResaleDetailWithoutParameters() {\n        String path = \"/sapi/v1/mining/hash-transfer/profit/details\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMining().hashrateResaleDetail(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java", "class_name": "TestHashrateResaleDetail", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail.[void]testHashrateResaleDetail()", "name": "testHashrateResaleDetail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHashrateResaleDetail()", "original_string": "    @Test\n    public void testHashrateResaleDetail() {\n        String path = \"/sapi/v1/mining/hash-transfer/profit/details?configId=123&userName=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"configId\", configId);\n        parameters.put(\"userName\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMining().hashrateResaleDetail(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java", "class_name": "TestHashrateResaleDetail", "class_uri": "src/test/java/unit/spot/mining/TestHashrateResaleDetail.java.TestHashrateResaleDetail", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/fiat/TestPayments.java.TestPayments.[void]testPaymentsWithoutParameters()", "name": "testPaymentsWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPaymentsWithoutParameters()", "original_string": "    @Test\n    public void testPaymentsWithoutParameters() {\n        String path = \"/sapi/v1/fiat/payments\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFiat().payments(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/fiat/TestPayments.java", "class_name": "TestPayments", "class_uri": "src/test/java/unit/spot/fiat/TestPayments.java.TestPayments", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/fiat/TestPayments.java.TestPayments.[void]testPayments()", "name": "testPayments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPayments()", "original_string": "    @Test\n    public void testPayments() {\n        String path = \"/sapi/v1/fiat/payments?transactionType=0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFiat().payments(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/fiat/TestPayments.java", "class_name": "TestPayments", "class_uri": "src/test/java/unit/spot/fiat/TestPayments.java.TestPayments", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/fiat/TestOrders.java.TestOrders.[void]testOrdersWithoutParameters()", "name": "testOrdersWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrdersWithoutParameters()", "original_string": "    @Test\n    public void testOrdersWithoutParameters() {\n        String path = \"/sapi/v1/fiat/orders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFiat().orders(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/fiat/TestOrders.java", "class_name": "TestOrders", "class_uri": "src/test/java/unit/spot/fiat/TestOrders.java.TestOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/fiat/TestOrders.java.TestOrders.[void]testOrders()", "name": "testOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrders()", "original_string": "    @Test\n    public void testOrders() {\n        String path = \"/sapi/v1/fiat/orders?transactionType=0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionType\", \"0\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFiat().orders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/fiat/TestOrders.java", "class_name": "TestOrders", "class_uri": "src/test/java/unit/spot/fiat/TestOrders.java.TestOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking.[void]testSubEthStakingWithoutParameters()", "name": "testSubEthStakingWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubEthStakingWithoutParameters()", "original_string": "    @Test\n    public void testSubEthStakingWithoutParameters() {\n        String path = \"/sapi/v2/eth-staking/eth/stake\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createStaking().subEthStaking(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestSubEthStaking.java", "class_name": "TestSubEthStaking", "class_uri": "src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking.[void]testSubEthStaking()", "name": "testSubEthStaking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubEthStaking()", "original_string": "    @Test\n    public void testSubEthStaking() {\n        String path = \"/sapi/v2/eth-staking/eth/stake?amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().subEthStaking(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestSubEthStaking.java", "class_name": "TestSubEthStaking", "class_uri": "src/test/java/unit/spot/staking/TestSubEthStaking.java.TestSubEthStaking", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java.TestEthStakingWbethWrapHistory.[void]testEthStakingWbethWrapHistory()", "name": "testEthStakingWbethWrapHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingWbethWrapHistory()", "original_string": "    @Test\n    public void testEthStakingWbethWrapHistory() {\n        String path = \"/sapi/v1/eth-staking/wbeth/history/wrapHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethWrapHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java", "class_name": "TestEthStakingWbethWrapHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingWbethWrapHistory.java.TestEthStakingWbethWrapHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth.[void]testWrapEthStakingWbethWithoutParameters()", "name": "testWrapEthStakingWbethWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWrapEthStakingWbethWithoutParameters()", "original_string": "    @Test\n    public void testWrapEthStakingWbethWithoutParameters() {\n        String path = \"/sapi/v1/eth-staking/wbeth/wrap\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createStaking().wrapEthStakingWbeth(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java", "class_name": "TestWrapEthStakingWbeth", "class_uri": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth.[void]testWrapEthStakingWbeth()", "name": "testWrapEthStakingWbeth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWrapEthStakingWbeth()", "original_string": "    @Test\n    public void testWrapEthStakingWbeth() {\n        String path = \"/sapi/v1/eth-staking/wbeth/wrap?amount=0.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().wrapEthStakingWbeth(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java", "class_name": "TestWrapEthStakingWbeth", "class_uri": "src/test/java/unit/spot/staking/TestWrapEthStakingWbeth.java.TestWrapEthStakingWbeth", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking.[void]testRedeemEthStakingWithoutParameters()", "name": "testRedeemEthStakingWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemEthStakingWithoutParameters()", "original_string": "    @Test\n    public void testRedeemEthStakingWithoutParameters() {\n        String path = \"/sapi/v1/eth-staking/eth/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createStaking().redeemEthStaking(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java", "class_name": "TestRedeemEthStaking", "class_uri": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking.[void]testRedeemEthStaking()", "name": "testRedeemEthStaking", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemEthStaking()", "original_string": "    @Test\n    public void testRedeemEthStaking() {\n        String path = \"/sapi/v1/eth-staking/eth/redeem?amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().redeemEthStaking(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java", "class_name": "TestRedeemEthStaking", "class_uri": "src/test/java/unit/spot/staking/TestRedeemEthStaking.java.TestRedeemEthStaking", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java.TestEthStakingSubHistory.[void]testEthStakingSubHistory()", "name": "testEthStakingSubHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingSubHistory()", "original_string": "    @Test\n    public void testEthStakingSubHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/stakingHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingSubHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java", "class_name": "TestEthStakingSubHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingSubHistory.java.TestEthStakingSubHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java.TestEthStakingRateHistory.[void]testEthStakingRateHistory()", "name": "testEthStakingRateHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingRateHistory()", "original_string": "    @Test\n    public void testEthStakingRateHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/rateHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java", "class_name": "TestEthStakingRateHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingRateHistory.java.TestEthStakingRateHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java.TestEthStakingRewardsHistory.[void]testEthStakingRewardsHistory()", "name": "testEthStakingRewardsHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingRewardsHistory()", "original_string": "    @Test\n    public void testEthStakingRewardsHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/rewardsHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRewardsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java", "class_name": "TestEthStakingRewardsHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingRewardsHistory.java.TestEthStakingRewardsHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java.TestEthStakingRedeemHistory.[void]testEthStakingRedeemHistory()", "name": "testEthStakingRedeemHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingRedeemHistory()", "original_string": "    @Test\n    public void testEthStakingRedeemHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/redemptionHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingRedeemHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java", "class_name": "TestEthStakingRedeemHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingRedeemHistory.java.TestEthStakingRedeemHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java.TestEthStakingWbethRewardHistory.[void]testEthStakingWbethRewardHistory()", "name": "testEthStakingWbethRewardHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingWbethRewardHistory()", "original_string": "    @Test\n    public void testEthStakingWbethRewardHistory() {\n        String path = \"/sapi/v1/eth-staking/eth/history/wbethRewardsHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethRewardHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java", "class_name": "TestEthStakingWbethRewardHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingWbethRewardHistory.java.TestEthStakingWbethRewardHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingAccount.java.TestEthStakingAccount.[void]testEthStakingQuota()", "name": "testEthStakingQuota", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingQuota()", "original_string": "    @Test\n    public void testEthStakingQuota() {\n        String path = \"/sapi/v2/eth-staking/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingAccount.java", "class_name": "TestEthStakingAccount", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingAccount.java.TestEthStakingAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java.TestEthStakingWbethUnwrapHistory.[void]testEthStakingWbethUnwrapHistory()", "name": "testEthStakingWbethUnwrapHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingWbethUnwrapHistory()", "original_string": "    @Test\n    public void testEthStakingWbethUnwrapHistory() {\n        String path = \"/sapi/v1/eth-staking/wbeth/history/unwrapHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingWbethUnwrapHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java", "class_name": "TestEthStakingWbethUnwrapHistory", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingWbethUnwrapHistory.java.TestEthStakingWbethUnwrapHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/staking/TestEthStakingQuota.java.TestEthStakingQuota.[void]testEthStakingQuota()", "name": "testEthStakingQuota", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEthStakingQuota()", "original_string": "    @Test\n    public void testEthStakingQuota() {\n        String path = \"/sapi/v1/eth-staking/eth/quota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createStaking().ethStakingQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/staking/TestEthStakingQuota.java", "class_name": "TestEthStakingQuota", "class_uri": "src/test/java/unit/spot/staking/TestEthStakingQuota.java.TestEthStakingQuota", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey.[void]testExtendIsolatedListenKeyWithoutParameters()", "name": "testExtendIsolatedListenKeyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtendIsolatedListenKeyWithoutParameters()", "original_string": "    @Test\n    public void testExtendIsolatedListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().extendIsolatedMarginListenKey(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java", "class_name": "TestExtendIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey.[void]testExtendIsolatedListenKey()", "name": "testExtendIsolatedListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtendIsolatedListenKey()", "original_string": "    @Test\n    public void testExtendIsolatedListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().extendIsolatedMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java", "class_name": "TestExtendIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendIsolatedMarginListenKey.java.TestExtendIsolatedMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey.[void]testExtendMarginListenKeyWithoutParameters()", "name": "testExtendMarginListenKeyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtendMarginListenKeyWithoutParameters()", "original_string": "    @Test\n    public void testExtendMarginListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().extendMarginListenKey(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java", "class_name": "TestExtendMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey.[void]testExtendMarginListenKey()", "name": "testExtendMarginListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtendMarginListenKey()", "original_string": "    @Test\n    public void testExtendMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().extendMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java", "class_name": "TestExtendMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendMarginListenKey.java.TestExtendMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey.[void]testCloseMarginListenKeyWithoutParameters()", "name": "testCloseMarginListenKeyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseMarginListenKeyWithoutParameters()", "original_string": "    @Test\n    public void testCloseMarginListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeMarginListenKey(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java", "class_name": "TestCloseMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey.[void]testCloseMarginListenKey()", "name": "testCloseMarginListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseMarginListenKey()", "original_string": "    @Test\n    public void testCloseMarginListenKey() {\n        String path = \"/sapi/v1/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java", "class_name": "TestCloseMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseMarginListenKey.java.TestCloseMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey.[void]testCloseIsolatedListenKeyWithoutParameters()", "name": "testCloseIsolatedListenKeyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseIsolatedListenKeyWithoutParameters()", "original_string": "    @Test\n    public void testCloseIsolatedListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeIsolatedMarginListenKey(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java", "class_name": "TestCloseIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey.[void]testCloseIsolatedListenKey()", "name": "testCloseIsolatedListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseIsolatedListenKey()", "original_string": "    @Test\n    public void testCloseIsolatedListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeIsolatedMarginListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java", "class_name": "TestCloseIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseIsolatedMarginListenKey.java.TestCloseIsolatedMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCreateListenKey.java.TestCreateListenKey.[void]testCreateListenKey()", "name": "testCreateListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateListenKey()", "original_string": "    @Test\n    public void testCreateListenKey() {\n        String path = \"/api/v3/userDataStream\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().createListenKey();\n        assertEquals(MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCreateListenKey.java", "class_name": "TestCreateListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCreateListenKey.java.TestCreateListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey.[void]testCloseListenKeyWithoutParameters()", "name": "testCloseListenKeyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseListenKeyWithoutParameters()", "original_string": "    @Test\n    public void testCloseListenKeyWithoutParameters() {\n        String path = \"/api/v3/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().closeListenKey(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseListenKey.java", "class_name": "TestCloseListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey.[void]testCloseListenKey()", "name": "testCloseListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloseListenKey()", "original_string": "    @Test\n    public void testCloseListenKey() {\n        String path = \"/api/v3/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().closeListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCloseListenKey.java", "class_name": "TestCloseListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCloseListenKey.java.TestCloseListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey.[void]testExtendListenKeyWithoutParameters()", "name": "testExtendListenKeyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtendListenKeyWithoutParameters()", "original_string": "    @Test\n    public void testExtendListenKeyWithoutParameters() {\n        String path = \"/api/v3/userDataStream\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().extendListenKey(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendListenKey.java", "class_name": "TestExtendListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey.[void]testExtendListenKey()", "name": "testExtendListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExtendListenKey()", "original_string": "    @Test\n    public void testExtendListenKey() {\n        String path = \"/api/v3/userDataStream?listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.PUT, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().extendListenKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestExtendListenKey.java", "class_name": "TestExtendListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestExtendListenKey.java.TestExtendListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey.[void]testCreateIsolatedListenKeyWithoutParameters()", "name": "testCreateIsolatedListenKeyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateIsolatedListenKeyWithoutParameters()", "original_string": "    @Test\n    public void testCreateIsolatedListenKeyWithoutParameters() {\n        String path = \"/sapi/v1/userDataStream/isolated\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createUserData().createIsolatedMarginListenKey(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java", "class_name": "TestCreateIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey.[void]testCreateIsolatedListenKey()", "name": "testCreateIsolatedListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateIsolatedListenKey()", "original_string": "    @Test\n    public void testCreateIsolatedListenKey() {\n        String path = \"/sapi/v1/userDataStream/isolated?symbol=BNBUSDT&listenKey=test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"listenKey\", \"test\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().createIsolatedMarginListenKey(parameters);\n        assertEquals(MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java", "class_name": "TestCreateIsolatedMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCreateIsolatedMarginListenKey.java.TestCreateIsolatedMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java.TestCreateMarginListenKey.[void]testCreateListenKey()", "name": "testCreateListenKey", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateListenKey()", "original_string": "    @Test\n    public void testCreateListenKey() {\n        String path = \"/sapi/v1/userDataStream\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createUserData().createMarginListenKey();\n        assertEquals(MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java", "class_name": "TestCreateMarginListenKey", "class_uri": "src/test/java/unit/spot/userdata/TestCreateMarginListenKey.java.TestCreateMarginListenKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java.TestTargetAssetList.[void]testTargetAssetList()", "name": "testTargetAssetList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTargetAssetList()", "original_string": "    @Test\n    public void testTargetAssetList() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().targetAssetList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java", "class_name": "TestTargetAssetList", "class_uri": "src/test/java/unit/spot/autoinvest/TestTargetAssetList.java.TestTargetAssetList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java.TestIndexPlanRebalanceInfo.[void]testIndexPlanRebalanceInfo()", "name": "testIndexPlanRebalanceInfo", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexPlanRebalanceInfo()", "original_string": "    @Test\n    public void testIndexPlanRebalanceInfo() {\n        String path = \"/sapi/v1/lending/auto-invest/rebalance/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexPlanRebalanceInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java", "class_name": "TestIndexPlanRebalanceInfo", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexPlanRebalanceInfo.java.TestIndexPlanRebalanceInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory.[void]testOnetimeTransactionStatusWithoutParameters()", "name": "testOnetimeTransactionStatusWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnetimeTransactionStatusWithoutParameters()", "original_string": "    @Test\n    public void testOnetimeTransactionStatusWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().indexPlanRedeemHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java", "class_name": "TestIndexPlanRedeemHistory", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory.[void]testIndexPlanRedeemHistory()", "name": "testIndexPlanRedeemHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexPlanRedeemHistory()", "original_string": "    @Test\n    public void testIndexPlanRedeemHistory() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem/history?requestId=12345\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"requestId\", requestId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexPlanRedeemHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java", "class_name": "TestIndexPlanRedeemHistory", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexPlanRedeemHistory.java.TestIndexPlanRedeemHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList.[void]testSourceAssetListWithoutParameters()", "name": "testSourceAssetListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSourceAssetListWithoutParameters()", "original_string": "    @Test\n    public void testSourceAssetListWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/source-asset/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().sourceAssetList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java", "class_name": "TestSourceAssetList", "class_uri": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList.[void]testSourceAssetList()", "name": "testSourceAssetList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSourceAssetList()", "original_string": "    @Test\n    public void testSourceAssetList() {\n        String path = \"/sapi/v1/lending/auto-invest/source-asset/list?usageType=RECURRING\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"usageType\", \"RECURRING\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().sourceAssetList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java", "class_name": "TestSourceAssetList", "class_uri": "src/test/java/unit/spot/autoinvest/TestSourceAssetList.java.TestSourceAssetList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java.TestAllSourceAndTargetAssets.[void]testAllSourceAndTargetAssets()", "name": "testAllSourceAndTargetAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAllSourceAndTargetAssets()", "original_string": "    @Test\n    public void testAllSourceAndTargetAssets() {\n        String path = \"/sapi/v1/lending/auto-invest/all/asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().allSourceAndTargetAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java", "class_name": "TestAllSourceAndTargetAssets", "class_uri": "src/test/java/unit/spot/autoinvest/TestAllSourceAndTargetAssets.java.TestAllSourceAndTargetAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan.[void]testRedeemIndexPlanWithoutParameters()", "name": "testRedeemIndexPlanWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemIndexPlanWithoutParameters()", "original_string": "    @Test\n    public void testRedeemIndexPlanWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().redeemIndexPlan(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java", "class_name": "TestRedeemIndexPlan", "class_uri": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan.[void]testRedeemIndexPlan()", "name": "testRedeemIndexPlan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemIndexPlan()", "original_string": "    @Test\n    public void testRedeemIndexPlan() {\n        String path = \"/sapi/v1/lending/auto-invest/redeem?indexId=123456&redemptionPercentage=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n        parameters.put(\"redemptionPercentage\", redemptionPercentage);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().redeemIndexPlan(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java", "class_name": "TestRedeemIndexPlan", "class_uri": "src/test/java/unit/spot/autoinvest/TestRedeemIndexPlan.java.TestRedeemIndexPlan", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo.[void]testIndexInfoWithoutParameters()", "name": "testIndexInfoWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexInfoWithoutParameters()", "original_string": "    @Test\n    public void testIndexInfoWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/index/info\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().indexInfo(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java", "class_name": "TestIndexInfo", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo.[void]testIndexInfo()", "name": "testIndexInfo", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testIndexInfo()", "original_string": "    @Test\n    public void testIndexInfo() {\n        String path = \"/sapi/v1/lending/auto-invest/index/info?indexId=1234\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().indexInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java", "class_name": "TestIndexInfo", "class_uri": "src/test/java/unit/spot/autoinvest/TestIndexInfo.java.TestIndexInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus.[void]testChangePlanStatusWithoutParameters()", "name": "testChangePlanStatusWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChangePlanStatusWithoutParameters()", "original_string": "    @Test\n    public void testChangePlanStatusWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/edit-status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().changePlanStatus(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java", "class_name": "TestChangePlanStatus", "class_uri": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus.[void]testChangePlanStatus()", "name": "testChangePlanStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testChangePlanStatus()", "original_string": "    @Test\n    public void testChangePlanStatus() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/edit-status?planId=1234&status=PAUSED\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planId\", planId);\n        parameters.put(\"status\", \"PAUSED\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().changePlanStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java", "class_name": "TestChangePlanStatus", "class_uri": "src/test/java/unit/spot/autoinvest/TestChangePlanStatus.java.TestChangePlanStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java.TestPlanSubsHistory.[void]testPlanSubsHistory()", "name": "testPlanSubsHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPlanSubsHistory()", "original_string": "    @Test\n    public void testPlanSubsHistory() {\n        String path = \"/sapi/v1/lending/auto-invest/history/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().planSubsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java", "class_name": "TestPlanSubsHistory", "class_uri": "src/test/java/unit/spot/autoinvest/TestPlanSubsHistory.java.TestPlanSubsHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList.[void]testTargetAssetRoiListWithoutParameters()", "name": "testTargetAssetRoiListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTargetAssetRoiListWithoutParameters()", "original_string": "    @Test\n    public void testTargetAssetRoiListWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().targetAssetRoiList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java", "class_name": "TestTargetAssetRoiList", "class_uri": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList.[void]testTargetAssetRoiList()", "name": "testTargetAssetRoiList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTargetAssetRoiList()", "original_string": "    @Test\n    public void testTargetAssetRoiList() {\n        String path = \"/sapi/v1/lending/auto-invest/target-asset/roi/list?targetAsset=BTC&hisRoiType=FIVE_YEAR\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"targetAsset\", \"BTC\");\n        parameters.put(\"hisRoiType\", \"FIVE_YEAR\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().targetAssetRoiList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java", "class_name": "TestTargetAssetRoiList", "class_uri": "src/test/java/unit/spot/autoinvest/TestTargetAssetRoiList.java.TestTargetAssetRoiList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus.[void]testOnetimeTransactionStatusWithoutParameters()", "name": "testOnetimeTransactionStatusWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnetimeTransactionStatusWithoutParameters()", "original_string": "    @Test\n    public void testOnetimeTransactionStatusWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().oneTimeTransactionStatus(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java", "class_name": "TestOnetimeTransactionStatus", "class_uri": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus.[void]testOnetimeTransactionStatus()", "name": "testOnetimeTransactionStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOnetimeTransactionStatus()", "original_string": "    @Test\n    public void testOnetimeTransactionStatus() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off/status?transactionId=12345\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"transactionId\", transactionId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().oneTimeTransactionStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java", "class_name": "TestOnetimeTransactionStatus", "class_uri": "src/test/java/unit/spot/autoinvest/TestOnetimeTransactionStatus.java.TestOnetimeTransactionStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans.[void]testUserIndexPlansWithoutParameters()", "name": "testUserIndexPlansWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUserIndexPlansWithoutParameters()", "original_string": "    @Test\n    public void testUserIndexPlansWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/index/user-summary\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().userIndexPlans(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java", "class_name": "TestUserIndexPlans", "class_uri": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans.[void]testUserIndexPlans()", "name": "testUserIndexPlans", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUserIndexPlans()", "original_string": "    @Test\n    public void testUserIndexPlans() {\n        String path = \"/sapi/v1/lending/auto-invest/index/user-summary?indexId=1234\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"indexId\", indexId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().userIndexPlans(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java", "class_name": "TestUserIndexPlans", "class_uri": "src/test/java/unit/spot/autoinvest/TestUserIndexPlans.java.TestUserIndexPlans", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction.[void]testSubmitOneTimeTransactionWithoutParameters()", "name": "testSubmitOneTimeTransactionWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubmitOneTimeTransactionWithoutParameters()", "original_string": "    @Test\n    public void testSubmitOneTimeTransactionWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().submitOneTimeTransaction(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java", "class_name": "TestSubmitOneTimeTransaction", "class_uri": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction.[void]testSubmitOneTimeTransaction()", "name": "testSubmitOneTimeTransaction", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubmitOneTimeTransaction()", "original_string": "    @Test\n    public void testSubmitOneTimeTransaction() {\n        String path = \"/sapi/v1/lending/auto-invest/one-off?sourceType=MAIN_SITE&subscriptionAmount=10.1&sourceAsset=USDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"sourceType\", \"MAIN_SITE\");\n        parameters.put(\"subscriptionAmount\", subscriptionAmount);\n        parameters.put(\"sourceAsset\", \"USDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().submitOneTimeTransaction(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java", "class_name": "TestSubmitOneTimeTransaction", "class_uri": "src/test/java/unit/spot/autoinvest/TestSubmitOneTimeTransaction.java.TestSubmitOneTimeTransaction", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList.[void]testPlansListWithoutParameters()", "name": "testPlansListWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPlansListWithoutParameters()", "original_string": "    @Test\n    public void testPlansListWithoutParameters() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createAutoInvest().plansList(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestPlansList.java", "class_name": "TestPlansList", "class_uri": "src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList.[void]testPlansList()", "name": "testPlansList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPlansList()", "original_string": "    @Test\n    public void testPlansList() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/list?planType=SINGLE\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"planType\", \"SINGLE\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().plansList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestPlansList.java", "class_name": "TestPlansList", "class_uri": "src/test/java/unit/spot/autoinvest/TestPlansList.java.TestPlansList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java.TestHoldingPlan.[void]testHoldingPlan()", "name": "testHoldingPlan", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHoldingPlan()", "original_string": "    @Test\n    public void testHoldingPlan() {\n        String path = \"/sapi/v1/lending/auto-invest/plan/id\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createAutoInvest().holdingPlan(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java", "class_name": "TestHoldingPlan", "class_uri": "src/test/java/unit/spot/autoinvest/TestHoldingPlan.java.TestHoldingPlan", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDustLog.java.TestDustLog.[void]testDustLog()", "name": "testDustLog", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDustLog()", "original_string": "    @Test\n    public void testDustLog() {\n        String path = \"/sapi/v1/asset/dribblet\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().dustLog(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDustLog.java", "class_name": "TestDustLog", "class_uri": "src/test/java/unit/spot/wallet/TestDustLog.java.TestDustLog", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestCoinInfo.java.TestCoinInfo.[void]testCoinInfo()", "name": "testCoinInfo", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCoinInfo()", "original_string": "    @Test\n    public void testCoinInfo() {\n        String path = \"/sapi/v1/capital/config/getall\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().coinInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestCoinInfo.java", "class_name": "TestCoinInfo", "class_uri": "src/test/java/unit/spot/wallet/TestCoinInfo.java.TestCoinInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositHistory.java.TestDepositHistory.[void]testDepositHistory()", "name": "testDepositHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositHistory()", "original_string": "    @Test\n    public void testDepositHistory() {\n        String path = \"/sapi/v1/capital/deposit/hisrec\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().depositHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositHistory.java", "class_name": "TestDepositHistory", "class_uri": "src/test/java/unit/spot/wallet/TestDepositHistory.java.TestDepositHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWalletBalance.java.TestWalletBalance.[void]testWalletBalance()", "name": "testWalletBalance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWalletBalance()", "original_string": "    @Test\n    public void testWalletBalance() {\n        String path = \"/sapi/v1/asset/wallet/balance\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().walletBalance(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWalletBalance.java", "class_name": "TestWalletBalance", "class_uri": "src/test/java/unit/spot/wallet/TestWalletBalance.java.TestWalletBalance", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestGetUserAsset.java.TestGetUserAsset.[void]testGetUserAsset()", "name": "testGetUserAsset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetUserAsset()", "original_string": "    @Test\n    public void testGetUserAsset() {\n        String path = \"/sapi/v3/asset/getUserAsset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().getUserAsset(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestGetUserAsset.java", "class_name": "TestGetUserAsset", "class_uri": "src/test/java/unit/spot/wallet/TestGetUserAsset.java.TestGetUserAsset", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses.[void]testDepositAddressesWithoutParameters()", "name": "testDepositAddressesWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddressesWithoutParameters()", "original_string": "    @Test\n    public void testDepositAddressesWithoutParameters() {\n        String path = \"/sapi/v1/capital/deposit/address/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().depositAddresses(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositAddresses.java", "class_name": "TestDepositAddresses", "class_uri": "src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses.[void]testDepositAddresses()", "name": "testDepositAddresses", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddresses()", "original_string": "    @Test\n    public void testDepositAddresses() {\n        String path = \"/sapi/v1/capital/deposit/address/list?coin=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().depositAddresses(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositAddresses.java", "class_name": "TestDepositAddresses", "class_uri": "src/test/java/unit/spot/wallet/TestDepositAddresses.java.TestDepositAddresses", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw.[void]testWithdrawWithoutCoin()", "name": "testWithdrawWithoutCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithdrawWithoutCoin()", "original_string": "    @Test\n    public void testWithdrawWithoutCoin() {\n        String path = \"/sapi/v1/capital/withdraw/apply?amount=0.01&address=add\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"amount\", amount);\n        parameters.put(\"address\", \"add\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().withdraw(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWithdraw.java", "class_name": "TestWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw.[void]testWithdrawWithoutAmount()", "name": "testWithdrawWithoutAmount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithdrawWithoutAmount()", "original_string": "    @Test\n    public void testWithdrawWithoutAmount() {\n        String path = \"/sapi/v1/capital/withdraw/apply?coin=BNB&address=add\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n        parameters.put(\"address\", \"add\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().withdraw(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWithdraw.java", "class_name": "TestWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw.[void]testWithdrawWithoutAddress()", "name": "testWithdrawWithoutAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithdrawWithoutAddress()", "original_string": "    @Test\n    public void testWithdrawWithoutAddress() {\n        String path = \"/sapi/v1/capital/withdraw/apply?coin=BNB&amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().withdraw(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWithdraw.java", "class_name": "TestWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw.[void]testWithdraw()", "name": "testWithdraw", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithdraw()", "original_string": "    @Test\n    public void testWithdraw() {\n        String path = \"/sapi/v1/capital/withdraw/apply?coin=BNB&amount=0.01&address=add\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"address\", \"add\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().withdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWithdraw.java", "class_name": "TestWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestWithdraw.java.TestWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAssetDividend.java.TestAssetDividend.[void]testAssetDividend()", "name": "testAssetDividend", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetDividend()", "original_string": "    @Test\n    public void testAssetDividend() {\n        String path = \"/sapi/v1/asset/assetDividend?asset=BNB&startTime=1591063000087&endTime=1591063000087&limit=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"startTime\", \"1591063000087\");\n        parameters.put(\"endTime\", \"1591063000087\");\n        parameters.put(\"limit\", \"10\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().assetDividend(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAssetDividend.java", "class_name": "TestAssetDividend", "class_uri": "src/test/java/unit/spot/wallet/TestAssetDividend.java.TestAssetDividend", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java.TestDisableFastWithdraw.[void]testDisableFastWithdraw()", "name": "testDisableFastWithdraw", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDisableFastWithdraw()", "original_string": "    @Test\n    public void testDisableFastWithdraw() {\n        String path = \"/sapi/v1/account/disableFastWithdrawSwitch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().disableFastWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java", "class_name": "TestDisableFastWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestDisableFastWithdraw.java.TestDisableFastWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java.TestEnableFastWithdraw.[void]testEnableFastWithdraw()", "name": "testEnableFastWithdraw", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testEnableFastWithdraw()", "original_string": "    @Test\n    public void testEnableFastWithdraw() {\n        String path = \"/sapi/v1/account/enableFastWithdrawSwitch\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().enableFastWithdraw(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java", "class_name": "TestEnableFastWithdraw", "class_uri": "src/test/java/unit/spot/wallet/TestEnableFastWithdraw.java.TestEnableFastWithdraw", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAssetDetail.java.TestAssetDetail.[void]testAssetDetail()", "name": "testAssetDetail", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetDetail()", "original_string": "    @Test\n    public void testAssetDetail() {\n        String path = \"/sapi/v1/asset/assetDetail\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().assetDetail(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAssetDetail.java", "class_name": "TestAssetDetail", "class_uri": "src/test/java/unit/spot/wallet/TestAssetDetail.java.TestAssetDetail", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory.[void]testBusdConvertWithWrongParamType()", "name": "testBusdConvertWithWrongParamType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBusdConvertWithWrongParamType()", "original_string": "    @Test\n    public void testBusdConvertWithWrongParamType() {\n        String path = \"/sapi/v1/asset/convert-transfer/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", \"118263400000L\");\n        parameters.put(\"endTime\", \"118263407119L\");\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().busdConvertHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java", "class_name": "TestBusdConvertHistory", "class_uri": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory.[void]testBusdConvertWithoutMandatoryParam()", "name": "testBusdConvertWithoutMandatoryParam", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBusdConvertWithoutMandatoryParam()", "original_string": "    @Test\n    public void testBusdConvertWithoutMandatoryParam() {\n        String path = \"/sapi/v1/asset/convert-transfer/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().busdConvertHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java", "class_name": "TestBusdConvertHistory", "class_uri": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory.[void]testBusdConvertHistory()", "name": "testBusdConvertHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBusdConvertHistory()", "original_string": "    @Test\n    public void testBusdConvertHistory() {\n        String path = \"/sapi/v1/asset/convert-transfer/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().busdConvertHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java", "class_name": "TestBusdConvertHistory", "class_uri": "src/test/java/unit/spot/wallet/TestBusdConvertHistory.java.TestBusdConvertHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositAddress.java.TestDepositAddress.[void]testDepositAddressWithoutCoin()", "name": "testDepositAddressWithoutCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddressWithoutCoin()", "original_string": "    @Test\n    public void testDepositAddressWithoutCoin() {\n        String path = \"/sapi/v1/capital/deposit/address\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().depositAddress(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositAddress.java", "class_name": "TestDepositAddress", "class_uri": "src/test/java/unit/spot/wallet/TestDepositAddress.java.TestDepositAddress", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDepositAddress.java.TestDepositAddress.[void]testDepositAddress()", "name": "testDepositAddress", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositAddress()", "original_string": "    @Test\n    public void testDepositAddress() {\n        String path = \"/sapi/v1/capital/deposit/address?coin=BNB\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().depositAddress(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDepositAddress.java", "class_name": "TestDepositAddress", "class_uri": "src/test/java/unit/spot/wallet/TestDepositAddress.java.TestDepositAddress", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestApiPermission.java.TestApiPermission.[void]testApiPermission()", "name": "testApiPermission", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiPermission()", "original_string": "    @Test\n    public void testApiPermission() {\n        String path = \"/sapi/v1/account/apiRestrictions\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().apiPermission(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestApiPermission.java", "class_name": "TestApiPermission", "class_uri": "src/test/java/unit/spot/wallet/TestApiPermission.java.TestApiPermission", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestSystemStatus.java.TestSystemStatus.[void]testSystemStatus()", "name": "testSystemStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSystemStatus()", "original_string": "    @Test\n    public void testSystemStatus() {\n        String path = \"/sapi/v1/system/status\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().systemStatus();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestSystemStatus.java", "class_name": "TestSystemStatus", "class_uri": "src/test/java/unit/spot/wallet/TestSystemStatus.java.TestSystemStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory.[void]testCloudMiningHistoryWithWrongParamType()", "name": "testCloudMiningHistoryWithWrongParamType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloudMiningHistoryWithWrongParamType()", "original_string": "    @Test\n    public void testCloudMiningHistoryWithWrongParamType() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", \"118263400000L\");\n        parameters.put(\"endTime\", \"118263407119L\");\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().cloudMiningHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java", "class_name": "TestCloudMiningHistory", "class_uri": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory.[void]testCloudMiningHistoryWithoutMandatoryParam()", "name": "testCloudMiningHistoryWithoutMandatoryParam", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloudMiningHistoryWithoutMandatoryParam()", "original_string": "    @Test\n    public void testCloudMiningHistoryWithoutMandatoryParam() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().cloudMiningHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java", "class_name": "TestCloudMiningHistory", "class_uri": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory.[void]testCloudMiningHistory()", "name": "testCloudMiningHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCloudMiningHistory()", "original_string": "    @Test\n    public void testCloudMiningHistory() {\n        String path = \"/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"asset\", \"USDC\");\n        parameters.put(\"size\", size);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().cloudMiningHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java", "class_name": "TestCloudMiningHistory", "class_uri": "src/test/java/unit/spot/wallet/TestCloudMiningHistory.java.TestCloudMiningHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java.TestBnbConvertibleAssets.[void]testBnbConvertibleAssets()", "name": "testBnbConvertibleAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBnbConvertibleAssets()", "original_string": "    @Test\n    public void testBnbConvertibleAssets() {\n        String path = \"/sapi/v1/asset/dust-btc\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().bnbConvertableAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java", "class_name": "TestBnbConvertibleAssets", "class_uri": "src/test/java/unit/spot/wallet/TestBnbConvertibleAssets.java.TestBnbConvertibleAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java.TestWithdrawHistory.[void]testWithdrawHistory()", "name": "testWithdrawHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithdrawHistory()", "original_string": "    @Test\n    public void testWithdrawHistory() {\n        String path = \"/sapi/v1/capital/withdraw/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().withdrawHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java", "class_name": "TestWithdrawHistory", "class_uri": "src/test/java/unit/spot/wallet/TestWithdrawHistory.java.TestWithdrawHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java.TestApplyOneClickArrivalDeposit.[void]testApplyOneClickArrivalDeposit()", "name": "testApplyOneClickArrivalDeposit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApplyOneClickArrivalDeposit()", "original_string": "    @Test\n    public void testApplyOneClickArrivalDeposit() {\n        String path = \"/sapi/v1/capital/deposit/credit-apply?txId=123\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"txId\", \"123\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().applyOneClickArrivalDeposit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java", "class_name": "TestApplyOneClickArrivalDeposit", "class_uri": "src/test/java/unit/spot/wallet/TestApplyOneClickArrivalDeposit.java.TestApplyOneClickArrivalDeposit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java.TestUniversalTransfer.[void]testUniversalTransferWithoutParameters()", "name": "testUniversalTransferWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransferWithoutParameters()", "original_string": "    @Test\n    public void testUniversalTransferWithoutParameters() {\n        String path = \"/sapi/v1/asset/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().universalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java", "class_name": "TestUniversalTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java.TestUniversalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java.TestUniversalTransfer.[void]testUniversalTransfer()", "name": "testUniversalTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUniversalTransfer()", "original_string": "    @Test\n    public void testUniversalTransfer() {\n        String path = \"/sapi/v1/asset/transfer?type=UMFUTURE_MAIN&asset=BNB&amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"UMFUTURE_MAIN\");\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().universalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java", "class_name": "TestUniversalTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestUniversalTransfer.java.TestUniversalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion.[void]testSwitchBusdAutoConversionWithoutParameters()", "name": "testSwitchBusdAutoConversionWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchBusdAutoConversionWithoutParameters()", "original_string": "    @Test\n    public void testSwitchBusdAutoConversionWithoutParameters() {\n        String path = \"/sapi/v1/capital/contract/convertible-coins\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().switchBusdAutoConversion(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java", "class_name": "TestSwitchBusdAutoConversion", "class_uri": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion.[void]testSwitchBusdAutoConversion()", "name": "testSwitchBusdAutoConversion", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSwitchBusdAutoConversion()", "original_string": "    @Test\n    public void testSwitchBusdAutoConversion() {\n        String path = \"/sapi/v1/capital/contract/convertible-coins?coin=USDC&enable=false\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"coin\", \"USDC\");\n        parameters.put(\"enable\", false);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().switchBusdAutoConversion(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java", "class_name": "TestSwitchBusdAutoConversion", "class_uri": "src/test/java/unit/spot/wallet/TestSwitchBusdAutoConversion.java.TestSwitchBusdAutoConversion", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java.TestGetBusdAutoConvertions.[void]testGetBusdAutoConvertions()", "name": "testGetBusdAutoConvertions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetBusdAutoConvertions()", "original_string": "    @Test\n    public void testGetBusdAutoConvertions() {\n        String path = \"/sapi/v1/capital/contract/convertible-coins\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().getBusdAutoConvertions();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java", "class_name": "TestGetBusdAutoConvertions", "class_uri": "src/test/java/unit/spot/wallet/TestGetBusdAutoConvertions.java.TestGetBusdAutoConvertions", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAccountStatus.java.TestAccountStatus.[void]testAccountStatus()", "name": "testAccountStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountStatus()", "original_string": "    @Test\n    public void testAccountStatus() {\n        String path = \"/sapi/v1/account/status\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().accountStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAccountStatus.java", "class_name": "TestAccountStatus", "class_uri": "src/test/java/unit/spot/wallet/TestAccountStatus.java.TestAccountStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestTradeFee.java.TestTradeFee.[void]testTradeFee()", "name": "testTradeFee", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradeFee()", "original_string": "    @Test\n    public void testTradeFee() {\n        String path = \"/sapi/v1/asset/tradeFee\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().tradeFee(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestTradeFee.java", "class_name": "TestTradeFee", "class_uri": "src/test/java/unit/spot/wallet/TestTradeFee.java.TestTradeFee", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer.[void]testQueryUniversalTransferWithoutType()", "name": "testQueryUniversalTransferWithoutType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueryUniversalTransferWithoutType()", "original_string": "    @Test\n    public void testQueryUniversalTransferWithoutType() {\n        String path = \"/sapi/v1/asset/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().queryUniversalTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java", "class_name": "TestQueryUniversalTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer.[void]testQueryUniversalTransfer()", "name": "testQueryUniversalTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQueryUniversalTransfer()", "original_string": "    @Test\n    public void testQueryUniversalTransfer() {\n        String path = \"/sapi/v1/asset/transfer?type=UMFUTURE_MAIN\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"UMFUTURE_MAIN\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().queryUniversalTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java", "class_name": "TestQueryUniversalTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestQueryUniversalTransfer.java.TestQueryUniversalTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java.TestApiTradingStatus.[void]testApiTradingStatus()", "name": "testApiTradingStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testApiTradingStatus()", "original_string": "    @Test\n    public void testApiTradingStatus() {\n        String path = \"/sapi/v1/account/apiTradingStatus\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().apiTradingStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java", "class_name": "TestApiTradingStatus", "class_uri": "src/test/java/unit/spot/wallet/TestApiTradingStatus.java.TestApiTradingStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot.[void]testAccountSnapshotWithoutType()", "name": "testAccountSnapshotWithoutType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountSnapshotWithoutType()", "original_string": "    @Test\n    public void testAccountSnapshotWithoutType() {\n        String path = \"/sapi/v1/accountSnapshot\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().accountSnapshot(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java", "class_name": "TestAccountSnapshot", "class_uri": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot.[void]testAccountSnapshot()", "name": "testAccountSnapshot", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountSnapshot()", "original_string": "    @Test\n    public void testAccountSnapshot() {\n        String path = \"/sapi/v1/accountSnapshot?type=SPOT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"SPOT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().accountSnapshot(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java", "class_name": "TestAccountSnapshot", "class_uri": "src/test/java/unit/spot/wallet/TestAccountSnapshot.java.TestAccountSnapshot", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestFundingWallet.java.TestFundingWallet.[void]testFundingWallet()", "name": "testFundingWallet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFundingWallet()", "original_string": "    @Test\n    public void testFundingWallet() {\n        String path = \"/sapi/v1/asset/get-funding-asset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().fundingWallet(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestFundingWallet.java", "class_name": "TestFundingWallet", "class_uri": "src/test/java/unit/spot/wallet/TestFundingWallet.java.TestFundingWallet", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert.[void]testBusdConverWithoutMandatoryParam()", "name": "testBusdConverWithoutMandatoryParam", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBusdConverWithoutMandatoryParam()", "original_string": "    @Test\n    public void testBusdConverWithoutMandatoryParam() {\n        String path = \"/sapi/v1/asset/convert-transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"clientTranId\", \"118263407119\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"targetAsset\", \"USDC\");\n        parameters.put(\"accountType\", \"MAIN\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().busdConvert(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBusdConvert.java", "class_name": "TestBusdConvert", "class_uri": "src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert.[void]testBusdConvert()", "name": "testBusdConvert", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBusdConvert()", "original_string": "    @Test\n    public void testBusdConvert() {\n        String path = \"/sapi/v1/asset/convert-transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"clientTranId\", \"118263407119\");\n        parameters.put(\"asset\", \"BUSD\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"targetAsset\", \"USDC\");\n        parameters.put(\"accountType\", \"MAIN\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().busdConvert(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestBusdConvert.java", "class_name": "TestBusdConvert", "class_uri": "src/test/java/unit/spot/wallet/TestBusdConvert.java.TestBusdConvert", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory.[void]testDelegationHistoryWithoutParameters()", "name": "testDelegationHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDelegationHistoryWithoutParameters()", "original_string": "    @Test\n    public void testDelegationHistoryWithoutParameters() {\n        String path = \"/sapi/v1/asset/custody/transfer-history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().delegationHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDelegationHistory.java", "class_name": "TestDelegationHistory", "class_uri": "src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory.[void]testDelegationHistory()", "name": "testDelegationHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDelegationHistory()", "original_string": "    @Test\n    public void testDelegationHistory() {\n        String path = String.format(\"/sapi/v1/asset/custody/transfer-history?email=%s&startTime=%s&endTime=%s\",\n                                    UrlBuilder.urlEncode(\"alice@test.com\"), startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"email\", \"alice@test.com\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().delegationHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDelegationHistory.java", "class_name": "TestDelegationHistory", "class_uri": "src/test/java/unit/spot/wallet/TestDelegationHistory.java.TestDelegationHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer.[void]testDustTransferWithoutCoin()", "name": "testDustTransferWithoutCoin", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDustTransferWithoutCoin()", "original_string": "    @Test\n    public void testDustTransferWithoutCoin() {\n        String path = \"/sapi/v1/asset/dust\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createWallet().dustTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDustTransfer.java", "class_name": "TestDustTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer.[void]testDustTransfer()", "name": "testDustTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDustTransfer()", "original_string": "    @Test\n    public void testDustTransfer() {\n        String path = String.format(\"/sapi/v1/asset/dust?asset=%s\", UrlBuilder.urlEncode(\"[CHR, CTSI]\"));\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> assets = new ArrayList<>();\n        assets.add(\"CHR\");\n        assets.add(\"CTSI\");\n        parameters.put(\"asset\", assets);\n        \n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createWallet().dustTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/wallet/TestDustTransfer.java", "class_name": "TestDustTransfer", "class_uri": "src/test/java/unit/spot/wallet/TestDustTransfer.java.TestDustTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestDepositHistory.java.TestDepositHistory.[void]testDepositHistory()", "name": "testDepositHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepositHistory()", "original_string": "    @Test\n    public void testDepositHistory() {\n        String path = \"/sapi/v1/nft/history/deposit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createNFT().depositHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestDepositHistory.java", "class_name": "TestDepositHistory", "class_uri": "src/test/java/unit/spot/nft/TestDepositHistory.java.TestDepositHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory.[void]testTransactionsHistoryWithoutParameters()", "name": "testTransactionsHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransactionsHistoryWithoutParameters()", "original_string": "    @Test\n    public void testTransactionsHistoryWithoutParameters() {\n        String path = \"/sapi/v1/nft/history/transactions\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createNFT().transactionsHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestTransactionsHistory.java", "class_name": "TestTransactionsHistory", "class_uri": "src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory.[void]testTransactionsHistory()", "name": "testTransactionsHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTransactionsHistory()", "original_string": "    @Test\n    public void testTransactionsHistory() {\n        String path = \"/sapi/v1/nft/history/transactions?orderType=0\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderType\", orderType);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createNFT().transactionsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestTransactionsHistory.java", "class_name": "TestTransactionsHistory", "class_uri": "src/test/java/unit/spot/nft/TestTransactionsHistory.java.TestTransactionsHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestWithdrawHistory.java.TestWithdrawHistory.[void]testWithdrawHistory()", "name": "testWithdrawHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithdrawHistory()", "original_string": "    @Test\n    public void testWithdrawHistory() {\n        String path = \"/sapi/v1/nft/history/withdraw\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createNFT().withdrawHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestWithdrawHistory.java", "class_name": "TestWithdrawHistory", "class_uri": "src/test/java/unit/spot/nft/TestWithdrawHistory.java.TestWithdrawHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/nft/TestGetAsset.java.TestGetAsset.[void]testGetAsset()", "name": "testGetAsset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetAsset()", "original_string": "    @Test\n    public void testGetAsset() {\n        String path = \"/sapi/v1/nft/user/getAsset\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createNFT().getAsset(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/nft/TestGetAsset.java", "class_name": "TestGetAsset", "class_uri": "src/test/java/unit/spot/nft/TestGetAsset.java.TestGetAsset", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder.[void]testRateLimitOrder()", "name": "testRateLimitOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRateLimitOrder()", "original_string": "    @Test\n    public void testRateLimitOrder() {\n        String path = \"/api/v3/rateLimit/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().rateLimitOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestRateLimitOrder.java", "class_name": "TestRateLimitOrder", "class_uri": "src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder.[void]testRateLimitOrderWithRecvWindow()", "name": "testRateLimitOrderWithRecvWindow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRateLimitOrderWithRecvWindow()", "original_string": "    @Test\n    public void testRateLimitOrderWithRecvWindow() {\n        String path = \"/api/v3/rateLimit/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().rateLimitOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestRateLimitOrder.java", "class_name": "TestRateLimitOrder", "class_uri": "src/test/java/unit/spot/trade/TestRateLimitOrder.java.TestRateLimitOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder.[void]testCancelOrderWithoutSymbol()", "name": "testCancelOrderWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOrderWithoutSymbol()", "original_string": "    @Test\n    public void testCancelOrderWithoutSymbol() {\n        String path = \"/api/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().cancelOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOrder.java", "class_name": "TestCancelOrder", "class_uri": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder.[void]testCancelOrderWithoutOrderId()", "name": "testCancelOrderWithoutOrderId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOrderWithoutOrderId()", "original_string": "    @Test\n    public void testCancelOrderWithoutOrderId() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&orderId=\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", \"\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_CLIENT_ERROR);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceClientException.class, () -> client.createTrade().cancelOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOrder.java", "class_name": "TestCancelOrder", "class_uri": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder.[void]testCancelOrder()", "name": "testCancelOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOrder()", "original_string": "    @Test\n    public void testCancelOrder() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&orderId=123&origClientOrderId=456\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"origClientOrderId\", origClientOrderId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().cancelOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOrder.java", "class_name": "TestCancelOrder", "class_uri": "src/test/java/unit/spot/trade/TestCancelOrder.java.TestCancelOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOcoOrder.java.TestGetOcoOrder.[void]testGetOcoOrderWithoutId()", "name": "testGetOcoOrderWithoutId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOcoOrderWithoutId()", "original_string": "    @Test\n    public void testGetOcoOrderWithoutId() {\n        String path = \"/api/v3/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_CLIENT_ERROR);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceClientException.class, () -> client.createTrade().getOCOOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOcoOrder.java", "class_name": "TestGetOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestGetOcoOrder.java.TestGetOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOcoOrder.java.TestGetOcoOrder.[void]testCancelOpenOrders()", "name": "testCancelOpenOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOpenOrders()", "original_string": "    @Test\n    public void testCancelOpenOrders() {\n        String path = \"/api/v3/orderList?symbol=BNBUSDT&orderListId=123&origClientOrderId=456&recvWindow=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderListId\", orderListId);\n        parameters.put(\"origClientOrderId\", origClientOrderId);\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOCOOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOcoOrder.java", "class_name": "TestGetOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestGetOcoOrder.java.TestGetOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace.[void]testCancelReplaceWithoutParameters()", "name": "testCancelReplaceWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelReplaceWithoutParameters()", "original_string": "    @Test\n    public void testCancelReplaceWithoutParameters() {\n        String path = \"/api/v3/order/cancelReplace\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().cancelReplace(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelReplace.java", "class_name": "TestCancelReplace", "class_uri": "src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace.[void]testCancelReplace()", "name": "testCancelReplace", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelReplace()", "original_string": "    @Test\n    public void testCancelReplace() {\n        String path = \"/api/v3/order/cancelReplace?symbol=BNBUSDT&side=BUY&type=MARKET&cancelReplaceMode=STOP_ON_FAILURE&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"cancelReplaceMode\", \"STOP_ON_FAILURE\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().cancelReplace(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelReplace.java", "class_name": "TestCancelReplace", "class_uri": "src/test/java/unit/spot/trade/TestCancelReplace.java.TestCancelReplace", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades.[void]testMyTradesWithoutSymbol()", "name": "testMyTradesWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMyTradesWithoutSymbol()", "original_string": "    @Test\n    public void testMyTradesWithoutSymbol() {\n        String path = \"/api/v3/myTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().myTrades(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestMyTrades.java", "class_name": "TestMyTrades", "class_uri": "src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades.[void]testMyTrades()", "name": "testMyTrades", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testMyTrades()", "original_string": "    @Test\n    public void testMyTrades() {\n        String path = String.format(\"/api/v3/myTrades?symbol=BNBUSDT&orderId=123&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().myTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestMyTrades.java", "class_name": "TestMyTrades", "class_uri": "src/test/java/unit/spot/trade/TestMyTrades.java.TestMyTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder.[void]testTestSorOrderWithoutParameters()", "name": "testTestSorOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTestSorOrderWithoutParameters()", "original_string": "    @Test\n    public void testTestSorOrderWithoutParameters() {\n        String path = \"/api/v3/sor/order/test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().testSorOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestTestSorOrder.java", "class_name": "TestTestSorOrder", "class_uri": "src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder.[void]testTestSorOrder()", "name": "testTestSorOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTestSorOrder()", "original_string": "    @Test\n    public void testTestSorOrder() {\n        String path = \"/api/v3/sor/order/test?symbol=BNBUSDT&side=SELL&type=LIMIT&quantity=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().testSorOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestTestSorOrder.java", "class_name": "TestTestSorOrder", "class_uri": "src/test/java/unit/spot/trade/TestTestSorOrder.java.TestTestSorOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders.[void]testGetOrdersWithoutSymbol()", "name": "testGetOrdersWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOrdersWithoutSymbol()", "original_string": "    @Test\n    public void testGetOrdersWithoutSymbol() {\n        String path = \"/api/v3/allOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().getOrders(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOrders.java", "class_name": "TestGetOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders.[void]testGetOrders()", "name": "testGetOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOrders()", "original_string": "    @Test\n    public void testGetOrders() {\n        String path = String.format(\"/api/v3/allOrders?symbol=BNBUSDT&orderId=123&origClientOrderId=456&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"origClientOrderId\", origClientOrderId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOrders.java", "class_name": "TestGetOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOrders.java.TestGetOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders.[void]testGetOpenOrdersWithoutParams()", "name": "testGetOpenOrdersWithoutParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOpenOrdersWithoutParams()", "original_string": "    @Test\n    public void testGetOpenOrdersWithoutParams() {\n        String path = \"/api/v3/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOpenOrders.java", "class_name": "TestGetOpenOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders.[void]testGetOpenOrdersWithParams()", "name": "testGetOpenOrdersWithParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOpenOrdersWithParams()", "original_string": "    @Test\n    public void testGetOpenOrdersWithParams() {\n        String path = \"/api/v3/openOrders?symbol=BNBUSDT&recvWindow=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOpenOrders.java", "class_name": "TestGetOpenOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOpenOrders.java.TestGetOpenOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder.[void]testGetOrderWithoutSymbol()", "name": "testGetOrderWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOrderWithoutSymbol()", "original_string": "    @Test\n    public void testGetOrderWithoutSymbol() {\n        String path = \"/api/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().getOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOrder.java", "class_name": "TestGetOrder", "class_uri": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder.[void]testGetOrderWithoutOrderId()", "name": "testGetOrderWithoutOrderId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOrderWithoutOrderId()", "original_string": "    @Test\n    public void testGetOrderWithoutOrderId() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&orderId=\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", \"\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_CLIENT_ERROR);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceClientException.class, () -> client.createTrade().getOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOrder.java", "class_name": "TestGetOrder", "class_uri": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder.[void]testGetOrder()", "name": "testGetOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOrder()", "original_string": "    @Test\n    public void testGetOrder() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&orderId=123&origClientOrderId=456\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"origClientOrderId\", origClientOrderId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOrder.java", "class_name": "TestGetOrder", "class_uri": "src/test/java/unit/spot/trade/TestGetOrder.java.TestGetOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder.[void]testOcoOrderWithoutParameters()", "name": "testOcoOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOcoOrderWithoutParameters()", "original_string": "    @Test\n    public void testOcoOrderWithoutParameters() {\n        String path = \"/api/v3/order/oco\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().ocoOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestOcoOrder.java", "class_name": "TestOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder.[void]testOcoOrder()", "name": "testOcoOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOcoOrder()", "original_string": "    @Test\n    public void testOcoOrder() {\n        String path = \"/api/v3/order/oco?symbol=BNBUSDT&side=SELL&price=9500&quantity=0.01&stopPrice=7500\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"price\", price);\n        parameters.put(\"quantity\", quantity);\n        parameters.put(\"stopPrice\", stopPrice);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().ocoOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestOcoOrder.java", "class_name": "TestOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestOcoOrder.java.TestOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestAccount.java.TestAccount.[void]testAccount()", "name": "testAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccount()", "original_string": "    @Test\n    public void testAccount() {\n        String path = \"/api/v3/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().account(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestAccount.java", "class_name": "TestAccount", "class_uri": "src/test/java/unit/spot/trade/TestAccount.java.TestAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestAccount.java.TestAccount.[void]testAccountWithRecvWindow()", "name": "testAccountWithRecvWindow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAccountWithRecvWindow()", "original_string": "    @Test\n    public void testAccountWithRecvWindow() {\n        String path = \"/api/v3/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().account(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestAccount.java", "class_name": "TestAccount", "class_uri": "src/test/java/unit/spot/trade/TestAccount.java.TestAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest.[void]testNewOrderWithoutParameters()", "name": "testNewOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewOrderWithoutParameters()", "original_string": "    @Test\n    public void testNewOrderWithoutParameters() {\n        String path = \"/api/v3/order/test\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().testNewOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestNewOrderTest.java", "class_name": "TestNewOrderTest", "class_uri": "src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest.[void]testNewOrderTest()", "name": "testNewOrderTest", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewOrderTest()", "original_string": "    @Test\n    public void testNewOrderTest() {\n        String path = \"/api/v3/order/test?symbol=BNBUSDT&side=BUY&type=MARKET&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().testNewOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestNewOrderTest.java", "class_name": "TestNewOrderTest", "class_uri": "src/test/java/unit/spot/trade/TestNewOrderTest.java.TestNewOrderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations.[void]testSorAllocationsWithoutParameters()", "name": "testSorAllocationsWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSorAllocationsWithoutParameters()", "original_string": "    @Test\n    public void testSorAllocationsWithoutParameters() {\n        String path = \"/api/v3/myAllocations\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().sorAllocations(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestSorAllocations.java", "class_name": "TestSorAllocations", "class_uri": "src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations.[void]testSorAllocations()", "name": "testSorAllocations", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSorAllocations()", "original_string": "    @Test\n    public void testSorAllocations() {\n        String path = \"/api/v3/myAllocations?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().sorAllocations(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestSorAllocations.java", "class_name": "TestSorAllocations", "class_uri": "src/test/java/unit/spot/trade/TestSorAllocations.java.TestSorAllocations", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders.[void]testGetOcoOrdersWithoutParams()", "name": "testGetOcoOrdersWithoutParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOcoOrdersWithoutParams()", "original_string": "    @Test\n    public void testGetOcoOrdersWithoutParams() {\n        String path = \"/api/v3/allOrderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOCOOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOcoOrders.java", "class_name": "TestGetOcoOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders.[void]testGetOcoOrdersWithParams()", "name": "testGetOcoOrdersWithParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOcoOrdersWithParams()", "original_string": "    @Test\n    public void testGetOcoOrdersWithParams() {\n        String path = String.format(\"/api/v3/allOrderList?fromId=123&startTime=%s&endTime=%s&limit=10\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromId\", fromId);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOCOOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOcoOrders.java", "class_name": "TestGetOcoOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOcoOrders.java.TestGetOcoOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder.[void]testCancelOCOWithoutSymbol()", "name": "testCancelOCOWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOCOWithoutSymbol()", "original_string": "    @Test\n    public void testCancelOCOWithoutSymbol() {\n        String path = \"/api/v3/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().cancelOCO(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java", "class_name": "TestCancelOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder.[void]testCancelOCO()", "name": "testCancelOCO", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOCO()", "original_string": "    @Test\n    public void testCancelOCO() {\n        String path = \"/api/v3/orderList\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"orderListId\", orderListId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().cancelOCO(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java", "class_name": "TestCancelOcoOrder", "class_uri": "src/test/java/unit/spot/trade/TestCancelOcoOrder.java.TestCancelOcoOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches.[void]testPreventedMatchesWithoutParameters()", "name": "testPreventedMatchesWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreventedMatchesWithoutParameters()", "original_string": "    @Test\n    public void testPreventedMatchesWithoutParameters() {\n        String path = \"/api/v3/myPreventedMatches\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().preventedMatches(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestPreventedMatches.java", "class_name": "TestPreventedMatches", "class_uri": "src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches.[void]testPreventedMatches()", "name": "testPreventedMatches", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreventedMatches()", "original_string": "    @Test\n    public void testPreventedMatches() {\n        String path = \"/api/v3/myPreventedMatches?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().preventedMatches(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestPreventedMatches.java", "class_name": "TestPreventedMatches", "class_uri": "src/test/java/unit/spot/trade/TestPreventedMatches.java.TestPreventedMatches", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder.[void]testSorOrderWithoutParameters()", "name": "testSorOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSorOrderWithoutParameters()", "original_string": "    @Test\n    public void testSorOrderWithoutParameters() {\n        String path = \"/api/v3/sor/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().sorOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestSorOrder.java", "class_name": "TestSorOrder", "class_uri": "src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder.[void]testSorOrder()", "name": "testSorOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSorOrder()", "original_string": "    @Test\n    public void testSorOrder() {\n        String path = \"/api/v3/sor/order?symbol=BNBUSDT&side=SELL&type=LIMIT&quantity=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"SELL\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().sorOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestSorOrder.java", "class_name": "TestSorOrder", "class_uri": "src/test/java/unit/spot/trade/TestSorOrder.java.TestSorOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java.TestGetOpenOcoOrders.[void]testGetOpenOcoOrdersWithParams()", "name": "testGetOpenOcoOrdersWithParams", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetOpenOcoOrdersWithParams()", "original_string": "    @Test\n    public void testGetOpenOcoOrdersWithParams() {\n        String path = String.format(\"/api/v3/openOrderList?recvWindow=1000\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().getOpenOCOOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java", "class_name": "TestGetOpenOcoOrders", "class_uri": "src/test/java/unit/spot/trade/TestGetOpenOcoOrders.java.TestGetOpenOcoOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders.[void]testCancelOpenOrdersWithoutSymbol()", "name": "testCancelOpenOrdersWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOpenOrdersWithoutSymbol()", "original_string": "    @Test\n    public void testCancelOpenOrdersWithoutSymbol() {\n        String path = \"/api/v3/openOrders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().cancelOpenOrders(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java", "class_name": "TestCancelOpenOrders", "class_uri": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders.[void]testCancelOpenOrdersWhenNoOpenOrders()", "name": "testCancelOpenOrdersWhenNoOpenOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOpenOrdersWhenNoOpenOrders()", "original_string": "    @Test\n    public void testCancelOpenOrdersWhenNoOpenOrders() {\n        String path = \"/api/v3/openOrders?symbol=ETHBTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"ETHBTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_CLIENT_ERROR);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceClientException.class, () -> client.createTrade().cancelOpenOrders(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java", "class_name": "TestCancelOpenOrders", "class_uri": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders.[void]testCancelOpenOrders()", "name": "testCancelOpenOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCancelOpenOrders()", "original_string": "    @Test\n    public void testCancelOpenOrders() {\n        String path = \"/api/v3/openOrders?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.DELETE, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().cancelOpenOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java", "class_name": "TestCancelOpenOrders", "class_uri": "src/test/java/unit/spot/trade/TestCancelOpenOrders.java.TestCancelOpenOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCommission.java.TestCommission.[void]testCommissionWithoutParameters()", "name": "testCommissionWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCommissionWithoutParameters()", "original_string": "    @Test\n    public void testCommissionWithoutParameters() {\n        String path = \"/api/v3/account/commission\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().commission(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCommission.java", "class_name": "TestCommission", "class_uri": "src/test/java/unit/spot/trade/TestCommission.java.TestCommission", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestCommission.java.TestCommission.[void]testCommission()", "name": "testCommission", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCommission()", "original_string": "    @Test\n    public void testCommission() {\n        String path = \"/api/v3/account/commission?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().commission(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestCommission.java", "class_name": "TestCommission", "class_uri": "src/test/java/unit/spot/trade/TestCommission.java.TestCommission", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder.[void]testNewOrderWithoutParameters()", "name": "testNewOrderWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewOrderWithoutParameters()", "original_string": "    @Test\n    public void testNewOrderWithoutParameters() {\n        String path = \"/api/v3/order\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createTrade().newOrder(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestNewOrder.java", "class_name": "TestNewOrder", "class_uri": "src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder.[void]testNewOrder()", "name": "testNewOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNewOrder()", "original_string": "    @Test\n    public void testNewOrder() {\n        String path = \"/api/v3/order?symbol=BNBUSDT&side=BUY&type=MARKET&quantity=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"MARKET\");\n        parameters.put(\"quantity\", quantity);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createTrade().newOrder(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/trade/TestNewOrder.java", "class_name": "TestNewOrder", "class_uri": "src/test/java/unit/spot/trade/TestNewOrder.java.TestNewOrder", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome.[void]testLoanIncomeWithoutParameters()", "name": "testLoanIncomeWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanIncomeWithoutParameters()", "original_string": "    @Test\n    public void testLoanIncomeWithoutParameters() {\n        String path = \"/sapi/v1/loan/income\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanIncome(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java", "class_name": "TestLoanIncome", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome.[void]testLoanIncome()", "name": "testLoanIncome", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanIncome()", "original_string": "    @Test\n    public void testLoanIncome() {\n        String path = \"/sapi/v1/loan/income?asset=BNB&type=collateralSpent\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"BNB\");\n        parameters.put(\"type\", \"collateralSpent\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanIncome(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java", "class_name": "TestLoanIncome", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanIncome.java.TestLoanIncome", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java.TestFlexibleLoanRepayHistory.[void]testRepayGetFlexibleLoanRepaymentHistory()", "name": "testRepayGetFlexibleLoanRepaymentHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepayGetFlexibleLoanRepaymentHistory()", "original_string": "    @Test\n    public void testRepayGetFlexibleLoanRepaymentHistory() {\n        String path = \"/sapi/v1/loan/flexible/repay/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java", "class_name": "TestFlexibleLoanRepayHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepayHistory.java.TestFlexibleLoanRepayHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java.TestFlexibleLoanAssets.[void]testFlexibleLoanAssets()", "name": "testFlexibleLoanAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanAssets()", "original_string": "    @Test\n    public void testFlexibleLoanAssets() {\n        String path = \"/sapi/v1/loan/flexible/loanable/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java", "class_name": "TestFlexibleLoanAssets", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAssets.java.TestFlexibleLoanAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory.[void]testLoanBorrowHistoryWithoutParameters()", "name": "testLoanBorrowHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanBorrowHistoryWithoutParameters()", "original_string": "    @Test\n    public void testLoanBorrowHistoryWithoutParameters() {\n        String path = \"/sapi/v1/loan/borrow/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrowHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java", "class_name": "TestLoanBorrowHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory.[void]testLoanBorrowHistory()", "name": "testLoanBorrowHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanBorrowHistory()", "original_string": "    @Test\n    public void testLoanBorrowHistory() {\n        String path = \"/sapi/v1/loan/borrow/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrowHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java", "class_name": "TestLoanBorrowHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanBorrowHistory.java.TestLoanBorrowHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData.[void]testLoanAssetsDataWithoutParameters()", "name": "testLoanAssetsDataWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAssetsDataWithoutParameters()", "original_string": "    @Test\n    public void testLoanAssetsDataWithoutParameters() {\n        String path = \"/sapi/v1/loan/loanable/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java", "class_name": "TestLoanAssetsData", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData.[void]testLoanAssetsData()", "name": "testLoanAssetsData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAssetsData()", "original_string": "    @Test\n    public void testLoanAssetsData() {\n        String path = \"/sapi/v1/loan/loanable/data\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java", "class_name": "TestLoanAssetsData", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAssetsData.java.TestLoanAssetsData", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV.[void]testLoanAdjustLTVWithoutParameters()", "name": "testLoanAdjustLTVWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAdjustLTVWithoutParameters()", "original_string": "    @Test\n    public void testLoanAdjustLTVWithoutParameters() {\n        String path = \"/sapi/v1/loan/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanAdjustLTV(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java", "class_name": "TestLoanAdjustLTV", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV.[void]testLoanAdjustLTV()", "name": "testLoanAdjustLTV", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAdjustLTV()", "original_string": "    @Test\n    public void testLoanAdjustLTV() {\n        String path = \"/sapi/v1/loan/adjust/ltv?orderId=100000001&amount=10.1\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAdjustLTV(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java", "class_name": "TestLoanAdjustLTV", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTV.java.TestLoanAdjustLTV", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate.[void]testCollateralRepayRateWithoutParameters()", "name": "testCollateralRepayRateWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRepayRateWithoutParameters()", "original_string": "    @Test\n    public void testCollateralRepayRateWithoutParameters() {\n        String path = \"/sapi/v1/loan/repay/collateral/rate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().collateralRepayRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java", "class_name": "TestCollateralRepayRate", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate.[void]testCollateralRepayRate()", "name": "testCollateralRepayRate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRepayRate()", "original_string": "    @Test\n    public void testCollateralRepayRate() {\n        String path = \"/sapi/v1/loan/repay/collateral/rate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"repayAmount\", repayAmount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().collateralRepayRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java", "class_name": "TestCollateralRepayRate", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCollateralRepayRate.java.TestCollateralRepayRate", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory.[void]testLoanAdjustLTVHistoryWithoutParameters()", "name": "testLoanAdjustLTVHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAdjustLTVHistoryWithoutParameters()", "original_string": "    @Test\n    public void testLoanAdjustLTVHistoryWithoutParameters() {\n        String path = \"/sapi/v1/loan/ltv/adjustment/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAdjustLTVHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java", "class_name": "TestLoanAdjustLTVHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory.[void]testLoanAdjustLTVHistory()", "name": "testLoanAdjustLTVHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanAdjustLTVHistory()", "original_string": "    @Test\n    public void testLoanAdjustLTVHistory() {\n        String path = \"/sapi/v1/loan/ltv/adjustment/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanAdjustLTVHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java", "class_name": "TestLoanAdjustLTVHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanAdjustLTVHistory.java.TestLoanAdjustLTVHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay.[void]testFlexibleLoanRepayWithoutParameters()", "name": "testFlexibleLoanRepayWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanRepayWithoutParameters()", "original_string": "    @Test\n    public void testFlexibleLoanRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanRepay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java", "class_name": "TestFlexibleLoanRepay", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay.[void]testFlexibleLoanRepay()", "name": "testFlexibleLoanRepay", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanRepay()", "original_string": "    @Test\n    public void testFlexibleLoanRepay() {\n        String path = \"/sapi/v1/loan/flexible/repay?loanCoin=USDT&collateralCoin=BTC&repayAmount=\" + repayAmount;\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n        parameters.put(\"collateralCoin\", \"BTC\");\n        parameters.put(\"repayAmount\", repayAmount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java", "class_name": "TestFlexibleLoanRepay", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanRepay.java.TestFlexibleLoanRepay", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java.TestFlexibleLoanLtvAdjustHistory.[void]testFlexibleLoanLtvAdjustHistory()", "name": "testFlexibleLoanLtvAdjustHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanLtvAdjustHistory()", "original_string": "    @Test\n    public void testFlexibleLoanLtvAdjustHistory() {\n        String path = \"/sapi/v1/loan/flexible/ltv/adjustment/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanLtvAdjustHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java", "class_name": "TestFlexibleLoanLtvAdjustHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanLtvAdjustHistory.java.TestFlexibleLoanLtvAdjustHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow.[void]testFlexibleLoanBorrowWithoutParameters()", "name": "testFlexibleLoanBorrowWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanBorrowWithoutParameters()", "original_string": "    @Test\n    public void testFlexibleLoanBorrowWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanBorrow(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java", "class_name": "TestFlexibleLoanBorrow", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow.[void]testFlexibleLoanBorrow()", "name": "testFlexibleLoanBorrow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanBorrow()", "original_string": "    @Test\n    public void testFlexibleLoanBorrow() {\n        String path = \"/sapi/v1/loan/flexible/borrow?loanCoin=USDT&collateralCoin=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"USDT\");\n        parameters.put(\"collateralCoin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java", "class_name": "TestFlexibleLoanBorrow", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrow.java.TestFlexibleLoanBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory.[void]testLoanRepayHistoryWithoutParameters()", "name": "testLoanRepayHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanRepayHistoryWithoutParameters()", "original_string": "    @Test\n    public void testLoanRepayHistoryWithoutParameters() {\n        String path = \"/sapi/v1/loan/repay/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java", "class_name": "TestLoanRepayHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory.[void]testLoanRepayHistory()", "name": "testLoanRepayHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanRepayHistory()", "original_string": "    @Test\n    public void testLoanRepayHistory() {\n        String path = \"/sapi/v1/loan/repay/history?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanRepayHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java", "class_name": "TestLoanRepayHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanRepayHistory.java.TestLoanRepayHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv.[void]testFlexibleLoanAdjustLtvWithoutParameters()", "name": "testFlexibleLoanAdjustLtvWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanAdjustLtvWithoutParameters()", "original_string": "    @Test\n    public void testFlexibleLoanAdjustLtvWithoutParameters() {\n        String path = \"/sapi/v1/loan/flexible/adjust/ltv\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().flexibleLoanAdjustLtv(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java", "class_name": "TestFlexibleLoanAdjustLtv", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv.[void]testFlexibleLoanAdjustLtv()", "name": "testFlexibleLoanAdjustLtv", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanAdjustLtv()", "original_string": "    @Test\n    public void testFlexibleLoanAdjustLtv() {\n        String path = \"/sapi/v1/loan/flexible/adjust/ltv?loanCoin=BUSD&collateralCoin=BNB&adjustmentAmount=5.235&direction=ADDITIONAL\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"adjustmentAmount\", adjustmentAmount);\n        parameters.put(\"direction\", \"ADDITIONAL\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanAdjustLtv(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java", "class_name": "TestFlexibleLoanAdjustLtv", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanAdjustLtv.java.TestFlexibleLoanAdjustLtv", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java.TestFlexibleLoanCollateralAssets.[void]testGetFlexibleLoanCollateralAssetsData()", "name": "testGetFlexibleLoanCollateralAssetsData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetFlexibleLoanCollateralAssetsData()", "original_string": "    @Test\n    public void testGetFlexibleLoanCollateralAssetsData() {\n        String path = \"/sapi/v1/loan/flexible/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanCollateralAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java", "class_name": "TestFlexibleLoanCollateralAssets", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanCollateralAssets.java.TestFlexibleLoanCollateralAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay.[void]testLoanRepayWithoutParameters()", "name": "testLoanRepayWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanRepayWithoutParameters()", "original_string": "    @Test\n    public void testLoanRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanRepay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java", "class_name": "TestLoanRepay", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay.[void]testLoanRepay()", "name": "testLoanRepay", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanRepay()", "original_string": "    @Test\n    public void testLoanRepay() {\n        String path = \"/sapi/v1/loan/repay?orderId=100000001&amount=10.1\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanRepay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java", "class_name": "TestLoanRepay", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanRepay.java.TestLoanRepay", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall.[void]testCustomizeMarginCallWithoutParameters()", "name": "testCustomizeMarginCallWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCustomizeMarginCallWithoutParameters()", "original_string": "    @Test\n    public void testCustomizeMarginCallWithoutParameters() {\n        String path = \"/sapi/v1/loan/customize/margin_call\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().collateralRepayRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java", "class_name": "TestCustomizeMarginCall", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall.[void]testCustomizeMarginCall()", "name": "testCustomizeMarginCall", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCustomizeMarginCall()", "original_string": "    @Test\n    public void testCustomizeMarginCall() {\n        String path = \"/sapi/v1/loan/customize/margin_call\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"marginCall\", marginCall);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().customizeMarginCall(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java", "class_name": "TestCustomizeMarginCall", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCustomizeMarginCall.java.TestCustomizeMarginCall", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData.[void]testCollateralAssetsDataWithoutParameters()", "name": "testCollateralAssetsDataWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralAssetsDataWithoutParameters()", "original_string": "    @Test\n    public void testCollateralAssetsDataWithoutParameters() {\n        String path = \"/sapi/v1/loan/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().collateralAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java", "class_name": "TestCollateralAssetsData", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData.[void]testCollateralAssetsData()", "name": "testCollateralAssetsData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralAssetsData()", "original_string": "    @Test\n    public void testCollateralAssetsData() {\n        String path = \"/sapi/v1/loan/collateral/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BNB\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().collateralAssetsData(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java", "class_name": "TestCollateralAssetsData", "class_uri": "src/test/java/unit/spot/cryptoloans/TestCollateralAssetsData.java.TestCollateralAssetsData", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java.TestFlexibleLoanOngoingOrders.[void]testFlexibleLoanOngoingOrders()", "name": "testFlexibleLoanOngoingOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanOngoingOrders()", "original_string": "    @Test\n    public void testFlexibleLoanOngoingOrders() {\n        String path = \"/sapi/v1/loan/flexible/ongoing/orders?loanCoin=BUSD\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanOngoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java", "class_name": "TestFlexibleLoanOngoingOrders", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanOngoingOrders.java.TestFlexibleLoanOngoingOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java.TestFlexibleLoanBorrowHistory.[void]testFlexibleLoanBorrowHistory()", "name": "testFlexibleLoanBorrowHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleLoanBorrowHistory()", "original_string": "    @Test\n    public void testFlexibleLoanBorrowHistory() {\n        String path = \"/sapi/v1/loan/flexible/borrow/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().flexibleLoanBorrowHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java", "class_name": "TestFlexibleLoanBorrowHistory", "class_uri": "src/test/java/unit/spot/cryptoloans/TestFlexibleLoanBorrowHistory.java.TestFlexibleLoanBorrowHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders.[void]testLoanOngoingOrdersWithoutParameters()", "name": "testLoanOngoingOrdersWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanOngoingOrdersWithoutParameters()", "original_string": "    @Test\n    public void testLoanOngoingOrdersWithoutParameters() {\n        String path = \"/sapi/v1/loan/ongoing/orders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanOngoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java", "class_name": "TestLoanOngoingOrders", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders.[void]testLoanOngoingOrders()", "name": "testLoanOngoingOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanOngoingOrders()", "original_string": "    @Test\n    public void testLoanOngoingOrders() {\n        String path = \"/sapi/v1/loan/ongoing/orders?orderId=100000001&loanCoin=BUSD\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"loanCoin\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanOngoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java", "class_name": "TestLoanOngoingOrders", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanOngoingOrders.java.TestLoanOngoingOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow.[void]testLoanBorrowWithoutParameters()", "name": "testLoanBorrowWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanBorrowWithoutParameters()", "original_string": "    @Test\n    public void testLoanBorrowWithoutParameters() {\n        String path = \"/sapi/v1/loan/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createCryptoLoans().loanBorrow(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java", "class_name": "TestLoanBorrow", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow.[void]testLoanBorrow()", "name": "testLoanBorrow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanBorrow()", "original_string": "    @Test\n    public void testLoanBorrow() {\n        String path = \"/sapi/v1/loan/borrow?loanCoin=BUSD&collateralCoin=BNB&loanAmount=100.5&loanTerm=7&\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BUSD\");\n        parameters.put(\"collateralCoin\", \"BNB\");\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanTerm\", loanTerm);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createCryptoLoans().loanBorrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java", "class_name": "TestLoanBorrow", "class_uri": "src/test/java/unit/spot/cryptoloans/TestLoanBorrow.java.TestLoanBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate.[void]testBorrowInterestRateWithoutParameters()", "name": "testBorrowInterestRateWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBorrowInterestRateWithoutParameters()", "original_string": "    @Test\n    public void testBorrowInterestRateWithoutParameters() {\n        String path = \"/sapi/v1/loan/vip/request/interestRate\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createVIPLoans().borrowInterestRate(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java", "class_name": "TestBorrowInterestRate", "class_uri": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate.[void]testBorrowInterestRate()", "name": "testBorrowInterestRate", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBorrowInterestRate()", "original_string": "    @Test\n    public void testBorrowInterestRate() {\n        String path = \"/sapi/v1/loan/vip/request/interestRate?loanCoin=BTC\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanCoin\", \"BTC\");\n        String result = client.createVIPLoans().borrowInterestRate(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java", "class_name": "TestBorrowInterestRate", "class_uri": "src/test/java/unit/spot/viploans/TestBorrowInterestRate.java.TestBorrowInterestRate", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestCollateralAccount.java.TestCollateralAccount.[void]testCollateralAccount()", "name": "testCollateralAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralAccount()", "original_string": "    @Test\n    public void testCollateralAccount() {\n        String path = \"/sapi/v1/loan/vip/collateral/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().collateralAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestCollateralAccount.java", "class_name": "TestCollateralAccount", "class_uri": "src/test/java/unit/spot/viploans/TestCollateralAccount.java.TestCollateralAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestOrderStatus.java.TestOrderStatus.[void]testOrderStatus()", "name": "testOrderStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrderStatus()", "original_string": "    @Test\n    public void testOrderStatus() {\n        String path = \"/sapi/v1/loan/vip/request/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().orderStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestOrderStatus.java", "class_name": "TestOrderStatus", "class_uri": "src/test/java/unit/spot/viploans/TestOrderStatus.java.TestOrderStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow.[void]testBorrowWithoutParameters()", "name": "testBorrowWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBorrowWithoutParameters()", "original_string": "    @Test\n    public void testBorrowWithoutParameters() {\n        String path = \"/sapi/v1/loan/vip/borrow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createVIPLoans().borrow(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestBorrow.java", "class_name": "TestBorrow", "class_uri": "src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow.[void]testBorrow()", "name": "testBorrow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBorrow()", "original_string": "    @Test\n    public void testBorrow() {\n        String path = String.format(\"/sapi/v1/loan/vip/borrow?loanAccountId=%s&loanAmount=%s&loanCoin=%s&collateralAccountId=%s&collateralCoin=%s&isFlexibleRate=true\", loanAccountId, loanAmount, \"BTC\", \"87654321\", \"BUSD\");\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"loanAccountId\", loanAccountId);\n        parameters.put(\"loanAmount\", loanAmount);\n        parameters.put(\"loanCoin\", \"BTC\");\n        parameters.put(\"collateralAccountId\", \"87654321\");\n        parameters.put(\"collateralCoin\", \"BUSD\");\n        parameters.put(\"isFlexibleRate\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().borrow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestBorrow.java", "class_name": "TestBorrow", "class_uri": "src/test/java/unit/spot/viploans/TestBorrow.java.TestBorrow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestLoanableAssets.java.TestLoanableAssets.[void]testLoanableAssets()", "name": "testLoanableAssets", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLoanableAssets()", "original_string": "    @Test\n    public void testLoanableAssets() {\n        String path = \"/sapi/v1/loan/vip/loanable/data\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().loanableAssets(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestLoanableAssets.java", "class_name": "TestLoanableAssets", "class_uri": "src/test/java/unit/spot/viploans/TestLoanableAssets.java.TestLoanableAssets", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestCollateralAsset.java.TestCollateralAsset.[void]testCollateralAsset()", "name": "testCollateralAsset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralAsset()", "original_string": "    @Test\n    public void testCollateralAsset() {\n        String path = \"/sapi/v1/loan/vip/collateral/data?collateralCoin=BTC\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"collateralCoin\", \"BTC\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().collateralAsset(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestCollateralAsset.java", "class_name": "TestCollateralAsset", "class_uri": "src/test/java/unit/spot/viploans/TestCollateralAsset.java.TestCollateralAsset", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRepay.java.TestRepay.[void]testRepayWithoutParameters()", "name": "testRepayWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepayWithoutParameters()", "original_string": "    @Test\n    public void testRepayWithoutParameters() {\n        String path = \"/sapi/v1/loan/vip/repay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createVIPLoans().repay(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRepay.java", "class_name": "TestRepay", "class_uri": "src/test/java/unit/spot/viploans/TestRepay.java.TestRepay", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRepay.java.TestRepay.[void]testRepay()", "name": "testRepay", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepay()", "original_string": "    @Test\n    public void testRepay() {\n        String path = \"/sapi/v1/loan/vip/repay?orderId=12345678&amount=100.55\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().repay(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRepay.java", "class_name": "TestRepay", "class_uri": "src/test/java/unit/spot/viploans/TestRepay.java.TestRepay", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRenew.java.TestRenew.[void]testRenewWithoutParameters()", "name": "testRenewWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenewWithoutParameters()", "original_string": "    @Test\n    public void testRenewWithoutParameters() {\n        String path = \"/sapi/v1/loan/vip/renew\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createVIPLoans().renew(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRenew.java", "class_name": "TestRenew", "class_uri": "src/test/java/unit/spot/viploans/TestRenew.java.TestRenew", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRenew.java.TestRenew.[void]testRenew()", "name": "testRenew", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRenew()", "original_string": "    @Test\n    public void testRenew() {\n        String path = String.format(\"/sapi/v1/loan/vip/renew?orderId=%d\", orderId, loanTerm);\n        System.out.println(path);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"orderId\", orderId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().renew(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRenew.java", "class_name": "TestRenew", "class_uri": "src/test/java/unit/spot/viploans/TestRenew.java.TestRenew", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java.TestRepaymentHistory.[void]testRepaymentHistory()", "name": "testRepaymentHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRepaymentHistory()", "original_string": "    @Test\n    public void testRepaymentHistory() {\n        String path = \"/sapi/v1/loan/vip/repay/history\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().repaymentHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java", "class_name": "TestRepaymentHistory", "class_uri": "src/test/java/unit/spot/viploans/TestRepaymentHistory.java.TestRepaymentHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/viploans/TestOngoingOrders.java.TestOngoingOrders.[void]testOngoingOrders()", "name": "testOngoingOrders", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOngoingOrders()", "original_string": "    @Test\n    public void testOngoingOrders() {\n        String path = \"/sapi/v1/loan/vip/ongoing/orders\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createVIPLoans().ongoingOrders(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/viploans/TestOngoingOrders.java", "class_name": "TestOngoingOrders", "class_uri": "src/test/java/unit/spot/viploans/TestOngoingOrders.java.TestOngoingOrders", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/rebate/TestTaxQuery.java.TestTaxQuery.[void]testTaxQuery()", "name": "testTaxQuery", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTaxQuery()", "original_string": "    @Test\n    public void testTaxQuery() {\n        String path = \"/sapi/v1/rebate/taxQuery\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createRebate().taxQuery(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/rebate/TestTaxQuery.java", "class_name": "TestTaxQuery", "class_uri": "src/test/java/unit/spot/rebate/TestTaxQuery.java.TestTaxQuery", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testHttpProxyWithRefusedConnection()", "name": "testHttpProxyWithRefusedConnection", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHttpProxyWithRefusedConnection()", "original_string": "    @Test\n    public void testHttpProxyWithRefusedConnection() {\n        SpotClient client = new SpotClientImpl(baseUrl);\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testHttpProxyWithUnknownHost()", "name": "testHttpProxyWithUnknownHost", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHttpProxyWithUnknownHost()", "original_string": "    @Test\n    public void testHttpProxyWithUnknownHost() {\n        SpotClient client = new SpotClientImpl(baseUrl);\n        Proxy proxyConn =  new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"address\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testNullProxyToWithProxy()", "name": "testNullProxyToWithProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullProxyToWithProxy()", "original_string": "    @Test\n    public void testNullProxyToWithProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        // Request without Proxy\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().time();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testNullProxyToNoProxy()", "name": "testNullProxyToNoProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNullProxyToNoProxy()", "original_string": "    @Test\n    public void testNullProxyToNoProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        // Request without Proxy\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().time();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testWithProxyToNullProxy()", "name": "testWithProxyToNullProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithProxyToNullProxy()", "original_string": "    @Test\n    public void testWithProxyToNullProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n\n        // Request without Proxy\n        client.unsetProxy();\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testWithProxyToNoProxy()", "name": "testWithProxyToNoProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testWithProxyToNoProxy()", "original_string": "    @Test\n    public void testWithProxyToNoProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testNoProxyToNullProxy()", "name": "testNoProxyToNullProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoProxyToNullProxy()", "original_string": "    @Test\n    public void testNoProxyToNullProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n\n        // Request without Proxy\n        client.unsetProxy();\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n        \n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy.[void]testNoProxyToWithProxy()", "name": "testNoProxyToWithProxy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testNoProxyToWithProxy()", "original_string": "    @Test\n    public void testNoProxyToWithProxy() {\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, \"/api/v3/time\", MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n        SpotClient client = new SpotClientImpl(baseUrl);\n\n        // Request with Proxy.NO_PROXY\n        ProxyAuth noProxy = new ProxyAuth(Proxy.NO_PROXY, null);\n        client.setProxy(noProxy);\n        assertEquals(MockData.MOCK_RESPONSE, client.createMarket().time());\n\n        // Request with Proxy\n        Proxy proxyConn = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"127.0.0.1\", proxyPort));\n        ProxyAuth proxy = new ProxyAuth(proxyConn, null);\n        client.setProxy(proxy);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().time());\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/proxy/TestHttpProxy.java", "class_name": "TestHttpProxy", "class_uri": "src/test/java/unit/spot/proxy/TestHttpProxy.java.TestHttpProxy", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice.[void]testTickerPriceWithoutSymbol()", "name": "testTickerPriceWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTickerPriceWithoutSymbol()", "original_string": "    @Test\n    public void testTickerPriceWithoutSymbol() {\n        String path = \"/api/v3/ticker/price\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tickerSymbol(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTickerPrice.java", "class_name": "TestTickerPrice", "class_uri": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice.[void]testTickerPriceWithSymbol()", "name": "testTickerPriceWithSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTickerPriceWithSymbol()", "original_string": "    @Test\n    public void testTickerPriceWithSymbol() {\n        String path = \"/api/v3/ticker/price?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tickerSymbol(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTickerPrice.java", "class_name": "TestTickerPrice", "class_uri": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice.[void]testTickerPriceWithMultipleSymbol()", "name": "testTickerPriceWithMultipleSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTickerPriceWithMultipleSymbol()", "original_string": "    @Test\n    public void testTickerPriceWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/price?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tickerSymbol(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTickerPrice.java", "class_name": "TestTickerPrice", "class_uri": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice.[void]testTicker24HWithInvalidType()", "name": "testTicker24HWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithInvalidType()", "original_string": "    @Test\n    public void testTicker24HWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/price?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tickerSymbol(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTickerPrice.java", "class_name": "TestTickerPrice", "class_uri": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice.[void]testTicker24HWithDoubleParameter()", "name": "testTicker24HWithDoubleParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithDoubleParameter()", "original_string": "    @Test\n    public void testTicker24HWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/price?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tickerSymbol(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTickerPrice.java", "class_name": "TestTickerPrice", "class_uri": "src/test/java/unit/spot/market/TestTickerPrice.java.TestTickerPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestPing.java.TestPing.[void]testPing()", "name": "testPing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPing()", "original_string": "    @Test\n    public void testPing() {\n        String path = \"/api/v3/ping\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ping();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestPing.java", "class_name": "TestPing", "class_uri": "src/test/java/unit/spot/market/TestPing.java.TestPing", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker.java.TestTicker.[void]testTicker()", "name": "testTicker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker()", "original_string": "    @Test\n    public void testTicker() {\n        String path = \"/api/v3/ticker?symbol=BNBUSDT&type=MINI\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker.java", "class_name": "TestTicker", "class_uri": "src/test/java/unit/spot/market/TestTicker.java.TestTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker.java.TestTicker.[void]testTickerWithMultipleSymbol()", "name": "testTickerWithMultipleSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTickerWithMultipleSymbol()", "original_string": "    @Test\n    public void testTickerWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker.java", "class_name": "TestTicker", "class_uri": "src/test/java/unit/spot/market/TestTicker.java.TestTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker.java.TestTicker.[void]testTickerWithoutParameters()", "name": "testTickerWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTickerWithoutParameters()", "original_string": "    @Test\n    public void testTickerWithoutParameters() {\n        String path = \"/api/v3/ticker\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker.java", "class_name": "TestTicker", "class_uri": "src/test/java/unit/spot/market/TestTicker.java.TestTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker.java.TestTicker.[void]testTickerWithInvalidType()", "name": "testTickerWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTickerWithInvalidType()", "original_string": "    @Test\n    public void testTickerWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker.java", "class_name": "TestTicker", "class_uri": "src/test/java/unit/spot/market/TestTicker.java.TestTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker.java.TestTicker.[void]testTickerWithDoubleParameter()", "name": "testTickerWithDoubleParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTickerWithDoubleParameter()", "original_string": "    @Test\n    public void testTickerWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker.java", "class_name": "TestTicker", "class_uri": "src/test/java/unit/spot/market/TestTicker.java.TestTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice.[void]testAvgPriceWithoutSymbol()", "name": "testAvgPriceWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAvgPriceWithoutSymbol()", "original_string": "    @Test\n    public void testAvgPriceWithoutSymbol() {\n        String path = \"/api/v3/avgPrice\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().averagePrice(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAvgPrice.java", "class_name": "TestAvgPrice", "class_uri": "src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice.[void]testAvgPrice()", "name": "testAvgPrice", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAvgPrice()", "original_string": "    @Test\n    public void testAvgPrice() {\n        String path = \"/api/v3/avgPrice?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().averagePrice(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAvgPrice.java", "class_name": "TestAvgPrice", "class_uri": "src/test/java/unit/spot/market/TestAvgPrice.java.TestAvgPrice", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H.[void]testTicker24HWithoutSymbol()", "name": "testTicker24HWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithoutSymbol()", "original_string": "    @Test\n    public void testTicker24HWithoutSymbol() {\n        String path = \"/api/v3/ticker/24hr\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker24H.java", "class_name": "TestTicker24H", "class_uri": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H.[void]testTicker24HWithSymbol()", "name": "testTicker24HWithSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithSymbol()", "original_string": "    @Test\n    public void testTicker24HWithSymbol() {\n        String path = \"/api/v3/ticker/24hr?symbol=BNBUSDT&type=MINI\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker24H.java", "class_name": "TestTicker24H", "class_uri": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H.[void]testTicker24HWithMultipleSymbol()", "name": "testTicker24HWithMultipleSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithMultipleSymbol()", "original_string": "    @Test\n    public void testTicker24HWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().ticker24H(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker24H.java", "class_name": "TestTicker24H", "class_uri": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H.[void]testTicker24HWithInvalidType()", "name": "testTicker24HWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithInvalidType()", "original_string": "    @Test\n    public void testTicker24HWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker24H(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker24H.java", "class_name": "TestTicker24H", "class_uri": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H.[void]testTicker24HWithDoubleParameter()", "name": "testTicker24HWithDoubleParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithDoubleParameter()", "original_string": "    @Test\n    public void testTicker24HWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().ticker24H(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTicker24H.java", "class_name": "TestTicker24H", "class_uri": "src/test/java/unit/spot/market/TestTicker24H.java.TestTicker24H", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestDepth.java.TestDepth.[void]testDepthWithoutSymbol()", "name": "testDepthWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithoutSymbol()", "original_string": "    @Test\n    public void testDepthWithoutSymbol() {\n        String path = \"/api/v3/depth\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().depth(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestDepth.java", "class_name": "TestDepth", "class_uri": "src/test/java/unit/spot/market/TestDepth.java.TestDepth", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestDepth.java.TestDepth.[void]testDepth()", "name": "testDepth", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepth()", "original_string": "    @Test\n    public void testDepth() {\n        String path = \"/api/v3/depth?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().depth(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestDepth.java", "class_name": "TestDepth", "class_uri": "src/test/java/unit/spot/market/TestDepth.java.TestDepth", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestDepth.java.TestDepth.[void]testDepthWithFixedLimit()", "name": "testDepthWithFixedLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testDepthWithFixedLimit()", "original_string": "    @Test\n    public void testDepthWithFixedLimit() {\n        String path = \"/api/v3/depth?symbol=BNBUSDT&limit=10\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().depth(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestDepth.java", "class_name": "TestDepth", "class_uri": "src/test/java/unit/spot/market/TestDepth.java.TestDepth", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTrades.java.TestTrades.[void]testTradesWithoutSymbol()", "name": "testTradesWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithoutSymbol()", "original_string": "    @Test\n    public void testTradesWithoutSymbol() {\n        String path = \"/api/v3/trades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().trades(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTrades.java", "class_name": "TestTrades", "class_uri": "src/test/java/unit/spot/market/TestTrades.java.TestTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTrades.java.TestTrades.[void]testTrades()", "name": "testTrades", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTrades()", "original_string": "    @Test\n    public void testTrades() {\n        String path = \"/api/v3/trades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().trades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTrades.java", "class_name": "TestTrades", "class_uri": "src/test/java/unit/spot/market/TestTrades.java.TestTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTrades.java.TestTrades.[void]testTradesWithLimit()", "name": "testTradesWithLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithLimit()", "original_string": "    @Test\n    public void testTradesWithLimit() {\n        String path = \"/api/v3/trades?symbol=BNBUSDT&limit=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().trades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTrades.java", "class_name": "TestTrades", "class_uri": "src/test/java/unit/spot/market/TestTrades.java.TestTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker.[void]testBookTickerWithoutSymbol()", "name": "testBookTickerWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBookTickerWithoutSymbol()", "original_string": "    @Test\n    public void testBookTickerWithoutSymbol() {\n        String path = \"/api/v3/ticker/bookTicker\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().bookTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestBookTicker.java", "class_name": "TestBookTicker", "class_uri": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker.[void]testBookTickerWithSymbol()", "name": "testBookTickerWithSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBookTickerWithSymbol()", "original_string": "    @Test\n    public void testBookTickerWithSymbol() {\n        String path = \"/api/v3/ticker/bookTicker?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().bookTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestBookTicker.java", "class_name": "TestBookTicker", "class_uri": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker.[void]testBookTickerWithMultipleSymbol()", "name": "testBookTickerWithMultipleSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBookTickerWithMultipleSymbol()", "original_string": "    @Test\n    public void testBookTickerWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/bookTicker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().bookTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestBookTicker.java", "class_name": "TestBookTicker", "class_uri": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker.[void]testTicker24HWithInvalidType()", "name": "testTicker24HWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithInvalidType()", "original_string": "    @Test\n    public void testTicker24HWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/bookTicker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().bookTicker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestBookTicker.java", "class_name": "TestBookTicker", "class_uri": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker.[void]testTicker24HWithDoubleParameter()", "name": "testTicker24HWithDoubleParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTicker24HWithDoubleParameter()", "original_string": "    @Test\n    public void testTicker24HWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/bookTicker?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().bookTicker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestBookTicker.java", "class_name": "TestBookTicker", "class_uri": "src/test/java/unit/spot/market/TestBookTicker.java.TestBookTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfo()", "name": "testExchangeInfo", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfo()", "original_string": "    @Test\n    public void testExchangeInfo() {\n        String path = \"/api/v3/exchangeInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithOneSymbol()", "name": "testExchangeInfoWithOneSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithOneSymbol()", "original_string": "    @Test\n    public void testExchangeInfoWithOneSymbol() {\n        String path = \"/api/v3/exchangeInfo?symbol=BNBUSD\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithMultipleSymbol()", "name": "testExchangeInfoWithMultipleSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithMultipleSymbol()", "original_string": "    @Test\n    public void testExchangeInfoWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbols=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithOnePermission()", "name": "testExchangeInfoWithOnePermission", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithOnePermission()", "original_string": "    @Test\n    public void testExchangeInfoWithOnePermission() {\n        String path = String.format(\"/api/v3/exchangeInfo?permissions=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"MARGIN\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"MARGIN\");\n        parameters.put(\"permissions\", permissions);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithMultiplePermissions()", "name": "testExchangeInfoWithMultiplePermissions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithMultiplePermissions()", "original_string": "    @Test\n    public void testExchangeInfoWithMultiplePermissions() {\n        String path = String.format(\"/api/v3/exchangeInfo?permissions=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"MARGIN\\\",\\\"SPOT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"MARGIN\");\n        permissions.add(\"SPOT\");\n        parameters.put(\"permissions\", permissions);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithInvalidType()", "name": "testExchangeInfoWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithInvalidType()", "original_string": "    @Test\n    public void testExchangeInfoWithInvalidType() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbols=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoPermissionsWithInvalidType()", "name": "testExchangeInfoPermissionsWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoPermissionsWithInvalidType()", "original_string": "    @Test\n    public void testExchangeInfoPermissionsWithInvalidType() {\n        String path = String.format(\"/api/v3/exchangeInfo?permissions=%s\",\n                                    UrlBuilder.urlEncode(\"[\\\"MARGIN\\\",\\\"SPOT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] permissions = {\"MARGIN\", \"SPOT\"};\n        parameters.put(\"permissions\", permissions);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithDoubleParameter()", "name": "testExchangeInfoWithDoubleParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithDoubleParameter()", "original_string": "    @Test\n    public void testExchangeInfoWithDoubleParameter() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbols=%s\",\n                    UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithSymbolAndPermissionsParameters()", "name": "testExchangeInfoWithSymbolAndPermissionsParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithSymbolAndPermissionsParameters()", "original_string": "    @Test\n    public void testExchangeInfoWithSymbolAndPermissionsParameters() {\n        String path = String.format(\"/api/v3/exchangeInfo?symbol=%s\",\n                UrlBuilder.urlEncode(\"[\\\"ETHUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        \n        ArrayList<String> permissions = new ArrayList<>();\n        permissions.add(\"MARGIN\");\n        permissions.add(\"SPOT\");\n\n        parameters.put(\"permissions\", permissions);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().exchangeInfo(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/market/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines.[void]testUIKlinesWithoutSymbol()", "name": "testUIKlinesWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUIKlinesWithoutSymbol()", "original_string": "    @Test\n    public void testUIKlinesWithoutSymbol() {\n        String path = \"/api/v3/uiKlines?interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().uiKlines(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestUIKlines.java", "class_name": "TestUIKlines", "class_uri": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines.[void]testUIKlinesWithoutInterval()", "name": "testUIKlinesWithoutInterval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUIKlinesWithoutInterval()", "original_string": "    @Test\n    public void testUIKlinesWithoutInterval() {\n        String path = \"/api/v3/uiKlines?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().uiKlines(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestUIKlines.java", "class_name": "TestUIKlines", "class_uri": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines.[void]testUIKlines()", "name": "testUIKlines", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUIKlines()", "original_string": "    @Test\n    public void testUIKlines() {\n        String path = \"/api/v3/uiKlines?symbol=BNBUSDT&interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().uiKlines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestUIKlines.java", "class_name": "TestUIKlines", "class_uri": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines.[void]testUIKlinesWithParameters()", "name": "testUIKlinesWithParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUIKlinesWithParameters()", "original_string": "    @Test\n    public void testUIKlinesWithParameters() {\n        String path = String.format(\"/api/v3/uiKlines?symbol=BNBUSDT&interval=1m&limit=1000&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n        parameters.put(\"limit\", limit);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().uiKlines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestUIKlines.java", "class_name": "TestUIKlines", "class_uri": "src/test/java/unit/spot/market/TestUIKlines.java.TestUIKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestKlines.java.TestKlines.[void]testKlinesWithoutSymbol()", "name": "testKlinesWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKlinesWithoutSymbol()", "original_string": "    @Test\n    public void testKlinesWithoutSymbol() {\n        String path = \"/api/v3/klines?interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestKlines.java", "class_name": "TestKlines", "class_uri": "src/test/java/unit/spot/market/TestKlines.java.TestKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestKlines.java.TestKlines.[void]testKlinesWithoutInterval()", "name": "testKlinesWithoutInterval", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKlinesWithoutInterval()", "original_string": "    @Test\n    public void testKlinesWithoutInterval() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().klines(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestKlines.java", "class_name": "TestKlines", "class_uri": "src/test/java/unit/spot/market/TestKlines.java.TestKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestKlines.java.TestKlines.[void]testKlines()", "name": "testKlines", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKlines()", "original_string": "    @Test\n    public void testKlines() {\n        String path = \"/api/v3/klines?symbol=BNBUSDT&interval=1m\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().klines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestKlines.java", "class_name": "TestKlines", "class_uri": "src/test/java/unit/spot/market/TestKlines.java.TestKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestKlines.java.TestKlines.[void]testKlinesWithParameters()", "name": "testKlinesWithParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testKlinesWithParameters()", "original_string": "    @Test\n    public void testKlinesWithParameters() {\n        String path = String.format(\"/api/v3/klines?symbol=BNBUSDT&interval=1m&limit=1000&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"interval\", \"1m\");\n        parameters.put(\"limit\", limit);\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().klines(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestKlines.java", "class_name": "TestKlines", "class_uri": "src/test/java/unit/spot/market/TestKlines.java.TestKlines", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTime.java.TestTime.[void]testTime()", "name": "testTime", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTime()", "original_string": "    @Test\n    public void testTime() {\n        String path = \"/api/v3/time\";\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().time();\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTime.java", "class_name": "TestTime", "class_uri": "src/test/java/unit/spot/market/TestTime.java.TestTime", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades.[void]testAggTradesWithoutSymbol()", "name": "testAggTradesWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAggTradesWithoutSymbol()", "original_string": "    @Test\n    public void testAggTradesWithoutSymbol() {\n        String path = \"/api/v3/aggTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().aggTrades(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAggTrades.java", "class_name": "TestAggTrades", "class_uri": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades.[void]testAggTrades()", "name": "testAggTrades", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAggTrades()", "original_string": "    @Test\n    public void testAggTrades() {\n        String path = \"/api/v3/aggTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAggTrades.java", "class_name": "TestAggTrades", "class_uri": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades.[void]testTradesWithLimit()", "name": "testTradesWithLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithLimit()", "original_string": "    @Test\n    public void testTradesWithLimit() {\n        String path = \"/api/v3/aggTrades?symbol=BNBUSDT&limit=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"limit\", limit);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAggTrades.java", "class_name": "TestAggTrades", "class_uri": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades.[void]testTradesWithFromId()", "name": "testTradesWithFromId", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithFromId()", "original_string": "    @Test\n    public void testTradesWithFromId() {\n        String path = \"/api/v3/aggTrades?symbol=BNBUSDT&fromId=1000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"fromId\", fromId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAggTrades.java", "class_name": "TestAggTrades", "class_uri": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades.[void]testTradesWithTimestamp()", "name": "testTradesWithTimestamp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithTimestamp()", "original_string": "    @Test\n    public void testTradesWithTimestamp() {\n        String path = String.format(\"/api/v3/aggTrades?symbol=BNBUSDT&startTime=%s&endTime=%s\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().aggTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestAggTrades.java", "class_name": "TestAggTrades", "class_uri": "src/test/java/unit/spot/market/TestAggTrades.java.TestAggTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker.[void]testTradingDayTicker()", "name": "testTradingDayTicker", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradingDayTicker()", "original_string": "    @Test\n    public void testTradingDayTicker() {\n        String path = \"/api/v3/ticker/tradingDay?symbol=BNBUSDT&type=MINI\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"type\", \"MINI\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tradingDayTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "class_name": "TestTradingDayTicker", "class_uri": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker.[void]testTradingDayTickerWithMultipleSymbol()", "name": "testTradingDayTickerWithMultipleSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradingDayTickerWithMultipleSymbol()", "original_string": "    @Test\n    public void testTradingDayTickerWithMultipleSymbol() {\n        String path = String.format(\"/api/v3/ticker/tradingDay?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result = client.createMarket().tradingDayTicker(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "class_name": "TestTradingDayTicker", "class_uri": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker.[void]testTradingDayTickerWithoutParameters()", "name": "testTradingDayTickerWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradingDayTickerWithoutParameters()", "original_string": "    @Test\n    public void testTradingDayTickerWithoutParameters() {\n        String path = \"/api/v3/ticker/tradingDay\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tradingDayTicker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "class_name": "TestTradingDayTicker", "class_uri": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker.[void]testTradingDayTickerWithInvalidType()", "name": "testTradingDayTickerWithInvalidType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradingDayTickerWithInvalidType()", "original_string": "    @Test\n    public void testTradingDayTickerWithInvalidType() {\n        String path = String.format(\"/api/v3/ticker/tradingDay?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tradingDayTicker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "class_name": "TestTradingDayTicker", "class_uri": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker.[void]testTradingDayTickerWithDoubleParameter()", "name": "testTradingDayTickerWithDoubleParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradingDayTickerWithDoubleParameter()", "original_string": "    @Test\n    public void testTradingDayTickerWithDoubleParameter() {\n        String path = String.format(\"/api/v3/ticker/tradingDay?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        String[] symbols = {\"BNBUSDT\", \"BTCUSDT\"};\n        parameters.put(\"symbols\", symbols);\n        parameters.put(\"symbol\", \"ETHUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().tradingDayTicker(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestTradingDayTicker.java", "class_name": "TestTradingDayTicker", "class_uri": "src/test/java/unit/spot/market/TestTradingDayTicker.java.TestTradingDayTicker", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades.[void]testTradesWithoutSymbol()", "name": "testTradesWithoutSymbol", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithoutSymbol()", "original_string": "    @Test\n    public void testTradesWithoutSymbol() {\n        String path = \"/api/v3/historicalTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().historicalTrades(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestHistoricalTrades.java", "class_name": "TestHistoricalTrades", "class_uri": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades.[void]testHistoricalTradesWithoutMockData()", "name": "testHistoricalTradesWithoutMockData", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHistoricalTradesWithoutMockData()", "original_string": "    @Test\n    public void testHistoricalTradesWithoutMockData() {\n        String path = \"/api/v3/historicalTrades\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createMarket().historicalTrades(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestHistoricalTrades.java", "class_name": "TestHistoricalTrades", "class_uri": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades.[void]testHistoricalTrades()", "name": "testHistoricalTrades", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testHistoricalTrades()", "original_string": "    @Test\n    public void testHistoricalTrades() {\n        String path = \"/api/v3/historicalTrades?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMarket().historicalTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestHistoricalTrades.java", "class_name": "TestHistoricalTrades", "class_uri": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades.[void]testTradesWithParameters()", "name": "testTradesWithParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradesWithParameters()", "original_string": "    @Test\n    public void testTradesWithParameters() {\n        String path = \"/api/v3/historicalTrades?symbol=BNBUSDT&limit=1000&fromId=123\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"limit\", limit);\n        parameters.put(\"fromId\", fromId);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createMarket().historicalTrades(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/market/TestHistoricalTrades.java", "class_name": "TestHistoricalTrades", "class_uri": "src/test/java/unit/spot/market/TestHistoricalTrades.java.TestHistoricalTrades", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry.[void]testQuoteInquiryWithoutParameters()", "name": "testQuoteInquiryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQuoteInquiryWithoutParameters()", "original_string": "    @Test\n    public void testQuoteInquiryWithoutParameters() {\n        String path = \"/sapi/v1/convert/getQuote\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createConvert().quoteInquiry(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestQuoteInquiry.java", "class_name": "TestQuoteInquiry", "class_uri": "src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry.[void]testQuoteInquiryWithParametes()", "name": "testQuoteInquiryWithParametes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testQuoteInquiryWithParametes()", "original_string": "    @Test\n    public void testQuoteInquiryWithParametes() {\n        String path = \"/sapi/v1/convert/getQuote\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n        parameters.put(\"fromAmount\", amount);\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().quoteInquiry(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestQuoteInquiry.java", "class_name": "TestQuoteInquiry", "class_uri": "src/test/java/unit/spot/convert/TestQuoteInquiry.java.TestQuoteInquiry", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow.[void]testTradeFlowWithoutParameters()", "name": "testTradeFlowWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradeFlowWithoutParameters()", "original_string": "    @Test\n    public void testTradeFlowWithoutParameters() {\n        String path = \"/sapi/v1/convert/tradeFlow\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createConvert().tradeFlow(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestTradeFlow.java", "class_name": "TestTradeFlow", "class_uri": "src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow.[void]testTradeFlow()", "name": "testTradeFlow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTradeFlow()", "original_string": "    @Test\n    public void testTradeFlow() {\n        String path = \"/sapi/v1/convert/tradeFlow?startTime=1234567&endTime=1234568\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().tradeFlow(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestTradeFlow.java", "class_name": "TestTradeFlow", "class_uri": "src/test/java/unit/spot/convert/TestTradeFlow.java.TestTradeFlow", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestOrderStatus.java.TestOrderStatus.[void]testOrderStatusWithParametes()", "name": "testOrderStatusWithParametes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testOrderStatusWithParametes()", "original_string": "    @Test\n    public void testOrderStatusWithParametes() {\n        String path = \"/sapi/v1/convert/orderStatus\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"quoteId\", \"12415572564\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().orderStatus(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestOrderStatus.java", "class_name": "TestOrderStatus", "class_uri": "src/test/java/unit/spot/convert/TestOrderStatus.java.TestOrderStatus", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision.[void]testAssetQuantityPrecisionWithoutParameters()", "name": "testAssetQuantityPrecisionWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetQuantityPrecisionWithoutParameters()", "original_string": "    @Test\n    public void testAssetQuantityPrecisionWithoutParameters() {\n        String path = \"/sapi/v1/convert/assetInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().assetQuantityPrecision(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java", "class_name": "TestAssetQuantityPrecision", "class_uri": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision.[void]testAssetQuantityPrecisionWithParameter()", "name": "testAssetQuantityPrecisionWithParameter", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAssetQuantityPrecisionWithParameter()", "original_string": "    @Test\n    public void testAssetQuantityPrecisionWithParameter() {\n        String path = \"/sapi/v1/convert/assetInfo?recvWindow=5000\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"recvWindow\", recvWindow);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().assetQuantityPrecision(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java", "class_name": "TestAssetQuantityPrecision", "class_uri": "src/test/java/unit/spot/convert/TestAssetQuantityPrecision.java.TestAssetQuantityPrecision", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithoutParameters()", "name": "testExchangeInfoWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithoutParameters()", "original_string": "    @Test\n    public void testExchangeInfoWithoutParameters() {\n        String path = \"/sapi/v1/convert/exchangeInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result =  client.createConvert().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/convert/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestExchangeInfo.java.TestExchangeInfo.[void]testExchangeInfoWithParameters()", "name": "testExchangeInfoWithParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testExchangeInfoWithParameters()", "original_string": "    @Test\n    public void testExchangeInfoWithParameters() {\n        String path = \"/sapi/v1/convert/exchangeInfo?fromAsset=BTC&toAsset=USDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"fromAsset\", \"BTC\");\n        parameters.put(\"toAsset\", \"USDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(baseUrl);\n        String result =  client.createConvert().exchangeInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestExchangeInfo.java", "class_name": "TestExchangeInfo", "class_uri": "src/test/java/unit/spot/convert/TestExchangeInfo.java.TestExchangeInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote.[void]testAcceptQuoteWithoutParameters()", "name": "testAcceptQuoteWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAcceptQuoteWithoutParameters()", "original_string": "    @Test\n    public void testAcceptQuoteWithoutParameters() {\n        String path = \"/sapi/v1/convert/acceptQuote\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createConvert().acceptQuote(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestAcceptQuote.java", "class_name": "TestAcceptQuote", "class_uri": "src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote.[void]testAcceptQuoteWithParametes()", "name": "testAcceptQuoteWithParametes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testAcceptQuoteWithParametes()", "original_string": "    @Test\n    public void testAcceptQuoteWithParametes() {\n        String path = \"/sapi/v1/convert/acceptQuote\";\n\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"quoteId\", \"12415572564\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createConvert().acceptQuote(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/convert/TestAcceptQuote.java", "class_name": "TestAcceptQuote", "class_uri": "src/test/java/unit/spot/convert/TestAcceptQuote.java.TestAcceptQuote", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory.[void]testFuturesTransferHistoryWithoutParameters()", "name": "testFuturesTransferHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferHistoryWithoutParameters()", "original_string": "    @Test\n    public void testFuturesTransferHistoryWithoutParameters() {\n        String path = \"/sapi/v1/futures/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFutures().futuresTransferHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java", "class_name": "TestFuturesTransferHistory", "class_uri": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory.[void]testFuturesTransferHistory()", "name": "testFuturesTransferHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferHistory()", "original_string": "    @Test\n    public void testFuturesTransferHistory() {\n        String path = \"/sapi/v1/futures/transfer?asset=USDT&startTime=12345678\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"startTime\", startTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFutures().futuresTransferHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java", "class_name": "TestFuturesTransferHistory", "class_uri": "src/test/java/unit/spot/futures/TestFuturesTransferHistory.java.TestFuturesTransferHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesTransfer.java.TestFuturesTransfer.[void]testFuturesTransferWithoutParameters()", "name": "testFuturesTransferWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransferWithoutParameters()", "original_string": "    @Test\n    public void testFuturesTransferWithoutParameters() {\n        String path = \"/sapi/v1/futures/transfer\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFutures().futuresTransfer(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesTransfer.java", "class_name": "TestFuturesTransfer", "class_uri": "src/test/java/unit/spot/futures/TestFuturesTransfer.java.TestFuturesTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesTransfer.java.TestFuturesTransfer.[void]testFuturesTransfer()", "name": "testFuturesTransfer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFuturesTransfer()", "original_string": "    @Test\n    public void testFuturesTransfer() {\n        String path = \"/sapi/v1/futures/transfer?asset=USDT&amount=1&type=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"asset\", \"USDT\");\n        parameters.put(\"amount\", amount);\n        parameters.put(\"type\", type);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFutures().futuresTransfer(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesTransfer.java", "class_name": "TestFuturesTransfer", "class_uri": "src/test/java/unit/spot/futures/TestFuturesTransfer.java.TestFuturesTransfer", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory.[void]testTestFuturesOrderBookHistoryWithoutParameters()", "name": "testTestFuturesOrderBookHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTestFuturesOrderBookHistoryWithoutParameters()", "original_string": "    @Test\n    public void testTestFuturesOrderBookHistoryWithoutParameters() {\n        String path = \"/sapi/v1/futures/histDataLink\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createFutures().futuresOrderBookHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java", "class_name": "TestFuturesOrderBookHistory", "class_uri": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory.[void]testTestFuturesOrderBookHistory()", "name": "testTestFuturesOrderBookHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTestFuturesOrderBookHistory()", "original_string": "    @Test\n    public void testTestFuturesOrderBookHistory() {\n        String path = String.format(\"/sapi/v1/futures/histDataLink?symbol=%s&dataType=%s&startTime=%s&endTime=%s\", \"BTCUSDT\", \"T_DEPTH\", startTime, endTime);\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        parameters.put(\"dataType\", \"T_DEPTH\");\n        parameters.put(\"startTime\", startTime);\n        parameters.put(\"endTime\", endTime);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createFutures().futuresOrderBookHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java", "class_name": "TestFuturesOrderBookHistory", "class_uri": "src/test/java/unit/spot/futures/TestFuturesOrderBookHistory.java.TestFuturesOrderBookHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode.[void]testCreateDualTokensCodeWithoutParameters()", "name": "testCreateDualTokensCodeWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateDualTokensCodeWithoutParameters()", "original_string": "    @Test\n    public void testCreateDualTokensCodeWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/buyCode\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().createDualTokensCode(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java", "class_name": "TestCreateDualTokensCode", "class_uri": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode.[void]testCreateDualTokensCode()", "name": "testCreateDualTokensCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateDualTokensCode()", "original_string": "    @Test\n    public void testCreateDualTokensCode() {\n        String path = \"/sapi/v1/giftcard/buyCode?baseToken=BUSD&faceToken=BNB&baseTokenAmount=1.002\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n        parameters.put(\"faceToken\", \"BNB\");\n        parameters.put(\"baseTokenAmount\", baseTokenAmount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().createDualTokensCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java", "class_name": "TestCreateDualTokensCode", "class_uri": "src/test/java/unit/spot/giftcard/TestCreateDualTokensCode.java.TestCreateDualTokensCode", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode.[void]testRedeemCodeWithoutParameters()", "name": "testRedeemCodeWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemCodeWithoutParameters()", "original_string": "    @Test\n    public void testRedeemCodeWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/redeemCode\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().redeemCode(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestRedeemCode.java", "class_name": "TestRedeemCode", "class_uri": "src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode.[void]testRedeemCode()", "name": "testRedeemCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemCode()", "original_string": "    @Test\n    public void testRedeemCode() {\n        String path = \"/sapi/v1/giftcard/redeemCode?code=abc\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"code\", \"abc\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().redeemCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestRedeemCode.java", "class_name": "TestRedeemCode", "class_uri": "src/test/java/unit/spot/giftcard/TestRedeemCode.java.TestRedeemCode", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode.[void]testCreateCodeWithoutParameters()", "name": "testCreateCodeWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateCodeWithoutParameters()", "original_string": "    @Test\n    public void testCreateCodeWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/createCode\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().createCode(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestCreateCode.java", "class_name": "TestCreateCode", "class_uri": "src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode.[void]testCreateCode()", "name": "testCreateCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCreateCode()", "original_string": "    @Test\n    public void testCreateCode() {\n        String path = \"/sapi/v1/giftcard/createCode?token=abc&amount=0.01\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"token\", \"abc\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().createCode(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestCreateCode.java", "class_name": "TestCreateCode", "class_uri": "src/test/java/unit/spot/giftcard/TestCreateCode.java.TestCreateCode", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit.[void]testTokensLimitWithoutParameters()", "name": "testTokensLimitWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTokensLimitWithoutParameters()", "original_string": "    @Test\n    public void testTokensLimitWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/buyCode/token-limit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().tokensLimit(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestTokensLimit.java", "class_name": "TestTokensLimit", "class_uri": "src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit.[void]testTokensLimit()", "name": "testTokensLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testTokensLimit()", "original_string": "    @Test\n    public void testTokensLimit() {\n        String path = \"/sapi/v1/giftcard/buyCode/token-limit?baseToken=BUSD\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"baseToken\", \"BUSD\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().tokensLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestTokensLimit.java", "class_name": "TestTokensLimit", "class_uri": "src/test/java/unit/spot/giftcard/TestTokensLimit.java.TestTokensLimit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java.TestRsaPublicKey.[void]testVerify()", "name": "testVerify", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerify()", "original_string": "    @Test\n    public void testVerify() {\n        String path = \"/sapi/v1/giftcard/cryptography/rsa-public-key\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().rsaPublicKey(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java", "class_name": "TestRsaPublicKey", "class_uri": "src/test/java/unit/spot/giftcard/TestRsaPublicKey.java.TestRsaPublicKey", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify.[void]testVerifyWithoutParameters()", "name": "testVerifyWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerifyWithoutParameters()", "original_string": "    @Test\n    public void testVerifyWithoutParameters() {\n        String path = \"/sapi/v1/giftcard/verify\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createGiftCard().verify(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestVerify.java", "class_name": "TestVerify", "class_uri": "src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify.[void]testVerify()", "name": "testVerify", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testVerify()", "original_string": "    @Test\n    public void testVerify() {\n        String path = \"/sapi/v1/giftcard/verify?referenceNo=123\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"referenceNo\", \"123\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createGiftCard().verify(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/giftcard/TestVerify.java", "class_name": "TestVerify", "class_uri": "src/test/java/unit/spot/giftcard/TestVerify.java.TestVerify", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java.TestSimpleAccount.[void]testSimpleAccount()", "name": "testSimpleAccount", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleAccount()", "original_string": "    @Test\n    public void testSimpleAccount() {\n        String path = \"/sapi/v1/simple-earn/account\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().simpleAccount(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java", "class_name": "TestSimpleAccount", "class_uri": "src/test/java/unit/spot/simpleearn/TestSimpleAccount.java.TestSimpleAccount", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct.[void]testSubscribeLockedProductWithoutParameters()", "name": "testSubscribeLockedProductWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribeLockedProductWithoutParameters()", "original_string": "    @Test\n    public void testSubscribeLockedProductWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/subscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().subscribeLockedProduct(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java", "class_name": "TestSubscribeLockedProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct.[void]testSubscribeLockedProduct()", "name": "testSubscribeLockedProduct", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribeLockedProduct()", "original_string": "    @Test\n    public void testSubscribeLockedProduct() {\n        String path = \"/sapi/v1/simple-earn/locked/subscribe?projectId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().subscribeLockedProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java", "class_name": "TestSubscribeLockedProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestSubscribeLockedProduct.java.TestSubscribeLockedProduct", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe.[void]testSetFlexibleAutoSubscribeWithoutParameters()", "name": "testSetFlexibleAutoSubscribeWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetFlexibleAutoSubscribeWithoutParameters()", "original_string": "    @Test\n    public void testSetFlexibleAutoSubscribeWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setFlexibleAutoSubscribe(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java", "class_name": "TestSetFlexibleAutoSubscribe", "class_uri": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe.[void]testSetFlexibleAutoSubscribe()", "name": "testSetFlexibleAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetFlexibleAutoSubscribe()", "original_string": "    @Test\n    public void testSetFlexibleAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/flexible/setAutoSubscribe?productId=40607&autoSubscribe=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setFlexibleAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java", "class_name": "TestSetFlexibleAutoSubscribe", "class_uri": "src/test/java/unit/spot/simpleearn/TestSetFlexibleAutoSubscribe.java.TestSetFlexibleAutoSubscribe", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java.TestLockedProductList.[void]testSimpleEarnLockedProductList()", "name": "testSimpleEarnLockedProductList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSimpleEarnLockedProductList()", "original_string": "    @Test\n    public void testSimpleEarnLockedProductList() {\n        String path = \"/sapi/v1/simple-earn/locked/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedProductList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java", "class_name": "TestLockedProductList", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedProductList.java.TestLockedProductList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java.TestFlexibleProductPosition.[void]testFlexibleProductPosition()", "name": "testFlexibleProductPosition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleProductPosition()", "original_string": "    @Test\n    public void testFlexibleProductPosition() {\n        String path = \"/sapi/v1/simple-earn/flexible/position\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleProductPosition(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java", "class_name": "TestFlexibleProductPosition", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleProductPosition.java.TestFlexibleProductPosition", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java.TestCollateralRecord.[void]testCollateralRecord()", "name": "testCollateralRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testCollateralRecord()", "original_string": "    @Test\n    public void testCollateralRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/collateralRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().collateralRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java", "class_name": "TestCollateralRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestCollateralRecord.java.TestCollateralRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java.TestFlexibleRedemptionRecord.[void]testFlexibleRedemptionRecord()", "name": "testFlexibleRedemptionRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleRedemptionRecord()", "original_string": "    @Test\n    public void testFlexibleRedemptionRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/redemptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleRedemptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java", "class_name": "TestFlexibleRedemptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleRedemptionRecord.java.TestFlexibleRedemptionRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java.TestSubscribeFlexibleProduct.[void]testSubscribeFlexibleProduct()", "name": "testSubscribeFlexibleProduct", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribeFlexibleProduct()", "original_string": "    @Test\n    public void testSubscribeFlexibleProduct() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscribe?productId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().subscribeFlexibleProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java", "class_name": "TestSubscribeFlexibleProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestSubscribeFlexibleProduct.java.TestSubscribeFlexibleProduct", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory.[void]testFlexibleRewardsHistoryWithoutParameters()", "name": "testFlexibleRewardsHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleRewardsHistoryWithoutParameters()", "original_string": "    @Test\n    public void testFlexibleRewardsHistoryWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rewardsRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().flexibleRewardsHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java", "class_name": "TestFlexibleRewardsHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory.[void]testFlexibleRewardsHistory()", "name": "testFlexibleRewardsHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleRewardsHistory()", "original_string": "    @Test\n    public void testFlexibleRewardsHistory() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rewardsRecord?type=BONUS\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"type\", \"BONUS\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleRewardsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java", "class_name": "TestFlexibleRewardsHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleRewardsHistory.java.TestFlexibleRewardsHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct.[void]testRedeemLockedProductWithoutParameters()", "name": "testRedeemLockedProductWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemLockedProductWithoutParameters()", "original_string": "    @Test\n    public void testRedeemLockedProductWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().redeemLockedProduct(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java", "class_name": "TestRedeemLockedProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct.[void]testRedeemLockedProduct()", "name": "testRedeemLockedProduct", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemLockedProduct()", "original_string": "    @Test\n    public void testRedeemLockedProduct() {\n        String path = \"/sapi/v1/simple-earn/locked/redeem?positionId=BUSD001\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"BUSD001\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().redeemLockedProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java", "class_name": "TestRedeemLockedProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestRedeemLockedProduct.java.TestRedeemLockedProduct", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java.TestFlexibleSubscriptionRecord.[void]testFlexibleSubscriptionRecord()", "name": "testFlexibleSubscriptionRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleSubscriptionRecord()", "original_string": "    @Test\n    public void testFlexibleSubscriptionRecord() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/subscriptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleSubscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java", "class_name": "TestFlexibleSubscriptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionRecord.java.TestFlexibleSubscriptionRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota.[void]testFlexiblePersonalLeftQuotaWithoutParameters()", "name": "testFlexiblePersonalLeftQuotaWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexiblePersonalLeftQuotaWithoutParameters()", "original_string": "    @Test\n    public void testFlexiblePersonalLeftQuotaWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/personalLeftQuota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().flexiblePersonalLeftQuota(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java", "class_name": "TestFlexiblePersonalLeftQuota", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota.[void]testFlexiblePersonalLeftQuota()", "name": "testFlexiblePersonalLeftQuota", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexiblePersonalLeftQuota()", "original_string": "    @Test\n    public void testFlexiblePersonalLeftQuota() {\n        String path = \"/sapi/v1/simple-earn/flexible/personalLeftQuota?productId=40607\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexiblePersonalLeftQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java", "class_name": "TestFlexiblePersonalLeftQuota", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexiblePersonalLeftQuota.java.TestFlexiblePersonalLeftQuota", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota.[void]testLockedPersonalLeftQuotaWithoutParameters()", "name": "testLockedPersonalLeftQuotaWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedPersonalLeftQuotaWithoutParameters()", "original_string": "    @Test\n    public void testLockedPersonalLeftQuotaWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/personalLeftQuota\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().lockedPersonalLeftQuota(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java", "class_name": "TestLockedPersonalLeftQuota", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota.[void]testLockedPersonalLeftQuota()", "name": "testLockedPersonalLeftQuota", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedPersonalLeftQuota()", "original_string": "    @Test\n    public void testLockedPersonalLeftQuota() {\n        String path = \"/sapi/v1/simple-earn/locked/personalLeftQuota?projectId=USDT001\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedPersonalLeftQuota(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java", "class_name": "TestLockedPersonalLeftQuota", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedPersonalLeftQuota.java.TestLockedPersonalLeftQuota", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview.[void]testFlexibleSubscriptionPreviewWithoutParameters()", "name": "testFlexibleSubscriptionPreviewWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleSubscriptionPreviewWithoutParameters()", "original_string": "    @Test\n    public void testFlexibleSubscriptionPreviewWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscriptionPreview\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().flexibleSubscriptionPreview(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java", "class_name": "TestFlexibleSubscriptionPreview", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview.[void]testFlexibleSubscriptionPreview()", "name": "testFlexibleSubscriptionPreview", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleSubscriptionPreview()", "original_string": "    @Test\n    public void testFlexibleSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/flexible/subscriptionPreview?productId=40607&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java", "class_name": "TestFlexibleSubscriptionPreview", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleSubscriptionPreview.java.TestFlexibleSubscriptionPreview", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java.TestLockedRewardsHistory.[void]testLockedRewardsHistory()", "name": "testLockedRewardsHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedRewardsHistory()", "original_string": "    @Test\n    public void testLockedRewardsHistory() {\n        String path = \"/sapi/v1/simple-earn/locked/history/rewardsRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedRewardsHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java", "class_name": "TestLockedRewardsHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedRewardsHistory.java.TestLockedRewardsHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview.[void]testLockedSubscriptionPreviewWithoutParameters()", "name": "testLockedSubscriptionPreviewWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedSubscriptionPreviewWithoutParameters()", "original_string": "    @Test\n    public void testLockedSubscriptionPreviewWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().lockedSubscriptionPreview(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java", "class_name": "TestLockedSubscriptionPreview", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview.[void]testLockedSubscriptionPreview()", "name": "testLockedSubscriptionPreview", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedSubscriptionPreview()", "original_string": "    @Test\n    public void testLockedSubscriptionPreview() {\n        String path = \"/sapi/v1/simple-earn/locked/subscriptionPreview?projectId=USDT001&amount=1.1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"projectId\", \"USDT001\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedSubscriptionPreview(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java", "class_name": "TestLockedSubscriptionPreview", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionPreview.java.TestLockedSubscriptionPreview", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java.TestLockedSubscriptionRecord.[void]testLockedSubscriptionRecord()", "name": "testLockedSubscriptionRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedSubscriptionRecord()", "original_string": "    @Test\n    public void testLockedSubscriptionRecord() {\n        String path = \"/sapi/v1/simple-earn/locked/history/subscriptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedSubscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java", "class_name": "TestLockedSubscriptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedSubscriptionRecord.java.TestLockedSubscriptionRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct.[void]testRedeemFlexibleProductWithoutParameters()", "name": "testRedeemFlexibleProductWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemFlexibleProductWithoutParameters()", "original_string": "    @Test\n    public void testRedeemFlexibleProductWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().redeemFlexibleProduct(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java", "class_name": "TestRedeemFlexibleProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct.[void]testRedeemFlexibleProduct()", "name": "testRedeemFlexibleProduct", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemFlexibleProduct()", "original_string": "    @Test\n    public void testRedeemFlexibleProduct() {\n        String path = \"/sapi/v1/simple-earn/flexible/redeem?productId=40607\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().redeemFlexibleProduct(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java", "class_name": "TestRedeemFlexibleProduct", "class_uri": "src/test/java/unit/spot/simpleearn/TestRedeemFlexibleProduct.java.TestRedeemFlexibleProduct", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java.TestLockedRedemptionRecord.[void]testLockedRedemptionRecord()", "name": "testLockedRedemptionRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedRedemptionRecord()", "original_string": "    @Test\n    public void testLockedRedemptionRecord() {\n        String path = \"/sapi/v1/simple-earn/locked/history/redemptionRecord\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedRedemptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java", "class_name": "TestLockedRedemptionRecord", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedRedemptionRecord.java.TestLockedRedemptionRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java.TestFlexibleProductList.[void]testFlexibleProductList()", "name": "testFlexibleProductList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testFlexibleProductList()", "original_string": "    @Test\n    public void testFlexibleProductList() {\n        String path = \"/sapi/v1/simple-earn/flexible/list\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().flexibleProductList(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java", "class_name": "TestFlexibleProductList", "class_uri": "src/test/java/unit/spot/simpleearn/TestFlexibleProductList.java.TestFlexibleProductList", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory.[void]testRateHistoryWithoutParameters()", "name": "testRateHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRateHistoryWithoutParameters()", "original_string": "    @Test\n    public void testRateHistoryWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rateHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().rateHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRateHistory.java", "class_name": "TestRateHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory.[void]testRateHistory()", "name": "testRateHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRateHistory()", "original_string": "    @Test\n    public void testRateHistory() {\n        String path = \"/sapi/v1/simple-earn/flexible/history/rateHistory?productId=40607\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"productId\", \"40607\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().rateHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestRateHistory.java", "class_name": "TestRateHistory", "class_uri": "src/test/java/unit/spot/simpleearn/TestRateHistory.java.TestRateHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe.[void]testSetLockedAutoSubscribeWithoutParameters()", "name": "testSetLockedAutoSubscribeWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetLockedAutoSubscribeWithoutParameters()", "original_string": "    @Test\n    public void testSetLockedAutoSubscribeWithoutParameters() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createSimpleEarn().setLockedAutoSubscribe(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java", "class_name": "TestSetLockedAutoSubscribe", "class_uri": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe.[void]testSetLockedAutoSubscribe()", "name": "testSetLockedAutoSubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetLockedAutoSubscribe()", "original_string": "    @Test\n    public void testSetLockedAutoSubscribe() {\n        String path = \"/sapi/v1/simple-earn/locked/setAutoSubscribe?positionId=BUSD001&autoSubscribe=true\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"positionId\", \"BUSD001\");\n        parameters.put(\"autoSubscribe\", true);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().setLockedAutoSubscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java", "class_name": "TestSetLockedAutoSubscribe", "class_uri": "src/test/java/unit/spot/simpleearn/TestSetLockedAutoSubscribe.java.TestSetLockedAutoSubscribe", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java.TestLockedProductPosition.[void]testLockedProductPosition()", "name": "testLockedProductPosition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testLockedProductPosition()", "original_string": "    @Test\n    public void testLockedProductPosition() {\n        String path = \"/sapi/v1/simple-earn/locked/position\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createSimpleEarn().lockedProductPosition(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java", "class_name": "TestLockedProductPosition", "class_uri": "src/test/java/unit/spot/simpleearn/TestLockedProductPosition.java.TestLockedProductPosition", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory.[void]testListUserOrderHistoryWithoutParameters()", "name": "testListUserOrderHistoryWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListUserOrderHistoryWithoutParameters()", "original_string": "    @Test\n    public void testListUserOrderHistoryWithoutParameters() {\n        String path = \"/sapi/v1/c2c/orderMatch/listUserOrderHistory\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createC2C().listUserOrderHistory(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java", "class_name": "TestListUserOrderHistory", "class_uri": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory.[void]testListUserOrderHistory()", "name": "testListUserOrderHistory", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testListUserOrderHistory()", "original_string": "    @Test\n    public void testListUserOrderHistory() {\n        String path = \"/sapi/v1/c2c/orderMatch/listUserOrderHistory?tradeType=BUY\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tradeType\", \"BUY\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createC2C().listUserOrderHistory(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java", "class_name": "TestListUserOrderHistory", "class_uri": "src/test/java/unit/spot/c2c/TestListUserOrderHistory.java.TestListUserOrderHistory", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestBlvtInfo.java.TestBlvtInfo.[void]testBlvtInfo()", "name": "testBlvtInfo", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testBlvtInfo()", "original_string": "    @Test\n    public void testBlvtInfo() {\n        String path = \"/sapi/v1/blvt/tokenInfo\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().blvtInfo(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestBlvtInfo.java", "class_name": "TestBlvtInfo", "class_uri": "src/test/java/unit/spot/blvt/TestBlvtInfo.java.TestBlvtInfo", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem.[void]testRedeemWithoutParameters()", "name": "testRedeemWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemWithoutParameters()", "original_string": "    @Test\n    public void testRedeemWithoutParameters() {\n        String path = \"/sapi/v1/blvt/redeem\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createBlvt().redeem(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestRedeem.java", "class_name": "TestRedeem", "class_uri": "src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem.[void]testRedeem()", "name": "testRedeem", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeem()", "original_string": "    @Test\n    public void testRedeem() {\n        String path = \"/sapi/v1/blvt/redeem?tokenName=USDT&amount=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"USDT\");\n        parameters.put(\"amount\", amount);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().redeem(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestRedeem.java", "class_name": "TestRedeem", "class_uri": "src/test/java/unit/spot/blvt/TestRedeem.java.TestRedeem", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe.[void]testSubscribeWithoutParameters()", "name": "testSubscribeWithoutParameters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribeWithoutParameters()", "original_string": "    @Test\n    public void testSubscribeWithoutParameters() {\n        String path = \"/sapi/v1/blvt/subscribe\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        assertThrows(BinanceConnectorException.class, () -> client.createBlvt().subscribe(parameters));\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestSubscribe.java", "class_name": "TestSubscribe", "class_uri": "src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe.[void]testSubscribe()", "name": "testSubscribe", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscribe()", "original_string": "    @Test\n    public void testSubscribe() {\n        String path = \"/sapi/v1/blvt/subscribe?tokenName=USDT&cost=1\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"tokenName\", \"USDT\");\n        parameters.put(\"cost\", cost);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.POST, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().subscribe(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestSubscribe.java", "class_name": "TestSubscribe", "class_uri": "src/test/java/unit/spot/blvt/TestSubscribe.java.TestSubscribe", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java.TestSubscriptionRecord.[void]testSubscriptionRecord()", "name": "testSubscriptionRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSubscriptionRecord()", "original_string": "    @Test\n    public void testSubscriptionRecord() {\n        String path = \"/sapi/v1/blvt/subscribe/record\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().subscriptionRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java", "class_name": "TestSubscriptionRecord", "class_uri": "src/test/java/unit/spot/blvt/TestSubscriptionRecord.java.TestSubscriptionRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestUserLimit.java.TestUserLimit.[void]testUserLimit()", "name": "testUserLimit", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUserLimit()", "original_string": "    @Test\n    public void testUserLimit() {\n        String path = \"/sapi/v1/blvt/userLimit\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().userLimit(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestUserLimit.java", "class_name": "TestUserLimit", "class_uri": "src/test/java/unit/spot/blvt/TestUserLimit.java.TestUserLimit", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/spot/blvt/TestRedeemRecord.java.TestRedeemRecord.[void]testRedeemRecord()", "name": "testRedeemRecord", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testRedeemRecord()", "original_string": "    @Test\n    public void testRedeemRecord() {\n        String path = \"/sapi/v1/blvt/redeem/record\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, MockData.MOCK_RESPONSE, HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        SpotClient client = new SpotClientImpl(MockData.API_KEY, MockData.SECRET_KEY, baseUrl);\n        String result = client.createBlvt().redeemRecord(parameters);\n        assertEquals(MockData.MOCK_RESPONSE, result);\n    }", "default_arguments": null, "file": "src/test/java/unit/spot/blvt/TestRedeemRecord.java", "class_name": "TestRedeemRecord", "class_uri": "src/test/java/unit/spot/blvt/TestRedeemRecord.java.TestRedeemRecord", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/signature/TestEd25519SignatureGenerator.java.TestEd25519SignatureGenerator.[void]testUnprotectedSigning()", "name": "testUnprotectedSigning", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnprotectedSigning()", "original_string": "    @Test\n    public void testUnprotectedSigning() throws FileNotFoundException, IOException {\n        String pemPathString = \"src/test/java/unit/signature/Ed25519PrivateKeyExample.pem\";\n\n        String payload = \"timeInForce=GTC&quantity=0.2&price=30000&symbol=BTCUSDT&side=SELL&type=LIMIT&timestamp=1683189275000\";\n        String expectedSignature = \"kJs8urXFQ/GkR/hQ+ukZMFwH9H8oe7Ec/sap6pFIB/7HHHoh5mKVQT1zLVaRl7QdJLjNB2QB4PGZPflubUCHBA==\";\n\n        Ed25519SignatureGenerator ed25519SignatureGenerator = new Ed25519SignatureGenerator(pemPathString);\n        String actualSignature = ed25519SignatureGenerator.getSignature(payload);\n        assertEquals(expectedSignature, actualSignature);\n    }", "default_arguments": null, "file": "src/test/java/unit/signature/TestEd25519SignatureGenerator.java", "class_name": "TestEd25519SignatureGenerator", "class_uri": "src/test/java/unit/signature/TestEd25519SignatureGenerator.java.TestEd25519SignatureGenerator", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/signature/TestRsaSignatureGenerator.java.TestRsaSignatureGenerator.[void]testUnprotectedSigning()", "name": "testUnprotectedSigning", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUnprotectedSigning()", "original_string": "    @Test\n    public void testUnprotectedSigning() {\n        String pem = \"-----BEGIN PRIVATE KEY-----\"\n            + \"MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPrfWMr2yqxJgJ\"\n            + \"cIyA5TDFpZBlB9E3RMbbEcPZijmPDiciZjuRiD1Q6oQzi1MFGTZ523HwSXe9XG3R\"\n            + \"NQaLCjxi+VkLsvCoxzgurkWXoQr0VHJyEDxnyRaCzTyvvHQgt0LKCWfqalYNz0ue\"\n            + \"doxnYnde3DH/tFFXX0/rTkJyK6LpOyKOAqE0G7OhuQWkLvlUO8mqwtGNqdrtOgzv\"\n            + \"kTN5rhb5VeWB4JGWDcAYFb9CQI9wD7/JJU1XQGIOJEY3L/PjGLcjDEiROt57/RS3\"\n            + \"i6OVTiAgDcgA405tNLgS326hfbEchI5tKeOxqrFYVfvOK8+4o+rrUBnMhrBg0tJv\"\n            + \"1feQKeAnAgMBAAECggEAUdB8PZIWQyfzpTRbhaPElPhmbAaqWxWTKVZUS2zyw/KV\"\n            + \"ZC3WJb0AOtJIhm3KpOWL2nGi70BiFY1GDfbPvxKnO25zr/IscLEa5vjsnZFp2Vsz\"\n            + \"QtA2m8RSQ/FKiQi6zvCjNSiDcYu2nvYdGi4lnczirdIdOFj2+m6n81D/SC78nNhj\"\n            + \"P/JLbSPFw+XOfVqOVelXHw7XGtMH9dgFjWDdB317HcJjZyPDahpQQ7s6PcecDwuv\"\n            + \"Qucs+Hi4sAWiHOiwKusx3sT/NL5Og/jAvC5aMy1QswWFnPr90T3qFE4MN1GZszzX\"\n            + \"DmDkWaGaRwuwdpi/ocIZF3R9XX3m+WOVdEZRfzzcEQKBgQDt11achN666/j1kgQM\"\n            + \"xPdzo06eUUZb/JUtEXz8hU+AzRsN/eso/47pjaPq7nrXFYE4aEx7Je2I9S52Y+b/\"\n            + \"SLrctuza25VOxvqIpDynlvM/Iatg9WuTEIuOk7gkBFanDNjDjZDKFuDYSEfN+sX+\"\n            + \"UakFT7cm+xu12PWR8HlZmFZL5QKBgQDfiRrC8zADSIE74uFBJ5K88t6cwrktqdPH\"\n            + \"9QT69j+VpRXssyUoCfR4/zchKbEyTwSASvL1saJR14Opmvn6Le+0DKq+EV7Z1UM6\"\n            + \"svVIzd9pWWMhRh9G83CC5Krx9Ie+34QHNRxBf+rya5if/aBCDtBFedRGbR6Le8MB\"\n            + \"yvrpT5hzGwKBgQCU2+QPjnHA2BQ3zq3OODEQJTP9jqzUwd+0F2/8tIsv+C9osHXQ\"\n            + \"cTLHJqljTuN/XqxD27OSmAh1Yc80tg5L1P9vSOYxjKGEbrE7eF+mHKod5zrWMoSj\"\n            + \"xQUztWzYzgZWA4pfymjGs08Czypx1vS42e9JrbzaHuwXArWgI7wvwVKxqQKBgQCS\"\n            + \"ByIZav7Zljr+oUdf5fdBQjPVGowYXZJBVTpMrCN7od4BxEIotuAjTy53lqHwaJhb\"\n            + \"KxsvED0m0/BqExjsq6ek6oV8JyLckSobJZ+BUSR60O8mZIW4Nv4wNCvMZl9rfN7m\"\n            + \"SnbL/0G/3jRViD1yCfVa/ayD2XMT0eThvfVOBzZjMwKBgB5jasP9TcDAyaEKta+g\"\n            + \"6glTM0MKUWfhZzYRbvDXdnatjjMEdixWm9aXwc0Nw+aN0KkdLBwvnDiVMtX+Xl2n\"\n            + \"BU2Gxxe3H8qrvkoi8zmzh3VWpqzfB+L3sXAq+6VNNYLEFLBR6D2u4DD86FvY+DsU\"\n            + \"miJlY6JEKpSxvkrS04XrbvHk\"\n            + \"-----END PRIVATE KEY-----\";\n        String payload = \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\";\n        String expectedSignature = \"uz2xmNkOf1EEsnZoWGraxR13F4jF9JYdC68uvWqYyjFyjwDgcoiMRm23UqsxWkmA208smu7TuGVxm1cWoZa/5fLQ2T/RcfLW9sokNWDzf1vM/xEpSmQEsSyIzd/c0pMWGsUkXsYpIarp3e/KSFzgwI73qZfbalBRkkK7u3dLWRVRk4kmEVf6dQUWMyXC44X8LB0M1XFrhkqcFYdcP9NcaCZCvb8nzG/nyUPtCJdBxVn8MMgXaVCM8DIbSrUBT0ZUxFQ3gTSd929LR1Tp6P2y4pHiWSElW5nJZYRRn2zUFt4xH7wvVKvuuEi8HH0Dusf6KBcWq8/3viAcRUh1Cj4fsQ==\";\n\n        RsaSignatureGenerator rsaSignatureGenerator = new RsaSignatureGenerator(pem);\n        String actualSignature = rsaSignatureGenerator.getSignature(payload);\n        assertEquals(expectedSignature, actualSignature);\n    }", "default_arguments": null, "file": "src/test/java/unit/signature/TestRsaSignatureGenerator.java", "class_name": "TestRsaSignatureGenerator", "class_uri": "src/test/java/unit/signature/TestRsaSignatureGenerator.java.TestRsaSignatureGenerator", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/unit/signature/TestRsaSignatureGenerator.java.TestRsaSignatureGenerator.[void]testProtectedSigning()", "name": "testProtectedSigning", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testProtectedSigning()", "original_string": "    @Test\n    public void testProtectedSigning() {\n        String pem = \"-----BEGIN ENCRYPTED PRIVATE KEY-----\"\n            + \"MIIE6TAbBgkqhkiG9w0BBQMwDgQIeaAJMt/f5woCAggABIIEyI2jIbFTPo/YBmwH\"\n            + \"N1QqzFgnMK5LJ0pKY5O71Z8EZIBVrXtEdcFzswbwRZajMpMyxFBjhrd2Y4kQvt9K\"\n            + \"aQfwyJFQxs8L2hC1GRYf5ba6aNZHkWendNFvOET02UQwgDNdGdWCfcaoMCap0ZQ2\"\n            + \"7VOyqbwtuRkM2LNlrtbu282FbwXe4wKljSNUIXTU3UaCmjOq5KIwBoRKJYlwn0qt\"\n            + \"IzlyJKVurHX4cl/1mw55Qs+hRL1CdK/iYF5yqclbK96zq16SKZsaZZhHMf1oub4U\"\n            + \"v5QjJiiQZc+WONFpBi2TybQ1qXF/6+70lDofY3+moUVcPgFHVsKEVQJtYuRZoGoc\"\n            + \"QlXyyCRTyCIQSO41jhkRcJtjCpVCfvCwlob0cM59Hlfll9DdjKyAtaUsuA+cDMqd\"\n            + \"ZE8HSjBGXuSwWthHSfblZ84LReHufmiIYGO3+n0dyjdLKcakYJ5V4QwxN2y4CwE7\"\n            + \"TxszcZo7QYDRaWlz7Lx2gtXlS6UNhs5Ylt7lm/omkdg57zf9DO9P8Vhn0thXs5Ql\"\n            + \"7QIUzhhg0kgnagwmy682AkV+O6F1wWw8qV0uUxABvo9VNuUF8aYBFr9iJn1fUg8Y\"\n            + \"kjCXKns/S9l6Zhz3rSgjFzNdWmm+1TigjyqaVgK9Jdte/v9IG46R3q/rQDMSqIFn\"\n            + \"zO25DfwOr8GvSgxN4Ervy/IwqoC94ptFCLfTJdL2n7IRWX9B+ai2RVSnBEXti4BR\"\n            + \"nigKUkVR7+ynwA8KN5sf6Zc0apHIuylXnu4xeO0rehxhh920v05IjAPm9YIOP33/\"\n            + \"UkHZWtXe2MooV4jmSiWMfAAgL8J26vML2xeGjhFZNQPM1/C3TB+UBxvKbD47EO6k\"\n            + \"FgoVmpFZGTXbF1Rq9hyUpABOSDhPyVuQxW+Tmyjm8O0Oc7KABUP09DKneiNFFtO9\"\n            + \"/B2u7FZ2ArfUzHesEJLWU+CtYVPdpbvtmd054tMV53j3cga2SQmg/yYWOQ7LyMjo\"\n            + \"7FR04aBTq+BXGgU/fZryyHUb1fULy7YTCiMyvi2m+JrZ+TE7DSvbDiJVcZ52x++J\"\n            + \"UpmID04q3wSRrOjci3yXUBvSa1yqxH8F5j3tv/nVM8x2s8ZLEgOHARS0CHZ6KRGD\"\n            + \"TP3KqsOPoKognk712zbqJPWhx9HdAm9+B/5qWtUEOoeFXlzyzj0suVICg9rPNJm1\"\n            + \"zx+STX5zTQ9oPNj6MFgZPSzIoW5Wb6vEdu7ANoANuStMp3E2sQf7q0gY5UkfnYyj\"\n            + \"beTf+1t3k9ybAVZiT6yZ7T5KGeh040zSN2vpVKEEWzkGrL4wGs+aMpvtBEnVJYLl\"\n            + \"medTIY6Z2PM/GFd8Ky8I+uTazXfvZUdilYCyZeIoO6Hyomy7TrnCzc/vjkhWtQrW\"\n            + \"+Pu5GjcGziUXNpzHNS+7uIOOa4f6VpGB8m5QsGUT7nPvVQqvta5fgJ8+W9J5Ifp5\"\n            + \"JqlyEAC7b7PFP9Rz65Do9AsbUbDStKMHl5CR/+CeOnzgfgeHCA8EroQ6WxMHFXec\"\n            + \"GSsZ7VWSSlgOyIEcNMhiM9PKAbx65TbUcvb+KWAI5aUwmdjrKFqOKDloX+2fn9y8\"\n            + \"qoOMy1yIoV7uYL+c4zugjzpgy58iBAiR1IVectxQY9lx1+d9tfjwK2Ne96hdzlLO\"\n            + \"/zJyaPr5pCU/IAr6Rg==\"\n            + \"-----END ENCRYPTED PRIVATE KEY-----\";\n\n        String password = \"password\";\n        String payload = \"symbol=LTCBTC&side=BUY&type=LIMIT&timeInForce=GTC&quantity=1&price=0.1&recvWindow=5000&timestamp=1499827319559\";\n        String expectedSignature = \"uz2xmNkOf1EEsnZoWGraxR13F4jF9JYdC68uvWqYyjFyjwDgcoiMRm23UqsxWkmA208smu7TuGVxm1cWoZa/5fLQ2T/RcfLW9sokNWDzf1vM/xEpSmQEsSyIzd/c0pMWGsUkXsYpIarp3e/KSFzgwI73qZfbalBRkkK7u3dLWRVRk4kmEVf6dQUWMyXC44X8LB0M1XFrhkqcFYdcP9NcaCZCvb8nzG/nyUPtCJdBxVn8MMgXaVCM8DIbSrUBT0ZUxFQ3gTSd929LR1Tp6P2y4pHiWSElW5nJZYRRn2zUFt4xH7wvVKvuuEi8HH0Dusf6KBcWq8/3viAcRUh1Cj4fsQ==\";\n\n        RsaSignatureGenerator rsaSignatureGenerator = new RsaSignatureGenerator(pem, password);\n        String actualSignature = rsaSignatureGenerator.getSignature(payload);\n        assertEquals(expectedSignature, actualSignature);\n    }", "default_arguments": null, "file": "src/test/java/unit/signature/TestRsaSignatureGenerator.java", "class_name": "TestRsaSignatureGenerator", "class_uri": "src/test/java/unit/signature/TestRsaSignatureGenerator.java.TestRsaSignatureGenerator", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]