[{"strategy": "retry", "code": "\npackage org.apache.commons.cli;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class HelpFormatter_printUsageTest {\n\n    @Test\n    public void testPrintUsageWithSingleOption() {\n        // Given\n        HelpFormatter formatter = new HelpFormatter();\n        Options options = new Options();\n        options.addOption(Option.builder(\"f\").longOpt(\"file\").hasArg().argName(\"FILE\").desc(\"The file to be processed\").required().build());\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n\n        // When\n        formatter.printUsage(pw, 80, \"myapp\", options);\n        pw.flush();\n\n        // Then\n        String expected = \"usage: myapp -f <FILE>\\n\";\n        assertEquals(expected, sw.toString());\n    }\n\n    @Test\n    public void testPrintUsageWithOptionGroup() {\n        // Given\n        HelpFormatter formatter = new HelpFormatter();\n        Options options = new Options();\n        OptionGroup group = new OptionGroup();\n        group.addOption(Option.builder(\"a\").longOpt(\"optionA\").desc(\"Option A\").build());\n        group.addOption(Option.builder(\"b\").longOpt(\"optionB\").desc(\"Option B\").build());\n        options.addOptionGroup(group);\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n\n        // When\n        formatter.printUsage(pw, 80, \"myapp\", options);\n        pw.flush();\n\n        // Then\n        String expected = \"usage: myapp [-a | -b]\\n\";\n        assertEquals(expected, sw.toString());\n    }\n\n    @Test\n    public void testPrintUsageWithOptionComparator() {\n        // Given\n        HelpFormatter formatter = new HelpFormatter();\n        Options options = new Options();\n        options.addOption(Option.builder(\"b\").longOpt(\"optionB\").desc(\"Option B\").required().build());\n        options.addOption(Option.builder(\"a\").longOpt(\"optionA\").desc(\"Option A\").required().build());\n        StringWriter sw = new StringWriter();\n        PrintWriter pw = new PrintWriter(sw);\n\n        // When\n        formatter.printUsage(pw, 80, \"myapp\", options);\n        pw.flush();\n\n        // Then\n        String expected = \"usage: myapp -a -b\\n\";\n        assertEquals(expected, sw.toString());\n    }\n}\n"}]