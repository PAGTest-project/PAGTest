[{"strategy": "generate", "code": "\npackage org.apache.commons.cli;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class CommandLine_getOptionPropertiesTest {\n\n    private CommandLine commandLine;\n    private Option option;\n\n    @BeforeEach\n    public void setUp() {\n        commandLine = new CommandLine();\n        option = new Option(\"testOpt\", \"Test Option\", true, \"This is a test option\");\n        option.setArgs(2);\n        option.addValue(\"key1\");\n        option.addValue(\"value1\");\n        option.addValue(\"key2\");\n        option.addValue(\"value2\");\n        commandLine.addOption(option);\n    }\n\n    @Test\n    public void testGetOptionPropertiesWithExistingOption() {\n        Properties props = commandLine.getOptionProperties(option);\n        assertEquals(2, props.size());\n        assertEquals(\"value1\", props.getProperty(\"key1\"));\n        assertEquals(\"value2\", props.getProperty(\"key2\"));\n    }\n\n    @Test\n    public void testGetOptionPropertiesWithNonExistingOption() {\n        Option nonExistingOption = new Option(\"nonExistingOpt\", \"Non-existing Option\", true, \"This option does not exist\");\n        Properties props = commandLine.getOptionProperties(nonExistingOption);\n        assertTrue(props.isEmpty());\n    }\n\n    @Test\n    public void testGetOptionPropertiesWithEmptyValues() {\n        Option emptyValuesOption = new Option(\"emptyValuesOpt\", \"Empty Values Option\", true, \"This option has empty values\");\n        emptyValuesOption.setArgs(2);\n        commandLine.addOption(emptyValuesOption);\n        Properties props = commandLine.getOptionProperties(emptyValuesOption);\n        assertTrue(props.isEmpty());\n    }\n\n    @Test\n    public void testGetOptionPropertiesWithOddNumberOfValues() {\n        Option oddValuesOption = new Option(\"oddValuesOpt\", \"Odd Values Option\", true, \"This option has an odd number of values\");\n        oddValuesOption.setArgs(3);\n        oddValuesOption.addValue(\"key1\");\n        oddValuesOption.addValue(\"value1\");\n        oddValuesOption.addValue(\"key2\");\n        commandLine.addOption(oddValuesOption);\n        Properties props = commandLine.getOptionProperties(oddValuesOption);\n        assertEquals(2, props.size());\n        assertEquals(\"value1\", props.getProperty(\"key1\"));\n        assertEquals(\"true\", props.getProperty(\"key2\"));\n    }\n\n    @Test\n    public void testGetOptionPropertiesWithNullOption() {\n        Properties props = commandLine.getOptionProperties(null);\n        assertTrue(props.isEmpty());\n    }\n}\n"}]