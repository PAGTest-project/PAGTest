[{"strategy": "generate", "code": "\npackage org.apache.commons.cli;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.io.File;\nimport java.net.URL;\n\nimport org.junit.jupiter.api.Test;\n\npublic class TypeHandler_createValueTest {\n\n    @Test\n    public void testCreateValueWithValidClass() throws ParseException {\n        String className = \"java.lang.String\";\n        Class<?> clazz = TypeHandler.createValue(className, Class.class);\n        assertEquals(String.class, clazz);\n    }\n\n    @Test\n    public void testCreateValueWithInvalidClass() {\n        String invalidClassName = \"InvalidClassName\";\n        assertThrows(ParseException.class, () -> {\n            TypeHandler.createValue(invalidClassName, Class.class);\n        });\n    }\n\n    @Test\n    public void testCreateValueWithValidFile() throws ParseException {\n        String filePath = \"src/test/resources/testfile.txt\";\n        File file = TypeHandler.createValue(filePath, File.class);\n        assertEquals(new File(filePath), file);\n    }\n\n    @Test\n    public void testCreateValueWithInvalidFile() {\n        String invalidFilePath = \"invalid/path/to/file.txt\";\n        assertThrows(ParseException.class, () -> {\n            TypeHandler.createValue(invalidFilePath, File.class);\n        });\n    }\n\n    @Test\n    public void testCreateValueWithValidURL() throws ParseException {\n        String urlString = \"http://example.com\";\n        URL url = TypeHandler.createValue(urlString, URL.class);\n        assertEquals(new URL(urlString), url);\n    }\n\n    @Test\n    public void testCreateValueWithInvalidURL() {\n        String invalidUrlString = \"invalid://example.com\";\n        assertThrows(ParseException.class, () -> {\n            TypeHandler.createValue(invalidUrlString, URL.class);\n        });\n    }\n}\n"}]