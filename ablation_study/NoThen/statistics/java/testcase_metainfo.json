[{"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_for_empty()", "name": "creates_cucumber_expression_for_empty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_for_empty()", "original_string": "    @Test\n    public void creates_cucumber_expression_for_empty() {\n        assertCucumberExpression(\"\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_by_default()", "name": "creates_cucumber_expression_by_default", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_by_default()", "original_string": "    @Test\n    public void creates_cucumber_expression_by_default() {\n        assertCucumberExpression(\"strings are cukexp by default\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_regular_expression_for_anchors()", "name": "creates_regular_expression_for_anchors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_regular_expression_for_anchors()", "original_string": "    @Test\n    public void creates_regular_expression_for_anchors() {\n        assertRegularExpression(\"^definitely a regexp$\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_regular_expression_for_slashes()", "name": "creates_regular_expression_for_slashes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_regular_expression_for_slashes()", "original_string": "    @Test\n    public void creates_regular_expression_for_slashes() {\n        assertRegularExpression(\"surely a regexp\", \"/surely a regexp/\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_for_parenthesis_with_alpha()", "name": "creates_cucumber_expression_for_parenthesis_with_alpha", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_for_parenthesis_with_alpha()", "original_string": "    @Test\n    public void creates_cucumber_expression_for_parenthesis_with_alpha() {\n        assertCucumberExpression(\"this look(s) like a cukexp\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols()", "name": "creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols()", "original_string": "    @Test\n    public void creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols() {\n        assertCucumberExpression(\"this looks\\\\( i.e: no regex symbols) like a cukexp\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_for_escaped_parenthesis_with_alpha()", "name": "creates_cucumber_expression_for_escaped_parenthesis_with_alpha", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_for_escaped_parenthesis_with_alpha()", "original_string": "    @Test\n    public void creates_cucumber_expression_for_escaped_parenthesis_with_alpha() {\n        assertCucumberExpression(\"a heavy storm forecast \\\\(BF {int}+)\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_for_parenthesis_with_regex_symbols()", "name": "creates_cucumber_expression_for_parenthesis_with_regex_symbols", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_for_parenthesis_with_regex_symbols()", "original_string": "    @Test\n    public void creates_cucumber_expression_for_parenthesis_with_regex_symbols() {\n        assertCucumberExpression(\"the temperature is (+){int} degrees celsius\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_for_only_begin_anchor()", "name": "creates_cucumber_expression_for_only_begin_anchor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_for_only_begin_anchor()", "original_string": "    @Test\n    public void creates_cucumber_expression_for_only_begin_anchor() {\n        assertRegularExpression(\"^this looks like a regexp\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_cucumber_expression_for_only_end_anchor()", "name": "creates_cucumber_expression_for_only_end_anchor", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_cucumber_expression_for_only_end_anchor()", "original_string": "    @Test\n    public void creates_cucumber_expression_for_only_end_anchor() {\n        assertRegularExpression(\"this looks like a regexp$\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]creates_regular_expression_for_slashed_anchors()", "name": "creates_regular_expression_for_slashed_anchors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void creates_regular_expression_for_slashed_anchors()", "original_string": "    @Test\n    public void creates_regular_expression_for_slashed_anchors() {\n        assertRegularExpression(\"^please remove slashes$\", \"/^please remove slashes$/\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest.[void]explains_cukexp_regexp_mix()", "name": "explains_cukexp_regexp_mix", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void explains_cukexp_regexp_mix()", "original_string": "    @Test\n    public void explains_cukexp_regexp_mix() {\n        final Executable testMethod = () -> createExpression(\"^the seller has {int} strike(s)$\");\n\n        final CucumberExpressionException thrownException = assertThrows(CucumberExpressionException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\"You cannot use anchors (^ or $) in Cucumber Expressions. Please remove them from ^the seller has {int} strike(s)$\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "class_name": "ExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java.ExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java.ArgumentTest.[void]exposes_parameter_type()", "name": "exposes_parameter_type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void exposes_parameter_type()", "original_string": "    @Test\n    public void exposes_parameter_type() {\n        TreeRegexp treeRegexp = new TreeRegexp(\"three (.*) mice\");\n        ParameterTypeRegistry parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        List<Argument<?>> arguments = Argument.build(\n                treeRegexp.match(\"three blind mice\"),\n                singletonList(parameterTypeRegistry.lookupByTypeName(\"string\")));\n        Argument<?> argument = arguments.get(0);\n        assertEquals(\"string\", argument.getParameterType().getName());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "class_name": "ArgumentTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java.ArgumentTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]acceptance_tests_pass(Expectation)", "name": "acceptance_tests_pass", "arg_nums": 1, "params": [{"name": "expectation", "type": "Expectation"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation)", "original_string": "    @ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation) {\n        if (expectation.exception == null) {\n            CucumberExpression expression = new CucumberExpression(expectation.expression, parameterTypeRegistry);\n            List<Argument<?>> match = expression.match(expectation.text);\n            List<?> values = match == null ? null : match.stream()\n                    .map(Argument::getValue)\n                    .collect(Collectors.toList());\n\n            assertThat(values, CustomMatchers.equalOrCloseTo(expectation.expected_args));\n        } else {\n            Executable executable = () -> {\n                CucumberExpression expression = new CucumberExpression(expectation.expression, parameterTypeRegistry);\n                expression.match(expectation.text);\n            };\n            CucumberExpressionException exception = assertThrows(CucumberExpressionException.class, executable);\n            assertThat(exception.getMessage(), equalTo(expectation.exception));\n        }\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource", "marker_annotations": ["@ParameterizedTest", "@MethodSource"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]exposes_source()", "name": "exposes_source", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void exposes_source()", "original_string": "    @Test\n    void exposes_source() {\n        String expr = \"I have {int} cuke(s)\";\n        assertEquals(expr, new CucumberExpression(expr, new ParameterTypeRegistry(Locale.ENGLISH)).getSource());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": " Misc tests"}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_anonymous_parameter_type_with_hint()", "name": "matches_anonymous_parameter_type_with_hint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_anonymous_parameter_type_with_hint()", "original_string": "    @Test\n    void matches_anonymous_parameter_type_with_hint() {\n        assertEquals(singletonList(0.22f), match(\"{}\", \"0.22\", Float.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": " Java-specific"}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]documents_match_arguments()", "name": "documents_match_arguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void documents_match_arguments()", "original_string": "    @Test\n    void documents_match_arguments() {\n        String expr = \"I have {int} cuke(s)\";\n        Expression expression = new CucumberExpression(expr, parameterTypeRegistry);\n        List<Argument<?>> args = expression.match(\"I have 7 cukes\");\n        assertEquals(7, args.get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_byte()", "name": "matches_byte", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_byte()", "original_string": "    @Test\n    void matches_byte() {\n        assertEquals(singletonList(Byte.MAX_VALUE), match(\"{byte}\", \"127\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_short()", "name": "matches_short", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_short()", "original_string": "    @Test\n    void matches_short() {\n        assertEquals(singletonList(Short.MAX_VALUE), match(\"{short}\", String.valueOf(Short.MAX_VALUE)));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_long()", "name": "matches_long", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_long()", "original_string": "    @Test\n    void matches_long() {\n        assertEquals(singletonList(Long.MAX_VALUE), match(\"{long}\", String.valueOf(Long.MAX_VALUE)));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_biginteger()", "name": "matches_biginteger", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_biginteger()", "original_string": "    @Test\n    void matches_biginteger() {\n        BigInteger bigInteger = BigInteger.valueOf(Long.MAX_VALUE);\n        bigInteger = bigInteger.pow(10);\n        assertEquals(singletonList(bigInteger), match(\"{biginteger}\", bigInteger.toString()));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_bigdecimal()", "name": "matches_bigdecimal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_bigdecimal()", "original_string": "    @Test\n    void matches_bigdecimal() {\n        BigDecimal bigDecimal = BigDecimal.valueOf(Math.PI);\n        assertEquals(singletonList(bigDecimal), match(\"{bigdecimal}\", bigDecimal.toString()));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_double_with_comma_for_locale_using_comma()", "name": "matches_double_with_comma_for_locale_using_comma", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_double_with_comma_for_locale_using_comma()", "original_string": "    @Test\n    void matches_double_with_comma_for_locale_using_comma() {\n        List<?> values = match(\"{double}\", \"1,22\", Locale.FRANCE);\n        assertEquals(singletonList(1.22), values);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]matches_float_with_zero()", "name": "matches_float_with_zero", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void matches_float_with_zero()", "original_string": "    @Test\n    void matches_float_with_zero() {\n        List<?> values = match(\"{float}\", \"0\", Locale.ENGLISH);\n        assertEquals(0.0f, values.get(0));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest.[void]unmatched_optional_groups_have_null_values()", "name": "unmatched_optional_groups_have_null_values", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void unmatched_optional_groups_have_null_values()", "original_string": "    @Test\n    void unmatched_optional_groups_have_null_values() {\n        ParameterTypeRegistry parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"textAndOrNumber\",\n                singletonList(\"([A-Z]+)?(?: )?([0-9]+)?\"),\n                new TypeReference<List<String>>() {\n                }.getType(),\n                new CaptureGroupTransformer<List<String>>() {\n                    @Override\n                    public List<String> transform(String... args) {\n                        return asList(args);\n                    }\n                },\n                false,\n                false)\n        );\n        assertThat(match(\"{textAndOrNumber}\", \"TLA\", parameterTypeRegistry), is(singletonList(asList(\"TLA\", null))));\n        assertThat(match(\"{textAndOrNumber}\", \"123\", parameterTypeRegistry), is(singletonList(asList(null, \"123\"))));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "class_name": "CucumberExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java.CucumberExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getSourceTest.java.RegularExpression_getSourceTest.[void]testGetSource()", "name": "testGetSource", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetSource()", "original_string": "    @Test\n    public void testGetSource() {\n        Pattern pattern = Pattern.compile(\"\\\\d+\");\n        ParameterTypeRegistry parameterTypeRegistry = new ParameterTypeRegistry(java.util.Locale.getDefault());\n        RegularExpression regularExpression = new RegularExpression(pattern, parameterTypeRegistry);\n\n        String source = regularExpression.getSource();\n\n        assertEquals(\"\\\\d+\", source);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getSourceTest.java", "class_name": "RegularExpression_getSourceTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getSourceTest.java.RegularExpression_getSourceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java.ParameterType_useRegexpMatchAsStrongTypeHintTest.[void]testUseRegexpMatchAsStrongTypeHintTrue()", "name": "testUseRegexpMatchAsStrongTypeHintTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUseRegexpMatchAsStrongTypeHintTrue()", "original_string": "    @Test\n    public void testUseRegexpMatchAsStrongTypeHintTrue() {\n        ParameterType<Object> parameterType = new ParameterType<>(\n                \"name\",\n                singletonList(\"regexp\"),\n                Object.class,\n                new CaptureGroupTransformer<Object>() {\n                    @Override\n                    public Object transform(String[] args) {\n                        return null;\n                    }\n                },\n                true,\n                false,\n                true\n        );\n        assertTrue(parameterType.useRegexpMatchAsStrongTypeHint());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java", "class_name": "ParameterType_useRegexpMatchAsStrongTypeHintTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java.ParameterType_useRegexpMatchAsStrongTypeHintTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java.ParameterType_useRegexpMatchAsStrongTypeHintTest.[void]testUseRegexpMatchAsStrongTypeHintFalse()", "name": "testUseRegexpMatchAsStrongTypeHintFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUseRegexpMatchAsStrongTypeHintFalse()", "original_string": "    @Test\n    public void testUseRegexpMatchAsStrongTypeHintFalse() {\n        ParameterType<Object> parameterType = new ParameterType<>(\n                \"name\",\n                singletonList(\"regexp\"),\n                Object.class,\n                new CaptureGroupTransformer<Object>() {\n                    @Override\n                    public Object transform(String[] args) {\n                        return null;\n                    }\n                },\n                true,\n                false,\n                false\n        );\n        assertFalse(parameterType.useRegexpMatchAsStrongTypeHint());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java", "class_name": "ParameterType_useRegexpMatchAsStrongTypeHintTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useRegexpMatchAsStrongTypeHintTest.java.ParameterType_useRegexpMatchAsStrongTypeHintTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/EnumParameterTypeTest.java.EnumParameterTypeTest.[void]converts_to_enum()", "name": "converts_to_enum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void converts_to_enum()", "original_string": "    @Test\n    public void converts_to_enum() {\n        ParameterTypeRegistry registry = new ParameterTypeRegistry(Locale.ENGLISH);\n        registry.defineParameterType(ParameterType.fromEnum(Mood.class));\n\n        CucumberExpression expression = new CucumberExpression(\"I am {Mood}\", registry);\n        List<Argument<?>> args = expression.match(\"I am happy\");\n        assertEquals(Mood.happy, args.get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/EnumParameterTypeTest.java", "class_name": "EnumParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/EnumParameterTypeTest.java.EnumParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java.GenericParameterTypeTest.[void]transforms_to_a_list_of_string()", "name": "transforms_to_a_list_of_string", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void transforms_to_a_list_of_string()", "original_string": "    @Test\n    public void transforms_to_a_list_of_string() {\n        ParameterTypeRegistry parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"stringlist\",\n                singletonList(\".*\"),\n                new TypeReference<List<String>>() {\n                }.getType(),\n                new CaptureGroupTransformer<List<String>>() {\n                    @Override\n                    public List<String> transform(String... args) {\n                        return asList(args[0].split(\",\"));\n                    }\n                },\n                false,\n                false)\n        );\n        Expression expression = new CucumberExpression(\"I have {stringlist} yay\", parameterTypeRegistry);\n        List<Argument<?>> args = expression.match(\"I have three,blind,mice yay\");\n        assertEquals(asList(\"three\", \"blind\", \"mice\"), args.get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java", "class_name": "GenericParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java.GenericParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexp_getGroupBuilderTest.java.TreeRegexp_getGroupBuilderTest.[void]testGetGroupBuilder()", "name": "testGetGroupBuilder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testGetGroupBuilder()", "original_string": "    @Test\n    void testGetGroupBuilder() {\n        // Given\n        Pattern pattern = Pattern.compile(\"a(b)c\");\n        TreeRegexp treeRegexp = new TreeRegexp(pattern);\n\n        // When\n        GroupBuilder groupBuilder = treeRegexp.getGroupBuilder();\n\n        // Then\n        assertNotNull(groupBuilder);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexp_getGroupBuilderTest.java", "class_name": "TreeRegexp_getGroupBuilderTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexp_getGroupBuilderTest.java.TreeRegexp_getGroupBuilderTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java.KeyboardFriendlyDecimalFormatSymbolsTest.[void]listMinusSigns()", "name": "listMinusSigns", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void listMinusSigns()", "original_string": "    @Test\n    void listMinusSigns(){\n        System.out.println(\"Original minus signs:\");\n        listMinusSigns(DecimalFormatSymbols::getInstance);\n        System.out.println();\n        System.out.println(\"Friendly minus signs:\");\n        listMinusSigns(KeyboardFriendlyDecimalFormatSymbols::getInstance);\n        System.out.println();\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "class_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java.KeyboardFriendlyDecimalFormatSymbolsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java.KeyboardFriendlyDecimalFormatSymbolsTest.[void]listDecimalAndGroupingSeparators()", "name": "listDecimalAndGroupingSeparators", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void listDecimalAndGroupingSeparators()", "original_string": "    @Test\n    void listDecimalAndGroupingSeparators(){\n        System.out.println(\"Original decimal and group separators:\");\n        listDecimalAndGroupingSeparators(DecimalFormatSymbols::getInstance);\n        System.out.println();\n        System.out.println(\"Friendly decimal and group separators:\");\n        listDecimalAndGroupingSeparators(KeyboardFriendlyDecimalFormatSymbols::getInstance);\n        System.out.println();\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "class_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java.KeyboardFriendlyDecimalFormatSymbolsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java.KeyboardFriendlyDecimalFormatSymbolsTest.[void]listExponentSigns()", "name": "listExponentSigns", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void listExponentSigns()", "original_string": "    @Test\n    void listExponentSigns(){\n        System.out.println(\"Original exponent signs:\");\n        listExponentSigns(DecimalFormatSymbols::getInstance);\n        System.out.println();\n        System.out.println(\"Friendly exponent signs:\");\n        listExponentSigns(KeyboardFriendlyDecimalFormatSymbols::getInstance);\n        System.out.println();\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "class_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java.KeyboardFriendlyDecimalFormatSymbolsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]documents_expression_generation()", "name": "documents_expression_generation", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void documents_expression_generation()", "original_string": "    @Test\n    public void documents_expression_generation() {\n        CucumberExpressionGenerator generator = new CucumberExpressionGenerator(parameterTypeRegistry);\n        String undefinedStepText = \"I have 2 cucumbers and 1.5 tomato\";\n        GeneratedExpression generatedExpression = generator.generateExpressions(undefinedStepText).get(0);\n        assertEquals(\"I have {int} cucumbers and {double} tomato\", generatedExpression.getSource());\n        assertEquals(Double.class, generatedExpression.getParameterTypes().get(1).getType());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_for_no_args()", "name": "generates_expression_for_no_args", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_for_no_args()", "original_string": "    @Test\n    public void generates_expression_for_no_args() {\n        assertExpression(\"hello\", Collections.<String>emptyList(), \"hello\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_with_escaped_left_parenthesis()", "name": "generates_expression_with_escaped_left_parenthesis", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_with_escaped_left_parenthesis()", "original_string": "    @Test\n    public void generates_expression_with_escaped_left_parenthesis() {\n        assertExpression(\n                \"\\\\(iii)\", Collections.<String>emptyList(),\n                \"(iii)\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_with_escaped_left_curly_brace()", "name": "generates_expression_with_escaped_left_curly_brace", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_with_escaped_left_curly_brace()", "original_string": "    @Test\n    public void generates_expression_with_escaped_left_curly_brace() {\n        assertExpression(\n                \"\\\\{iii}\", Collections.<String>emptyList(),\n                \"{iii}\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_with_escaped_slashes()", "name": "generates_expression_with_escaped_slashes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_with_escaped_slashes()", "original_string": "    @Test\n    public void generates_expression_with_escaped_slashes() {\n        assertExpression(\n                \"The {int}\\\\/{int}\\\\/{int} hey\", asList(\"int1\", \"int2\", \"int3\"),\n                \"The 1814/05/17 hey\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_for_int_double_arg()", "name": "generates_expression_for_int_double_arg", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_for_int_double_arg()", "original_string": "    @Test\n    public void generates_expression_for_int_double_arg() {\n        assertExpression(\n                \"I have {int} cukes and {double} euro\", asList(\"int1\", \"double1\"),\n                \"I have 2 cukes and 1.5 euro\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_for_numbers_with_symbols_and_currency()", "name": "generates_expression_for_numbers_with_symbols_and_currency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_for_numbers_with_symbols_and_currency()", "original_string": "    @Test\n    public void generates_expression_for_numbers_with_symbols_and_currency() {\n        assertExpression(\n                \"Some ${double} of cukes at {int}\u00b0 Celsius\", asList(\"double1\", \"int1\"),\n                \"Some $5000.00 of cukes at 42\u00b0 Celsius\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_for_numbers_with_text_on_both_sides()", "name": "generates_expression_for_numbers_with_text_on_both_sides", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_for_numbers_with_text_on_both_sides()", "original_string": "    @Test\n    public void generates_expression_for_numbers_with_text_on_both_sides() {\n        assertExpression(\n                \"i18n\", asList(),\n                \"i18n\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_for_strings()", "name": "generates_expression_for_strings", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_for_strings()", "original_string": "    @Test\n    public void generates_expression_for_strings() {\n        assertExpression(\n                \"I like {string} and {string}\", asList(\"string\", \"string2\"),\n                \"I like \\\"bangers\\\" and 'mash'\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_with_percent_sign()", "name": "generates_expression_with_percent_sign", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_with_percent_sign()", "original_string": "    @Test\n    public void generates_expression_with_percent_sign() {\n        assertExpression(\n                \"I am {int}% foobar\", singletonList(\"int1\"),\n                \"I am 20% foobar\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_expression_for_just_int()", "name": "generates_expression_for_just_int", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_expression_for_just_int()", "original_string": "    @Test\n    public void generates_expression_for_just_int() {\n        assertExpression(\n                \"{int}\", singletonList(\"int1\"),\n                \"99999\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]numbers_all_arguments_when_type_is_reserved_keyword()", "name": "numbers_all_arguments_when_type_is_reserved_keyword", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void numbers_all_arguments_when_type_is_reserved_keyword()", "original_string": "    @Test\n    public void numbers_all_arguments_when_type_is_reserved_keyword() {\n        assertExpression(\n                \"I have {int} cukes and {int} euro\", asList(\"int1\", \"int2\"),\n                \"I have 2 cukes and 5 euro\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]numbers_only_second_argument_when_type_is_not_reserved_keyword()", "name": "numbers_only_second_argument_when_type_is_not_reserved_keyword", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void numbers_only_second_argument_when_type_is_not_reserved_keyword()", "original_string": "    @Test\n    public void numbers_only_second_argument_when_type_is_not_reserved_keyword() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"currency\",\n                \"[A-Z]{3}\",\n                Currency.class,\n                new Transformer<Currency>() {\n                    @Override\n                    public Currency transform(String arg) {\n                        return Currency.getInstance(arg);\n                    }\n                }\n        ));\n        assertExpression(\n                \"I have a {currency} account and a {currency} account\", asList(\"currency\", \"currency2\"),\n                \"I have a EUR account and a GBP account\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]does_not_suggest_parameter_type_when_surrounded_by_alphanum()", "name": "does_not_suggest_parameter_type_when_surrounded_by_alphanum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void does_not_suggest_parameter_type_when_surrounded_by_alphanum()", "original_string": "    @Test\n    public void does_not_suggest_parameter_type_when_surrounded_by_alphanum() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"direction\",\n                \"(up|down)\",\n                String.class,\n                new Transformer<String>() {\n                    @Override\n                    public String transform(String arg) {\n                        return arg;\n                    }\n                },\n                true,\n                false\n        ));\n        assertExpression(\n                \"I like muppets\", Collections.<String>emptyList(),\n                \"I like muppets\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]does_suggest_parameter_type_when_surrounded_by_space()", "name": "does_suggest_parameter_type_when_surrounded_by_space", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void does_suggest_parameter_type_when_surrounded_by_space()", "original_string": "    @Test\n    public void does_suggest_parameter_type_when_surrounded_by_space() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"direction\",\n                \"(up|down)\",\n                String.class,\n                new Transformer<String>() {\n                    @Override\n                    public String transform(String arg) {\n                        return arg;\n                    }\n                },\n                true,\n                false\n        ));\n        assertExpression(\n                \"it went {direction} and {direction}\", asList(\"direction\", \"direction2\"),\n                \"it went up and down\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]prefers_leftmost_match_when_there_is_overlap()", "name": "prefers_leftmost_match_when_there_is_overlap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void prefers_leftmost_match_when_there_is_overlap()", "original_string": "    @Test\n    public void prefers_leftmost_match_when_there_is_overlap() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"right\",\n                \"c d\",\n                String.class,\n                (Transformer<String>) s -> s\n        ));\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"left\",\n                \"b c\",\n                String.class,\n                new Transformer<String>() {\n                    @Override\n                    public String transform(String arg) {\n                        return arg;\n                    }\n                }\n        ));\n        assertExpression(\n                \"a {left} d e f g\", singletonList(\"left\"),\n                \"a b c d e f g\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]prefers_widest_match_when_pos_is_same()", "name": "prefers_widest_match_when_pos_is_same", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void prefers_widest_match_when_pos_is_same()", "original_string": "    @Test\n    public void prefers_widest_match_when_pos_is_same() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"airport\",\n                \"[A-Z]{3}\",\n                String.class,\n                (Transformer<String>) s -> s\n        ));\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"leg\",\n                \"[A-Z]{3}-[A-Z]{3}\",\n                String.class,\n                (Transformer<String>) s -> s\n        ));\n        assertExpression(\n                \"leg {leg}\", singletonList(\"leg\"),\n                \"leg LHR-CDG\");\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_all_combinations_of_expressions_when_several_parameter_types_match()", "name": "generates_all_combinations_of_expressions_when_several_parameter_types_match", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_all_combinations_of_expressions_when_several_parameter_types_match()", "original_string": "    @Test\n    public void generates_all_combinations_of_expressions_when_several_parameter_types_match() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"currency\",\n                \"x\",\n                Currency.class,\n                (Transformer<Currency>) Currency::getInstance,\n                true,\n                true\n        ));\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"date\",\n                \"x\",\n                Date.class,\n                new Transformer<Date>() {\n                    @Override\n                    public Date transform(String arg) {\n                        try {\n                            return df.parse(arg);\n                        } catch (ParseException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                },\n                true,\n                false\n        ));\n\n        List<GeneratedExpression> generatedExpressions = generator.generateExpressions(\"I have x and x and another x\");\n        List<String> expressions = new ArrayList<>();\n        for (GeneratedExpression generatedExpression : generatedExpressions) {\n            String source = generatedExpression.getSource();\n            expressions.add(source);\n        }\n        assertEquals(asList(\n                \"I have {currency} and {currency} and another {currency}\",\n                \"I have {currency} and {currency} and another {date}\",\n                \"I have {currency} and {date} and another {currency}\",\n                \"I have {currency} and {date} and another {date}\",\n                \"I have {date} and {currency} and another {currency}\",\n                \"I have {date} and {currency} and another {date}\",\n                \"I have {date} and {date} and another {currency}\",\n                \"I have {date} and {date} and another {date}\"\n        ), expressions);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]exposes_transforms_in_generated_expression()", "name": "exposes_transforms_in_generated_expression", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void exposes_transforms_in_generated_expression()", "original_string": "    @Test\n    public void exposes_transforms_in_generated_expression() {\n        GeneratedExpression generatedExpression = generator.generateExpressions(\"I have 2 cukes and 1.5 euro\").get(0);\n        assertEquals(Integer.class, generatedExpression.getParameterTypes().get(0).getType());\n        assertEquals(Double.class, generatedExpression.getParameterTypes().get(1).getType());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]matches_parameter_types_with_optional_capture_groups()", "name": "matches_parameter_types_with_optional_capture_groups", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_parameter_types_with_optional_capture_groups()", "original_string": "    @Test\n    public void matches_parameter_types_with_optional_capture_groups() {\n        ParameterType<String> optionalFlight = new ParameterType<>(\n                \"optional-flight\",\n                \"(1st flight)?\",\n                String.class,\n                (Transformer<String>) arg -> arg,\n                true,\n                false\n        );\n        ParameterType<String> optionalHotel = new ParameterType<>(\n                \"optional-hotel\",\n                \"(1 hotel)?\",\n                String.class,\n                (Transformer<String>) arg -> arg,\n                true,\n                false\n        );\n\n        parameterTypeRegistry.defineParameterType(optionalFlight);\n        parameterTypeRegistry.defineParameterType(optionalHotel);\n        List<GeneratedExpression> generatedExpressions = generator.generateExpressions(\"I reach Stage 4: 1st flight -1 hotel\");\n        assertEquals(\"I reach Stage {int}: {optional-flight} {int} hotel\", generatedExpressions.get(0).getSource());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]generates_at_most_256_expressions()", "name": "generates_at_most_256_expressions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_at_most_256_expressions()", "original_string": "    @Test\n    public void generates_at_most_256_expressions() {\n        for (int i = 0; i < 4; i++) {\n            ParameterType<String> myType = new ParameterType<>(\n                    \"my-type-\" + i,\n                    \"[a-z]\",\n                    String.class,\n                    (Transformer<String>) arg -> arg,\n                    true,\n                    false\n            );\n            parameterTypeRegistry.defineParameterType(myType);\n\n        }\n        // This would otherwise generate 4^11=419430 expressions and consume just shy of 1.5GB.\n        assertEquals(256, generator.generateExpressions(\"a b c d e f g h i j k\").size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest.[void]prefers_expression_with_longest_non_empty_match()", "name": "prefers_expression_with_longest_non_empty_match", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void prefers_expression_with_longest_non_empty_match()", "original_string": "    @Test\n    public void prefers_expression_with_longest_non_empty_match() {\n        ParameterType<String> zeroOrMore = new ParameterType<>(\n                \"zero-or-more\",\n                \"[a-z]*\",\n                String.class,\n                (Transformer<String>) arg -> arg,\n                true,\n                false\n        );\n        parameterTypeRegistry.defineParameterType(zeroOrMore);\n        ParameterType<String> exactlyOne = new ParameterType<>(\n                \"exactly-one\",\n                \"[a-z]\",\n                String.class,\n                (Transformer<String>) arg -> arg,\n                true,\n                false\n        );\n        parameterTypeRegistry.defineParameterType(exactlyOne);\n\n        List<GeneratedExpression> generatedExpressions = generator.generateExpressions(\"a simple step\");\n        assertEquals(2, generatedExpressions.size());\n        assertEquals(\"{exactly-one} {zero-or-more} {zero-or-more}\", generatedExpressions.get(0).getSource());\n        assertEquals(\"{zero-or-more} {zero-or-more} {zero-or-more}\", generatedExpressions.get(1).getSource());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java", "class_name": "CucumberExpressionGeneratorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionGeneratorTest.java.CucumberExpressionGeneratorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry_setDefaultParameterTransformerTest.java.ParameterTypeRegistry_setDefaultParameterTransformerTest.[void]testSetDefaultParameterTransformer()", "name": "testSetDefaultParameterTransformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testSetDefaultParameterTransformer()", "original_string": "    @Test\n    public void testSetDefaultParameterTransformer() {\n        // Given\n        ParameterByTypeTransformer originalTransformer = parameterTypeRegistry.getDefaultParameterTransformer();\n\n        // When\n        parameterTypeRegistry.setDefaultParameterTransformer(mockTransformer);\n\n        // Then\n        assertSame(mockTransformer, parameterTypeRegistry.getDefaultParameterTransformer());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry_setDefaultParameterTransformerTest.java", "class_name": "ParameterTypeRegistry_setDefaultParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry_setDefaultParameterTransformerTest.java.ParameterTypeRegistry_setDefaultParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java.RegexpUtils_escapeRegexTest.[void]testEscapeRegex_NoSpecialChars()", "name": "testEscapeRegex_NoSpecialChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEscapeRegex_NoSpecialChars()", "original_string": "    @Test\n    void testEscapeRegex_NoSpecialChars() {\n        String input = \"hello world\";\n        String expected = \"hello world\";\n        String actual = RegexpUtils.escapeRegex(input);\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java", "class_name": "RegexpUtils_escapeRegexTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java.RegexpUtils_escapeRegexTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java.RegexpUtils_escapeRegexTest.[void]testEscapeRegex_WithSpecialChars()", "name": "testEscapeRegex_WithSpecialChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEscapeRegex_WithSpecialChars()", "original_string": "    @Test\n    void testEscapeRegex_WithSpecialChars() {\n        String input = \"hello.world$\";\n        String expected = \"hello\\\\.world\\\\$\";\n        String actual = RegexpUtils.escapeRegex(input);\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java", "class_name": "RegexpUtils_escapeRegexTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java.RegexpUtils_escapeRegexTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java.RegexpUtils_escapeRegexTest.[void]testEscapeRegex_AllSpecialChars()", "name": "testEscapeRegex_AllSpecialChars", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testEscapeRegex_AllSpecialChars()", "original_string": "    @Test\n    void testEscapeRegex_AllSpecialChars() {\n        String input = \"^$(){}[].+*?\\\\\";\n        String expected = \"\\\\^\\\\$\\\\(\\\\)\\\\{\\\\}\\\\[\\\\]\\\\.\\\\+\\\\*\\\\?\\\\\\\\\";\n        String actual = RegexpUtils.escapeRegex(input);\n        assertEquals(expected, actual);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java", "class_name": "RegexpUtils_escapeRegexTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtils_escapeRegexTest.java.RegexpUtils_escapeRegexTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]throws_exception_for_illegal_character_in_parameter_name()", "name": "throws_exception_for_illegal_character_in_parameter_name", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void throws_exception_for_illegal_character_in_parameter_name()", "original_string": "    @Test\n    public void throws_exception_for_illegal_character_in_parameter_name() {\n\n        final Executable testMethod = () -> new ParameterType<>(\n                \"(string)\",\n                \".*\",\n                String.class,\n                (Transformer<String>) s -> s,\n                false,\n                false\n        );\n\n        final CucumberExpressionException thrownException = assertThrows(CucumberExpressionException.class, testMethod);\n        assertThat(thrownException.getMessage(), is(equalTo(\"Illegal character in parameter name {(string)}. Parameter names may not contain '{', '}', '(', ')', '\\\\' or '/'\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]matches_CucumberExpression_parameters_with_custom_parameter_type()", "name": "matches_CucumberExpression_parameters_with_custom_parameter_type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_CucumberExpression_parameters_with_custom_parameter_type()", "original_string": "    @Test\n    public void matches_CucumberExpression_parameters_with_custom_parameter_type() {\n        Expression expression = new CucumberExpression(\"I have a {color} ball\", parameterTypeRegistry);\n        Object argumentValue = expression.match(\"I have a red ball\").get(0).getValue();\n        assertEquals(new Color(\"red\"), argumentValue);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]matches_CucumberExpression_parameters_with_multiple_capture_groups()", "name": "matches_CucumberExpression_parameters_with_multiple_capture_groups", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_CucumberExpression_parameters_with_multiple_capture_groups()", "original_string": "    @Test\n    public void matches_CucumberExpression_parameters_with_multiple_capture_groups() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"coordinate\",\n                \"(\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)\",\n                Coordinate.class,\n                new CaptureGroupTransformer<Coordinate>() {\n                    @Override\n                    public Coordinate transform(String[] args) {\n                        return new Coordinate(\n                                parseInt(args[0]),\n                                parseInt(args[1]),\n                                parseInt(args[2]));\n                    }\n                },\n                false,\n                false\n        ));\n        Expression expression = new CucumberExpression(\"A {int} thick line from {coordinate} to {coordinate}\", parameterTypeRegistry);\n        List<Argument<?>> arguments = expression.match(\"A 5 thick line from 10,20,30 to 40,50,60\");\n        Integer thick = (Integer) arguments.get(0).getValue();\n        Coordinate from = (Coordinate) arguments.get(1).getValue();\n        Coordinate to = (Coordinate) arguments.get(2).getValue();\n        assertEquals(Integer.valueOf(5), thick);\n        assertEquals(new Coordinate(10, 20, 30), from);\n        assertEquals(new Coordinate(40, 50, 60), to);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer()", "name": "warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer()", "original_string": "    @Test\n    public void warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"coordinate\",\n                \"(\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)\",\n                Coordinate.class,\n                new Transformer<Coordinate>() {\n                    @Override\n                    public Coordinate transform(String args) {\n                        throw new IllegalStateException();\n                    }\n                },\n                false,\n                false\n        ));\n        Expression expression = new CucumberExpression(\"A {int} thick line from {coordinate} to {coordinate}\", parameterTypeRegistry);\n        List<Argument<?>> arguments = expression.match(\"A 5 thick line from 10,20,30 to 40,50,60\");\n\n        arguments.get(0).getValue();\n\n        final Executable testMethod = () -> arguments.get(1).getValue();\n\n        final CucumberExpressionException thrownException = assertThrows(CucumberExpressionException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"ParameterType {coordinate} was registered with a Transformer but has multiple capture groups [(\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)]. \" +\n                        \"Did you mean to use a CaptureGroupTransformer?\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]warns_when_anonymous_parameter_has_multiple_capture_groups()", "name": "warns_when_anonymous_parameter_has_multiple_capture_groups", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void warns_when_anonymous_parameter_has_multiple_capture_groups()", "original_string": "    @Test\n    public void warns_when_anonymous_parameter_has_multiple_capture_groups() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        Expression expression = new RegularExpression(Pattern.compile(\"^A (\\\\d+) thick line from ((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)) to ((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+))$\"), parameterTypeRegistry);\n        List<Argument<?>> arguments = expression.match(\"A 5 thick line from 10,20,30 to 40,50,60\",\n                Integer.class, Coordinate.class, Coordinate.class);\n\n        arguments.get(0).getValue();\n\n        final Executable testMethod = () -> arguments.get(1).getValue();\n\n        final CucumberExpressionException thrownException = assertThrows(CucumberExpressionException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"Anonymous ParameterType has multiple capture groups [(\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)]. \" +\n                        \"You can only use a single capture group in an anonymous ParameterType.\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group()", "name": "matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group()", "original_string": "    @Test\n    public void matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"color\",\n                asList(\"red|blue|yellow\", \"(?:dark|light) (?:red|blue|yellow)\"),\n                Color.class,\n                Color::new,\n                false,\n                false\n        ));\n        Expression expression = new CucumberExpression(\"I have a {color} ball\", parameterTypeRegistry);\n        Object argumentValue = expression.match(\"I have a dark red ball\").get(0).getValue();\n        assertEquals(new Color(\"dark red\"), argumentValue);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]defers_transformation_until_queried_from_argument()", "name": "defers_transformation_until_queried_from_argument", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void defers_transformation_until_queried_from_argument()", "original_string": "    @Test\n    public void defers_transformation_until_queried_from_argument() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"throwing\",\n                \"bad\",\n                CssColor.class,\n                new Transformer<CssColor>() {\n                    @Override\n                    public CssColor transform(String arg) {\n                        throw new RuntimeException(String.format(\"Can't transform [%s]\", arg));\n                    }\n                },\n                false,\n                false\n        ));\n        Expression expression = new CucumberExpression(\"I have a {throwing} parameter\", parameterTypeRegistry);\n        List<Argument<?>> arguments = expression.match(\"I have a bad parameter\");\n        try {\n            arguments.get(0).getValue();\n            fail(\"should have failed\");\n        } catch (RuntimeException expected) {\n            assertEquals(\"ParameterType {throwing} failed to transform [bad] to \" + CssColor.class, expected.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]conflicting_parameter_type_is_detected_for_type_name()", "name": "conflicting_parameter_type_is_detected_for_type_name", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void conflicting_parameter_type_is_detected_for_type_name()", "original_string": "    @Test\n    public void conflicting_parameter_type_is_detected_for_type_name() {\n        try {\n            parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                    \"color\",\n                    \".*\",\n                    CssColor.class,\n                    CssColor::new,\n                    false,\n                    false\n            ));\n            fail(\"should have failed\");\n        } catch (DuplicateTypeNameException expected) {\n            assertEquals(\"There is already a parameter type with name color\", expected.getMessage());\n        }\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]conflicting_parameter_type_is_not_detected_for_type()", "name": "conflicting_parameter_type_is_not_detected_for_type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void conflicting_parameter_type_is_not_detected_for_type()", "original_string": "    @Test\n    public void conflicting_parameter_type_is_not_detected_for_type() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"whatever\",\n                \".*\",\n                Color.class,\n                Color::new,\n                false,\n                false\n        ));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]conflicting_parameter_type_is_not_detected_for_regexp()", "name": "conflicting_parameter_type_is_not_detected_for_regexp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void conflicting_parameter_type_is_not_detected_for_regexp()", "original_string": "    @Test\n    public void conflicting_parameter_type_is_not_detected_for_regexp() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"css-color\",\n                \"red|blue|yellow\",\n                CssColor.class,\n                CssColor::new,\n                false,\n                false\n        ));\n\n        assertEquals(new CssColor(\"blue\"), new CucumberExpression(\"I have a {css-color} ball\", parameterTypeRegistry).match(\"I have a blue ball\").get(0).getValue());\n        assertEquals(new Color(\"blue\"), new CucumberExpression(\"I have a {color} ball\", parameterTypeRegistry).match(\"I have a blue ball\").get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": "// Conflicting parameter types"}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest.[void]matches_RegularExpression_arguments_with_custom_parameter_type_without_name()", "name": "matches_RegularExpression_arguments_with_custom_parameter_type_without_name", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_RegularExpression_arguments_with_custom_parameter_type_without_name()", "original_string": "    @Test\n    public void matches_RegularExpression_arguments_with_custom_parameter_type_without_name() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                null,\n                \"red|blue|yellow\",\n                Color.class,\n                Color::new,\n                false,\n                false\n        ));\n\n        Expression expression = new RegularExpression(compile(\"I have a (red|blue|yellow) ball\"), parameterTypeRegistry);\n        Object argumentValue = expression.match(\"I have a red ball\").get(0).getValue();\n        assertEquals(new Color(\"red\"), argumentValue);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "class_name": "CustomParameterTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java.CustomParameterTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTransformationTest.java.CucumberExpressionTransformationTest.[void]acceptance_tests_pass(Expectation)", "name": "acceptance_tests_pass", "arg_nums": 1, "params": [{"name": "expectation", "type": "Expectation"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation)", "original_string": "    @ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation) {\n        CucumberExpression expression = new CucumberExpression(expectation.expression, parameterTypeRegistry);\n        assertEquals(expectation.expected_regex, expression.getRegexp().pattern());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTransformationTest.java", "class_name": "CucumberExpressionTransformationTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTransformationTest.java.CucumberExpressionTransformationTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource", "marker_annotations": ["@ParameterizedTest", "@MethodSource"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java.ParameterType_weightTest.[void]testWeightForIntegerClass()", "name": "testWeightForIntegerClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testWeightForIntegerClass()", "original_string": "    @Test\n    void testWeightForIntegerClass() {\n        ParameterType<Integer> parameterType = new ParameterType<>(\"test\", \"(\\\\d+)\", Integer.class, (String arg) -> Integer.parseInt(arg));\n        assertEquals(1000, parameterType.weight());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java", "class_name": "ParameterType_weightTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java.ParameterType_weightTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java.ParameterType_weightTest.[void]testWeightForNonIntegerType()", "name": "testWeightForNonIntegerType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testWeightForNonIntegerType()", "original_string": "    @Test\n    void testWeightForNonIntegerType() {\n        ParameterType<String> parameterType = new ParameterType<>(\"test\", \"(\\\\w+)\", String.class, (String arg) -> arg);\n        assertEquals(0, parameterType.weight());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java", "class_name": "ParameterType_weightTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_weightTest.java.ParameterType_weightTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getRegexpTest.java.CucumberExpression_getRegexpTest.[void]testGetRegexp()", "name": "testGetRegexp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetRegexp()", "original_string": "    @Test\n    public void testGetRegexp() {\n        String expression = \"I have {int} cucumbers\";\n        CucumberExpression cucumberExpression = new CucumberExpression(expression, parameterTypeRegistry);\n\n        Pattern expectedPattern = Pattern.compile(\"I have (-?\\\\d+) cucumbers\");\n        assertEquals(expectedPattern.pattern(), cucumberExpression.getRegexp().pattern());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getRegexpTest.java", "class_name": "CucumberExpression_getRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getRegexpTest.java.CucumberExpression_getRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java.PatternCompilerProviderTest.[void]use_default_compiler_if_none_registered()", "name": "use_default_compiler_if_none_registered", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void use_default_compiler_if_none_registered()", "original_string": "    @Test\n    public void use_default_compiler_if_none_registered() {\n        PatternCompilerProvider.findPatternCompiler(Collections.emptyIterator());\n        assertSame(DefaultPatternCompiler.class, PatternCompilerProvider.service.getClass());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "class_name": "PatternCompilerProviderTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java.PatternCompilerProviderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java.PatternCompilerProviderTest.[void]use_found_pattern_compiler_if_one_provided()", "name": "use_found_pattern_compiler_if_one_provided", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void use_found_pattern_compiler_if_one_provided()", "original_string": "    @Test\n    public void use_found_pattern_compiler_if_one_provided() {\n        PatternCompiler compiler = getTestCompiler();\n        PatternCompilerProvider.findPatternCompiler(Collections.singletonList(compiler).iterator());\n        assertSame(compiler, PatternCompilerProvider.service);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "class_name": "PatternCompilerProviderTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java.PatternCompilerProviderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java.PatternCompilerProviderTest.[void]throws_error_if_more_than_one_pattern_compiler()", "name": "throws_error_if_more_than_one_pattern_compiler", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void throws_error_if_more_than_one_pattern_compiler()", "original_string": "    @Test\n    public void throws_error_if_more_than_one_pattern_compiler() {\n\n        final Executable testMethod = () -> PatternCompilerProvider.findPatternCompiler(Arrays.asList(new DefaultPatternCompiler(), getTestCompiler()).iterator());\n\n        final IllegalStateException thrownException = assertThrows(IllegalStateException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\"More than one PatternCompiler: [class io.cucumber.cucumberexpressions.DefaultPatternCompiler, class io.cucumber.cucumberexpressions.PatternCompilerProviderTest$1]\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "class_name": "PatternCompilerProviderTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java.PatternCompilerProviderTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]exposes_group_source()", "name": "exposes_group_source", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void exposes_group_source()", "original_string": "    @Test\n    public void exposes_group_source() {\n        TreeRegexp tr = new TreeRegexp(\"(a(?:b)?)(c)\");\n        List<String> list = new ArrayList<>();\n        for (GroupBuilder gb : tr.getGroupBuilder().getChildren()) {\n            String source = gb.getSource();\n            list.add(source);\n        }\n        assertEquals(asList(\"a(?:b)?\", \"c\"), list);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]builds_tree()", "name": "builds_tree", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void builds_tree()", "original_string": "    @Test\n    public void builds_tree() {\n        TreeRegexp tr = new TreeRegexp(\"(a(b(c))(d))\");\n        Group g = tr.match(\"abcd\");\n        assertEquals(\"abcd\", g.getChildren().get(0).getValue());\n        assertEquals(\"bc\", g.getChildren().get(0).getChildren().get(0).getValue());\n        assertEquals(\"c\", g.getChildren().get(0).getChildren().get(0).getChildren().get(0).getValue());\n        assertEquals(\"d\", g.getChildren().get(0).getChildren().get(1).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]ignores_question_mark_colon_non_capturing_group()", "name": "ignores_question_mark_colon_non_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_question_mark_colon_non_capturing_group()", "original_string": "    @Test\n    public void ignores_question_mark_colon_non_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(\"a(?:b)(c)\");\n        Group g = tr.match(\"abc\");\n        assertEquals(\"abc\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]ignores_question_mark_exclamation_mark_non_capturing_group()", "name": "ignores_question_mark_exclamation_mark_non_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_question_mark_exclamation_mark_non_capturing_group()", "original_string": "    @Test\n    public void ignores_question_mark_exclamation_mark_non_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(\"a(?!b)(.+)\");\n        Group g = tr.match(\"aBc\");\n        assertEquals(\"aBc\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]ignores_question_mark_equal_sign_non_capturing_group()", "name": "ignores_question_mark_equal_sign_non_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_question_mark_equal_sign_non_capturing_group()", "original_string": "    @Test\n    public void ignores_question_mark_equal_sign_non_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(\"a(?=b)(.+)\");\n        Group g = tr.match(\"abc\");\n        assertEquals(\"abc\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n        assertEquals(\"bc\", g.getChildren().get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]ignores_question_mark_less_than_equal_sign_non_capturing_group()", "name": "ignores_question_mark_less_than_equal_sign_non_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_question_mark_less_than_equal_sign_non_capturing_group()", "original_string": "    @Test\n    public void ignores_question_mark_less_than_equal_sign_non_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(\"a(.+)(?<=c)$\");\n        Group g = tr.match(\"abc\");\n        assertEquals(\"abc\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n        assertEquals(\"bc\", g.getChildren().get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]ignores_question_mark_less_than_exclamation_mark_non_capturing_group()", "name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_question_mark_less_than_exclamation_mark_non_capturing_group()", "original_string": "    @Test\n    public void ignores_question_mark_less_than_exclamation_mark_non_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(\"a(.+)(?<!b)$\");\n        Group g = tr.match(\"abc\");\n        assertEquals(\"abc\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n        assertEquals(\"bc\", g.getChildren().get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]ignores_question_mark_greater_then_non_capturing_group()", "name": "ignores_question_mark_greater_then_non_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_question_mark_greater_then_non_capturing_group()", "original_string": "    @Test\n    public void ignores_question_mark_greater_then_non_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(\"a(?>b)(c)$\");\n        Group g = tr.match(\"abc\");\n        assertEquals(\"abc\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n        assertEquals(\"c\", g.getChildren().get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]matches_named_capturing_group()", "name": "matches_named_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_named_capturing_group()", "original_string": "    @Test\n    public void matches_named_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(\"a(?<name>b)c$\");\n        Group g = tr.match(\"abc\");\n        assertEquals(\"abc\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n        assertEquals(\"b\", g.getChildren().get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]matches_optional_group()", "name": "matches_optional_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_optional_group()", "original_string": "    @Test\n    public void matches_optional_group() {\n        TreeRegexp tr = new TreeRegexp(\"^Something( with an optional argument)?\");\n        Group g = tr.match(\"Something\");\n        assertNull(g.getChildren().get(0).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]matches_nested_groups()", "name": "matches_nested_groups", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_nested_groups()", "original_string": "    @Test\n    public void matches_nested_groups() {\n        TreeRegexp tr = new TreeRegexp(\"^A (\\\\d+) thick line from ((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+)) to ((\\\\d+),\\\\s*(\\\\d+),\\\\s*(\\\\d+))\");\n        Group g = tr.match(\"A 5 thick line from 10,20,30 to 40,50,60\");\n\n        assertEquals(\"5\", g.getChildren().get(0).getValue());\n        assertEquals(\"10,20,30\", g.getChildren().get(1).getValue());\n        assertEquals(\"10\", g.getChildren().get(1).getChildren().get(0).getValue());\n        assertEquals(\"20\", g.getChildren().get(1).getChildren().get(1).getValue());\n        assertEquals(\"30\", g.getChildren().get(1).getChildren().get(2).getValue());\n        assertEquals(\"40,50,60\", g.getChildren().get(2).getValue());\n        assertEquals(\"40\", g.getChildren().get(2).getChildren().get(0).getValue());\n        assertEquals(\"50\", g.getChildren().get(2).getChildren().get(1).getValue());\n        assertEquals(\"60\", g.getChildren().get(2).getChildren().get(2).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]captures_non_capturing_groups_with_capturing_groups_inside()", "name": "captures_non_capturing_groups_with_capturing_groups_inside", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void captures_non_capturing_groups_with_capturing_groups_inside()", "original_string": "    @Test\n    public void captures_non_capturing_groups_with_capturing_groups_inside() {\n        TreeRegexp tr = new TreeRegexp(\"the stdout(?: from \\\"(.*?)\\\")?\");\n        Group g = tr.match(\"the stdout\");\n        assertEquals(\"the stdout\", g.getValue());\n        assertNull(g.getChildren().get(0).getValue());\n        assertEquals(1, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]detects_multiple_non_capturing_groups()", "name": "detects_multiple_non_capturing_groups", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void detects_multiple_non_capturing_groups()", "original_string": "    @Test\n    public void detects_multiple_non_capturing_groups() {\n        TreeRegexp tr = new TreeRegexp(\"(?:a)(:b)(\\\\?c)(d)\");\n        Group g = tr.match(\"a:b?cd\");\n        assertEquals(3, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]works_with_escaped_backslash()", "name": "works_with_escaped_backslash", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void works_with_escaped_backslash()", "original_string": "    @Test\n    public void works_with_escaped_backslash() {\n        TreeRegexp tr = new TreeRegexp(\"foo\\\\\\\\(bar|baz)\");\n        Group g = tr.match(\"foo\\\\bar\");\n        assertEquals(1, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]works_with_slash_which_doesnt_need_escaping_in_java()", "name": "works_with_slash_which_doesnt_need_escaping_in_java", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void works_with_slash_which_doesnt_need_escaping_in_java()", "original_string": "    @Test\n    public void works_with_slash_which_doesnt_need_escaping_in_java() {\n        TreeRegexp tr = new TreeRegexp(\"^I go to '/(.+)'$\");\n        Group g = tr.match(\"I go to '/hello'\");\n        assertEquals(1, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]works_digit_and_word()", "name": "works_digit_and_word", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void works_digit_and_word()", "original_string": "    @Test\n    public void works_digit_and_word() {\n        TreeRegexp tr = new TreeRegexp(\"^(\\\\d) (\\\\w+) (\\\\w+)$\");\n        Group g = tr.match(\"2 you \u043f\u0440\u0438\u0432\u0435\u0442\");\n        assertEquals(3, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]captures_start_and_end()", "name": "captures_start_and_end", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void captures_start_and_end()", "original_string": "    @Test\n    public void captures_start_and_end() {\n        TreeRegexp tr = new TreeRegexp(\"^the step \\\"([^\\\"]*)\\\" has status \\\"([^\\\"]*)\\\"$\");\n        Group g = tr.match(\"the step \\\"a pending step\\\" has status \\\"pending\\\"\");\n        assertEquals(10, g.getChildren().get(0).getStart());\n        assertEquals(24, g.getChildren().get(0).getEnd());\n        assertEquals(38, g.getChildren().get(1).getStart());\n        assertEquals(45, g.getChildren().get(1).getEnd());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]doesnt_consider_parenthesis_in_character_class_as_group()", "name": "doesnt_consider_parenthesis_in_character_class_as_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void doesnt_consider_parenthesis_in_character_class_as_group()", "original_string": "    @Test\n    public void doesnt_consider_parenthesis_in_character_class_as_group() {\n        TreeRegexp tr = new TreeRegexp(\"^drawings: ([A-Z_, ()]+)$\");\n        Group g = tr.match(\"drawings: FU(BAR)\");\n        assertEquals(\"drawings: FU(BAR)\", g.getValue());\n        assertEquals(\"FU(BAR)\", g.getChildren().get(0).getValue());\n        assertEquals(0, g.getChildren().get(0).getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]works_with_flags()", "name": "works_with_flags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void works_with_flags()", "original_string": "    @Test\n    public void works_with_flags() {\n        TreeRegexp tr = new TreeRegexp(Pattern.compile(\"HELLO\", Pattern.CASE_INSENSITIVE));\n        Group g = tr.match(\"hello\");\n        assertEquals(\"hello\", g.getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]works_with_inline_flags()", "name": "works_with_inline_flags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void works_with_inline_flags()", "original_string": "    @Test\n    public void works_with_inline_flags() {\n        TreeRegexp tr = new TreeRegexp(Pattern.compile(\"(?i)HELLO\"));\n        Group g = tr.match(\"hello\");\n        assertEquals(\"hello\", g.getValue());\n        assertEquals(0, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]works_with_non_capturing_inline_flags()", "name": "works_with_non_capturing_inline_flags", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void works_with_non_capturing_inline_flags()", "original_string": "    @Test\n    public void works_with_non_capturing_inline_flags() {\n        TreeRegexp tr = new TreeRegexp(Pattern.compile(\"(?i:HELLO)\"));\n        Group g = tr.match(\"hello\");\n        assertEquals(\"hello\", g.getValue());\n        assertEquals(0, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]empty_capturing_group()", "name": "empty_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void empty_capturing_group()", "original_string": "    @Test\n    public void empty_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(Pattern.compile(\"()\"));\n        Group g = tr.match(\"\");\n        assertEquals(\"\", g.getValue());\n        assertEquals(1, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]empty_non_capturing_group()", "name": "empty_non_capturing_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void empty_non_capturing_group()", "original_string": "    @Test\n    public void empty_non_capturing_group() {\n        TreeRegexp tr = new TreeRegexp(Pattern.compile(\"(?)\"));\n        Group g = tr.match(\"\");\n        assertEquals(\"\", g.getValue());\n        assertEquals(0, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]empty_look_ahead()", "name": "empty_look_ahead", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void empty_look_ahead()", "original_string": "    @Test\n    public void empty_look_ahead() {\n        TreeRegexp tr = new TreeRegexp(Pattern.compile(\"(?<=)\"));\n        Group g = tr.match(\"\");\n        assertEquals(\"\", g.getValue());\n        assertEquals(0, g.getChildren().size());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest.[void]uses_loaded_pattern_compiler_service()", "name": "uses_loaded_pattern_compiler_service", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void uses_loaded_pattern_compiler_service()", "original_string": "    @Test\n    public void uses_loaded_pattern_compiler_service() {\n        String regexp = \"[0-9]\";\n        TreeRegexp tr = new TreeRegexp(regexp);\n        assertNull(tr.match(\"1a\"));\n\n        PatternCompilerProvider.service = (re, flags) -> Pattern.compile(re + \"[a-z]\", flags);\n\n        tr = new TreeRegexp(regexp);\n        assertEquals(\"1a\", tr.match(\"1a\").getValue());\n        PatternCompilerProvider.service = null;\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "class_name": "TreeRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java.TreeRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java.ParameterType_preferForRegexpMatchTest.[void]testPreferForRegexpMatch_True()", "name": "testPreferForRegexpMatch_True", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreferForRegexpMatch_True()", "original_string": "    @Test\n    public void testPreferForRegexpMatch_True() {\n        ParameterType<Object> parameterType = new ParameterType<>(\n                \"name\",\n                singletonList(\"regexp\"),\n                Object.class,\n                new CaptureGroupTransformer<Object>() {\n                    @Override\n                    public Object transform(String[] args) {\n                        return null;\n                    }\n                },\n                true,\n                true\n        );\n        assertTrue(parameterType.preferForRegexpMatch());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java", "class_name": "ParameterType_preferForRegexpMatchTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java.ParameterType_preferForRegexpMatchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java.ParameterType_preferForRegexpMatchTest.[void]testPreferForRegexpMatch_False()", "name": "testPreferForRegexpMatch_False", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testPreferForRegexpMatch_False()", "original_string": "    @Test\n    public void testPreferForRegexpMatch_False() {\n        ParameterType<Object> parameterType = new ParameterType<>(\n                \"name\",\n                singletonList(\"regexp\"),\n                Object.class,\n                new CaptureGroupTransformer<Object>() {\n                    @Override\n                    public Object transform(String[] args) {\n                        return null;\n                    }\n                },\n                true,\n                false\n        );\n        assertFalse(parameterType.preferForRegexpMatch());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java", "class_name": "ParameterType_preferForRegexpMatchTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_preferForRegexpMatchTest.java.ParameterType_preferForRegexpMatchTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionParserTest.java.CucumberExpressionParserTest.[void]acceptance_tests_pass(Expectation)", "name": "acceptance_tests_pass", "arg_nums": 1, "params": [{"name": "expectation", "type": "Expectation"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation)", "original_string": "    @ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation) {\n        if (expectation.exception == null) {\n            Node node = parser.parse(expectation.expression);\n            assertThat(node, is(expectation.expected_ast.toNode()));\n        } else {\n            CucumberExpressionException exception = assertThrows(\n                    CucumberExpressionException.class,\n                    () -> parser.parse(expectation.expression));\n            assertThat(exception.getMessage(), is(expectation.exception));\n        }\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionParserTest.java", "class_name": "CucumberExpressionParserTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionParserTest.java.CucumberExpressionParserTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource", "marker_annotations": ["@ParameterizedTest", "@MethodSource"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTokenizerTest.java.CucumberExpressionTokenizerTest.[void]acceptance_tests_pass(Expectation)", "name": "acceptance_tests_pass", "arg_nums": 1, "params": [{"name": "expectation", "type": "Expectation"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation)", "original_string": "    @ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation) {\n        if (expectation.exception == null) {\n            List<Token> tokens = tokenizer.tokenize(expectation.expression);\n            List<Token> expectedTokens = expectation.expected_tokens\n                    .stream()\n                    .map(YamlableToken::toToken)\n                    .collect(Collectors.toList());\n            assertThat(tokens, is(expectedTokens));\n        } else {\n            CucumberExpressionException exception = assertThrows(\n                    CucumberExpressionException.class,\n                    () -> tokenizer.tokenize(expectation.expression));\n            assertThat(exception.getMessage(), is(expectation.exception));\n        }\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTokenizerTest.java", "class_name": "CucumberExpressionTokenizerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTokenizerTest.java.CucumberExpressionTokenizerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource", "marker_annotations": ["@ParameterizedTest", "@MethodSource"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactoryTest.java.CombinatorialGeneratedExpressionFactoryTest.[void]generates_multiple_expressions()", "name": "generates_multiple_expressions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void generates_multiple_expressions()", "original_string": "    @Test\n    public void generates_multiple_expressions() {\n        List<ParameterType<?>> first = new ArrayList<>();\n        first.add(new ParameterType<>(\"color\", WORD, Color.class, Color::new));\n        first.add(new ParameterType<>(\"csscolor\", WORD, CssColor.class, CssColor::new));\n\n        List<ParameterType<?>> second = new ArrayList<>();\n        second.add(new ParameterType<>(\"date\", WORD, Date.class, Date::new));\n        second.add(new ParameterType<>(\"datetime\", WORD, DateTime.class, DateTime::new));\n        second.add(new ParameterType<>(\"timestamp\", WORD, Timestamp.class, Timestamp::new));\n        List<List<ParameterType<?>>> parameterTypeCombinations = asList(first, second);\n\n        CombinatorialGeneratedExpressionFactory factory = new CombinatorialGeneratedExpressionFactory(\n                \"I bought a {%s} ball on {%s}\",\n                parameterTypeCombinations\n        );\n        List<GeneratedExpression> generatedExpressions = factory.generateExpressions();\n        List<String> expressions = new ArrayList<>();\n        for (GeneratedExpression generatedExpression : generatedExpressions) {\n            String source = generatedExpression.getSource();\n            expressions.add(source);\n        }\n        assertEquals(asList(\n                \"I bought a {color} ball on {date}\",\n                \"I bought a {color} ball on {datetime}\",\n                \"I bought a {color} ball on {timestamp}\",\n                \"I bought a {csscolor} ball on {date}\",\n                \"I bought a {csscolor} ball on {datetime}\",\n                \"I bought a {csscolor} ball on {timestamp}\"\n        ), expressions);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactoryTest.java", "class_name": "CombinatorialGeneratedExpressionFactoryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactoryTest.java.CombinatorialGeneratedExpressionFactoryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java.ParameterType_useForSnippetsTest.[void]testUseForSnippetsTrue()", "name": "testUseForSnippetsTrue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUseForSnippetsTrue()", "original_string": "    @Test\n    public void testUseForSnippetsTrue() {\n        assertTrue(parameterType.useForSnippets());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java", "class_name": "ParameterType_useForSnippetsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java.ParameterType_useForSnippetsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java.ParameterType_useForSnippetsTest.[void]testUseForSnippetsFalse()", "name": "testUseForSnippetsFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testUseForSnippetsFalse()", "original_string": "    @Test\n    public void testUseForSnippetsFalse() {\n        ParameterType<?> parameterTypeFalse = new ParameterType<>(\"name\", \"regexp\", String.class, (String arg) -> arg, false, false);\n        assertFalse(parameterTypeFalse.useForSnippets());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java", "class_name": "ParameterType_useForSnippetsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_useForSnippetsTest.java.ParameterType_useForSnippetsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest.[void]testCreateExpression_EmptyString()", "name": "testCreateExpression_EmptyString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCreateExpression_EmptyString()", "original_string": "    @Test\n    void testCreateExpression_EmptyString() {\n        Expression expression = expressionFactory.createExpression(\"\");\n        assertTrue(expression instanceof CucumberExpression);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "class_name": "ExpressionFactory_createExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest.[void]testCreateExpression_RegularExpressionWithAnchors()", "name": "testCreateExpression_RegularExpressionWithAnchors", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCreateExpression_RegularExpressionWithAnchors()", "original_string": "    @Test\n    void testCreateExpression_RegularExpressionWithAnchors() {\n        Expression expression = expressionFactory.createExpression(\"^start$\");\n        assertTrue(expression instanceof RegularExpression);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "class_name": "ExpressionFactory_createExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest.[void]testCreateExpression_RegularExpressionWithSlashes()", "name": "testCreateExpression_RegularExpressionWithSlashes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCreateExpression_RegularExpressionWithSlashes()", "original_string": "    @Test\n    void testCreateExpression_RegularExpressionWithSlashes() {\n        Expression expression = expressionFactory.createExpression(\"/regex/\");\n        assertTrue(expression instanceof RegularExpression);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "class_name": "ExpressionFactory_createExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest.[void]testCreateExpression_CucumberExpression()", "name": "testCreateExpression_CucumberExpression", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testCreateExpression_CucumberExpression()", "original_string": "    @Test\n    void testCreateExpression_CucumberExpression() {\n        Expression expression = expressionFactory.createExpression(\"some text\");\n        assertTrue(expression instanceof CucumberExpression);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java", "class_name": "ExpressionFactory_createExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactory_createExpressionTest.java.ExpressionFactory_createExpressionTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeComparatorTest.java.ParameterTypeComparatorTest.[void]sorts_parameter_types_by_preferential_then_name()", "name": "sorts_parameter_types_by_preferential_then_name", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void sorts_parameter_types_by_preferential_then_name()", "original_string": "    @Test\n    public void sorts_parameter_types_by_preferential_then_name() {\n        SortedSet<ParameterType<?>> set = new TreeSet<>();\n        set.add(new ParameterType<>(\"c\", \"c\", C.class, C::new, false, true));\n        set.add(new ParameterType<>(\"a\", \"a\", A.class, A::new, false, false));\n        set.add(new ParameterType<>(\"d\", \"d\", D.class, D::new, false, false));\n        set.add(new ParameterType<>(\"b\", \"b\", B.class, B::new, false, true));\n\n        List<String> names = new ArrayList<>();\n        for (ParameterType parameterType : set) {\n            names.add(parameterType.getName());\n        }\n        assertEquals(asList(\"b\", \"c\", \"a\", \"d\"), names);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeComparatorTest.java", "class_name": "ParameterTypeComparatorTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeComparatorTest.java.ParameterTypeComparatorTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]simple_object_mapper_only_supports_class_types()", "name": "simple_object_mapper_only_supports_class_types", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void simple_object_mapper_only_supports_class_types()", "original_string": "    @Test\n    public void simple_object_mapper_only_supports_class_types() {\n\n        Type abstractListOfE = ArrayList.class.getGenericSuperclass();\n        final Executable testMethod = () -> objectMapper.transform(\"something\", abstractListOfE);\n\n        String expected = \"\" +\n                \"Can't transform 'something' to java.util.AbstractList<E>\\n\" +\n                \"BuiltInParameterTransformer only supports a limited number of class types\\n\" +\n                \"Consider using a different object mapper or register a parameter type for java.util.AbstractList<E>\";\n\n        final IllegalArgumentException thrownException = assertThrows(IllegalArgumentException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(expected)));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]simple_object_mapper_only_supports_some_class_types()", "name": "simple_object_mapper_only_supports_some_class_types", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void simple_object_mapper_only_supports_some_class_types()", "original_string": "    @Test\n    public void simple_object_mapper_only_supports_some_class_types() {\n\n        final Executable testMethod = () -> objectMapper.transform(\"something\", Date.class);\n\n        final IllegalArgumentException thrownException = assertThrows(IllegalArgumentException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"Can't transform 'something' to class java.util.Date\\n\" +\n                        \"BuiltInParameterTransformer only supports a limited number of class types\\n\" +\n                        \"Consider using a different object mapper or register a parameter type for class java.util.Date\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]simple_object_mapper_only_supports_some_optional_types()", "name": "simple_object_mapper_only_supports_some_optional_types", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void simple_object_mapper_only_supports_some_optional_types()", "original_string": "    @Test\n    public void simple_object_mapper_only_supports_some_optional_types() {\n        Type optionalDate = new TypeReference<Optional<Date>>() {}.getType();\n\n        final Executable testMethod = () -> objectMapper.transform(\"something\", optionalDate);\n\n        final IllegalArgumentException thrownException = assertThrows(IllegalArgumentException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"Can't transform 'something' to java.util.Optional<java.util.Date>\\n\" +\n                        \"BuiltInParameterTransformer only supports a limited number of class types\\n\" +\n                        \"Consider using a different object mapper or register a parameter type for java.util.Optional<java.util.Date>\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]simple_object_mapper_only_supports_some_generic_types()", "name": "simple_object_mapper_only_supports_some_generic_types", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void simple_object_mapper_only_supports_some_generic_types()", "original_string": "    @Test\n    public void simple_object_mapper_only_supports_some_generic_types() {\n        Type optionalDate = new TypeReference<Supplier<String>>() {}.getType();\n\n        final Executable testMethod = () -> objectMapper.transform(\"something\", optionalDate);\n\n        final IllegalArgumentException thrownException = assertThrows(IllegalArgumentException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"Can't transform 'something' to java.util.function.Supplier<java.lang.String>\\n\" +\n                        \"BuiltInParameterTransformer only supports a limited number of class types\\n\" +\n                        \"Consider using a different object mapper or register a parameter type for java.util.function.Supplier<java.lang.String>\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_throw_exception_for_unknown_enum_values()", "name": "should_throw_exception_for_unknown_enum_values", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_throw_exception_for_unknown_enum_values()", "original_string": "    @Test\n    public void should_throw_exception_for_unknown_enum_values() {\n\n        final Executable testMethod = () -> objectMapper.transform(\"something\", TestEnum.class);\n\n        final CucumberExpressionException thrownException = assertThrows(CucumberExpressionException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"Can't transform 'something' to class io.cucumber.cucumberexpressions.BuiltInParameterTransformerTest$TestEnum. \" +\n                        \"Not an enum constant\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_transform_boolean()", "name": "should_transform_boolean", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_transform_boolean()", "original_string": "    @Test\n    public void should_transform_boolean() {\n        for (String value : Arrays.asList(\"true\", \"True\", \"false\", \"False\")) {\n            objectMapper.transform(value, Boolean.class);\n        }\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_transform_char()", "name": "should_transform_char", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_transform_char()", "original_string": "    @Test\n    public void should_transform_char() {\n        assertThat(objectMapper.transform(\"A\", char.class), is(equalTo('A')));\n        assertThat(objectMapper.transform(\"b\", Character.class), is(equalTo('b')));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_throw_exception_for_empty_string_with_type_char()", "name": "should_throw_exception_for_empty_string_with_type_char", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_throw_exception_for_empty_string_with_type_char()", "original_string": "    @Test\n    public void should_throw_exception_for_empty_string_with_type_char() {\n        final Executable testMethod = () -> objectMapper.transform(\"\", Character.class);\n\n        final IllegalArgumentException thrownException = assertThrows(IllegalArgumentException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"Can't transform '' to class java.lang.Character\\nBuiltInParameterTransformer only supports a limited number of class types\\n\" +\n                        \"Consider using a different object mapper or register a parameter type for class java.lang.Character\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_throw_exception_for_nonsingelchar_string_with_type_char()", "name": "should_throw_exception_for_nonsingelchar_string_with_type_char", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_throw_exception_for_nonsingelchar_string_with_type_char()", "original_string": "    @Test\n    public void should_throw_exception_for_nonsingelchar_string_with_type_char() {\n        Executable testMethod = () -> objectMapper.transform(\"ab\", Character.class);\n\n        final IllegalArgumentException thrownException = assertThrows(IllegalArgumentException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\n                \"Can't transform 'ab' to class java.lang.Character\\nBuiltInParameterTransformer only supports a limited number of class types\\n\" +\n                        \"Consider using a different object mapper or register a parameter type for class java.lang.Character\"\n        )));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_transform_optional()", "name": "should_transform_optional", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_transform_optional()", "original_string": "    @Test\n    public void should_transform_optional() {\n        assertThat(objectMapper.transform(\"abc\", Optional.class), is(equalTo(Optional.of(\"abc\"))));\n        assertThat(objectMapper.transform(\"\", Optional.class), is(equalTo(Optional.of(\"\"))));\n        assertThat(objectMapper.transform(null, Optional.class), is(equalTo(Optional.empty())));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_transform_optional_generic_string()", "name": "should_transform_optional_generic_string", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_transform_optional_generic_string()", "original_string": "    @Test\n    public void should_transform_optional_generic_string() {\n        Type optionalStringType = new TypeReference<Optional<String>>() {}.getType();\n\n        assertThat(objectMapper.transform(\"abc\", optionalStringType), is(equalTo(Optional.<String>of(\"abc\"))));\n        assertThat(objectMapper.transform(\"\", optionalStringType), is(equalTo(Optional.<String>of(\"\"))));\n        assertThat(objectMapper.transform(null, optionalStringType), is(equalTo(Optional.<String>empty())));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest.[void]should_transform_optional_generic_integer()", "name": "should_transform_optional_generic_integer", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void should_transform_optional_generic_integer()", "original_string": "    @Test\n    public void should_transform_optional_generic_integer() {\n        Type optionalIntType = new TypeReference<Optional<Integer>>() {}.getType();\n\n        assertThat(objectMapper.transform(\"42\", optionalIntType), is(equalTo(Optional.<Integer>of(42))));\n        assertThat(objectMapper.transform(null, optionalIntType), is(equalTo(Optional.<Integer>empty())));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java", "class_name": "BuiltInParameterTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformerTest.java.BuiltInParameterTransformerTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getSourceTest.java.CucumberExpression_getSourceTest.[void]testGetSource()", "name": "testGetSource", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetSource()", "original_string": "    @Test\n    public void testGetSource() {\n        String expressionString = \"some expression\";\n        CucumberExpression cucumberExpression = new CucumberExpression(expressionString, parameterTypeRegistry);\n        assertEquals(expressionString, cucumberExpression.getSource());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getSourceTest.java", "class_name": "CucumberExpression_getSourceTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpression_getSourceTest.java.CucumberExpression_getSourceTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]acceptance_tests_pass(Expectation)", "name": "acceptance_tests_pass", "arg_nums": 1, "params": [{"name": "expectation", "type": "Expectation"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation)", "original_string": "    @ParameterizedTest\n    @MethodSource\n    void acceptance_tests_pass(@ConvertWith(Converter.class) Expectation expectation) {\n        RegularExpression expression = new RegularExpression(Pattern.compile(expectation.expression), parameterTypeRegistry);\n        List<Argument<?>> match = expression.match(expectation.text);\n        List<?> values = match == null ? null : match.stream()\n                .map(Argument::getValue)\n                .collect(Collectors.toList());\n\n        assertThat(values, CustomMatchers.equalOrCloseTo(expectation.expected_args));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource", "marker_annotations": ["@ParameterizedTest", "@MethodSource"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]documentation_match_arguments()", "name": "documentation_match_arguments", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void documentation_match_arguments()", "original_string": "    @Test\n    public void documentation_match_arguments() {\n        Pattern expr = Pattern.compile(\"I have (\\\\d+) cukes? in my (\\\\w+) now\");\n        Expression expression = new RegularExpression(expr, parameterTypeRegistry);\n        List<Argument<?>> match = expression.match(\"I have 7 cukes in my belly now\");\n        assertEquals(7, match.get(0).getValue());\n        assertEquals(\"belly\", match.get(1).getValue());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_positive_int()", "name": "matches_positive_int", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_positive_int()", "original_string": "    @Test\n    public void matches_positive_int() {\n        List<?> match = match(compile(\"(\\\\d+)\"), \"22\");\n        assertEquals(singletonList(22), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_positive_int_with_hint()", "name": "matches_positive_int_with_hint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_positive_int_with_hint()", "original_string": "    @Test\n    public void matches_positive_int_with_hint() {\n        List<?> match = match(compile(\"(\\\\d+)\"), \"22\", Integer.class);\n        assertEquals(singletonList(22), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_positive_int_with_conflicting_type_hint()", "name": "matches_positive_int_with_conflicting_type_hint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_positive_int_with_conflicting_type_hint()", "original_string": "    @Test\n    public void matches_positive_int_with_conflicting_type_hint() {\n        List<?> match = match(compile(\"(\\\\d+)\"), \"22\", String.class);\n        assertEquals(singletonList(\"22\"), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_nested_capture_group_without_match()", "name": "matches_nested_capture_group_without_match", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_nested_capture_group_without_match()", "original_string": "    @Test\n    public void matches_nested_capture_group_without_match() {\n        List<?> match = match(compile(\"^a user( named \\\"([^\\\"]*)\\\")?$\"), \"a user\");\n        assertEquals(singletonList(null), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_nested_capture_group_with_match()", "name": "matches_nested_capture_group_with_match", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_nested_capture_group_with_match()", "original_string": "    @Test\n    public void matches_nested_capture_group_with_match() {\n        List<?> match = match(compile(\"^a user( named \\\"([^\\\"]*)\\\")?$\"), \"a user named \\\"Charlie\\\"\");\n        assertEquals(singletonList(\"Charlie\"), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]ignores_non_capturing_groups()", "name": "ignores_non_capturing_groups", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_non_capturing_groups()", "original_string": "    @Test\n    public void ignores_non_capturing_groups() {\n        String expr = \"(\\\\S+) ?(can|cannot)? (?:delete|cancel) the (\\\\d+)(?:st|nd|rd|th) (attachment|slide) ?(?:upload)?\";\n        String step = \"I can cancel the 1st slide upload\";\n        List<?> match = match(compile(expr), step);\n        assertEquals(asList(\"I\", \"can\", 1, \"slide\"), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_capture_group_nested_in_optional_one()", "name": "matches_capture_group_nested_in_optional_one", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_capture_group_nested_in_optional_one()", "original_string": "    @Test\n    public void matches_capture_group_nested_in_optional_one() {\n        String regex = \"^a (pre-commercial transaction |pre buyer fee model )?purchase(?: for \\\\$(\\\\d+))?$\";\n        assertEquals(asList(null, null), match(compile(regex), \"a purchase\"));\n        assertEquals(asList(null, 33), match(compile(regex), \"a purchase for $33\"));\n        assertEquals(asList(\"pre buyer fee model \", null), match(compile(regex), \"a pre buyer fee model purchase\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]works_with_escaped_parenthesis()", "name": "works_with_escaped_parenthesis", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void works_with_escaped_parenthesis()", "original_string": "    @Test\n    public void works_with_escaped_parenthesis() {\n        String expr = \"Across the line\\\\(s\\\\)\";\n        String step = \"Across the line(s)\";\n        List<?> match = match(compile(expr), step);\n        assertEquals(emptyList(), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]exposes_source_and_regexp()", "name": "exposes_source_and_regexp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void exposes_source_and_regexp()", "original_string": "    @Test\n    public void exposes_source_and_regexp() {\n        String regexp = \"I have (\\\\d+) cukes? in my (.+) now\";\n        RegularExpression expression = new RegularExpression(Pattern.compile(regexp),\n                new ParameterTypeRegistry(Locale.ENGLISH));\n        assertEquals(regexp, expression.getSource());\n        assertEquals(regexp, expression.getRegexp().pattern());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]uses_float_type_hint_when_group_doesnt_match_known_param_type()", "name": "uses_float_type_hint_when_group_doesnt_match_known_param_type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void uses_float_type_hint_when_group_doesnt_match_known_param_type()", "original_string": "    @Test\n    public void uses_float_type_hint_when_group_doesnt_match_known_param_type() {\n        List<?> match = match(compile(\"a (.*)\"), \"a 22\", Float.class);\n        assertEquals(Float.class, match.get(0).getClass());\n        assertEquals(22f, (Float) match.get(0), 0.00001);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]uses_double_type_hint_when_group_doesnt_match_known_param_type()", "name": "uses_double_type_hint_when_group_doesnt_match_known_param_type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void uses_double_type_hint_when_group_doesnt_match_known_param_type()", "original_string": "    @Test\n    public void uses_double_type_hint_when_group_doesnt_match_known_param_type() {\n        List<?> match = match(compile(\"a (\\\\d\\\\d.\\\\d)\"), \"a 33.5\", Double.class);\n        assertEquals(Double.class, match.get(0).getClass());\n        assertEquals(33.5d, (Double) match.get(0), 0.00001);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_empty_string()", "name": "matches_empty_string", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_empty_string()", "original_string": "    @Test\n    public void matches_empty_string() {\n        List<?> match = match(compile(\"^The value equals \\\"([^\\\"]*)\\\"$\"), \"The value equals \\\"\\\"\", String.class);\n        assertEquals(String.class, match.get(0).getClass());\n        assertEquals(\"\", match.get(0));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]uses_two_type_hints_to_resolve_anonymous_parameter_type()", "name": "uses_two_type_hints_to_resolve_anonymous_parameter_type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void uses_two_type_hints_to_resolve_anonymous_parameter_type()", "original_string": "    @Test\n    public void uses_two_type_hints_to_resolve_anonymous_parameter_type() {\n        List<?> match = match(compile(\"a (.*) and a (.*)\"), \"a 22 and a 33.5\", Float.class, Double.class);\n\n        assertEquals(Float.class, match.get(0).getClass());\n        assertEquals(22f, (Float) match.get(0), 0.00001);\n\n        assertEquals(Double.class, match.get(1).getClass());\n        assertEquals(33.5d, (Double) match.get(1), 0.00001);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]retains_all_content_captured_by_the_capture_group()", "name": "retains_all_content_captured_by_the_capture_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void retains_all_content_captured_by_the_capture_group()", "original_string": "    @Test\n    public void retains_all_content_captured_by_the_capture_group() {\n        List<?> match = match(compile(\"a quote ([\\\"a-z ]+)\"), \"a quote \\\" and quote \\\"\", String.class);\n        assertEquals(singletonList(\"\\\" and quote \\\"\"), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]uses_parameter_type_registry_when_parameter_type_is_defined()", "name": "uses_parameter_type_registry_when_parameter_type_is_defined", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void uses_parameter_type_registry_when_parameter_type_is_defined()", "original_string": "    @Test\n    public void uses_parameter_type_registry_when_parameter_type_is_defined() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"test\",\n                \"[\\\"a-z ]+\",\n                String.class,\n                new Transformer<String>() {\n                    @Override\n                    public String transform(String s) {\n                        return s.toUpperCase();\n                    }\n                }\n        ));\n        List<?> match = match(compile(\"a quote ([\\\"a-z ]+)\"), \"a quote \\\" and quote \\\"\", String.class);\n        assertEquals(singletonList(\"\\\" AND QUOTE \\\"\"), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]ignores_type_hint_when_parameter_type_has_strong_type_hint()", "name": "ignores_type_hint_when_parameter_type_has_strong_type_hint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void ignores_type_hint_when_parameter_type_has_strong_type_hint()", "original_string": "    @Test\n    public void ignores_type_hint_when_parameter_type_has_strong_type_hint() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"test\",\n                \"one|two|three\",\n                Integer.class,\n                new Transformer<Integer>() {\n                    @Override\n                    public Integer transform(String s) {\n                        return 42;\n                    }\n                }, false, false, true\n        ));\n        assertEquals(asList(42), match(compile(\"(one|two|three)\"), \"one\", String.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]follows_type_hint_when_parameter_type_does_not_have_strong_type_hint()", "name": "follows_type_hint_when_parameter_type_does_not_have_strong_type_hint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void follows_type_hint_when_parameter_type_does_not_have_strong_type_hint()", "original_string": "    @Test\n    public void follows_type_hint_when_parameter_type_does_not_have_strong_type_hint() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"test\",\n                \"one|two|three\",\n                Integer.class,\n                new Transformer<Integer>() {\n                    @Override\n                    public Integer transform(String s) {\n                        return 42;\n                    }\n                }, false, false, false\n        ));\n        assertEquals(asList(\"one\"), match(compile(\"(one|two|three)\"), \"one\", String.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_anonymous_parameter_type_with_hint()", "name": "matches_anonymous_parameter_type_with_hint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_anonymous_parameter_type_with_hint()", "original_string": "    @Test\n    public void matches_anonymous_parameter_type_with_hint() {\n        assertEquals(singletonList(0.22f), match(compile(\"(.*)\"), \"0.22\", Float.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_anonymous_parameter_type()", "name": "matches_anonymous_parameter_type", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_anonymous_parameter_type()", "original_string": "    @Test\n    public void matches_anonymous_parameter_type() {\n        assertEquals(singletonList(\"0.22\"), match(compile(\"(.*)\"), \"0.22\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]matches_optional_boolean_capture_group()", "name": "matches_optional_boolean_capture_group", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void matches_optional_boolean_capture_group()", "original_string": "    @Test\n    public void matches_optional_boolean_capture_group() {\n        Pattern pattern = compile(\"^(true|false)?$\");\n        assertEquals(singletonList(true), match(pattern, \"true\", Boolean.class));\n        assertEquals(singletonList(false), match(pattern, \"false\", Boolean.class));\n        assertEquals(singletonList(null), match(pattern, \"\", Boolean.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest.[void]parameter_types_can_be_optional_when_used_in_regex()", "name": "parameter_types_can_be_optional_when_used_in_regex", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void parameter_types_can_be_optional_when_used_in_regex()", "original_string": "    @Test\n    public void parameter_types_can_be_optional_when_used_in_regex() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                \"test\",\n                \".+\",\n                String.class,\n                new Transformer<String>() {\n                    @Override\n                    public String transform(String s) {\n                        return s;\n                    }\n                }\n        ));\n        List<?> match = match(compile(\"^text(?: (.+))? text2$\"), \"text text2\", String.class);\n        assertEquals(singletonList(null), match);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java", "class_name": "RegularExpressionTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpressionTest.java.RegularExpressionTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]does_not_allow_more_than_one_preferential_parameter_type_for_each_regexp()", "name": "does_not_allow_more_than_one_preferential_parameter_type_for_each_regexp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void does_not_allow_more_than_one_preferential_parameter_type_for_each_regexp()", "original_string": "    @Test\n    public void does_not_allow_more_than_one_preferential_parameter_type_for_each_regexp() {\n\n        registry.defineParameterType(new ParameterType<>(\"name\", CAPITALISED_WORD, Name.class, Name::new, false, true));\n        registry.defineParameterType(new ParameterType<>(\"person\", CAPITALISED_WORD, Person.class, Person::new, false, false));\n\n        final Executable testMethod = () -> registry.defineParameterType(new ParameterType<>(\n                \"place\",\n                CAPITALISED_WORD,\n                Place.class,\n                Place::new,\n                false,\n                true\n        ));\n\n        final CucumberExpressionException thrownException = assertThrows(CucumberExpressionException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\"There can only be one preferential parameter type per regexp. The regexp /[A-Z]+\\\\w+/ is used for two preferential parameter types, {name} and {place}\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]looks_up_preferential_parameter_type_by_regexp()", "name": "looks_up_preferential_parameter_type_by_regexp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void looks_up_preferential_parameter_type_by_regexp()", "original_string": "    @Test\n    public void looks_up_preferential_parameter_type_by_regexp() {\n        ParameterType<Name> name = new ParameterType<>(\"name\", CAPITALISED_WORD, Name.class, Name::new, false, false);\n        ParameterType<Person> person = new ParameterType<>(\"person\", CAPITALISED_WORD, Person.class, Person::new, false, true);\n        ParameterType<Place> place = new ParameterType<>(\"place\", CAPITALISED_WORD, Place.class, Place::new, false, false);\n        registry.defineParameterType(name);\n        registry.defineParameterType(person);\n        registry.defineParameterType(place);\n        assertSame(person, registry.lookupByRegexp(CAPITALISED_WORD, Pattern.compile(\"([A-Z]+\\\\w+) and ([A-Z]+\\\\w+)\"), \"Lisa and Bob\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]throws_ambiguous_exception_on_lookup_when_no_parameter_types_are_preferential()", "name": "throws_ambiguous_exception_on_lookup_when_no_parameter_types_are_preferential", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void throws_ambiguous_exception_on_lookup_when_no_parameter_types_are_preferential()", "original_string": "    @Test\n    public void throws_ambiguous_exception_on_lookup_when_no_parameter_types_are_preferential() {\n        ParameterType<Name> name = new ParameterType<>(\"name\", CAPITALISED_WORD, Name.class, Name::new, true, false);\n        ParameterType<Person> person = new ParameterType<>(\"person\", CAPITALISED_WORD, Person.class, Person::new, true, false);\n        ParameterType<Place> place = new ParameterType<>(\"place\", CAPITALISED_WORD, Place.class, Place::new, true, false);\n        registry.defineParameterType(name);\n        registry.defineParameterType(person);\n        registry.defineParameterType(place);\n\n        String expected = \"\" +\n                \"Your Regular Expression /([A-Z]+\\\\w+) and ([A-Z]+\\\\w+)/\\n\" +\n                \"matches multiple parameter types with regexp /[A-Z]+\\\\w+/:\\n\" +\n                \"   {name}\\n\" +\n                \"   {person}\\n\" +\n                \"   {place}\\n\" +\n                \"\\n\" +\n                \"I couldn't decide which one to use. You have two options:\\n\" +\n                \"\\n\" +\n                \"1) Use a Cucumber Expression instead of a Regular Expression. Try one of these:\\n\" +\n                \"   {name} and {name}\\n\" +\n                \"   {name} and {person}\\n\" +\n                \"   {name} and {place}\\n\" +\n                \"   {person} and {name}\\n\" +\n                \"   {person} and {person}\\n\" +\n                \"   {person} and {place}\\n\" +\n                \"   {place} and {name}\\n\" +\n                \"   {place} and {person}\\n\" +\n                \"   {place} and {place}\\n\" +\n                \"\\n\" +\n                \"2) Make one of the parameter types preferential and continue to use a Regular Expression.\\n\" +\n                \"\\n\";\n\n        final Executable testMethod = () -> registry.lookupByRegexp(CAPITALISED_WORD, Pattern.compile(\"([A-Z]+\\\\w+) and ([A-Z]+\\\\w+)\"), \"Lisa and Bob\");\n\n        final AmbiguousParameterTypeException thrownException = assertThrows(AmbiguousParameterTypeException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(expected)));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]does_not_allow_anonymous_parameter_type_to_be_registered()", "name": "does_not_allow_anonymous_parameter_type_to_be_registered", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void does_not_allow_anonymous_parameter_type_to_be_registered()", "original_string": "    @Test\n    public void does_not_allow_anonymous_parameter_type_to_be_registered() {\n\n        final Executable testMethod = () -> registry.defineParameterType(new ParameterType<>(\"\", \".*\", Object.class, (Transformer<Object>) arg -> arg));\n\n        final DuplicateTypeNameException thrownException = assertThrows(DuplicateTypeNameException.class, testMethod);\n        assertThat(\"Unexpected message\", thrownException.getMessage(), is(equalTo(\"The anonymous parameter type has already been defined\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]parse_decimal_numbers_in_english()", "name": "parse_decimal_numbers_in_english", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void parse_decimal_numbers_in_english()", "original_string": "    @Test\n    public void parse_decimal_numbers_in_english() {\n        ExpressionFactory factory = new ExpressionFactory(new ParameterTypeRegistry(Locale.ENGLISH));\n        Expression expression = factory.createExpression(\"{bigdecimal}\");\n\n        assertThat(expression.match(\"\"), nullValue());\n        assertThat(expression.match(\".\"), nullValue());\n        assertThat(expression.match(\",\"), nullValue());\n        assertThat(expression.match(\"-\"), nullValue());\n        assertThat(expression.match(\"E\"), nullValue());\n        assertThat(expression.match(\"1,\"), nullValue());\n        assertThat(expression.match(\",1\"), nullValue());\n        assertThat(expression.match(\"1.\"), nullValue());\n\n        assertThat(expression.match(\"1\").get(0).getValue(), is(BigDecimal.ONE));\n        assertThat(expression.match(\"-1\").get(0).getValue(), is(new BigDecimal(\"-1\")));\n        assertThat(expression.match(\"1.1\").get(0).getValue(), is(new BigDecimal(\"1.1\")));\n        assertThat(expression.match(\"1,000\").get(0).getValue(), is(new BigDecimal(\"1000\")));\n        assertThat(expression.match(\"1,000,0\").get(0).getValue(), is(new BigDecimal(\"10000\")));\n        assertThat(expression.match(\"1,000.1\").get(0).getValue(), is(new BigDecimal(\"1000.1\")));\n        assertThat(expression.match(\"1,000,10\").get(0).getValue(), is(new BigDecimal(\"100010\")));\n        assertThat(expression.match(\"1,0.1\").get(0).getValue(), is(new BigDecimal(\"10.1\")));\n        assertThat(expression.match(\"1,000,000.1\").get(0).getValue(), is(new BigDecimal(\"1000000.1\")));\n        assertThat(expression.match(\"-1.1\").get(0).getValue(), is(new BigDecimal(\"-1.1\")));\n\n        assertThat(expression.match(\".1\").get(0).getValue(), is(new BigDecimal(\"0.1\")));\n        assertThat(expression.match(\"-.1\").get(0).getValue(), is(new BigDecimal(\"-0.1\")));\n        assertThat(expression.match(\"-.10000001\").get(0).getValue(), is(new BigDecimal(\"-0.10000001\")));\n        assertThat(expression.match(\"1E1\").get(0).getValue(), is(new BigDecimal(\"1E1\"))); // precision 1 with scale -1, can not be expressed as a decimal\n        assertThat(expression.match(\".1E1\").get(0).getValue(), is(new BigDecimal(\"1\")));\n        assertThat(expression.match(\"E1\"), nullValue());\n        assertThat(expression.match(\"-.1E-1\").get(0).getValue(), is(new BigDecimal(\"-0.01\")));\n        assertThat(expression.match(\"-.1E-2\").get(0).getValue(), is(new BigDecimal(\"-0.001\")));\n        assertThat(expression.match(\"-.1E+1\"), nullValue());\n        assertThat(expression.match(\"-.1E+2\"), nullValue());\n        assertThat(expression.match(\"-.1E1\").get(0).getValue(), is(new BigDecimal(\"-1\")));\n        assertThat(expression.match(\"-.10E2\").get(0).getValue(), is(new BigDecimal(\"-10\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]parse_decimal_numbers_in_german()", "name": "parse_decimal_numbers_in_german", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void parse_decimal_numbers_in_german()", "original_string": "    @Test\n    public void parse_decimal_numbers_in_german() {\n        ExpressionFactory factory = new ExpressionFactory(new ParameterTypeRegistry(Locale.GERMAN));\n        Expression expression = factory.createExpression(\"{bigdecimal}\");\n\n        assertThat(expression.match(\"1.000,1\").get(0).getValue(), is(new BigDecimal(\"1000.1\")));\n        assertThat(expression.match(\"1.000.000,1\").get(0).getValue(), is(new BigDecimal(\"1000000.1\")));\n        assertThat(expression.match(\"-1,1\").get(0).getValue(), is(new BigDecimal(\"-1.1\")));\n        assertThat(expression.match(\"-,1E1\").get(0).getValue(), is(new BigDecimal(\"-1\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]parse_decimal_numbers_in_canadian_french()", "name": "parse_decimal_numbers_in_canadian_french", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void parse_decimal_numbers_in_canadian_french()", "original_string": "    @Test\n    public void parse_decimal_numbers_in_canadian_french() {\n        ExpressionFactory factory = new ExpressionFactory(new ParameterTypeRegistry(Locale.CANADA_FRENCH));\n        Expression expression = factory.createExpression(\"{bigdecimal}\");\n\n        assertThat(expression.match(\"1.000,1\").get(0).getValue(), is(new BigDecimal(\"1000.1\")));\n        assertThat(expression.match(\"1.000.000,1\").get(0).getValue(), is(new BigDecimal(\"1000000.1\")));\n        assertThat(expression.match(\"-1,1\").get(0).getValue(), is(new BigDecimal(\"-1.1\")));\n        assertThat(expression.match(\"-,1E1\").get(0).getValue(), is(new BigDecimal(\"-1\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest.[void]parse_decimal_numbers_in_norwegian()", "name": "parse_decimal_numbers_in_norwegian", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void parse_decimal_numbers_in_norwegian()", "original_string": "    @Test\n    public void parse_decimal_numbers_in_norwegian() {\n        ExpressionFactory factory = new ExpressionFactory(new ParameterTypeRegistry(Locale.forLanguageTag(\"no\")));\n        Expression expression = factory.createExpression(\"{bigdecimal}\");\n\n        assertThat(expression.match(\"1.000,1\").get(0).getValue(), is(new BigDecimal(\"1000.1\")));\n        assertThat(expression.match(\"1.000.000,1\").get(0).getValue(), is(new BigDecimal(\"1000000.1\")));\n        assertThat(expression.match(\"-1,1\").get(0).getValue(), is(new BigDecimal(\"-1.1\")));\n        assertThat(expression.match(\"-,1E1\").get(0).getValue(), is(new BigDecimal(\"-1\")));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java", "class_name": "ParameterTypeRegistryTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistryTest.java.ParameterTypeRegistryTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest.[void]escape_regex_characters()", "name": "escape_regex_characters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void escape_regex_characters()", "original_string": "    @Test\n    void escape_regex_characters(){\n        assertEquals(\"hello \\\\$world\", escapeRegex(\"hello $world\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "class_name": "RegexpUtilsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest.[void]escape_all_regexp_characters()", "name": "escape_all_regexp_characters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void escape_all_regexp_characters()", "original_string": "    @Test\n    void escape_all_regexp_characters() {\n        assertEquals(\"\\\\^\\\\$\\\\[\\\\]\\\\(\\\\)\\\\{\\\\}\\\\.\\\\|\\\\?\\\\*\\\\+\\\\\\\\\", escapeRegex(\"^$[](){}.|?*+\\\\\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "class_name": "RegexpUtilsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest.[void]escape_escaped_regexp_characters()", "name": "escape_escaped_regexp_characters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void escape_escaped_regexp_characters()", "original_string": "    @Test\n    void escape_escaped_regexp_characters() {\n        assertEquals(\"\\\\^\\\\$\\\\[\\\\]\\\\\\\\\\\\(\\\\\\\\\\\\)\\\\{\\\\}\\\\\\\\\\\\\\\\\\\\.\\\\|\\\\?\\\\*\\\\+\", escapeRegex(\"^$[]\\\\(\\\\){}\\\\\\\\.|?*+\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "class_name": "RegexpUtilsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest.[void]do_not_escape_when_there_is_nothing_to_escape()", "name": "do_not_escape_when_there_is_nothing_to_escape", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void do_not_escape_when_there_is_nothing_to_escape()", "original_string": "    @Test\n    void do_not_escape_when_there_is_nothing_to_escape() {\n        assertEquals(\"hello world\", escapeRegex(\"hello world\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "class_name": "RegexpUtilsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest.[void]gives_no_error_for_unicode_characters()", "name": "gives_no_error_for_unicode_characters", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void gives_no_error_for_unicode_characters()", "original_string": "    @Test\n    void gives_no_error_for_unicode_characters() {\n        assertEquals(\"\ud83e\udd52\", escapeRegex(\"\ud83e\udd52\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java", "class_name": "RegexpUtilsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegexpUtilsTest.java.RegexpUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getRegexpsTest.java.ParameterType_getRegexpsTest.[void]testGetRegexps()", "name": "testGetRegexps", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetRegexps()", "original_string": "    @Test\n    public void testGetRegexps() {\n        List<String> expectedRegexps = Arrays.asList(\"\\\\d+\", \"\\\\w+\");\n        ParameterType<String> parameterType = new ParameterType<>(\"testName\", expectedRegexps, String.class, (String arg) -> arg, true, false);\n        List<String> actualRegexps = parameterType.getRegexps();\n        assertEquals(expectedRegexps, actualRegexps);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getRegexpsTest.java", "class_name": "ParameterType_getRegexpsTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getRegexpsTest.java.ParameterType_getRegexpsTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest.[void]testTransformStringToBigDecimal()", "name": "testTransformStringToBigDecimal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTransformStringToBigDecimal()", "original_string": "    @Test\n    void testTransformStringToBigDecimal() {\n        String fromValue = \"123.45\";\n        Type toValueType = BigDecimal.class;\n        Object result = transformer.transform(fromValue, toValueType);\n        assertEquals(new BigDecimal(\"123.45\"), result);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "class_name": "BuiltInParameterTransformer_transformTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest.[void]testTransformStringToOptionalBigDecimal()", "name": "testTransformStringToOptionalBigDecimal", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTransformStringToOptionalBigDecimal()", "original_string": "    @Test\n    void testTransformStringToOptionalBigDecimal() {\n        String fromValue = \"123.45\";\n        Type toValueType = new ParameterizedTypeImpl(Optional.class, new Type[]{BigDecimal.class});\n        Object result = transformer.transform(fromValue, toValueType);\n        assertEquals(Optional.of(new BigDecimal(\"123.45\")), result);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "class_name": "BuiltInParameterTransformer_transformTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest.[void]testTransformStringToUnsupportedType()", "name": "testTransformStringToUnsupportedType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTransformStringToUnsupportedType()", "original_string": "    @Test\n    void testTransformStringToUnsupportedType() {\n        String fromValue = \"test\";\n        Type toValueType = this.getClass();\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.transform(fromValue, toValueType);\n        });\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "class_name": "BuiltInParameterTransformer_transformTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest.[void]testTransformNullValue()", "name": "testTransformNullValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTransformNullValue()", "original_string": "    @Test\n    void testTransformNullValue() {\n        String fromValue = null;\n        Type toValueType = BigDecimal.class;\n        Object result = transformer.transform(fromValue, toValueType);\n        assertNull(result);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "class_name": "BuiltInParameterTransformer_transformTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest.[void]testTransformStringToEnum()", "name": "testTransformStringToEnum", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void testTransformStringToEnum()", "original_string": "    @Test\n    void testTransformStringToEnum() {\n        String fromValue = \"VALUE1\";\n        Type toValueType = TestEnum.class;\n        Object result = transformer.transform(fromValue, toValueType);\n        assertEquals(TestEnum.VALUE1, result);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java", "class_name": "BuiltInParameterTransformer_transformTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/BuiltInParameterTransformer_transformTest.java.BuiltInParameterTransformer_transformTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getNameTest.java.ParameterType_getNameTest.[void]testGetName()", "name": "testGetName", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetName()", "original_string": "    @Test\n    public void testGetName() {\n        ParameterType<String> parameterType = new ParameterType<>(\"testName\", \"testRegexp\", String.class, (String arg) -> arg);\n        assertEquals(\"testName\", parameterType.getName());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getNameTest.java", "class_name": "ParameterType_getNameTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getNameTest.java.ParameterType_getNameTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getTypeTest.java.ParameterType_getTypeTest.[void]getType_returnsCorrectType()", "name": "getType_returnsCorrectType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void getType_returnsCorrectType()", "original_string": "    @Test\n    public void getType_returnsCorrectType() {\n        Type expectedType = String.class;\n        Type actualType = parameterType.getType();\n        assertEquals(expectedType, actualType);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getTypeTest.java", "class_name": "ParameterType_getTypeTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterType_getTypeTest.java.ParameterType_getTypeTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest.[void]can_parse_float()", "name": "can_parse_float", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void can_parse_float()", "original_string": "    @Test\n    void can_parse_float() {\n        assertEquals(1042.2f, english.parseFloat(\"1,042.2\"), 0);\n        assertEquals(1042.2f, canadian.parseFloat(\"1,042.2\"), 0);\n\n        assertEquals(1042.2f, german.parseFloat(\"1.042,2\"), 0);\n        assertEquals(1042.2f, canadianFrench.parseFloat(\"1.042,2\"), 0);\n        assertEquals(1042.2f, norwegian.parseFloat(\"1.042,2\"), 0);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "class_name": "NumberParserTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest.[void]can_parse_double()", "name": "can_parse_double", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void can_parse_double()", "original_string": "    @Test\n    void can_parse_double() {\n        assertEquals(1042.000000000000002, english.parseDouble(\"1,042.000000000000002\"), 0);\n        assertEquals(1042.000000000000002, canadian.parseDouble(\"1,042.000000000000002\"), 0);\n\n        assertEquals(1042.000000000000002, german.parseDouble(\"1.042,000000000000002\"), 0);\n        assertEquals(1042.000000000000002, canadianFrench.parseDouble(\"1.042,000000000000002\"), 0);\n        assertEquals(1042.000000000000002, norwegian.parseDouble(\"1.042,000000000000002\"), 0);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "class_name": "NumberParserTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest.[void]can_parse_big_decimals()", "name": "can_parse_big_decimals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void can_parse_big_decimals()", "original_string": "    @Test\n    void can_parse_big_decimals() {\n        assertEquals(new BigDecimal(\"1042.0000000000000000000002\"), english.parseBigDecimal(\"1,042.0000000000000000000002\"));\n        assertEquals(new BigDecimal(\"1042.0000000000000000000002\"), canadian.parseBigDecimal(\"1,042.0000000000000000000002\"));\n\n        assertEquals(new BigDecimal(\"1042.0000000000000000000002\"), german.parseBigDecimal(\"1.042,0000000000000000000002\"));\n        assertEquals(new BigDecimal(\"1042.0000000000000000000002\"), canadianFrench.parseBigDecimal(\"1.042,0000000000000000000002\"));\n        assertEquals(new BigDecimal(\"1042.0000000000000000000002\"), norwegian.parseBigDecimal(\"1.042,0000000000000000000002\"));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "class_name": "NumberParserTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest.[void]can_parse_negative()", "name": "can_parse_negative", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    void can_parse_negative()", "original_string": "    @Test\n    void can_parse_negative() {\n        assertEquals(-1042.2f, english.parseFloat(\"-1,042.2\"), 0);\n        assertEquals(-1042.2f, canadian.parseFloat(\"-1,042.2\"), 0);\n\n        assertEquals(-1042.2f, german.parseFloat(\"-1.042,2\"), 0);\n        assertEquals(-1042.2f, canadianFrench.parseFloat(\"-1.042,2\"), 0);\n        assertEquals(-1042.2f, norwegian.parseFloat(\"-1.042,2\"), 0);\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java", "class_name": "NumberParserTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/NumberParserTest.java.NumberParserTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getRegexpTest.java.RegularExpression_getRegexpTest.[void]testGetRegexp()", "name": "testGetRegexp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n    public void testGetRegexp()", "original_string": "    @Test\n    public void testGetRegexp() {\n        Pattern expectedPattern = Pattern.compile(\"\\\\d+\");\n        ParameterTypeRegistry parameterTypeRegistry = new ParameterTypeRegistry(java.util.Locale.getDefault());\n        RegularExpression regularExpression = new RegularExpression(expectedPattern, parameterTypeRegistry);\n        assertEquals(expectedPattern, regularExpression.getRegexp());\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getRegexpTest.java", "class_name": "RegularExpression_getRegexpTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/RegularExpression_getRegexpTest.java.RegularExpression_getRegexpTest", "attributes": {"modifiers": "@Test\n    public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_null_to_null(ParameterByTypeTransformer)", "name": "should_convert_null_to_null", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_null_to_null(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_null_to_null(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertNull(defaultTransformer.transform(null, Object.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_null_to_optional(ParameterByTypeTransformer)", "name": "should_convert_null_to_optional", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_null_to_optional(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_null_to_optional(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(Optional.empty(), defaultTransformer.transform(null, Optional.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_null_to_optional_generic(ParameterByTypeTransformer)", "name": "should_convert_null_to_optional_generic", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_null_to_optional_generic(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_null_to_optional_generic(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        Type optionalIntType = new TypeReference<Optional<Integer>>() {\n        }.getType();\n\n        assertEquals(Optional.empty(), defaultTransformer.transform(null, optionalIntType));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_string(ParameterByTypeTransformer)", "name": "should_convert_to_string", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_string(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_string(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(\"Barbara Liskov\",\n                defaultTransformer.transform(\"Barbara Liskov\", String.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_optional_string(ParameterByTypeTransformer)", "name": "should_convert_to_optional_string", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_optional_string(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_optional_string(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        Type optionalStringType = new TypeReference<Optional<String>>() {\n        }.getType();\n\n        assertEquals(Optional.of(\"Barbara Liskov\"), defaultTransformer.transform(\"Barbara Liskov\", optionalStringType));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_object(ParameterByTypeTransformer)", "name": "should_convert_to_object", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_object(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_object(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(\"Barbara Liskov\",\n                defaultTransformer.transform(\"Barbara Liskov\", Object.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_big_integer(ParameterByTypeTransformer)", "name": "should_convert_to_big_integer", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_big_integer(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_big_integer(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(new BigInteger(\"10000008\"),\n                defaultTransformer.transform(\"10000008\", BigInteger.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_big_decimal(ParameterByTypeTransformer)", "name": "should_convert_to_big_decimal", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_big_decimal(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_big_decimal(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(new BigDecimal(\"1.0000008\"),\n                defaultTransformer.transform(\"1.0000008\", BigDecimal.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_byte(ParameterByTypeTransformer)", "name": "should_convert_to_byte", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_byte(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_byte(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(Byte.decode(\"42\"), defaultTransformer.transform(\"42\", Byte.class));\n        assertEquals(Byte.decode(\"42\"), defaultTransformer.transform(\"42\", byte.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_short(ParameterByTypeTransformer)", "name": "should_convert_to_short", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_short(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_short(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(Short.decode(\"42\"), defaultTransformer.transform(\"42\", Short.class));\n        assertEquals(Short.decode(\"42\"), defaultTransformer.transform(\"42\", short.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_integer(ParameterByTypeTransformer)", "name": "should_convert_to_integer", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_integer(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_integer(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(Integer.decode(\"42\"), defaultTransformer.transform(\"42\", Integer.class));\n        assertEquals(Integer.decode(\"42\"), defaultTransformer.transform(\"42\", int.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_optional_integer(ParameterByTypeTransformer)", "name": "should_convert_to_optional_integer", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_optional_integer(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_optional_integer(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        Type optionalIntType = new TypeReference<Optional<Integer>>() {\n        }.getType();\n\n        assertEquals(Optional.of(Integer.decode(\"42\")), defaultTransformer.transform(\"42\", optionalIntType));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_long(ParameterByTypeTransformer)", "name": "should_convert_to_long", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_long(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_long(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(Long.decode(\"42\"), defaultTransformer.transform(\"42\", Long.class));\n        assertEquals(Long.decode(\"42\"), defaultTransformer.transform(\"42\", long.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_float(ParameterByTypeTransformer)", "name": "should_convert_to_float", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_float(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_float(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(4.2f, defaultTransformer.transform(\"4.2\", Float.class));\n        assertEquals(4.2f, defaultTransformer.transform(\"4.2\", float.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_double(ParameterByTypeTransformer)", "name": "should_convert_to_double", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_double(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_double(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(4.2, defaultTransformer.transform(\"4.2\", Double.class));\n        assertEquals(4.2, defaultTransformer.transform(\"4.2\", double.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest.[void]should_convert_to_enum(ParameterByTypeTransformer)", "name": "should_convert_to_enum", "arg_nums": 1, "params": [{"name": "defaultTransformer", "type": "ParameterByTypeTransformer"}], "return_type": "void", "signature": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_enum(final ParameterByTypeTransformer defaultTransformer)", "original_string": "    @ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public void should_convert_to_enum(final ParameterByTypeTransformer defaultTransformer) throws Throwable {\n        assertEquals(TestEnum.TEST, defaultTransformer.transform(\"TEST\", TestEnum.class));\n    }", "default_arguments": null, "file": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java", "class_name": "ParameterByTypeTransformerTest", "class_uri": "src/test/java/io/cucumber/cucumberexpressions/ParameterByTypeTransformerTest.java.ParameterByTypeTransformerTest", "attributes": {"modifiers": "@ParameterizedTest\n    @MethodSource(\"objectMapperImplementations\")\n    public", "marker_annotations": ["@ParameterizedTest"], "non_marker_annotations": ["@MethodSource(\"objectMapperImplementations\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]