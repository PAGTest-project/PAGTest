[{"strategy": "generate", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.lang.reflect.Type;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.when;\n\npublic class CucumberExpression_matchTest {\n\n    @Test\n    public void testMatch_NoMatch() {\n        // Given\n        TreeRegexp treeRegexp = Mockito.mock(TreeRegexp.class);\n        when(treeRegexp.match(Mockito.anyString())).thenReturn(null);\n\n        ParameterTypeRegistry parameterTypeRegistry = Mockito.mock(ParameterTypeRegistry.class);\n        CucumberExpression cucumberExpression = new CucumberExpression(\"expression\", parameterTypeRegistry) {\n            @Override\n            TreeRegexp getTreeRegexp() {\n                return treeRegexp;\n            }\n        };\n\n        // When\n        List<Argument<?>> result = cucumberExpression.match(\"text\");\n\n        // Then\n        assertNull(result);\n    }\n\n    @Test\n    public void testMatch_WithMatch() {\n        // Given\n        Group group = Mockito.mock(Group.class);\n        TreeRegexp treeRegexp = Mockito.mock(TreeRegexp.class);\n        when(treeRegexp.match(Mockito.anyString())).thenReturn(group);\n\n        ParameterTypeRegistry parameterTypeRegistry = Mockito.mock(ParameterTypeRegistry.class);\n        ParameterType<?> parameterType = Mockito.mock(ParameterType.class);\n        when(parameterType.isAnonymous()).thenReturn(false);\n        when(parameterTypeRegistry.lookupByTypeName(Mockito.anyString())).thenReturn(parameterType);\n\n        CucumberExpression cucumberExpression = new CucumberExpression(\"expression\", parameterTypeRegistry) {\n            @Override\n            TreeRegexp getTreeRegexp() {\n                return treeRegexp;\n            }\n        };\n\n        // When\n        List<Argument<?>> result = cucumberExpression.match(\"text\");\n\n        // Then\n        assertNotNull(result);\n    }\n}\n"}]