[{"strategy": "generate", "code": "\npackage io.cucumber.cucumberexpressions;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.regex.Pattern;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\npublic class RegularExpression_matchTest {\n\n    private ParameterTypeRegistry parameterTypeRegistry;\n    private RegularExpression regularExpression;\n\n    @BeforeEach\n    public void setUp() {\n        parameterTypeRegistry = new ParameterTypeRegistry(Locale.ENGLISH);\n        regularExpression = new RegularExpression(Pattern.compile(\"I have a (red|blue|yellow) ball\"), parameterTypeRegistry);\n    }\n\n    @Test\n    public void testMatchWithValidText() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                null,\n                \"red|blue|yellow\",\n                Color.class,\n                Color::new,\n                false,\n                false\n        ));\n\n        List<Argument<?>> arguments = regularExpression.match(\"I have a red ball\");\n        assertEquals(1, arguments.size());\n        assertEquals(new Color(\"red\"), arguments.get(0).getValue());\n    }\n\n    @Test\n    public void testMatchWithInvalidText() {\n        List<Argument<?>> arguments = regularExpression.match(\"I have a green ball\");\n        assertNull(arguments);\n    }\n\n    @Test\n    public void testMatchWithTypeHint() {\n        parameterTypeRegistry.defineParameterType(new ParameterType<>(\n                null,\n                \"red|blue|yellow\",\n                Color.class,\n                Color::new,\n                false,\n                false\n        ));\n\n        List<Argument<?>> arguments = regularExpression.match(\"I have a red ball\", String.class);\n        assertEquals(1, arguments.size());\n        assertEquals(new Color(\"red\"), arguments.get(0).getValue());\n    }\n\n    @Test\n    public void testMatchWithAnonymousParameterType() {\n        List<Argument<?>> arguments = regularExpression.match(\"I have a red ball\");\n        assertEquals(1, arguments.size());\n        assertEquals(\"red\", arguments.get(0).getValue());\n    }\n\n    private static class Color {\n        private final String color;\n\n        public Color(String color) {\n            this.color = color;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Color color1 = (Color) o;\n            return color.equals(color1.color);\n        }\n\n        @Override\n        public int hashCode() {\n            return color.hashCode();\n        }\n    }\n}\n"}]