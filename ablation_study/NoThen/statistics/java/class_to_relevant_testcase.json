{"TreeRegexp": [{"method_name": "match(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "testcase_name": "exposes_parameter_type"}], "ParameterTypeRegistry": [{"method_name": "lookupByTypeName(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "testcase_name": "exposes_parameter_type"}, {"method_name": "getDefaultParameterTransformer()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeRegistry_setDefaultParameterTransformerTest.java", "testclass_name": "ParameterTypeRegistry_setDefaultParameterTransformerTest", "testcase_name": "testSetDefaultParameterTransformer"}], "Argument": [{"method_name": "getParameterType()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ArgumentTest.java", "testclass_name": "ArgumentTest", "testcase_name": "exposes_parameter_type"}], "CaptureGroupTransformer": [{"method_name": ")", "file_path": "src/test/java/io/cucumber/cucumberexpressions/GenericParameterTypeTest.java", "testclass_name": "GenericParameterTypeTest", "testcase_name": "transforms_to_a_list_of_string"}], "ParameterType": [{"method_name": "getName()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ParameterTypeComparatorTest.java", "testclass_name": "ParameterTypeComparatorTest", "testcase_name": "sorts_parameter_types_by_preferential_then_name"}], "GeneratedExpression": [{"method_name": "getSource()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CombinatorialGeneratedExpressionFactoryTest.java", "testclass_name": "CombinatorialGeneratedExpressionFactoryTest", "testcase_name": "generates_multiple_expressions"}], "GroupBuilder": [{"method_name": "getSource()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "exposes_group_source"}], "YamlableNode": [{"method_name": "toNode()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionParserTest.java", "testclass_name": "CucumberExpressionParserTest", "testcase_name": "acceptance_tests_pass"}], "YamlableToken": [{"method_name": "toToken()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTokenizerTest.java", "testclass_name": "CucumberExpressionTokenizerTest", "testcase_name": "acceptance_tests_pass"}], "PatternCompilerProviderTest": [{"method_name": "getTestCompiler()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "testcase_name": "use_found_pattern_compiler_if_one_provided"}, {"method_name": "getTestCompiler()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/PatternCompilerProviderTest.java", "testclass_name": "PatternCompilerProviderTest", "testcase_name": "throws_error_if_more_than_one_pattern_compiler"}], "getAvailableLocalesAsStream()": [{"method_name": "getAvailableLocalesAsStream()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listMinusSigns"}, {"method_name": "getAvailableLocalesAsStream()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listDecimalAndGroupingSeparators"}, {"method_name": "getAvailableLocalesAsStream()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listExponentSigns"}], "render(Character)": [{"method_name": "render(Character)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listMinusSigns"}, {"method_name": "render(Character)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listDecimalAndGroupingSeparators"}, {"method_name": "render(Character)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listExponentSigns"}], "render(List<Locale>)": [{"method_name": "render(List<Locale>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listMinusSigns"}, {"method_name": "render(List<Locale>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listDecimalAndGroupingSeparators"}, {"method_name": "render(List<Locale>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/KeyboardFriendlyDecimalFormatSymbolsTest.java", "testclass_name": "KeyboardFriendlyDecimalFormatSymbolsTest", "testcase_name": "listExponentSigns"}], "CustomMatchers": [{"method_name": "equalOrCloseTo(List<?>)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CucumberExpressionTest.java", "testclass_name": "CucumberExpressionTest", "testcase_name": "acceptance_tests_pass"}], "Color": [{"method_name": "<init>(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_custom_parameter_type"}, {"method_name": "<init>(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_custom_parameter_type_using_optional_group"}, {"method_name": "<init>(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "conflicting_parameter_type_is_not_detected_for_regexp"}, {"method_name": "<init>(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_RegularExpression_arguments_with_custom_parameter_type_without_name"}], "CssColor": [{"method_name": "<init>(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "conflicting_parameter_type_is_not_detected_for_regexp"}], "Coordinate": [{"method_name": "<init>(int,int,int)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "matches_CucumberExpression_parameters_with_multiple_capture_groups"}], "Transformer": [{"method_name": "transform(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "warns_when_CucumberExpression_parameters_with_multiple_capture_groups_has_a_transformer"}, {"method_name": "transform(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/CustomParameterTypeTest.java", "testclass_name": "CustomParameterTypeTest", "testcase_name": "defers_transformation_until_queried_from_argument"}], "ExpressionFactoryTest": [{"method_name": "assertCucumberExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_empty"}, {"method_name": "assertCucumberExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_by_default"}, {"method_name": "assertCucumberExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_parenthesis_with_alpha"}, {"method_name": "assertCucumberExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_escaped_parenthesis_with_regex_symbols"}, {"method_name": "assertCucumberExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_escaped_parenthesis_with_alpha"}, {"method_name": "assertCucumberExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_parenthesis_with_regex_symbols"}, {"method_name": "assertRegularExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_anchors"}, {"method_name": "assertRegularExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_only_begin_anchor"}, {"method_name": "assertRegularExpression(String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_cucumber_expression_for_only_end_anchor"}, {"method_name": "assertRegularExpression(String,String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_slashes"}, {"method_name": "assertRegularExpression(String,String)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "creates_regular_expression_for_slashed_anchors"}, {"method_name": "assertThrows(Class<T>,Executable)", "file_path": "src/test/java/io/cucumber/cucumberexpressions/ExpressionFactoryTest.java", "testclass_name": "ExpressionFactoryTest", "testcase_name": "explains_cukexp_regexp_mix"}], "Group": [{"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "builds_tree"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_colon_non_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_exclamation_mark_non_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_equal_sign_non_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_equal_sign_non_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_greater_then_non_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_named_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_optional_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_nested_groups"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_non_capturing_groups_with_capturing_groups_inside"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "detects_multiple_non_capturing_groups"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_escaped_backslash"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_slash_which_doesnt_need_escaping_in_java"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_digit_and_word"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_start_and_end"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "doesnt_consider_parenthesis_in_character_class_as_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_inline_flags"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_non_capturing_inline_flags"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_non_capturing_group"}, {"method_name": "getChildren()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_look_ahead"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "builds_tree"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_colon_non_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_exclamation_mark_non_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_equal_sign_non_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_equal_sign_non_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_less_than_exclamation_mark_non_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "ignores_question_mark_greater_then_non_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_named_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_optional_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "matches_nested_groups"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_non_capturing_groups_with_capturing_groups_inside"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "doesnt_consider_parenthesis_in_character_class_as_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_flags"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_inline_flags"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "works_with_non_capturing_inline_flags"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_non_capturing_group"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "empty_look_ahead"}, {"method_name": "getValue()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "uses_loaded_pattern_compiler_service"}, {"method_name": "getStart()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_start_and_end"}, {"method_name": "getEnd()", "file_path": "src/test/java/io/cucumber/cucumberexpressions/TreeRegexpTest.java", "testclass_name": "TreeRegexpTest", "testcase_name": "captures_start_and_end"}]}