[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.geometry.Geometries;\nimport com.github.davidmoten.rtree.geometry.Point;\nimport com.github.davidmoten.rtree.geometry.Rectangle;\n\nimport rx.Observable;\n\npublic class RTree_nearestTest {\n\n    private RTree<String, Point> tree;\n\n    @Before\n    public void setUp() {\n        tree = RTree.star().create();\n        tree = tree.add(\"Sydney\", Geometries.point(151.209900, -33.865143));\n        tree = tree.add(\"Canberra\", Geometries.point(149.128684, -35.282001));\n        tree = tree.add(\"Brisbane\", Geometries.point(153.025131, -27.469770));\n    }\n\n    @Test\n    public void testNearestWithinDistance() {\n        Rectangle searchArea = Geometries.rectangle(149.0, -35.0, 150.0, -34.0);\n        Observable<Entry<String, Point>> nearestEntries = tree.nearest(searchArea, 300, 1);\n        List<Entry<String, Point>> list = nearestEntries.toList().toBlocking().single();\n\n        assertEquals(1, list.size());\n        assertEquals(\"Sydney\", list.get(0).value());\n    }\n\n    @Test\n    public void testNearestWithMaxCount() {\n        Rectangle searchArea = Geometries.rectangle(149.0, -35.0, 154.0, -27.0);\n        Observable<Entry<String, Point>> nearestEntries = tree.nearest(searchArea, 1000, 2);\n        List<Entry<String, Point>> list = nearestEntries.toList().toBlocking().single();\n\n        assertEquals(2, list.size());\n        assertTrue(list.stream().anyMatch(e -> e.value().equals(\"Sydney\")));\n        assertTrue(list.stream().anyMatch(e -> e.value().equals(\"Brisbane\")));\n    }\n\n    @Test\n    public void testNearestWithNoMatches() {\n        Rectangle searchArea = Geometries.rectangle(100.0, -35.0, 101.0, -34.0);\n        Observable<Entry<String, Point>> nearestEntries = tree.nearest(searchArea, 100, 1);\n        List<Entry<String, Point>> list = nearestEntries.toList().toBlocking().single();\n\n        assertEquals(0, list.size());\n    }\n}\n"}]