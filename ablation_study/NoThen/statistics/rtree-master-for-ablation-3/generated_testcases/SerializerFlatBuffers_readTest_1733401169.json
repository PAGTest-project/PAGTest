[{"strategy": "generate", "code": "\npackage com.github.davidmoten.rtree.fbs;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.util.Optional;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.github.davidmoten.rtree.Context;\nimport com.github.davidmoten.rtree.InternalStructure;\nimport com.github.davidmoten.rtree.RTree;\nimport com.github.davidmoten.rtree.SelectorRStar;\nimport com.github.davidmoten.rtree.SplitterRStar;\nimport com.github.davidmoten.rtree.fbs.generated.Node_;\nimport com.github.davidmoten.rtree.fbs.generated.Tree_;\nimport com.github.davidmoten.rtree.geometry.Geometry;\nimport com.github.davidmoten.rtree.internal.FactoryDefault;\n\npublic class SerializerFlatBuffers_readTest {\n\n    private SerializerFlatBuffers<Object, Geometry> serializer;\n\n    @Before\n    public void setUp() {\n        serializer = new SerializerFlatBuffers<>(null, null);\n    }\n\n    @Test\n    public void testReadWithEmptyTree() throws IOException {\n        byte[] emptyTreeBytes = createEmptyTreeBytes();\n        InputStream is = new ByteArrayInputStream(emptyTreeBytes);\n        RTree<Object, Geometry> tree = serializer.read(is, emptyTreeBytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(tree.root().isEmpty());\n    }\n\n    @Test\n    public void testReadWithNonEmptyTree() throws IOException {\n        byte[] nonEmptyTreeBytes = createNonEmptyTreeBytes();\n        InputStream is = new ByteArrayInputStream(nonEmptyTreeBytes);\n        RTree<Object, Geometry> tree = serializer.read(is, nonEmptyTreeBytes.length, InternalStructure.SINGLE_ARRAY);\n        assertTrue(tree.root().isPresent());\n        assertEquals(1, tree.size());\n    }\n\n    private byte[] createEmptyTreeBytes() {\n        ByteBuffer bb = ByteBuffer.allocate(1024);\n        Tree_.startTree_(bb);\n        Tree_.addContext(bb, 0);\n        Tree_.addSize(bb, 0);\n        int t = Tree_.endTree_(bb);\n        Tree_.finishTree_Buffer(bb, t);\n        return bb.array();\n    }\n\n    private byte[] createNonEmptyTreeBytes() {\n        ByteBuffer bb = ByteBuffer.allocate(1024);\n        Tree_.startTree_(bb);\n        Tree_.addContext(bb, 0);\n        Tree_.addSize(bb, 1);\n        Tree_.addRoot(bb, 0);\n        int t = Tree_.endTree_(bb);\n        Tree_.finishTree_Buffer(bb, t);\n        return bb.array();\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testInputStreamNotAsLongAsExpected() throws IOException {\n        SerializerFlatBuffers.readFully(new ByteArrayInputStream(new byte[10]), 12);\n    }\n}\n"}]