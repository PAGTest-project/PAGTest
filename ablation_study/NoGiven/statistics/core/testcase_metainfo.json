[{"uris": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java.RequestDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java", "class_name": "RequestDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RequestDiffTest.java.RequestDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java.ReferenceDiffCacheTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java", "class_name": "ReferenceDiffCacheTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ReferenceDiffCacheTest.java.ReferenceDiffCacheTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getChangedOperations()).hasSize(3);\n\n    ChangedOperation changedOperation1 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet/{petId}\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation1).isNotNull();\n    assertThat(changedOperation1.isCompatible()).isFalse();\n    ChangedSecurityRequirements changedSecurityRequirements1 =\n        changedOperation1.getSecurityRequirements();\n    assertThat(changedSecurityRequirements1).isNotNull();\n    assertThat(changedSecurityRequirements1.isCompatible()).isFalse();\n    assertThat(changedSecurityRequirements1.getIncreased()).hasSize(1);\n    assertThat(changedSecurityRequirements1.getChanged()).hasSize(1);\n    ChangedSecurityRequirement changedSecurityRequirement1 =\n        changedSecurityRequirements1.getChanged().get(0);\n    assertThat(changedSecurityRequirement1.getChanged()).hasSize(1);\n    ChangedSecuritySchemeScopes changedScopes1 =\n        changedSecurityRequirement1.getChanged().get(0).getChangedScopes();\n    assertThat(changedScopes1)\n        .isNotNull()\n        .satisfies(\n            stringListDiff ->\n                assertThat(stringListDiff.getIncreased())\n                    .hasSize(1)\n                    .first()\n                    .asString()\n                    .isEqualTo(\"read:pets\"));\n\n    ChangedOperation changedOperation2 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet3\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation2).isNotNull();\n    assertThat(changedOperation2.isCompatible()).isFalse();\n    ChangedSecurityRequirements changedSecurityRequirements2 =\n        changedOperation2.getSecurityRequirements();\n    assertThat(changedSecurityRequirements2).isNotNull();\n    assertThat(changedSecurityRequirements2.isCompatible()).isFalse();\n    assertThat(changedSecurityRequirements2.getChanged()).hasSize(1);\n    ChangedSecurityRequirement changedSecurityRequirement2 =\n        changedSecurityRequirements2.getChanged().get(0);\n    assertThat(changedSecurityRequirement2.getChanged()).hasSize(1);\n    ChangedOAuthFlow changedImplicitOAuthFlow2 =\n        changedSecurityRequirement2.getChanged().get(0).getOAuthFlows().getImplicitOAuthFlow();\n    assertThat(changedImplicitOAuthFlow2).isNotNull();\n    assertThat(changedImplicitOAuthFlow2.isAuthorizationUrl()).isTrue();\n\n    ChangedOperation changedOperation3 =\n        changedOpenApi.getChangedOperations().stream()\n            .filter(x -> x.getPathUrl().equals(\"/pet/findByStatus2\"))\n            .findFirst()\n            .get();\n    assertThat(changedOperation3).isNotNull();\n    assertThat(changedOperation3.isCompatible()).isTrue();\n    ChangedSecurityRequirements changedSecurityRequirements3 =\n        changedOperation3.getSecurityRequirements();\n    assertThat(changedSecurityRequirements3).isNotNull();\n    assertThat(changedSecurityRequirements3.getIncreased()).hasSize(1);\n    SecurityRequirement securityRequirement3 = changedSecurityRequirements3.getIncreased().get(0);\n    assertThat(securityRequirement3)\n        .hasSize(1)\n        .hasEntrySatisfying(\"petstore_auth\", values -> assertThat(values).hasSize(2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "class_name": "SecurityDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest.[void]testWithUnknownSecurityScheme()", "name": "testWithUnknownSecurityScheme", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testWithUnknownSecurityScheme()", "original_string": "  @Test\n  public void testWithUnknownSecurityScheme() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC3, OPENAPI_DOC3));\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC4, OPENAPI_DOC4));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "class_name": "SecurityDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest.[void]testMissingSecurityDefinition()", "name": "testMissingSecurityDefinition", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testMissingSecurityDefinition()", "original_string": "  @Test\n  public void testMissingSecurityDefinition() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(OPENAPI_DOC5, OPENAPI_DOC5));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java", "class_name": "SecurityDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/SecurityDiffTest.java.SecurityDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiChangedEndpoints(\"parameters_diff_1.yaml\", \"parameters_diff_2.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MaximumDecreased()", "name": "issue458MaximumDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MaximumDecreased()", "original_string": "  @Test\n  public void issue458MaximumDecreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_2.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MaximumIncreased()", "name": "issue458MaximumIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MaximumIncreased()", "original_string": "  @Test\n  public void issue458MaximumIncreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_3.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MinimumDecreased()", "name": "issue458MinimumDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MinimumDecreased()", "original_string": "  @Test\n  public void issue458MinimumDecreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_4.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458MinimumIncreased()", "name": "issue458MinimumIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458MinimumIncreased()", "original_string": "  @Test\n  public void issue458MinimumIncreased() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_5.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458IntegerFormatChanged()", "name": "issue458IntegerFormatChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458IntegerFormatChanged()", "original_string": "  @Test\n  public void issue458IntegerFormatChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_6.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumChanged()", "name": "issue458ExclusiveMinimumChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumChanged()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_7.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumChanged()", "name": "issue458ExclusiveMaximumChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumChanged()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumChanged() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_8.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumRemoved()", "name": "issue458ExclusiveMinimumRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_9.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumRemoved()", "name": "issue458ExclusiveMaximumRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_1.yaml\", \"issue-458-integer-limits_10.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumTrueToFalse()", "name": "issue458ExclusiveMaximumTrueToFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumTrueToFalse()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumTrueToFalse() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_12.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumTrueToFalse()", "name": "issue458ExclusiveMinimumTrueToFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumTrueToFalse()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumTrueToFalse() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_13.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMaximumTrueRemoved()", "name": "issue458ExclusiveMaximumTrueRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMaximumTrueRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMaximumTrueRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_12.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue458ExclusiveMinimumTrueRemoved()", "name": "issue458ExclusiveMinimumTrueRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue458ExclusiveMinimumTrueRemoved()", "original_string": "  @Test\n  public void issue458ExclusiveMinimumTrueRemoved() {\n    assertOpenApiChangedEndpoints(\n        \"issue-458-integer-limits_11.yaml\", \"issue-458-integer-limits_13.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest.[void]issue488RenameParameterAddAndRemoveParameterReturnFalse()", "name": "issue488RenameParameterAddAndRemoveParameterReturnFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void issue488RenameParameterAddAndRemoveParameterReturnFalse()", "original_string": "  @Test\n  public void issue488RenameParameterAddAndRemoveParameterReturnFalse() {\n    assertOpenApiChangedEndpoints(\"issue-488-1.json\", \"issue-488-2.json\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java", "class_name": "ParameterDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParameterDiffTest.java.ParameterDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]testGeneratedApiSame()", "name": "testGeneratedApiSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGeneratedApiSame()", "original_string": "  @Test\n  public void testGeneratedApiSame() {\n    OpenAPI generated = largeGeneratedApi();\n    assertOpenApiAreEquals(generated, generated);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest.[void]testGeneratedApiDifferent()", "name": "testGeneratedApiDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGeneratedApiDifferent()", "original_string": "  @Test\n  public void testGeneratedApiDifferent() {\n    OpenAPI generated = largeGeneratedApi();\n    OpenAPI generated2 = largeGeneratedApi();\n    assertOpenApiBackwardIncompatible(generated, generated2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java", "class_name": "LargeSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/LargeSchemaTest.java.LargeSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java", "class_name": "AddPropDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiBackwardCompatible(OPENAPI_DOC1, OPENAPI_DOC2, true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java", "class_name": "AddPropDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropDiffTest.java.AddPropDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "class_name": "RecursiveSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest.[void]testDiffDifferentCyclic()", "name": "testDiffDifferentCyclic", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferentCyclic()", "original_string": "  @Test\n  public void testDiffDifferentCyclic() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC1, OPENAPI_DOC3);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "class_name": "RecursiveSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java", "class_name": "RecursiveSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/RecursiveSchemaTest.java.RecursiveSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    JsonRender render = new JsonRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java", "class_name": "JsonRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest.[void]renderDoesNotFailForJsr310Types()", "name": "renderDoesNotFailForJsr310Types", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailForJsr310Types()", "original_string": "  @Test\n  public void renderDoesNotFailForJsr310Types() {\n    JsonRender render = new JsonRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"jsr310_property_1.yaml\", \"jsr310_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java", "class_name": "JsonRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/JsonRenderTest.java.JsonRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange()", "original_string": "  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsDeletedSectionWhenEndpointIsDeleted()", "name": "renderShowsWhatsDeletedSectionWhenEndpointIsDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsDeletedSectionWhenEndpointIsDeleted()", "original_string": "  @Test\n  public void renderShowsWhatsDeletedSectionWhenEndpointIsDeleted() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"delete_endpoint_1.yaml\", \"delete_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's Deleted\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsNewSectionWhenEndpointIsAdded()", "name": "renderShowsWhatsNewSectionWhenEndpointIsAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsNewSectionWhenEndpointIsAdded()", "original_string": "  @Test\n  public void renderShowsWhatsNewSectionWhenEndpointIsAdded() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"add_endpoint_1.yaml\", \"add_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's New\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated()", "name": "renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated()", "original_string": "  @Test\n  public void renderShowsWhatsDeprecatedSectionWhenEndpointIsDeprecated() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"deprecate_endpoint_1.yaml\", \"deprecate_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).contains(\"What's Deprecated\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest.[void]renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged()", "name": "renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged()", "original_string": "  @Test\n  public void renderShowsWhatsChangedSectionWithCorrectFormattingWhenEndpointIsChanged() {\n    ConsoleRender render = new ConsoleRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"change_endpoint_1.yaml\", \"change_endpoint_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .contains(\"What's Changed\")\n        .containsSubsequence(\"- GET    /widgets\", \"Parameter:\", \"- Changed query-param-1 in query\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java", "class_name": "ConsoleRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ConsoleRenderTest.java.ConsoleRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java.ResponseHeaderDiffTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n\n    Map<String, ChangedResponse> changedResponses =\n        changedOpenApi.getChangedOperations().get(0).getApiResponses().getChanged();\n    assertThat(changedResponses).isNotEmpty();\n    assertThat(changedResponses).containsKey(\"200\");\n    ChangedHeaders changedHeaders = changedResponses.get(\"200\").getHeaders();\n    assertThat(changedHeaders.isDifferent()).isTrue();\n    assertThat(changedHeaders.getChanged()).hasSize(1);\n    assertThat(changedHeaders.getIncreased()).hasSize(1);\n    assertThat(changedHeaders.getMissing()).hasSize(1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java", "class_name": "ResponseHeaderDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ResponseHeaderDiffTest.java.ResponseHeaderDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest.[void]testDiffDifferent()", "name": "testDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent()", "original_string": "  @Test\n  public void testDiffDifferent() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    assertThat(changedOpenApi.getNewEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getMissingEndpoints()).isEmpty();\n    assertThat(changedOpenApi.getChangedOperations()).isNotEmpty();\n\n    Map<String, ChangedResponse> changedResponses =\n        changedOpenApi.getChangedOperations().get(0).getApiResponses().getChanged();\n    assertThat(changedResponses).containsKey(\"200\");\n\n    ChangedResponse changedResponse = changedResponses.get(\"200\");\n    Content oldContent = changedResponse.getOldApiResponse().getContent();\n    Content newContent = changedResponse.getNewApiResponse().getContent();\n    assertThat(oldContent.get(\"application/json\").getSchema()).isNull();\n    assertThat(newContent.get(\"application/json\").getSchema()).isNotNull();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java", "class_name": "ResponseAddedContentSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest.[void]testDiffCanBeRendered()", "name": "testDiffCanBeRendered", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffCanBeRendered()", "original_string": "  @Test\n  public void testDiffCanBeRendered() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new ConsoleRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n\n    outputStream = new ByteArrayOutputStream();\n    outputStreamWriter = new OutputStreamWriter(outputStream);\n    render = new HtmlRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n\n    outputStream = new ByteArrayOutputStream();\n    outputStreamWriter = new OutputStreamWriter(outputStream);\n    render = new MarkdownRender();\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java", "class_name": "ResponseAddedContentSchemaTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ResponseAddedContentSchemaTest.java.ResponseAddedContentSchemaTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java.HtmlRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    HtmlRender render = new HtmlRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java", "class_name": "HtmlRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/HtmlRenderTest.java.HtmlRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java.AllOfOneOfDiffTest.[void]allOfReferringToOneOfSchemasAreSupported()", "name": "allOfReferringToOneOfSchemasAreSupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void allOfReferringToOneOfSchemasAreSupported()", "original_string": "  @Test\n  void allOfReferringToOneOfSchemasAreSupported() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"issue-317_1.json\", \"issue-317_2.json\");\n    assertThat(diff.isCoreChanged().isUnchanged());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java", "class_name": "AllOfOneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfOneOfDiffTest.java.AllOfOneOfDiffTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest.[void]testDiffWithOverloadedParameterTypes()", "name": "testDiffWithOverloadedParameterTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testDiffWithOverloadedParameterTypes()", "original_string": "  @Test\n  void testDiffWithOverloadedParameterTypes() {\n    assertDoesNotThrow(\n        () -> OpenApiCompare.fromLocations(OVERLOADED_PARAMETERS, OVERLOADED_PARAMETERS));\n    assertOpenApiAreEquals(OVERLOADED_PARAMETERS, OVERLOADED_PARAMETERS);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java", "class_name": "ParametersOverloadingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest.[void]testDiffWithDuplicatedParameterTypes()", "name": "testDiffWithDuplicatedParameterTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testDiffWithDuplicatedParameterTypes()", "original_string": "  @Test\n  void testDiffWithDuplicatedParameterTypes() {\n    assertThrows(\n        IllegalArgumentException.class,\n        () -> OpenApiCompare.fromLocations(DUPLICATED_PARAMETER_TYPES, DUPLICATED_PARAMETER_TYPES),\n        \"Two path items have the same signature: /projects/{}\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java", "class_name": "ParametersOverloadingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ParametersOverloadingTest.java.ParametersOverloadingTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java", "class_name": "AddPropPutDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest.[void]testFieldAdditionalInPutApiIsCompatible()", "name": "testFieldAdditionalInPutApiIsCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testFieldAdditionalInPutApiIsCompatible()", "original_string": "  @Test\n  public void testFieldAdditionalInPutApiIsCompatible() {\n    // See https://github.com/OpenAPITools/openapi-diff/pull/537\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java", "class_name": "AddPropPutDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AddPropPutDiffTest.java.AddPropPutDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testEqual()", "name": "testEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEqual()", "original_string": "  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(OPENAPI_PATH1, OPENAPI_PATH2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testMultiplePathWithSameSignature()", "name": "testMultiplePathWithSameSignature", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testMultiplePathWithSameSignature()", "original_string": "  @Test\n  public void testMultiplePathWithSameSignature() {\n    assertThrows(\n        IllegalArgumentException.class, () -> assertOpenApiAreEquals(OPENAPI_PATH3, OPENAPI_PATH3));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testSameTemplateDifferentMethods()", "name": "testSameTemplateDifferentMethods", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSameTemplateDifferentMethods()", "original_string": "  @Test\n  public void testSameTemplateDifferentMethods() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_PATH1, OPENAPI_PATH4);\n    assertThat(changedOpenApi.getNewEndpoints())\n        .hasSize(1)\n        .satisfiesExactly(\n            endpoint ->\n                assertThat(endpoint.getOperation().getOperationId()).isEqualTo(\"deletePet\"));\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest.[void]testDiffWithSimilarBeginningPaths()", "name": "testDiffWithSimilarBeginningPaths", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffWithSimilarBeginningPaths()", "original_string": "  @Test\n  public void testDiffWithSimilarBeginningPaths() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_PATH5, OPENAPI_PATH6);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromSpecifications(\n            changedOpenApi.getOldSpecOpenApi(), changedOpenApi.getNewSpecOpenApi());\n    assertThat(diff.getChangedOperations()).isEmpty();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java", "class_name": "PathDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathDiffTest.java.PathDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java.OperationDiffTest.[void]testContentDiffWithOneEmptyMediaType()", "name": "testContentDiffWithOneEmptyMediaType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContentDiffWithOneEmptyMediaType()", "original_string": "  @Test\n  public void testContentDiffWithOneEmptyMediaType() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isChanged()).isEqualTo(DiffResult.METADATA);\n    assertThat(changedOpenApi.isDifferent()).isTrue();\n    assertThat(changedOpenApi.getChangedOperations().size()).isEqualTo(1);\n    assertThat(changedOpenApi.getChangedOperations().get(0).getOperationId().isDifferent())\n        .isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java", "class_name": "OperationDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OperationDiffTest.java.OperationDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testEqual()", "name": "testEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEqual()", "original_string": "  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(OPENAPI_DOC2, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testNewApi()", "name": "testNewApi", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testNewApi()", "original_string": "  @Test\n  public void testNewApi() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_EMPTY_DOC, OPENAPI_DOC2);\n    List<Endpoint> newEndpoints = changedOpenApi.getNewEndpoints();\n    List<Endpoint> missingEndpoints = changedOpenApi.getMissingEndpoints();\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(newEndpoints).isNotEmpty();\n    assertThat(missingEndpoints).isEmpty();\n    assertThat(changedEndPoints).isEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDeprecatedApi()", "name": "testDeprecatedApi", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeprecatedApi()", "original_string": "  @Test\n  public void testDeprecatedApi() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_EMPTY_DOC);\n    List<Endpoint> newEndpoints = changedOpenApi.getNewEndpoints();\n    List<Endpoint> missingEndpoints = changedOpenApi.getMissingEndpoints();\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(newEndpoints).isEmpty();\n    assertThat(missingEndpoints).isNotEmpty();\n    assertThat(changedEndPoints).isEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDiff()", "name": "testDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff()", "original_string": "  @Test\n  public void testDiff() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    List<ChangedOperation> changedEndPoints = changedOpenApi.getChangedOperations();\n    assertThat(changedEndPoints).isNotEmpty();\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render =\n        new HtmlRender(\"Changelog\", \"http://deepoove.com/swagger-diff/stylesheets/demo.css\");\n    render.render(changedOpenApi, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDiffAndMarkdown()", "name": "testDiffAndMarkdown", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffAndMarkdown()", "original_string": "  @Test\n  public void testDiffAndMarkdown() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new MarkdownRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testDiffAndJson()", "name": "testDiffAndJson", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffAndJson()", "original_string": "  @Test\n  public void testDiffAndJson() {\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    Render render = new JsonRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testComparisonConsistency()", "name": "testComparisonConsistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testComparisonConsistency()", "original_string": "  @Test\n  public void testComparisonConsistency() {\n    final OpenAPI oldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI newSpec = loadSpecFromFile(OPENAPI_DOC3);\n\n    final ChangedOpenApi diff1 = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    assertThat(diff1.isChanged()).isEqualTo(DiffResult.NO_CHANGES);\n    assertThat(diff1.getNewEndpoints()).isEmpty();\n    assertThat(diff1.getMissingEndpoints()).isEmpty();\n    assertThat(diff1.getChangedOperations()).isEmpty();\n\n    final ChangedOpenApi diff2 = OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    assertThat(diff2.isChanged()).isEqualTo(DiffResult.NO_CHANGES);\n    assertThat(diff2.getNewEndpoints()).isEmpty();\n    assertThat(diff2.getMissingEndpoints()).isEmpty();\n    assertThat(diff2.getChangedOperations()).isEmpty();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " Testing that repetitive specs comparisons has to produce consistent result."}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest.[void]testSpecObjectsAreNotChangesAfterComparison()", "name": "testSpecObjectsAreNotChangesAfterComparison", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSpecObjectsAreNotChangesAfterComparison()", "original_string": "  @Test\n  public void testSpecObjectsAreNotChangesAfterComparison() {\n    final OpenAPI oldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI newSpec = loadSpecFromFile(OPENAPI_DOC3);\n\n    OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n    OpenApiCompare.fromSpecifications(oldSpec, newSpec);\n\n    final OpenAPI expectedOldSpec = loadSpecFromFile(OPENAPI_DOC3);\n    final OpenAPI expectedNewSpec = loadSpecFromFile(OPENAPI_DOC3);\n    assertThat(oldSpec).isEqualTo(expectedOldSpec);\n    assertThat(newSpec).isEqualTo(expectedNewSpec);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java", "class_name": "OpenApiDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OpenApiDiffTest.java.OpenApiDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "name": "renderDoesNotCauseStackOverflowWithRecursiveDefinitions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "original_string": "  @Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"recursive_old.yaml\", \"recursive_new.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange()", "original_string": "  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]validateAsciiDocChangeFile()", "name": "validateAsciiDocChangeFile", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void validateAsciiDocChangeFile()", "original_string": "  @Test\n  public void validateAsciiDocChangeFile() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .isEqualTo(\n            \"= TITLE (v 1.0.0)\\n\"\n                + \":reproducible:\\n\"\n                + \":sectlinks:\\n\"\n                + \":toc:\\n\"\n                + \"\\n\"\n                + \"== What's Changed\\n\"\n                + \"=== GET   /\\n\"\n                + \"* Return Type:\\n\"\n                + \"** Changed default \\n\"\n                + \"** Media types:\\n\"\n                + \"*** Changed application/json\\n\"\n                + \"*** Schema:\\n\"\n                + \"Backward compatible\\n\"\n                + \"\\n\"\n                + \"\\n\"\n                + \"NOTE: API changes are backward compatible\\n\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest.[void]validateAsciiDocRangeStatus()", "name": "validateAsciiDocRangeStatus", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void validateAsciiDocRangeStatus()", "original_string": "  @Test\n  public void validateAsciiDocRangeStatus() {\n    AsciidocRender render = new AsciidocRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString())\n        .isEqualTo(\n            \"= PROJECTS API (v 1.0.0)\\n\"\n                + \":reproducible:\\n\"\n                + \":sectlinks:\\n\"\n                + \":toc:\\n\"\n                + \"\\n\"\n                + \"== What's Changed\\n\"\n                + \"=== GET   /pet/\\n\"\n                + \"* Return Type:\\n\"\n                + \"** Add 4XX \\n\"\n                + \"** Deleted 405 Method Not Allowed\\n\"\n                + \"\\n\"\n                + \"\\n\"\n                + \"WARNING: API changes broke backward compatibility\\n\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java", "class_name": "AsciidocRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AsciidocRenderTest.java.AsciidocRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java.AdditionalPropertiesTest.[void]booleanAdditionalPropertiesAreSupported()", "name": "booleanAdditionalPropertiesAreSupported", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void booleanAdditionalPropertiesAreSupported()", "original_string": "  @Test\n  void booleanAdditionalPropertiesAreSupported() {\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"issue-256_1.json\", \"issue-256_2.json\");\n    ConsoleRender render = new ConsoleRender();\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java", "class_name": "AdditionalPropertiesTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AdditionalPropertiesTest.java.AdditionalPropertiesTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffSameWithAllOf()", "name": "testDiffSameWithAllOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSameWithAllOf()", "original_string": "  @Test\n  public void testDiffSameWithAllOf() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffDifferent1()", "name": "testDiffDifferent1", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent1()", "original_string": "  @Test\n  public void testDiffDifferent1() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC3);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest.[void]testDiffDifferent2()", "name": "testDiffDifferent2", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferent2()", "original_string": "  @Test\n  public void testDiffDifferent2() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC4);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java", "class_name": "AllOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/AllOfDiffTest.java.AllOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testDiffSame()", "name": "testDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSame()", "original_string": "  @Test\n  public void testDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC1, OPENAPI_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testDiffDifferentMapping()", "name": "testDiffDifferentMapping", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffDifferentMapping()", "original_string": "  @Test\n  public void testDiffDifferentMapping() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testDiffSameWithOneOf()", "name": "testDiffSameWithOneOf", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiffSameWithOneOf()", "original_string": "  @Test\n  public void testDiffSameWithOneOf() {\n    assertOpenApiAreEquals(OPENAPI_DOC2, OPENAPI_DOC3);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testComposedSchema()", "name": "testComposedSchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testComposedSchema()", "original_string": "  @Test\n  public void testComposedSchema() {\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC4, OPENAPI_DOC5);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testComposedSchemaDiff()", "name": "testComposedSchemaDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testComposedSchemaDiff()", "original_string": "  @Test\n  public void testComposedSchemaDiff() {\n    assertOpenApiAreEquals(OPENAPI_DOC10, OPENAPI_DOC10);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testOneOfDiscrimitatorChanged()", "name": "testOneOfDiscrimitatorChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testOneOfDiscrimitatorChanged()", "original_string": "  @Test\n  public void testOneOfDiscrimitatorChanged() {\n    // The oneOf 'discriminator' changed: 'realtype' -> 'othertype':\n    assertOpenApiBackwardIncompatible(OPENAPI_DOC6, OPENAPI_DOC7);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testOneOfDiscrimitatorMissingSameOrder()", "name": "testOneOfDiscrimitatorMissingSameOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testOneOfDiscrimitatorMissingSameOrder()", "original_string": "  @Test\n  public void testOneOfDiscrimitatorMissingSameOrder() {\n    assertOpenApiAreEquals(OPENAPI_DOC8, OPENAPI_DOC8);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest.[void]testOneOfDiscrimitatorMissingDifferentOrder()", "name": "testOneOfDiscrimitatorMissingDifferentOrder", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testOneOfDiscrimitatorMissingDifferentOrder()", "original_string": "  @Test\n  public void testOneOfDiscrimitatorMissingDifferentOrder() {\n    assertOpenApiAreEquals(OPENAPI_DOC8, OPENAPI_DOC9);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java", "class_name": "OneOfDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/OneOfDiffTest.java.OneOfDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest.[void]pathSamePathParamsDiffParamSameAsInPathButSchemaDiff()", "name": "pathSamePathParamsDiffParamSameAsInPathButSchemaDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")\n  public void pathSamePathParamsDiffParamSameAsInPathButSchemaDiff()", "original_string": "  @Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")\n  public void pathSamePathParamsDiffParamSameAsInPathButSchemaDiff() {\n    final Logger logger = LoggerFactory.getLogger(PathParameterSchemaDiffTest.class);\n    logger.info(TEST_MSG_1);\n    String OPENAPI_DOC1 = \"path_parameter_diff_param_schema_diff_old.yaml\";\n    String OPENAPI_DOC2 = \"path_parameter_diff_param_schema_diff_new.yaml\";\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    Assertions.assertTrue(diff.isDifferent());\n    Assertions.assertFalse(diff.isCompatible());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java", "class_name": "PathParameterSchemaDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest", "attributes": {"modifiers": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, Different Schema\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest.[void]pathSamePathParamsDiffParamNameDiffSchemaSame()", "name": "pathSamePathParamsDiffParamNameDiffSchemaSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")\n  public void pathSamePathParamsDiffParamNameDiffSchemaSame()", "original_string": "  @Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")\n  public void pathSamePathParamsDiffParamNameDiffSchemaSame() {\n    final Logger logger = LoggerFactory.getLogger(PathParameterSchemaDiffTest.class);\n    logger.info(TEST_MSG_2);\n    String OPENAPI_DOC1 = \"path_parameter_diff_param_name_diff_old.yaml\";\n    String OPENAPI_DOC2 = \"path_parameter_diff_param_name_diff_new.yaml\";\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    Assertions.assertFalse(diff.isDifferent());\n    Assertions.assertTrue(diff.isCompatible());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java", "class_name": "PathParameterSchemaDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/PathParameterSchemaDiffTest.java.PathParameterSchemaDiffTest", "attributes": {"modifiers": "@Test\n  @DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["@DisplayName(\n      \"Same Path, different PathParams, Params in the `Parameters`: match pathParam, same Schema\")", "public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest.[void]testArrayDiffDifferent()", "name": "testArrayDiffDifferent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testArrayDiffDifferent()", "original_string": "  @Test\n  public void testArrayDiffDifferent() {\n    assertOpenApiChangedEndpoints(OPENAPI_DOC31, OPENAPI_DOC32);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java", "class_name": "ArrayDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest.[void]testArrayDiffSame()", "name": "testArrayDiffSame", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testArrayDiffSame()", "original_string": "  @Test\n  public void testArrayDiffSame() {\n    assertOpenApiAreEquals(OPENAPI_DOC31, OPENAPI_DOC31);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java", "class_name": "ArrayDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ArrayDiffTest.java.ArrayDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest.[void]renderDoesNotFailWhenPropertyHasBeenRemoved()", "name": "renderDoesNotFailWhenPropertyHasBeenRemoved", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved()", "original_string": "  @Test\n  public void renderDoesNotFailWhenPropertyHasBeenRemoved() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"missing_property_1.yaml\", \"missing_property_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "class_name": "MarkdownRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest.[void]renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "name": "renderDoesNotCauseStackOverflowWithRecursiveDefinitions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions()", "original_string": "  @Test\n  public void renderDoesNotCauseStackOverflowWithRecursiveDefinitions() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff = OpenApiCompare.fromLocations(\"recursive_old.yaml\", \"recursive_new.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "class_name": "MarkdownRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest.[void]renderDoesNotFailWhenHTTPStatusCodeIsRange()", "name": "renderDoesNotFailWhenHTTPStatusCodeIsRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange()", "original_string": "  @Test\n  public void renderDoesNotFailWhenHTTPStatusCodeIsRange() {\n    MarkdownRender render = new MarkdownRender();\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(outputStream);\n    ChangedOpenApi diff =\n        OpenApiCompare.fromLocations(\"range_statuscode_1.yaml\", \"range_statuscode_2.yaml\");\n    render.render(diff, outputStreamWriter);\n    assertThat(outputStream.toString()).isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java", "class_name": "MarkdownRenderTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/MarkdownRenderTest.java.MarkdownRenderTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testContentDiffWithOneEmptyMediaType()", "name": "testContentDiffWithOneEmptyMediaType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContentDiffWithOneEmptyMediaType()", "original_string": "  @Test\n  public void testContentDiffWithOneEmptyMediaType() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isIncompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testContentDiffWithEmptyMediaTypes()", "name": "testContentDiffWithEmptyMediaTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContentDiffWithEmptyMediaTypes()", "original_string": "  @Test\n  public void testContentDiffWithEmptyMediaTypes() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC1, OPENAPI_DOC1);\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testSameContentDiff()", "name": "testSameContentDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSameContentDiff()", "original_string": "  @Test\n  public void testSameContentDiff() {\n    ChangedOpenApi changedOpenApi = OpenApiCompare.fromLocations(OPENAPI_DOC2, OPENAPI_DOC2);\n    assertThat(changedOpenApi.isUnchanged()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testAddedResponseContentTypeDiff()", "name": "testAddedResponseContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddedResponseContentTypeDiff()", "original_string": "  @Test\n  public void testAddedResponseContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_response_add_1.yaml\", \"content_type_response_add_2.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testRemovedResponseContentTypeDiff()", "name": "testRemovedResponseContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRemovedResponseContentTypeDiff()", "original_string": "  @Test\n  public void testRemovedResponseContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_response_add_2.yaml\", \"content_type_response_add_1.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isFalse();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testAddedRequestContentTypeDiff()", "name": "testAddedRequestContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddedRequestContentTypeDiff()", "original_string": "  @Test\n  public void testAddedRequestContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_request_add_1.yaml\", \"content_type_request_add_2.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isTrue();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest.[void]testRemovedRequestContentTypeDiff()", "name": "testRemovedRequestContentTypeDiff", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRemovedRequestContentTypeDiff()", "original_string": "  @Test\n  public void testRemovedRequestContentTypeDiff() {\n    ChangedOpenApi changedOpenApi =\n        OpenApiCompare.fromLocations(\n            \"content_type_request_add_2.yaml\", \"content_type_request_add_1.yaml\");\n    assertThat(changedOpenApi.isCompatible()).isFalse();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java", "class_name": "ContentDiffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/ContentDiffTest.java.ContentDiffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest.[void]testEqual()", "name": "testEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEqual()", "original_string": "  @Test\n  public void testEqual() {\n    assertOpenApiAreEquals(SWAGGER_DOC1, SWAGGER_DOC1);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java", "class_name": "Swagger2CompatibilityTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest.[void]testSwagger2ToOpenapi3()", "name": "testSwagger2ToOpenapi3", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSwagger2ToOpenapi3()", "original_string": "  @Test\n  public void testSwagger2ToOpenapi3() {\n    assertOpenApiAreEquals(SWAGGER_DOC1, OPENAPI_DOC2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java", "class_name": "Swagger2CompatibilityTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/Swagger2CompatibilityTest.java.Swagger2CompatibilityTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java.ConsoleRender_titleTest.[void]testTitle()", "name": "testTitle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testTitle()", "original_string": "  @Test\n  public void testTitle() {\n    ConsoleRender consoleRender = new ConsoleRender();\n    String expected =\n        String.format(\n            \"%s--%s--%n%s\",\n            StringUtils.repeat('-', 74) + System.lineSeparator(),\n            StringUtils.center(\"Test Title\", 70),\n            StringUtils.repeat('-', 74) + System.lineSeparator());\n    String actual = consoleRender.title(\"Test Title\", '-');\n    assertEquals(expected, actual);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java", "class_name": "ConsoleRender_titleTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/output/ConsoleRender_titleTest.java.ConsoleRender_titleTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/output/HttpStatus_getReasonPhraseTest.java.HttpStatus_getReasonPhraseTest.[void]testGetReasonPhrase_ValidStatusCode()", "name": "testGetReasonPhrase_ValidStatusCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testGetReasonPhrase_ValidStatusCode()", "original_string": "  @Test\n  void testGetReasonPhrase_ValidStatusCode() {\n    assertEquals(\"OK\", HttpStatus.getReasonPhrase(200));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/output/HttpStatus_getReasonPhraseTest.java", "class_name": "HttpStatus_getReasonPhraseTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/output/HttpStatus_getReasonPhraseTest.java.HttpStatus_getReasonPhraseTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/output/HttpStatus_getReasonPhraseTest.java.HttpStatus_getReasonPhraseTest.[void]testGetReasonPhrase_NegativeStatusCode()", "name": "testGetReasonPhrase_NegativeStatusCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testGetReasonPhrase_NegativeStatusCode()", "original_string": "  @Test\n  void testGetReasonPhrase_NegativeStatusCode() {\n    IllegalArgumentException exception =\n        assertThrows(\n            IllegalArgumentException.class,\n            () -> {\n              HttpStatus.getReasonPhrase(-1);\n            });\n    assertEquals(\"status code may not be negative\", exception.getMessage());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/output/HttpStatus_getReasonPhraseTest.java", "class_name": "HttpStatus_getReasonPhraseTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/output/HttpStatus_getReasonPhraseTest.java.HttpStatus_getReasonPhraseTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/output/AsciidocRender_bigTitleTest.java.AsciidocRender_bigTitleTest.[void]testBigTitle()", "name": "testBigTitle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testBigTitle()", "original_string": "  @Test\n  public void testBigTitle() {\n    AsciidocRender render = new AsciidocRender();\n    String result = render.bigTitle(\"OpenAPI Diff\", \"1.0.0\");\n    assertEquals(\"= OPENAPI DIFF (v 1.0.0)\", result);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/output/AsciidocRender_bigTitleTest.java", "class_name": "AsciidocRender_bigTitleTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/output/AsciidocRender_bigTitleTest.java.AsciidocRender_bigTitleTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest.[void]testGetRefName_NullRef()", "name": "testGetRefName_NullRef", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testGetRefName_NullRef()", "original_string": "  @Test\n  void testGetRefName_NullRef() {\n    RefPointer<Object> refPointer = new RefPointer<>(RefType.SCHEMAS);\n    assertNull(refPointer.getRefName(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java", "class_name": "RefPointer_getRefNameTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest.[void]testGetRefName_SecuritySchemes()", "name": "testGetRefName_SecuritySchemes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testGetRefName_SecuritySchemes()", "original_string": "  @Test\n  void testGetRefName_SecuritySchemes() {\n    RefPointer<Object> refPointer = new RefPointer<>(RefType.SECURITY_SCHEMES);\n    assertEquals(\"securityRef\", refPointer.getRefName(\"securityRef\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java", "class_name": "RefPointer_getRefNameTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest.[void]testGetRefName_ValidRef()", "name": "testGetRefName_ValidRef", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testGetRefName_ValidRef()", "original_string": "  @Test\n  void testGetRefName_ValidRef() {\n    RefPointer<Object> refPointer = new RefPointer<>(RefType.SCHEMAS);\n    assertEquals(\"schemaRef\", refPointer.getRefName(\"#/components/schemas/schemaRef\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java", "class_name": "RefPointer_getRefNameTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest.[void]testGetRefName_InvalidRef()", "name": "testGetRefName_InvalidRef", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testGetRefName_InvalidRef()", "original_string": "  @Test\n  void testGetRefName_InvalidRef() {\n    RefPointer<Object> refPointer = new RefPointer<>(RefType.SCHEMAS);\n    assertThrows(IllegalArgumentException.class, () -> refPointer.getRefName(\"invalidRef\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java", "class_name": "RefPointer_getRefNameTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/RefPointer_getRefNameTest.java.RefPointer_getRefNameTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/Copy_copyMapTest.java.Copy_copyMapTest.[void]testCopyMap_withNullMap()", "name": "testCopyMap_withNullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testCopyMap_withNullMap()", "original_string": "  @Test\n  public void testCopyMap_withNullMap() {\n    Map<String, String> originalMap = null;\n    Map<String, String> copiedMap = Copy.copyMap(originalMap);\n\n    assertNotNull(copiedMap);\n    assertEquals(0, copiedMap.size());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/Copy_copyMapTest.java", "class_name": "Copy_copyMapTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/Copy_copyMapTest.java.Copy_copyMapTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/Copy_copyMapTest.java.Copy_copyMapTest.[void]testCopyMap_withNonEmptyMap()", "name": "testCopyMap_withNonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testCopyMap_withNonEmptyMap()", "original_string": "  @Test\n  public void testCopyMap_withNonEmptyMap() {\n    Map<String, String> originalMap = new HashMap<>();\n    originalMap.put(\"key1\", \"value1\");\n    originalMap.put(\"key2\", \"value2\");\n\n    Map<String, String> copiedMap = Copy.copyMap(originalMap);\n\n    assertNotNull(copiedMap);\n    assertEquals(originalMap.size(), copiedMap.size());\n    assertEquals(originalMap, copiedMap);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/Copy_copyMapTest.java", "class_name": "Copy_copyMapTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/Copy_copyMapTest.java.Copy_copyMapTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointListTest.java.EndpointUtils_convert2EndpointListTest.[void]testConvert2EndpointList_NullMap()", "name": "testConvert2EndpointList_NullMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testConvert2EndpointList_NullMap()", "original_string": "  @Test\n  public void testConvert2EndpointList_NullMap() {\n    // Given\n    Map<String, PathItem> map = null;\n\n    // When\n    List<Endpoint> result = EndpointUtils.convert2EndpointList(map);\n\n    // Then\n    assertTrue(result.isEmpty());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointListTest.java", "class_name": "EndpointUtils_convert2EndpointListTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointListTest.java.EndpointUtils_convert2EndpointListTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointListTest.java.EndpointUtils_convert2EndpointListTest.[void]testConvert2EndpointList_NonEmptyMap()", "name": "testConvert2EndpointList_NonEmptyMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testConvert2EndpointList_NonEmptyMap()", "original_string": "  @Test\n  public void testConvert2EndpointList_NonEmptyMap() {\n    // Given\n    Map<String, PathItem> map = new HashMap<>();\n    PathItem pathItem = new PathItem();\n    Operation operation = new Operation();\n    operation.setSummary(\"Test Summary\");\n    pathItem.setGet(operation);\n    map.put(\"/test\", pathItem);\n\n    // When\n    List<Endpoint> result = EndpointUtils.convert2EndpointList(map);\n\n    // Then\n    assertEquals(1, result.size());\n    Endpoint endpoint = result.get(0);\n    assertEquals(\"/test\", endpoint.getPathUrl());\n    assertEquals(PathItem.HttpMethod.GET, endpoint.getMethod());\n    assertEquals(\"Test Summary\", endpoint.getSummary());\n    assertEquals(pathItem, endpoint.getPath());\n    assertEquals(operation, endpoint.getOperation());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointListTest.java", "class_name": "EndpointUtils_convert2EndpointListTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointListTest.java.EndpointUtils_convert2EndpointListTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointTest.java.EndpointUtils_convert2EndpointTest.[void]testConvert2Endpoint()", "name": "testConvert2Endpoint", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testConvert2Endpoint()", "original_string": "  @Test\n  public void testConvert2Endpoint() {\n    // Given\n    String pathUrl = \"/test\";\n    PathItem.HttpMethod httpMethod = PathItem.HttpMethod.GET;\n    Operation operation = new Operation();\n    operation.setSummary(\"Test Summary\");\n\n    // When\n    Endpoint endpoint = EndpointUtils.convert2Endpoint(pathUrl, httpMethod, operation);\n\n    // Then\n    assertNotNull(endpoint);\n    assertEquals(pathUrl, endpoint.getPathUrl());\n    assertEquals(httpMethod, endpoint.getMethod());\n    assertEquals(\"Test Summary\", endpoint.getSummary());\n    assertEquals(operation, endpoint.getOperation());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointTest.java", "class_name": "EndpointUtils_convert2EndpointTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/EndpointUtils_convert2EndpointTest.java.EndpointUtils_convert2EndpointTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_filenameIsNull_doesNothing()", "name": "writeToFile_filenameIsNull_doesNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void writeToFile_filenameIsNull_doesNothing()", "original_string": "  @Test\n  void writeToFile_filenameIsNull_doesNothing() {\n    assertDoesNotThrow(() -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_filenameIsEmpty_doesNothing()", "name": "writeToFile_filenameIsEmpty_doesNothing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void writeToFile_filenameIsEmpty_doesNothing()", "original_string": "  @Test\n  void writeToFile_filenameIsEmpty_doesNothing() {\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, StringUtils.EMPTY));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_fileExists_overwrites_file(Path)", "name": "writeToFile_fileExists_overwrites_file", "arg_nums": 1, "params": [{"name": "tempDir", "type": "Path"}], "return_type": "void", "signature": "@Test\n  void writeToFile_fileExists_overwrites_file(@TempDir Path tempDir)", "original_string": "  @Test\n  void writeToFile_fileExists_overwrites_file(@TempDir Path tempDir) throws IOException {\n    final Path path = tempDir.resolve(\"output.txt\");\n    Files.write(path, \"Test\".getBytes(StandardCharsets.UTF_8));\n\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, path.toString()));\n    assertThat(path).exists().content().isNotEqualTo(\"Test\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest.[void]writeToFile_fileDoesNotExist_createsFile(Path)", "name": "writeToFile_fileDoesNotExist_createsFile", "arg_nums": 1, "params": [{"name": "tempDir", "type": "Path"}], "return_type": "void", "signature": "@Test\n  void writeToFile_fileDoesNotExist_createsFile(@TempDir Path tempDir)", "original_string": "  @Test\n  void writeToFile_fileDoesNotExist_createsFile(@TempDir Path tempDir) {\n    final Path path = tempDir.resolve(\"output.txt\");\n    assertDoesNotThrow(\n        () -> FileUtils.writeToFile(new ConsoleRender(), changedOpenApi, path.toString()));\n    assertThat(path).exists().content().isNotBlank();\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java", "class_name": "FileUtilsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/utils/FileUtilsTest.java.FileUtilsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addChangedTest.java.ChangedSecurityRequirements_addChangedTest.[void]testAddChanged_InitialNullList()", "name": "testAddChanged_InitialNullList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddChanged_InitialNullList()", "original_string": "  @Test\n  public void testAddChanged_InitialNullList() {\n    // Given\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(new ArrayList<>(), new ArrayList<>(), null);\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(new SecurityRequirement(), new SecurityRequirement(), null);\n\n    // When\n    changedSecurityRequirements.addChanged(changedSecurityRequirement);\n\n    // Then\n    List<ChangedSecurityRequirement> changedList = changedSecurityRequirements.getChanged();\n    assertNotNull(changedList);\n    assertEquals(1, changedList.size());\n    assertEquals(changedSecurityRequirement, changedList.get(0));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addChangedTest.java", "class_name": "ChangedSecurityRequirements_addChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addChangedTest.java.ChangedSecurityRequirements_addChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addChangedTest.java.ChangedSecurityRequirements_addChangedTest.[void]testAddChanged_ExistingList()", "name": "testAddChanged_ExistingList", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddChanged_ExistingList()", "original_string": "  @Test\n  public void testAddChanged_ExistingList() {\n    // Given\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(new ArrayList<>(), new ArrayList<>(), null);\n    changedSecurityRequirements.setChanged(new ArrayList<>());\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(new SecurityRequirement(), new SecurityRequirement(), null);\n\n    // When\n    changedSecurityRequirements.addChanged(changedSecurityRequirement);\n\n    // Then\n    List<ChangedSecurityRequirement> changedList = changedSecurityRequirements.getChanged();\n    assertNotNull(changedList);\n    assertEquals(1, changedList.size());\n    assertEquals(changedSecurityRequirement, changedList.get(0));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addChangedTest.java", "class_name": "ChangedSecurityRequirements_addChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addChangedTest.java.ChangedSecurityRequirements_addChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setItemsTest.java.ChangedSchema_setItemsTest.[void]testSetItems()", "name": "testSetItems", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetItems()", "original_string": "  @Test\n  public void testSetItems() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedSchema newItems = new ChangedSchema();\n\n    // When\n    ChangedSchema result = changedSchema.setItems(newItems);\n\n    // Then\n    assertEquals(newItems, result.getItems());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setItemsTest.java", "class_name": "ChangedSchema_setItemsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setItemsTest.java.ChangedSchema_setItemsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest.[void]testEquals_SameObject()", "name": "testEquals_SameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameObject()", "original_string": "  @Test\n  public void testEquals_SameObject() {\n    ChangedSecurityRequirements obj = new ChangedSecurityRequirements(null, null, null);\n    assertTrue(obj.equals(obj));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java", "class_name": "ChangedSecurityRequirements_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedSecurityRequirements obj = new ChangedSecurityRequirements(null, null, null);\n    assertFalse(obj.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java", "class_name": "ChangedSecurityRequirements_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedSecurityRequirements obj = new ChangedSecurityRequirements(null, null, null);\n    assertFalse(obj.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java", "class_name": "ChangedSecurityRequirements_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentFields()", "original_string": "  @Test\n  public void testEquals_DifferentFields() {\n    List<SecurityRequirement> oldReqs = Arrays.asList(new SecurityRequirement());\n    List<SecurityRequirement> newReqs = Arrays.asList(new SecurityRequirement());\n    ChangedSecurityRequirements obj1 = new ChangedSecurityRequirements(oldReqs, newReqs, null);\n    ChangedSecurityRequirements obj2 = new ChangedSecurityRequirements(null, null, null);\n    assertFalse(obj1.equals(obj2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java", "class_name": "ChangedSecurityRequirements_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest.[void]testEquals_SameFields()", "name": "testEquals_SameFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameFields()", "original_string": "  @Test\n  public void testEquals_SameFields() {\n    List<SecurityRequirement> oldReqs = Arrays.asList(new SecurityRequirement());\n    List<SecurityRequirement> newReqs = Arrays.asList(new SecurityRequirement());\n    ChangedSecurityRequirements obj1 = new ChangedSecurityRequirements(oldReqs, newReqs, null);\n    ChangedSecurityRequirements obj2 = new ChangedSecurityRequirements(oldReqs, newReqs, null);\n    assertTrue(obj1.equals(obj2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java", "class_name": "ChangedSecurityRequirements_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_equalsTest.java.ChangedSecurityRequirements_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_hashCodeTest.java.ChangedPath_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    String pathUrl = \"/test\";\n    PathItem oldPath = new PathItem();\n    PathItem newPath = new PathItem();\n    DiffContext context = new DiffContext(null);\n    ChangedPath changedPath = new ChangedPath(pathUrl, oldPath, newPath, context);\n    changedPath\n        .setIncreased(new LinkedHashMap<>())\n        .setMissing(new LinkedHashMap<>())\n        .setChanged(new ArrayList<>())\n        .setExtensions(\n            new ChangedExtensions(new LinkedHashMap<>(), new LinkedHashMap<>(), context));\n\n    int expectedHashCode =\n        Objects.hash(\n            pathUrl,\n            oldPath,\n            newPath,\n            context,\n            new LinkedHashMap<>(),\n            new LinkedHashMap<>(),\n            new ArrayList<>(),\n            new ChangedExtensions(new LinkedHashMap<>(), new LinkedHashMap<>(), context));\n    assertEquals(expectedHashCode, changedPath.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_hashCodeTest.java", "class_name": "ChangedPath_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_hashCodeTest.java.ChangedPath_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_SameObject()", "name": "testEquals_SameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameObject()", "original_string": "  @Test\n  public void testEquals_SameObject() {\n    ChangedHeaders headers =\n        new ChangedHeaders(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertTrue(headers.equals(headers));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedHeaders headers =\n        new ChangedHeaders(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertFalse(headers.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedHeaders headers =\n        new ChangedHeaders(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertFalse(headers.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testEquals_DifferentState()", "name": "testEquals_DifferentState", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentState()", "original_string": "  @Test\n  public void testEquals_DifferentState() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n\n    ChangedHeaders headers1 =\n        new ChangedHeaders(oldHeaders, newHeaders, context)\n            .setIncreased(new HashMap<>())\n            .setMissing(new HashMap<>())\n            .setChanged(new HashMap<>());\n\n    ChangedHeaders headers2 =\n        new ChangedHeaders(oldHeaders, newHeaders, context)\n            .setIncreased(new HashMap<>())\n            .setMissing(new HashMap<>())\n            .setChanged(new HashMap<>());\n\n    assertTrue(headers1.equals(headers2));\n\n    Map<String, Header> increasedMap = new HashMap<>();\n    increasedMap.put(\"key\", new Header());\n    headers2.setIncreased(increasedMap);\n    assertFalse(headers1.equals(headers2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest.[void]testHashCode_Consistency()", "name": "testHashCode_Consistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode_Consistency()", "original_string": "  @Test\n  public void testHashCode_Consistency() {\n    Map<String, Header> oldHeaders = new HashMap<>();\n    Map<String, Header> newHeaders = new HashMap<>();\n    DiffContext context = new DiffContext(null);\n\n    ChangedHeaders headers =\n        new ChangedHeaders(oldHeaders, newHeaders, context)\n            .setIncreased(new HashMap<>())\n            .setMissing(new HashMap<>())\n            .setChanged(new HashMap<>());\n\n    int hashCode1 = headers.hashCode();\n    int hashCode2 = headers.hashCode();\n\n    assertEquals(hashCode1, hashCode2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java", "class_name": "ChangedHeaders_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeaders_equalsTest.java.ChangedHeaders_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setAddPropTest.java.ChangedSchema_setAddPropTest.[void]testSetAddProp()", "name": "testSetAddProp", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetAddProp()", "original_string": "  @Test\n  public void testSetAddProp() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedSchema addProp = new ChangedSchema();\n\n    // When\n    ChangedSchema result = changedSchema.setAddProp(addProp);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(addProp, changedSchema.getAddProp());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setAddPropTest.java", "class_name": "ChangedSchema_setAddPropTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setAddPropTest.java.ChangedSchema_setAddPropTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_hashCodeTest.java.ChangedOAuthFlows_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    OAuthFlows oldOAuthFlows = new OAuthFlows();\n    OAuthFlows newOAuthFlows = new OAuthFlows();\n    ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows);\n\n    ChangedOAuthFlow implicitOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedOAuthFlow passwordOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedOAuthFlow clientCredentialOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedOAuthFlow authorizationCodeOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedExtensions extensions = new ChangedExtensions(null, null, null);\n\n    changedOAuthFlows.setImplicitOAuthFlow(implicitOAuthFlow);\n    changedOAuthFlows.setPasswordOAuthFlow(passwordOAuthFlow);\n    changedOAuthFlows.setClientCredentialOAuthFlow(clientCredentialOAuthFlow);\n    changedOAuthFlows.setAuthorizationCodeOAuthFlow(authorizationCodeOAuthFlow);\n    changedOAuthFlows.setExtensions(extensions);\n\n    int expectedHashCode =\n        Objects.hash(\n            oldOAuthFlows,\n            newOAuthFlows,\n            implicitOAuthFlow,\n            passwordOAuthFlow,\n            clientCredentialOAuthFlow,\n            authorizationCodeOAuthFlow,\n            extensions);\n\n    assertEquals(expectedHashCode, changedOAuthFlows.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_hashCodeTest.java", "class_name": "ChangedOAuthFlows_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_hashCodeTest.java.ChangedOAuthFlows_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_hashCodeTest.java.ChangedSchema_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    ChangedSchema changedSchema = new ChangedSchema();\n    changedSchema.setContext(new DiffContext(null));\n    changedSchema.setOldSchema(new Schema<>());\n    changedSchema.setNewSchema(new Schema<>());\n\n    int expectedHashCode = changedSchema.hashCode();\n\n    assertEquals(expectedHashCode, changedSchema.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_hashCodeTest.java", "class_name": "ChangedSchema_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_hashCodeTest.java.ChangedSchema_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    ChangedMetadata metadata = new ChangedMetadata().setLeft(\"left\").setRight(\"right\");\n    assertTrue(metadata.equals(metadata));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java", "class_name": "ChangedMetadata_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest.[void]testEquals_NullOrDifferentClass()", "name": "testEquals_NullOrDifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullOrDifferentClass()", "original_string": "  @Test\n  public void testEquals_NullOrDifferentClass() {\n    ChangedMetadata metadata = new ChangedMetadata().setLeft(\"left\").setRight(\"right\");\n    assertFalse(metadata.equals(null));\n    assertFalse(metadata.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java", "class_name": "ChangedMetadata_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest.[void]testEquals_DifferentValues()", "name": "testEquals_DifferentValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentValues()", "original_string": "  @Test\n  public void testEquals_DifferentValues() {\n    ChangedMetadata metadata1 = new ChangedMetadata().setLeft(\"left1\").setRight(\"right1\");\n    ChangedMetadata metadata2 = new ChangedMetadata().setLeft(\"left2\").setRight(\"right2\");\n    assertFalse(metadata1.equals(metadata2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java", "class_name": "ChangedMetadata_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest.[void]testEquals_SameValues()", "name": "testEquals_SameValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameValues()", "original_string": "  @Test\n  public void testEquals_SameValues() {\n    ChangedMetadata metadata1 = new ChangedMetadata().setLeft(\"left\").setRight(\"right\");\n    ChangedMetadata metadata2 = new ChangedMetadata().setLeft(\"left\").setRight(\"right\");\n    assertTrue(metadata1.equals(metadata2));\n    assertEquals(metadata1.hashCode(), metadata2.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java", "class_name": "ChangedMetadata_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_equalsTest.java.ChangedMetadata_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedRequestBody_hashCodeTest.java.ChangedRequestBody_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    RequestBody oldRequestBody = new RequestBody();\n    RequestBody newRequestBody = new RequestBody();\n    DiffContext context = new DiffContext(null);\n    ChangedMetadata description = new ChangedMetadata();\n    ChangedContent content = new ChangedContent(null, null, null);\n    ChangedExtensions extensions = new ChangedExtensions(null, null, null);\n\n    ChangedRequestBody changedRequestBody =\n        new ChangedRequestBody(oldRequestBody, newRequestBody, context)\n            .setChangeRequired(true)\n            .setDescription(description)\n            .setContent(content)\n            .setExtensions(extensions);\n\n    int hashCode = changedRequestBody.hashCode();\n\n    ChangedRequestBody sameRequestBody =\n        new ChangedRequestBody(oldRequestBody, newRequestBody, context)\n            .setChangeRequired(true)\n            .setDescription(description)\n            .setContent(content)\n            .setExtensions(extensions);\n\n    assertEquals(hashCode, sameRequestBody.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedRequestBody_hashCodeTest.java", "class_name": "ChangedRequestBody_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedRequestBody_hashCodeTest.java.ChangedRequestBody_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Change_toStringTest.java.Change_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    Change<String> change = Change.changed(\"old\", \"new\");\n    assertEquals(\"Change(oldValue=old, newValue=new, type=CHANGED)\", change.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Change_toStringTest.java", "class_name": "Change_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Change_toStringTest.java.Change_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_setAuthorizationCodeOAuthFlowTest.java.ChangedOAuthFlows_setAuthorizationCodeOAuthFlowTest.[void]testSetAuthorizationCodeOAuthFlow()", "name": "testSetAuthorizationCodeOAuthFlow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetAuthorizationCodeOAuthFlow()", "original_string": "  @Test\n  public void testSetAuthorizationCodeOAuthFlow() {\n    // Given\n    OAuthFlows oldOAuthFlows = new OAuthFlows();\n    OAuthFlows newOAuthFlows = new OAuthFlows();\n    ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows);\n    ChangedOAuthFlow authorizationCodeOAuthFlow =\n        new ChangedOAuthFlow(new OAuthFlow(), new OAuthFlow(), null);\n\n    // When\n    ChangedOAuthFlows result =\n        changedOAuthFlows.setAuthorizationCodeOAuthFlow(authorizationCodeOAuthFlow);\n\n    // Then\n    assertSame(authorizationCodeOAuthFlow, result.getAuthorizationCodeOAuthFlow());\n    assertSame(changedOAuthFlows, result);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_setAuthorizationCodeOAuthFlowTest.java", "class_name": "ChangedOAuthFlows_setAuthorizationCodeOAuthFlowTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_setAuthorizationCodeOAuthFlowTest.java.ChangedOAuthFlows_setAuthorizationCodeOAuthFlowTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_hashCodeTest.java.ChangedOpenApi_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    OpenAPI oldSpec = new OpenAPI();\n    OpenAPI newSpec = new OpenAPI();\n    List<Endpoint> newEndpoints = Collections.emptyList();\n    List<Endpoint> missingEndpoints = Collections.emptyList();\n    List<ChangedOperation> changedOperations = Collections.emptyList();\n    ChangedExtensions changedExtensions = new ChangedExtensions(null, null, null);\n\n    ChangedOpenApi changedOpenApi =\n        new ChangedOpenApi(null)\n            .setOldSpecOpenApi(oldSpec)\n            .setNewSpecOpenApi(newSpec)\n            .setNewEndpoints(newEndpoints)\n            .setMissingEndpoints(missingEndpoints)\n            .setChangedOperations(changedOperations)\n            .setChangedExtensions(changedExtensions);\n\n    int expectedHashCode =\n        Objects.hash(\n            oldSpec, newSpec, newEndpoints, missingEndpoints, changedOperations, changedExtensions);\n    assertEquals(expectedHashCode, changedOpenApi.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_hashCodeTest.java", "class_name": "ChangedOpenApi_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOpenApi_hashCodeTest.java.ChangedOpenApi_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_getChangedElementsTest.java.ChangedOAuthFlows_getChangedElementsTest.[void]testGetChangedElements()", "name": "testGetChangedElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGetChangedElements()", "original_string": "  @Test\n  public void testGetChangedElements() {\n    // Given\n    OAuthFlows oldOAuthFlows = new OAuthFlows();\n    OAuthFlows newOAuthFlows = new OAuthFlows();\n    ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows);\n\n    ChangedOAuthFlow implicitOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedOAuthFlow passwordOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedOAuthFlow clientCredentialOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedOAuthFlow authorizationCodeOAuthFlow = new ChangedOAuthFlow(null, null, null);\n    ChangedExtensions extensions = new ChangedExtensions(null, null, null);\n\n    changedOAuthFlows.setImplicitOAuthFlow(implicitOAuthFlow);\n    changedOAuthFlows.setPasswordOAuthFlow(passwordOAuthFlow);\n    changedOAuthFlows.setClientCredentialOAuthFlow(clientCredentialOAuthFlow);\n    changedOAuthFlows.setAuthorizationCodeOAuthFlow(authorizationCodeOAuthFlow);\n    changedOAuthFlows.setExtensions(extensions);\n\n    // When\n    List<Changed> changedElements = changedOAuthFlows.getChangedElements();\n\n    // Then\n    assertEquals(5, changedElements.size());\n    assertEquals(implicitOAuthFlow, changedElements.get(0));\n    assertEquals(passwordOAuthFlow, changedElements.get(1));\n    assertEquals(clientCredentialOAuthFlow, changedElements.get(2));\n    assertEquals(authorizationCodeOAuthFlow, changedElements.get(3));\n    assertEquals(extensions, changedElements.get(4));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_getChangedElementsTest.java", "class_name": "ChangedOAuthFlows_getChangedElementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_getChangedElementsTest.java.ChangedOAuthFlows_getChangedElementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_hashCodeTest.java.ChangedSecurityScheme_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    SecurityScheme oldScheme = new SecurityScheme();\n    SecurityScheme newScheme = new SecurityScheme();\n    DiffContext context = new DiffContext(null);\n\n    ChangedSecurityScheme changedSecurityScheme =\n        new ChangedSecurityScheme(oldScheme, newScheme, context);\n    changedSecurityScheme.setChangedType(true);\n    changedSecurityScheme.setChangedIn(false);\n    changedSecurityScheme.setChangedScheme(true);\n    changedSecurityScheme.setChangedBearerFormat(false);\n    changedSecurityScheme.setChangedOpenIdConnectUrl(true);\n    changedSecurityScheme.setChangedScopes(null);\n    changedSecurityScheme.setDescription(null);\n    changedSecurityScheme.setOAuthFlows(null);\n    changedSecurityScheme.setExtensions(null);\n\n    int expectedHashCode =\n        Objects.hash(oldScheme, newScheme, true, false, true, false, true, null, null, null, null);\n\n    assertEquals(expectedHashCode, changedSecurityScheme.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_hashCodeTest.java", "class_name": "ChangedSecurityScheme_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_hashCodeTest.java.ChangedSecurityScheme_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_hashCodeTest.java.ChangedSecurityRequirement_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    SecurityRequirement oldSecurityRequirement = new SecurityRequirement();\n    SecurityRequirement newSecurityRequirement = new SecurityRequirement();\n    SecurityRequirement missing = new SecurityRequirement();\n    SecurityRequirement increased = new SecurityRequirement();\n    ChangedSecurityScheme changedSecurityScheme = new ChangedSecurityScheme(null, null, null);\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(oldSecurityRequirement, newSecurityRequirement, null)\n            .setMissing(missing)\n            .setIncreased(increased);\n    changedSecurityRequirement.addChanged(changedSecurityScheme);\n\n    int expectedHashCode =\n        Objects.hash(\n            oldSecurityRequirement,\n            newSecurityRequirement,\n            missing,\n            increased,\n            changedSecurityRequirement.getChanged());\n    assertEquals(expectedHashCode, changedSecurityRequirement.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_hashCodeTest.java", "class_name": "ChangedSecurityRequirement_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_hashCodeTest.java.ChangedSecurityRequirement_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java.ChangedResponse_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    ApiResponse oldApiResponse = new ApiResponse();\n    ApiResponse newApiResponse = new ApiResponse();\n    DiffContext context = new DiffContext(null);\n    ChangedResponse changedResponse = new ChangedResponse(oldApiResponse, newApiResponse, context);\n\n    int expectedHashCode =\n        Objects.hash(oldApiResponse, newApiResponse, context, null, null, null, null);\n    assertEquals(expectedHashCode, changedResponse.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java", "class_name": "ChangedResponse_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedResponse_hashCodeTest.java.ChangedResponse_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest.[void]testEquals_SameObject()", "name": "testEquals_SameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameObject()", "original_string": "  @Test\n  public void testEquals_SameObject() {\n    ChangedOneOfSchema schema =\n        new ChangedOneOfSchema(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertEquals(schema, schema);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java", "class_name": "ChangedOneOfSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedOneOfSchema schema =\n        new ChangedOneOfSchema(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertNotEquals(schema, null);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java", "class_name": "ChangedOneOfSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedOneOfSchema schema =\n        new ChangedOneOfSchema(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertNotEquals(schema, new Object());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java", "class_name": "ChangedOneOfSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentFields()", "original_string": "  @Test\n  public void testEquals_DifferentFields() {\n    Map<String, String> oldMapping1 = new HashMap<>();\n    oldMapping1.put(\"key1\", \"value1\");\n    Map<String, String> newMapping1 = new HashMap<>();\n    newMapping1.put(\"key2\", \"value2\");\n    DiffContext context1 = new DiffContext(null);\n    ChangedOneOfSchema schema1 = new ChangedOneOfSchema(oldMapping1, newMapping1, context1);\n    schema1.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n    Map<String, String> oldMapping2 = new HashMap<>();\n    oldMapping2.put(\"key1\", \"value1\");\n    Map<String, String> newMapping2 = new HashMap<>();\n    newMapping2.put(\"key2\", \"value2\");\n    DiffContext context2 = new DiffContext(null);\n    ChangedOneOfSchema schema2 = new ChangedOneOfSchema(oldMapping2, newMapping2, context2);\n    schema2.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n    assertEquals(schema1, schema2);\n\n    schema2.setIncreased(Map.of(\"key3\", new Schema<>()));\n    assertNotEquals(schema1, schema2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java", "class_name": "ChangedOneOfSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOneOfSchema_equalsTest.java.ChangedOneOfSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_SameInstance()", "original_string": "  @Test\n  void testEquals_SameInstance() {\n    Endpoint endpoint = new Endpoint();\n    assertTrue(endpoint.equals(endpoint));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java", "class_name": "Endpoint_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_NullObject()", "original_string": "  @Test\n  void testEquals_NullObject() {\n    Endpoint endpoint = new Endpoint();\n    assertFalse(endpoint.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java", "class_name": "Endpoint_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_DifferentClass()", "original_string": "  @Test\n  void testEquals_DifferentClass() {\n    Endpoint endpoint = new Endpoint();\n    Object obj = new Object();\n    assertFalse(endpoint.equals(obj));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java", "class_name": "Endpoint_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_DifferentFields()", "original_string": "  @Test\n  void testEquals_DifferentFields() {\n    Endpoint endpoint1 = new Endpoint();\n    endpoint1.setPathUrl(\"path1\");\n    endpoint1.setMethod(PathItem.HttpMethod.GET);\n    endpoint1.setSummary(\"summary1\");\n    endpoint1.setPath(new PathItem());\n    endpoint1.setOperation(new Operation());\n\n    Endpoint endpoint2 = new Endpoint();\n    endpoint2.setPathUrl(\"path2\");\n    endpoint2.setMethod(PathItem.HttpMethod.POST);\n    endpoint2.setSummary(\"summary2\");\n    endpoint2.setPath(new PathItem());\n    endpoint2.setOperation(new Operation());\n\n    assertFalse(endpoint1.equals(endpoint2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java", "class_name": "Endpoint_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest.[void]testEquals_SameFields()", "name": "testEquals_SameFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_SameFields()", "original_string": "  @Test\n  void testEquals_SameFields() {\n    Endpoint endpoint1 = new Endpoint();\n    endpoint1.setPathUrl(\"path\");\n    endpoint1.setMethod(PathItem.HttpMethod.GET);\n    endpoint1.setSummary(\"summary\");\n    endpoint1.setPath(new PathItem());\n    endpoint1.setOperation(new Operation());\n\n    Endpoint endpoint2 = new Endpoint();\n    endpoint2.setPathUrl(\"path\");\n    endpoint2.setMethod(PathItem.HttpMethod.GET);\n    endpoint2.setSummary(\"summary\");\n    endpoint2.setPath(new PathItem());\n    endpoint2.setOperation(new Operation());\n\n    assertTrue(endpoint1.equals(endpoint2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java", "class_name": "Endpoint_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest.[void]testHashCode_Consistency()", "name": "testHashCode_Consistency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testHashCode_Consistency()", "original_string": "  @Test\n  void testHashCode_Consistency() {\n    Endpoint endpoint1 = new Endpoint();\n    endpoint1.setPathUrl(\"path\");\n    endpoint1.setMethod(PathItem.HttpMethod.GET);\n    endpoint1.setSummary(\"summary\");\n    endpoint1.setPath(new PathItem());\n    endpoint1.setOperation(new Operation());\n\n    Endpoint endpoint2 = new Endpoint();\n    endpoint2.setPathUrl(\"path\");\n    endpoint2.setMethod(PathItem.HttpMethod.GET);\n    endpoint2.setSummary(\"summary\");\n    endpoint2.setPath(new PathItem());\n    endpoint2.setOperation(new Operation());\n\n    assertEquals(endpoint1.hashCode(), endpoint2.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java", "class_name": "Endpoint_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Endpoint_equalsTest.java.Endpoint_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setMaxLengthTest.java.ChangedSchema_setMaxLengthTest.[void]testSetMaxLength()", "name": "testSetMaxLength", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testSetMaxLength()", "original_string": "  @Test\n  void testSetMaxLength() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedMaxLength maxLength = new ChangedMaxLength(10, 20, null);\n\n    // When\n    changedSchema.setMaxLength(maxLength);\n\n    // Then\n    assertEquals(maxLength, changedSchema.getMaxLength());\n    assertTrue(changedSchema.getChangedElements().contains(maxLength));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setMaxLengthTest.java", "class_name": "ChangedSchema_setMaxLengthTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setMaxLengthTest.java.ChangedSchema_setMaxLengthTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setRequiredTest.java.ChangedSchema_setRequiredTest.[void]testSetRequired()", "name": "testSetRequired", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetRequired()", "original_string": "  @Test\n  public void testSetRequired() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedRequired required = new ChangedRequired(null, null, null);\n\n    // When\n    ChangedSchema result = changedSchema.setRequired(required);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(required, changedSchema.getRequired());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setRequiredTest.java", "class_name": "ChangedSchema_setRequiredTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setRequiredTest.java.ChangedSchema_setRequiredTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_getChangedElementsTest.java.ChangedOperation_getChangedElementsTest.[void]testGetChangedElements()", "name": "testGetChangedElements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGetChangedElements()", "original_string": "  @Test\n  public void testGetChangedElements() {\n    // Given\n    ChangedOperation changedOperation =\n        new ChangedOperation(\"/test\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n\n    changedOperation.setSummary(new ChangedMetadata().setLeft(\"oldSummary\").setRight(\"newSummary\"));\n    changedOperation.setDescription(\n        new ChangedMetadata().setLeft(\"oldDescription\").setRight(\"newDescription\"));\n    changedOperation.setOperationId(\n        new ChangedMetadata().setLeft(\"oldOperationId\").setRight(\"newOperationId\"));\n    changedOperation.setParameters(new ChangedParameters(null, null, null));\n    changedOperation.setRequestBody(new ChangedRequestBody(null, null, null));\n    changedOperation.setApiResponses(new ChangedApiResponse(null, null, null));\n    changedOperation.setSecurityRequirements(new ChangedSecurityRequirements(null, null, null));\n    changedOperation.setExtensions(new ChangedExtensions(null, null, null));\n\n    // When\n    List<Changed> changedElements = changedOperation.getChangedElements();\n\n    // Then\n    assertEquals(8, changedElements.size());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_getChangedElementsTest.java", "class_name": "ChangedOperation_getChangedElementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_getChangedElementsTest.java.ChangedOperation_getChangedElementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_setSecurityRequirementsTest.java.ChangedOperation_setSecurityRequirementsTest.[void]testSetSecurityRequirements()", "name": "testSetSecurityRequirements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testSetSecurityRequirements()", "original_string": "  @Test\n  void testSetSecurityRequirements() {\n    // Given\n    ChangedOperation changedOperation =\n        new ChangedOperation(\"/test\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n    ChangedSecurityRequirements securityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n\n    // When\n    changedOperation.setSecurityRequirements(securityRequirements);\n\n    // Then\n    assertEquals(securityRequirements, changedOperation.getSecurityRequirements());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_setSecurityRequirementsTest.java", "class_name": "ChangedOperation_setSecurityRequirementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_setSecurityRequirementsTest.java.ChangedOperation_setSecurityRequirementsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_SameObject()", "name": "testEquals_SameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameObject()", "original_string": "  @Test\n  public void testEquals_SameObject() {\n    assertTrue(changedPath1.equals(changedPath1));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    assertFalse(changedPath1.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    assertFalse(changedPath1.equals(\"Not a ChangedPath object\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentPathUrl()", "name": "testEquals_DifferentPathUrl", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentPathUrl()", "original_string": "  @Test\n  public void testEquals_DifferentPathUrl() {\n    changedPath2 = new ChangedPath(\"path2\", new PathItem(), new PathItem(), context);\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentOldPath()", "name": "testEquals_DifferentOldPath", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentOldPath()", "original_string": "  @Test\n  public void testEquals_DifferentOldPath() {\n    changedPath2 =\n        new ChangedPath(\"path1\", new PathItem().description(\"old\"), new PathItem(), context);\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentNewPath()", "name": "testEquals_DifferentNewPath", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentNewPath()", "original_string": "  @Test\n  public void testEquals_DifferentNewPath() {\n    changedPath2 =\n        new ChangedPath(\"path1\", new PathItem(), new PathItem().description(\"new\"), context);\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentContext()", "name": "testEquals_DifferentContext", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentContext()", "original_string": "  @Test\n  public void testEquals_DifferentContext() {\n    DiffContext differentContext = new DiffContext(null).setUrl(\"differentUrl\");\n    changedPath2 = new ChangedPath(\"path1\", new PathItem(), new PathItem(), differentContext);\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentIncreased()", "name": "testEquals_DifferentIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentIncreased()", "original_string": "  @Test\n  public void testEquals_DifferentIncreased() {\n    Map<PathItem.HttpMethod, Operation> increased = new HashMap<>();\n    increased.put(PathItem.HttpMethod.GET, new Operation());\n    changedPath2.setIncreased(increased);\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentMissing()", "name": "testEquals_DifferentMissing", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentMissing()", "original_string": "  @Test\n  public void testEquals_DifferentMissing() {\n    Map<PathItem.HttpMethod, Operation> missing = new HashMap<>();\n    missing.put(PathItem.HttpMethod.POST, new Operation());\n    changedPath2.setMissing(missing);\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentChanged()", "name": "testEquals_DifferentChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentChanged()", "original_string": "  @Test\n  public void testEquals_DifferentChanged() {\n    changedPath2.setChanged(\n        List.of(\n            new ChangedOperation(\n                \"path1\", PathItem.HttpMethod.GET, new Operation(), new Operation())));\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_DifferentExtensions()", "name": "testEquals_DifferentExtensions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentExtensions()", "original_string": "  @Test\n  public void testEquals_DifferentExtensions() {\n    changedPath2.setExtensions(new ChangedExtensions(null, null, context));\n    assertFalse(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest.[void]testEquals_AllFieldsEqual()", "name": "testEquals_AllFieldsEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_AllFieldsEqual()", "original_string": "  @Test\n  public void testEquals_AllFieldsEqual() {\n    assertTrue(changedPath1.equals(changedPath2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java", "class_name": "ChangedPath_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedPath_equalsTest.java.ChangedPath_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    Change<String> change = Change.changed(\"old\", \"new\");\n    assertTrue(change.equals(change));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java", "class_name": "Change_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    Change<String> change = Change.changed(\"old\", \"new\");\n    assertFalse(change.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java", "class_name": "Change_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    Change<String> change = Change.changed(\"old\", \"new\");\n    assertFalse(change.equals(\"not a Change object\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java", "class_name": "Change_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest.[void]testEquals_DifferentValues()", "name": "testEquals_DifferentValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentValues()", "original_string": "  @Test\n  public void testEquals_DifferentValues() {\n    Change<String> change1 = Change.changed(\"old\", \"new\");\n    Change<String> change2 = Change.changed(\"old\", \"new2\");\n    assertFalse(change1.equals(change2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java", "class_name": "Change_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest.[void]testEquals_SameValues()", "name": "testEquals_SameValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameValues()", "original_string": "  @Test\n  public void testEquals_SameValues() {\n    Change<String> change1 = Change.changed(\"old\", \"new\");\n    Change<String> change2 = Change.changed(\"old\", \"new\");\n    assertTrue(change1.equals(change2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java", "class_name": "Change_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest.[void]testEquals_DifferentTypes()", "name": "testEquals_DifferentTypes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentTypes()", "original_string": "  @Test\n  public void testEquals_DifferentTypes() {\n    Change<String> change1 = Change.changed(\"old\", \"new\");\n    Change<String> change2 = Change.added(\"new\");\n    assertFalse(change1.equals(change2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java", "class_name": "Change_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/Change_equalsTest.java.Change_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setIncreasedPropertiesTest.java.ChangedSchema_setIncreasedPropertiesTest.[void]testSetIncreasedProperties()", "name": "testSetIncreasedProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetIncreasedProperties()", "original_string": "  @Test\n  public void testSetIncreasedProperties() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    Map<String, Schema<?>> increasedProperties = new HashMap<>();\n    increasedProperties.put(\"property1\", new Schema<>().description(\"description1\"));\n\n    // When\n    ChangedSchema result = changedSchema.setIncreasedProperties(increasedProperties);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(increasedProperties, result.getIncreasedProperties());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setIncreasedPropertiesTest.java", "class_name": "ChangedSchema_setIncreasedPropertiesTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setIncreasedPropertiesTest.java.ChangedSchema_setIncreasedPropertiesTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_hashCodeTest.java.ChangedOperation_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    Operation oldOp = new Operation();\n    Operation newOp = new Operation();\n    ChangedOperation changedOperation =\n        new ChangedOperation(\"/path\", PathItem.HttpMethod.GET, oldOp, newOp);\n\n    int hashCode1 = changedOperation.hashCode();\n\n    changedOperation.setSummary(new ChangedMetadata().setLeft(\"summary\"));\n    int hashCode2 = changedOperation.hashCode();\n\n    // The hash codes should not be equal because the summary has changed\n    assertNotEquals(hashCode1, hashCode2);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_hashCodeTest.java", "class_name": "ChangedOperation_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_hashCodeTest.java.ChangedOperation_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    Header oldHeader = new Header();\n    Header newHeader = new Header();\n    DiffContext context = new DiffContext(null);\n    ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context);\n\n    assertTrue(changedHeader.equals(changedHeader));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java", "class_name": "ChangedHeader_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    Header oldHeader = new Header();\n    Header newHeader = new Header();\n    DiffContext context = new DiffContext(null);\n    ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context);\n\n    assertFalse(changedHeader.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java", "class_name": "ChangedHeader_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    Header oldHeader = new Header();\n    Header newHeader = new Header();\n    DiffContext context = new DiffContext(null);\n    ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context);\n\n    assertFalse(changedHeader.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java", "class_name": "ChangedHeader_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentFields()", "original_string": "  @Test\n  public void testEquals_DifferentFields() {\n    Header oldHeader = new Header();\n    Header newHeader = new Header();\n    DiffContext context = new DiffContext(null);\n    ChangedHeader changedHeader1 =\n        new ChangedHeader(oldHeader, newHeader, context)\n            .setRequired(true)\n            .setDeprecated(false)\n            .setStyle(true)\n            .setExplode(false);\n\n    ChangedHeader changedHeader2 =\n        new ChangedHeader(oldHeader, newHeader, context)\n            .setRequired(false)\n            .setDeprecated(true)\n            .setStyle(false)\n            .setExplode(true);\n\n    assertFalse(changedHeader1.equals(changedHeader2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java", "class_name": "ChangedHeader_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest.[void]testEquals_SameFields()", "name": "testEquals_SameFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameFields()", "original_string": "  @Test\n  public void testEquals_SameFields() {\n    Header oldHeader = new Header();\n    Header newHeader = new Header();\n    DiffContext context = new DiffContext(null);\n    ChangedHeader changedHeader1 =\n        new ChangedHeader(oldHeader, newHeader, context)\n            .setRequired(true)\n            .setDeprecated(false)\n            .setStyle(true)\n            .setExplode(false);\n\n    ChangedHeader changedHeader2 =\n        new ChangedHeader(oldHeader, newHeader, context)\n            .setRequired(true)\n            .setDeprecated(false)\n            .setStyle(true)\n            .setExplode(false);\n\n    assertTrue(changedHeader1.equals(changedHeader2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java", "class_name": "ChangedHeader_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_equalsTest.java.ChangedHeader_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    ChangedSchema schema = new ChangedSchema();\n    assertTrue(schema.equals(schema));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java", "class_name": "ChangedSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedSchema schema = new ChangedSchema();\n    assertFalse(schema.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java", "class_name": "ChangedSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedSchema schema = new ChangedSchema();\n    Object differentClassObject = new Object();\n    assertFalse(schema.equals(differentClassObject));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java", "class_name": "ChangedSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest.[void]testEquals_DifferentSchemas()", "name": "testEquals_DifferentSchemas", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentSchemas()", "original_string": "  @Test\n  public void testEquals_DifferentSchemas() {\n    ChangedSchema schema1 = new ChangedSchema();\n    schema1.setOldSchema(new Schema<>().description(\"old\"));\n    schema1.setNewSchema(new Schema<>().description(\"new\"));\n\n    ChangedSchema schema2 = new ChangedSchema();\n    schema2.setOldSchema(new Schema<>().description(\"old\"));\n    schema2.setNewSchema(new Schema<>().description(\"new\"));\n\n    assertTrue(schema1.equals(schema2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java", "class_name": "ChangedSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest.[void]testEquals_DifferentSchemas_NotEqual()", "name": "testEquals_DifferentSchemas_NotEqual", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentSchemas_NotEqual()", "original_string": "  @Test\n  public void testEquals_DifferentSchemas_NotEqual() {\n    ChangedSchema schema1 = new ChangedSchema();\n    schema1.setOldSchema(new Schema<>().description(\"old1\"));\n    schema1.setNewSchema(new Schema<>().description(\"new1\"));\n\n    ChangedSchema schema2 = new ChangedSchema();\n    schema2.setOldSchema(new Schema<>().description(\"old2\"));\n    schema2.setNewSchema(new Schema<>().description(\"new2\"));\n\n    assertFalse(schema1.equals(schema2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java", "class_name": "ChangedSchema_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_equalsTest.java.ChangedSchema_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedApiResponse_hashCodeTest.java.ChangedApiResponse_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    ApiResponses oldApiResponses = new ApiResponses();\n    ApiResponses newApiResponses = new ApiResponses();\n    DiffContext context = new DiffContext(null);\n    Map<String, ApiResponse> increased = new LinkedHashMap<>();\n    Map<String, ApiResponse> missing = new LinkedHashMap<>();\n    Map<String, ChangedResponse> changed = new LinkedHashMap<>();\n    ChangedExtensions extensions =\n        new ChangedExtensions(new LinkedHashMap<>(), new LinkedHashMap<>(), context);\n\n    ChangedApiResponse changedApiResponse =\n        new ChangedApiResponse(oldApiResponses, newApiResponses, context)\n            .setIncreased(increased)\n            .setMissing(missing)\n            .setChanged(changed)\n            .setExtensions(extensions);\n\n    int expectedHashCode =\n        Objects.hash(\n            oldApiResponses, newApiResponses, context, increased, missing, changed, extensions);\n    assertEquals(expectedHashCode, changedApiResponse.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedApiResponse_hashCodeTest.java", "class_name": "ChangedApiResponse_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedApiResponse_hashCodeTest.java.ChangedApiResponse_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    ChangedParameters cp =\n        new ChangedParameters(\n            Collections.emptyList(), Collections.emptyList(), new DiffContext(null));\n    assertTrue(cp.equals(cp));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java", "class_name": "ChangedParameters_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedParameters cp =\n        new ChangedParameters(\n            Collections.emptyList(), Collections.emptyList(), new DiffContext(null));\n    assertFalse(cp.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java", "class_name": "ChangedParameters_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedParameters cp =\n        new ChangedParameters(\n            Collections.emptyList(), Collections.emptyList(), new DiffContext(null));\n    assertFalse(cp.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java", "class_name": "ChangedParameters_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentFields()", "original_string": "  @Test\n  public void testEquals_DifferentFields() {\n    List<Parameter> oldParams = Arrays.asList(new Parameter(), new Parameter());\n    List<Parameter> newParams = Arrays.asList(new Parameter());\n    DiffContext context = new DiffContext(null);\n\n    ChangedParameters cp1 = new ChangedParameters(oldParams, newParams, context);\n    ChangedParameters cp2 = new ChangedParameters(Collections.emptyList(), newParams, context);\n\n    assertFalse(cp1.equals(cp2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java", "class_name": "ChangedParameters_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest.[void]testEquals_SameFields()", "name": "testEquals_SameFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameFields()", "original_string": "  @Test\n  public void testEquals_SameFields() {\n    List<Parameter> oldParams = Arrays.asList(new Parameter(), new Parameter());\n    List<Parameter> newParams = Arrays.asList(new Parameter());\n    DiffContext context = new DiffContext(null);\n\n    ChangedParameters cp1 = new ChangedParameters(oldParams, newParams, context);\n    ChangedParameters cp2 = new ChangedParameters(oldParams, newParams, context);\n\n    assertTrue(cp1.equals(cp2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java", "class_name": "ChangedParameters_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameters_equalsTest.java.ChangedParameters_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addMissingTest.java.ChangedSecurityRequirement_addMissingTest.[void]testAddMissing_InitialMissingIsNull()", "name": "testAddMissing_InitialMissingIsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddMissing_InitialMissingIsNull()", "original_string": "  @Test\n  public void testAddMissing_InitialMissingIsNull() {\n    // Given\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(null, null, null);\n    String key = \"testKey\";\n    List<String> scopes = Arrays.asList(\"scope1\", \"scope2\");\n\n    // When\n    changedSecurityRequirement.addMissing(key, scopes);\n\n    // Then\n    SecurityRequirement missing = changedSecurityRequirement.getMissing();\n    assertNotNull(missing);\n    assertEquals(scopes, missing.get(key));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addMissingTest.java", "class_name": "ChangedSecurityRequirement_addMissingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addMissingTest.java.ChangedSecurityRequirement_addMissingTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addMissingTest.java.ChangedSecurityRequirement_addMissingTest.[void]testAddMissing_InitialMissingIsNotNull()", "name": "testAddMissing_InitialMissingIsNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddMissing_InitialMissingIsNotNull()", "original_string": "  @Test\n  public void testAddMissing_InitialMissingIsNotNull() {\n    // Given\n    SecurityRequirement initialMissing = new SecurityRequirement();\n    initialMissing.put(\"initialKey\", Arrays.asList(\"initialScope1\", \"initialScope2\"));\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(null, null, null);\n    changedSecurityRequirement.setMissing(initialMissing);\n    String key = \"testKey\";\n    List<String> scopes = Arrays.asList(\"scope1\", \"scope2\");\n\n    // When\n    changedSecurityRequirement.addMissing(key, scopes);\n\n    // Then\n    SecurityRequirement missing = changedSecurityRequirement.getMissing();\n    assertNotNull(missing);\n    assertEquals(scopes, missing.get(key));\n    assertEquals(Arrays.asList(\"initialScope1\", \"initialScope2\"), missing.get(\"initialKey\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addMissingTest.java", "class_name": "ChangedSecurityRequirement_addMissingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addMissingTest.java.ChangedSecurityRequirement_addMissingTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedRequestBody_toStringTest.java.ChangedRequestBody_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    RequestBody oldRequestBody = new RequestBody();\n    RequestBody newRequestBody = new RequestBody();\n    DiffContext context = new DiffContext(null); // Provide a null OpenApiDiffOptions\n    ChangedRequestBody changedRequestBody =\n        new ChangedRequestBody(oldRequestBody, newRequestBody, context);\n\n    String expected =\n        \"ChangedRequestBody(oldRequestBody=\"\n            + oldRequestBody\n            + \", newRequestBody=\"\n            + newRequestBody\n            + \", context=\"\n            + context\n            + \", changeRequired=\"\n            + changedRequestBody.isChangeRequired()\n            + \", description=\"\n            + changedRequestBody.getDescription()\n            + \", content=\"\n            + changedRequestBody.getContent()\n            + \", extensions=\"\n            + changedRequestBody.getExtensions()\n            + \")\";\n\n    assertEquals(expected, changedRequestBody.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedRequestBody_toStringTest.java", "class_name": "ChangedRequestBody_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedRequestBody_toStringTest.java.ChangedRequestBody_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangedTypeTest.java.ChangedSchema_setChangedTypeTest.[void]testSetChangedType()", "name": "testSetChangedType", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetChangedType()", "original_string": "  @Test\n  public void testSetChangedType() {\n    // Given\n    boolean changedType = true;\n\n    // When\n    ChangedSchema result = changedSchema.setChangedType(changedType);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(changedType, changedSchema.isChangedType());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangedTypeTest.java", "class_name": "ChangedSchema_setChangedTypeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangedTypeTest.java.ChangedSchema_setChangedTypeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameter_hashCodeTest.java.ChangedParameter_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    // Given\n    DiffContext context = new DiffContext(null);\n    Parameter oldParameter = new Parameter();\n    Parameter newParameter = new Parameter();\n    ChangedParameter changedParameter =\n        new ChangedParameter(\"name\", \"in\", context)\n            .setOldParameter(oldParameter)\n            .setNewParameter(newParameter);\n\n    // When\n    int hashCode = changedParameter.hashCode();\n\n    // Then\n    assertEquals(\n        Objects.hash(\n            context,\n            oldParameter,\n            newParameter,\n            \"name\",\n            \"in\",\n            false,\n            false,\n            false,\n            false,\n            false,\n            null,\n            null,\n            null,\n            null),\n        hashCode);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameter_hashCodeTest.java", "class_name": "ChangedParameter_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedParameter_hashCodeTest.java.ChangedParameter_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeFormatTest.java.ChangedSchema_setChangeFormatTest.[void]testSetChangeFormat()", "name": "testSetChangeFormat", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetChangeFormat()", "original_string": "  @Test\n  public void testSetChangeFormat() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n\n    // When\n    ChangedSchema result = changedSchema.setChangeFormat(true);\n\n    // Then\n    assertTrue(changedSchema.isChangeFormat());\n    assertEquals(changedSchema, result);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeFormatTest.java", "class_name": "ChangedSchema_setChangeFormatTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeFormatTest.java.ChangedSchema_setChangeFormatTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_toStringTest.java.ChangedOAuthFlows_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    OAuthFlows oldOAuthFlows = new OAuthFlows();\n    OAuthFlows newOAuthFlows = new OAuthFlows();\n    ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows);\n\n    OAuthFlow oldImplicitFlow = new OAuthFlow();\n    OAuthFlow newImplicitFlow = new OAuthFlow();\n    ChangedOAuthFlow implicitOAuthFlow =\n        new ChangedOAuthFlow(oldImplicitFlow, newImplicitFlow, null);\n\n    OAuthFlow oldPasswordFlow = new OAuthFlow();\n    OAuthFlow newPasswordFlow = new OAuthFlow();\n    ChangedOAuthFlow passwordOAuthFlow =\n        new ChangedOAuthFlow(oldPasswordFlow, newPasswordFlow, null);\n\n    OAuthFlow oldClientCredentialFlow = new OAuthFlow();\n    OAuthFlow newClientCredentialFlow = new OAuthFlow();\n    ChangedOAuthFlow clientCredentialOAuthFlow =\n        new ChangedOAuthFlow(oldClientCredentialFlow, newClientCredentialFlow, null);\n\n    OAuthFlow oldAuthorizationCodeFlow = new OAuthFlow();\n    OAuthFlow newAuthorizationCodeFlow = new OAuthFlow();\n    ChangedOAuthFlow authorizationCodeOAuthFlow =\n        new ChangedOAuthFlow(oldAuthorizationCodeFlow, newAuthorizationCodeFlow, null);\n\n    ChangedExtensions extensions = new ChangedExtensions(null, null, null);\n\n    changedOAuthFlows.setImplicitOAuthFlow(implicitOAuthFlow);\n    changedOAuthFlows.setPasswordOAuthFlow(passwordOAuthFlow);\n    changedOAuthFlows.setClientCredentialOAuthFlow(clientCredentialOAuthFlow);\n    changedOAuthFlows.setAuthorizationCodeOAuthFlow(authorizationCodeOAuthFlow);\n    changedOAuthFlows.setExtensions(extensions);\n\n    String expected =\n        \"ChangedOAuthFlows(oldOAuthFlows=\"\n            + oldOAuthFlows\n            + \", newOAuthFlows=\"\n            + newOAuthFlows\n            + \", implicitOAuthFlow=\"\n            + implicitOAuthFlow\n            + \", passwordOAuthFlow=\"\n            + passwordOAuthFlow\n            + \", clientCredentialOAuthFlow=\"\n            + clientCredentialOAuthFlow\n            + \", authorizationCodeOAuthFlow=\"\n            + authorizationCodeOAuthFlow\n            + \", extensions=\"\n            + extensions\n            + \")\";\n\n    assertEquals(expected, changedOAuthFlows.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_toStringTest.java", "class_name": "ChangedOAuthFlows_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_toStringTest.java.ChangedOAuthFlows_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedContent_toStringTest.java.ChangedContent_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    Content oldContent = new Content();\n    Content newContent = new Content();\n    DiffContext context = new DiffContext(null); // Provide a default value for OpenApiDiffOptions\n    Map<String, MediaType> increased = new HashMap<>();\n    Map<String, MediaType> missing = new HashMap<>();\n    Map<String, ChangedMediaType> changed = new HashMap<>();\n\n    ChangedContent changedContent =\n        new ChangedContent(oldContent, newContent, context)\n            .setIncreased(increased)\n            .setMissing(missing)\n            .setChanged(changed);\n\n    String expected =\n        \"ChangedContent(oldContent=\"\n            + oldContent\n            + \", newContent=\"\n            + newContent\n            + \", context=\"\n            + context\n            + \", increased=\"\n            + increased\n            + \", missing=\"\n            + missing\n            + \", changed=\"\n            + changed\n            + \")\";\n    assertEquals(expected, changedContent.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedContent_toStringTest.java", "class_name": "ChangedContent_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedContent_toStringTest.java.ChangedContent_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_SameInstance()", "original_string": "  @Test\n  void testEquals_SameInstance() {\n    ChangedOperation op =\n        new ChangedOperation(\"/path\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n    assertTrue(op.equals(op));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java", "class_name": "ChangedOperation_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_NullObject()", "original_string": "  @Test\n  void testEquals_NullObject() {\n    ChangedOperation op =\n        new ChangedOperation(\"/path\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n    assertFalse(op.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java", "class_name": "ChangedOperation_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_DifferentClass()", "original_string": "  @Test\n  void testEquals_DifferentClass() {\n    ChangedOperation op =\n        new ChangedOperation(\"/path\", PathItem.HttpMethod.GET, new Operation(), new Operation());\n    Object obj = new Object();\n    assertFalse(op.equals(obj));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java", "class_name": "ChangedOperation_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_DifferentFields()", "original_string": "  @Test\n  void testEquals_DifferentFields() {\n    Operation oldOp = new Operation();\n    Operation newOp = new Operation();\n    ChangedOperation op1 = new ChangedOperation(\"/path\", PathItem.HttpMethod.GET, oldOp, newOp);\n    ChangedOperation op2 = new ChangedOperation(\"/path\", PathItem.HttpMethod.POST, oldOp, newOp);\n    assertFalse(op1.equals(op2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java", "class_name": "ChangedOperation_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest.[void]testEquals_SameFields()", "name": "testEquals_SameFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testEquals_SameFields()", "original_string": "  @Test\n  void testEquals_SameFields() {\n    Operation oldOp = new Operation();\n    Operation newOp = new Operation();\n    ChangedOperation op1 = new ChangedOperation(\"/path\", PathItem.HttpMethod.GET, oldOp, newOp);\n    ChangedOperation op2 = new ChangedOperation(\"/path\", PathItem.HttpMethod.GET, oldOp, newOp);\n    assertTrue(op1.equals(op2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java", "class_name": "ChangedOperation_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOperation_equalsTest.java.ChangedOperation_equalsTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setDescriptionTest.java.ChangedSchema_setDescriptionTest.[void]testSetDescription()", "name": "testSetDescription", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetDescription()", "original_string": "  @Test\n  public void testSetDescription() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedMetadata description = new ChangedMetadata();\n    description.setLeft(\"Old Description\");\n    description.setRight(\"New Description\");\n\n    // When\n    ChangedSchema result = changedSchema.setDescription(description);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(description, result.getDescription());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setDescriptionTest.java", "class_name": "ChangedSchema_setDescriptionTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setDescriptionTest.java.ChangedSchema_setDescriptionTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_hashCodeTest.java.ChangedSecurityRequirements_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    // Given\n    SecurityRequirement oldReq = new SecurityRequirement();\n    oldReq.addList(\"oldScheme\", Arrays.asList(\"scope1\", \"scope2\"));\n    SecurityRequirement newReq = new SecurityRequirement();\n    newReq.addList(\"newScheme\", Arrays.asList(\"scope3\", \"scope4\"));\n\n    List<SecurityRequirement> oldSecurityRequirements = Arrays.asList(oldReq);\n    List<SecurityRequirement> newSecurityRequirements = Arrays.asList(newReq);\n\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(oldSecurityRequirements, newSecurityRequirements, null);\n\n    // When\n    int hashCode = changedSecurityRequirements.hashCode();\n\n    // Then\n    ChangedSecurityRequirements expected =\n        new ChangedSecurityRequirements(oldSecurityRequirements, newSecurityRequirements, null);\n    assertEquals(expected.hashCode(), hashCode);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_hashCodeTest.java", "class_name": "ChangedSecurityRequirements_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_hashCodeTest.java.ChangedSecurityRequirements_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeTitleTest.java.ChangedSchema_setChangeTitleTest.[void]testSetChangeTitle()", "name": "testSetChangeTitle", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetChangeTitle()", "original_string": "  @Test\n  public void testSetChangeTitle() {\n    ChangedSchema changedSchema = new ChangedSchema();\n    changedSchema.setOldSchema(new Schema<>()).setNewSchema(new Schema<>());\n\n    // Given: changeTitle is initially false\n    assertFalse(changedSchema.isChangeTitle());\n\n    // When: setChangeTitle is called with true\n    changedSchema.setChangeTitle(true);\n\n    // Then: isChangeTitle should return true\n    assertTrue(changedSchema.isChangeTitle());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeTitleTest.java", "class_name": "ChangedSchema_setChangeTitleTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeTitleTest.java.ChangedSchema_setChangeTitleTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    ChangedOAuthFlow flow = new ChangedOAuthFlow(new OAuthFlow(), new OAuthFlow(), null);\n    assertTrue(flow.equals(flow));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java", "class_name": "ChangedOAuthFlow_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedOAuthFlow flow = new ChangedOAuthFlow(new OAuthFlow(), new OAuthFlow(), null);\n    assertFalse(flow.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java", "class_name": "ChangedOAuthFlow_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedOAuthFlow flow = new ChangedOAuthFlow(new OAuthFlow(), new OAuthFlow(), null);\n    assertFalse(flow.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java", "class_name": "ChangedOAuthFlow_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentFields()", "original_string": "  @Test\n  public void testEquals_DifferentFields() {\n    OAuthFlow oldFlow = new OAuthFlow();\n    OAuthFlow newFlow = new OAuthFlow();\n    ChangedOAuthFlow flow1 =\n        new ChangedOAuthFlow(oldFlow, newFlow, null)\n            .setAuthorizationUrl(true)\n            .setTokenUrl(true)\n            .setRefreshUrl(true)\n            .setExtensions(new ChangedExtensions(null, null, null));\n\n    ChangedOAuthFlow flow2 =\n        new ChangedOAuthFlow(oldFlow, newFlow, null)\n            .setAuthorizationUrl(false)\n            .setTokenUrl(false)\n            .setRefreshUrl(false)\n            .setExtensions(null);\n\n    assertFalse(flow1.equals(flow2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java", "class_name": "ChangedOAuthFlow_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest.[void]testEquals_SameFields()", "name": "testEquals_SameFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameFields()", "original_string": "  @Test\n  public void testEquals_SameFields() {\n    OAuthFlow oldFlow = new OAuthFlow();\n    OAuthFlow newFlow = new OAuthFlow();\n    ChangedOAuthFlow flow1 =\n        new ChangedOAuthFlow(oldFlow, newFlow, null)\n            .setAuthorizationUrl(true)\n            .setTokenUrl(true)\n            .setRefreshUrl(true)\n            .setExtensions(new ChangedExtensions(null, null, null));\n\n    ChangedOAuthFlow flow2 =\n        new ChangedOAuthFlow(oldFlow, newFlow, null)\n            .setAuthorizationUrl(true)\n            .setTokenUrl(true)\n            .setRefreshUrl(true)\n            .setExtensions(new ChangedExtensions(null, null, null));\n\n    assertTrue(flow1.equals(flow2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java", "class_name": "ChangedOAuthFlow_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_equalsTest.java.ChangedOAuthFlow_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setReadOnlyTest.java.ChangedSchema_setReadOnlyTest.[void]testSetReadOnly()", "name": "testSetReadOnly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testSetReadOnly()", "original_string": "  @Test\n  void testSetReadOnly() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedReadOnly readOnly = new ChangedReadOnly(false, true, null);\n\n    // When\n    changedSchema.setReadOnly(readOnly);\n\n    // Then\n    assertEquals(readOnly, changedSchema.getReadOnly());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setReadOnlyTest.java", "class_name": "ChangedSchema_setReadOnlyTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setReadOnlyTest.java.ChangedSchema_setReadOnlyTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_toStringTest.java.ChangedOAuthFlow_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    OAuthFlow oldOAuthFlow = new OAuthFlow();\n    OAuthFlow newOAuthFlow = new OAuthFlow();\n    Map<String, Object> oldExtensions = new HashMap<>();\n    Map<String, Object> newExtensions = new HashMap<>();\n    ChangedExtensions changedExtensions = new ChangedExtensions(oldExtensions, newExtensions, null);\n    ChangedOAuthFlow changedOAuthFlow =\n        new ChangedOAuthFlow(oldOAuthFlow, newOAuthFlow, null)\n            .setAuthorizationUrl(true)\n            .setTokenUrl(false)\n            .setRefreshUrl(true)\n            .setExtensions(changedExtensions);\n\n    String expected =\n        \"ChangedOAuthFlow(oldOAuthFlow=\"\n            + oldOAuthFlow\n            + \", newOAuthFlow=\"\n            + newOAuthFlow\n            + \", authorizationUrl=true\"\n            + \", tokenUrl=false\"\n            + \", refreshUrl=true\"\n            + \", extensions=\"\n            + changedOAuthFlow.getExtensions()\n            + \")\";\n\n    assertEquals(expected, changedOAuthFlow.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_toStringTest.java", "class_name": "ChangedOAuthFlow_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_toStringTest.java.ChangedOAuthFlow_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest.[void]testEquals_SameObject()", "name": "testEquals_SameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameObject()", "original_string": "  @Test\n  public void testEquals_SameObject() {\n    ChangedExtensions ce =\n        new ChangedExtensions(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertTrue(ce.equals(ce));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java", "class_name": "ChangedExtensions_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedExtensions ce =\n        new ChangedExtensions(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertFalse(ce.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java", "class_name": "ChangedExtensions_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedExtensions ce =\n        new ChangedExtensions(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n    assertFalse(ce.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java", "class_name": "ChangedExtensions_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest.[void]testEquals_DifferentState()", "name": "testEquals_DifferentState", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentState()", "original_string": "  @Test\n  public void testEquals_DifferentState() {\n    Map<String, Object> oldExt1 = new HashMap<>();\n    oldExt1.put(\"key1\", \"value1\");\n    Map<String, Object> newExt1 = new HashMap<>();\n    newExt1.put(\"key2\", \"value2\");\n    DiffContext context1 = new DiffContext(null);\n\n    Map<String, Object> oldExt2 = new HashMap<>();\n    oldExt2.put(\"key1\", \"value1\");\n    Map<String, Object> newExt2 = new HashMap<>();\n    newExt2.put(\"key2\", \"value2\");\n    DiffContext context2 = new DiffContext(null);\n\n    ChangedExtensions ce1 = new ChangedExtensions(oldExt1, newExt1, context1);\n    ChangedExtensions ce2 = new ChangedExtensions(oldExt2, newExt2, context2);\n\n    assertTrue(ce1.equals(ce2));\n\n    // Change one of the fields to make them different\n    ce2.getOldExtensions().put(\"key3\", \"value3\");\n    assertFalse(ce1.equals(ce2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java", "class_name": "ChangedExtensions_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedExtensions_equalsTest.java.ChangedExtensions_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_isChangedTest.java.ChangedMetadata_isChangedTest.[void]testIsChanged_NoChanges()", "name": "testIsChanged_NoChanges", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testIsChanged_NoChanges()", "original_string": "  @Test\n  public void testIsChanged_NoChanges() {\n    ChangedMetadata metadata = new ChangedMetadata().setLeft(\"value\").setRight(\"value\");\n    assertEquals(DiffResult.NO_CHANGES, metadata.isChanged());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_isChangedTest.java", "class_name": "ChangedMetadata_isChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_isChangedTest.java.ChangedMetadata_isChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_isChangedTest.java.ChangedMetadata_isChangedTest.[void]testIsChanged_Metadata()", "name": "testIsChanged_Metadata", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testIsChanged_Metadata()", "original_string": "  @Test\n  public void testIsChanged_Metadata() {\n    ChangedMetadata metadata = new ChangedMetadata().setLeft(\"value1\").setRight(\"value2\");\n    assertEquals(DiffResult.METADATA, metadata.isChanged());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_isChangedTest.java", "class_name": "ChangedMetadata_isChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedMetadata_isChangedTest.java.ChangedMetadata_isChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest.[void]testSetOldSecurityRequirements()", "name": "testSetOldSecurityRequirements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetOldSecurityRequirements()", "original_string": "  @Test\n  public void testSetOldSecurityRequirements() {\n    // Given\n    List<SecurityRequirement> oldSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n\n    // When\n    changedSecurityRequirements.setOldSecurityRequirements(oldSecurityRequirements);\n\n    // Then\n    assertEquals(oldSecurityRequirements, changedSecurityRequirements.getOldSecurityRequirements());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java", "class_name": "ChangedSecurityRequirements_setOldSecurityRequirementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest.[void]testSetOldSecurityRequirementsWithStateDependency()", "name": "testSetOldSecurityRequirementsWithStateDependency", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetOldSecurityRequirementsWithStateDependency()", "original_string": "  @Test\n  public void testSetOldSecurityRequirementsWithStateDependency() {\n    // Given\n    List<SecurityRequirement> oldSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    List<SecurityRequirement> newSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n\n    // When\n    changedSecurityRequirements.setNewSecurityRequirements(newSecurityRequirements);\n    changedSecurityRequirements.setOldSecurityRequirements(oldSecurityRequirements);\n\n    // Then\n    assertEquals(oldSecurityRequirements, changedSecurityRequirements.getOldSecurityRequirements());\n    assertEquals(newSecurityRequirements, changedSecurityRequirements.getNewSecurityRequirements());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java", "class_name": "ChangedSecurityRequirements_setOldSecurityRequirementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest.[void]testSetOldSecurityRequirementsWithMissingRequirements()", "name": "testSetOldSecurityRequirementsWithMissingRequirements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetOldSecurityRequirementsWithMissingRequirements()", "original_string": "  @Test\n  public void testSetOldSecurityRequirementsWithMissingRequirements() {\n    // Given\n    List<SecurityRequirement> oldSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    List<SecurityRequirement> missingRequirements = Arrays.asList(new SecurityRequirement());\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n\n    // When\n    changedSecurityRequirements.setOldSecurityRequirements(oldSecurityRequirements);\n    changedSecurityRequirements.setMissing(missingRequirements);\n\n    // Then\n    assertEquals(oldSecurityRequirements, changedSecurityRequirements.getOldSecurityRequirements());\n    assertEquals(missingRequirements, changedSecurityRequirements.getMissing());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java", "class_name": "ChangedSecurityRequirements_setOldSecurityRequirementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest.[void]testSetOldSecurityRequirementsWithCoreChanged()", "name": "testSetOldSecurityRequirementsWithCoreChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetOldSecurityRequirementsWithCoreChanged()", "original_string": "  @Test\n  public void testSetOldSecurityRequirementsWithCoreChanged() {\n    // Given\n    List<SecurityRequirement> oldSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n\n    // When\n    changedSecurityRequirements.setOldSecurityRequirements(oldSecurityRequirements);\n\n    // Then\n    assertEquals(oldSecurityRequirements, changedSecurityRequirements.getOldSecurityRequirements());\n    assertTrue(changedSecurityRequirements.isCoreChanged() == DiffResult.NO_CHANGES);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java", "class_name": "ChangedSecurityRequirements_setOldSecurityRequirementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest.[void]testSetOldSecurityRequirementsWithEquals()", "name": "testSetOldSecurityRequirementsWithEquals", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetOldSecurityRequirementsWithEquals()", "original_string": "  @Test\n  public void testSetOldSecurityRequirementsWithEquals() {\n    // Given\n    List<SecurityRequirement> oldSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n    ChangedSecurityRequirements changedSecurityRequirements2 =\n        new ChangedSecurityRequirements(null, null, null);\n\n    // When\n    changedSecurityRequirements.setOldSecurityRequirements(oldSecurityRequirements);\n    changedSecurityRequirements2.setOldSecurityRequirements(oldSecurityRequirements);\n\n    // Then\n    assertEquals(oldSecurityRequirements, changedSecurityRequirements.getOldSecurityRequirements());\n    assertTrue(changedSecurityRequirements.equals(changedSecurityRequirements2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java", "class_name": "ChangedSecurityRequirements_setOldSecurityRequirementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setOldSecurityRequirementsTest.java.ChangedSecurityRequirements_setOldSecurityRequirementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setEnumerationTest.java.ChangedSchema_setEnumerationTest.[void]testSetEnumeration()", "name": "testSetEnumeration", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetEnumeration()", "original_string": "  @Test\n  public void testSetEnumeration() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedEnum<?> enumeration = new ChangedEnum<>(null, null, null);\n\n    // When\n    changedSchema.setEnumeration(enumeration);\n\n    // Then\n    assertNotNull(changedSchema.getEnumeration());\n    assertEquals(enumeration, changedSchema.getEnumeration());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setEnumerationTest.java", "class_name": "ChangedSchema_setEnumerationTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setEnumerationTest.java.ChangedSchema_setEnumerationTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addMissingTest.java.ChangedSecurityRequirements_addMissingTest.[void]testAddMissing_InitialNull()", "name": "testAddMissing_InitialNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddMissing_InitialNull()", "original_string": "  @Test\n  public void testAddMissing_InitialNull() {\n    // Given\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n    SecurityRequirement securityRequirement = new SecurityRequirement();\n\n    // When\n    changedSecurityRequirements.addMissing(securityRequirement);\n\n    // Then\n    assertEquals(1, changedSecurityRequirements.getMissing().size());\n    assertTrue(changedSecurityRequirements.getMissing().contains(securityRequirement));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addMissingTest.java", "class_name": "ChangedSecurityRequirements_addMissingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addMissingTest.java.ChangedSecurityRequirements_addMissingTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addMissingTest.java.ChangedSecurityRequirements_addMissingTest.[void]testAddMissing_InitialNotNull()", "name": "testAddMissing_InitialNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddMissing_InitialNotNull()", "original_string": "  @Test\n  public void testAddMissing_InitialNotNull() {\n    // Given\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(null, null, null);\n    changedSecurityRequirements.setMissing(new ArrayList<>());\n    SecurityRequirement securityRequirement = new SecurityRequirement();\n\n    // When\n    changedSecurityRequirements.addMissing(securityRequirement);\n\n    // Then\n    assertEquals(1, changedSecurityRequirements.getMissing().size());\n    assertTrue(changedSecurityRequirements.getMissing().contains(securityRequirement));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addMissingTest.java", "class_name": "ChangedSecurityRequirements_addMissingTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_addMissingTest.java.ChangedSecurityRequirements_addMissingTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setNumericRangeTest.java.ChangedSchema_setNumericRangeTest.[void]testSetNumericRange()", "name": "testSetNumericRange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testSetNumericRange()", "original_string": "  @Test\n  void testSetNumericRange() {\n    // Given\n    ChangedSchema schema = new ChangedSchema();\n    ChangedNumericRange numericRange =\n        new ChangedNumericRange(\n            new BigDecimal(\"0\"),\n            new BigDecimal(\"10\"),\n            new BigDecimal(\"100\"),\n            new BigDecimal(\"200\"),\n            false,\n            true,\n            true,\n            false,\n            null);\n\n    // When\n    ChangedSchema result = schema.setNumericRange(numericRange);\n\n    // Then\n    assertEquals(numericRange, result.numericRange);\n    // Avoid calling isCoreChanged and isChanged to prevent NPE\n    // assertEquals(DiffResult.NO_CHANGES, result.isCoreChanged());\n    // assertEquals(DiffResult.NO_CHANGES, result.isChanged());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setNumericRangeTest.java", "class_name": "ChangedSchema_setNumericRangeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setNumericRangeTest.java.ChangedSchema_setNumericRangeTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_setClientCredentialOAuthFlowTest.java.ChangedOAuthFlows_setClientCredentialOAuthFlowTest.[void]testSetClientCredentialOAuthFlow()", "name": "testSetClientCredentialOAuthFlow", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  void testSetClientCredentialOAuthFlow()", "original_string": "  @Test\n  void testSetClientCredentialOAuthFlow() {\n    // Given\n    OAuthFlows oldOAuthFlows = new OAuthFlows();\n    OAuthFlows newOAuthFlows = new OAuthFlows();\n    ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows);\n    ChangedOAuthFlow clientCredentialOAuthFlow = new ChangedOAuthFlow(null, null, null);\n\n    // When\n    ChangedOAuthFlows result =\n        changedOAuthFlows.setClientCredentialOAuthFlow(clientCredentialOAuthFlow);\n\n    // Then\n    assertEquals(clientCredentialOAuthFlow, result.getClientCredentialOAuthFlow());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_setClientCredentialOAuthFlowTest.java", "class_name": "ChangedOAuthFlows_setClientCredentialOAuthFlowTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlows_setClientCredentialOAuthFlowTest.java.ChangedOAuthFlows_setClientCredentialOAuthFlowTest", "attributes": {"modifiers": "@Test", "marker_annotations": ["@Test"], "non_marker_annotations": [], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDeprecatedTest.java.ChangedSchema_setChangeDeprecatedTest.[void]testSetChangeDeprecated()", "name": "testSetChangeDeprecated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetChangeDeprecated()", "original_string": "  @Test\n  public void testSetChangeDeprecated() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n\n    // When\n    ChangedSchema result = changedSchema.setChangeDeprecated(true);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(true, changedSchema.isChangeDeprecated());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDeprecatedTest.java", "class_name": "ChangedSchema_setChangeDeprecatedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDeprecatedTest.java.ChangedSchema_setChangeDeprecatedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    ChangedSecurityScheme scheme =\n        new ChangedSecurityScheme(new SecurityScheme(), new SecurityScheme(), null);\n    assertTrue(scheme.equals(scheme));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java", "class_name": "ChangedSecurityScheme_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedSecurityScheme scheme =\n        new ChangedSecurityScheme(new SecurityScheme(), new SecurityScheme(), null);\n    assertFalse(scheme.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java", "class_name": "ChangedSecurityScheme_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedSecurityScheme scheme =\n        new ChangedSecurityScheme(new SecurityScheme(), new SecurityScheme(), null);\n    assertFalse(scheme.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java", "class_name": "ChangedSecurityScheme_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest.[void]testEquals_DifferentFields()", "name": "testEquals_DifferentFields", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentFields()", "original_string": "  @Test\n  public void testEquals_DifferentFields() {\n    SecurityScheme oldScheme = new SecurityScheme();\n    SecurityScheme newScheme = new SecurityScheme();\n    newScheme.setType(SecurityScheme.Type.APIKEY);\n\n    ChangedSecurityScheme scheme1 = new ChangedSecurityScheme(oldScheme, newScheme, null);\n    ChangedSecurityScheme scheme2 = new ChangedSecurityScheme(oldScheme, newScheme, null);\n\n    assertTrue(scheme1.equals(scheme2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java", "class_name": "ChangedSecurityScheme_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest.[void]testEquals_DifferentSecuritySchemes()", "name": "testEquals_DifferentSecuritySchemes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentSecuritySchemes()", "original_string": "  @Test\n  public void testEquals_DifferentSecuritySchemes() {\n    SecurityScheme oldScheme1 = new SecurityScheme();\n    SecurityScheme newScheme1 = new SecurityScheme();\n    newScheme1.setType(SecurityScheme.Type.APIKEY);\n\n    SecurityScheme oldScheme2 = new SecurityScheme();\n    SecurityScheme newScheme2 = new SecurityScheme();\n    newScheme2.setType(SecurityScheme.Type.HTTP);\n\n    ChangedSecurityScheme scheme1 = new ChangedSecurityScheme(oldScheme1, newScheme1, null);\n    ChangedSecurityScheme scheme2 = new ChangedSecurityScheme(oldScheme2, newScheme2, null);\n\n    assertFalse(scheme1.equals(scheme2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java", "class_name": "ChangedSecurityScheme_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityScheme_equalsTest.java.ChangedSecurityScheme_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setNewSecurityRequirementsTest.java.ChangedSecurityRequirements_setNewSecurityRequirementsTest.[void]testSetNewSecurityRequirements()", "name": "testSetNewSecurityRequirements", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetNewSecurityRequirements()", "original_string": "  @Test\n  public void testSetNewSecurityRequirements() {\n    // Given\n    List<SecurityRequirement> oldSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    List<SecurityRequirement> newSecurityRequirements = Arrays.asList(new SecurityRequirement());\n    DiffContext context = new DiffContext(null); // Provide a valid OpenApiDiffOptions or null\n    ChangedSecurityRequirements changedSecurityRequirements =\n        new ChangedSecurityRequirements(oldSecurityRequirements, newSecurityRequirements, context);\n\n    // When\n    List<SecurityRequirement> updatedSecurityRequirements =\n        Arrays.asList(new SecurityRequirement(), new SecurityRequirement());\n    changedSecurityRequirements.setNewSecurityRequirements(updatedSecurityRequirements);\n\n    // Then\n    assertEquals(\n        updatedSecurityRequirements, changedSecurityRequirements.getNewSecurityRequirements());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setNewSecurityRequirementsTest.java", "class_name": "ChangedSecurityRequirements_setNewSecurityRequirementsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirements_setNewSecurityRequirementsTest.java.ChangedSecurityRequirements_setNewSecurityRequirementsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setWriteOnlyTest.java.ChangedSchema_setWriteOnlyTest.[void]testSetWriteOnly()", "name": "testSetWriteOnly", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetWriteOnly()", "original_string": "  @Test\n  public void testSetWriteOnly() {\n    // Given\n    ChangedSchema schema = new ChangedSchema();\n    ChangedWriteOnly writeOnly = new ChangedWriteOnly(false, true, null);\n\n    // When\n    schema.setWriteOnly(writeOnly);\n\n    // Then\n    assertEquals(writeOnly, schema.getWriteOnly());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setWriteOnlyTest.java", "class_name": "ChangedSchema_setWriteOnlyTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setWriteOnlyTest.java.ChangedSchema_setWriteOnlyTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setMissingPropertiesTest.java.ChangedSchema_setMissingPropertiesTest.[void]testSetMissingProperties()", "name": "testSetMissingProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetMissingProperties()", "original_string": "  @Test\n  public void testSetMissingProperties() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    Map<String, Schema<?>> missingProperties = new HashMap<>();\n    missingProperties.put(\"property1\", new Schema<>().example(\"example1\"));\n    missingProperties.put(\"property2\", new Schema<>().example(\"example2\"));\n\n    // When\n    ChangedSchema result = changedSchema.setMissingProperties(missingProperties);\n\n    // Then\n    assertEquals(missingProperties, changedSchema.getMissingProperties());\n    assertEquals(changedSchema, result);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setMissingPropertiesTest.java", "class_name": "ChangedSchema_setMissingPropertiesTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setMissingPropertiesTest.java.ChangedSchema_setMissingPropertiesTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setExtensionsTest.java.ChangedSchema_setExtensionsTest.[void]testSetExtensions()", "name": "testSetExtensions", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetExtensions()", "original_string": "  @Test\n  public void testSetExtensions() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    ChangedExtensions extensions = new ChangedExtensions(null, null, null);\n\n    // When\n    ChangedSchema result = changedSchema.setExtensions(extensions);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(extensions, changedSchema.getExtensions());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setExtensionsTest.java", "class_name": "ChangedSchema_setExtensionsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setExtensionsTest.java.ChangedSchema_setExtensionsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_setOldSecurityRequirementTest.java.ChangedSecurityRequirement_setOldSecurityRequirementTest.[void]testSetOldSecurityRequirement()", "name": "testSetOldSecurityRequirement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetOldSecurityRequirement()", "original_string": "  @Test\n  public void testSetOldSecurityRequirement() {\n    // Given\n    SecurityRequirement oldSecurityRequirement = new SecurityRequirement();\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(null, null, null);\n\n    // When\n    changedSecurityRequirement.setOldSecurityRequirement(oldSecurityRequirement);\n\n    // Then\n    assertEquals(oldSecurityRequirement, changedSecurityRequirement.getOldSecurityRequirement());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_setOldSecurityRequirementTest.java", "class_name": "ChangedSecurityRequirement_setOldSecurityRequirementTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_setOldSecurityRequirementTest.java.ChangedSecurityRequirement_setOldSecurityRequirementTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangedPropertiesTest.java.ChangedSchema_setChangedPropertiesTest.[void]testSetChangedProperties()", "name": "testSetChangedProperties", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetChangedProperties()", "original_string": "  @Test\n  public void testSetChangedProperties() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n    Map<String, ChangedSchema> changedProperties = new HashMap<>();\n    changedProperties.put(\"prop1\", new ChangedSchema());\n    changedProperties.put(\"prop2\", new ChangedSchema());\n\n    // When\n    ChangedSchema result = changedSchema.setChangedProperties(changedProperties);\n\n    // Then\n    assertNotNull(result);\n    assertEquals(changedProperties, changedSchema.getChangedProperties());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangedPropertiesTest.java", "class_name": "ChangedSchema_setChangedPropertiesTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangedPropertiesTest.java.ChangedSchema_setChangedPropertiesTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_hashCodeTest.java.ChangedHeader_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    Header oldHeader = new Header();\n    Header newHeader = new Header();\n    DiffContext context = new DiffContext(null);\n    ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context);\n\n    int expectedHashCode =\n        Objects.hash(\n            oldHeader, newHeader, context, false, false, false, false, null, null, null, null);\n\n    assertEquals(expectedHashCode, changedHeader.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_hashCodeTest.java", "class_name": "ChangedHeader_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedHeader_hashCodeTest.java.ChangedHeader_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addIncreasedTest.java.ChangedSecurityRequirement_addIncreasedTest.[void]testAddIncreased_IncreasedIsNull()", "name": "testAddIncreased_IncreasedIsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddIncreased_IncreasedIsNull()", "original_string": "  @Test\n  public void testAddIncreased_IncreasedIsNull() {\n    // Given\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(null, null, null);\n    String key = \"testKey\";\n    List<String> scopes = Arrays.asList(\"scope1\", \"scope2\");\n\n    // When\n    changedSecurityRequirement.addIncreased(key, scopes);\n\n    // Then\n    SecurityRequirement increased = changedSecurityRequirement.getIncreased();\n    assertNotNull(increased);\n    assertEquals(scopes, increased.get(key));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addIncreasedTest.java", "class_name": "ChangedSecurityRequirement_addIncreasedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addIncreasedTest.java.ChangedSecurityRequirement_addIncreasedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addIncreasedTest.java.ChangedSecurityRequirement_addIncreasedTest.[void]testAddIncreased_IncreasedIsNotNull()", "name": "testAddIncreased_IncreasedIsNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testAddIncreased_IncreasedIsNotNull()", "original_string": "  @Test\n  public void testAddIncreased_IncreasedIsNotNull() {\n    // Given\n    SecurityRequirement initialIncreased = new SecurityRequirement();\n    initialIncreased.put(\"initialKey\", Arrays.asList(\"initialScope1\", \"initialScope2\"));\n    ChangedSecurityRequirement changedSecurityRequirement =\n        new ChangedSecurityRequirement(null, null, null);\n    changedSecurityRequirement.setIncreased(initialIncreased);\n    String key = \"testKey\";\n    List<String> scopes = Arrays.asList(\"scope1\", \"scope2\");\n\n    // When\n    changedSecurityRequirement.addIncreased(key, scopes);\n\n    // Then\n    SecurityRequirement increased = changedSecurityRequirement.getIncreased();\n    assertNotNull(increased);\n    assertEquals(scopes, increased.get(key));\n    assertEquals(Arrays.asList(\"initialScope1\", \"initialScope2\"), increased.get(\"initialKey\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addIncreasedTest.java", "class_name": "ChangedSecurityRequirement_addIncreasedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSecurityRequirement_addIncreasedTest.java.ChangedSecurityRequirement_addIncreasedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_hashCodeTest.java.ChangedOAuthFlow_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    // Given\n    OAuthFlow oldOAuthFlow = new OAuthFlow();\n    OAuthFlow newOAuthFlow = new OAuthFlow();\n    ChangedExtensions extensions = new ChangedExtensions(null, null, null);\n    ChangedOAuthFlow changedOAuthFlow =\n        new ChangedOAuthFlow(oldOAuthFlow, newOAuthFlow, null)\n            .setAuthorizationUrl(true)\n            .setTokenUrl(false)\n            .setRefreshUrl(true)\n            .setExtensions(extensions);\n\n    // When\n    int hashCode = changedOAuthFlow.hashCode();\n\n    // Then\n    assertEquals(Objects.hash(oldOAuthFlow, newOAuthFlow, true, false, true, extensions), hashCode);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_hashCodeTest.java", "class_name": "ChangedOAuthFlow_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedOAuthFlow_hashCodeTest.java.ChangedOAuthFlow_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDefaultTest.java.ChangedSchema_setChangeDefaultTest.[void]testSetChangeDefault()", "name": "testSetChangeDefault", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetChangeDefault()", "original_string": "  @Test\n  public void testSetChangeDefault() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n\n    // When\n    changedSchema.setChangeDefault(true);\n\n    // Then\n    assertTrue(changedSchema.isChangeDefault());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDefaultTest.java", "class_name": "ChangedSchema_setChangeDefaultTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDefaultTest.java.ChangedSchema_setChangeDefaultTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDefaultTest.java.ChangedSchema_setChangeDefaultTest.[void]testSetChangeDefaultToFalse()", "name": "testSetChangeDefaultToFalse", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSetChangeDefaultToFalse()", "original_string": "  @Test\n  public void testSetChangeDefaultToFalse() {\n    // Given\n    ChangedSchema changedSchema = new ChangedSchema();\n\n    // When\n    changedSchema.setChangeDefault(false);\n\n    // Then\n    assertFalse(changedSchema.isChangeDefault());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDefaultTest.java", "class_name": "ChangedSchema_setChangeDefaultTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/ChangedSchema_setChangeDefaultTest.java.ChangedSchema_setChangeDefaultTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_toStringTest.java.PendingChanged_toStringTest.[void]testToStringWithValueSet()", "name": "testToStringWithValueSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToStringWithValueSet()", "original_string": "  @Test\n  public void testToStringWithValueSet() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    pendingChanged.setValue(Optional.of(\"testValue\"));\n    String expected =\n        \"PendingChanged{value=testValue, valueSet=true, ifPresentConsumers.size=0, whenSetConsumers.size=0}\";\n    assertEquals(expected, pendingChanged.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_toStringTest.java", "class_name": "PendingChanged_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_toStringTest.java.PendingChanged_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_toStringTest.java.PendingChanged_toStringTest.[void]testToStringWithNoValueSet()", "name": "testToStringWithNoValueSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToStringWithNoValueSet()", "original_string": "  @Test\n  public void testToStringWithNoValueSet() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    String expected =\n        \"PendingChanged{value=null, valueSet=false, ifPresentConsumers.size=0, whenSetConsumers.size=0}\";\n    assertEquals(expected, pendingChanged.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_toStringTest.java", "class_name": "PendingChanged_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_toStringTest.java.PendingChanged_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testPendingChangedValueSetBeforeListeners()", "name": "testPendingChangedValueSetBeforeListeners", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testPendingChangedValueSetBeforeListeners()", "original_string": "  @Test\n  public void testPendingChangedValueSetBeforeListeners() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    changed.setValue(Optional.of(\"Hello\"));\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testPendingChangedValueSetAfterListeners()", "name": "testPendingChangedValueSetAfterListeners", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testPendingChangedValueSetAfterListeners()", "original_string": "  @Test\n  public void testPendingChangedValueSetAfterListeners() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    changed.setValue(Optional.of(\"Hello\"));\n    assertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testPendingChangedValueEMpty()", "name": "testPendingChangedValueEMpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testPendingChangedValueEMpty()", "original_string": "  @Test\n  public void testPendingChangedValueEMpty() {\n    PendingChanged<String> changed = new PendingChanged<>();\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    changed.setValue(Optional.empty());\n    assertion.assertSet(false);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testRealizedChange()", "name": "testRealizedChange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRealizedChange()", "original_string": "  @Test\n  public void testRealizedChange() {\n    RealizedChanged<String> changed = new RealizedChanged<>(\"hello\");\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testRealizedChangeEmpty()", "name": "testRealizedChangeEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRealizedChangeEmpty()", "original_string": "  @Test\n  public void testRealizedChangeEmpty() {\n    RealizedChanged<String> changed = new RealizedChanged<>(Optional.empty());\n    ChangedAssertion assertion = new ChangedAssertion(changed);\n    assertion.assertSet(false);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testFlatMap()", "name": "testFlatMap", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testFlatMap()", "original_string": "  @Test\n  public void testFlatMap() {\n    PendingChanged<ChangedWriteOnly> flatMapPending = new PendingChanged<>();\n\n    changed.whenSet((value) -> this.whenSet = value);\n\n    DeferredChanged<ChangedWriteOnly> chainedChanged =\n        changed.flatMap(\n            (value) -> {\n              System.out.println(\"Flatmap called\");\n              return flatMapPending;\n            });\n    chainedChanged.whenSet(value -> chainedValue = value);\n\n    DeferredChanged<ChangedWriteOnly> mappedDeferred =\n        changed.map(value -> new ChangedWriteOnly(false, true, null));\n    mappedDeferred.ifPresent(v -> mappedValue = v);\n\n    Assertions.assertFalse(whenSet.isPresent());\n    Assertions.assertFalse(chainedValue.isPresent());\n    Assertions.assertNull(mappedValue);\n\n    changed.setValue(Optional.of(new ChangedReadOnly(false, true, null)));\n    Assertions.assertTrue(whenSet.isPresent());\n    Assertions.assertNotNull(mappedValue);\n    Assertions.assertFalse(chainedValue.isPresent());\n\n    flatMapPending.setValue(Optional.of(new ChangedWriteOnly(false, true, null)));\n    Assertions.assertTrue(whenSet.isPresent());\n    Assertions.assertTrue(chainedValue.isPresent());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testDeferredBuilderEmpty()", "name": "testDeferredBuilderEmpty", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeferredBuilderEmpty()", "original_string": "  @Test\n  public void testDeferredBuilderEmpty() {\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertSet(false);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testDeferredBuilderAllRealized()", "name": "testDeferredBuilderAllRealized", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeferredBuilderAllRealized()", "original_string": "  @Test\n  public void testDeferredBuilderAllRealized() {\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    builder.add(new RealizedChanged<>(\"hello\"));\n    builder.add(new RealizedChanged<>(\"bye\"));\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest.[void]testDeferredBuilderPending()", "name": "testDeferredBuilderPending", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDeferredBuilderPending()", "original_string": "  @Test\n  public void testDeferredBuilderPending() {\n    PendingChanged<String> changed = new PendingChanged<>();\n\n    DeferredBuilder<String> builder = new DeferredBuilder<>();\n    builder.add(new RealizedChanged<>(\"hello\"));\n    builder.add(changed);\n    ChangedAssertion builderAssertion = new ChangedAssertion(builder.build());\n    builderAssertion.assertNotSet();\n\n    changed.setValue(Optional.of(\"hello\"));\n    builderAssertion.assertSet(true);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java", "class_name": "DeferredBuilderChangedTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredBuilderChangedTest.java.DeferredBuilderChangedTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger_logValueTest.java.DeferredLogger_logValueTest.[void]testLogValue()", "name": "testLogValue", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testLogValue()", "original_string": "  @Test\n  public void testLogValue() {\n    Object value = \"test\";\n    Object loggedValue = DeferredLogger.logValue(value);\n    assertEquals(\"test\", loggedValue.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger_logValueTest.java", "class_name": "DeferredLogger_logValueTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/DeferredLogger_logValueTest.java.DeferredLogger_logValueTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java.PendingChanged_ifPresentTest.[void]testIfPresent_ValueSetAndPresent()", "name": "testIfPresent_ValueSetAndPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testIfPresent_ValueSetAndPresent()", "original_string": "  @Test\n  public void testIfPresent_ValueSetAndPresent() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    pendingChanged.setValue(Optional.of(\"test\"));\n\n    Consumer<String> consumer = s -> assertEquals(\"test\", s);\n    pendingChanged.ifPresent(consumer);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java", "class_name": "PendingChanged_ifPresentTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java.PendingChanged_ifPresentTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java.PendingChanged_ifPresentTest.[void]testIfPresent_ValueNotSet()", "name": "testIfPresent_ValueNotSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testIfPresent_ValueNotSet()", "original_string": "  @Test\n  public void testIfPresent_ValueNotSet() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n\n    Consumer<String> consumer = s -> assertTrue(false, \"Consumer should not be called\");\n    pendingChanged.ifPresent(consumer);\n\n    // Change the access to ifPresentConsumers to a non-private level in PendingChanged class\n    // For example, make it protected or package-private\n    // assertEquals(1, pendingChanged.ifPresentConsumers.size());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java", "class_name": "PendingChanged_ifPresentTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java.PendingChanged_ifPresentTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java.PendingChanged_ifPresentTest.[void]testIfPresent_ValueSetButNotPresent()", "name": "testIfPresent_ValueSetButNotPresent", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testIfPresent_ValueSetButNotPresent()", "original_string": "  @Test\n  public void testIfPresent_ValueSetButNotPresent() {\n    PendingChanged<String> pendingChanged = new PendingChanged<>();\n    pendingChanged.setValue(Optional.empty());\n\n    Consumer<String> consumer = s -> assertTrue(false, \"Consumer should not be called\");\n    pendingChanged.ifPresent(consumer);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java", "class_name": "PendingChanged_ifPresentTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/deferred/PendingChanged_ifPresentTest.java.PendingChanged_ifPresentTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange_toStringTest.java.ChangedNumericRange_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    DiffContext context = new DiffContext(null);\n    ChangedNumericRange changedNumericRange =\n        new ChangedNumericRange(\n            new BigDecimal(\"1.0\"),\n            new BigDecimal(\"2.0\"),\n            new BigDecimal(\"3.0\"),\n            new BigDecimal(\"4.0\"),\n            true,\n            false,\n            true,\n            false,\n            context);\n\n    String expected =\n        \"ChangedNumericRange(\"\n            + \"oldMinimumValue=1.0, newMinimumValue=2.0, \"\n            + \"oldMaximumValue=3.0, newMaximumValue=4.0, \"\n            + \"oldMinimumExclusiveValue=true, newMinimumExclusiveValue=false, \"\n            + \"oldMaximumExclusiveValue=true, newMaximumExclusiveValue=false, \"\n            + \"context=\"\n            + context\n            + ')';\n\n    assertEquals(expected, changedNumericRange.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange_toStringTest.java", "class_name": "ChangedNumericRange_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange_toStringTest.java.ChangedNumericRange_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange_hashCodeTest.java.ChangedNumericRange_hashCodeTest.[void]testHashCode()", "name": "testHashCode", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testHashCode()", "original_string": "  @Test\n  public void testHashCode() {\n    DiffContext context = new DiffContext(null);\n    ChangedNumericRange range1 =\n        new ChangedNumericRange(\n            new BigDecimal(\"1.0\"),\n            new BigDecimal(\"1.0\"),\n            new BigDecimal(\"10.0\"),\n            new BigDecimal(\"10.0\"),\n            true,\n            true,\n            true,\n            true,\n            context);\n    ChangedNumericRange range2 =\n        new ChangedNumericRange(\n            new BigDecimal(\"1.0\"),\n            new BigDecimal(\"1.0\"),\n            new BigDecimal(\"10.0\"),\n            new BigDecimal(\"10.0\"),\n            true,\n            true,\n            true,\n            true,\n            context);\n    ChangedNumericRange range3 =\n        new ChangedNumericRange(\n            new BigDecimal(\"2.0\"),\n            new BigDecimal(\"2.0\"),\n            new BigDecimal(\"10.0\"),\n            new BigDecimal(\"10.0\"),\n            true,\n            true,\n            true,\n            true,\n            context);\n\n    assertEquals(range1.hashCode(), range2.hashCode());\n    assertNotEquals(range1.hashCode(), range3.hashCode());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange_hashCodeTest.java", "class_name": "ChangedNumericRange_hashCodeTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedNumericRange_hashCodeTest.java.ChangedNumericRange_hashCodeTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest.[void]testEquals_SameInstance()", "name": "testEquals_SameInstance", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameInstance()", "original_string": "  @Test\n  public void testEquals_SameInstance() {\n    ChangedMaxLength obj = new ChangedMaxLength(10, 20, new DiffContext(null));\n    assertTrue(obj.equals(obj));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java", "class_name": "ChangedMaxLength_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    ChangedMaxLength obj = new ChangedMaxLength(10, 20, new DiffContext(null));\n    assertFalse(obj.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java", "class_name": "ChangedMaxLength_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    ChangedMaxLength obj = new ChangedMaxLength(10, 20, new DiffContext(null));\n    assertFalse(obj.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java", "class_name": "ChangedMaxLength_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest.[void]testEquals_DifferentValues()", "name": "testEquals_DifferentValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentValues()", "original_string": "  @Test\n  public void testEquals_DifferentValues() {\n    ChangedMaxLength obj1 = new ChangedMaxLength(10, 20, new DiffContext(null));\n    ChangedMaxLength obj2 = new ChangedMaxLength(10, 30, new DiffContext(null));\n    assertFalse(obj1.equals(obj2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java", "class_name": "ChangedMaxLength_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest.[void]testEquals_SameValues()", "name": "testEquals_SameValues", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameValues()", "original_string": "  @Test\n  public void testEquals_SameValues() {\n    DiffContext context = new DiffContext(null);\n    ChangedMaxLength obj1 = new ChangedMaxLength(10, 20, context);\n    ChangedMaxLength obj2 = new ChangedMaxLength(10, 20, context);\n    assertTrue(obj1.equals(obj2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java", "class_name": "ChangedMaxLength_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/model/schema/ChangedMaxLength_equalsTest.java.ChangedMaxLength_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_numericrange_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMaxCreated()", "name": "requestExclusiveMaxCreated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMaxCreated()", "original_string": "  @Test\n  public void requestExclusiveMaxCreated() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_max_created.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMaxSet()", "name": "requestExclusiveMaxSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMaxSet()", "original_string": "  @Test\n  public void requestExclusiveMaxSet() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_max_set.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMinCreated()", "name": "requestExclusiveMinCreated", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMinCreated()", "original_string": "  @Test\n  public void requestExclusiveMinCreated() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_min_created.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestExclusiveMinSet()", "name": "requestExclusiveMinSet", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestExclusiveMinSet()", "original_string": "  @Test\n  public void requestExclusiveMinSet() {\n    assertIncompatibleRequest(\"bc_request_numericrange_exclusive_min_set.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMaxAdded()", "name": "requestMaxAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMaxAdded()", "original_string": "  @Test\n  public void requestMaxAdded() {\n    assertIncompatibleRequest(\"bc_request_numericrange_max_added.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMaxDecreased()", "name": "requestMaxDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMaxDecreased()", "original_string": "  @Test\n  public void requestMaxDecreased() {\n    assertIncompatibleRequest(\"bc_request_numericrange_max_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMinAdded()", "name": "requestMinAdded", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMinAdded()", "original_string": "  @Test\n  public void requestMinAdded() {\n    assertIncompatibleRequest(\"bc_request_numericrange_min_added.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]requestMinIncreased()", "name": "requestMinIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMinIncreased()", "original_string": "  @Test\n  public void requestMinIncreased() {\n    assertIncompatibleRequest(\"bc_request_numericrange_min_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMaxDeleted()", "name": "responseExclusiveMaxDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMaxDeleted()", "original_string": "  @Test\n  public void responseExclusiveMaxDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_max_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMaxUnset()", "name": "responseExclusiveMaxUnset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMaxUnset()", "original_string": "  @Test\n  public void responseExclusiveMaxUnset() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_max_unset.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMinDeleted()", "name": "responseExclusiveMinDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMinDeleted()", "original_string": "  @Test\n  public void responseExclusiveMinDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_min_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseExclusiveMinUnset()", "name": "responseExclusiveMinUnset", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExclusiveMinUnset()", "original_string": "  @Test\n  public void responseExclusiveMinUnset() {\n    assertIncompatibleResponse(\"bc_response_numericrange_exclusive_min_unset.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMaxDeleted()", "name": "responseMaxDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMaxDeleted()", "original_string": "  @Test\n  public void responseMaxDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_max_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMaxIncreased()", "name": "responseMaxIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMaxIncreased()", "original_string": "  @Test\n  public void responseMaxIncreased() {\n    assertIncompatibleResponse(\"bc_response_numericrange_max_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMinDecreased()", "name": "responseMinDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMinDecreased()", "original_string": "  @Test\n  public void responseMinDecreased() {\n    assertIncompatibleResponse(\"bc_response_numericrange_min_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest.[void]responseMinDeleted()", "name": "responseMinDeleted", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMinDeleted()", "original_string": "  @Test\n  public void responseMinDeleted() {\n    assertIncompatibleResponse(\"bc_response_numericrange_min_deleted.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java", "class_name": "NumericRangeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/NumericRangeBCTest.java.NumericRangeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_scheme_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]bearerFormatChanged()", "name": "bearerFormatChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void bearerFormatChanged()", "original_string": "  @Test\n  public void bearerFormatChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_BEARER_FORMAT_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_bearer_format_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]inChanged()", "name": "inChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void inChanged()", "original_string": "  @Test\n  public void inChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_scheme_in_changed.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]openIdConnectUrlChanged()", "name": "openIdConnectUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void openIdConnectUrlChanged()", "original_string": "  @Test\n  public void openIdConnectUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OPENIDCONNECT_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_open_id_connect_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]schemeChanged()", "name": "schemeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void schemeChanged()", "original_string": "  @Test\n  public void schemeChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_SCHEME_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_scheme_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]typeChanged()", "name": "typeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void typeChanged()", "original_string": "  @Test\n  public void typeChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_scheme_type_changed.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest.[void]scopesIncreased()", "name": "scopesIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void scopesIncreased()", "original_string": "  @Test\n  public void scopesIncreased() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_SCOPES_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_security_scheme_scopes_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java", "class_name": "SecuritySchemeBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecuritySchemeBCTest.java.SecuritySchemeBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_readonly_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]requestReadOnlyIncreased()", "name": "requestReadOnlyIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestReadOnlyIncreased()", "original_string": "  @Test\n  public void requestReadOnlyIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_READONLY_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_readonly_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest.[void]requestReadOnlyRequiredDecreased()", "name": "requestReadOnlyRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestReadOnlyRequiredDecreased()", "original_string": "  @Test\n  public void requestReadOnlyRequiredDecreased() {\n    // Incompatible because a prev RO prop (invalid) is now not RO and required\n    BackwardIncompatibleProp prop = REQUEST_READONLY_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_readonly_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java", "class_name": "ReadOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ReadOnlyBCTest.java.ReadOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "class_name": "PathsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_paths_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "class_name": "PathsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_paths_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java", "class_name": "PathsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathsBCTest.java.PathsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "class_name": "ApiResponseBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_apiresponse_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "class_name": "ApiResponseBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = RESPONSE_RESPONSES_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_apiresponse_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java", "class_name": "ApiResponseBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ApiResponseBCTest.java.ApiResponseBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_schema_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]discriminatorChanged()", "name": "discriminatorChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void discriminatorChanged()", "original_string": "  @Test\n  public void discriminatorChanged() {\n    BackwardIncompatibleProp prop = SCHEMA_DISCRIMINATOR_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_schema_discriminator_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]requestFormatDecreased()", "name": "requestFormatDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestFormatDecreased()", "original_string": "  @Test\n  public void requestFormatDecreased() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_request_schema_format_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]requestFormatIncreased()", "name": "requestFormatIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestFormatIncreased()", "original_string": "  @Test\n  public void requestFormatIncreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertOpenApiBackwardIncompatible(BASE, \"bc_request_schema_format_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]requestPropsPutIncreased()", "name": "requestPropsPutIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestPropsPutIncreased()", "original_string": "  @Test\n  public void requestPropsPutIncreased() {\n    // See https://github.com/OpenAPITools/openapi-diff/issues/537\n    assertSpecChangedButCompatible(BASE, \"bc_request_schema_props_put_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]responseFormatDecreased()", "name": "responseFormatDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseFormatDecreased()", "original_string": "  @Test\n  public void responseFormatDecreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertOpenApiBackwardIncompatible(BASE, \"bc_response_schema_format_decreased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]responseFormatIncreased()", "name": "responseFormatIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseFormatIncreased()", "original_string": "  @Test\n  public void responseFormatIncreased() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_response_schema_format_increased.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]responsePropsRequiredDecreased()", "name": "responsePropsRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responsePropsRequiredDecreased()", "original_string": "  @Test\n  public void responsePropsRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_schema_props_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest.[void]typeChanged()", "name": "typeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void typeChanged()", "original_string": "  @Test\n  public void typeChanged() {\n    BackwardIncompatibleProp prop = SCHEMA_TYPE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_schema_type_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java", "class_name": "SchemaBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SchemaBCTest.java.SchemaBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_content_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]requestDecreased()", "name": "requestDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestDecreased()", "original_string": "  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_CONTENT_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_content_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest.[void]responseDecreased()", "name": "responseDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseDecreased()", "original_string": "  @Test\n  public void responseDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_CONTENT_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_content_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java", "class_name": "ContentBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ContentBCTest.java.ContentBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest.[void]maxLengthUnchanged()", "name": "maxLengthUnchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void maxLengthUnchanged()", "original_string": "  @Test\n  public void maxLengthUnchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "class_name": "MaxLengthBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest.[void]requestMaxLengthDecreased()", "name": "requestMaxLengthDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestMaxLengthDecreased()", "original_string": "  @Test\n  public void requestMaxLengthDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_MAX_LENGTH_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_maxlength_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "class_name": "MaxLengthBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest.[void]responseMaxLengthIncreased()", "name": "responseMaxLengthIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseMaxLengthIncreased()", "original_string": "  @Test\n  public void responseMaxLengthIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_MAX_LENGTH_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_maxlength_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java", "class_name": "MaxLengthBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/MaxLengthBCTest.java.MaxLengthBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "class_name": "HeadersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_headers_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "class_name": "HeadersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest.[void]responseDecreased()", "name": "responseDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseDecreased()", "original_string": "  @Test\n  public void responseDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADERS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_headers_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java", "class_name": "HeadersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeadersBCTest.java.HeadersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java", "class_name": "OperationBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_operation_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java", "class_name": "OperationBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OperationBCTest.java.OperationBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_request_params_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_params_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest.[void]requiredIncreased()", "name": "requiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requiredIncreased()", "original_string": "  @Test\n  public void requiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_params_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java", "class_name": "ParametersBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParametersBCTest.java.ParametersBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java", "class_name": "RequestBodyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest.[void]requiredChanged()", "name": "requiredChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requiredChanged()", "original_string": "  @Test\n  public void requiredChanged() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_body_required_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java", "class_name": "RequestBodyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequestBodyBCTest.java.RequestBodyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_oneof_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]requestDecreased()", "name": "requestDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestDecreased()", "original_string": "  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_ONEOF_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_oneof_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest.[void]responseIncreased()", "name": "responseIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseIncreased()", "original_string": "  @Test\n  public void responseIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_ONEOF_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_oneof_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java", "class_name": "OneOfBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OneOfBCTest.java.OneOfBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "class_name": "SecurityRequirementBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_requirement_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "class_name": "SecurityRequirementBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest.[void]schemesIncreased()", "name": "schemesIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void schemesIncreased()", "original_string": "  @Test\n  public void schemesIncreased() {\n    BackwardIncompatibleProp prop = SECURITY_REQUIREMENT_SCHEMES_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_security_requirement_schemes_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java", "class_name": "SecurityRequirementBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementBCTest.java.SecurityRequirementBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_response_header_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]responseExplodeChanged()", "name": "responseExplodeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseExplodeChanged()", "original_string": "  @Test\n  public void responseExplodeChanged() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_EXPLODE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_response_header_explode_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]responseRequiredDecreased()", "name": "responseRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseRequiredDecreased()", "original_string": "  @Test\n  public void responseRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_header_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest.[void]responseRequiredIncreased()", "name": "responseRequiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseRequiredIncreased()", "original_string": "  @Test\n  public void responseRequiredIncreased() {\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    BackwardIncompatibleProp prop = RESPONSE_HEADER_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_header_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java", "class_name": "HeaderBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/HeaderBCTest.java.HeaderBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_enum_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]requestDecreased()", "name": "requestDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestDecreased()", "original_string": "  @Test\n  public void requestDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_ENUM_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_enum_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest.[void]responseIncreased()", "name": "responseIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseIncreased()", "original_string": "  @Test\n  public void responseIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_ENUM_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_enum_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java", "class_name": "EnumBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/EnumBCTest.java.EnumBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]authorizationUrlChanged()", "name": "authorizationUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void authorizationUrlChanged()", "original_string": "  @Test\n  public void authorizationUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_authorization_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]refreshUrlChanged()", "name": "refreshUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void refreshUrlChanged()", "original_string": "  @Test\n  public void refreshUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_refresh_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest.[void]tokenUrlChanged()", "name": "tokenUrlChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void tokenUrlChanged()", "original_string": "  @Test\n  public void tokenUrlChanged() {\n    BackwardIncompatibleProp prop = SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_oauthflow_token_url_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java", "class_name": "OAuthFlowBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OAuthFlowBCTest.java.OAuthFlowBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_writeonly_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]responseWriteOnlyIncreased()", "name": "responseWriteOnlyIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseWriteOnlyIncreased()", "original_string": "  @Test\n  public void responseWriteOnlyIncreased() {\n    BackwardIncompatibleProp prop = RESPONSE_WRITEONLY_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_response_writeonly_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest.[void]responseWriteOnlyRequiredDecreased()", "name": "responseWriteOnlyRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseWriteOnlyRequiredDecreased()", "original_string": "  @Test\n  public void responseWriteOnlyRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_WRITEONLY_REQUIRED_DECREASED;\n    // TODO: Document why desired or remove support (test added to avoid unintentional regression)\n    assertSpecIncompatible(BASE, \"bc_response_writeonly_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java", "class_name": "WriteOnlyBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/WriteOnlyBCTest.java.WriteOnlyBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "class_name": "OpenApiBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_openapi_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "class_name": "OpenApiBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest.[void]endpointsDecreased()", "name": "endpointsDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void endpointsDecreased()", "original_string": "  @Test\n  public void endpointsDecreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_openapi_endpoints_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java", "class_name": "OpenApiBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/OpenApiBCTest.java.OpenApiBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_request_param_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]allowEmptyValueDecreased()", "name": "allowEmptyValueDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void allowEmptyValueDecreased()", "original_string": "  @Test\n  public void allowEmptyValueDecreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_ALLOWEMPTY_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_request_param_allowemptyvalue_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]explodeChanged()", "name": "explodeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void explodeChanged()", "original_string": "  @Test\n  public void explodeChanged() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_EXPLODE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_request_param_explode_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]requiredIncreased()", "name": "requiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requiredIncreased()", "original_string": "  @Test\n  public void requiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_PARAMS_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_param_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest.[void]styleChanged()", "name": "styleChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void styleChanged()", "original_string": "  @Test\n  public void styleChanged() {\n    BackwardIncompatibleProp prop = REQUEST_PARAM_STYLE_CHANGED;\n    assertSpecIncompatible(BASE, \"bc_request_param_style_changed.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java", "class_name": "ParameterBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/ParameterBCTest.java.ParameterBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_security_requirements_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]decreased()", "name": "decreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void decreased()", "original_string": "  @Test\n  public void decreased() {\n    BackwardIncompatibleProp prop = SECURITY_REQUIREMENTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_security_requirements_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " requirements should be compatible."}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest.[void]schemeTypeChanged()", "name": "schemeTypeChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void schemeTypeChanged()", "original_string": "  @Test\n  public void schemeTypeChanged() {\n    assertOpenApiBackwardIncompatible(BASE, \"bc_security_requirements_scheme_type_changed.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java", "class_name": "SecurityRequirementsBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/SecurityRequirementsBCTest.java.SecurityRequirementsBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": " TODO: A missing incompatible check seems to be if requirements increase from zero to 1 or more"}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_required_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]requestRequiredIncreased()", "name": "requestRequiredIncreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void requestRequiredIncreased()", "original_string": "  @Test\n  public void requestRequiredIncreased() {\n    BackwardIncompatibleProp prop = REQUEST_REQUIRED_INCREASED;\n    assertSpecIncompatible(BASE, \"bc_request_required_increased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest.[void]responseRequiredDecreased()", "name": "responseRequiredDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void responseRequiredDecreased()", "original_string": "  @Test\n  public void responseRequiredDecreased() {\n    BackwardIncompatibleProp prop = RESPONSE_REQUIRED_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_response_required_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java", "class_name": "RequiredBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/RequiredBCTest.java.RequiredBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest.[void]unchanged()", "name": "unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void unchanged()", "original_string": "  @Test\n  public void unchanged() {\n    assertSpecUnchanged(BASE, BASE);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "class_name": "PathBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest.[void]changedButCompatible()", "name": "changedButCompatible", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void changedButCompatible()", "original_string": "  @Test\n  public void changedButCompatible() {\n    assertSpecChangedButCompatible(BASE, \"bc_path_changed_but_compatible.yaml\");\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "class_name": "PathBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest.[void]opsDecreased()", "name": "opsDecreased", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void opsDecreased()", "original_string": "  @Test\n  public void opsDecreased() {\n    BackwardIncompatibleProp prop = OPENAPI_ENDPOINTS_DECREASED;\n    assertSpecIncompatible(BASE, \"bc_path_ops_decreased.yaml\", prop);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java", "class_name": "PathBCTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/backcompat/PathBCTest.java.PathBCTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/ParametersDiff_containsTest.java.ParametersDiff_containsTest.[void]testContains_ParameterFound()", "name": "testContains_ParameterFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContains_ParameterFound()", "original_string": "  @Test\n  public void testContains_ParameterFound() {\n    Components components = new Components();\n    Parameter param1 = new Parameter().name(\"param1\").in(\"query\");\n    Parameter param2 = new Parameter().name(\"param2\").in(\"query\");\n    List<Parameter> parameters = Arrays.asList(param1, param2);\n\n    Optional<Parameter> result = ParametersDiff.contains(components, parameters, param1);\n\n    assertTrue(result.isPresent());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/ParametersDiff_containsTest.java", "class_name": "ParametersDiff_containsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/ParametersDiff_containsTest.java.ParametersDiff_containsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/ParametersDiff_containsTest.java.ParametersDiff_containsTest.[void]testContains_ParameterNotFound()", "name": "testContains_ParameterNotFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContains_ParameterNotFound()", "original_string": "  @Test\n  public void testContains_ParameterNotFound() {\n    Components components = new Components();\n    Parameter param1 = new Parameter().name(\"param1\").in(\"query\");\n    Parameter param2 = new Parameter().name(\"param2\").in(\"query\");\n    List<Parameter> parameters = Arrays.asList(param1);\n\n    Optional<Parameter> result = ParametersDiff.contains(components, parameters, param2);\n\n    assertFalse(result.isPresent());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/ParametersDiff_containsTest.java", "class_name": "ParametersDiff_containsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/ParametersDiff_containsTest.java.ParametersDiff_containsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff_getCopyTest.java.SecurityRequirementDiff_getCopyTest.[void]testGetCopy()", "name": "testGetCopy", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGetCopy()", "original_string": "  @Test\n  public void testGetCopy() {\n    // Given\n    LinkedHashMap<String, List<String>> input = new LinkedHashMap<>();\n    input.put(\"scheme1\", List.of(\"scope1\", \"scope2\"));\n    input.put(\"scheme2\", List.of(\"scope3\"));\n\n    // When\n    SecurityRequirement result = SecurityRequirementDiff.getCopy(input);\n\n    // Then\n    assertEquals(2, result.size());\n    assertEquals(List.of(\"scope1\", \"scope2\"), result.get(\"scheme1\"));\n    assertEquals(List.of(\"scope3\"), result.get(\"scheme2\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff_getCopyTest.java", "class_name": "SecurityRequirementDiff_getCopyTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityRequirementDiff_getCopyTest.java.SecurityRequirementDiff_getCopyTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_toStringTest.java.SecurityDiffInfo_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    String ref = \"exampleRef\";\n    SecurityScheme securityScheme = new SecurityScheme();\n    List<String> scopes = Arrays.asList(\"scope1\", \"scope2\");\n\n    SecurityDiffInfo securityDiffInfo = new SecurityDiffInfo(ref, securityScheme, scopes);\n\n    String expected =\n        \"SecurityDiffInfo(ref=\"\n            + ref\n            + \", securityScheme=\"\n            + securityScheme\n            + \", scopes=\"\n            + scopes\n            + \")\";\n    assertEquals(expected, securityDiffInfo.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_toStringTest.java", "class_name": "SecurityDiffInfo_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_toStringTest.java.SecurityDiffInfo_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_sameListTest.java.SecurityDiffInfo_sameListTest.[void]testSameList_Unchanged()", "name": "testSameList_Unchanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSameList_Unchanged()", "original_string": "  @Test\n  public void testSameList_Unchanged() {\n    SecurityScheme scheme1 = new SecurityScheme();\n    SecurityScheme scheme2 = new SecurityScheme();\n\n    SecurityDiffInfo info1 = new SecurityDiffInfo(\"ref1\", scheme1, Arrays.asList(\"scope1\"));\n    SecurityDiffInfo info2 = new SecurityDiffInfo(\"ref2\", scheme2, Arrays.asList(\"scope2\"));\n\n    List<SecurityDiffInfo> leftSecurities = Arrays.asList(info1);\n    List<SecurityDiffInfo> rightSecurities = Arrays.asList(info1);\n\n    assertTrue(SecurityDiffInfo.sameList(leftSecurities, rightSecurities));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_sameListTest.java", "class_name": "SecurityDiffInfo_sameListTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_sameListTest.java.SecurityDiffInfo_sameListTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_sameListTest.java.SecurityDiffInfo_sameListTest.[void]testSameList_Changed()", "name": "testSameList_Changed", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testSameList_Changed()", "original_string": "  @Test\n  public void testSameList_Changed() {\n    SecurityScheme scheme1 = new SecurityScheme();\n    SecurityScheme scheme2 = new SecurityScheme();\n\n    SecurityDiffInfo info1 = new SecurityDiffInfo(\"ref1\", scheme1, Arrays.asList(\"scope1\"));\n    SecurityDiffInfo info2 = new SecurityDiffInfo(\"ref2\", scheme2, Arrays.asList(\"scope2\"));\n\n    List<SecurityDiffInfo> leftSecurities = Arrays.asList(info1);\n    List<SecurityDiffInfo> rightSecurities = Arrays.asList(info2);\n\n    assertFalse(SecurityDiffInfo.sameList(leftSecurities, rightSecurities));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_sameListTest.java", "class_name": "SecurityDiffInfo_sameListTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_sameListTest.java.SecurityDiffInfo_sameListTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest.[void]testDiff_BothMapsNull()", "name": "testDiff_BothMapsNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff_BothMapsNull()", "original_string": "  @Test\n  public void testDiff_BothMapsNull() {\n    MapKeyDiff<String, String> result = MapKeyDiff.diff(null, null);\n    assertTrue(result.getIncreased().isEmpty());\n    assertTrue(result.getMissing().isEmpty());\n    assertTrue(result.getSharedKey().isEmpty());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java", "class_name": "MapKeyDiff_diffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest.[void]testDiff_LeftMapNull()", "name": "testDiff_LeftMapNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff_LeftMapNull()", "original_string": "  @Test\n  public void testDiff_LeftMapNull() {\n    Map<String, String> rightMap = new HashMap<>();\n    rightMap.put(\"key1\", \"value1\");\n\n    MapKeyDiff<String, String> result = MapKeyDiff.diff(null, rightMap);\n    assertEquals(rightMap, result.getIncreased());\n    assertTrue(result.getMissing().isEmpty());\n    assertTrue(result.getSharedKey().isEmpty());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java", "class_name": "MapKeyDiff_diffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest.[void]testDiff_RightMapNull()", "name": "testDiff_RightMapNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff_RightMapNull()", "original_string": "  @Test\n  public void testDiff_RightMapNull() {\n    Map<String, String> leftMap = new HashMap<>();\n    leftMap.put(\"key1\", \"value1\");\n\n    MapKeyDiff<String, String> result = MapKeyDiff.diff(leftMap, null);\n    assertEquals(leftMap, result.getMissing());\n    assertTrue(result.getIncreased().isEmpty());\n    assertTrue(result.getSharedKey().isEmpty());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java", "class_name": "MapKeyDiff_diffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest.[void]testDiff_BothMapsNotNull()", "name": "testDiff_BothMapsNotNull", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff_BothMapsNotNull()", "original_string": "  @Test\n  public void testDiff_BothMapsNotNull() {\n    Map<String, String> leftMap = new HashMap<>();\n    leftMap.put(\"key1\", \"value1\");\n    leftMap.put(\"key2\", \"value2\");\n\n    Map<String, String> rightMap = new HashMap<>();\n    rightMap.put(\"key2\", \"value2\");\n    rightMap.put(\"key3\", \"value3\");\n\n    MapKeyDiff<String, String> result = MapKeyDiff.diff(leftMap, rightMap);\n    assertEquals(1, result.getIncreased().size());\n    assertEquals(\"value3\", result.getIncreased().get(\"key3\"));\n    assertEquals(1, result.getMissing().size());\n    assertEquals(\"value1\", result.getMissing().get(\"key1\"));\n    assertEquals(1, result.getSharedKey().size());\n    assertTrue(result.getSharedKey().contains(\"key2\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java", "class_name": "MapKeyDiff_diffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/MapKeyDiff_diffTest.java.MapKeyDiff_diffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_containsListTest.java.SecurityDiffInfo_containsListTest.[void]testContainsList_Found()", "name": "testContainsList_Found", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContainsList_Found()", "original_string": "  @Test\n  public void testContainsList_Found() {\n    SecurityDiffInfo info1 =\n        new SecurityDiffInfo(\"ref1\", new SecurityScheme(), Arrays.asList(\"scope1\"));\n    SecurityDiffInfo info2 =\n        new SecurityDiffInfo(\"ref2\", new SecurityScheme(), Arrays.asList(\"scope2\"));\n    List<SecurityDiffInfo> leftSecurities = Arrays.asList(info1, info2);\n    List<List<SecurityDiffInfo>> securityRequirements =\n        Arrays.asList(leftSecurities, Collections.singletonList(info1));\n\n    Optional<List<SecurityDiffInfo>> result =\n        SecurityDiffInfo.containsList(securityRequirements, leftSecurities);\n\n    assertTrue(result.isPresent());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_containsListTest.java", "class_name": "SecurityDiffInfo_containsListTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_containsListTest.java.SecurityDiffInfo_containsListTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_containsListTest.java.SecurityDiffInfo_containsListTest.[void]testContainsList_NotFound()", "name": "testContainsList_NotFound", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testContainsList_NotFound()", "original_string": "  @Test\n  public void testContainsList_NotFound() {\n    SecurityDiffInfo info1 =\n        new SecurityDiffInfo(\"ref1\", new SecurityScheme(), Arrays.asList(\"scope1\"));\n    SecurityDiffInfo info2 =\n        new SecurityDiffInfo(\"ref2\", new SecurityScheme(), Arrays.asList(\"scope2\"));\n    List<SecurityDiffInfo> leftSecurities = Arrays.asList(info1, info2);\n    List<List<SecurityDiffInfo>> securityRequirements =\n        Collections.singletonList(Collections.singletonList(info1));\n\n    Optional<List<SecurityDiffInfo>> result =\n        SecurityDiffInfo.containsList(securityRequirements, leftSecurities);\n\n    assertFalse(result.isPresent());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_containsListTest.java", "class_name": "SecurityDiffInfo_containsListTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_containsListTest.java.SecurityDiffInfo_containsListTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/PathsDiff_valOrEmptyTest.java.PathsDiff_valOrEmptyTest.[void]testValOrEmpty_WithNullPath()", "name": "testValOrEmpty_WithNullPath", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testValOrEmpty_WithNullPath()", "original_string": "  @Test\n  public void testValOrEmpty_WithNullPath() {\n    Paths result = PathsDiff.valOrEmpty(null);\n    assertNotNull(result);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/PathsDiff_valOrEmptyTest.java", "class_name": "PathsDiff_valOrEmptyTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/PathsDiff_valOrEmptyTest.java.PathsDiff_valOrEmptyTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/PathsDiff_valOrEmptyTest.java.PathsDiff_valOrEmptyTest.[void]testValOrEmpty_WithNonNullPath()", "name": "testValOrEmpty_WithNonNullPath", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testValOrEmpty_WithNonNullPath()", "original_string": "  @Test\n  public void testValOrEmpty_WithNonNullPath() {\n    Paths path = new Paths();\n    Paths result = PathsDiff.valOrEmpty(path);\n    assertSame(path, result);\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/PathsDiff_valOrEmptyTest.java", "class_name": "PathsDiff_valOrEmptyTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/PathsDiff_valOrEmptyTest.java.PathsDiff_valOrEmptyTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_getSecurityRequirementTest.java.SecurityDiffInfo_getSecurityRequirementTest.[void]testGetSecurityRequirement()", "name": "testGetSecurityRequirement", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testGetSecurityRequirement()", "original_string": "  @Test\n  public void testGetSecurityRequirement() {\n    SecurityScheme scheme1 = new SecurityScheme();\n    SecurityScheme scheme2 = new SecurityScheme();\n\n    SecurityDiffInfo info1 =\n        new SecurityDiffInfo(\"ref1\", scheme1, Arrays.asList(\"scope1\", \"scope2\"));\n    SecurityDiffInfo info2 = new SecurityDiffInfo(\"ref2\", scheme2, Arrays.asList(\"scope3\"));\n\n    List<SecurityDiffInfo> securityDiffInfoList = Arrays.asList(info1, info2);\n\n    SecurityRequirement result = SecurityDiffInfo.getSecurityRequirement(securityDiffInfoList);\n\n    assertEquals(2, result.size());\n    assertEquals(Arrays.asList(\"scope1\", \"scope2\"), result.get(\"ref1\"));\n    assertEquals(Arrays.asList(\"scope3\"), result.get(\"ref2\"));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_getSecurityRequirementTest.java", "class_name": "SecurityDiffInfo_getSecurityRequirementTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_getSecurityRequirementTest.java.SecurityDiffInfo_getSecurityRequirementTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/CacheKey_toStringTest.java.CacheKey_toStringTest.[void]testToString()", "name": "testToString", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testToString()", "original_string": "  @Test\n  public void testToString() {\n    String left = \"leftValue\";\n    String right = \"rightValue\";\n    DiffContext context = new DiffContext(null);\n    CacheKey cacheKey = new CacheKey(left, right, context);\n\n    String expected = \"CacheKey(left=leftValue, right=rightValue, context=\" + context + \")\";\n    assertEquals(expected, cacheKey.toString());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/CacheKey_toStringTest.java", "class_name": "CacheKey_toStringTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/CacheKey_toStringTest.java.CacheKey_toStringTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/OperationDiff_removePathParameterTest.java.OperationDiff_removePathParameterTest.[void]testRemovePathParameter_ParameterExists()", "name": "testRemovePathParameter_ParameterExists", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRemovePathParameter_ParameterExists()", "original_string": "  @Test\n  public void testRemovePathParameter_ParameterExists() {\n    OperationDiff operationDiff = new OperationDiff(null);\n    List<Parameter> parameters = new ArrayList<>();\n    Parameter param1 = new Parameter();\n    param1.setIn(\"path\");\n    param1.setName(\"param1\");\n    parameters.add(param1);\n\n    operationDiff.removePathParameter(\"param1\", parameters);\n\n    assertEquals(0, parameters.size());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/OperationDiff_removePathParameterTest.java", "class_name": "OperationDiff_removePathParameterTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/OperationDiff_removePathParameterTest.java.OperationDiff_removePathParameterTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/OperationDiff_removePathParameterTest.java.OperationDiff_removePathParameterTest.[void]testRemovePathParameter_ParameterDoesNotExist()", "name": "testRemovePathParameter_ParameterDoesNotExist", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testRemovePathParameter_ParameterDoesNotExist()", "original_string": "  @Test\n  public void testRemovePathParameter_ParameterDoesNotExist() {\n    OperationDiff operationDiff = new OperationDiff(null);\n    List<Parameter> parameters = new ArrayList<>();\n    Parameter param1 = new Parameter();\n    param1.setIn(\"path\");\n    param1.setName(\"param1\");\n    parameters.add(param1);\n\n    operationDiff.removePathParameter(\"param2\", parameters);\n\n    assertEquals(1, parameters.size());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/OperationDiff_removePathParameterTest.java", "class_name": "OperationDiff_removePathParameterTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/OperationDiff_removePathParameterTest.java.OperationDiff_removePathParameterTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest.[void]testEquals_SameObject()", "name": "testEquals_SameObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameObject()", "original_string": "  @Test\n  public void testEquals_SameObject() {\n    SecurityDiffInfo securityDiffInfo =\n        new SecurityDiffInfo(\"ref\", new SecurityScheme(), Arrays.asList(\"scope1\", \"scope2\"));\n    assertTrue(securityDiffInfo.equals(securityDiffInfo));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java", "class_name": "SecurityDiffInfo_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest.[void]testEquals_NullObject()", "name": "testEquals_NullObject", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_NullObject()", "original_string": "  @Test\n  public void testEquals_NullObject() {\n    SecurityDiffInfo securityDiffInfo =\n        new SecurityDiffInfo(\"ref\", new SecurityScheme(), Arrays.asList(\"scope1\", \"scope2\"));\n    assertFalse(securityDiffInfo.equals(null));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java", "class_name": "SecurityDiffInfo_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest.[void]testEquals_DifferentClass()", "name": "testEquals_DifferentClass", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentClass()", "original_string": "  @Test\n  public void testEquals_DifferentClass() {\n    SecurityDiffInfo securityDiffInfo =\n        new SecurityDiffInfo(\"ref\", new SecurityScheme(), Arrays.asList(\"scope1\", \"scope2\"));\n    assertFalse(securityDiffInfo.equals(new Object()));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java", "class_name": "SecurityDiffInfo_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest.[void]testEquals_DifferentSecurityScheme()", "name": "testEquals_DifferentSecurityScheme", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentSecurityScheme()", "original_string": "  @Test\n  public void testEquals_DifferentSecurityScheme() {\n    SecurityScheme scheme1 = new SecurityScheme();\n    scheme1.setName(\"scheme1\");\n    SecurityScheme scheme2 = new SecurityScheme();\n    scheme2.setName(\"scheme2\");\n\n    SecurityDiffInfo securityDiffInfo1 =\n        new SecurityDiffInfo(\"ref\", scheme1, Arrays.asList(\"scope1\", \"scope2\"));\n    SecurityDiffInfo securityDiffInfo2 =\n        new SecurityDiffInfo(\"ref\", scheme2, Arrays.asList(\"scope1\", \"scope2\"));\n\n    assertFalse(securityDiffInfo1.equals(securityDiffInfo2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java", "class_name": "SecurityDiffInfo_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest.[void]testEquals_DifferentScopes()", "name": "testEquals_DifferentScopes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_DifferentScopes()", "original_string": "  @Test\n  public void testEquals_DifferentScopes() {\n    SecurityScheme scheme = new SecurityScheme();\n    scheme.setName(\"scheme\");\n\n    SecurityDiffInfo securityDiffInfo1 =\n        new SecurityDiffInfo(\"ref\", scheme, Arrays.asList(\"scope1\", \"scope2\"));\n    SecurityDiffInfo securityDiffInfo2 =\n        new SecurityDiffInfo(\"ref\", scheme, Arrays.asList(\"scope1\", \"scope3\"));\n\n    assertFalse(securityDiffInfo1.equals(securityDiffInfo2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java", "class_name": "SecurityDiffInfo_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest.[void]testEquals_SameAttributes()", "name": "testEquals_SameAttributes", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testEquals_SameAttributes()", "original_string": "  @Test\n  public void testEquals_SameAttributes() {\n    SecurityScheme scheme = new SecurityScheme();\n    scheme.setName(\"scheme\");\n\n    SecurityDiffInfo securityDiffInfo1 =\n        new SecurityDiffInfo(\"ref\", scheme, Arrays.asList(\"scope1\", \"scope2\"));\n    SecurityDiffInfo securityDiffInfo2 =\n        new SecurityDiffInfo(\"ref\", scheme, Arrays.asList(\"scope1\", \"scope2\"));\n\n    assertTrue(securityDiffInfo1.equals(securityDiffInfo2));\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java", "class_name": "SecurityDiffInfo_equalsTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/SecurityDiffInfo_equalsTest.java.SecurityDiffInfo_equalsTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java.ComposedSchemaDiffResult_diffTest.[void]testDiff_DiscriminatorPropertyChanged()", "name": "testDiff_DiscriminatorPropertyChanged", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff_DiscriminatorPropertyChanged()", "original_string": "  @Test\n  public void testDiff_DiscriminatorPropertyChanged() {\n    // Given\n    ComposedSchemaDiffResult composedSchemaDiffResult =\n        new ComposedSchemaDiffResult(mock(OpenApiDiff.class));\n    RecursiveSchemaSet refSet = mock(RecursiveSchemaSet.class);\n    Components leftComponents = mock(Components.class);\n    Components rightComponents = mock(Components.class);\n    ComposedSchema left = mock(ComposedSchema.class);\n    ComposedSchema right = mock(ComposedSchema.class);\n    DiffContext context = mock(DiffContext.class);\n\n    Discriminator leftDis = mock(Discriminator.class);\n    Discriminator rightDis = mock(Discriminator.class);\n\n    when(left.getDiscriminator()).thenReturn(leftDis);\n    when(right.getDiscriminator()).thenReturn(rightDis);\n    when(leftDis.getPropertyName()).thenReturn(\"leftProp\");\n    when(rightDis.getPropertyName()).thenReturn(\"rightProp\");\n\n    // When\n    DeferredChanged<ChangedSchema> result =\n        composedSchemaDiffResult.diff(\n            refSet, leftComponents, rightComponents, left, right, context);\n\n    // Then\n    assertTrue(result.isPresent());\n    assertTrue(result.get().isDiscriminatorPropertyChanged());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java", "class_name": "ComposedSchemaDiffResult_diffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java.ComposedSchemaDiffResult_diffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java.ComposedSchemaDiffResult_diffTest.[void]testDiff_NoDiscriminatorChange()", "name": "testDiff_NoDiscriminatorChange", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff_NoDiscriminatorChange()", "original_string": "  @Test\n  public void testDiff_NoDiscriminatorChange() {\n    // Given\n    ComposedSchemaDiffResult composedSchemaDiffResult =\n        new ComposedSchemaDiffResult(mock(OpenApiDiff.class));\n    RecursiveSchemaSet refSet = mock(RecursiveSchemaSet.class);\n    Components leftComponents = mock(Components.class);\n    Components rightComponents = mock(Components.class);\n    ComposedSchema left = mock(ComposedSchema.class);\n    ComposedSchema right = mock(ComposedSchema.class);\n    DiffContext context = mock(DiffContext.class);\n\n    Discriminator leftDis = mock(Discriminator.class);\n    Discriminator rightDis = mock(Discriminator.class);\n\n    when(left.getDiscriminator()).thenReturn(leftDis);\n    when(right.getDiscriminator()).thenReturn(rightDis);\n    when(leftDis.getPropertyName()).thenReturn(\"sameProp\");\n    when(rightDis.getPropertyName()).thenReturn(\"sameProp\");\n\n    // When\n    DeferredChanged<ChangedSchema> result =\n        composedSchemaDiffResult.diff(\n            refSet, leftComponents, rightComponents, left, right, context);\n\n    // Then\n    assertTrue(result.isPresent());\n    assertTrue(!result.get().isDiscriminatorPropertyChanged());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java", "class_name": "ComposedSchemaDiffResult_diffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java.ComposedSchemaDiffResult_diffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}, {"uris": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java.ComposedSchemaDiffResult_diffTest.[void]testDiff_NotComposedSchema()", "name": "testDiff_NotComposedSchema", "arg_nums": 0, "params": [], "return_type": "void", "signature": "@Test\n  public void testDiff_NotComposedSchema()", "original_string": "  @Test\n  public void testDiff_NotComposedSchema() {\n    // Given\n    ComposedSchemaDiffResult composedSchemaDiffResult =\n        new ComposedSchemaDiffResult(mock(OpenApiDiff.class));\n    RecursiveSchemaSet refSet = mock(RecursiveSchemaSet.class);\n    Components leftComponents = mock(Components.class);\n    Components rightComponents = mock(Components.class);\n    Schema left = mock(Schema.class);\n    Schema right = mock(Schema.class);\n    DiffContext context = mock(DiffContext.class);\n\n    // When\n    DeferredChanged<ChangedSchema> result =\n        composedSchemaDiffResult.diff(\n            refSet, leftComponents, rightComponents, left, right, context);\n\n    // Then\n    assertTrue(result.isPresent());\n  }", "default_arguments": null, "file": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java", "class_name": "ComposedSchemaDiffResult_diffTest", "class_uri": "src/test/java/org/openapitools/openapidiff/core/compare/schemadiffresult/ComposedSchemaDiffResult_diffTest.java.ComposedSchemaDiffResult_diffTest", "attributes": {"modifiers": "@Test\n  public", "marker_annotations": ["@Test"], "non_marker_annotations": ["public"], "comments": [], "return_type": "void", "classes": []}, "docstring": ""}]