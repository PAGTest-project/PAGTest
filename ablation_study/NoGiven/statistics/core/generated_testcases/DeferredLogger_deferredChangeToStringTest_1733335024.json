[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\nclass DeferredLogger_deferredChangeToStringTest {\n\n    @Test\n    void testDeferredChangeToStringWithValueSetAndPresent() {\n        DeferredChanged<?> deferredChanged = Mockito.mock(DeferredChanged.class);\n        when(deferredChanged.isValueSet()).thenReturn(true);\n        when(deferredChanged.isPresent()).thenReturn(true);\n        when(deferredChanged.get()).thenReturn(\"testValue\");\n        when(deferredChanged.toString()).thenReturn(\"DeferredChanged[testValue]\");\n\n        String result = DeferredLogger.deferredChangeToString(deferredChanged);\n        assertEquals(\"testValue\", result);\n    }\n\n    @Test\n    void testDeferredChangeToStringWithValueSetAndNotPresent() {\n        DeferredChanged<?> deferredChanged = Mockito.mock(DeferredChanged.class);\n        when(deferredChanged.isValueSet()).thenReturn(true);\n        when(deferredChanged.isPresent()).thenReturn(false);\n        when(deferredChanged.toString()).thenReturn(\"DeferredChanged[empty]\");\n\n        String result = DeferredLogger.deferredChangeToString(deferredChanged);\n        assertEquals(\"DeferredChanged[empty]\", result);\n    }\n\n    @Test\n    void testDeferredChangeToStringWithValueNotSet() {\n        DeferredChanged<?> deferredChanged = Mockito.mock(DeferredChanged.class);\n        when(deferredChanged.isValueSet()).thenReturn(false);\n        when(deferredChanged.toString()).thenReturn(\"DeferredChanged[not set]\");\n\n        String result = DeferredLogger.deferredChangeToString(deferredChanged);\n        assertEquals(\"DeferredChanged[not set]\", result);\n    }\n}\n"}]