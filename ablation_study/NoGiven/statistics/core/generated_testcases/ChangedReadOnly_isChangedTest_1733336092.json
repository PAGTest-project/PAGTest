[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.DiffResult;\nimport org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;\n\npublic class ChangedReadOnly_isChangedTest {\n\n    @Mock\n    private DiffContext context;\n    private ChangedReadOnly changedReadOnly;\n\n    @BeforeEach\n    public void setUp() {\n        context = mock(DiffContext.class);\n    }\n\n    @Test\n    public void testIsChanged_NoChanges() {\n        changedReadOnly = new ChangedReadOnly(true, true, context);\n        assertEquals(DiffResult.NO_CHANGES, changedReadOnly.isChanged());\n    }\n\n    @Test\n    public void testIsChanged_Response() {\n        when(context.isResponse()).thenReturn(true);\n        changedReadOnly = new ChangedReadOnly(true, false, context);\n        assertEquals(DiffResult.COMPATIBLE, changedReadOnly.isChanged());\n    }\n\n    @Test\n    public void testIsChanged_Request_NewValueTrue_Incompatible() {\n        when(context.isRequest()).thenReturn(true);\n        when(BackwardIncompatibleProp.REQUEST_READONLY_INCREASED.enabled(context)).thenReturn(true);\n        changedReadOnly = new ChangedReadOnly(false, true, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedReadOnly.isChanged());\n    }\n\n    @Test\n    public void testIsChanged_Request_NewValueFalse_Required_Incompatible() {\n        when(context.isRequest()).thenReturn(true);\n        when(context.isRequired()).thenReturn(true);\n        when(BackwardIncompatibleProp.REQUEST_READONLY_REQUIRED_DECREASED.enabled(context)).thenReturn(true);\n        changedReadOnly = new ChangedReadOnly(true, false, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedReadOnly.isChanged());\n    }\n\n    @Test\n    public void testIsChanged_Request_Compatible() {\n        when(context.isRequest()).thenReturn(true);\n        changedReadOnly = new ChangedReadOnly(false, false, context);\n        assertEquals(DiffResult.COMPATIBLE, changedReadOnly.isChanged());\n    }\n\n    @Test\n    public void testIsChanged_Unknown() {\n        changedReadOnly = new ChangedReadOnly(false, false, context);\n        assertEquals(DiffResult.UNKNOWN, changedReadOnly.isChanged());\n    }\n}\n"}]