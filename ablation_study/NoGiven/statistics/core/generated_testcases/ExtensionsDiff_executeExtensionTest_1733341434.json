[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.ExtensionDiff;\n\nimport java.util.Optional;\nimport java.util.function.Function;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\npublic class ExtensionsDiff_executeExtensionTest {\n\n    private ExtensionsDiff extensionsDiff;\n    private OpenApiDiff openApiDiff;\n    private ExtensionDiff mockExtensionDiff;\n\n    @BeforeEach\n    public void setUp() {\n        openApiDiff = Mockito.mock(OpenApiDiff.class);\n        extensionsDiff = new ExtensionsDiff(openApiDiff);\n        mockExtensionDiff = Mockito.mock(ExtensionDiff.class);\n    }\n\n    @Test\n    public void testExecuteExtension_Success() {\n        // Given\n        String name = \"x-test\";\n        Function<ExtensionDiff, Boolean> predicate = ExtensionDiff::isParentApplicable;\n        when(extensionsDiff.getExtensionDiff(name)).thenReturn(Optional.of(mockExtensionDiff));\n        when(mockExtensionDiff.setOpenApiDiff(openApiDiff)).thenReturn(mockExtensionDiff);\n        when(predicate.apply(mockExtensionDiff)).thenReturn(true);\n\n        // When\n        Optional<Boolean> result = extensionsDiff.executeExtension(name, predicate);\n\n        // Then\n        assertTrue(result.isPresent());\n        assertTrue(result.get());\n    }\n}\n"}]