[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.Operation;\nimport io.swagger.v3.oas.models.PathItem;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.ChangedPath;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.*;\n\npublic class PathDiff_diffTest {\n\n    @Test\n    public void testDiffWithSharedMethods() {\n        // Given\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        PathDiff pathDiff = new PathDiff(openApiDiff);\n\n        PathItem left = mock(PathItem.class);\n        PathItem right = mock(PathItem.class);\n        DiffContext context = mock(DiffContext.class);\n\n        Map<PathItem.HttpMethod, Operation> oldOperationMap = new HashMap<>();\n        oldOperationMap.put(PathItem.HttpMethod.GET, new Operation());\n        Map<PathItem.HttpMethod, Operation> newOperationMap = new HashMap<>();\n        newOperationMap.put(PathItem.HttpMethod.GET, new Operation());\n\n        when(left.readOperationsMap()).thenReturn(oldOperationMap);\n        when(right.readOperationsMap()).thenReturn(newOperationMap);\n        when(context.getUrl()).thenReturn(\"/test\");\n        when(context.getLeftUrl()).thenReturn(\"/left\");\n        when(context.getRightUrl()).thenReturn(\"/right\");\n\n        // When\n        DeferredChanged<ChangedPath> result = pathDiff.diff(left, right, context);\n\n        // Then\n        assertNotNull(result);\n        verify(openApiDiff.getOperationDiff(), times(1)).diff(any(), any(), any());\n        verify(openApiDiff.getExtensionsDiff(), times(1)).diff(any(), any(), any());\n    }\n}\n"}]