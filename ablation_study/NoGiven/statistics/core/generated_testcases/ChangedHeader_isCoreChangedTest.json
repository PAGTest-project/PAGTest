[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport io.swagger.v3.oas.models.headers.Header;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.DiffContext;\nimport org.openapitools.openapidiff.core.model.ChangedHeader.DiffResult;\nimport org.openapitools.openapidiff.core.model.ChangedHeader.ChangedMetadata;\nimport org.openapitools.openapidiff.core.model.ChangedHeader.ChangedSchema;\nimport org.openapitools.openapidiff.core.model.ChangedHeader.ChangedContent;\nimport org.openapitools.openapidiff.core.model.ChangedHeader.ChangedExtensions;\n\npublic class ChangedHeader_isCoreChangedTest {\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        Header oldHeader = new Header();\n        Header newHeader = new Header();\n        DiffContext context = mock(DiffContext.class);\n\n        ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context);\n        assertEquals(DiffResult.NO_CHANGES, changedHeader.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_Explode() {\n        Header oldHeader = new Header();\n        Header newHeader = new Header();\n        DiffContext context = mock(DiffContext.class);\n        when(ChangedHeader.RESPONSE_HEADER_EXPLODE_CHANGED.enabled(context)).thenReturn(true);\n\n        ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context)\n                .setExplode(true);\n        assertEquals(DiffResult.INCOMPATIBLE, changedHeader.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_RequiredDecreased() {\n        Header oldHeader = new Header();\n        oldHeader.setRequired(true);\n        Header newHeader = new Header();\n        newHeader.setRequired(false);\n        DiffContext context = mock(DiffContext.class);\n        when(ChangedHeader.RESPONSE_HEADER_REQUIRED_DECREASED.enabled(context)).thenReturn(true);\n\n        ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context)\n                .setRequired(true);\n        assertEquals(DiffResult.INCOMPATIBLE, changedHeader.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_RequiredIncreased() {\n        Header oldHeader = new Header();\n        oldHeader.setRequired(false);\n        Header newHeader = new Header();\n        newHeader.setRequired(true);\n        DiffContext context = mock(DiffContext.class);\n        when(ChangedHeader.RESPONSE_HEADER_REQUIRED_INCREASED.enabled(context)).thenReturn(true);\n\n        ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context)\n                .setRequired(true);\n        assertEquals(DiffResult.INCOMPATIBLE, changedHeader.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_Style() {\n        Header oldHeader = new Header();\n        Header newHeader = new Header();\n        DiffContext context = mock(DiffContext.class);\n\n        ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context)\n                .setStyle(true);\n        assertEquals(DiffResult.INCOMPATIBLE, changedHeader.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        Header oldHeader = new Header();\n        Header newHeader = new Header();\n        DiffContext context = mock(DiffContext.class);\n\n        ChangedHeader changedHeader = new ChangedHeader(oldHeader, newHeader, context)\n                .setRequired(true)\n                .setDeprecated(true)\n                .setStyle(false)\n                .setExplode(false);\n        assertEquals(DiffResult.COMPATIBLE, changedHeader.isCoreChanged());\n    }\n}\n"}]