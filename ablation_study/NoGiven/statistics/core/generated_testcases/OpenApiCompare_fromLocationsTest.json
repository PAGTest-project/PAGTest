[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core;\n\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.parser.core.models.AuthorizationValue;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.mockito.Mockito;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class OpenApiCompare_fromLocationsTest {\n\n    @Test\n    public void testFromLocations_Successful() {\n        // Given\n        String oldLocation = \"oldLocation\";\n        String newLocation = \"newLocation\";\n        List<AuthorizationValue> auths = Collections.emptyList();\n        OpenApiDiffOptions options = OpenApiDiffOptions.builder().build();\n\n        OpenAPI mockOldSpec = Mockito.mock(OpenAPI.class);\n        OpenAPI mockNewSpec = Mockito.mock(OpenAPI.class);\n\n        OpenApiCompare openApiCompare = Mockito.spy(new OpenApiCompare());\n        doReturn(mockOldSpec).when(openApiCompare).readLocation(oldLocation, auths);\n        doReturn(mockNewSpec).when(openApiCompare).readLocation(newLocation, auths);\n\n        // When\n        ChangedOpenApi result = openApiCompare.fromLocations(oldLocation, newLocation, auths, options);\n\n        // Then\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testFromLocations_NullSpecThrowsException() {\n        // Given\n        String oldLocation = \"oldLocation\";\n        String newLocation = \"newLocation\";\n        List<AuthorizationValue> auths = Collections.emptyList();\n        OpenApiDiffOptions options = OpenApiDiffOptions.builder().build();\n\n        OpenApiCompare openApiCompare = Mockito.spy(new OpenApiCompare());\n        doReturn(null).when(openApiCompare).readLocation(oldLocation, auths);\n        doReturn(new OpenAPI()).when(openApiCompare).readLocation(newLocation, auths);\n\n        // When & Then\n        assertThrows(RuntimeException.class, () -> {\n            openApiCompare.fromLocations(oldLocation, newLocation, auths, options);\n        });\n    }\n}\n"}]