[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport io.swagger.v3.oas.models.headers.Header;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.openapitools.openapidiff.core.model.ChangedHeader;\nimport org.openapitools.openapidiff.core.model.ChangedHeaders;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredBuilder;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\n\npublic class HeadersDiff_diffTest {\n\n    @Mock\n    private OpenApiDiff openApiDiff;\n\n    @Mock\n    private HeaderDiff headerDiff;\n\n    @InjectMocks\n    private HeadersDiff headersDiff;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        when(openApiDiff.getHeaderDiff()).thenReturn(headerDiff);\n    }\n\n    @Test\n    public void testDiff_WithSharedHeaders() {\n        // Given\n        Map<String, Header> left = new HashMap<>();\n        left.put(\"header1\", new Header());\n        Map<String, Header> right = new HashMap<>();\n        right.put(\"header1\", new Header());\n        DiffContext context = new DiffContext(null);\n\n        MapKeyDiff<String, Header> mockMapKeyDiff = mock(MapKeyDiff.class);\n        when(mockMapKeyDiff.getSharedKey()).thenReturn(List.of(\"header1\"));\n        when(mockMapKeyDiff.getIncreased()).thenReturn(new HashMap<>());\n        when(mockMapKeyDiff.getMissing()).thenReturn(new HashMap<>());\n        when(MapKeyDiff.diff(left, right)).thenReturn(mockMapKeyDiff);\n\n        DeferredChanged<ChangedHeader> mockDeferredChanged = mock(DeferredChanged.class);\n        when(headerDiff.diff(any(), any(), any())).thenReturn(mockDeferredChanged);\n        when(mockDeferredChanged.isPresent()).thenReturn(true);\n        when(mockDeferredChanged.get()).thenReturn(new ChangedHeader(new Header(), new Header(), context));\n\n        // When\n        DeferredChanged<ChangedHeaders> result = headersDiff.diff(left, right, context);\n\n        // Then\n        verify(headerDiff).diff(any(), any(), any());\n        assertEquals(true, result.isPresent());\n    }\n}\n"}]