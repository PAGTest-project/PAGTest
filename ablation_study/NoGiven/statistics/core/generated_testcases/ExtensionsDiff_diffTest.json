[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.openapitools.openapidiff.core.model.Change;\nimport org.openapitools.openapidiff.core.model.Changed;\nimport org.openapitools.openapidiff.core.model.ChangedExtensions;\nimport org.openapitools.openapidiff.core.model.DiffContext;\n\npublic class ExtensionsDiff_diffTest {\n\n    @Mock\n    private OpenApiDiff openApiDiff;\n\n    @Mock\n    private DiffContext context;\n\n    private ExtensionsDiff extensionsDiff;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        extensionsDiff = new ExtensionsDiff(openApiDiff);\n    }\n\n    @Test\n    public void testDiff_AllPathsCovered() {\n        // Given\n        Map<String, Object> left = new HashMap<>();\n        left.put(\"key1\", \"value1\");\n        left.put(\"key2\", \"value2\");\n\n        Map<String, Object> right = new HashMap<>();\n        right.put(\"key1\", \"value1\");\n        right.put(\"key3\", \"value3\");\n\n        // Mocking executeExtensionDiff to return a Changed object\n        Changed changed = mock(Changed.class);\n        when(changed.isDifferent()).thenReturn(true);\n\n        when(extensionsDiff.executeExtensionDiff(anyString(), any(Change.class), any(DiffContext.class)))\n            .thenReturn(Optional.of(changed));\n\n        // When\n        Optional<ChangedExtensions> result = extensionsDiff.diff(left, right, context);\n\n        // Then\n        assertTrue(result.isPresent());\n        ChangedExtensions changedExtensions = result.get();\n        assertTrue(changedExtensions.getChanged().containsKey(\"key1\"));\n        assertTrue(changedExtensions.getMissing().containsKey(\"key2\"));\n        assertTrue(changedExtensions.getIncreased().containsKey(\"key3\"));\n    }\n}\n"}]