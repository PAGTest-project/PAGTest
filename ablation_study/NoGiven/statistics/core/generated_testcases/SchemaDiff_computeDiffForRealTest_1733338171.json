[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.media.Schema;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\nimport org.openapitools.openapidiff.core.model.deferred.RecursiveSchemaSet;\nimport org.openapitools.openapidiff.core.utils.RefPointer;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\npublic class SchemaDiff_computeDiffForRealTest {\n\n    @Test\n    public void testComputeDiffForReal_TypeChanged() {\n        // Given\n        SchemaDiff schemaDiff = new SchemaDiff(mock(OpenApiDiff.class));\n        Schema left = new Schema().type(\"string\");\n        Schema right = new Schema().type(\"integer\");\n        DiffContext context = new DiffContext(mock(OpenApiDiffOptions.class));\n        RecursiveSchemaSet refSet = new RecursiveSchemaSet();\n\n        // When\n        DeferredChanged<ChangedSchema> result = schemaDiff.computeDiffForReal(refSet, left, right, context);\n\n        // Then\n        assertTrue(result.isPresent());\n        assertTrue(result.get().isChangedType());\n    }\n\n    @Test\n    public void testComputeDiffForReal_SameType() {\n        // Given\n        SchemaDiff schemaDiff = new SchemaDiff(mock(OpenApiDiff.class));\n        Schema left = new Schema().type(\"string\");\n        Schema right = new Schema().type(\"string\");\n        DiffContext context = new DiffContext(mock(OpenApiDiffOptions.class));\n        RecursiveSchemaSet refSet = new RecursiveSchemaSet();\n\n        // Mocking the necessary methods\n        RefPointer<Schema<?>> refPointer = mock(RefPointer.class);\n        when(refPointer.resolveRef(any(), any(), any())).thenReturn(left, right);\n        schemaDiff.refPointer = refPointer;\n\n        SchemaDiffResult schemaDiffResult = mock(SchemaDiffResult.class);\n        when(SchemaDiff.getSchemaDiffResult(any(), any())).thenReturn(schemaDiffResult);\n\n        // When\n        DeferredChanged<ChangedSchema> result = schemaDiff.computeDiffForReal(refSet, left, right, context);\n\n        // Then\n        assertTrue(result.isPresent());\n        verify(schemaDiffResult).diff(refSet, schemaDiff.leftComponents, schemaDiff.rightComponents, left, right, context);\n    }\n}\n"}]