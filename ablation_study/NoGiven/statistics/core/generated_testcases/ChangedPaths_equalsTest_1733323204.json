[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.PathItem;\nimport org.apache.commons.configuration2.CompositeConfiguration;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ChangedPaths_equalsTest {\n\n    @Test\n    public void testEquals_SameInstance() {\n        ChangedPaths changedPaths = new ChangedPaths(new HashMap<>(), new HashMap<>(), new OpenApiDiffOptions(new CompositeConfiguration()));\n        assertTrue(changedPaths.equals(changedPaths));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        ChangedPaths changedPaths = new ChangedPaths(new HashMap<>(), new HashMap<>(), new OpenApiDiffOptions(new CompositeConfiguration()));\n        assertFalse(changedPaths.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        ChangedPaths changedPaths = new ChangedPaths(new HashMap<>(), new HashMap<>(), new OpenApiDiffOptions(new CompositeConfiguration()));\n        assertFalse(changedPaths.equals(new Object()));\n    }\n\n    @Test\n    public void testEquals_DifferentFields() {\n        Map<String, PathItem> oldPathMap = new HashMap<>();\n        Map<String, PathItem> newPathMap = new HashMap<>();\n        Map<String, PathItem> increased = new HashMap<>();\n        Map<String, PathItem> missing = new HashMap<>();\n        Map<String, ChangedPath> changed = new HashMap<>();\n\n        ChangedPaths changedPaths1 = new ChangedPaths(oldPathMap, newPathMap, new OpenApiDiffOptions(new CompositeConfiguration()));\n        changedPaths1.setIncreased(increased);\n        changedPaths1.setMissing(missing);\n        changedPaths1.setChanged(changed);\n\n        ChangedPaths changedPaths2 = new ChangedPaths(oldPathMap, newPathMap, new OpenApiDiffOptions(new CompositeConfiguration()));\n        changedPaths2.setIncreased(new HashMap<>(increased));\n        changedPaths2.setMissing(new HashMap<>(missing));\n        changedPaths2.setChanged(new HashMap<>(changed));\n\n        assertTrue(changedPaths1.equals(changedPaths2));\n    }\n\n    @Test\n    public void testEquals_DifferentIncreased() {\n        Map<String, PathItem> oldPathMap = new HashMap<>();\n        Map<String, PathItem> newPathMap = new HashMap<>();\n        Map<String, PathItem> increased1 = new HashMap<>();\n        Map<String, PathItem> increased2 = new HashMap<>();\n        Map<String, PathItem> missing = new HashMap<>();\n        Map<String, ChangedPath> changed = new HashMap<>();\n\n        increased1.put(\"path1\", new PathItem());\n        increased2.put(\"path2\", new PathItem());\n\n        ChangedPaths changedPaths1 = new ChangedPaths(oldPathMap, newPathMap, new OpenApiDiffOptions(new CompositeConfiguration()));\n        changedPaths1.setIncreased(increased1);\n        changedPaths1.setMissing(missing);\n        changedPaths1.setChanged(changed);\n\n        ChangedPaths changedPaths2 = new ChangedPaths(oldPathMap, newPathMap, new OpenApiDiffOptions(new CompositeConfiguration()));\n        changedPaths2.setIncreased(increased2);\n        changedPaths2.setMissing(missing);\n        changedPaths2.setChanged(changed);\n\n        assertFalse(changedPaths1.equals(changedPaths2));\n    }\n}\n"}]