[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare.schemadiffresult;\n\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.media.ArraySchema;\nimport io.swagger.v3.oas.models.media.Schema;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiff;\nimport org.openapitools.openapidiff.core.compare.SchemaDiff;\nimport org.openapitools.openapidiff.core.model.ChangedSchema;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\nimport org.openapitools.openapidiff.core.model.deferred.RecursiveSchemaSet;\n\nimport static org.mockito.Mockito.*;\n\npublic class ArraySchemaDiffResult_diffTest {\n\n    private ArraySchemaDiffResult arraySchemaDiffResult;\n    private OpenApiDiff openApiDiff;\n    private RecursiveSchemaSet refSet;\n    private Components leftComponents;\n    private Components rightComponents;\n    private ArraySchema leftArraySchema;\n    private ArraySchema rightArraySchema;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        openApiDiff = Mockito.mock(OpenApiDiff.class);\n        arraySchemaDiffResult = new ArraySchemaDiffResult(openApiDiff);\n        refSet = Mockito.mock(RecursiveSchemaSet.class);\n        leftComponents = Mockito.mock(Components.class);\n        rightComponents = Mockito.mock(Components.class);\n        leftArraySchema = Mockito.mock(ArraySchema.class);\n        rightArraySchema = Mockito.mock(ArraySchema.class);\n        context = Mockito.mock(DiffContext.class);\n    }\n\n    @Test\n    public void testDiff_SuccessfulPath() {\n        // Given\n        DeferredChanged<ChangedSchema> superSchemaDiff = Mockito.mock(DeferredChanged.class);\n        DeferredChanged<ChangedSchema> itemsDiff = Mockito.mock(DeferredChanged.class);\n        ChangedSchema changedSchema = Mockito.mock(ChangedSchema.class);\n        Schema<?> leftItems = Mockito.mock(Schema.class);\n        Schema<?> rightItems = Mockito.mock(Schema.class);\n\n        when(leftArraySchema.getItems()).thenReturn(leftItems);\n        when(rightArraySchema.getItems()).thenReturn(rightItems);\n        when(openApiDiff.getSchemaDiff()).thenReturn(Mockito.mock(SchemaDiff.class));\n        when(openApiDiff.getSchemaDiff().diff(refSet, leftItems, rightItems, context.copyWithRequired(true))).thenReturn(itemsDiff);\n        when(superSchemaDiff.flatMap(any())).thenReturn(itemsDiff);\n        when(itemsDiff.ifPresent(any())).thenReturn(itemsDiff);\n        when(itemsDiff.mapOptional(any())).thenReturn(itemsDiff);\n        when(context.copyWithRequired(true)).thenReturn(context);\n\n        // When\n        DeferredChanged<ChangedSchema> result = arraySchemaDiffResult.diff(refSet, leftComponents, rightComponents, leftArraySchema, rightArraySchema, context);\n\n        // Then\n        verify(itemsDiff).ifPresent(any());\n        verify(itemsDiff).mapOptional(any());\n    }\n}\n"}]