[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Optional;\nimport java.util.function.Function;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MockitoExtension.class)\npublic class PendingChanged_mapOptionalTest {\n\n    private PendingChanged<String> pendingChanged;\n\n    @Mock\n    private Function<Optional<String>, Optional<String>> mockFunction;\n\n    @BeforeEach\n    public void setUp() {\n        pendingChanged = new PendingChanged<>();\n    }\n\n    @Test\n    public void testMapOptional_ValueSet() {\n        // Given\n        pendingChanged.setValue(Optional.of(\"test\"));\n        when(mockFunction.apply(any())).thenReturn(Optional.of(\"mapped\"));\n\n        // When\n        DeferredChanged<String> result = pendingChanged.mapOptional(mockFunction);\n\n        // Then\n        assertTrue(result instanceof RealizedChanged);\n        assertEquals(Optional.of(\"mapped\"), ((RealizedChanged<String>) result).get());\n        verify(mockFunction).apply(Optional.of(\"test\"));\n    }\n\n    @Test\n    public void testMapOptional_ValueNotSet() {\n        // Given\n        when(mockFunction.apply(any())).thenReturn(Optional.of(\"mapped\"));\n\n        // When\n        DeferredChanged<String> result = pendingChanged.mapOptional(mockFunction);\n\n        // Then\n        assertTrue(result instanceof PendingChanged);\n        verify(mockFunction, never()).apply(any());\n\n        // Simulate setting the value later\n        pendingChanged.setValue(Optional.of(\"test\"));\n        verify(mockFunction).apply(Optional.of(\"test\"));\n    }\n}\n"}]