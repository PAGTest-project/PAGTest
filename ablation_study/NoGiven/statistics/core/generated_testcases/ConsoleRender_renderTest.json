[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\nimport java.io.OutputStreamWriter;\nimport java.io.IOException;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.model.Endpoint;\nimport org.openapitools.openapidiff.core.model.ChangedOperation;\nimport org.openapitools.openapidiff.core.exception.RendererException;\nimport io.swagger.v3.oas.models.info.Info;\nimport java.util.List;\n\npublic class ConsoleRender_renderTest {\n\n    private ConsoleRender consoleRender;\n    private ChangedOpenApi diff;\n    private OutputStreamWriter outputStreamWriter;\n\n    @BeforeEach\n    public void setUp() {\n        consoleRender = new ConsoleRender();\n        diff = mock(ChangedOpenApi.class);\n        outputStreamWriter = mock(OutputStreamWriter.class);\n    }\n\n    @Test\n    public void testRenderUnchanged() throws IOException {\n        when(diff.isUnchanged()).thenReturn(true);\n\n        consoleRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter).append(\"No differences. Specifications are equivalents\");\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderChanged() throws IOException {\n        when(diff.isUnchanged()).thenReturn(false);\n        ChangedOpenApi newSpecOpenApi = mock(ChangedOpenApi.class);\n        when(diff.getNewSpecOpenApi()).thenReturn(newSpecOpenApi);\n        Info info = mock(Info.class);\n        when(newSpecOpenApi.getInfo()).thenReturn(info);\n        when(info.getTitle()).thenReturn(\"Test API\");\n        when(diff.getNewEndpoints()).thenReturn(List.of(mock(Endpoint.class)));\n        when(diff.getMissingEndpoints()).thenReturn(List.of(mock(Endpoint.class)));\n        when(diff.getDeprecatedEndpoints()).thenReturn(List.of(mock(Endpoint.class)));\n        when(diff.getChangedOperations()).thenReturn(List.of(mock(ChangedOperation.class)));\n        when(diff.isCompatible()).thenReturn(true);\n\n        consoleRender.render(diff, outputStreamWriter);\n\n        verify(outputStreamWriter, atLeastOnce()).append(Mockito.anyString());\n        verify(outputStreamWriter).close();\n    }\n\n    @Test\n    public void testRenderIOException() throws IOException {\n        when(diff.isUnchanged()).thenReturn(true);\n        doThrow(new IOException()).when(outputStreamWriter).close();\n\n        assertThrows(RendererException.class, () -> {\n            consoleRender.render(diff, outputStreamWriter);\n        });\n    }\n}\n"}]