[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.parameters.Parameter;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.ChangedParameters;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredBuilder;\nimport org.openapitools.openapidiff.core.utils.RefPointer;\nimport org.openapitools.openapidiff.core.utils.RefType;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class ParametersDiff_diffTest {\n\n    private static final RefPointer<Parameter> refPointer = new RefPointer<>(RefType.PARAMETERS);\n\n    @Test\n    public void testDiff_AllPathsCovered() {\n        // Given\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        ParametersDiff parametersDiff = new ParametersDiff(openApiDiff);\n        Components leftComponents = new Components();\n        Components rightComponents = new Components();\n        when(openApiDiff.getOldSpecOpenApi()).thenReturn(null);\n        when(openApiDiff.getNewSpecOpenApi()).thenReturn(null);\n        when(openApiDiff.getParameterDiff()).thenReturn(parametersDiff);\n\n        Parameter leftParam = new Parameter().name(\"param1\").in(\"query\");\n        Parameter rightParam = new Parameter().name(\"param1\").in(\"query\");\n        List<Parameter> left = Collections.singletonList(leftParam);\n        List<Parameter> right = Collections.singletonList(rightParam);\n        DiffContext context = new DiffContext(null);\n\n        // When\n        ParametersDiffResult result = parametersDiff.diff(left, right, context);\n\n        // Then\n        assertEquals(0, result.getMissing().size());\n        assertEquals(0, result.getIncreased().size());\n        assertEquals(0, result.getChanged().size());\n    }\n}\n"}]