[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport io.swagger.v3.oas.models.responses.ApiResponse;\nimport io.swagger.v3.oas.models.responses.ApiResponses;\n\npublic class ChangedApiResponse_isCoreChangedTest {\n\n    private ChangedApiResponse changedApiResponse;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        ApiResponses oldApiResponses = new ApiResponses();\n        ApiResponses newApiResponses = new ApiResponses();\n        context = mock(DiffContext.class);\n        changedApiResponse = new ChangedApiResponse(oldApiResponses, newApiResponses, context);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        Map<String, ApiResponse> increased = new HashMap<>();\n        Map<String, ApiResponse> missing = new HashMap<>();\n        changedApiResponse.setIncreased(increased).setMissing(missing);\n\n        // When\n        DiffResult result = changedApiResponse.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible() {\n        // Given\n        Map<String, ApiResponse> increased = new HashMap<>();\n        Map<String, ApiResponse> missing = new HashMap<>();\n        missing.put(\"key\", new ApiResponse());\n        changedApiResponse.setIncreased(increased).setMissing(missing);\n        when(RESPONSE_RESPONSES_DECREASED.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedApiResponse.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        Map<String, ApiResponse> increased = new HashMap<>();\n        Map<String, ApiResponse> missing = new HashMap<>();\n        increased.put(\"key\", new ApiResponse());\n        changedApiResponse.setIncreased(increased).setMissing(missing);\n        when(RESPONSE_RESPONSES_DECREASED.enabled(context)).thenReturn(false);\n\n        // When\n        DiffResult result = changedApiResponse.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n}\n"}]