[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.headers.Header;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ChangedHeaders_equalsTest {\n\n    @Test\n    public void testEquals_SameObject() {\n        ChangedHeaders headers = new ChangedHeaders(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n        assertTrue(headers.equals(headers));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        ChangedHeaders headers = new ChangedHeaders(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n        assertFalse(headers.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        ChangedHeaders headers = new ChangedHeaders(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n        assertFalse(headers.equals(new Object()));\n    }\n\n    @Test\n    public void testEquals_DifferentState() {\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = new DiffContext(null);\n\n        ChangedHeaders headers1 = new ChangedHeaders(oldHeaders, newHeaders, context)\n                .setIncreased(new HashMap<>())\n                .setMissing(new HashMap<>())\n                .setChanged(new HashMap<>());\n\n        ChangedHeaders headers2 = new ChangedHeaders(oldHeaders, newHeaders, context)\n                .setIncreased(new HashMap<>())\n                .setMissing(new HashMap<>())\n                .setChanged(new HashMap<>());\n\n        assertTrue(headers1.equals(headers2));\n\n        Map<String, Header> increasedMap = new HashMap<>();\n        increasedMap.put(\"key\", new Header());\n        headers2.setIncreased(increasedMap);\n        assertFalse(headers1.equals(headers2));\n    }\n\n    @Test\n    public void testHashCode_Consistency() {\n        Map<String, Header> oldHeaders = new HashMap<>();\n        Map<String, Header> newHeaders = new HashMap<>();\n        DiffContext context = new DiffContext(null);\n\n        ChangedHeaders headers = new ChangedHeaders(oldHeaders, newHeaders, context)\n                .setIncreased(new HashMap<>())\n                .setMissing(new HashMap<>())\n                .setChanged(new HashMap<>());\n\n        int hashCode1 = headers.hashCode();\n        int hashCode2 = headers.hashCode();\n\n        assertEquals(hashCode1, hashCode2);\n    }\n}\n"}]