[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.media.Schema;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.schemadiffresult.SchemaDiffResult;\nimport org.openapitools.openapidiff.core.model.ChangedSchema;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class SchemaDiff_getSchemaDiffResultTest {\n\n    @Test\n    public void testGetSchemaDiffResult_ValidClassType() throws Exception {\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        SchemaDiffResult result = SchemaDiff.getSchemaDiffResult(Schema.class, openApiDiff);\n        assert result instanceof SchemaDiffResult;\n    }\n\n    @Test\n    public void testGetSchemaDiffResult_NullClassType() throws Exception {\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        SchemaDiffResult result = SchemaDiff.getSchemaDiffResult(null, openApiDiff);\n        assert result instanceof SchemaDiffResult;\n    }\n\n    @Test\n    public void testGetSchemaDiffResult_InvalidClassType() {\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        assertThrows(IllegalArgumentException.class, () -> {\n            SchemaDiff.getSchemaDiffResult(ChangedSchema.class, openApiDiff);\n        });\n    }\n\n    @Test\n    public void testGetSchemaDiffResult_ExceptionDuringInstantiation() {\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        Class<? extends SchemaDiffResult> mockClass = mock(Class.class);\n        when(SchemaDiff.schemaDiffResultClassMap.get(Schema.class)).thenReturn(mockClass);\n        when(mockClass.getConstructor(OpenApiDiff.class)).thenThrow(new NoSuchMethodException());\n\n        assertThrows(IllegalArgumentException.class, () -> {\n            SchemaDiff.getSchemaDiffResult(Schema.class, openApiDiff);\n        });\n    }\n}\n"}]