[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare.schemadiffresult;\n\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.media.ComposedSchema;\nimport io.swagger.v3.oas.models.media.Discriminator;\nimport io.swagger.v3.oas.models.media.Schema;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiff;\nimport org.openapitools.openapidiff.core.model.ChangedSchema;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\nimport org.openapitools.openapidiff.core.model.deferred.RecursiveSchemaSet;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class ComposedSchemaDiffResult_diffTest {\n\n    @Test\n    public void testDiff_DiscriminatorPropertyChanged() {\n        // Given\n        ComposedSchemaDiffResult composedSchemaDiffResult = new ComposedSchemaDiffResult(mock(OpenApiDiff.class));\n        RecursiveSchemaSet refSet = mock(RecursiveSchemaSet.class);\n        Components leftComponents = mock(Components.class);\n        Components rightComponents = mock(Components.class);\n        ComposedSchema left = mock(ComposedSchema.class);\n        ComposedSchema right = mock(ComposedSchema.class);\n        DiffContext context = mock(DiffContext.class);\n\n        Discriminator leftDis = mock(Discriminator.class);\n        Discriminator rightDis = mock(Discriminator.class);\n\n        when(left.getDiscriminator()).thenReturn(leftDis);\n        when(right.getDiscriminator()).thenReturn(rightDis);\n        when(leftDis.getPropertyName()).thenReturn(\"leftProp\");\n        when(rightDis.getPropertyName()).thenReturn(\"rightProp\");\n\n        // When\n        DeferredChanged<ChangedSchema> result = composedSchemaDiffResult.diff(refSet, leftComponents, rightComponents, left, right, context);\n\n        // Then\n        assertTrue(result.isPresent());\n        assertTrue(result.get().isDiscriminatorPropertyChanged());\n    }\n\n    @Test\n    public void testDiff_NoDiscriminatorChange() {\n        // Given\n        ComposedSchemaDiffResult composedSchemaDiffResult = new ComposedSchemaDiffResult(mock(OpenApiDiff.class));\n        RecursiveSchemaSet refSet = mock(RecursiveSchemaSet.class);\n        Components leftComponents = mock(Components.class);\n        Components rightComponents = mock(Components.class);\n        ComposedSchema left = mock(ComposedSchema.class);\n        ComposedSchema right = mock(ComposedSchema.class);\n        DiffContext context = mock(DiffContext.class);\n\n        Discriminator leftDis = mock(Discriminator.class);\n        Discriminator rightDis = mock(Discriminator.class);\n\n        when(left.getDiscriminator()).thenReturn(leftDis);\n        when(right.getDiscriminator()).thenReturn(rightDis);\n        when(leftDis.getPropertyName()).thenReturn(\"sameProp\");\n        when(rightDis.getPropertyName()).thenReturn(\"sameProp\");\n\n        // When\n        DeferredChanged<ChangedSchema> result = composedSchemaDiffResult.diff(refSet, leftComponents, rightComponents, left, right, context);\n\n        // Then\n        assertTrue(result.isPresent());\n        assertTrue(!result.get().isDiscriminatorPropertyChanged());\n    }\n\n    @Test\n    public void testDiff_NotComposedSchema() {\n        // Given\n        ComposedSchemaDiffResult composedSchemaDiffResult = new ComposedSchemaDiffResult(mock(OpenApiDiff.class));\n        RecursiveSchemaSet refSet = mock(RecursiveSchemaSet.class);\n        Components leftComponents = mock(Components.class);\n        Components rightComponents = mock(Components.class);\n        Schema left = mock(Schema.class);\n        Schema right = mock(Schema.class);\n        DiffContext context = mock(DiffContext.class);\n\n        // When\n        DeferredChanged<ChangedSchema> result = composedSchemaDiffResult.diff(refSet, leftComponents, rightComponents, left, right, context);\n\n        // Then\n        assertTrue(result.isPresent());\n    }\n}\n"}]