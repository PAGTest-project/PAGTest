[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.responses.ApiResponse;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;\nimport org.apache.commons.configuration2.CompositeConfiguration;\n\npublic class ChangedResponse_equalsTest {\n\n    private ChangedResponse changedResponse1;\n    private ChangedResponse changedResponse2;\n    private ChangedResponse changedResponse3;\n\n    @BeforeEach\n    public void setUp() {\n        ApiResponse oldApiResponse = new ApiResponse();\n        ApiResponse newApiResponse = new ApiResponse();\n        CompositeConfiguration config = new CompositeConfiguration();\n        OpenApiDiffOptions options = new OpenApiDiffOptions(config);\n        DiffContext context = new DiffContext(options);\n\n        changedResponse1 = new ChangedResponse(oldApiResponse, newApiResponse, context);\n        changedResponse2 = new ChangedResponse(oldApiResponse, newApiResponse, context);\n        CompositeConfiguration config2 = new CompositeConfiguration();\n        OpenApiDiffOptions options2 = new OpenApiDiffOptions(config2);\n        DiffContext context2 = new DiffContext(options2);\n        changedResponse3 = new ChangedResponse(new ApiResponse(), new ApiResponse(), context2);\n    }\n\n    @Test\n    public void testEquals_SameInstance() {\n        assertTrue(changedResponse1.equals(changedResponse1));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        assertFalse(changedResponse1.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        assertFalse(changedResponse1.equals(new Object()));\n    }\n\n    @Test\n    public void testEquals_SameFields() {\n        assertTrue(changedResponse1.equals(changedResponse2));\n    }\n\n    @Test\n    public void testEquals_DifferentFields() {\n        assertFalse(changedResponse1.equals(changedResponse3));\n    }\n\n    @Test\n    public void testHashCode_Consistency() {\n        assertEquals(changedResponse1.hashCode(), changedResponse2.hashCode());\n        assertNotEquals(changedResponse1.hashCode(), changedResponse3.hashCode());\n    }\n\n    @Test\n    public void testToString_Equality() {\n        assertEquals(changedResponse1.toString(), changedResponse2.toString());\n        assertNotEquals(changedResponse1.toString(), changedResponse3.toString());\n    }\n}\n"}]