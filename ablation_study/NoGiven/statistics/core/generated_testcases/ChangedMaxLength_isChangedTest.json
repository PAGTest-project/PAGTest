[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.DiffResult;\nimport org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;\n\npublic class ChangedMaxLength_isChangedTest {\n\n    @Mock\n    private DiffContext context;\n\n    @Mock\n    private BackwardIncompatibleProp REQUEST_MAX_LENGTH_DECREASED;\n\n    @Mock\n    private BackwardIncompatibleProp RESPONSE_MAX_LENGTH_INCREASED;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testNoChanges() {\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(10, 10, context);\n        assertEquals(DiffResult.NO_CHANGES, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testIncompatibleRequestDecreased() {\n        when(context.isRequest()).thenReturn(true);\n        when(REQUEST_MAX_LENGTH_DECREASED.enabled(context)).thenReturn(true);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(10, 5, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testIncompatibleResponseIncreased() {\n        when(context.isResponse()).thenReturn(true);\n        when(RESPONSE_MAX_LENGTH_INCREASED.enabled(context)).thenReturn(true);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(5, 10, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testCompatibleRequest() {\n        when(context.isRequest()).thenReturn(true);\n        when(REQUEST_MAX_LENGTH_DECREASED.enabled(context)).thenReturn(false);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(10, 5, context);\n        assertEquals(DiffResult.COMPATIBLE, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testCompatibleResponse() {\n        when(context.isResponse()).thenReturn(true);\n        when(RESPONSE_MAX_LENGTH_INCREASED.enabled(context)).thenReturn(false);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(5, 10, context);\n        assertEquals(DiffResult.COMPATIBLE, changedMaxLength.isChanged());\n    }\n}\n"}]