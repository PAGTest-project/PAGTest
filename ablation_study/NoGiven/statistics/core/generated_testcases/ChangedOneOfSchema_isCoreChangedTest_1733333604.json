[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport io.swagger.v3.oas.models.media.Schema;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class ChangedOneOfSchema_isCoreChangedTest {\n\n  @Mock\n  private ChangedOneOfSchema changedOneOfSchema;\n  @Mock\n  private DiffContext context;\n\n  @BeforeEach\n  public void setUp() {\n    MockitoAnnotations.openMocks(this);\n    changedOneOfSchema = new ChangedOneOfSchema(new HashMap<>(), new HashMap<>(), context);\n  }\n\n  @Test\n  public void testIsCoreChanged_NoChanges() {\n    when(changedOneOfSchema.isCoreChanged()).thenReturn(DiffResult.NO_CHANGES);\n    assertEquals(DiffResult.NO_CHANGES, changedOneOfSchema.isCoreChanged());\n  }\n\n  @Test\n  public void testIsCoreChanged_IncompatibleRequest() {\n    Map<String, Schema> missing = new HashMap<>();\n    missing.put(\"key\", new Schema());\n    when(changedOneOfSchema.isCoreChanged()).thenReturn(DiffResult.INCOMPATIBLE);\n    when(context.isRequest()).thenReturn(true);\n    when(REQUEST_ONEOF_DECREASED.enabled(context)).thenReturn(true);\n    assertEquals(DiffResult.INCOMPATIBLE, changedOneOfSchema.isCoreChanged());\n  }\n\n  @Test\n  public void testIsCoreChanged_IncompatibleResponse() {\n    Map<String, Schema> increased = new HashMap<>();\n    increased.put(\"key\", new Schema());\n    when(changedOneOfSchema.isCoreChanged()).thenReturn(DiffResult.INCOMPATIBLE);\n    when(context.isResponse()).thenReturn(true);\n    when(RESPONSE_ONEOF_INCREASED.enabled(context)).thenReturn(true);\n    assertEquals(DiffResult.INCOMPATIBLE, changedOneOfSchema.isCoreChanged());\n  }\n\n  @Test\n  public void testIsCoreChanged_Compatible() {\n    Map<String, Schema> increased = new HashMap<>();\n    increased.put(\"key\", new Schema());\n    when(changedOneOfSchema.isCoreChanged()).thenReturn(DiffResult.COMPATIBLE);\n    when(context.isResponse()).thenReturn(true);\n    when(RESPONSE_ONEOF_INCREASED.enabled(context)).thenReturn(false);\n    assertEquals(DiffResult.COMPATIBLE, changedOneOfSchema.isCoreChanged());\n  }\n}\n"}]