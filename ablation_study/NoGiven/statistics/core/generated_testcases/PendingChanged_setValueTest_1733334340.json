[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.util.Optional;\nimport java.util.function.Consumer;\n\npublic class PendingChanged_setValueTest {\n\n    @Test\n    public void testSetValue_FirstTime() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n        Optional<String> value = Optional.of(\"test\");\n\n        pendingChanged.setValue(value);\n\n        assertTrue(pendingChanged.isValueSet());\n        assertTrue(pendingChanged.isPresent());\n        assertEquals(\"test\", pendingChanged.get());\n    }\n\n    @Test\n    public void testSetValue_SecondTime() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n        Optional<String> value = Optional.of(\"test\");\n\n        pendingChanged.setValue(value);\n\n        IllegalStateException exception = assertThrows(IllegalStateException.class, () -> {\n            pendingChanged.setValue(value);\n        });\n\n        assertEquals(\"PendingChanged may not be set more than once. Value was already set.\", exception.getMessage());\n    }\n\n    @Test\n    public void testSetValue_EmptyOptional() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n        Optional<String> value = Optional.empty();\n\n        pendingChanged.setValue(value);\n\n        assertTrue(pendingChanged.isValueSet());\n        assertFalse(pendingChanged.isPresent());\n        assertNull(pendingChanged.get());\n    }\n\n    @Test\n    public void testSetValue_Consumers() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n        Optional<String> value = Optional.of(\"test\");\n        Consumer<String> ifPresentConsumer = mock(Consumer.class);\n        Consumer<Optional<String>> whenSetConsumer = mock(Consumer.class);\n\n        pendingChanged.ifPresent(ifPresentConsumer);\n        pendingChanged.whenSet(whenSetConsumer);\n\n        pendingChanged.setValue(value);\n\n        verify(ifPresentConsumer).accept(\"test\");\n        verify(whenSetConsumer).accept(value);\n    }\n\n    private <T> Consumer<T> mock(Class<Consumer<T>> classToMock) {\n        return null; // Mocking logic would go here\n    }\n}\n"}]