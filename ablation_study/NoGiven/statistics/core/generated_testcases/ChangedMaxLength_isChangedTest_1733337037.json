[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.DiffResult;\n\npublic class ChangedMaxLength_isChangedTest {\n\n    @Test\n    public void testNoChanges() {\n        DiffContext context = mock(DiffContext.class);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(10, 10, context);\n        assertEquals(DiffResult.NO_CHANGES, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testIncompatibleRequestDecreased() {\n        DiffContext context = mock(DiffContext.class);\n        when(context.isRequest()).thenReturn(true);\n        when(REQUEST_MAX_LENGTH_DECREASED.enabled(context)).thenReturn(true);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(10, 5, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testIncompatibleResponseIncreased() {\n        DiffContext context = mock(DiffContext.class);\n        when(context.isResponse()).thenReturn(true);\n        when(RESPONSE_MAX_LENGTH_INCREASED.enabled(context)).thenReturn(true);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(5, 10, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testCompatibleRequest() {\n        DiffContext context = mock(DiffContext.class);\n        when(context.isRequest()).thenReturn(true);\n        when(REQUEST_MAX_LENGTH_DECREASED.enabled(context)).thenReturn(false);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(10, 5, context);\n        assertEquals(DiffResult.COMPATIBLE, changedMaxLength.isChanged());\n    }\n\n    @Test\n    public void testCompatibleResponse() {\n        DiffContext context = mock(DiffContext.class);\n        when(context.isResponse()).thenReturn(true);\n        when(RESPONSE_MAX_LENGTH_INCREASED.enabled(context)).thenReturn(false);\n        ChangedMaxLength changedMaxLength = new ChangedMaxLength(5, 10, context);\n        assertEquals(DiffResult.COMPATIBLE, changedMaxLength.isChanged());\n    }\n}\n"}]