[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.SecuritySchemeDiffResult;\n\npublic class ChangedOAuthFlow_isCoreChangedTest {\n\n    private ChangedOAuthFlow changedOAuthFlow;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = mock(DiffContext.class);\n        changedOAuthFlow = new ChangedOAuthFlow(null, null, context);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        changedOAuthFlow.setAuthorizationUrl(false).setTokenUrl(false).setRefreshUrl(false);\n\n        // When\n        DiffResult result = changedOAuthFlow.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_AuthorizationUrl() {\n        // Given\n        changedOAuthFlow.setAuthorizationUrl(true).setTokenUrl(false).setRefreshUrl(false);\n        when(SecuritySchemeDiffResult.SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedOAuthFlow.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_TokenUrl() {\n        // Given\n        changedOAuthFlow.setAuthorizationUrl(false).setTokenUrl(true).setRefreshUrl(false);\n        when(SecuritySchemeDiffResult.SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedOAuthFlow.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_RefreshUrl() {\n        // Given\n        changedOAuthFlow.setAuthorizationUrl(false).setTokenUrl(false).setRefreshUrl(true);\n        when(SecuritySchemeDiffResult.SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedOAuthFlow.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        changedOAuthFlow.setAuthorizationUrl(true).setTokenUrl(true).setRefreshUrl(true);\n        when(SecuritySchemeDiffResult.SECURITY_SCHEME_OAUTH2_AUTH_URL_CHANGED.enabled(context)).thenReturn(false);\n        when(SecuritySchemeDiffResult.SECURITY_SCHEME_OAUTH2_TOKEN_URL_CHANGED.enabled(context)).thenReturn(false);\n        when(SecuritySchemeDiffResult.SECURITY_SCHEME_OAUTH2_REFRESH_URL_CHANGED.enabled(context)).thenReturn(false);\n\n        // When\n        DiffResult result = changedOAuthFlow.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n}\n"}]