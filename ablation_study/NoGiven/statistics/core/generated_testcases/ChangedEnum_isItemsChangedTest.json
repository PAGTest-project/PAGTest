[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.DiffResult;\nimport org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;\nimport org.mockito.Mockito;\n\npublic class ChangedEnum_isItemsChangedTest {\n\n    private DiffContext context;\n    private ChangedEnum<String> changedEnum;\n\n    @BeforeEach\n    public void setUp() {\n        context = mock(DiffContext.class);\n    }\n\n    @Test\n    public void testIsItemsChanged_RequestEnumDecreased() {\n        List<String> oldValue = Arrays.asList(\"A\", \"B\", \"C\");\n        List<String> newValue = Arrays.asList(\"A\", \"B\");\n        changedEnum = new ChangedEnum<>(oldValue, newValue, context);\n\n        when(context.isRequest()).thenReturn(true);\n        when(context.isResponse()).thenReturn(false);\n        when(BackwardIncompatibleProp.REQUEST_ENUM_DECREASED.enabled(context)).thenReturn(true);\n\n        assertEquals(DiffResult.INCOMPATIBLE, changedEnum.isItemsChanged());\n    }\n\n    @Test\n    public void testIsItemsChanged_ResponseEnumIncreased() {\n        List<String> oldValue = Arrays.asList(\"A\", \"B\");\n        List<String> newValue = Arrays.asList(\"A\", \"B\", \"C\");\n        changedEnum = new ChangedEnum<>(oldValue, newValue, context);\n\n        when(context.isRequest()).thenReturn(false);\n        when(context.isResponse()).thenReturn(true);\n        when(BackwardIncompatibleProp.RESPONSE_ENUM_INCREASED.enabled(context)).thenReturn(true);\n\n        assertEquals(DiffResult.INCOMPATIBLE, changedEnum.isItemsChanged());\n    }\n\n    @Test\n    public void testIsItemsChanged_Compatible() {\n        List<String> oldValue = Arrays.asList(\"A\", \"B\");\n        List<String> newValue = Arrays.asList(\"A\", \"B\");\n        changedEnum = new ChangedEnum<>(oldValue, newValue, context);\n\n        when(context.isRequest()).thenReturn(false);\n        when(context.isResponse()).thenReturn(false);\n\n        assertEquals(DiffResult.COMPATIBLE, changedEnum.isItemsChanged());\n    }\n}\n"}]