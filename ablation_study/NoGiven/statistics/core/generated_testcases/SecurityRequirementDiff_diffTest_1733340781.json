[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.security.SecurityRequirement;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.ChangedSecurityRequirement;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\npublic class SecurityRequirementDiff_diffTest {\n\n    @Test\n    public void testDiff_LeftNullRightNull() {\n        SecurityRequirementDiff securityRequirementDiff = new SecurityRequirementDiff(Mockito.mock(OpenApiDiff.class));\n        DiffContext context = Mockito.mock(DiffContext.class);\n\n        DeferredChanged<ChangedSecurityRequirement> result = securityRequirementDiff.diff(null, null, context);\n\n        assertTrue(result.isPresent());\n        ChangedSecurityRequirement changedSecurityRequirement = result.get();\n        assertTrue(changedSecurityRequirement.getMissing().isEmpty());\n        assertTrue(changedSecurityRequirement.getIncreased().isEmpty());\n    }\n\n    @Test\n    public void testDiff_LeftNotNullRightNull() {\n        SecurityRequirementDiff securityRequirementDiff = new SecurityRequirementDiff(Mockito.mock(OpenApiDiff.class));\n        DiffContext context = Mockito.mock(DiffContext.class);\n        SecurityRequirement left = new SecurityRequirement();\n        left.put(\"scheme1\", Arrays.asList(\"scope1\", \"scope2\"));\n\n        DeferredChanged<ChangedSecurityRequirement> result = securityRequirementDiff.diff(left, null, context);\n\n        assertTrue(result.isPresent());\n        ChangedSecurityRequirement changedSecurityRequirement = result.get();\n        assertTrue(changedSecurityRequirement.getMissing().containsKey(\"scheme1\"));\n        assertTrue(changedSecurityRequirement.getIncreased().isEmpty());\n    }\n\n    @Test\n    public void testDiff_LeftNullRightNotNull() {\n        SecurityRequirementDiff securityRequirementDiff = new SecurityRequirementDiff(Mockito.mock(OpenApiDiff.class));\n        DiffContext context = Mockito.mock(DiffContext.class);\n        SecurityRequirement right = new SecurityRequirement();\n        right.put(\"scheme1\", Arrays.asList(\"scope1\", \"scope2\"));\n\n        DeferredChanged<ChangedSecurityRequirement> result = securityRequirementDiff.diff(null, right, context);\n\n        assertTrue(result.isPresent());\n        ChangedSecurityRequirement changedSecurityRequirement = result.get();\n        assertTrue(changedSecurityRequirement.getMissing().isEmpty());\n        assertTrue(changedSecurityRequirement.getIncreased().containsKey(\"scheme1\"));\n    }\n\n    @Test\n    public void testDiff_LeftAndRightNotNull() {\n        SecurityRequirementDiff securityRequirementDiff = new SecurityRequirementDiff(Mockito.mock(OpenApiDiff.class));\n        DiffContext context = Mockito.mock(DiffContext.class);\n        SecurityRequirement left = new SecurityRequirement();\n        left.put(\"scheme1\", Arrays.asList(\"scope1\", \"scope2\"));\n        SecurityRequirement right = new SecurityRequirement();\n        right.put(\"scheme1\", Arrays.asList(\"scope1\", \"scope2\"));\n\n        DeferredChanged<ChangedSecurityRequirement> result = securityRequirementDiff.diff(left, right, context);\n\n        assertTrue(result.isPresent());\n        ChangedSecurityRequirement changedSecurityRequirement = result.get();\n        assertTrue(changedSecurityRequirement.getMissing().isEmpty());\n        assertTrue(changedSecurityRequirement.getIncreased().isEmpty());\n    }\n\n    @Test\n    public void testDiff_LeftAndRightDifferent() {\n        SecurityRequirementDiff securityRequirementDiff = new SecurityRequirementDiff(Mockito.mock(OpenApiDiff.class));\n        DiffContext context = Mockito.mock(DiffContext.class);\n        SecurityRequirement left = new SecurityRequirement();\n        left.put(\"scheme1\", Arrays.asList(\"scope1\", \"scope2\"));\n        SecurityRequirement right = new SecurityRequirement();\n        right.put(\"scheme2\", Arrays.asList(\"scope3\", \"scope4\"));\n\n        DeferredChanged<ChangedSecurityRequirement> result = securityRequirementDiff.diff(left, right, context);\n\n        assertTrue(result.isPresent());\n        ChangedSecurityRequirement changedSecurityRequirement = result.get();\n        assertTrue(changedSecurityRequirement.getMissing().containsKey(\"scheme1\"));\n        assertTrue(changedSecurityRequirement.getIncreased().containsKey(\"scheme2\"));\n    }\n}\n"}]