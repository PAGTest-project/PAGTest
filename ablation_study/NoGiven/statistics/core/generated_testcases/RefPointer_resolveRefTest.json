[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.utils;\n\nimport io.swagger.v3.oas.models.Components;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\nimport java.util.Map;\n\nclass RefPointer_resolveRefTest {\n\n    @Test\n    void testResolveRef_WithValidRef() {\n        // Given\n        Components components = mock(Components.class);\n        RefPointer<String> refPointer = new RefPointer<>(RefType.SCHEMAS);\n        String ref = \"#/components/schemas/SchemaName\";\n        String expectedResult = \"SchemaValue\";\n\n        when(components.getSchemas()).thenReturn(Map.of(\"SchemaName\", expectedResult));\n\n        // When\n        String result = refPointer.resolveRef(components, \"DefaultValue\", ref);\n\n        // Then\n        assertEquals(expectedResult, result);\n    }\n\n    @Test\n    void testResolveRef_WithNullRef() {\n        // Given\n        Components components = mock(Components.class);\n        RefPointer<String> refPointer = new RefPointer<>(RefType.SCHEMAS);\n        String defaultValue = \"DefaultValue\";\n\n        // When\n        String result = refPointer.resolveRef(components, defaultValue, null);\n\n        // Then\n        assertEquals(defaultValue, result);\n    }\n\n    @Test\n    void testResolveRef_WithNonExistentRef() {\n        // Given\n        Components components = mock(Components.class);\n        RefPointer<String> refPointer = new RefPointer<>(RefType.SCHEMAS);\n        String ref = \"#/components/schemas/NonExistentSchema\";\n\n        when(components.getSchemas()).thenReturn(Map.of());\n\n        // When & Then\n        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {\n            refPointer.resolveRef(components, \"DefaultValue\", ref);\n        });\n\n        assertEquals(\"ref 'NonExistentSchema' doesn't exist.\", exception.getMessage());\n    }\n}\n"}]