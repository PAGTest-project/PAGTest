[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.ChangedOpenApi;\nimport org.openapitools.openapidiff.core.model.Endpoint;\nimport org.openapitools.openapidiff.core.model.ChangedOperation;\nimport java.io.OutputStreamWriter;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.mockito.Mockito.*;\n\npublic class HtmlRender_renderTest {\n\n    @Test\n    public void testRender_AllSectionsPopulated() throws Exception {\n        // Given\n        HtmlRender htmlRender = new HtmlRender();\n        ChangedOpenApi diff = mock(ChangedOpenApi.class);\n        OutputStreamWriter outputStreamWriter = mock(OutputStreamWriter.class);\n\n        List<Endpoint> newEndpoints = Collections.singletonList(new Endpoint());\n        List<Endpoint> missingEndpoints = Collections.singletonList(new Endpoint());\n        List<Endpoint> deprecatedEndpoints = Collections.singletonList(new Endpoint());\n        List<ChangedOperation> changedOperations = Collections.singletonList(new ChangedOperation(null, null, null, null));\n\n        when(diff.getNewEndpoints()).thenReturn(newEndpoints);\n        when(diff.getMissingEndpoints()).thenReturn(missingEndpoints);\n        when(diff.getDeprecatedEndpoints()).thenReturn(deprecatedEndpoints);\n        when(diff.getChangedOperations()).thenReturn(changedOperations);\n\n        // When\n        htmlRender.render(diff, outputStreamWriter);\n\n        // Then\n        verify(diff, times(1)).getNewEndpoints();\n        verify(diff, times(1)).getMissingEndpoints();\n        verify(diff, times(1)).getDeprecatedEndpoints();\n        verify(diff, times(1)).getChangedOperations();\n        verify(outputStreamWriter, times(1)).close();\n    }\n}\n"}]