[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.responses.ApiResponse;\nimport io.swagger.v3.oas.models.responses.ApiResponses;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.Changed;\nimport org.openapitools.openapidiff.core.model.ChangedApiResponse;\nimport org.openapitools.openapidiff.core.model.ChangedResponse;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredBuilder;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\n\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class ApiResponseDiff_diffTest {\n\n    @Test\n    public void testDiff_WithSharedResponseCodes() {\n        // Given\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        ApiResponseDiff apiResponseDiff = new ApiResponseDiff(openApiDiff);\n\n        ApiResponses left = new ApiResponses();\n        ApiResponses right = new ApiResponses();\n        left.addApiResponse(\"200\", new ApiResponse().description(\"OK\"));\n        right.addApiResponse(\"200\", new ApiResponse().description(\"OK\"));\n\n        DiffContext context = mock(DiffContext.class);\n        MapKeyDiff<String, ApiResponse> mapKeyDiff = mock(MapKeyDiff.class);\n        when(mapKeyDiff.getSharedKey()).thenReturn(Collections.singletonList(\"200\"));\n        when(mapKeyDiff.getIncreased()).thenReturn(Collections.emptyMap());\n        when(mapKeyDiff.getMissing()).thenReturn(Collections.emptyMap());\n        when(MapKeyDiff.diff(left, right)).thenReturn(mapKeyDiff);\n\n        DeferredChanged<ChangedResponse> changedResponseDeferred = mock(DeferredChanged.class);\n        ChangedResponse changedResponse = mock(ChangedResponse.class);\n        when(changedResponseDeferred.get()).thenReturn(changedResponse);\n        when(openApiDiff.getResponseDiff()).thenReturn(mock(ResponseDiff.class));\n        when(openApiDiff.getResponseDiff().diff(left.get(\"200\"), right.get(\"200\"), context))\n                .thenReturn(changedResponseDeferred);\n\n        DeferredChanged<ChangedExtensions> changedExtensionsDeferred = mock(DeferredChanged.class);\n        ChangedExtensions changedExtensions = mock(ChangedExtensions.class);\n        when(changedExtensionsDeferred.get()).thenReturn(changedExtensions);\n        when(openApiDiff.getExtensionsDiff()).thenReturn(mock(ExtensionsDiff.class));\n        when(openApiDiff.getExtensionsDiff().diff(left.getExtensions(), right.getExtensions(), context))\n                .thenReturn(changedExtensionsDeferred);\n\n        // When\n        DeferredChanged<ChangedApiResponse> result = apiResponseDiff.diff(left, right, context);\n\n        // Then\n        ChangedApiResponse changedApiResponse = result.get();\n        assertEquals(1, changedApiResponse.getChanged().size());\n        assertEquals(changedResponse, changedApiResponse.getChanged().get(\"200\"));\n        assertEquals(changedExtensions, changedApiResponse.getExtensions());\n    }\n}\n"}]