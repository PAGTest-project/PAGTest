[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class ChangedExtensions_isCoreChangedTest {\n\n    private ChangedExtensions changedExtensions;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        Map<String, Object> oldExtensions = new HashMap<>();\n        Map<String, Object> newExtensions = new HashMap<>();\n        context = mock(DiffContext.class);\n        changedExtensions = new ChangedExtensions(oldExtensions, newExtensions, context);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        Map<String, Changed> increased = new HashMap<>();\n        Map<String, Changed> missing = new HashMap<>();\n        changedExtensions.setIncreased(increased);\n        changedExtensions.setMissing(missing);\n\n        // When\n        DiffResult result = changedExtensions.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_IncompatibleDueToMissing() {\n        // Given\n        Map<String, Changed> increased = new HashMap<>();\n        Map<String, Changed> missing = new HashMap<>();\n        missing.put(\"key1\", mock(Changed.class));\n        changedExtensions.setIncreased(increased);\n        changedExtensions.setMissing(missing);\n\n        when(BackwardIncompatibleProp.EXTENSION_CONTENT_TYPES_DECREASED.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedExtensions.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        Map<String, Changed> increased = new HashMap<>();\n        Map<String, Changed> missing = new HashMap<>();\n        missing.put(\"key1\", mock(Changed.class));\n        changedExtensions.setIncreased(increased);\n        changedExtensions.setMissing(missing);\n\n        when(BackwardIncompatibleProp.EXTENSION_CONTENT_TYPES_DECREASED.enabled(context)).thenReturn(false);\n        when(BackwardIncompatibleProp.EXTENSION_CONTENT_TYPE_DELETED.enabled(context, \"key1\")).thenReturn(false);\n\n        // When\n        DiffResult result = changedExtensions.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_IncompatibleDueToDeleted() {\n        // Given\n        Map<String, Changed> increased = new HashMap<>();\n        Map<String, Changed> missing = new HashMap<>();\n        missing.put(\"key1\", mock(Changed.class));\n        changedExtensions.setIncreased(increased);\n        changedExtensions.setMissing(missing);\n\n        when(BackwardIncompatibleProp.EXTENSION_CONTENT_TYPES_DECREASED.enabled(context)).thenReturn(false);\n        when(BackwardIncompatibleProp.EXTENSION_CONTENT_TYPE_DELETED.enabled(context, \"key1\")).thenReturn(true);\n\n        // When\n        DiffResult result = changedExtensions.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n}\n"}]