[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.security.SecurityScheme;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.ChangedSecurityScheme;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\nimport org.openapitools.openapidiff.core.model.deferred.RealizedChanged;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.when;\n\npublic class SecuritySchemeDiff_diffTest {\n\n    private SecuritySchemeDiff securitySchemeDiff;\n    private OpenApiDiff openApiDiff;\n    private Components leftComponents;\n    private Components rightComponents;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        openApiDiff = Mockito.mock(OpenApiDiff.class);\n        leftComponents = Mockito.mock(Components.class);\n        rightComponents = Mockito.mock(Components.class);\n        context = Mockito.mock(DiffContext.class);\n\n        when(openApiDiff.getOldSpecOpenApi()).thenReturn(null);\n        when(openApiDiff.getNewSpecOpenApi()).thenReturn(null);\n\n        securitySchemeDiff = new SecuritySchemeDiff(openApiDiff);\n    }\n\n    @Test\n    public void testDiff_OAuth2Type_ScopesChanged() {\n        String leftSchemeRef = \"leftSchemeRef\";\n        String rightSchemeRef = \"rightSchemeRef\";\n        List<String> leftScopes = Collections.singletonList(\"scope1\");\n        List<String> rightScopes = Collections.singletonList(\"scope2\");\n\n        SecurityScheme leftSecurityScheme = new SecurityScheme();\n        leftSecurityScheme.setType(SecurityScheme.Type.OAUTH2);\n        SecurityScheme rightSecurityScheme = new SecurityScheme();\n        rightSecurityScheme.setType(SecurityScheme.Type.OAUTH2);\n\n        when(leftComponents.getSecuritySchemes()).thenReturn(Collections.singletonMap(leftSchemeRef, leftSecurityScheme));\n        when(rightComponents.getSecuritySchemes()).thenReturn(Collections.singletonMap(rightSchemeRef, rightSecurityScheme));\n\n        DeferredChanged<ChangedSecurityScheme> changedSecuritySchemeOpt = new RealizedChanged<>(new ChangedSecurityScheme(leftSecurityScheme, rightSecurityScheme, context));\n        when(securitySchemeDiff.cachedDiff(Mockito.anySet(), Mockito.any(), Mockito.any(), Mockito.anyString(), Mockito.anyString(), Mockito.any())).thenReturn(changedSecuritySchemeOpt);\n\n        DeferredChanged<ChangedSecurityScheme> result = securitySchemeDiff.diff(leftSchemeRef, leftScopes, rightSchemeRef, rightScopes, context);\n\n        assertNotNull(result);\n    }\n}\n"}]