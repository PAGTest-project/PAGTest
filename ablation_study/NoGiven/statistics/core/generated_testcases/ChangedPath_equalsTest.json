[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport io.swagger.v3.oas.models.Operation;\nimport io.swagger.v3.oas.models.PathItem;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ChangedPath_equalsTest {\n\n    private ChangedPath changedPath1;\n    private ChangedPath changedPath2;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = new DiffContext(null);\n        changedPath1 = new ChangedPath(\"path1\", new PathItem(), new PathItem(), context);\n        changedPath2 = new ChangedPath(\"path1\", new PathItem(), new PathItem(), context);\n    }\n\n    @Test\n    public void testEquals_SameObject() {\n        assertTrue(changedPath1.equals(changedPath1));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        assertFalse(changedPath1.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        assertFalse(changedPath1.equals(\"Not a ChangedPath object\"));\n    }\n\n    @Test\n    public void testEquals_DifferentPathUrl() {\n        changedPath2 = new ChangedPath(\"path2\", new PathItem(), new PathItem(), context);\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_DifferentOldPath() {\n        changedPath2 = new ChangedPath(\"path1\", new PathItem().description(\"old\"), new PathItem(), context);\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_DifferentNewPath() {\n        changedPath2 = new ChangedPath(\"path1\", new PathItem(), new PathItem().description(\"new\"), context);\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_DifferentContext() {\n        DiffContext differentContext = new DiffContext(null).setUrl(\"differentUrl\");\n        changedPath2 = new ChangedPath(\"path1\", new PathItem(), new PathItem(), differentContext);\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_DifferentIncreased() {\n        Map<PathItem.HttpMethod, Operation> increased = new HashMap<>();\n        increased.put(PathItem.HttpMethod.GET, new Operation());\n        changedPath2.setIncreased(increased);\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_DifferentMissing() {\n        Map<PathItem.HttpMethod, Operation> missing = new HashMap<>();\n        missing.put(PathItem.HttpMethod.POST, new Operation());\n        changedPath2.setMissing(missing);\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_DifferentChanged() {\n        changedPath2.setChanged(List.of(new ChangedOperation(\"path1\", PathItem.HttpMethod.GET, new Operation(), new Operation())));\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_DifferentExtensions() {\n        changedPath2.setExtensions(new ChangedExtensions(null, null, context));\n        assertFalse(changedPath1.equals(changedPath2));\n    }\n\n    @Test\n    public void testEquals_AllFieldsEqual() {\n        assertTrue(changedPath1.equals(changedPath2));\n    }\n}\n"}]