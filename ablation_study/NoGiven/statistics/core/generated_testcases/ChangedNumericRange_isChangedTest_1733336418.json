[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.math.BigDecimal;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.DiffResult;\n\npublic class ChangedNumericRange_isChangedTest {\n\n    private DiffContext context;\n    private ChangedNumericRange changedNumericRange;\n\n    @BeforeEach\n    public void setUp() {\n        context = mock(DiffContext.class);\n    }\n\n    @Test\n    public void testNoChanges() {\n        changedNumericRange = new ChangedNumericRange(\n            new BigDecimal(\"10\"), new BigDecimal(\"10\"),\n            new BigDecimal(\"20\"), new BigDecimal(\"20\"),\n            true, true,\n            true, true,\n            context\n        );\n        assertEquals(DiffResult.NO_CHANGES, changedNumericRange.isChanged());\n    }\n\n    @Test\n    public void testCompatibleRequest() {\n        when(context.isRequest()).thenReturn(true);\n        when(context.isResponse()).thenReturn(false);\n        changedNumericRange = new ChangedNumericRange(\n            new BigDecimal(\"10\"), new BigDecimal(\"10\"),\n            new BigDecimal(\"20\"), new BigDecimal(\"20\"),\n            true, false,\n            true, false,\n            context\n        );\n        assertEquals(DiffResult.COMPATIBLE, changedNumericRange.isChanged());\n    }\n\n    @Test\n    public void testIncompatibleRequest() {\n        when(context.isRequest()).thenReturn(true);\n        when(context.isResponse()).thenReturn(false);\n        changedNumericRange = new ChangedNumericRange(\n            new BigDecimal(\"10\"), new BigDecimal(\"15\"),\n            new BigDecimal(\"20\"), new BigDecimal(\"15\"),\n            false, false,\n            false, false,\n            context\n        );\n        assertEquals(DiffResult.INCOMPATIBLE, changedNumericRange.isChanged());\n    }\n\n    @Test\n    public void testCompatibleResponse() {\n        when(context.isRequest()).thenReturn(false);\n        when(context.isResponse()).thenReturn(true);\n        changedNumericRange = new ChangedNumericRange(\n            new BigDecimal(\"10\"), new BigDecimal(\"10\"),\n            new BigDecimal(\"20\"), new BigDecimal(\"20\"),\n            false, true,\n            false, true,\n            context\n        );\n        assertEquals(DiffResult.COMPATIBLE, changedNumericRange.isChanged());\n    }\n\n    @Test\n    public void testIncompatibleResponse() {\n        when(context.isRequest()).thenReturn(false);\n        when(context.isResponse()).thenReturn(true);\n        changedNumericRange = new ChangedNumericRange(\n            new BigDecimal(\"10\"), new BigDecimal(\"5\"),\n            new BigDecimal(\"20\"), new BigDecimal(\"25\"),\n            false, false,\n            false, false,\n            context\n        );\n        assertEquals(DiffResult.INCOMPATIBLE, changedNumericRange.isChanged());\n    }\n}\n"}]