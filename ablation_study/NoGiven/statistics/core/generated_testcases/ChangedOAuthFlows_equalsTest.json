[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.security.OAuthFlows;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ChangedOAuthFlows_equalsTest {\n\n    @Test\n    public void testEquals_SameInstance() {\n        ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(new OAuthFlows(), new OAuthFlows());\n        assertTrue(changedOAuthFlows.equals(changedOAuthFlows));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(new OAuthFlows(), new OAuthFlows());\n        assertFalse(changedOAuthFlows.equals(new Object()));\n    }\n\n    @Test\n    public void testEquals_Null() {\n        ChangedOAuthFlows changedOAuthFlows = new ChangedOAuthFlows(new OAuthFlows(), new OAuthFlows());\n        assertFalse(changedOAuthFlows.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentFields() {\n        OAuthFlows oldOAuthFlows = new OAuthFlows();\n        OAuthFlows newOAuthFlows = new OAuthFlows();\n        ChangedOAuthFlows changedOAuthFlows1 = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows)\n                .setImplicitOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setPasswordOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setClientCredentialOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setAuthorizationCodeOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setExtensions(new ChangedExtensions(null, null, null));\n\n        ChangedOAuthFlows changedOAuthFlows2 = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows)\n                .setImplicitOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setPasswordOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setClientCredentialOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setAuthorizationCodeOAuthFlow(new ChangedOAuthFlow(null, null, null))\n                .setExtensions(new ChangedExtensions(null, null, null));\n\n        assertTrue(changedOAuthFlows1.equals(changedOAuthFlows2));\n    }\n\n    @Test\n    public void testEquals_DifferentOldOAuthFlows() {\n        OAuthFlows oldOAuthFlows1 = new OAuthFlows();\n        OAuthFlows oldOAuthFlows2 = new OAuthFlows();\n        OAuthFlows newOAuthFlows = new OAuthFlows();\n        ChangedOAuthFlows changedOAuthFlows1 = new ChangedOAuthFlows(oldOAuthFlows1, newOAuthFlows);\n        ChangedOAuthFlows changedOAuthFlows2 = new ChangedOAuthFlows(oldOAuthFlows2, newOAuthFlows);\n\n        assertFalse(changedOAuthFlows1.equals(changedOAuthFlows2));\n    }\n\n    @Test\n    public void testEquals_DifferentNewOAuthFlows() {\n        OAuthFlows oldOAuthFlows = new OAuthFlows();\n        OAuthFlows newOAuthFlows1 = new OAuthFlows();\n        OAuthFlows newOAuthFlows2 = new OAuthFlows();\n        ChangedOAuthFlows changedOAuthFlows1 = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows1);\n        ChangedOAuthFlows changedOAuthFlows2 = new ChangedOAuthFlows(oldOAuthFlows, newOAuthFlows2);\n\n        assertFalse(changedOAuthFlows1.equals(changedOAuthFlows2));\n    }\n}\n"}]