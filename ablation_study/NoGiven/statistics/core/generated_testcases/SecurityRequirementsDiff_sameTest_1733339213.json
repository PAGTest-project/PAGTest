[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.security.SecurityRequirement;\nimport io.swagger.v3.oas.models.security.SecurityScheme;\nimport org.apache.commons.lang3.tuple.ImmutablePair;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class SecurityRequirementsDiff_sameTest {\n\n    private SecurityRequirementsDiff securityRequirementsDiff;\n    private Components leftComponents;\n    private Components rightComponents;\n\n    @BeforeEach\n    public void setUp() {\n        OpenApiDiff openApiDiff = Mockito.mock(OpenApiDiff.class);\n        leftComponents = new Components();\n        rightComponents = new Components();\n        Mockito.when(openApiDiff.getOldSpecOpenApi()).thenReturn(null);\n        Mockito.when(openApiDiff.getNewSpecOpenApi()).thenReturn(null);\n        securityRequirementsDiff = new SecurityRequirementsDiff(openApiDiff);\n        securityRequirementsDiff.setLeftComponents(leftComponents);\n        securityRequirementsDiff.setRightComponents(rightComponents);\n    }\n\n    @Test\n    public void testSame_EqualSecurityRequirements() {\n        SecurityRequirement left = new SecurityRequirement();\n        SecurityRequirement right = new SecurityRequirement();\n\n        left.addList(\"scheme1\", Collections.singletonList(\"scope1\"));\n        right.addList(\"scheme1\", Collections.singletonList(\"scope1\"));\n\n        leftComponents.addSecuritySchemes(\"scheme1\", new SecurityScheme().type(SecurityScheme.Type.HTTP).in(SecurityScheme.In.HEADER));\n        rightComponents.addSecuritySchemes(\"scheme1\", new SecurityScheme().type(SecurityScheme.Type.HTTP).in(SecurityScheme.In.HEADER));\n\n        assertTrue(securityRequirementsDiff.same(left, right));\n    }\n\n    @Test\n    public void testSame_DifferentSecurityRequirements() {\n        SecurityRequirement left = new SecurityRequirement();\n        SecurityRequirement right = new SecurityRequirement();\n\n        left.addList(\"scheme1\", Collections.singletonList(\"scope1\"));\n        right.addList(\"scheme2\", Collections.singletonList(\"scope2\"));\n\n        leftComponents.addSecuritySchemes(\"scheme1\", new SecurityScheme().type(SecurityScheme.Type.HTTP).in(SecurityScheme.In.HEADER));\n        rightComponents.addSecuritySchemes(\"scheme2\", new SecurityScheme().type(SecurityScheme.Type.APIKEY).in(SecurityScheme.In.QUERY));\n\n        assertFalse(securityRequirementsDiff.same(left, right));\n    }\n}\n"}]