[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.ChangedList;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nclass ListDiff_diffTest {\n\n    @Test\n    void testDiff_AllNull() {\n        ChangedListImpl<String> instance = new ChangedListImpl<>(null, null);\n        ChangedList<String> result = ListDiff.diff(instance);\n        assertEquals(instance, result);\n    }\n\n    @Test\n    void testDiff_OldValueNull() {\n        ChangedListImpl<String> instance = new ChangedListImpl<>(null, Arrays.asList(\"new1\", \"new2\"));\n        ChangedList<String> result = ListDiff.diff(instance);\n        assertEquals(Arrays.asList(\"new1\", \"new2\"), result.getIncreased());\n        assertTrue(result.getMissing().isEmpty());\n        assertTrue(result.getShared().isEmpty());\n    }\n\n    @Test\n    void testDiff_NewValueNull() {\n        ChangedListImpl<String> instance = new ChangedListImpl<>(Arrays.asList(\"old1\", \"old2\"), null);\n        ChangedList<String> result = ListDiff.diff(instance);\n        assertEquals(Arrays.asList(\"old1\", \"old2\"), result.getMissing());\n        assertTrue(result.getIncreased().isEmpty());\n        assertTrue(result.getShared().isEmpty());\n    }\n\n    @Test\n    void testDiff_BothValuesNotNull() {\n        ChangedListImpl<String> instance = new ChangedListImpl<>(Arrays.asList(\"old1\", \"old2\"), Arrays.asList(\"new1\", \"old2\"));\n        ChangedList<String> result = ListDiff.diff(instance);\n        assertEquals(Collections.singletonList(\"new1\"), result.getIncreased());\n        assertEquals(Collections.singletonList(\"old1\"), result.getMissing());\n        assertEquals(Collections.singletonList(\"old2\"), result.getShared());\n    }\n\n    static class ChangedListImpl<T> implements ChangedList<T> {\n        private final List<T> oldValue;\n        private final List<T> newValue;\n        private List<T> increased;\n        private List<T> missing;\n        private List<T> shared;\n\n        ChangedListImpl(List<T> oldValue, List<T> newValue) {\n            this.oldValue = oldValue;\n            this.newValue = newValue;\n            this.increased = Collections.emptyList();\n            this.missing = Collections.emptyList();\n            this.shared = Collections.emptyList();\n        }\n\n        @Override\n        public List<T> getOldValue() {\n            return oldValue;\n        }\n\n        @Override\n        public List<T> getNewValue() {\n            return newValue;\n        }\n\n        @Override\n        public List<T> getIncreased() {\n            return increased;\n        }\n\n        @Override\n        public List<T> getMissing() {\n            return missing;\n        }\n\n        @Override\n        public List<T> getShared() {\n            return shared;\n        }\n\n        @Override\n        public ChangedList<T> setIncreased(List<T> increased) {\n            this.increased = increased;\n            return this;\n        }\n\n        @Override\n        public ChangedList<T> setMissing(List<T> missing) {\n            this.missing = missing;\n            return this;\n        }\n\n        @Override\n        public ChangedList<T> setShared(List<T> shared) {\n            this.shared = shared;\n            return this;\n        }\n\n        // Other methods of ChangedList interface are not implemented for simplicity\n    }\n}\n"}]