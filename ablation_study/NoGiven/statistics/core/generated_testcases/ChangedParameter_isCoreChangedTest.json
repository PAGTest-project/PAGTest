[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport io.swagger.v3.oas.models.parameters.Parameter;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.DiffContext;\nimport org.openapitools.openapidiff.core.compare.ChangedParameter;\nimport org.openapitools.openapidiff.core.compare.DiffResult;\nimport org.openapitools.openapidiff.core.compare.RequestParamAllowEmptyDecreased;\nimport org.openapitools.openapidiff.core.compare.RequestParamExplodeChanged;\nimport org.openapitools.openapidiff.core.compare.RequestParamsRequiredIncreased;\nimport org.openapitools.openapidiff.core.compare.RequestParamStyleChanged;\n\npublic class ChangedParameter_isCoreChangedTest {\n\n    private ChangedParameter changedParameter;\n    private DiffContext context;\n    private Parameter oldParameter;\n    private Parameter newParameter;\n\n    @BeforeEach\n    public void setUp() {\n        context = mock(DiffContext.class);\n        oldParameter = mock(Parameter.class);\n        newParameter = mock(Parameter.class);\n        changedParameter = new ChangedParameter(\"paramName\", \"in\", context);\n        changedParameter.setOldParameter(oldParameter);\n        changedParameter.setNewParameter(newParameter);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        changedParameter.setChangeRequired(false);\n        changedParameter.setDeprecated(false);\n        changedParameter.setChangeAllowEmptyValue(false);\n        changedParameter.setChangeStyle(false);\n        changedParameter.setChangeExplode(false);\n\n        // When\n        DiffResult result = changedParameter.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_AllowEmptyValueDecreased() {\n        // Given\n        changedParameter.setChangeRequired(false);\n        changedParameter.setDeprecated(false);\n        changedParameter.setChangeAllowEmptyValue(true);\n        changedParameter.setChangeStyle(false);\n        changedParameter.setChangeExplode(false);\n        when(newParameter.getAllowEmptyValue()).thenReturn(false);\n        when(RequestParamAllowEmptyDecreased.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedParameter.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_ExplodeChanged() {\n        // Given\n        changedParameter.setChangeRequired(false);\n        changedParameter.setDeprecated(false);\n        changedParameter.setChangeAllowEmptyValue(false);\n        changedParameter.setChangeStyle(false);\n        changedParameter.setChangeExplode(true);\n        when(RequestParamExplodeChanged.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedParameter.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_RequiredIncreased() {\n        // Given\n        changedParameter.setChangeRequired(true);\n        changedParameter.setDeprecated(false);\n        changedParameter.setChangeAllowEmptyValue(false);\n        changedParameter.setChangeStyle(false);\n        changedParameter.setChangeExplode(false);\n        when(oldParameter.getRequired()).thenReturn(false);\n        when(RequestParamsRequiredIncreased.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedParameter.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible_StyleChanged() {\n        // Given\n        changedParameter.setChangeRequired(false);\n        changedParameter.setDeprecated(false);\n        changedParameter.setChangeAllowEmptyValue(false);\n        changedParameter.setChangeStyle(true);\n        changedParameter.setChangeExplode(false);\n        when(RequestParamStyleChanged.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedParameter.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        changedParameter.setChangeRequired(true);\n        changedParameter.setDeprecated(false);\n        changedParameter.setChangeAllowEmptyValue(true);\n        changedParameter.setChangeStyle(true);\n        changedParameter.setChangeExplode(true);\n        when(oldParameter.getRequired()).thenReturn(true);\n        when(newParameter.getAllowEmptyValue()).thenReturn(true);\n        when(RequestParamAllowEmptyDecreased.enabled(context)).thenReturn(false);\n        when(RequestParamExplodeChanged.enabled(context)).thenReturn(false);\n        when(RequestParamsRequiredIncreased.enabled(context)).thenReturn(false);\n        when(RequestParamStyleChanged.enabled(context)).thenReturn(false);\n\n        // When\n        DiffResult result = changedParameter.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n}\n"}]