[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.Test;\n\npublic class MapKeyDiff_diffTest {\n\n    @Test\n    public void testDiff_BothMapsNull() {\n        MapKeyDiff<String, String> result = MapKeyDiff.diff(null, null);\n        assertTrue(result.getIncreased().isEmpty());\n        assertTrue(result.getMissing().isEmpty());\n        assertTrue(result.getSharedKey().isEmpty());\n    }\n\n    @Test\n    public void testDiff_LeftMapNull() {\n        Map<String, String> rightMap = new HashMap<>();\n        rightMap.put(\"key1\", \"value1\");\n\n        MapKeyDiff<String, String> result = MapKeyDiff.diff(null, rightMap);\n        assertEquals(rightMap, result.getIncreased());\n        assertTrue(result.getMissing().isEmpty());\n        assertTrue(result.getSharedKey().isEmpty());\n    }\n\n    @Test\n    public void testDiff_RightMapNull() {\n        Map<String, String> leftMap = new HashMap<>();\n        leftMap.put(\"key1\", \"value1\");\n\n        MapKeyDiff<String, String> result = MapKeyDiff.diff(leftMap, null);\n        assertEquals(leftMap, result.getMissing());\n        assertTrue(result.getIncreased().isEmpty());\n        assertTrue(result.getSharedKey().isEmpty());\n    }\n\n    @Test\n    public void testDiff_BothMapsNotNull() {\n        Map<String, String> leftMap = new HashMap<>();\n        leftMap.put(\"key1\", \"value1\");\n        leftMap.put(\"key2\", \"value2\");\n\n        Map<String, String> rightMap = new HashMap<>();\n        rightMap.put(\"key2\", \"value2\");\n        rightMap.put(\"key3\", \"value3\");\n\n        MapKeyDiff<String, String> result = MapKeyDiff.diff(leftMap, rightMap);\n        assertEquals(1, result.getIncreased().size());\n        assertEquals(\"value3\", result.getIncreased().get(\"key3\"));\n        assertEquals(1, result.getMissing().size());\n        assertEquals(\"value1\", result.getMissing().get(\"key1\"));\n        assertEquals(1, result.getSharedKey().size());\n        assertTrue(result.getSharedKey().contains(\"key2\"));\n    }\n}\n"}]