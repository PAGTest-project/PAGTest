[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.DiffResult;\nimport org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;\n\nclass ChangedWriteOnly_isChangedTest {\n\n    private DiffContext context;\n    private ChangedWriteOnly changedWriteOnly;\n\n    @BeforeEach\n    void setUp() {\n        context = mock(DiffContext.class);\n    }\n\n    @Test\n    void testIsChanged_NoChanges() {\n        changedWriteOnly = new ChangedWriteOnly(true, true, context);\n        assertEquals(DiffResult.NO_CHANGES, changedWriteOnly.isChanged());\n    }\n\n    @Test\n    void testIsChanged_Request() {\n        when(context.isRequest()).thenReturn(true);\n        changedWriteOnly = new ChangedWriteOnly(true, false, context);\n        assertEquals(DiffResult.COMPATIBLE, changedWriteOnly.isChanged());\n    }\n\n    @Test\n    void testIsChanged_Response_NewValueTrue_Incompatible() {\n        when(context.isResponse()).thenReturn(true);\n        when(BackwardIncompatibleProp.RESPONSE_WRITEONLY_INCREASED.enabled(context)).thenReturn(true);\n        changedWriteOnly = new ChangedWriteOnly(false, true, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedWriteOnly.isChanged());\n    }\n\n    @Test\n    void testIsChanged_Response_NewValueTrue_Compatible() {\n        when(context.isResponse()).thenReturn(true);\n        when(BackwardIncompatibleProp.RESPONSE_WRITEONLY_INCREASED.enabled(context)).thenReturn(false);\n        changedWriteOnly = new ChangedWriteOnly(false, true, context);\n        assertEquals(DiffResult.COMPATIBLE, changedWriteOnly.isChanged());\n    }\n\n    @Test\n    void testIsChanged_Response_NewValueFalse_Required_Incompatible() {\n        when(context.isResponse()).thenReturn(true);\n        when(context.isRequired()).thenReturn(true);\n        when(BackwardIncompatibleProp.RESPONSE_WRITEONLY_REQUIRED_DECREASED.enabled(context)).thenReturn(true);\n        changedWriteOnly = new ChangedWriteOnly(true, false, context);\n        assertEquals(DiffResult.INCOMPATIBLE, changedWriteOnly.isChanged());\n    }\n\n    @Test\n    void testIsChanged_Response_NewValueFalse_Required_Compatible() {\n        when(context.isResponse()).thenReturn(true);\n        when(context.isRequired()).thenReturn(true);\n        when(BackwardIncompatibleProp.RESPONSE_WRITEONLY_REQUIRED_DECREASED.enabled(context)).thenReturn(false);\n        changedWriteOnly = new ChangedWriteOnly(true, false, context);\n        assertEquals(DiffResult.COMPATIBLE, changedWriteOnly.isChanged());\n    }\n\n    @Test\n    void testIsChanged_Response_NewValueFalse_NotRequired_Compatible() {\n        when(context.isResponse()).thenReturn(true);\n        when(context.isRequired()).thenReturn(false);\n        changedWriteOnly = new ChangedWriteOnly(true, false, context);\n        assertEquals(DiffResult.COMPATIBLE, changedWriteOnly.isChanged());\n    }\n\n    @Test\n    void testIsChanged_Unknown() {\n        changedWriteOnly = new ChangedWriteOnly(true, false, context);\n        assertEquals(DiffResult.UNKNOWN, changedWriteOnly.isChanged());\n    }\n}\n"}]