[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport io.swagger.v3.oas.models.Operation;\nimport io.swagger.v3.oas.models.PathItem;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.BackwardIncompatibleProp;\n\npublic class ChangedPath_isCoreChangedTest {\n\n    private ChangedPath changedPath;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        PathItem oldPath = new PathItem();\n        PathItem newPath = new PathItem();\n        context = mock(DiffContext.class);\n        changedPath = new ChangedPath(\"/path\", oldPath, newPath, context);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        Map<PathItem.HttpMethod, Operation> increased = new HashMap<>();\n        Map<PathItem.HttpMethod, Operation> missing = new HashMap<>();\n        changedPath.setIncreased(increased).setMissing(missing);\n\n        // When\n        DiffResult result = changedPath.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible() {\n        // Given\n        Map<PathItem.HttpMethod, Operation> increased = new HashMap<>();\n        Map<PathItem.HttpMethod, Operation> missing = new HashMap<>();\n        missing.put(PathItem.HttpMethod.GET, new Operation());\n        changedPath.setIncreased(increased).setMissing(missing);\n        when(BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedPath.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        Map<PathItem.HttpMethod, Operation> increased = new HashMap<>();\n        Map<PathItem.HttpMethod, Operation> missing = new HashMap<>();\n        missing.put(PathItem.HttpMethod.GET, new Operation());\n        changedPath.setIncreased(increased).setMissing(missing);\n        when(BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED.enabled(context)).thenReturn(false);\n\n        // When\n        DiffResult result = changedPath.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n}\n"}]