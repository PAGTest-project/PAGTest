[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.output;\n\nimport static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.Endpoint;\nimport org.openapitools.openapidiff.core.model.ChangedOperation;\nimport org.openapitools.openapidiff.core.exception.RendererException;\n\nimport j2html.tags.specialized.OlTag;\n\npublic class HtmlRender_renderHtmlTest {\n\n    private HtmlRender htmlRender;\n    private OlTag ol_new;\n    private OlTag ol_miss;\n    private OlTag ol_deprec;\n    private OlTag ol_changed;\n    private OutputStreamWriter outputStreamWriter;\n\n    @BeforeEach\n    public void setUp() {\n        htmlRender = new HtmlRender();\n        ol_new = mock(OlTag.class);\n        ol_miss = mock(OlTag.class);\n        ol_deprec = mock(OlTag.class);\n        ol_changed = mock(OlTag.class);\n        outputStreamWriter = new OutputStreamWriter(new ByteArrayOutputStream());\n    }\n\n    @Test\n    public void testRenderHtmlSuccess() {\n        assertDoesNotThrow(() -> htmlRender.renderHtml(ol_new, ol_miss, ol_deprec, ol_changed, outputStreamWriter));\n    }\n\n    @Test\n    public void testRenderHtmlIOException() throws IOException {\n        OutputStreamWriter mockOutputStreamWriter = mock(OutputStreamWriter.class);\n        when(mockOutputStreamWriter.append(\"\")).thenThrow(new IOException());\n        assertThrows(RendererException.class, () -> htmlRender.renderHtml(ol_new, ol_miss, ol_deprec, ol_changed, mockOutputStreamWriter));\n    }\n\n    @Test\n    public void testRenderHtmlWithEndpoints() {\n        List<Endpoint> newEndpoints = Arrays.asList(new Endpoint());\n        List<Endpoint> missingEndpoints = Arrays.asList(new Endpoint());\n        List<Endpoint> deprecatedEndpoints = Arrays.asList(new Endpoint());\n        List<ChangedOperation> changedOperations = Arrays.asList(new ChangedOperation(\"path\", null, null, null));\n\n        HtmlRender htmlRender = new HtmlRender() {\n            @Override\n            public OlTag ol_newEndpoint(List<Endpoint> endpoints) {\n                return mock(OlTag.class);\n            }\n\n            @Override\n            public OlTag ol_missingEndpoint(List<Endpoint> endpoints) {\n                return mock(OlTag.class);\n            }\n\n            @Override\n            public OlTag ol_deprecatedEndpoint(List<Endpoint> endpoints) {\n                return mock(OlTag.class);\n            }\n\n            @Override\n            public OlTag ol_changed(List<ChangedOperation> changedOperations) {\n                return mock(OlTag.class);\n            }\n        };\n\n        OlTag ol_newEndpoint = htmlRender.ol_newEndpoint(newEndpoints);\n        OlTag ol_missingEndpoint = htmlRender.ol_missingEndpoint(missingEndpoints);\n        OlTag ol_deprecatedEndpoint = htmlRender.ol_deprecatedEndpoint(deprecatedEndpoints);\n        OlTag ol_changedOperations = htmlRender.ol_changed(changedOperations);\n\n        assertDoesNotThrow(() -> htmlRender.renderHtml(ol_newEndpoint, ol_missingEndpoint, ol_deprecatedEndpoint, ol_changedOperations, outputStreamWriter));\n    }\n}\n"}]