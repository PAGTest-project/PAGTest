[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.OpenApiDiffOptions;\nimport org.apache.commons.configuration2.CompositeConfiguration;\n\npublic class CacheKey_equalsTest {\n\n    @Test\n    public void testEquals_SameInstance() {\n        CacheKey cacheKey = new CacheKey(\"left\", \"right\", new DiffContext(new OpenApiDiffOptions(new CompositeConfiguration())));\n        assertTrue(cacheKey.equals(cacheKey));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        CacheKey cacheKey = new CacheKey(\"left\", \"right\", new DiffContext(new OpenApiDiffOptions(new CompositeConfiguration())));\n        assertFalse(cacheKey.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        CacheKey cacheKey = new CacheKey(\"left\", \"right\", new DiffContext(new OpenApiDiffOptions(new CompositeConfiguration())));\n        assertFalse(cacheKey.equals(\"not a CacheKey\"));\n    }\n\n    @Test\n    public void testEquals_DifferentState() {\n        CacheKey cacheKey1 = new CacheKey(\"left1\", \"right1\", new DiffContext(new OpenApiDiffOptions(new CompositeConfiguration())));\n        CacheKey cacheKey2 = new CacheKey(\"left2\", \"right2\", new DiffContext(new OpenApiDiffOptions(new CompositeConfiguration())));\n        assertFalse(cacheKey1.equals(cacheKey2));\n    }\n\n    @Test\n    public void testEquals_SameState() {\n        CompositeConfiguration config = new CompositeConfiguration();\n        DiffContext context = new DiffContext(new OpenApiDiffOptions(config));\n        CacheKey cacheKey1 = new CacheKey(\"left\", \"right\", context);\n        CacheKey cacheKey2 = new CacheKey(\"left\", \"right\", context);\n        assertTrue(cacheKey1.equals(cacheKey2));\n    }\n}\n"}]