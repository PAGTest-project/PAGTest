[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;\nimport org.openapitools.openapidiff.core.model.ChangedOperation;\nimport org.openapitools.openapidiff.core.model.ChangedSchema;\nimport org.openapitools.openapidiff.core.model.ChangedExtensions;\nimport org.openapitools.openapidiff.core.model.Changed;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class ChangedOpenApi_getChangedElementsTest {\n\n    private ChangedOpenApi changedOpenApi;\n\n    @BeforeEach\n    public void setUp() {\n        OpenApiDiffOptions options = new OpenApiDiffOptions(new org.apache.commons.configuration2.CompositeConfiguration());\n        changedOpenApi = new ChangedOpenApi(options);\n    }\n\n    @Test\n    public void testGetChangedElementsWithAllFieldsSet() {\n        ChangedOperation changedOperation1 = new ChangedOperation(\"path\", null, null, null);\n        ChangedOperation changedOperation2 = new ChangedOperation(\"path\", null, null, null);\n        ChangedSchema changedSchema1 = new ChangedSchema();\n        ChangedSchema changedSchema2 = new ChangedSchema();\n        ChangedExtensions changedExtensions = new ChangedExtensions(null, null, null);\n\n        changedOpenApi.setChangedOperations(Arrays.asList(changedOperation1, changedOperation2));\n        changedOpenApi.setChangedSchemas(Arrays.asList(changedSchema1, changedSchema2));\n        changedOpenApi.setChangedExtensions(changedExtensions);\n\n        List<Changed> expected = Arrays.asList(changedOperation1, changedOperation2, changedExtensions, changedSchema1, changedSchema2);\n        List<Changed> actual = changedOpenApi.getChangedElements();\n\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetChangedElementsWithEmptyLists() {\n        changedOpenApi.setChangedOperations(Collections.emptyList());\n        changedOpenApi.setChangedSchemas(Collections.emptyList());\n        changedOpenApi.setChangedExtensions(null);\n\n        List<Changed> expected = Collections.emptyList();\n        List<Changed> actual = changedOpenApi.getChangedElements();\n\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetChangedElementsWithOnlyChangedOperations() {\n        ChangedOperation changedOperation1 = new ChangedOperation(\"path\", null, null, null);\n        ChangedOperation changedOperation2 = new ChangedOperation(\"path\", null, null, null);\n\n        changedOpenApi.setChangedOperations(Arrays.asList(changedOperation1, changedOperation2));\n        changedOpenApi.setChangedSchemas(Collections.emptyList());\n        changedOpenApi.setChangedExtensions(null);\n\n        List<Changed> expected = Arrays.asList(changedOperation1, changedOperation2);\n        List<Changed> actual = changedOpenApi.getChangedElements();\n\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetChangedElementsWithOnlyChangedSchemas() {\n        ChangedSchema changedSchema1 = new ChangedSchema();\n        ChangedSchema changedSchema2 = new ChangedSchema();\n\n        changedOpenApi.setChangedOperations(Collections.emptyList());\n        changedOpenApi.setChangedSchemas(Arrays.asList(changedSchema1, changedSchema2));\n        changedOpenApi.setChangedExtensions(null);\n\n        List<Changed> expected = Arrays.asList(changedSchema1, changedSchema2);\n        List<Changed> actual = changedOpenApi.getChangedElements();\n\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testGetChangedElementsWithOnlyChangedExtensions() {\n        ChangedExtensions changedExtensions = new ChangedExtensions(null, null, null);\n\n        changedOpenApi.setChangedOperations(Collections.emptyList());\n        changedOpenApi.setChangedSchemas(Collections.emptyList());\n        changedOpenApi.setChangedExtensions(changedExtensions);\n\n        List<Changed> expected = Collections.singletonList(changedExtensions);\n        List<Changed> actual = changedOpenApi.getChangedElements();\n\n        assertEquals(expected, actual);\n    }\n}\n"}]