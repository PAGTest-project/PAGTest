[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nimport io.swagger.v3.oas.models.media.Content;\nimport io.swagger.v3.oas.models.media.MediaType;\nimport io.swagger.v3.oas.models.media.Schema;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.openapitools.openapidiff.core.model.ChangedContent;\nimport org.openapitools.openapidiff.core.model.ChangedMediaType;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredBuilder;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\n\npublic class ContentDiff_diffTest {\n\n  @Mock\n  private OpenApiDiff openApiDiff;\n\n  @Mock\n  private SchemaDiff schemaDiff;\n\n  @Mock\n  private DeferredBuilder<ChangedContent> builder;\n\n  @Mock\n  private DeferredChanged<ChangedContent> deferredChanged;\n\n  @InjectMocks\n  private ContentDiff contentDiff;\n\n  @BeforeEach\n  public void setUp() {\n    MockitoAnnotations.openMocks(this);\n    when(openApiDiff.getSchemaDiff()).thenReturn(schemaDiff);\n    when(builder.build()).thenReturn(deferredChanged);\n  }\n\n  @Test\n  public void testDiff_WithChangedMediaType() {\n    Content left = new Content();\n    Content right = new Content();\n    DiffContext context = new DiffContext(null);\n\n    MediaType oldMediaType = new MediaType();\n    oldMediaType.setSchema(new Schema<>());\n    MediaType newMediaType = new MediaType();\n    newMediaType.setSchema(new Schema<>());\n\n    left.addMediaType(\"application/json\", oldMediaType);\n    right.addMediaType(\"application/json\", newMediaType);\n\n    MapKeyDiff<String, MediaType> mediaTypeDiff = MapKeyDiff.diff(left, right);\n    mediaTypeDiff.getSharedKey().add(\"application/json\");\n\n    when(schemaDiff.diff(any(), any(), any())).thenReturn(Optional.of(new ChangedMediaType(oldMediaType.getSchema(), newMediaType.getSchema(), context)));\n    when(deferredChanged.mapOptional(any())).thenReturn(deferredChanged);\n\n    DeferredChanged<ChangedContent> result = contentDiff.diff(left, right, context);\n\n    assertTrue(result.isPresent());\n  }\n}\n"}]