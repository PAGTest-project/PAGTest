[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport io.swagger.v3.oas.models.parameters.RequestBody;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\nimport org.openapitools.openapidiff.core.model.ChangedRequestBody;\n\npublic class RequestBodyDiff_diffTest {\n\n    private RequestBodyDiff requestBodyDiff;\n    private RequestBody left;\n    private RequestBody right;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        requestBodyDiff = new RequestBodyDiff(openApiDiff);\n        left = mock(RequestBody.class);\n        right = mock(RequestBody.class);\n        context = mock(DiffContext.class);\n    }\n\n    @Test\n    public void testDiffWithNonNullRequestBodies() {\n        when(left.get$ref()).thenReturn(\"leftRef\");\n        when(right.get$ref()).thenReturn(\"rightRef\");\n\n        DeferredChanged<ChangedRequestBody> result = requestBodyDiff.diff(left, right, context);\n\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testDiffWithNullLeftRequestBody() {\n        when(right.get$ref()).thenReturn(\"rightRef\");\n\n        DeferredChanged<ChangedRequestBody> result = requestBodyDiff.diff(null, right, context);\n\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testDiffWithNullRightRequestBody() {\n        when(left.get$ref()).thenReturn(\"leftRef\");\n\n        DeferredChanged<ChangedRequestBody> result = requestBodyDiff.diff(left, null, context);\n\n        assertNotNull(result);\n    }\n\n    @Test\n    public void testDiffWithBothNullRequestBodies() {\n        DeferredChanged<ChangedRequestBody> result = requestBodyDiff.diff(null, null, context);\n\n        assertNotNull(result);\n    }\n}\n"}]