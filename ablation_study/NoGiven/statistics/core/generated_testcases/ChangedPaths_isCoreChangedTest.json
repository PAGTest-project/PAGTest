[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiffOptions;\nimport io.swagger.v3.oas.models.PathItem;\nimport org.mockito.Mockito;\nimport org.apache.commons.configuration2.CompositeConfiguration;\nimport org.mockito.MockitoAnnotations;\n\npublic class ChangedPaths_isCoreChangedTest {\n\n    private ChangedPaths changedPaths;\n    private OpenApiDiffOptions options;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n        Map<String, PathItem> oldPathMap = new HashMap<>();\n        Map<String, PathItem> newPathMap = new HashMap<>();\n        options = mock(OpenApiDiffOptions.class);\n        changedPaths = new ChangedPaths(oldPathMap, newPathMap, options);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        changedPaths.setIncreased(new HashMap<>());\n        changedPaths.setMissing(new HashMap<>());\n\n        // When\n        DiffResult result = changedPaths.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        Map<String, PathItem> increased = new HashMap<>();\n        increased.put(\"path1\", new PathItem());\n        changedPaths.setIncreased(increased);\n        changedPaths.setMissing(new HashMap<>());\n\n        // When\n        DiffResult result = changedPaths.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible() {\n        // Given\n        Map<String, PathItem> missing = new HashMap<>();\n        missing.put(\"path1\", new PathItem());\n        changedPaths.setIncreased(new HashMap<>());\n        changedPaths.setMissing(missing);\n        CompositeConfiguration config = new CompositeConfiguration();\n        when(options.getConfig()).thenReturn(config);\n\n        // When\n        DiffResult result = changedPaths.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n}\n"}]