[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport io.swagger.v3.oas.models.PathItem;\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.ChangedPaths;\nimport org.openapitools.openapidiff.core.model.deferred.DeferredChanged;\nimport org.mockito.Mockito;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class PathsDiff_diffTest {\n\n    @Test\n    public void testDiff_SuccessfulMatch() {\n        // Given\n        OpenApiDiff openApiDiff = Mockito.mock(OpenApiDiff.class);\n        PathsDiff pathsDiff = new PathsDiff(openApiDiff);\n\n        Map<String, PathItem> left = new HashMap<>();\n        PathItem leftPath = new PathItem();\n        left.put(\"/path1\", leftPath);\n\n        Map<String, PathItem> right = new HashMap<>();\n        PathItem rightPath = new PathItem();\n        right.put(\"/path1\", rightPath);\n\n        // When\n        DeferredChanged<ChangedPaths> result = pathsDiff.diff(left, right);\n\n        // Then\n        verify(openApiDiff, times(1)).getPathDiff();\n    }\n\n    @Test\n    public void testDiff_ExceptionThrown() {\n        // Given\n        OpenApiDiff openApiDiff = Mockito.mock(OpenApiDiff.class);\n        PathsDiff pathsDiff = new PathsDiff(openApiDiff);\n\n        Map<String, PathItem> left = new HashMap<>();\n        PathItem leftPath = new PathItem();\n        left.put(\"/path1\", leftPath);\n\n        Map<String, PathItem> right = new HashMap<>();\n        PathItem rightPath1 = new PathItem();\n        PathItem rightPath2 = new PathItem();\n        right.put(\"/path1\", rightPath1);\n        right.put(\"/path2\", rightPath2);\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> pathsDiff.diff(left, right));\n    }\n}\n"}]