[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.ArrayList;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class ParametersDiff_matchedItemsTest {\n\n    @Test\n    public void testMatchedItems_SingleMatch() {\n        ParametersDiff parametersDiff = new ParametersDiff(null) {\n            @Override\n            public ArrayList<String> matchedItems(String string, String regex) {\n                Matcher matcher = Pattern.compile(regex).matcher(string);\n                ArrayList<String> matchedItems = new ArrayList<>();\n                while (matcher.find()) {\n                    String item = matcher.group();\n                    matchedItems.add(item.substring(1, item.length() - 1));\n                }\n                return matchedItems;\n            }\n        };\n        String string = \"/path/{param1}\";\n        String regex = \"\\\\{([^/]+)}\";\n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"param1\");\n\n        ArrayList<String> result = parametersDiff.matchedItems(string, regex);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testMatchedItems_MultipleMatches() {\n        ParametersDiff parametersDiff = new ParametersDiff(null) {\n            @Override\n            public ArrayList<String> matchedItems(String string, String regex) {\n                Matcher matcher = Pattern.compile(regex).matcher(string);\n                ArrayList<String> matchedItems = new ArrayList<>();\n                while (matcher.find()) {\n                    String item = matcher.group();\n                    matchedItems.add(item.substring(1, item.length() - 1));\n                }\n                return matchedItems;\n            }\n        };\n        String string = \"/path/{param1}/another/{param2}\";\n        String regex = \"\\\\{([^/]+)}\";\n        ArrayList<String> expected = new ArrayList<>();\n        expected.add(\"param1\");\n        expected.add(\"param2\");\n\n        ArrayList<String> result = parametersDiff.matchedItems(string, regex);\n        assertEquals(expected, result);\n    }\n\n    @Test\n    public void testMatchedItems_NoMatch() {\n        ParametersDiff parametersDiff = new ParametersDiff(null) {\n            @Override\n            public ArrayList<String> matchedItems(String string, String regex) {\n                Matcher matcher = Pattern.compile(regex).matcher(string);\n                ArrayList<String> matchedItems = new ArrayList<>();\n                while (matcher.find()) {\n                    String item = matcher.group();\n                    matchedItems.add(item.substring(1, item.length() - 1));\n                }\n                return matchedItems;\n            }\n        };\n        String string = \"/path/noParams\";\n        String regex = \"\\\\{([^/]+)}\";\n        ArrayList<String> expected = new ArrayList<>();\n\n        ArrayList<String> result = parametersDiff.matchedItems(string, regex);\n        assertEquals(expected, result);\n    }\n}\n"}]