[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\nimport io.swagger.v3.oas.models.media.Schema;\nimport java.util.ArrayDeque;\nimport java.util.LinkedHashMap;\nimport java.util.Queue;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.openapitools.openapidiff.core.compare.CacheKey;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiff;\nimport org.openapitools.openapidiff.core.compare.SchemaDiff;\nimport org.openapitools.openapidiff.core.model.ChangedSchema;\n\n@ExtendWith(MockitoExtension.class)\npublic class DeferredSchemaCache_processSchemaQueueTest {\n\n    @Mock\n    private OpenApiDiff openApiDiff;\n\n    @Mock\n    private SchemaDiff schemaDiff;\n\n    @Mock\n    private DeferredChanged<ChangedSchema> deferredChanged;\n\n    private DeferredSchemaCache deferredSchemaCache;\n\n    @BeforeEach\n    public void setUp() {\n        deferredSchemaCache = new DeferredSchemaCache(openApiDiff);\n        deferredSchemaCache.cache = new LinkedHashMap<>();\n        deferredSchemaCache.processingQueue = new ArrayDeque<>();\n    }\n\n    @Test\n    public void testProcessSchemaQueue() {\n        // Given\n        CacheKey key = new CacheKey(\"left\", \"right\", null);\n        Schema left = new Schema<>();\n        Schema right = new Schema<>();\n        SchemaDiffOperation operation = new SchemaDiffOperation(openApiDiff, null, key, left, right);\n        deferredSchemaCache.cache.put(key, operation);\n        deferredSchemaCache.processingQueue.add(key);\n\n        when(openApiDiff.getSchemaDiff()).thenReturn(schemaDiff);\n        when(schemaDiff.computeDiffForReal(any(), any(), any(), any())).thenReturn(deferredChanged);\n\n        // When\n        deferredSchemaCache.processSchemaQueue();\n\n        // Then\n        assertTrue(operation.processed);\n        verify(deferredChanged).whenSet(any());\n    }\n}\n"}]