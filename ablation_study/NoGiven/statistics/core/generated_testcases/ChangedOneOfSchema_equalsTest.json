[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.media.Schema;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\n\npublic class ChangedOneOfSchema_equalsTest {\n\n    @Test\n    public void testEquals_SameObject() {\n        ChangedOneOfSchema schema = new ChangedOneOfSchema(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n        assertEquals(schema, schema);\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        ChangedOneOfSchema schema = new ChangedOneOfSchema(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n        assertNotEquals(schema, null);\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        ChangedOneOfSchema schema = new ChangedOneOfSchema(new HashMap<>(), new HashMap<>(), new DiffContext(null));\n        assertNotEquals(schema, new Object());\n    }\n\n    @Test\n    public void testEquals_DifferentFields() {\n        Map<String, String> oldMapping1 = new HashMap<>();\n        oldMapping1.put(\"key1\", \"value1\");\n        Map<String, String> newMapping1 = new HashMap<>();\n        newMapping1.put(\"key2\", \"value2\");\n        DiffContext context1 = new DiffContext(null);\n        ChangedOneOfSchema schema1 = new ChangedOneOfSchema(oldMapping1, newMapping1, context1);\n        schema1.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n        Map<String, String> oldMapping2 = new HashMap<>();\n        oldMapping2.put(\"key1\", \"value1\");\n        Map<String, String> newMapping2 = new HashMap<>();\n        newMapping2.put(\"key2\", \"value2\");\n        DiffContext context2 = new DiffContext(null);\n        ChangedOneOfSchema schema2 = new ChangedOneOfSchema(oldMapping2, newMapping2, context2);\n        schema2.setIncreased(new HashMap<>()).setMissing(new HashMap<>()).setChanged(new HashMap<>());\n\n        assertEquals(schema1, schema2);\n\n        schema2.setIncreased(Map.of(\"key3\", new Schema<>()));\n        assertNotEquals(schema1, schema2);\n    }\n}\n"}]