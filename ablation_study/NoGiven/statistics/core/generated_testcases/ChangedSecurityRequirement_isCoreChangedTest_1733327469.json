[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport io.swagger.v3.oas.models.security.SecurityRequirement;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.List;\n\npublic class ChangedSecurityRequirement_isCoreChangedTest {\n\n    private ChangedSecurityRequirement changedSecurityRequirement;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = mock(DiffContext.class);\n        changedSecurityRequirement = new ChangedSecurityRequirement(null, null, context);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        changedSecurityRequirement.setMissing(null);\n        changedSecurityRequirement.setIncreased(null);\n\n        // When\n        DiffResult result = changedSecurityRequirement.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Increased_Incompatible() {\n        // Given\n        changedSecurityRequirement.addIncreased(\"key\", List.of(\"scope\"));\n        when(SECURITY_REQUIREMENT_SCHEMES_INCREASED.enabled(context)).thenReturn(true);\n\n        // When\n        DiffResult result = changedSecurityRequirement.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Increased_Compatible() {\n        // Given\n        changedSecurityRequirement.addIncreased(\"key\", List.of(\"scope\"));\n        when(SECURITY_REQUIREMENT_SCHEMES_INCREASED.enabled(context)).thenReturn(false);\n\n        // When\n        DiffResult result = changedSecurityRequirement.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Missing_Compatible() {\n        // Given\n        changedSecurityRequirement.addMissing(\"key\", List.of(\"scope\"));\n\n        // When\n        DiffResult result = changedSecurityRequirement.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n}\n"}]