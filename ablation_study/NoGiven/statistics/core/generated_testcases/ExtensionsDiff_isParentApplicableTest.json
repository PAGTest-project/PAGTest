[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.compare;\n\nimport org.junit.jupiter.api.Test;\nimport org.openapitools.openapidiff.core.model.Change;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.mockito.Mockito;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\n\npublic class ExtensionsDiff_isParentApplicableTest {\n\n    @Test\n    public void testIsParentApplicable_EmptyExtensions() {\n        // Given\n        ExtensionsDiff extensionsDiff = new ExtensionsDiff(null);\n        Map<String, Object> extensions = new HashMap<>();\n        DiffContext context = Mockito.mock(DiffContext.class);\n\n        // When\n        boolean result = extensionsDiff.isParentApplicable(Change.Type.ADDED, new Object(), extensions, context);\n\n        // Then\n        assertTrue(result);\n    }\n\n    @Test\n    public void testIsParentApplicable_NonEmptyExtensions() {\n        // Given\n        ExtensionsDiff extensionsDiff = Mockito.spy(new ExtensionsDiff(null));\n        Map<String, Object> extensions = new HashMap<>();\n        extensions.put(\"x-test\", new Object());\n        DiffContext context = Mockito.mock(DiffContext.class);\n\n        // Mocking executeExtension to return Optional.of(true)\n        doReturn(Optional.of(true)).when(extensionsDiff).executeExtension(anyString(), any());\n\n        // When\n        boolean result = extensionsDiff.isParentApplicable(Change.Type.ADDED, new Object(), extensions, context);\n\n        // Then\n        assertTrue(result);\n    }\n}\n"}]