[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.SecuritySchemeDiff;\n\npublic class ChangedSecurityScheme_isCoreChangedTest {\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        DiffContext context = mock(DiffContext.class);\n        ChangedSecuritySchemeScopes changedScopes = mock(ChangedSecuritySchemeScopes.class);\n        when(changedScopes.isUnchanged()).thenReturn(true);\n\n        ChangedSecurityScheme changedSecurityScheme = new ChangedSecurityScheme(null, null, context)\n            .setChangedType(false)\n            .setChangedIn(false)\n            .setChangedScheme(false)\n            .setChangedBearerFormat(false)\n            .setChangedOpenIdConnectUrl(false)\n            .setChangedScopes(changedScopes);\n\n        assertEquals(DiffResult.NO_CHANGES, changedSecurityScheme.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_IncompatibleChanges() {\n        DiffContext context = mock(DiffContext.class);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_BEARER_FORMAT_CHANGED.enabled(context)).thenReturn(true);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_OPENIDCONNECT_URL_CHANGED.enabled(context)).thenReturn(true);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_SCHEME_CHANGED.enabled(context)).thenReturn(true);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_SCOPES_INCREASED.enabled(context)).thenReturn(true);\n\n        ChangedSecuritySchemeScopes changedScopes = mock(ChangedSecuritySchemeScopes.class);\n        when(changedScopes.isUnchanged()).thenReturn(false);\n        when(changedScopes.getIncreased()).thenReturn(Arrays.asList(\"scope1\"));\n\n        ChangedSecurityScheme changedSecurityScheme = new ChangedSecurityScheme(null, null, context)\n            .setChangedType(true)\n            .setChangedIn(true)\n            .setChangedScheme(true)\n            .setChangedBearerFormat(true)\n            .setChangedOpenIdConnectUrl(true)\n            .setChangedScopes(changedScopes);\n\n        assertEquals(DiffResult.INCOMPATIBLE, changedSecurityScheme.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_CompatibleChanges() {\n        DiffContext context = mock(DiffContext.class);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_BEARER_FORMAT_CHANGED.enabled(context)).thenReturn(false);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_OPENIDCONNECT_URL_CHANGED.enabled(context)).thenReturn(false);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_SCHEME_CHANGED.enabled(context)).thenReturn(false);\n        when(SecuritySchemeDiff.SECURITY_SCHEME_SCOPES_INCREASED.enabled(context)).thenReturn(false);\n\n        ChangedSecuritySchemeScopes changedScopes = mock(ChangedSecuritySchemeScopes.class);\n        when(changedScopes.isUnchanged()).thenReturn(true);\n        when(changedScopes.getIncreased()).thenReturn(Collections.emptyList());\n\n        ChangedSecurityScheme changedSecurityScheme = new ChangedSecurityScheme(null, null, context)\n            .setChangedType(false)\n            .setChangedIn(false)\n            .setChangedScheme(true)\n            .setChangedBearerFormat(true)\n            .setChangedOpenIdConnectUrl(true)\n            .setChangedScopes(changedScopes);\n\n        assertEquals(DiffResult.COMPATIBLE, changedSecurityScheme.isCoreChanged());\n    }\n}\n"}]