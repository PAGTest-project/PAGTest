[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;\nimport io.swagger.v3.oas.models.parameters.RequestBody;\n\npublic class ChangedRequestBody_isCoreChangedTest {\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        // Given\n        DiffContext context = mock(DiffContext.class);\n        ChangedRequestBody changedRequestBody = new ChangedRequestBody(null, null, context);\n        changedRequestBody.setChangeRequired(false);\n\n        // When\n        DiffResult result = changedRequestBody.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Incompatible() {\n        // Given\n        DiffContext context = mock(DiffContext.class);\n        when(BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED.enabled(context)).thenReturn(true);\n        ChangedRequestBody changedRequestBody = new ChangedRequestBody(null, null, context);\n        changedRequestBody.setChangeRequired(true);\n\n        // When\n        DiffResult result = changedRequestBody.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.INCOMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        // Given\n        DiffContext context = mock(DiffContext.class);\n        when(BackwardIncompatibleProp.OPENAPI_ENDPOINTS_DECREASED.enabled(context)).thenReturn(false);\n        ChangedRequestBody changedRequestBody = new ChangedRequestBody(null, null, context);\n        changedRequestBody.setChangeRequired(true);\n\n        // When\n        DiffResult result = changedRequestBody.isCoreChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n}\n"}]