[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class ChangedSchema_isChangedTest {\n\n    private ChangedSchema changedSchema;\n    private DiffResult mockCoreChangedResult;\n    private List<Changed> mockChangedElements;\n\n    @BeforeEach\n    public void setUp() {\n        changedSchema = new ChangedSchema();\n        mockCoreChangedResult = mock(DiffResult.class);\n        mockChangedElements = Collections.singletonList(mock(Changed.class));\n    }\n\n    @Test\n    public void testIsChanged_NoRecursiveCall() {\n        // Given\n        changedSchema.setChanged(null);\n        changedSchema.setCoreChanged(mockCoreChangedResult);\n        when(mockCoreChangedResult.getWeight()).thenReturn(1);\n\n        Changed mockChanged = mock(Changed.class);\n        when(mockChanged.isChanged()).thenReturn(DiffResult.NO_CHANGES);\n        mockChangedElements = Collections.singletonList(mockChanged);\n\n        // When\n        DiffResult result = changedSchema.isChanged();\n\n        // Then\n        assertEquals(mockCoreChangedResult, result);\n    }\n\n    @Test\n    public void testIsChanged_RecursiveCall() {\n        // Given\n        changedSchema.setChanged(null);\n        changedSchema.setCoreChanged(mockCoreChangedResult);\n        when(mockCoreChangedResult.getWeight()).thenReturn(0);\n\n        Changed mockChanged = mock(Changed.class);\n        when(mockChanged.isChanged()).thenReturn(DiffResult.COMPATIBLE);\n        mockChangedElements = Collections.singletonList(mockChanged);\n\n        // When\n        DiffResult result = changedSchema.isChanged();\n\n        // Then\n        assertEquals(DiffResult.COMPATIBLE, result);\n    }\n\n    @Test\n    public void testIsChanged_CachedResult() {\n        // Given\n        changedSchema.setChanged(DiffResult.NO_CHANGES);\n\n        // When\n        DiffResult result = changedSchema.isChanged();\n\n        // Then\n        assertEquals(DiffResult.NO_CHANGES, result);\n    }\n}\n"}]