[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport io.swagger.v3.oas.models.media.Schema;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.CacheKey;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiff;\n\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.mockito.Mockito.when;\n\nclass DeferredSchemaCache_addSchemaTest {\n\n    private DeferredSchemaCache deferredSchemaCache;\n    private OpenApiDiff openApiDiff;\n    private RecursiveSchemaSet refSet;\n    private CacheKey key;\n    private Schema left;\n    private Schema right;\n\n    @BeforeEach\n    void setUp() {\n        openApiDiff = Mockito.mock(OpenApiDiff.class);\n        deferredSchemaCache = new DeferredSchemaCache(openApiDiff);\n        refSet = Mockito.mock(RecursiveSchemaSet.class);\n        key = Mockito.mock(CacheKey.class);\n        left = new Schema();\n        right = new Schema();\n    }\n\n    @Test\n    void testAddSchema_NewKey() {\n        // Given\n        when(deferredSchemaCache.cache.containsKey(key)).thenReturn(false);\n\n        // When\n        SchemaDiffOperation result = deferredSchemaCache.addSchema(refSet, key, left, right);\n\n        // Then\n        assertSame(result, deferredSchemaCache.cache.get(key));\n    }\n\n    @Test\n    void testAddSchema_ExistingKey() {\n        // Given\n        SchemaDiffOperation existingOperation = new SchemaDiffOperation(openApiDiff, refSet, key, left, right);\n        deferredSchemaCache.cache.put(key, existingOperation);\n        when(deferredSchemaCache.cache.containsKey(key)).thenReturn(true);\n\n        // When\n        SchemaDiffOperation result = deferredSchemaCache.addSchema(refSet, key, left, right);\n\n        // Then\n        assertSame(existingOperation, result);\n    }\n}\n"}]