[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport io.swagger.v3.oas.models.media.Schema;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.compare.CacheKey;\nimport org.openapitools.openapidiff.core.compare.OpenApiDiff;\nimport org.openapitools.openapidiff.core.model.ChangedSchema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class DeferredSchemaCache_getOrAddSchemaTest {\n\n    private DeferredSchemaCache deferredSchemaCache;\n    private RecursiveSchemaSet refSet;\n    private CacheKey key;\n    private Schema left;\n    private Schema right;\n\n    @BeforeEach\n    public void setUp() {\n        OpenApiDiff openApiDiff = mock(OpenApiDiff.class);\n        deferredSchemaCache = new DeferredSchemaCache(openApiDiff);\n        refSet = mock(RecursiveSchemaSet.class);\n        key = mock(CacheKey.class);\n        left = mock(Schema.class);\n        right = mock(Schema.class);\n    }\n\n    @Test\n    public void testGetOrAddSchema_RecursiveCall() {\n        when(refSet.contains(key)).thenReturn(true);\n\n        DeferredChanged<ChangedSchema> result = deferredSchemaCache.getOrAddSchema(refSet, key, left, right);\n\n        assertEquals(DeferredChanged.empty(), result);\n        verify(refSet).contains(key);\n        verifyNoMoreInteractions(refSet);\n        verifyNoInteractions(key, left, right);\n    }\n\n    @Test\n    public void testGetOrAddSchema_Cached() {\n        when(refSet.contains(key)).thenReturn(false);\n        SchemaDiffOperation cachedOperation = mock(SchemaDiffOperation.class);\n        DeferredChanged<ChangedSchema> cachedResult = mock(DeferredChanged.class);\n        when(cachedOperation.diffResult).thenReturn(cachedResult);\n        deferredSchemaCache.cache.put(key, cachedOperation);\n\n        DeferredChanged<ChangedSchema> result = deferredSchemaCache.getOrAddSchema(refSet, key, left, right);\n\n        assertEquals(cachedResult, result);\n        verify(refSet).contains(key);\n        verify(refSet).put(key);\n        verifyNoMoreInteractions(refSet);\n        verifyNoInteractions(key, left, right);\n    }\n\n    @Test\n    public void testGetOrAddSchema_AddNew() {\n        when(refSet.contains(key)).thenReturn(false);\n        SchemaDiffOperation newOperation = mock(SchemaDiffOperation.class);\n        DeferredChanged<ChangedSchema> newResult = mock(DeferredChanged.class);\n        when(newOperation.diffResult).thenReturn(newResult);\n        when(deferredSchemaCache.addSchema(refSet, key, left, right)).thenReturn(newOperation);\n\n        DeferredChanged<ChangedSchema> result = deferredSchemaCache.getOrAddSchema(refSet, key, left, right);\n\n        assertEquals(newResult, result);\n        verify(refSet).contains(key);\n        verify(refSet).put(key);\n        verify(deferredSchemaCache).addSchema(refSet, key, left, right);\n        verifyNoMoreInteractions(refSet);\n        verifyNoInteractions(key, left, right);\n    }\n}\n"}]