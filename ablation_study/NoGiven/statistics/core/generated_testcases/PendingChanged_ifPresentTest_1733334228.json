[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model.deferred;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Optional;\nimport java.util.function.Consumer;\nimport org.junit.jupiter.api.Test;\n\npublic class PendingChanged_ifPresentTest {\n\n    @Test\n    public void testIfPresent_ValueSetAndPresent() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n        pendingChanged.setValue(Optional.of(\"test\"));\n\n        Consumer<String> consumer = s -> assertEquals(\"test\", s);\n        pendingChanged.ifPresent(consumer);\n    }\n\n    @Test\n    public void testIfPresent_ValueNotSet() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n\n        Consumer<String> consumer = s -> assertTrue(false, \"Consumer should not be called\");\n        pendingChanged.ifPresent(consumer);\n\n        assertEquals(1, pendingChanged.ifPresentConsumers.size());\n    }\n\n    @Test\n    public void testIfPresent_ValueSetButNotPresent() {\n        PendingChanged<String> pendingChanged = new PendingChanged<>();\n        pendingChanged.setValue(Optional.empty());\n\n        Consumer<String> consumer = s -> assertTrue(false, \"Consumer should not be called\");\n        pendingChanged.ifPresent(consumer);\n    }\n}\n"}]