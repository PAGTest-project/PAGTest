[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport io.swagger.v3.oas.models.media.MediaType;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;\n\npublic class ChangedContent_isCoreChangedTest {\n\n    private ChangedContent changedContent;\n    private DiffContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = mock(DiffContext.class);\n        changedContent = new ChangedContent(null, null, context);\n    }\n\n    @Test\n    public void testIsCoreChanged_NoChanges() {\n        changedContent.setIncreased(new HashMap<>()).setMissing(new HashMap<>());\n        assertEquals(DiffResult.NO_CHANGES, changedContent.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_IncompatibleRequest() {\n        Map<String, MediaType> missing = new HashMap<>();\n        missing.put(\"key\", new MediaType());\n        changedContent.setIncreased(new HashMap<>()).setMissing(missing);\n        when(context.isRequest()).thenReturn(true);\n        when(BackwardIncompatibleProp.REQUEST_CONTENT_DECREASED.enabled(context)).thenReturn(true);\n        assertEquals(DiffResult.INCOMPATIBLE, changedContent.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_IncompatibleResponse() {\n        Map<String, MediaType> missing = new HashMap<>();\n        missing.put(\"key\", new MediaType());\n        changedContent.setIncreased(new HashMap<>()).setMissing(missing);\n        when(context.isResponse()).thenReturn(true);\n        when(BackwardIncompatibleProp.RESPONSE_CONTENT_DECREASED.enabled(context)).thenReturn(true);\n        assertEquals(DiffResult.INCOMPATIBLE, changedContent.isCoreChanged());\n    }\n\n    @Test\n    public void testIsCoreChanged_Compatible() {\n        Map<String, MediaType> missing = new HashMap<>();\n        missing.put(\"key\", new MediaType());\n        changedContent.setIncreased(new HashMap<>()).setMissing(missing);\n        when(context.isRequest()).thenReturn(true);\n        when(BackwardIncompatibleProp.REQUEST_CONTENT_DECREASED.enabled(context)).thenReturn(false);\n        assertEquals(DiffResult.COMPATIBLE, changedContent.isCoreChanged());\n    }\n}\n"}]