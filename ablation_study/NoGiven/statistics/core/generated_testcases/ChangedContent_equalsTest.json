[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport io.swagger.v3.oas.models.media.Content;\nimport io.swagger.v3.oas.models.media.MediaType;\nimport org.junit.jupiter.api.Test;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ChangedContent_equalsTest {\n\n    @Test\n    void testEquals_SameInstance() {\n        Content oldContent = new Content();\n        Content newContent = new Content();\n        DiffContext context = new DiffContext(null);\n        ChangedContent content = new ChangedContent(oldContent, newContent, context);\n\n        assertTrue(content.equals(content));\n    }\n\n    @Test\n    void testEquals_DifferentClass() {\n        Content oldContent = new Content();\n        Content newContent = new Content();\n        DiffContext context = new DiffContext(null);\n        ChangedContent content = new ChangedContent(oldContent, newContent, context);\n\n        assertFalse(content.equals(new Object()));\n    }\n\n    @Test\n    void testEquals_Null() {\n        Content oldContent = new Content();\n        Content newContent = new Content();\n        DiffContext context = new DiffContext(null);\n        ChangedContent content = new ChangedContent(oldContent, newContent, context);\n\n        assertFalse(content.equals(null));\n    }\n\n    @Test\n    void testEquals_DifferentFields() {\n        Content oldContent = new Content();\n        Content newContent = new Content();\n        DiffContext context = new DiffContext(null);\n        ChangedContent content1 = new ChangedContent(oldContent, newContent, context);\n        ChangedContent content2 = new ChangedContent(new Content(), new Content(), new DiffContext(null));\n\n        assertFalse(content1.equals(content2));\n    }\n\n    @Test\n    void testEquals_SameFields() {\n        Content oldContent = new Content();\n        Content newContent = new Content();\n        DiffContext context = new DiffContext(null);\n        Map<String, MediaType> increased = new LinkedHashMap<>();\n        Map<String, MediaType> missing = new LinkedHashMap<>();\n        Map<String, ChangedMediaType> changed = new LinkedHashMap<>();\n\n        ChangedContent content1 = new ChangedContent(oldContent, newContent, context)\n                .setIncreased(increased)\n                .setMissing(missing)\n                .setChanged(changed);\n\n        ChangedContent content2 = new ChangedContent(oldContent, newContent, context)\n                .setIncreased(increased)\n                .setMissing(missing)\n                .setChanged(changed);\n\n        assertTrue(content1.equals(content2));\n    }\n}\n"}]