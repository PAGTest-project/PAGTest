[{"strategy": "retry", "code": "\npackage org.openapitools.openapidiff.core.model.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.openapitools.openapidiff.core.model.DiffContext;\nimport org.openapitools.openapidiff.core.model.DiffResult;\nimport org.openapitools.openapidiff.core.model.BackwardIncompatibleProp;\n\npublic class ChangedRequired_isItemsChangedTest {\n\n    @Mock\n    private DiffContext context;\n    @InjectMocks\n    private ChangedRequired changedRequired;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testIsItemsChanged_RequestWithIncreased_Incompatible() {\n        List<String> oldValue = Collections.emptyList();\n        List<String> newValue = Arrays.asList(\"item1\");\n        changedRequired = new ChangedRequired(oldValue, newValue, context);\n\n        when(context.isRequest()).thenReturn(true);\n        when(BackwardIncompatibleProp.REQUEST_REQUIRED_INCREASED.enabled(context)).thenReturn(true);\n\n        assertEquals(DiffResult.INCOMPATIBLE, changedRequired.isItemsChanged());\n    }\n\n    @Test\n    public void testIsItemsChanged_ResponseWithMissing_Incompatible() {\n        List<String> oldValue = Arrays.asList(\"item1\");\n        List<String> newValue = Collections.emptyList();\n        changedRequired = new ChangedRequired(oldValue, newValue, context);\n\n        when(context.isResponse()).thenReturn(true);\n        when(BackwardIncompatibleProp.RESPONSE_REQUIRED_DECREASED.enabled(context)).thenReturn(true);\n\n        assertEquals(DiffResult.INCOMPATIBLE, changedRequired.isItemsChanged());\n    }\n\n    @Test\n    public void testIsItemsChanged_Compatible() {\n        List<String> oldValue = Collections.emptyList();\n        List<String> newValue = Collections.emptyList();\n        changedRequired = new ChangedRequired(oldValue, newValue, context);\n\n        when(context.isRequest()).thenReturn(false);\n        when(context.isResponse()).thenReturn(false);\n\n        assertEquals(DiffResult.COMPATIBLE, changedRequired.isItemsChanged());\n    }\n}\n"}]