[{"strategy": "generate", "code": "\npackage org.openapitools.openapidiff.core.model;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport io.swagger.v3.oas.models.parameters.Parameter;\nimport org.junit.jupiter.api.Test;\n\npublic class ChangedParameter_equalsTest {\n\n    @Test\n    public void testEquals_SameInstance() {\n        ChangedParameter param = new ChangedParameter(\"name\", \"in\", new DiffContext(null));\n        assertTrue(param.equals(param));\n    }\n\n    @Test\n    public void testEquals_NullObject() {\n        ChangedParameter param = new ChangedParameter(\"name\", \"in\", new DiffContext(null));\n        assertFalse(param.equals(null));\n    }\n\n    @Test\n    public void testEquals_DifferentClass() {\n        ChangedParameter param = new ChangedParameter(\"name\", \"in\", new DiffContext(null));\n        assertFalse(param.equals(\"not a ChangedParameter\"));\n    }\n\n    @Test\n    public void testEquals_DifferentParameters() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null))\n                .setOldParameter(new Parameter().name(\"oldParam\"))\n                .setNewParameter(new Parameter().name(\"newParam\"))\n                .setChangeRequired(true)\n                .setDeprecated(false)\n                .setChangeStyle(true)\n                .setChangeExplode(false)\n                .setChangeAllowEmptyValue(true);\n\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null))\n                .setOldParameter(new Parameter().name(\"oldParam\"))\n                .setNewParameter(new Parameter().name(\"newParam\"))\n                .setChangeRequired(true)\n                .setDeprecated(false)\n                .setChangeStyle(true)\n                .setChangeExplode(false)\n                .setChangeAllowEmptyValue(true);\n\n        assertTrue(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentContext() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null));\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null).copyWithMethod(PathItem.HttpMethod.GET));\n        assertFalse(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentOldParameter() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setOldParameter(new Parameter().name(\"oldParam1\"));\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setOldParameter(new Parameter().name(\"oldParam2\"));\n        assertFalse(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentNewParameter() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setNewParameter(new Parameter().name(\"newParam1\"));\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setNewParameter(new Parameter().name(\"newParam2\"));\n        assertFalse(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentChangeRequired() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeRequired(true);\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeRequired(false);\n        assertFalse(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentDeprecated() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setDeprecated(true);\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setDeprecated(false);\n        assertFalse(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentChangeStyle() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeStyle(true);\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeStyle(false);\n        assertFalse(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentChangeExplode() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeExplode(true);\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeExplode(false);\n        assertFalse(param1.equals(param2));\n    }\n\n    @Test\n    public void testEquals_DifferentChangeAllowEmptyValue() {\n        ChangedParameter param1 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeAllowEmptyValue(true);\n        ChangedParameter param2 = new ChangedParameter(\"name\", \"in\", new DiffContext(null)).setChangeAllowEmptyValue(false);\n        assertFalse(param1.equals(param2));\n    }\n}\n"}]