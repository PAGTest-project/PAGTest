{"target_method": "getTypeChangedSchema", "signature": "DeferredChanged<ChangedSchema> getTypeChangedSchema(Schema, Schema, DiffContext)", "gwt_enhancements": {"When": {"enhanced_by": [{"method_name": "resolveComposedSchema(Components, Schema, Set<String>)", "relation_type": "State Dependency", "confidence": 0.8, "reason": "The method resolves composed schemas, which might be necessary to fully understand the schema changes before comparing types.", "is_external": false}, {"method_name": "refPointer.resolveRef(Components, Schema, String)", "relation_type": "Resource Access Similarity", "confidence": 0.75, "reason": "Resolving references is crucial for accurately comparing schemas, especially when dealing with composed schemas.", "is_external": false}]}, "Then": {"enhanced_by": [{"method_name": "SchemaDiff.getSchemaDiffResult(OpenApiDiff)", "relation_type": "Output Similarity", "confidence": 0.9, "reason": "The method returns a SchemaDiffResult, which can be used to construct assertions about the schema changes detected by getTypeChangedSchema.", "is_external": false}, {"method_name": "computeDiffForReal(RecursiveSchemaSet, Schema, Schema, DiffContext)", "relation_type": "Behavior Similarity", "confidence": 0.85, "reason": "Both methods involve detailed schema comparisons and can inform assertions about schema changes.", "is_external": false}]}}}