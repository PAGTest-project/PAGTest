[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.helper.Validate;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Element_insertChildrenTest {\n\n    @Test\n    void testInsertChildren() {\n        // Given\n        Element element = new Element(\"div\");\n        Collection<Node> children = Arrays.asList(new Element(\"span\"), new TextNode(\"text\"));\n\n        // When\n        Element result = element.insertChildren(0, children);\n\n        // Then\n        assertEquals(2, element.childNodeSize());\n        assertEquals(\"span\", element.child(0).nodeName());\n        assertEquals(\"#text\", element.child(1).nodeName());\n    }\n\n    @Test\n    void testInsertChildrenWithNegativeIndex() {\n        // Given\n        Element element = new Element(\"div\");\n        Collection<Node> children = Arrays.asList(new Element(\"span\"), new TextNode(\"text\"));\n\n        // When\n        Element result = element.insertChildren(-1, children);\n\n        // Then\n        assertEquals(2, element.childNodeSize());\n        assertEquals(\"span\", element.child(0).nodeName());\n        assertEquals(\"#text\", element.child(1).nodeName());\n    }\n\n    @Test\n    void testInsertChildrenWithOutOfBoundsIndex() {\n        // Given\n        Element element = new Element(\"div\");\n        Collection<Node> children = Arrays.asList(new Element(\"span\"), new TextNode(\"text\"));\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> element.insertChildren(3, children));\n    }\n\n    @Test\n    void testInsertChildrenWithNullCollection() {\n        // Given\n        Element element = new Element(\"div\");\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> element.insertChildren(0, null));\n    }\n}\n"}]