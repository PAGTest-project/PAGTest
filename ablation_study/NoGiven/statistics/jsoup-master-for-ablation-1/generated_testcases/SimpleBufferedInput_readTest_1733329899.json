[{"strategy": "generate", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.when;\n\nclass SimpleBufferedInput_readTest {\n\n    @Test\n    void testRead_BufferNotEmpty() throws IOException {\n        InputStream mockInputStream = Mockito.mock(InputStream.class);\n        when(mockInputStream.read(Mockito.any(byte[].class), Mockito.anyInt(), Mockito.anyInt())).thenReturn(5);\n\n        SimpleBufferedInput bufferedInput = new SimpleBufferedInput(mockInputStream);\n        bufferedInput.fill(); // Ensure buffer is filled\n\n        int result = bufferedInput.read();\n        assertEquals(0, result); // Assuming the first byte in the buffer is 0\n    }\n\n    @Test\n    void testRead_BufferEmptyAndStreamEmpty() throws IOException {\n        InputStream mockInputStream = Mockito.mock(InputStream.class);\n        when(mockInputStream.read(Mockito.any(byte[].class), Mockito.anyInt(), Mockito.anyInt())).thenReturn(-1);\n\n        SimpleBufferedInput bufferedInput = new SimpleBufferedInput(mockInputStream);\n        bufferedInput.fill(); // Ensure buffer is filled\n\n        int result = bufferedInput.read();\n        assertEquals(-1, result); // Stream is empty, should return -1\n    }\n\n    @Test\n    void testRead_BufferEmptyAndStreamHasData() throws IOException {\n        byte[] data = {1, 2, 3, 4, 5};\n        InputStream inputStream = new ByteArrayInputStream(data);\n\n        SimpleBufferedInput bufferedInput = new SimpleBufferedInput(inputStream);\n        bufferedInput.fill(); // Ensure buffer is filled\n\n        int result = bufferedInput.read();\n        assertEquals(1, result); // First byte from the stream\n    }\n\n    @Test\n    void testRead_IOExceptionDuringFill() throws IOException {\n        InputStream mockInputStream = Mockito.mock(InputStream.class);\n        when(mockInputStream.read(Mockito.any(byte[].class), Mockito.anyInt(), Mockito.anyInt())).thenThrow(new IOException(\"Test Exception\"));\n\n        SimpleBufferedInput bufferedInput = new SimpleBufferedInput(mockInputStream);\n\n        assertThrows(IOException.class, bufferedInput::read);\n    }\n}\n"}]