[{"strategy": "generate", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Iterator;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_joinTest {\n\n    @BeforeEach\n    public void setUp() {\n        // Any setup code if needed\n    }\n\n    @Test\n    public void testJoinEmptyIterator() {\n        Iterator<String> emptyIterator = Collections.<String>emptyList().iterator();\n        assertEquals(\"\", StringUtil.join(emptyIterator, \",\"));\n    }\n\n    @Test\n    public void testJoinSingleElement() {\n        Iterator<String> singleElementIterator = Collections.singletonList(\"single\").iterator();\n        assertEquals(\"single\", StringUtil.join(singleElementIterator, \",\"));\n    }\n\n    @Test\n    public void testJoinMultipleElements() {\n        Iterator<String> multipleElementsIterator = Arrays.asList(\"one\", \"two\", \"three\").iterator();\n        assertEquals(\"one,two,three\", StringUtil.join(multipleElementsIterator, \",\"));\n    }\n\n    @Test\n    public void testJoinWithBlankStrings() {\n        Iterator<String> blankStringsIterator = Arrays.asList(\"\", \"two\", \"\").iterator();\n        assertEquals(\",two,\", StringUtil.join(blankStringsIterator, \",\"));\n    }\n\n    @Test\n    public void testJoinWithNumericStrings() {\n        Iterator<String> numericStringsIterator = Arrays.asList(\"123\", \"456\", \"789\").iterator();\n        assertEquals(\"123,456,789\", StringUtil.join(numericStringsIterator, \",\"));\n    }\n\n    @Test\n    public void testJoinWithWhitespaceNormalization() {\n        Iterator<String> whitespaceStringsIterator = Arrays.asList(\"  one  \", \"  two  \", \"  three  \").iterator();\n        String joined = StringUtil.join(whitespaceStringsIterator, \",\");\n        assertEquals(\"  one  ,  two  ,  three  \", joined);\n        assertEquals(\"one,two,three\", StringUtil.normaliseWhitespace(joined));\n    }\n\n    @Test\n    public void testJoinWithAsciiOnly() {\n        Iterator<String> asciiStringsIterator = Arrays.asList(\"abc\", \"def\", \"ghi\").iterator();\n        String joined = StringUtil.join(asciiStringsIterator, \",\");\n        assertTrue(StringUtil.isAscii(joined));\n    }\n}\n"}]