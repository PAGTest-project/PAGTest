[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.SerializationException;\nimport org.jsoup.internal.StringUtil;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class XmlDeclaration_getWholeDeclarationTest {\n\n    @Test\n    public void testGetWholeDeclaration_Success() {\n        // Given\n        XmlDeclaration xmlDeclaration = new XmlDeclaration(\"name\", false);\n        xmlDeclaration.attr(\"key\", \"value\");\n\n        // When\n        String result = xmlDeclaration.getWholeDeclaration();\n\n        // Then\n        assertEquals(\" key=\\\"value\\\"\", result);\n    }\n\n    @Test\n    public void testGetWholeDeclaration_IOException() throws IOException {\n        // Given\n        XmlDeclaration xmlDeclaration = new XmlDeclaration(\"name\", false);\n        xmlDeclaration.attr(\"key\", \"value\");\n\n        XmlDeclaration spyXmlDeclaration = spy(xmlDeclaration);\n        doThrow(new IOException(\"Mocked IOException\")).when(spyXmlDeclaration).getWholeDeclaration(any(StringBuilder.class), any(Document.OutputSettings.class));\n\n        // When & Then\n        assertThrows(SerializationException.class, () -> spyXmlDeclaration.getWholeDeclaration());\n    }\n}\n"}]