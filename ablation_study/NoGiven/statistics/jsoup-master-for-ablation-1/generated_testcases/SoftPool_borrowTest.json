[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Stack;\nimport java.util.function.Supplier;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SoftPool_borrowTest {\n    private static final int BufSize = 1024;\n    private SoftPool<char[]> softPool;\n\n    @BeforeEach\n    public void setUp() {\n        softPool = new SoftPool<>(() -> new char[BufSize]);\n    }\n\n    @Test\n    public void testBorrowWhenStackIsEmpty() {\n        char[] result = softPool.borrow();\n        assertNotNull(result);\n        assertEquals(BufSize, result.length);\n    }\n\n    @Test\n    public void testBorrowWhenStackIsNotEmpty() {\n        char[] buffer = new char[BufSize];\n        softPool.release(buffer);\n        char[] result = softPool.borrow();\n        assertNotNull(result);\n        assertEquals(BufSize, result.length);\n        assertSame(buffer, result);\n    }\n\n    @Test\n    public void testBorrowAfterReleasingMultipleObjects() {\n        char[] buffer1 = new char[BufSize];\n        char[] buffer2 = new char[BufSize];\n        softPool.release(buffer1);\n        softPool.release(buffer2);\n        char[] result1 = softPool.borrow();\n        char[] result2 = softPool.borrow();\n        assertNotNull(result1);\n        assertNotNull(result2);\n        assertEquals(BufSize, result1.length);\n        assertEquals(BufSize, result2.length);\n        assertSame(buffer2, result1); // The last released object should be the first borrowed\n        assertSame(buffer1, result2);\n    }\n\n    @Test\n    public void testBorrowWithMaxIdleLimit() {\n        for (int i = 0; i < SoftPool.MaxIdle + 1; i++) {\n            softPool.release(new char[BufSize]);\n        }\n        char[] result = softPool.borrow();\n        assertNotNull(result);\n        assertEquals(BufSize, result.length);\n    }\n}\n"}]