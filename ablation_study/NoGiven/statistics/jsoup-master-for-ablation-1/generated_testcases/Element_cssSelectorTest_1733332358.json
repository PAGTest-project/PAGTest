[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.select.Elements;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_cssSelectorTest {\n    private Document doc;\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        doc = Jsoup.parse(\"<html><body><div id='uniqueDiv' class='testClass'><p>Test</p></div></body></html>\");\n        element = doc.selectFirst(\"div\");\n    }\n\n    @Test\n    public void testCssSelectorWithUniqueId() {\n        assertEquals(\"#uniqueDiv\", element.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithoutUniqueId() {\n        element.attr(\"id\", \"\");\n        assertEquals(\"div.testClass\", element.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithNoOwnerDocument() {\n        element.removeAttr(\"id\");\n        element.removeAttr(\"class\");\n        element.ownerDocument().remove();\n        assertEquals(\"div\", element.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithParent() {\n        Element child = element.selectFirst(\"p\");\n        assertEquals(\"div.testClass > p\", child.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithMultipleClasses() {\n        element.addClass(\"anotherClass\");\n        assertEquals(\"div.testClass.anotherClass\", element.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithNoAttributes() {\n        element.removeAttr(\"id\");\n        element.removeAttr(\"class\");\n        assertEquals(\"div\", element.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithNestedElements() {\n        Element nested = element.appendElement(\"div\").appendElement(\"p\");\n        assertEquals(\"div.testClass > div > p\", nested.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithSiblingElements() {\n        Element sibling = element.parent().appendElement(\"div\");\n        assertEquals(\"div.testClass\", element.cssSelector());\n        assertEquals(\"div\", sibling.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithDocumentRoot() {\n        Element root = doc.selectFirst(\"html\");\n        assertEquals(\"html\", root.cssSelector());\n    }\n\n    @Test\n    public void testCssSelectorWithEmptyDocument() {\n        Document emptyDoc = Jsoup.parse(\"\");\n        Element emptyElement = emptyDoc.appendElement(\"div\");\n        assertEquals(\"div\", emptyElement.cssSelector());\n    }\n}\n"}]