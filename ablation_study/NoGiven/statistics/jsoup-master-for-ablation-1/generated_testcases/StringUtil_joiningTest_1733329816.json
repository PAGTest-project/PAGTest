[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class StringUtil_joiningTest {\n\n    @Test\n    public void testJoiningWithDelimiter() {\n        String delimiter = \", \";\n        String result = Arrays.asList(\"apple\", \"banana\", \"cherry\")\n                .stream()\n                .collect(StringUtil.joining(delimiter));\n        assertEquals(\"apple, banana, cherry\", result);\n    }\n\n    @Test\n    public void testJoiningWithEmptyCollection() {\n        String delimiter = \", \";\n        String result = Collections.<String>emptyList()\n                .stream()\n                .collect(StringUtil.joining(delimiter));\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    public void testJoiningWithSingleElement() {\n        String delimiter = \", \";\n        String result = Collections.singletonList(\"apple\")\n                .stream()\n                .collect(StringUtil.joining(delimiter));\n        assertEquals(\"apple\", result);\n    }\n\n    @Test\n    public void testJoiningWithWhitespaceNormalization() {\n        String delimiter = \" \";\n        String result = Arrays.asList(\"  apple\", \"banana  \", \" cherry \")\n                .stream()\n                .collect(StringUtil.joining(delimiter));\n        assertEquals(\"apple banana cherry\", StringUtil.normaliseWhitespace(result));\n    }\n\n    @Test\n    public void testJoiningWithAsciiCheck() {\n        String delimiter = \"-\";\n        String result = Arrays.asList(\"apple\", \"banana\", \"cherry\")\n                .stream()\n                .collect(StringUtil.joining(delimiter));\n        assertTrue(StringUtil.isAscii(result));\n    }\n}\n"}]