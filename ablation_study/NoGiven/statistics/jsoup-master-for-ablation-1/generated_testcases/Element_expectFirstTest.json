[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_expectFirstTest {\n    private Document doc;\n\n    @BeforeEach\n    public void setUp() {\n        String html = \"<body><div><p>One</p></div><div><p>Two</p></div><div>Three</div></body>\";\n        doc = Jsoup.parse(html);\n    }\n\n    @Test\n    public void testExpectFirstWithExistingElement() {\n        Element body = doc.body();\n        Element firstDiv = body.expectFirst(\"div\");\n        assertNotNull(firstDiv);\n        assertEquals(\"div\", firstDiv.tagName());\n    }\n\n    @Test\n    public void testExpectFirstWithNonExistingElement() {\n        Element body = doc.body();\n        try {\n            Element nonExistingElement = body.expectFirst(\"nonexistent\");\n            fail(\"Expected an IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n        }\n    }\n\n    @Test\n    public void testExpectFirstWithNestedElement() {\n        Element body = doc.body();\n        Element firstP = body.expectFirst(\"div > p\");\n        assertNotNull(firstP);\n        assertEquals(\"p\", firstP.tagName());\n        assertEquals(\"One\", firstP.text());\n    }\n\n    @Test\n    public void testExpectFirstWithEmptyDocument() {\n        Document emptyDoc = Jsoup.parse(\"\");\n        try {\n            Element emptyElement = emptyDoc.expectFirst(\"div\");\n            fail(\"Expected an IllegalArgumentException to be thrown\");\n        } catch (IllegalArgumentException e) {\n            // Expected exception\n        }\n    }\n}\n"}]