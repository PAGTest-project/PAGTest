[{"strategy": "generate", "code": "\npackage org.jsoup.parser;\n\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Evaluator;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.UncheckedIOException;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\npublic class StreamParser_selectNextTest {\n\n    @Test\n    public void testSelectNext_ElementFound() throws IOException {\n        // Given\n        StreamParser parser = new StreamParser(Parser.htmlParser());\n        parser.parse(new StringReader(\"<html><body><div class='test'></div></body></html>\"), \"http://example.com\");\n        Evaluator eval = Mockito.mock(Evaluator.class);\n        Document doc = parser.document();\n        when(eval.asPredicate(doc)).thenReturn(element -> \"test\".equals(element.className()));\n\n        // When\n        Element result = parser.selectNext(eval);\n\n        // Then\n        assertNotNull(result);\n        assertEquals(\"test\", result.className());\n    }\n\n    @Test\n    public void testSelectNext_NoElementFound() throws IOException {\n        // Given\n        StreamParser parser = new StreamParser(Parser.htmlParser());\n        parser.parse(new StringReader(\"<html><body><div class='not-test'></div></body></html>\"), \"http://example.com\");\n        Evaluator eval = Mockito.mock(Evaluator.class);\n        Document doc = parser.document();\n        when(eval.asPredicate(doc)).thenReturn(element -> \"test\".equals(element.className()));\n\n        // When\n        Element result = parser.selectNext(eval);\n\n        // Then\n        assertNull(result);\n    }\n\n    @Test\n    public void testSelectNext_IOException() throws IOException {\n        // Given\n        StreamParser parser = new StreamParser(Parser.htmlParser());\n        parser.parse(new StringReader(\"<html><body><div class='test'></div></body></html>\"), \"http://example.com\");\n        Evaluator eval = Mockito.mock(Evaluator.class);\n        Document doc = parser.document();\n        when(eval.asPredicate(doc)).thenThrow(new UncheckedIOException(new IOException(\"Test IO Exception\")));\n\n        // When & Then\n        IOException exception = assertThrows(IOException.class, () -> parser.selectNext(eval));\n        assertEquals(\"Test IO Exception\", exception.getMessage());\n    }\n}\n"}]