[{"strategy": "generate", "code": "\npackage org.jsoup.nodes;\n\nimport org.jsoup.parser.ParseSettings;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Attributes_deduplicateTest {\n    private Attributes attributes;\n\n    @BeforeEach\n    public void setUp() {\n        attributes = new Attributes();\n    }\n\n    @Test\n    public void testDeduplicateWithEmptyAttributes() {\n        ParseSettings settings = new ParseSettings(false, false);\n        assertEquals(0, attributes.deduplicate(settings));\n    }\n\n    @Test\n    public void testDeduplicateWithNoDuplicates() {\n        attributes.put(\"key1\", \"value1\");\n        attributes.put(\"key2\", \"value2\");\n        ParseSettings settings = new ParseSettings(false, false);\n        assertEquals(0, attributes.deduplicate(settings));\n        assertEquals(2, attributes.size());\n    }\n\n    @Test\n    public void testDeduplicateWithCaseInsensitiveDuplicates() {\n        attributes.put(\"key1\", \"value1\");\n        attributes.put(\"KEY1\", \"value2\");\n        ParseSettings settings = new ParseSettings(false, false);\n        assertEquals(1, attributes.deduplicate(settings));\n        assertEquals(1, attributes.size());\n        assertEquals(\"value2\", attributes.get(\"key1\"));\n    }\n\n    @Test\n    public void testDeduplicateWithCaseSensitiveDuplicates() {\n        attributes.put(\"key1\", \"value1\");\n        attributes.put(\"KEY1\", \"value2\");\n        ParseSettings settings = new ParseSettings(false, true);\n        assertEquals(0, attributes.deduplicate(settings));\n        assertEquals(2, attributes.size());\n        assertEquals(\"value1\", attributes.get(\"key1\"));\n        assertEquals(\"value2\", attributes.get(\"KEY1\"));\n    }\n\n    @Test\n    public void testDeduplicateWithMixedDuplicates() {\n        attributes.put(\"key1\", \"value1\");\n        attributes.put(\"KEY1\", \"value2\");\n        attributes.put(\"key2\", \"value3\");\n        attributes.put(\"key2\", \"value4\");\n        ParseSettings settings = new ParseSettings(false, false);\n        assertEquals(2, attributes.deduplicate(settings));\n        assertEquals(2, attributes.size());\n        assertEquals(\"value2\", attributes.get(\"key1\"));\n        assertEquals(\"value4\", attributes.get(\"key2\"));\n    }\n\n    @Test\n    public void testDeduplicateWithNormalization() {\n        attributes.put(\"KEY1\", \"value1\");\n        attributes.put(\"KEY2\", \"value2\");\n        attributes.normalize();\n        ParseSettings settings = new ParseSettings(false, false);\n        assertEquals(0, attributes.deduplicate(settings));\n        assertEquals(2, attributes.size());\n        assertEquals(\"value1\", attributes.get(\"key1\"));\n        assertEquals(\"value2\", attributes.get(\"key2\"));\n    }\n\n    @Test\n    public void testDeduplicateWithAddAll() {\n        Attributes otherAttributes = new Attributes();\n        otherAttributes.put(\"key1\", \"value1\");\n        otherAttributes.put(\"KEY1\", \"value2\");\n        attributes.addAll(otherAttributes);\n        ParseSettings settings = new ParseSettings(false, false);\n        assertEquals(1, attributes.deduplicate(settings));\n        assertEquals(1, attributes.size());\n        assertEquals(\"value2\", attributes.get(\"key1\"));\n    }\n}\n"}]