[{"strategy": "retry", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class ControllableInputStream_readToByteBufferTest {\n\n    @Test\n    public void testReadToByteBuffer_Capped() throws IOException {\n        byte[] data = \"test data\".getBytes();\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n        ByteBuffer result = SimpleBufferedInput.readToByteBuffer(inputStream, 4);\n        assertEquals(4, result.limit());\n        assertEquals(\"test\", new String(result.array(), 0, result.limit()));\n    }\n\n    @Test\n    public void testReadToByteBuffer_Uncapped() throws IOException {\n        byte[] data = \"test data\".getBytes();\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n        ByteBuffer result = SimpleBufferedInput.readToByteBuffer(inputStream, 0);\n        assertEquals(data.length, result.limit());\n        assertEquals(\"test data\", new String(result.array(), 0, result.limit()));\n    }\n\n    @Test\n    public void testReadToByteBuffer_NullInputStream() {\n        assertThrows(IllegalArgumentException.class, () -> {\n            SimpleBufferedInput.readToByteBuffer(null, 10);\n        });\n    }\n\n    @Test\n    public void testReadToByteBuffer_NegativeMaxSize() {\n        byte[] data = \"test data\".getBytes();\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n        assertThrows(IllegalArgumentException.class, () -> {\n            SimpleBufferedInput.readToByteBuffer(inputStream, -1);\n        });\n    }\n}\n"}]