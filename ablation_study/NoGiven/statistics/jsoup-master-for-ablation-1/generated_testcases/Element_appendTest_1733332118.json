[{"strategy": "retry", "code": "\npackage org.jsoup.nodes;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Element_appendTest {\n    private Element element;\n\n    @BeforeEach\n    public void setUp() {\n        element = new Element(\"div\");\n    }\n\n    @Test\n    public void testAppendValidHtml() {\n        String html = \"<p>Test paragraph</p>\";\n        Element result = element.append(html);\n        assertEquals(element, result);\n        assertEquals(\"<div><p>Test paragraph</p></div>\", element.outerHtml());\n    }\n\n    @Test\n    public void testAppendNullHtml() {\n        assertThrows(IllegalArgumentException.class, () -> element.append(null));\n    }\n\n    @Test\n    public void testAppendEmptyHtml() {\n        String html = \"\";\n        Element result = element.append(html);\n        assertEquals(element, result);\n        assertEquals(\"<div></div>\", element.outerHtml());\n    }\n\n    @Test\n    public void testAppendMultipleNodes() {\n        String html = \"<p>First</p><p>Second</p>\";\n        Element result = element.append(html);\n        assertEquals(element, result);\n        assertEquals(\"<div><p>First</p><p>Second</p></div>\", element.outerHtml());\n    }\n\n    @Test\n    public void testAppendWithExistingChildren() {\n        element.append(\"<p>Existing</p>\");\n        String html = \"<p>New</p>\";\n        Element result = element.append(html);\n        assertEquals(element, result);\n        assertEquals(\"<div><p>Existing</p><p>New</p></div>\", element.outerHtml());\n    }\n}\n"}]