[{"strategy": "generate", "code": "\npackage org.jsoup.parser;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class TokenQueue_chompBalancedTest {\n    private TokenQueue tokenQueue;\n\n    @BeforeEach\n    public void setUp() {\n        tokenQueue = new TokenQueue(\"\");\n    }\n\n    @Test\n    public void testChompBalancedSimple() {\n        tokenQueue = new TokenQueue(\"(one (two) three)\");\n        assertEquals(\"one (two) three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithEscapes() {\n        tokenQueue = new TokenQueue(\"(one \\\\(two\\\\) three)\");\n        assertEquals(\"one \\\\(two\\\\) three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithQuotes() {\n        tokenQueue = new TokenQueue(\"(one 'two' \\\"three\\\")\");\n        assertEquals(\"one 'two' \\\"three\\\"\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithRegexQE() {\n        tokenQueue = new TokenQueue(\"(one \\\\Qtwo\\\\E three)\");\n        assertEquals(\"one \\\\Qtwo\\\\E three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedUnbalanced() {\n        tokenQueue = new TokenQueue(\"(one (two) three\");\n        assertThrows(IllegalArgumentException.class, () -> tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedEmpty() {\n        tokenQueue = new TokenQueue(\"\");\n        assertEquals(\"\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithLeadingWhitespace() {\n        tokenQueue = new TokenQueue(\"   (one (two) three)\");\n        tokenQueue.consumeWhitespace();\n        assertEquals(\"one (two) three\", tokenQueue.chompBalanced('(', ')'));\n    }\n\n    @Test\n    public void testChompBalancedWithLeadingWord() {\n        tokenQueue = new TokenQueue(\"start (one (two) three)\");\n        tokenQueue.consumeWord();\n        assertEquals(\"one (two) three\", tokenQueue.chompBalanced('(', ')'));\n    }\n}\n"}]