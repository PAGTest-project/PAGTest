[{"strategy": "generate", "code": "\npackage org.jsoup.internal;\n\nimport org.junit.jupiter.api.Test;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass SimpleBufferedInput_availableTest {\n\n    @Test\n    void testAvailableWithBufferedData() throws IOException {\n        byte[] data = new byte[10];\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n        SimpleBufferedInput bufferedInput = new SimpleBufferedInput(inputStream);\n\n        // Fill the buffer\n        bufferedInput.read();\n\n        // Test available() with buffered data\n        assertEquals(9, bufferedInput.available());\n    }\n\n    @Test\n    void testAvailableWithNoBufferedDataAndInputStreamAvailable() throws IOException {\n        byte[] data = new byte[10];\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n        SimpleBufferedInput bufferedInput = new SimpleBufferedInput(inputStream);\n\n        // Test available() with no buffered data but input stream available\n        assertEquals(10, bufferedInput.available());\n    }\n\n    @Test\n    void testAvailableWithNoBufferedDataAndInputStreamFullyRead() throws IOException {\n        byte[] data = new byte[0];\n        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\n        SimpleBufferedInput bufferedInput = new SimpleBufferedInput(inputStream);\n\n        // Read all data to mark the input stream as fully read\n        bufferedInput.read();\n\n        // Test available() with no buffered data and input stream fully read\n        assertEquals(0, bufferedInput.available());\n    }\n}\n"}]