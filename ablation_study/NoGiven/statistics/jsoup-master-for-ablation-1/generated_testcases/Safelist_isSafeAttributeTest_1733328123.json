[{"strategy": "generate", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class Safelist_isSafeAttributeTest {\n    private Safelist safelist;\n\n    @BeforeEach\n    public void setUp() {\n        safelist = new Safelist();\n    }\n\n    @Test\n    public void testIsSafeAttribute_AllowedAttribute() {\n        safelist.addAttributes(\"a\", \"href\");\n        Element el = new Element(\"a\");\n        Attribute attr = new Attribute(\"href\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_DisallowedAttribute() {\n        safelist.addAttributes(\"a\", \"href\");\n        Element el = new Element(\"a\");\n        Attribute attr = new Attribute(\"onclick\", \"alert('xss')\");\n        assertFalse(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_EnforcedAttribute() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        Element el = new Element(\"a\");\n        Attribute attr = new Attribute(\"rel\", \"nofollow\");\n        assertTrue(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_EnforcedAttributeMismatch() {\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n        Element el = new Element(\"a\");\n        Attribute attr = new Attribute(\"rel\", \"follow\");\n        assertFalse(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_ProtocolValidation() {\n        safelist.addAttributes(\"a\", \"href\");\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        Element el = new Element(\"a\");\n        Attribute attr = new Attribute(\"href\", \"http://example.com\");\n        assertTrue(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_InvalidProtocol() {\n        safelist.addAttributes(\"a\", \"href\");\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        Element el = new Element(\"a\");\n        Attribute attr = new Attribute(\"href\", \"javascript:alert('xss')\");\n        assertFalse(safelist.isSafeAttribute(\"a\", el, attr));\n    }\n\n    @Test\n    public void testIsSafeAttribute_AllTag() {\n        safelist.addAttributes(\":all\", \"class\");\n        Element el = new Element(\"div\");\n        Attribute attr = new Attribute(\"class\", \"container\");\n        assertTrue(safelist.isSafeAttribute(\"div\", el, attr));\n    }\n}\n"}]