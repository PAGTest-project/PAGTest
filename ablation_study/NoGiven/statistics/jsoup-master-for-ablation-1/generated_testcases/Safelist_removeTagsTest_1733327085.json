[{"strategy": "retry", "code": "\npackage org.jsoup.safety;\n\nimport org.jsoup.nodes.Attribute;\nimport org.jsoup.nodes.Attributes;\nimport org.jsoup.nodes.Element;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass Safelist_removeTagsTest {\n\n    private Safelist safelist;\n\n    @BeforeEach\n    void setUp() {\n        safelist = new Safelist();\n        safelist.addTags(\"a\", \"b\", \"blockquote\");\n        safelist.addAttributes(\"a\", \"href\");\n        safelist.addAttributes(\"blockquote\", \"cite\");\n        safelist.addProtocols(\"a\", \"href\", \"http\", \"https\");\n        safelist.addProtocols(\"blockquote\", \"cite\", \"http\", \"https\");\n        safelist.addEnforcedAttribute(\"a\", \"rel\", \"nofollow\");\n    }\n\n    @Test\n    void testRemoveTags() {\n        // Given\n        String[] tagsToRemove = {\"a\", \"b\"};\n\n        // When\n        safelist.removeTags(tagsToRemove);\n\n        // Then\n        assertFalse(safelist.isSafeTag(\"a\"));\n        assertFalse(safelist.isSafeTag(\"b\"));\n        assertTrue(safelist.isSafeTag(\"blockquote\"));\n\n        assertNull(safelist.attributes.get(TagName.valueOf(\"a\")));\n        assertNull(safelist.attributes.get(TagName.valueOf(\"b\")));\n        assertNotNull(safelist.attributes.get(TagName.valueOf(\"blockquote\")));\n\n        assertNull(safelist.enforcedAttributes.get(TagName.valueOf(\"a\")));\n        assertNull(safelist.enforcedAttributes.get(TagName.valueOf(\"b\")));\n        assertNotNull(safelist.enforcedAttributes.get(TagName.valueOf(\"blockquote\")));\n\n        assertNull(safelist.protocols.get(TagName.valueOf(\"a\")));\n        assertNull(safelist.protocols.get(TagName.valueOf(\"b\")));\n        assertNotNull(safelist.protocols.get(TagName.valueOf(\"blockquote\")));\n    }\n}\n"}]