{"file_path": "src/test/java/org/apache/commons/collections4/bloomfilter/DefaultBloomFilterTest.java", "testclass_name": "DefaultBloomFilterTest", "dependencies": ["package org.apache.commons.collections4.bloomfilter;", "import static org.junit.jupiter.api.Assertions.assertEquals;", "import static org.junit.jupiter.api.Assertions.assertThrows;", "import static org.junit.jupiter.api.Assertions.assertTrue;", "import java.util.TreeSet;", "import java.util.function.IntPredicate;", "import java.util.function.LongPredicate;", "import org.junit.jupiter.api.Test;"], "name": "DefaultBloomFilterTest", "description": "Unit tests for the DefaultBloomFilter class, focusing on its merge, cardinality, and intersection functionalities.", "class_members": {"variables": [], "methods": [], "nested_classes": [{"name": "AbstractDefaultBloomFilter", "description": "Abstract class implementing BloomFilter interface with common functionalities."}, {"name": "BrokenCardinality", "description": "Subclass of NonSparseDefaultBloomFilter with a broken cardinality method."}, {"name": "NonSparseDefaultBloomFilter", "description": "Default implementation of a non-sparse Bloom filter."}, {"name": "SparseDefaultBloomFilter", "description": "Default implementation of a sparse Bloom filter."}]}, "fixtures": [], "test_cases": [{"name": "testDefaultBloomFilterSimpleSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(Hasher)", "AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "Shape", "Hasher", "IncrementingHasher"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality of a SparseDefaultBloomFilter with a specific hasher and verifies the cardinality."}, {"name": "testDefaultBloomFilterSparseSpecificMerge", "primary_tested": ["AbstractDefaultBloomFilter.merge(IndexExtractor)", "AbstractDefaultBloomFilter.cardinality()"], "associated_methods": ["AbstractDefaultBloomFilter.copy()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "Shape", "IncrementingHasher"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality of a SparseDefaultBloomFilter with another filter and verifies the cardinality."}, {"name": "testEstimateLargeN", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateN()"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMapExtractor", "BitMaps"], "class_members": []}, "category": "unit", "description": "Tests the estimation of N for a very large Bloom filter with Integer.MAX_VALUE-1 bits set."}, {"name": "testEstimateNWithBrokenCardinality", "primary_tested": ["BrokenCardinality.estimateN()"], "external_dependencies": {"modules": ["TestingHashers", "BrokenCardinality", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the estimation of N with a Bloom filter having a broken cardinality method, expecting an IllegalArgumentException."}, {"name": "testHasherBasedMergeWithDifferingSparseness", "primary_tested": ["NonSparseDefaultBloomFilter.merge(Hasher)", "SparseDefaultBloomFilter.merge(Hasher)", "BitMapExtractor.processBitMapPairs(BloomFilter, LongBinaryOperator)"], "external_dependencies": {"modules": ["NonSparseDefaultBloomFilter", "SparseDefaultBloomFilter", "Hasher", "IncrementingHasher", "BitMapExtractor", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality with hashers for both non-sparse and sparse Bloom filters and verifies bit map pairs."}, {"name": "testIntersectionLimit", "primary_tested": ["SimpleBloomFilter.merge(BitMapExtractor)", "SimpleBloomFilter.estimateIntersection(BloomFilter)"], "external_dependencies": {"modules": ["Shape", "SimpleBloomFilter", "BitMapExtractor", "BitMaps"], "class_members": []}, "category": "unit", "description": "Tests the intersection estimation for a very large Bloom filter with Integer.MAX_VALUE-1 bits set."}, {"name": "testSparseNonSparseMerging", "primary_tested": ["SparseDefaultBloomFilter.merge(Hasher)", "NonSparseDefaultBloomFilter.merge(Hasher)", "AbstractDefaultBloomFilter.copy()", "AbstractDefaultBloomFilter.cardinality()"], "external_dependencies": {"modules": ["SparseDefaultBloomFilter", "NonSparseDefaultBloomFilter", "TestingHashers", "Shape"], "class_members": []}, "category": "unit", "description": "Tests the merge functionality between sparse and non-sparse Bloom filters and verifies the cardinality."}]}