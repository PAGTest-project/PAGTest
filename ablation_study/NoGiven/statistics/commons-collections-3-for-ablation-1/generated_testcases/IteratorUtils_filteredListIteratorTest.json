[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.function.Predicate;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class IteratorUtils_filteredListIteratorTest {\n\n    @Test\n    public void testFilteredListIterator_Success() {\n        // Given\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        ListIterator<Integer> listIterator = list.listIterator();\n        Predicate<Integer> predicate = n -> n % 2 == 0;\n\n        // When\n        ListIterator<Integer> filteredIterator = IteratorUtils.filteredListIterator(listIterator, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer object) {\n                return predicate.test(object);\n            }\n        });\n\n        // Then\n        assertNotNull(filteredIterator);\n    }\n\n    @Test\n    public void testFilteredListIterator_NullListIterator() {\n        // Given\n        ListIterator<Integer> listIterator = null;\n        Predicate<Integer> predicate = n -> n % 2 == 0;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.filteredListIterator(listIterator, new org.apache.commons.collections4.Predicate<Integer>() {\n                @Override\n                public boolean evaluate(Integer object) {\n                    return predicate.test(object);\n                }\n            });\n        });\n    }\n\n    @Test\n    public void testFilteredListIterator_NullPredicate() {\n        // Given\n        List<Integer> list = Arrays.asList(1, 2, 3, 4, 5);\n        ListIterator<Integer> listIterator = list.listIterator();\n        Predicate<Integer> predicate = null;\n\n        // When & Then\n        assertThrows(NullPointerException.class, () -> {\n            IteratorUtils.filteredListIterator(listIterator, predicate);\n        });\n    }\n}\n"}]