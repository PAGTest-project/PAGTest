[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.UserDataHandler;\n\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class IteratorUtils_getIteratorTest {\n\n    @Test\n    public void testGetIterator() {\n        // Given\n        Object[] array = {1, 2, 3};\n        List<Object> list = Arrays.asList(array);\n        Map<Object, Object> map = new HashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        NodeList nodeList = new NodeList() {\n            @Override\n            public Node item(int index) {\n                return null;\n            }\n\n            @Override\n            public int getLength() {\n                return 0;\n            }\n        };\n        Node node = new Node() {\n            @Override\n            public String getNodeName() {\n                return null;\n            }\n\n            @Override\n            public String getNodeValue() throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void setNodeValue(String nodeValue) throws DOMException {\n\n            }\n\n            @Override\n            public short getNodeType() {\n                return 0;\n            }\n\n            @Override\n            public Node getParentNode() {\n                return null;\n            }\n\n            @Override\n            public NodeList getChildNodes() {\n                return null;\n            }\n\n            @Override\n            public Node getFirstChild() {\n                return null;\n            }\n\n            @Override\n            public Node getLastChild() {\n                return null;\n            }\n\n            @Override\n            public Node getPreviousSibling() {\n                return null;\n            }\n\n            @Override\n            public Node getNextSibling() {\n                return null;\n            }\n\n            @Override\n            public NamedNodeMap getAttributes() {\n                return null;\n            }\n\n            @Override\n            public Document getOwnerDocument() {\n                return null;\n            }\n\n            @Override\n            public Node insertBefore(Node newChild, Node refChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Node replaceChild(Node newChild, Node oldChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Node removeChild(Node oldChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public Node appendChild(Node newChild) throws DOMException {\n                return null;\n            }\n\n            @Override\n            public boolean hasChildNodes() {\n                return false;\n            }\n\n            @Override\n            public Node cloneNode(boolean deep) {\n                return null;\n            }\n\n            @Override\n            public void normalize() {\n\n            }\n\n            @Override\n            public boolean isSupported(String feature, String version) {\n                return false;\n            }\n\n            @Override\n            public String getNamespaceURI() {\n                return null;\n            }\n\n            @Override\n            public String getPrefix() {\n                return null;\n            }\n\n            @Override\n            public void setPrefix(String prefix) throws DOMException {\n\n            }\n\n            @Override\n            public String getLocalName() {\n                return null;\n            }\n\n            @Override\n            public boolean hasAttributes() {\n                return false;\n            }\n\n            @Override\n            public String getBaseURI() {\n                return null;\n            }\n\n            @Override\n            public short compareDocumentPosition(Node other) throws DOMException {\n                return 0;\n            }\n\n            @Override\n            public String getTextContent() throws DOMException {\n                return null;\n            }\n\n            @Override\n            public void setTextContent(String textContent) throws DOMException {\n\n            }\n\n            @Override\n            public boolean isSameNode(Node other) {\n                return false;\n            }\n\n            @Override\n            public String lookupPrefix(String namespaceURI) {\n                return null;\n            }\n\n            @Override\n            public boolean isDefaultNamespace(String namespaceURI) {\n                return false;\n            }\n\n            @Override\n            public String lookupNamespaceURI(String prefix) {\n                return null;\n            }\n\n            @Override\n            public boolean isEqualNode(Node arg) {\n                return false;\n            }\n\n            @Override\n            public Object getFeature(String feature, String version) {\n                return null;\n            }\n\n            @Override\n            public Object setUserData(String key, Object data, UserDataHandler handler) {\n                return null;\n            }\n\n            @Override\n            public Object getUserData(String key) {\n                return null;\n            }\n        };\n\n        // When\n        Iterator<?> iteratorFromArray = IteratorUtils.getIterator(array);\n        Iterator<?> iteratorFromList = IteratorUtils.getIterator(list);\n        Iterator<?> iteratorFromMap = IteratorUtils.getIterator(map);\n        Iterator<?> iteratorFromNodeList = IteratorUtils.getIterator(nodeList);\n        Iterator<?> iteratorFromNode = IteratorUtils.getIterator(node);\n        Iterator<?> iteratorFromNull = IteratorUtils.getIterator(null);\n\n        // Then\n        assertTrue(iteratorFromArray instanceof ArrayIterator);\n        assertTrue(iteratorFromList instanceof Iterator);\n        assertTrue(iteratorFromMap instanceof Iterator);\n        assertTrue(iteratorFromNodeList instanceof NodeListIterator);\n        assertTrue(iteratorFromNode instanceof NodeListIterator);\n        assertTrue(iteratorFromNull instanceof EmptyIterator);\n    }\n}\n"}]