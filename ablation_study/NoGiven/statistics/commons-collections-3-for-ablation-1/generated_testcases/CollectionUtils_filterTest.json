[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class CollectionUtils_filterTest {\n\n    @Test\n    public void testFilter_WithMatchingPredicate() {\n        List<Integer> collection = Arrays.asList(1, 2, 3, 4, 5);\n        Predicate<Integer> predicate = i -> i % 2 == 0;\n\n        boolean result = CollectionUtils.filter(collection, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer i) {\n                return predicate.test(i);\n            }\n        });\n\n        assertTrue(result);\n        assertFalse(collection.contains(1));\n        assertFalse(collection.contains(3));\n        assertFalse(collection.contains(5));\n    }\n\n    @Test\n    public void testFilter_WithNonMatchingPredicate() {\n        List<Integer> collection = Arrays.asList(1, 2, 3, 4, 5);\n        Predicate<Integer> predicate = i -> i > 10;\n\n        boolean result = CollectionUtils.filter(collection, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer i) {\n                return predicate.test(i);\n            }\n        });\n\n        assertFalse(result);\n    }\n\n    @Test\n    public void testFilter_WithNullCollection() {\n        Predicate<Integer> predicate = i -> i % 2 == 0;\n\n        boolean result = CollectionUtils.filter(null, new org.apache.commons.collections4.Predicate<Integer>() {\n            @Override\n            public boolean evaluate(Integer i) {\n                return predicate.test(i);\n            }\n        });\n\n        assertFalse(result);\n    }\n\n    @Test\n    public void testFilter_WithNullPredicate() {\n        List<Integer> collection = Arrays.asList(1, 2, 3, 4, 5);\n\n        boolean result = CollectionUtils.filter(collection, null);\n\n        assertFalse(result);\n    }\n}\n"}]