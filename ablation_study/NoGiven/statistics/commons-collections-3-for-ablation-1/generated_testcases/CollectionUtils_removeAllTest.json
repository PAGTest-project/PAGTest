[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class CollectionUtils_removeAllTest {\n\n    @Test\n    public void testRemoveAll_NoRemoval() {\n        List<String> collection = Arrays.asList(\"a\", \"b\", \"c\");\n        List<String> remove = Collections.emptyList();\n        Equator<String> equator = new Equator<String>() {\n            @Override\n            public boolean equate(String a, String b) {\n                return a.equals(b);\n            }\n\n            @Override\n            public int hash(String o) {\n                return o.hashCode();\n            }\n        };\n\n        Collection<String> result = CollectionUtils.removeAll(collection, remove, equator);\n\n        assertEquals(3, result.size());\n        assertTrue(result.containsAll(collection));\n    }\n\n    @Test\n    public void testRemoveAll_WithRemoval() {\n        List<String> collection = Arrays.asList(\"a\", \"b\", \"c\");\n        List<String> remove = Arrays.asList(\"b\");\n        Equator<String> equator = new Equator<String>() {\n            @Override\n            public boolean equate(String a, String b) {\n                return a.equals(b);\n            }\n\n            @Override\n            public int hash(String o) {\n                return o.hashCode();\n            }\n        };\n\n        Collection<String> result = CollectionUtils.removeAll(collection, remove, equator);\n\n        assertEquals(2, result.size());\n        assertTrue(result.contains(\"a\"));\n        assertTrue(result.contains(\"c\"));\n        assertFalse(result.contains(\"b\"));\n    }\n\n    @Test\n    public void testRemoveAll_NullInputs() {\n        assertThrows(NullPointerException.class, () -> {\n            CollectionUtils.removeAll(null, Collections.emptyList(), new Equator<String>() {\n                @Override\n                public boolean equate(String a, String b) {\n                    return a.equals(b);\n                }\n\n                @Override\n                public int hash(String o) {\n                    return o.hashCode();\n                }\n            });\n        });\n\n        assertThrows(NullPointerException.class, () -> {\n            CollectionUtils.removeAll(Collections.emptyList(), null, new Equator<String>() {\n                @Override\n                public boolean equate(String a, String b) {\n                    return a.equals(b);\n                }\n\n                @Override\n                public int hash(String o) {\n                    return o.hashCode();\n                }\n            });\n        });\n\n        assertThrows(NullPointerException.class, () -> {\n            CollectionUtils.removeAll(Collections.emptyList(), Collections.emptyList(), null);\n        });\n    }\n}\n"}]