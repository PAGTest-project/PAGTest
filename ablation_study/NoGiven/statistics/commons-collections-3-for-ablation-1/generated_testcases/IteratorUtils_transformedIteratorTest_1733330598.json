[{"strategy": "retry", "code": "\npackage org.apache.commons.collections4;\n\nimport org.apache.commons.collections4.functors.Transformer;\nimport org.apache.commons.collections4.iterators.ArrayIterator;\nimport org.apache.commons.collections4.iterators.TransformIterator;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IteratorUtils_transformedIteratorTest {\n\n    @Test\n    public void testTransformedIterator() {\n        // Given\n        Iterator<String> iterator = new ArrayIterator<>(new String[]{\"a\", \"b\", \"c\"});\n        Transformer<String, String> transformer = input -> input.toUpperCase();\n\n        // When\n        Iterator<String> transformedIterator = IteratorUtils.transformedIterator(iterator, transformer);\n\n        // Then\n        assertTrue(transformedIterator.hasNext());\n        assertEquals(\"A\", transformedIterator.next());\n        assertTrue(transformedIterator.hasNext());\n        assertEquals(\"B\", transformedIterator.next());\n        assertTrue(transformedIterator.hasNext());\n        assertEquals(\"C\", transformedIterator.next());\n        assertFalse(transformedIterator.hasNext());\n        assertThrows(NoSuchElementException.class, transformedIterator::next);\n    }\n\n    @Test\n    public void testTransformedIteratorWithNullIterator() {\n        // Given\n        Iterator<String> iterator = null;\n        Transformer<String, String> transformer = input -> input.toUpperCase();\n\n        // When & Then\n        NullPointerException exception = assertThrows(NullPointerException.class,\n                () -> IteratorUtils.transformedIterator(iterator, transformer));\n        assertEquals(\"iterator\", exception.getMessage());\n    }\n\n    @Test\n    public void testTransformedIteratorWithNullTransformer() {\n        // Given\n        Iterator<String> iterator = new ArrayIterator<>(new String[]{\"a\", \"b\", \"c\"});\n        Transformer<String, String> transformer = null;\n\n        // When & Then\n        NullPointerException exception = assertThrows(NullPointerException.class,\n                () -> IteratorUtils.transformedIterator(iterator, transformer));\n        assertEquals(\"transformer\", exception.getMessage());\n    }\n}\n"}]