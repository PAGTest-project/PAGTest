[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport java.util.EmptyStackException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ArrayStack_searchTest {\n\n    private ArrayStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new ArrayStack<>();\n    }\n\n    @Test\n    public void testSearchTopElement() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(1, stack.search(\"Second Item\"), \"Top item is 'Second Item'\");\n    }\n\n    @Test\n    public void testSearchMiddleElement() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        assertEquals(2, stack.search(\"Second Item\"), \"Middle item is 'Second Item'\");\n    }\n\n    @Test\n    public void testSearchBottomElement() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.push(\"Third Item\");\n        assertEquals(3, stack.search(\"First Item\"), \"Bottom item is 'First Item'\");\n    }\n\n    @Test\n    public void testSearchMissingElement() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(-1, stack.search(\"Missing Item\"), \"Cannot find 'Missing Item'\");\n    }\n\n    @Test\n    public void testSearchEmptyStack() {\n        assertEquals(-1, stack.search(\"Any Item\"), \"Stack is empty, cannot find any item\");\n    }\n\n    @Test\n    public void testSearchAfterPop() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        stack.pop();\n        assertEquals(1, stack.search(\"First Item\"), \"Top item after pop is 'First Item'\");\n    }\n\n    @Test\n    public void testSearchNullElement() {\n        stack.push(null);\n        stack.push(\"First Item\");\n        assertEquals(2, stack.search(null), \"Null element is found\");\n    }\n\n    @Test\n    public void testSearchNullInEmptyStack() {\n        assertEquals(-1, stack.search(null), \"Null element not found in empty stack\");\n    }\n\n    @Test\n    public void testSearchNullInNonEmptyStack() {\n        stack.push(\"First Item\");\n        assertEquals(-1, stack.search(null), \"Null element not found in non-empty stack\");\n    }\n}\n"}]