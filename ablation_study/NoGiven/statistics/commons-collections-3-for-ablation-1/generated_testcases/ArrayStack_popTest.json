[{"strategy": "generate", "code": "\npackage org.apache.commons.collections4;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\nimport java.util.EmptyStackException;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ArrayStack_popTest {\n\n    private ArrayStack<String> stack;\n\n    @BeforeEach\n    public void setUp() {\n        stack = new ArrayStack<>();\n    }\n\n    @Test\n    public void testPopWithElements() {\n        stack.push(\"First Item\");\n        stack.push(\"Second Item\");\n        assertEquals(\"Second Item\", stack.pop(), \"Top item should be 'Second Item'\");\n        assertEquals(\"First Item\", stack.pop(), \"Next item should be 'First Item'\");\n    }\n\n    @Test\n    public void testPopOnEmptyStack() {\n        assertThrows(EmptyStackException.class, () -> stack.pop(), \"Pop on empty stack should throw EmptyStackException\");\n    }\n\n    @Test\n    public void testPopRemovesElement() {\n        stack.push(\"Item\");\n        stack.pop();\n        assertTrue(stack.empty(), \"Stack should be empty after popping the only element\");\n    }\n\n    @Test\n    public void testPopAndPeekConsistency() {\n        stack.push(\"Item\");\n        String peekedItem = stack.peek();\n        String poppedItem = stack.pop();\n        assertEquals(peekedItem, poppedItem, \"Peeked and popped items should be the same\");\n    }\n\n    @Test\n    public void testPopAndSearchConsistency() {\n        stack.push(\"Item\");\n        stack.pop();\n        assertEquals(-1, stack.search(\"Item\"), \"Popped item should not be found in the stack\");\n    }\n}\n"}]