{"file_path": "src/test/java/net/datafaker/providers/base/CustomFakerTest.java", "testclass_name": "CustomFakerTest", "dependencies": ["package net.datafaker.providers.base;", "import org.junit.jupiter.api.RepeatedTest;", "import org.junit.jupiter.api.Test;", "import java.nio.file.Paths;", "import java.util.Locale;", "import static org.assertj.core.api.Assertions.assertThat;", "import static org.assertj.core.api.Assertions.assertThatThrownBy;"], "name": "CustomFakerTest", "description": "Test suite for custom faker implementations, focusing on insect-related data generation and file path handling.", "class_members": {"nested_classes": [{"name": "MyCustomFaker", "description": "Custom faker class extending BaseFaker, providing insect-related data generation methods."}, {"name": "Insect", "description": "Class providing insect names from a predefined list."}, {"name": "InsectFromFile", "description": "Class providing insect names from files, with methods to resolve ant and bee names."}]}, "test_cases": [{"name": "addNullExistingPath", "primary_tested": ["BaseFaker.addPath(Locale,Path)"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "Paths"]}, "category": "unit", "description": "Tests that adding a null path to BaseFaker throws an IllegalArgumentException."}, {"name": "addNonExistingPath", "primary_tested": ["BaseFaker.addPath(Locale,Path)"], "external_dependencies": {"modules": ["BaseFaker", "Locale", "Paths"]}, "category": "unit", "description": "Tests that adding a non-existing path to BaseFaker throws an IllegalArgumentException."}, {"name": "insectTest", "primary_tested": ["MyCustomFaker.insect()"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["MyCustomFaker", "Insect"]}, "category": "unit", "description": "Tests that the insect name generated by MyCustomFaker matches a specific pattern."}, {"name": "insectTestExpression", "primary_tested": ["MyCustomFaker.expression(String)"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["MyCustomFaker", "Insect"]}, "category": "unit", "description": "Tests that the insect name generated by MyCustomFaker using an expression matches a specific pattern."}, {"name": "insectAntTestExpressionFromFile", "primary_tested": ["MyCustomFaker.insectFromFile()"], "associated_methods": ["InsectFromFile.ant()"], "external_dependencies": {"modules": ["MyCustomFaker", "InsectFromFile"]}, "category": "unit", "description": "Tests that the ant name generated by MyCustomFaker from a file matches a specific pattern."}, {"name": "insectBeeTestExpressionFromFile", "primary_tested": ["MyCustomFaker.insectFromFile()"], "associated_methods": ["InsectFromFile.bee()"], "external_dependencies": {"modules": ["MyCustomFaker", "InsectFromFile"]}, "category": "unit", "description": "Tests that the bee name generated by MyCustomFaker from a file ends with 'bee'."}, {"name": "insectBeeTestExpressionFromFileWithoutExtraFaker", "primary_tested": ["BaseFaker.getProvider(Class,Function,BaseFaker)"], "associated_methods": ["InsectFromFile.bee()"], "external_dependencies": {"modules": ["BaseFaker", "InsectFromFile"]}, "category": "unit", "description": "Tests that the bee name generated by BaseFaker from a file ends with 'bee'."}, {"name": "insectTestWithoutExtraFaker", "primary_tested": ["BaseFaker.getProvider(Class,Function,BaseFaker)"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["BaseFaker", "Insect"]}, "category": "unit", "description": "Tests that the insect name generated by BaseFaker matches a specific pattern."}, {"name": "testMultipleFakerContextsPerOneClassName", "primary_tested": ["BaseFaker.getProvider(String)"], "associated_methods": ["Insect.nextInsectName()"], "external_dependencies": {"modules": ["BaseFaker", "Insect", "Locale"]}, "category": "unit", "description": "Tests that multiple faker contexts can be created for the same class name and that they are not the same instance."}]}