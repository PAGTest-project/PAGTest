[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class Text_textTest {\n\n    private Text textProvider;\n\n    @BeforeEach\n    public void setUp() {\n        textProvider = new Text(new BaseProviders());\n    }\n\n    @Test\n    void testTextWithMinimumLength() {\n        String result = textProvider.text(5, 10, false, false, false);\n        assertNotNull(result);\n        assertTrue(result.length() >= 5 && result.length() <= 10);\n    }\n\n    @Test\n    void testTextWithMaximumLength() {\n        String result = textProvider.text(15, 20, false, false, false);\n        assertNotNull(result);\n        assertTrue(result.length() >= 15 && result.length() <= 20);\n    }\n\n    @Test\n    void testTextWithUppercase() {\n        String result = textProvider.text(10, 10, true, false, false);\n        assertNotNull(result);\n        assertTrue(result.length() == 10);\n        assertTrue(result.matches(\".*[A-Z].*\"));\n    }\n\n    @Test\n    void testTextWithSpecialCharacters() {\n        String result = textProvider.text(10, 10, false, true, false);\n        assertNotNull(result);\n        assertTrue(result.length() == 10);\n        assertTrue(result.matches(\".*[!@#$%^&*].*\"));\n    }\n\n    @Test\n    void testTextWithDigits() {\n        String result = textProvider.text(10, 10, false, false, true);\n        assertNotNull(result);\n        assertTrue(result.length() == 10);\n        assertTrue(result.matches(\".*[0-9].*\"));\n    }\n\n    @Test\n    void testTextWithAllOptions() {\n        String result = textProvider.text(15, 15, true, true, true);\n        assertNotNull(result);\n        assertTrue(result.length() == 15);\n        assertTrue(result.matches(\".*[A-Z].*\"));\n        assertTrue(result.matches(\".*[!@#$%^&*].*\"));\n        assertTrue(result.matches(\".*[0-9].*\"));\n    }\n\n    @Test\n    void testTextWithNoOptions() {\n        String result = textProvider.text(10, 10, false, false, false);\n        assertNotNull(result);\n        assertTrue(result.length() == 10);\n        assertFalse(result.matches(\".*[A-Z].*\"));\n        assertFalse(result.matches(\".*[!@#$%^&*].*\"));\n        assertFalse(result.matches(\".*[0-9].*\"));\n    }\n}\n"}]