[{"strategy": "generate", "code": "\npackage net.datafaker.internal.helper;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Supplier;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class CopyOnWriteMap_updateNestedValueTest {\n\n    private CopyOnWriteMap<String, Map<String, Integer>> map;\n\n    @BeforeEach\n    public void setUp() {\n        map = new CopyOnWriteMap<>(HashMap::new);\n    }\n\n    @Test\n    public void testUpdateNestedValue_KeyExists() {\n        // Given\n        Map<String, Integer> nestedMap = new HashMap<>();\n        nestedMap.put(\"key2\", 1);\n        map.put(\"key1\", nestedMap);\n\n        // When\n        map.updateNestedValue(\"key1\", HashMap::new, \"key2\", 2);\n\n        // Then\n        assertEquals(2, map.get(\"key1\").get(\"key2\"));\n    }\n\n    @Test\n    public void testUpdateNestedValue_KeyDoesNotExist() {\n        // Given\n        Supplier<Map<String, Integer>> nestedMapSupplier = HashMap::new;\n\n        // When\n        map.updateNestedValue(\"key1\", nestedMapSupplier, \"key2\", 1);\n\n        // Then\n        assertTrue(map.containsKey(\"key1\"));\n        assertEquals(1, map.get(\"key1\").get(\"key2\"));\n    }\n}\n"}]