[{"strategy": "generate", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SimpleField_transformTest {\n\n    @Test\n    void testTransformWithTransformFunction() {\n        Function<String, Integer> transform = Integer::parseInt;\n        SimpleField<String, Integer> field = new SimpleField<>(\"test\", transform);\n\n        assertEquals(42, field.transform(\"42\"));\n    }\n\n    @Test\n    void testTransformWithSupplier() {\n        Supplier<Integer> supplier = () -> 42;\n        SimpleField<String, Integer> field = new SimpleField<>(\"test\", supplier);\n\n        assertEquals(42, field.transform(null));\n    }\n\n    @Test\n    void testTransformWithNullInputAndNoSupplier() {\n        Function<String, Integer> transform = Integer::parseInt;\n        SimpleField<String, Integer> field = new SimpleField<>(\"test\", transform);\n\n        assertThrows(IllegalArgumentException.class, () -> field.transform(null));\n    }\n}\n"}]