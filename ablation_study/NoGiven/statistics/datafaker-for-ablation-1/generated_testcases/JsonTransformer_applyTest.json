[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class JsonTransformer_applyTest {\n\n    @Test\n    public void testApply_SingleSimpleField() {\n        // Given\n        JsonTransformer<Object> transformer = new JsonTransformer<>(true);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ?> field = mock(SimpleField.class);\n        when(schema.getFields()).thenReturn(new Field[]{field});\n        when(field.getName()).thenReturn(\"name\");\n        when(field.transform(any())).thenReturn(\"value\");\n\n        // When\n        String result = transformer.apply(new Object(), schema);\n\n        // Then\n        assertEquals(\"{\\\"name\\\": \\\"value\\\"}\", result);\n    }\n\n    @Test\n    public void testApply_SingleCompositeField() {\n        // Given\n        JsonTransformer<Object> transformer = new JsonTransformer<>(true);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ?> field = mock(CompositeField.class);\n        when(schema.getFields()).thenReturn(new Field[]{field});\n        when(field.getName()).thenReturn(\"composite\");\n        when(field.transform(any())).thenReturn(new Object());\n        when(field.apply(any(), any(), anyInt())).thenReturn(\"{\\\"nested\\\": \\\"value\\\"}\");\n\n        // When\n        String result = transformer.apply(new Object(), schema);\n\n        // Then\n        assertEquals(\"{\\\"composite\\\": {\\\"nested\\\": \\\"value\\\"}}\", result);\n    }\n\n    @Test\n    public void testApply_MultipleFields() {\n        // Given\n        JsonTransformer<Object> transformer = new JsonTransformer<>(true);\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<?, ?> field1 = mock(SimpleField.class);\n        Field<?, ?> field2 = mock(CompositeField.class);\n        when(schema.getFields()).thenReturn(new Field[]{field1, field2});\n        when(field1.getName()).thenReturn(\"name1\");\n        when(field1.transform(any())).thenReturn(\"value1\");\n        when(field2.getName()).thenReturn(\"name2\");\n        when(field2.transform(any())).thenReturn(new Object());\n        when(field2.apply(any(), any(), anyInt())).thenReturn(\"{\\\"nested\\\": \\\"value2\\\"}\");\n\n        // When\n        String result = transformer.apply(new Object(), schema);\n\n        // Then\n        assertEquals(\"{\\\"name1\\\": \\\"value1\\\", \\\"name2\\\": {\\\"nested\\\": \\\"value2\\\"}}\", result);\n    }\n}\n"}]