[{"strategy": "generate", "code": "\npackage net.datafaker.transformations;\n\nimport net.datafaker.sequence.FakeSequence;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass YamlTransformer_generateTest {\n\n    @Test\n    void testGenerateWithFiniteSequence() {\n        // Given\n        YamlTransformer<String> transformer = new YamlTransformer<>();\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(false);\n        List<String> inputList = Arrays.asList(\"item1\", \"item2\");\n        Schema<String, ?> schema = mock(Schema.class);\n        when(schema.getFields()).thenReturn(new Field[0]);\n\n        // When\n        String result = transformer.generate(fakeSequence, schema);\n\n        // Then\n        assertEquals(\"\", result);\n    }\n\n    @Test\n    void testGenerateWithInfiniteSequence() {\n        // Given\n        YamlTransformer<String> transformer = new YamlTransformer<>();\n        FakeSequence<String> fakeSequence = mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, mock(Schema.class));\n        });\n    }\n}\n"}]