[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.Options;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class MexicanIdNumber_generateValidTest {\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        Options options = Mockito.mock(Options.class);\n        IdNumberRequest request = Mockito.mock(IdNumberRequest.class);\n\n        when(faker.options()).thenReturn(options);\n        when(options.option(MexicanIdNumber.CONSONANT)).thenReturn('B');\n        when(options.option(MexicanIdNumber.VOWEL)).thenReturn('A');\n        when(options.option(MexicanIdNumber.STATES)).thenReturn(\"AG\");\n\n        when(Utils.gender(faker, request)).thenReturn(Gender.FEMALE);\n        when(Utils.birthday(faker, request)).thenReturn(LocalDate.of(1990, 1, 1));\n\n        MexicanIdNumber mexicanIdNumber = new MexicanIdNumber();\n\n        // When\n        PersonIdNumber result = mexicanIdNumber.generateValid(faker, request);\n\n        // Then\n        assertEquals(18, result.getId().length());\n        assertEquals('M', result.getId().charAt(10));\n        assertEquals(\"19900101\", result.getId().substring(4, 10));\n    }\n}\n"}]