[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class FakeValuesService_safeFetchTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        fakeValuesService = new FakeValuesService();\n    }\n\n    @Test\n    public void testSafeFetchWithNullObject() {\n        String result = fakeValuesService.safeFetch(\"nonexistentKey\", context, \"defaultIfNull\");\n        assertEquals(\"defaultIfNull\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithSingleString() {\n        Object o = \"singleString\";\n        fakeValuesService.fetchObject(\"key\", context); // Mocking fetchObject to return \"singleString\"\n        String result = fakeValuesService.safeFetch(\"key\", context, \"defaultIfNull\");\n        assertEquals(\"singleString\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithListOfStrings() {\n        List<String> values = List.of(\"value1\", \"value2\", \"value3\");\n        fakeValuesService.fetchObject(\"key\", context); // Mocking fetchObject to return the list\n        String result = fakeValuesService.safeFetch(\"key\", context, \"defaultIfNull\");\n        assertTrue(values.contains(result));\n    }\n\n    @Test\n    public void testSafeFetchWithSlashDelimitedRegex() {\n        String regex = \"/[a-z]/\";\n        fakeValuesService.fetchObject(\"key\", context); // Mocking fetchObject to return the regex\n        String result = fakeValuesService.safeFetch(\"key\", context, \"defaultIfNull\");\n        assertEquals(\"#{regexify '%s'}\".formatted(\"[a-z]\"), result);\n    }\n}\n"}]