[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\nimport java.util.Locale;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class FakeValuesService_safeFetchTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n\n    @BeforeEach\n    public void setUp() {\n        context = new FakerContext(Locale.ENGLISH, new RandomService());\n        fakeValuesService = new FakeValuesService() {\n            @Override\n            public <T> T fetchObject(String key, FakerContext context) {\n                if (\"key\".equals(key)) {\n                    return (T) \"singleString\";\n                } else if (\"listKey\".equals(key)) {\n                    return (T) List.of(\"value1\", \"value2\", \"value3\");\n                } else if (\"regexKey\".equals(key)) {\n                    return (T) \"/[a-z]/\";\n                }\n                return null;\n            }\n        };\n    }\n\n    @Test\n    public void testSafeFetchWithNullObject() {\n        String result = fakeValuesService.safeFetch(\"nonexistentKey\", context, \"defaultIfNull\");\n        assertEquals(\"defaultIfNull\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithSingleString() {\n        String result = fakeValuesService.safeFetch(\"key\", context, \"defaultIfNull\");\n        assertEquals(\"singleString\", result);\n    }\n\n    @Test\n    public void testSafeFetchWithListOfStrings() {\n        String result = fakeValuesService.safeFetch(\"listKey\", context, \"defaultIfNull\");\n        assertTrue(List.of(\"value1\", \"value2\", \"value3\").contains(result));\n    }\n\n    @Test\n    public void testSafeFetchWithSlashDelimitedRegex() {\n        String result = fakeValuesService.safeFetch(\"regexKey\", context, \"defaultIfNull\");\n        assertEquals(\"#{regexify '%s'}\".formatted(\"[a-z]\"), result);\n    }\n}\n"}]