[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Locale;\nimport java.util.Random;\nimport java.util.concurrent.Callable;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\npublic class BaseFaker_doWithTest {\n    private BaseFaker faker;\n    private Random random;\n\n    @BeforeEach\n    final void before() {\n        random = new Random();\n        faker = new BaseFaker(random);\n    }\n\n    @Test\n    void testDoWithLocaleChange() throws Exception {\n        Locale originalLocale = faker.getContext().getLocale();\n        Locale newLocale = Locale.FRANCE;\n        String expectedResult = \"Test Result\";\n\n        Callable<String> callable = () -> {\n            assertThat(faker.getContext().getLocale()).isEqualTo(newLocale);\n            return expectedResult;\n        };\n\n        String result = faker.doWith(callable, newLocale);\n        assertThat(result).isEqualTo(expectedResult);\n        assertThat(faker.getContext().getLocale()).isEqualTo(originalLocale);\n    }\n\n    @Test\n    void testDoWithRuntimeException() {\n        Locale newLocale = Locale.GERMANY;\n\n        Callable<String> callable = () -> {\n            throw new RuntimeException(\"Test Exception\");\n        };\n\n        assertThatThrownBy(() -> faker.doWith(callable, newLocale))\n            .isInstanceOf(RuntimeException.class)\n            .hasMessage(\"Test Exception\");\n    }\n\n    @Test\n    void testDoWithCheckedException() {\n        Locale newLocale = Locale.ITALY;\n\n        Callable<String> callable = () -> {\n            throw new Exception(\"Test Checked Exception\");\n        };\n\n        assertThatThrownBy(() -> faker.doWith(callable, newLocale))\n            .isInstanceOf(RuntimeException.class)\n            .hasCauseInstanceOf(Exception.class)\n            .hasMessageContaining(\"Test Checked Exception\");\n    }\n}\n"}]