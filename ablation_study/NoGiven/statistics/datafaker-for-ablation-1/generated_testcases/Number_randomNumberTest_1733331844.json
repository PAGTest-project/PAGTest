[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\npublic class Number_randomNumberTest {\n\n    private Number number;\n    private BaseFaker faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseFaker.class);\n        when(faker.random()).thenReturn(Mockito.mock(RandomService.class));\n        number = new Number(faker);\n    }\n\n    @Test\n    public void testRandomNumber_numberOfDigitsLessThanOrEqualToZero() {\n        when(faker.random().nextInt(1)).thenReturn(0);\n        long result = number.randomNumber(0, true);\n        assertTrue(result == 0);\n    }\n\n    @Test\n    public void testRandomNumber_strictTrue() {\n        when(faker.random().nextLong(9000)).thenReturn(1234L);\n        long result = number.randomNumber(4, true);\n        assertTrue(result >= 1000 && result < 10000);\n    }\n\n    @Test\n    public void testRandomNumber_strictFalse() {\n        when(faker.random().nextLong(10000)).thenReturn(5678L);\n        long result = number.randomNumber(4, false);\n        assertTrue(result >= 0 && result < 10000);\n    }\n}\n"}]