[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\nimport net.datafaker.service.RandomService;\n\nclass Code_isbnRegistrantTest {\n\n    @Test\n    void testIsbnRegistrant() {\n        BaseProviders faker = mock(BaseProviders.class);\n        RandomService randomService = mock(RandomService.class);\n        when(faker.random()).thenReturn(randomService);\n\n        Code code = new Code(faker);\n\n        when(randomService.nextInt(6)).thenReturn(0); // ct = 1\n        when(faker.number().numberBetween(9500000, 9999999)).thenReturn(9500000);\n        when(faker.number().digits(1)).thenReturn(\"1\");\n\n        String result = code.isbnRegistrant();\n        assertEquals(\"9500000-1\", result);\n\n        when(randomService.nextInt(6)).thenReturn(5); // ct = 6\n        when(faker.number().numberBetween(0, 1)).thenReturn(0);\n        when(faker.number().digit()).thenReturn(\"1\");\n        when(faker.number().digits(6)).thenReturn(\"123456\");\n\n        result = code.isbnRegistrant();\n        assertEquals(\"01-123456\", result);\n\n        when(randomService.nextInt(6)).thenReturn(6); // Invalid ct\n        assertThrows(IllegalStateException.class, code::isbnRegistrant);\n    }\n}\n"}]