[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport net.datafaker.internal.helper.SingletonLocale;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class FakeValuesService_fetchObjectTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n    private Map<SingletonLocale, Map<String, Object>> key2fetchedObject;\n    private Map<SingletonLocale, FakeValuesInterface> fakeValuesInterfaceMap;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = mock(FakerContext.class);\n        key2fetchedObject = mock(Map.class);\n        fakeValuesInterfaceMap = mock(Map.class);\n\n        fakeValuesService.key2fetchedObject = key2fetchedObject;\n        fakeValuesService.fakeValuesInterfaceMap = fakeValuesInterfaceMap;\n    }\n\n    @Test\n    public void testFetchObject_SingleLocale_FoundInCache() {\n        // Given\n        String key = \"testKey\";\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        List<SingletonLocale> localeChain = Collections.singletonList(locale);\n        Map<String, Object> stringObjectMap = mock(Map.class);\n        Object expectedResult = new Object();\n\n        when(context.getLocaleChain()).thenReturn(localeChain);\n        when(key2fetchedObject.get(locale)).thenReturn(stringObjectMap);\n        when(stringObjectMap.get(key)).thenReturn(expectedResult);\n\n        // When\n        Object result = fakeValuesService.fetchObject(key, context);\n\n        // Then\n        assertEquals(expectedResult, result);\n    }\n\n    @Test\n    public void testFetchObject_MultipleLocales_FoundInInterfaceMap() {\n        // Given\n        String key = \"testKey\";\n        SingletonLocale locale1 = SingletonLocale.get(Locale.ENGLISH);\n        SingletonLocale locale2 = SingletonLocale.get(Locale.FRENCH);\n        List<SingletonLocale> localeChain = List.of(locale1, locale2);\n        Map<String, Object> stringObjectMap = mock(Map.class);\n        FakeValuesInterface fakeValuesInterface = mock(FakeValuesInterface.class);\n        Object expectedResult = new Object();\n\n        when(context.getLocaleChain()).thenReturn(localeChain);\n        when(key2fetchedObject.get(locale1)).thenReturn(stringObjectMap);\n        when(stringObjectMap.get(key)).thenReturn(null);\n        when(fakeValuesInterfaceMap.get(locale2)).thenReturn(fakeValuesInterface);\n        when(fakeValuesInterface.get(anyString())).thenReturn(expectedResult);\n\n        // When\n        Object result = fakeValuesService.fetchObject(key, context);\n\n        // Then\n        assertEquals(expectedResult, result);\n    }\n\n    @Test\n    public void testFetchObject_ResultIsList_ProcessedCorrectly() {\n        // Given\n        String key = \"testKey\";\n        SingletonLocale locale = SingletonLocale.get(Locale.ENGLISH);\n        List<SingletonLocale> localeChain = Collections.singletonList(locale);\n        Map<String, Object> stringObjectMap = mock(Map.class);\n        List<Object> expectedResult = List.of(\"item1\", \"item2\");\n\n        when(context.getLocaleChain()).thenReturn(localeChain);\n        when(key2fetchedObject.get(locale)).thenReturn(stringObjectMap);\n        when(stringObjectMap.get(key)).thenReturn(expectedResult);\n\n        // When\n        Object result = fakeValuesService.fetchObject(key, context);\n\n        // Then\n        assertEquals(expectedResult, result);\n    }\n}\n"}]