[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalTime;\nimport java.time.temporal.ChronoUnit;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\npublic class Time_futureTest {\n\n    private Time time;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        time = new Time(faker);\n    }\n\n    @Test\n    public void testFuture() {\n        // Given\n        int atMost = 1;\n        ChronoUnit unit = ChronoUnit.HOURS;\n        LocalTime now = LocalTime.of(12, 0);\n        long expectedAtMostTime = now.plus(atMost, unit).toNanoOfDay();\n        long expectedTime = now.toNanoOfDay();\n\n        // When\n        when(faker.number().numberBetween(expectedTime, expectedAtMostTime)).thenReturn(expectedTime + 1);\n\n        // Then\n        long result = time.future(atMost, unit);\n        assertTrue(result > expectedTime && result < expectedAtMostTime);\n    }\n}\n"}]