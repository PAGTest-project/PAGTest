[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.sql.Timestamp;\nimport java.util.concurrent.TimeUnit;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class DateAndTime_futureTest {\n\n    private DateAndTime dateAndTime;\n\n    @BeforeEach\n    public void setUp() {\n        BaseProviders baseProviders = new BaseProviders();\n        dateAndTime = new DateAndTime(baseProviders);\n    }\n\n    @Test\n    public void testFutureWithDays() {\n        int atMost = 10;\n        TimeUnit unit = TimeUnit.DAYS;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n\n        long difference = futureDate.getTime() - referenceDate.getTime();\n        assertTrue(difference > 0 && difference < unit.toMillis(atMost));\n    }\n\n    @Test\n    public void testFutureWithHours() {\n        int atMost = 24;\n        TimeUnit unit = TimeUnit.HOURS;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n\n        long difference = futureDate.getTime() - referenceDate.getTime();\n        assertTrue(difference > 0 && difference < unit.toMillis(atMost));\n    }\n\n    @Test\n    public void testFutureWithMinutes() {\n        int atMost = 60;\n        TimeUnit unit = TimeUnit.MINUTES;\n        Timestamp referenceDate = new Timestamp(System.currentTimeMillis());\n\n        Timestamp futureDate = dateAndTime.future(atMost, unit, referenceDate);\n\n        long difference = futureDate.getTime() - referenceDate.getTime();\n        assertTrue(difference > 0 && difference < unit.toMillis(atMost));\n    }\n}\n"}]