[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseFaker;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\nimport static net.datafaker.idnumbers.SouthAfricanIdNumber.isValidEnZASsn;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\n\npublic class SouthAfricanIdNumber_generateValidTest {\n\n    private SouthAfricanIdNumber idNumberGenerator;\n    private BaseFaker faker;\n\n    @BeforeEach\n    public void setUp() {\n        idNumberGenerator = new SouthAfricanIdNumber();\n        faker = new BaseFaker();\n    }\n\n    @Test\n    public void testGenerateValidIdNumber() {\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        PersonIdNumber idNumber = idNumberGenerator.generateValid(faker, request);\n        assertTrue(isValidEnZASsn(idNumber.getIdNumber()));\n    }\n\n    @Test\n    public void testGenerateValidIdNumberWithSpecificBirthdayAndGender() {\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        request.setBirthday(birthday);\n        request.setGender(Gender.FEMALE);\n\n        PersonIdNumber idNumber = idNumberGenerator.generateValid(faker, request);\n        String basePart = DateTimeFormatter.ofPattern(\"yyMMdd\").format(birthday)\n                + sequentialNumber(faker, Gender.FEMALE)\n                + faker.options().option(SouthAfricanIdNumber.CODE_PATTERN);\n        String expectedIdNumber = basePart + idNumberGenerator.calculateChecksum(basePart, 12);\n\n        assertTrue(isValidEnZASsn(idNumber.getIdNumber()));\n        assertTrue(idNumber.getIdNumber().startsWith(expectedIdNumber.substring(0, 12)));\n    }\n\n    @Test\n    public void testGenerateInvalidIdNumber() {\n        String invalidIdNumber = idNumberGenerator.generateInvalid(faker);\n        assertFalse(isValidEnZASsn(invalidIdNumber));\n    }\n\n    private static String sequentialNumber(BaseFaker f, Gender gender) {\n        int number = switch (gender) {\n            case FEMALE -> f.number().numberBetween(0, 5000);\n            case MALE -> f.number().numberBetween(5000, 10_000);\n        };\n        return \"%04d\".formatted(number);\n    }\n}\n"}]