[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Code_isbn13Test {\n\n    @Test\n    public void testIsbn13WithSeparator() {\n        BaseProviders faker = mock(BaseProviders.class);\n        Code code = new Code(faker);\n\n        when(faker.expression(\"#{code.isbn_gs1}\")).thenReturn(\"978\");\n        when(faker.expression(\"#{code.isbn_group}\")).thenReturn(\"1\");\n        when(faker.expression(\"#{code.isbn_registrant}\")).thenReturn(\"234567-8\");\n        when(code.isbn13CheckDigit(any(StringBuilder.class))).thenReturn(5);\n\n        String expected = \"978-1-234567-8-5\";\n        String actual = code.isbn13(true);\n\n        assertEquals(expected, actual);\n    }\n\n    @Test\n    public void testIsbn13WithoutSeparator() {\n        BaseProviders faker = mock(BaseProviders.class);\n        Code code = new Code(faker);\n\n        when(faker.expression(\"#{code.isbn_gs1}\")).thenReturn(\"978\");\n        when(faker.expression(\"#{code.isbn_group}\")).thenReturn(\"1\");\n        when(faker.expression(\"#{code.isbn_registrant}\")).thenReturn(\"234567-8\");\n        when(code.isbn13CheckDigit(any(StringBuilder.class))).thenReturn(5);\n\n        String expected = \"978123456785\";\n        String actual = code.isbn13(false);\n\n        assertEquals(expected, actual);\n    }\n}\n"}]