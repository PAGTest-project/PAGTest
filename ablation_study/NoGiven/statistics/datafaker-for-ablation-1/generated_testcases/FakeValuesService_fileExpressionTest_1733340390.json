[{"strategy": "retry", "code": "\npackage net.datafaker.service;\n\nimport net.datafaker.providers.base.BaseFaker;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class FakeValuesService_fileExpressionTest {\n\n    @Test\n    public void testFileExpression_Success() throws IOException {\n        // Given\n        Path path = mock(Path.class);\n        BaseFaker faker = mock(BaseFaker.class);\n        FakerContext context = mock(FakerContext.class);\n        List<String> lines = List.of(\"line1\", \"line2\");\n        when(Files.readAllLines(path)).thenReturn(lines);\n        when(faker.expression(anyString(), eq(faker), eq(context))).thenReturn(\"processedLine1\", \"processedLine2\");\n\n        // When\n        String result = new FakeValuesService().fileExpression(path, faker, context);\n\n        // Then\n        assertEquals(\"processedLine1\" + System.lineSeparator() + \"processedLine2\", result);\n    }\n\n    @Test\n    public void testFileExpression_IOException() throws IOException {\n        // Given\n        Path path = mock(Path.class);\n        BaseFaker faker = mock(BaseFaker.class);\n        FakerContext context = mock(FakerContext.class);\n        when(Files.readAllLines(path)).thenThrow(new IOException(\"Test exception\"));\n\n        // When and Then\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            new FakeValuesService().fileExpression(path, faker, context);\n        });\n        assertEquals(\"Failed to read \\\"%s\\\"\".formatted(path), exception.getMessage());\n    }\n}\n"}]