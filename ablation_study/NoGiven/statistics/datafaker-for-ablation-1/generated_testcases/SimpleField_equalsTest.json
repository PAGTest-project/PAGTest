[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass SimpleField_equalsTest {\n\n    @Test\n    void testEquals_SameInstance() {\n        SimpleField<String, Integer> field = new SimpleField<>(\"name\", (Function<String, Integer>) s -> Integer.parseInt(s));\n        assertTrue(field.equals(field));\n    }\n\n    @Test\n    void testEquals_DifferentType() {\n        SimpleField<String, Integer> field = new SimpleField<>(\"name\", (Function<String, Integer>) s -> Integer.parseInt(s));\n        assertFalse(field.equals(\"not a SimpleField\"));\n    }\n\n    @Test\n    void testEquals_DifferentName() {\n        SimpleField<String, Integer> field1 = new SimpleField<>(\"name1\", (Function<String, Integer>) s -> Integer.parseInt(s));\n        SimpleField<String, Integer> field2 = new SimpleField<>(\"name2\", (Function<String, Integer>) s -> Integer.parseInt(s));\n        assertFalse(field1.equals(field2));\n    }\n\n    @Test\n    void testEquals_DifferentTransform() {\n        SimpleField<String, Integer> field1 = new SimpleField<>(\"name\", (Function<String, Integer>) s -> Integer.parseInt(s));\n        SimpleField<String, Integer> field2 = new SimpleField<>(\"name\", (Function<String, Integer>) s -> Integer.parseInt(s) + 1);\n        assertFalse(field1.equals(field2));\n    }\n\n    @Test\n    void testEquals_DifferentSupplier() {\n        SimpleField<String, Integer> field1 = new SimpleField<>(\"name\", (Supplier<Integer>) () -> 1);\n        SimpleField<String, Integer> field2 = new SimpleField<>(\"name\", (Supplier<Integer>) () -> 2);\n        assertFalse(field1.equals(field2));\n    }\n\n    @Test\n    void testEquals_SameFields() {\n        SimpleField<String, Integer> field1 = new SimpleField<>(\"name\", (Function<String, Integer>) s -> Integer.parseInt(s), (Supplier<Integer>) () -> 1);\n        SimpleField<String, Integer> field2 = new SimpleField<>(\"name\", (Function<String, Integer>) s -> Integer.parseInt(s), (Supplier<Integer>) () -> 1);\n        assertTrue(field1.equals(field2));\n    }\n}\n"}]