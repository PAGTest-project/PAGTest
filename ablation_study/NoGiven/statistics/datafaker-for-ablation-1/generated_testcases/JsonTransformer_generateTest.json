[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport net.datafaker.sequence.FakeSequence;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.when;\n\npublic class JsonTransformer_generateTest {\n\n    @Test\n    public void testGenerateFiniteSequence() {\n        // Given\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        Schema<String, ?> schema = Mockito.mock(Schema.class);\n        FakeSequence<String> fakeSequence = Mockito.mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(false);\n        when(fakeSequence.iterator()).thenReturn(Arrays.asList(\"item1\", \"item2\").iterator());\n\n        // When\n        String result = transformer.generate(fakeSequence, schema);\n\n        // Then\n        assertEquals(\"[\\nitem1,\\nitem2\\n]\", result);\n    }\n\n    @Test\n    public void testGenerateInfiniteSequence() {\n        // Given\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        FakeSequence<String> fakeSequence = Mockito.mock(FakeSequence.class);\n        when(fakeSequence.isInfinite()).thenReturn(true);\n\n        // When & Then\n        assertThrows(IllegalArgumentException.class, () -> {\n            transformer.generate(fakeSequence, null);\n        });\n    }\n\n    @Test\n    public void testGenerateSingleItem() {\n        // Given\n        JsonTransformer<Object> transformer = JsonTransformer.builder().build();\n        Schema<String, ?> schema = Mockito.mock(Schema.class);\n        Iterable<String> input = Arrays.asList(\"item1\");\n\n        // When\n        String result = transformer.generate(input, schema);\n\n        // Then\n        assertEquals(\"item1\", result);\n    }\n}\n"}]