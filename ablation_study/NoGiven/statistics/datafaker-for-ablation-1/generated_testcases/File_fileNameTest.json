[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class File_fileNameTest {\n\n    private File file;\n    private BaseProviders faker;\n    private Internet internet;\n    private Lorem lorem;\n    private net.datafaker.AbstractProvider.Context context;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        internet = Mockito.mock(Internet.class);\n        lorem = Mockito.mock(Lorem.class);\n        context = Mockito.mock(net.datafaker.AbstractProvider.Context.class);\n        file = new File(faker);\n\n        when(faker.internet()).thenReturn(internet);\n        when(faker.lorem()).thenReturn(lorem);\n        when(faker.getContext()).thenReturn(context);\n    }\n\n    @Test\n    public void testFileNameWithAllNullInputs() {\n        when(internet.slug()).thenReturn(\"defaultDir\");\n        when(lorem.word()).thenReturn(\"defaultName\");\n        when(file.extension()).thenReturn(\"defaultExt\");\n        when(context.getLocale()).thenReturn(java.util.Locale.getDefault());\n\n        String expected = \"defaultDir\" + System.getProperty(\"file.separator\") + \"defaultname\" + \".\" + \"defaultExt\";\n        assertEquals(expected, file.fileName(null, null, null, null));\n    }\n}\n"}]