[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\n\npublic class BulgarianIdNumber_generateValidTest {\n    private BulgarianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new BulgarianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateValid() {\n        // Mocking dependencies\n        LocalDate birthday = LocalDate.of(1980, 3, 20);\n        Gender gender = Gender.MALE;\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.gender()).thenReturn(gender);\n\n        // Mocking basePart method\n        String basePart = \"800320001\";\n        when(generator.basePart(any(), any(), any())).thenReturn(basePart);\n\n        // Mocking checksum method\n        when(generator.checksum(basePart)).thenReturn(1);\n\n        // Test generateValid method\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        PersonIdNumber idNumber = generator.generateValid(faker, request);\n\n        assertThat(idNumber.getIdNumber()).isEqualTo(basePart + \"1\");\n        assertThat(idNumber.getBirthday()).isEqualTo(birthday);\n        assertThat(idNumber.getGender()).isEqualTo(gender);\n    }\n\n    @Test\n    void testChecksum() {\n        assertThat(generator.checksum(\"803205603\")).isEqualTo(1);\n        assertThat(generator.checksum(\"800101000\")).isEqualTo(8);\n        assertThat(generator.checksum(\"750102001\")).isEqualTo(8);\n        assertThat(generator.checksum(\"820630876\")).isEqualTo(0);\n        assertThat(generator.checksum(\"560628204\")).isEqualTo(7);\n        assertThat(generator.checksum(\"752316926\")).isEqualTo(3);\n        assertThat(generator.checksum(\"755201000\")).isEqualTo(5);\n        assertThat(generator.checksum(\"754201103\")).isEqualTo(0);\n    }\n}\n"}]