[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class EstonianIdNumber_generateInvalidTest {\n\n    private BaseProviders faker;\n    private EstonianIdNumber estonianIdNumber;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        estonianIdNumber = new EstonianIdNumber();\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        // Mocking the dependencies\n        LocalDate birthday = LocalDate.of(1990, 5, 3);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().digits(3)).thenReturn(\"029\");\n\n        // Expected basePart and checksum\n        String basePart = \"3900503029\";\n        int checksum = EstonianIdNumber.checksum(basePart);\n\n        // Expected invalid ID number\n        String expectedInvalidId = basePart + ((checksum + 1) % 10);\n\n        // Test the method\n        String actualInvalidId = estonianIdNumber.generateInvalid(faker);\n        assertEquals(expectedInvalidId, actualInvalidId);\n    }\n\n    @Test\n    public void testGenerateInvalidWithDifferentBirthday() {\n        // Mocking the dependencies\n        LocalDate birthday = LocalDate.of(1985, 1, 23);\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().digits(3)).thenReturn(\"421\");\n\n        // Expected basePart and checksum\n        String basePart = \"3850123421\";\n        int checksum = EstonianIdNumber.checksum(basePart);\n\n        // Expected invalid ID number\n        String expectedInvalidId = basePart + ((checksum + 1) % 10);\n\n        // Test the method\n        String actualInvalidId = estonianIdNumber.generateInvalid(faker);\n        assertEquals(expectedInvalidId, actualInvalidId);\n    }\n}\n"}]