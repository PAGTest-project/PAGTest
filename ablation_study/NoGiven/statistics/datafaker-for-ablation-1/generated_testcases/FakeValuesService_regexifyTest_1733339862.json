[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport com.github.curiousoddman.rgxgen.RgxGen;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class FakeValuesService_regexifyTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n    private RandomService randomService;\n\n    @BeforeEach\n    public void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = Mockito.mock(FakerContext.class);\n        randomService = Mockito.mock(RandomService.class);\n        when(context.getRandomService()).thenReturn(randomService);\n    }\n\n    @Test\n    public void testRegexify_NewRegex() {\n        String regex = \"[a-z]\";\n        RgxGen rgxGen = RgxGen.parse(regex);\n        when(randomService.getRandomInternal()).thenReturn(new java.util.Random());\n\n        String result = fakeValuesService.regexify(regex, context);\n\n        assertEquals(rgxGen.generate(new java.util.Random()), result);\n    }\n\n    @Test\n    public void testRegexify_CachedRegex() {\n        String regex = \"[a-z]\";\n        RgxGen rgxGen = RgxGen.parse(regex);\n        fakeValuesService.expression2generex.put(regex, rgxGen);\n        when(randomService.getRandomInternal()).thenReturn(new java.util.Random());\n\n        String result = fakeValuesService.regexify(regex, context);\n\n        assertEquals(rgxGen.generate(new java.util.Random()), result);\n    }\n}\n"}]