[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class SouthKoreanIdNumber_generateValidTest {\n\n    @Test\n    public void testGenerateValid() {\n        // Given\n        BaseProviders f = Mockito.mock(BaseProviders.class);\n        IdNumberRequest request = Mockito.mock(IdNumberRequest.class);\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        String iso = \"KR\";\n        Gender gender = Gender.MALE;\n\n        when(Utils.birthday(f, request)).thenReturn(birthday);\n        when(f.nation().isoCountry()).thenReturn(iso);\n        when(Utils.gender(f, request)).thenReturn(gender);\n        when(f.numerify(Mockito.anyString())).thenReturn(\"900101-1234567\");\n\n        SouthKoreanIdNumber idNumberGenerator = new SouthKoreanIdNumber();\n\n        // When\n        PersonIdNumber result = idNumberGenerator.generateValid(f, request);\n\n        // Then\n        assertEquals(\"900101-1234567\", result.getId());\n        assertEquals(birthday, result.getBirthDate());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]