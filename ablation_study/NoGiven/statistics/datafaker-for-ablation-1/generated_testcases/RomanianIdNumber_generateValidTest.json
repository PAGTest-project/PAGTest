[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.Faker;\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class RomanianIdNumber_generateValidTest {\n    private RomanianIdNumber impl;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        impl = new RomanianIdNumber();\n        faker = new Faker();\n    }\n\n    @Test\n    public void testGenerateValid() {\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        PersonIdNumber idNumber = impl.generateValid(faker, request);\n\n        assertNotNull(idNumber);\n        assertNotNull(idNumber.getIdNumber());\n        assertNotNull(idNumber.getBirthday());\n        assertNotNull(idNumber.getGender());\n\n        String basePart = idNumber.getIdNumber().substring(0, 12);\n        int expectedChecksum = impl.checksum(basePart);\n        int actualChecksum = Character.getNumericValue(idNumber.getIdNumber().charAt(12));\n\n        assertEquals(expectedChecksum, actualChecksum);\n    }\n\n    @Test\n    public void testGenerateValidWithSpecificBirthdayAndGender() {\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        LocalDate birthday = LocalDate.of(1990, 8, 19);\n        Gender gender = Gender.MALE;\n\n        PersonIdNumber idNumber = impl.generateValid(faker, request);\n\n        assertNotNull(idNumber);\n        assertEquals(birthday, idNumber.getBirthday());\n        assertEquals(gender, idNumber.getGender());\n\n        String basePart = idNumber.getIdNumber().substring(0, 12);\n        int expectedChecksum = impl.checksum(basePart);\n        int actualChecksum = Character.getNumericValue(idNumber.getIdNumber().charAt(12));\n\n        assertEquals(expectedChecksum, actualChecksum);\n    }\n\n    @Test\n    public void testGenerateInvalid() {\n        String invalidIdNumber = impl.generateInvalid(faker);\n\n        assertNotNull(invalidIdNumber);\n\n        String basePart = invalidIdNumber.substring(0, 12);\n        int expectedChecksum = impl.checksum(basePart);\n        int actualChecksum = Character.getNumericValue(invalidIdNumber.charAt(12));\n\n        assertEquals((expectedChecksum + 1) % 10, actualChecksum);\n    }\n}\n"}]