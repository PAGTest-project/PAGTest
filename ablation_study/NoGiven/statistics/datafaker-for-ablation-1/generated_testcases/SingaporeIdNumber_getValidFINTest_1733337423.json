[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class SingaporeIdNumber_getValidFINTest {\n\n    @Test\n    public void testGetValidFIN_SingaporeanTwentiethCentury() {\n        BaseProviders f = Mockito.mock(BaseProviders.class);\n        LocalDate mockBirthDate = LocalDate.of(1980, 1, 1);\n        when(f.timeAndDate().birthday(Mockito.anyInt(), Mockito.anyInt())).thenReturn(mockBirthDate);\n\n        String expectedFIN = \"S8000000A\"; // Assuming this is the expected format for a Singaporean 20th century citizen\n        PersonIdNumber mockIdNumber = new PersonIdNumber(expectedFIN, mockBirthDate, PersonIdNumber.Gender.MALE);\n        when(f.idNumber().generateValidIdNumber(Mockito.any(), Mockito.any(), Mockito.anyBoolean(), Mockito.any())).thenReturn(mockIdNumber);\n\n        String actualFIN = SingaporeIdNumber.getValidFIN(f, SingaporeIdNumber.Type.SINGAPOREAN_TWENTIETH_CENTURY);\n        assertEquals(expectedFIN, actualFIN);\n    }\n\n    @Test\n    public void testGetValidFIN_ForeignerTwentyFirstCentury() {\n        BaseProviders f = Mockito.mock(BaseProviders.class);\n        LocalDate mockBirthDate = LocalDate.of(2010, 1, 1);\n        when(f.timeAndDate().birthday(Mockito.anyInt(), Mockito.anyInt())).thenReturn(mockBirthDate);\n\n        String expectedFIN = \"G1000000A\"; // Assuming this is the expected format for a Foreigner 21st century non-citizen\n        PersonIdNumber mockIdNumber = new PersonIdNumber(expectedFIN, mockBirthDate, PersonIdNumber.Gender.FEMALE);\n        when(f.idNumber().generateValidIdNumber(Mockito.any(), Mockito.any(), Mockito.anyBoolean(), Mockito.any())).thenReturn(mockIdNumber);\n\n        String actualFIN = SingaporeIdNumber.getValidFIN(f, SingaporeIdNumber.Type.FOREIGNER_TWENTY_FIRST_CENTURY);\n        assertEquals(expectedFIN, actualFIN);\n    }\n}\n"}]