[{"strategy": "generate", "code": "\npackage net.datafaker.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.function.Supplier;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.when;\n\nclass FakeValuesService_resolveTest {\n\n    private FakeValuesService fakeValuesService;\n    private FakerContext context;\n    private ProviderRegistration root;\n    private Supplier<String> exceptionMessage;\n\n    @BeforeEach\n    void setUp() {\n        fakeValuesService = new FakeValuesService();\n        context = Mockito.mock(FakerContext.class);\n        root = Mockito.mock(ProviderRegistration.class);\n        exceptionMessage = Mockito.mock(Supplier.class);\n    }\n\n    @Test\n    void testResolveWithRootNullAndExpressionFound() {\n        String key = \"testKey\";\n        String expectedExpression = \"testExpression\";\n        when(context.getSingletonLocale()).thenReturn(FakeValuesService.DEFAULT_LOCALE);\n        fakeValuesService.key2Expression.put(FakeValuesService.DEFAULT_LOCALE, new CopyOnWriteMap<>(() -> new WeakHashMap<>()));\n        fakeValuesService.key2Expression.get(FakeValuesService.DEFAULT_LOCALE).put(key, expectedExpression);\n\n        String result = fakeValuesService.resolve(key, null, null, exceptionMessage, context);\n\n        assertEquals(expectedExpression, result);\n    }\n\n    @Test\n    void testResolveWithRootNullAndExpressionNotFound() {\n        String key = \"testKey\";\n        String expectedExpression = \"testExpression\";\n        when(context.getSingletonLocale()).thenReturn(FakeValuesService.DEFAULT_LOCALE);\n        fakeValuesService.key2Expression.put(FakeValuesService.DEFAULT_LOCALE, new CopyOnWriteMap<>(() -> new WeakHashMap<>()));\n        when(fakeValuesService.safeFetch(key, context, null)).thenReturn(expectedExpression);\n\n        String result = fakeValuesService.resolve(key, null, null, exceptionMessage, context);\n\n        assertEquals(expectedExpression, result);\n    }\n\n    @Test\n    void testResolveWithRootNotNullAndExpressionNotFound() {\n        String key = \"testKey\";\n        String expectedExpression = \"testExpression\";\n        when(fakeValuesService.safeFetch(key, context, null)).thenReturn(expectedExpression);\n\n        String result = fakeValuesService.resolve(key, null, root, exceptionMessage, context);\n\n        assertEquals(expectedExpression, result);\n    }\n\n    @Test\n    void testResolveWithExpressionNullThrowsException() {\n        String key = \"testKey\";\n        String expectedErrorMessage = \"Error message\";\n        when(exceptionMessage.get()).thenReturn(expectedErrorMessage);\n        when(fakeValuesService.safeFetch(key, context, null)).thenReturn(null);\n\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            fakeValuesService.resolve(key, null, root, exceptionMessage, context);\n        });\n\n        assertEquals(expectedErrorMessage, exception.getMessage());\n    }\n}\n"}]