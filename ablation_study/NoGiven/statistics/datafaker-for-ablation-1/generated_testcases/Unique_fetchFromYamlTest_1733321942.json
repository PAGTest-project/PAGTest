[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass Unique_fetchFromYamlTest {\n\n    private Unique unique;\n    private BaseProviders faker;\n    private Locale testLocale;\n\n    @BeforeEach\n    void setUp() {\n        faker = mock(BaseProviders.class);\n        unique = new Unique(faker);\n        testLocale = Locale.US;\n        when(faker.getContext().getLocale()).thenReturn(testLocale);\n    }\n\n    @Test\n    void testFetchFromYaml_ValuesAvailable() {\n        String key = \"testKey\";\n        List<String> values = new ArrayList<>(Arrays.asList(\"value1\", \"value2\", \"value3\"));\n\n        when(faker.fakeValuesService().fetchObject(key, faker.getContext())).thenReturn(values);\n\n        String result = unique.fetchFromYaml(key);\n\n        assertNotNull(result);\n        assertFalse(values.contains(result));\n    }\n\n    @Test\n    void testFetchFromYaml_NoValuesAvailable() {\n        String key = \"testKey\";\n        List<String> values = new ArrayList<>();\n\n        when(faker.fakeValuesService().fetchObject(key, faker.getContext())).thenReturn(values);\n\n        assertThrows(NoSuchElementException.class, () -> unique.fetchFromYaml(key));\n    }\n\n    @Test\n    void testFetchFromYaml_ValuesExhausted() {\n        String key = \"testKey\";\n        List<String> values = new ArrayList<>(Arrays.asList(\"value1\"));\n\n        when(faker.fakeValuesService().fetchObject(key, faker.getContext())).thenReturn(values);\n\n        // First call should return the only value\n        String result1 = unique.fetchFromYaml(key);\n        assertNotNull(result1);\n\n        // Second call should throw NoSuchElementException\n        assertThrows(NoSuchElementException.class, () -> unique.fetchFromYaml(key));\n    }\n}\n"}]