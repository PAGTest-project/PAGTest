[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport net.datafaker.service.RandomService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.Date;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\npublic class Twitter_createdTimeTest {\n\n    private Twitter twitter;\n    private RandomService randomService;\n\n    @BeforeEach\n    public void setUp() {\n        BaseProviders baseProviders = Mockito.mock(BaseProviders.class);\n        randomService = Mockito.mock(RandomService.class);\n        when(baseProviders.random()).thenReturn(randomService);\n        twitter = new Twitter(baseProviders);\n    }\n\n    @Test\n    public void testCreatedTimeForward() {\n        Date base = new Date(1000000L);\n        Date constraints = new Date(2000000L);\n        when(randomService.nextDouble()).thenReturn(0.5);\n\n        Date result = twitter.createdTime(true, base, constraints);\n\n        assertTrue(result.after(base) && result.before(constraints));\n    }\n\n    @Test\n    public void testCreatedTimeBackward() {\n        Date base = new Date(2000000L);\n        Date constraints = new Date(1000000L);\n        when(randomService.nextDouble()).thenReturn(0.5);\n\n        Date result = twitter.createdTime(false, base, constraints);\n\n        assertTrue(result.before(base) && result.after(constraints));\n    }\n}\n"}]