[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\nimport net.datafaker.service.FakeValuesService;\nimport net.datafaker.service.FakerContext;\n\npublic class Internet_imageTest {\n\n    @Test\n    public void testImageWithValidDimension() {\n        // Given\n        BaseProviders baseProviders = mock(BaseProviders.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        FakerContext fakerContext = mock(FakerContext.class);\n        Internet internet = new Internet(baseProviders);\n        when(baseProviders.fakeValuesService()).thenReturn(fakeValuesService);\n        when(baseProviders.context()).thenReturn(fakerContext);\n        when(fakeValuesService.resolve(\"internet.image_dimension\", internet, fakerContext)).thenReturn(\"100x200\");\n\n        // When\n        String result = internet.image();\n\n        // Then\n        assertEquals(\"https://picsum.photos/100/200\", result);\n    }\n\n    @Test\n    public void testImageWithEmptyDimension() {\n        // Given\n        BaseProviders baseProviders = mock(BaseProviders.class);\n        FakeValuesService fakeValuesService = mock(FakeValuesService.class);\n        FakerContext fakerContext = mock(FakerContext.class);\n        Internet internet = new Internet(baseProviders);\n        when(baseProviders.fakeValuesService()).thenReturn(fakeValuesService);\n        when(baseProviders.context()).thenReturn(fakerContext);\n        when(fakeValuesService.resolve(\"internet.image_dimension\", internet, fakerContext)).thenReturn(\"\");\n\n        // When\n        String result = internet.image();\n\n        // Then\n        assertEquals(\"\", result);\n    }\n}\n"}]