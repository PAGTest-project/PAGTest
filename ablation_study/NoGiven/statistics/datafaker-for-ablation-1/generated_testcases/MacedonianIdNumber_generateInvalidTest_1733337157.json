[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class MacedonianIdNumber_generateInvalidTest {\n\n    @Test\n    public void testGenerateInvalid() {\n        // Given\n        BaseProviders faker = Mockito.mock(BaseProviders.class);\n        MacedonianIdNumber idNumberGenerator = new MacedonianIdNumber();\n\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        String basePart = \"01019041001\"; // Example basePart\n\n        when(faker.timeAndDate().birthday()).thenReturn(birthday);\n        when(faker.number().numberBetween(0, MacedonianIdNumber.getRegionsSize())).thenReturn(0);\n        when(faker.number().numberBetween(0, 500)).thenReturn(1); // Male\n\n        // When\n        String result = idNumberGenerator.generateInvalid(faker);\n\n        // Then\n        int expectedChecksum = (idNumberGenerator.checksum(basePart) + 1) % 10;\n        String expectedInvalidId = basePart + expectedChecksum;\n        assertEquals(expectedInvalidId, result);\n    }\n}\n"}]