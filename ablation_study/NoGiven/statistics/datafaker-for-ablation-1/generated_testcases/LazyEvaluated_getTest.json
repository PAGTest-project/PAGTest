[{"strategy": "generate", "code": "\npackage net.datafaker.internal.helper;\n\nimport org.junit.jupiter.api.Test;\nimport java.util.function.Supplier;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class LazyEvaluated_getTest {\n\n    @Test\n    public void testGet_ValueNotInitialized() {\n        // Given\n        Supplier<String> mockSupplier = mock(Supplier.class);\n        when(mockSupplier.get()).thenReturn(\"initializedValue\");\n        LazyEvaluated<String> lazyEvaluated = new LazyEvaluated<>(mockSupplier);\n\n        // When\n        String result = lazyEvaluated.get();\n\n        // Then\n        assertEquals(\"initializedValue\", result);\n        verify(mockSupplier, times(1)).get();\n    }\n\n    @Test\n    public void testGet_ValueAlreadyInitialized() {\n        // Given\n        Supplier<String> mockSupplier = mock(Supplier.class);\n        when(mockSupplier.get()).thenReturn(\"initializedValue\");\n        LazyEvaluated<String> lazyEvaluated = new LazyEvaluated<>(mockSupplier);\n        lazyEvaluated.get(); // Initialize the value\n\n        // When\n        String result = lazyEvaluated.get();\n\n        // Then\n        assertEquals(\"initializedValue\", result);\n        verify(mockSupplier, times(1)).get(); // Ensure supplier.get() is called only once\n    }\n}\n"}]