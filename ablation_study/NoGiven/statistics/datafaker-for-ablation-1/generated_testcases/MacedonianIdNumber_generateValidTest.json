[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Mockito.*;\n\nimport java.time.LocalDate;\n\npublic class MacedonianIdNumber_generateValidTest {\n    private MacedonianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new MacedonianIdNumber();\n        faker = mock(BaseProviders.class);\n    }\n\n    @Test\n    void testGenerateValid() {\n        // Mocking dependencies\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        Gender gender = Gender.MALE;\n        when(faker.dateAndTime().birthday()).thenReturn(birthday);\n        when(faker.gender()).thenReturn(gender);\n        when(faker.number().numberBetween(0, 9)).thenReturn(0);\n        when(faker.number().numberBetween(0, 500)).thenReturn(123);\n\n        IdNumberRequest request = new IdNumberRequest(0, 0, null);\n        PersonIdNumber result = generator.generateValid(faker, request);\n\n        // Assertions\n        assertThat(result.getIdNumber()).isEqualTo(\"0101990411236\");\n        assertThat(result.getBirthday()).isEqualTo(birthday);\n        assertThat(result.getGender()).isEqualTo(gender);\n    }\n\n    @Test\n    void testChecksum() {\n        assertThat(generator.checksum(\"010100650000\")).isEqualTo(6);\n        assertThat(generator.checksum(\"923456789012\")).isEqualTo(4);\n    }\n}\n"}]