[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class Code_isbn10Test {\n\n    @Test\n    public void testIsbn10WithSeparator() {\n        BaseProviders faker = mock(BaseProviders.class);\n        Code code = spy(new Code(faker));\n\n        when(faker.expression(\"#{code.isbn_group}\")).thenReturn(\"0\");\n        when(faker.expression(\"#{code.isbn_registrant}\")).thenReturn(\"123456\");\n        doReturn(5).when(code).isbn10CheckDigit(any(StringBuilder.class));\n\n        String result = code.isbn10(true);\n        assertEquals(\"0-123456-5\", result);\n    }\n\n    @Test\n    public void testIsbn10WithoutSeparator() {\n        BaseProviders faker = mock(BaseProviders.class);\n        Code code = spy(new Code(faker));\n\n        when(faker.expression(\"#{code.isbn_group}\")).thenReturn(\"1\");\n        when(faker.expression(\"#{code.isbn_registrant}\")).thenReturn(\"654321\");\n        doReturn(10).when(code).isbn10CheckDigit(any(StringBuilder.class));\n\n        String result = code.isbn10(false);\n        assertEquals(\"1654321X\", result);\n    }\n}\n"}]