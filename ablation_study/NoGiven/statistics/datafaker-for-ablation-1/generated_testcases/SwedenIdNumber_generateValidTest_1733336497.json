[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class SwedenIdNumber_generateValidTest {\n\n    private SwedenIdNumber swedenIdNumber;\n    private BaseProviders f;\n    private IdNumber.IdNumberRequest request;\n\n    @BeforeEach\n    public void setUp() {\n        swedenIdNumber = new SwedenIdNumber();\n        f = Mockito.mock(BaseProviders.class);\n        request = Mockito.mock(IdNumber.IdNumberRequest.class);\n    }\n\n    @Test\n    public void testGenerateValid() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(Utils.birthday(f, request)).thenReturn(birthday);\n        when(f.numerify(\"###\")).thenReturn(\"123\");\n        when(f.options().option(SwedenIdNumber.PLUS_MINUS)).thenReturn(\"-\");\n        when(Utils.gender(f, request)).thenReturn(PersonIdNumber.Gender.Male);\n\n        PersonIdNumber result = swedenIdNumber.generateValid(f, request);\n\n        String expectedBasePart = \"900101-123\";\n        String expectedIdNumber = expectedBasePart + SwedenIdNumber.calculateChecksum(expectedBasePart);\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(PersonIdNumber.Gender.Male, result.getGender());\n    }\n\n    @Test\n    public void testGenerateValidWithPlusSign() {\n        LocalDate birthday = LocalDate.of(1990, 1, 1);\n        when(Utils.birthday(f, request)).thenReturn(birthday);\n        when(f.numerify(\"###\")).thenReturn(\"123\");\n        when(f.options().option(SwedenIdNumber.PLUS_MINUS)).thenReturn(\"+\");\n        when(Utils.gender(f, request)).thenReturn(PersonIdNumber.Gender.Female);\n\n        PersonIdNumber result = swedenIdNumber.generateValid(f, request);\n\n        String expectedBasePart = \"900101+123\";\n        String expectedIdNumber = expectedBasePart + SwedenIdNumber.calculateChecksum(expectedBasePart);\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthday, result.getBirthday());\n        assertEquals(PersonIdNumber.Gender.Female, result.getGender());\n    }\n}\n"}]