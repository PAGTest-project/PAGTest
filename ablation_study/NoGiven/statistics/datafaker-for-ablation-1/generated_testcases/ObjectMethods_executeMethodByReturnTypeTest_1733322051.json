[{"strategy": "generate", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static net.datafaker.providers.base.ObjectMethods.executeMethodByReturnType;\nimport static net.datafaker.providers.base.ObjectMethods.getMethodByReturnType;\n\nclass ObjectMethods_executeMethodByReturnTypeTest {\n    private Person person;\n    private PersonName personName;\n\n    @BeforeEach\n    void setUp() {\n        person = new Person();\n        personName = new PersonName();\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeSuccess() {\n        String returnTypeSimpleName = \"String\";\n        String result = executeMethodByReturnType(person, returnTypeSimpleName);\n        assertNotNull(result);\n        assertEquals(\"John\", result);\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeMethodNotFound() {\n        String returnTypeSimpleName = \"NonExistentType\";\n        String result = executeMethodByReturnType(person, returnTypeSimpleName);\n        assertNull(result);\n    }\n\n    @Test\n    void testExecuteMethodByReturnTypeException() {\n        String returnTypeSimpleName = \"ExceptionThrowingType\";\n        RuntimeException exception = assertThrows(RuntimeException.class, () -> {\n            executeMethodByReturnType(person, returnTypeSimpleName);\n        });\n        assertTrue(exception.getMessage().contains(\"Failed to call method\"));\n    }\n\n    @Test\n    void testGetMethodByReturnType() {\n        String returnTypeSimpleName = \"String\";\n        Method method = getMethodByReturnType(person, returnTypeSimpleName);\n        assertNotNull(method);\n        assertEquals(\"getName\", method.getName());\n    }\n\n    @Test\n    void testGetMethodByReturnTypeNotFound() {\n        String returnTypeSimpleName = \"NonExistentType\";\n        Method method = getMethodByReturnType(person, returnTypeSimpleName);\n        assertNull(method);\n    }\n}\n"}]