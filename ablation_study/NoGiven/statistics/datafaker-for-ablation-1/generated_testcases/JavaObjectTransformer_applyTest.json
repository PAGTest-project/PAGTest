[{"strategy": "retry", "code": "\npackage net.datafaker.transformations;\n\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\nclass JavaObjectTransformer_applyTest {\n\n    @Test\n    void testApplyWithRecordClass() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<Object, ?>[] fields = new Field[]{mock(Field.class)};\n        when(schema.getFields()).thenReturn(fields);\n\n        Class<?> recordClass = mock(Class.class);\n        when(recordClass.isRecord()).thenReturn(true);\n        java.lang.reflect.RecordComponent recordComponent = mock(java.lang.reflect.RecordComponent.class);\n        when(recordComponent.getType()).thenReturn(Object.class);\n        when(recordClass.getRecordComponents()).thenReturn(new java.lang.reflect.RecordComponent[]{recordComponent});\n        Constructor<?> recordConstructor = mock(Constructor.class);\n        when(recordClass.getDeclaredConstructor(Class[].class)).thenReturn(recordConstructor);\n        when(recordConstructor.newInstance(any())).thenReturn(new Object());\n\n        Object result = transformer.apply(recordClass, schema);\n        assertNotNull(result);\n    }\n\n    @Test\n    void testApplyWithNonRecordClassAndParameterlessConstructor() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<Object, ?>[] fields = new Field[]{mock(Field.class)};\n        when(schema.getFields()).thenReturn(fields);\n\n        Class<?> nonRecordClass = mock(Class.class);\n        when(nonRecordClass.isRecord()).thenReturn(false);\n        Constructor<?> constructor = mock(Constructor.class);\n        when(nonRecordClass.getDeclaredConstructors()).thenReturn(new Constructor[]{constructor});\n        when(constructor.newInstance()).thenReturn(new Object());\n\n        Object result = transformer.apply(nonRecordClass, schema);\n        assertNotNull(result);\n    }\n\n    @Test\n    void testApplyWithNonRecordClassAndNoParameterlessConstructor() throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        JavaObjectTransformer transformer = new JavaObjectTransformer();\n        Schema<Object, ?> schema = mock(Schema.class);\n        Field<Object, ?>[] fields = new Field[]{mock(Field.class)};\n        when(schema.getFields()).thenReturn(fields);\n\n        Class<?> nonRecordClass = mock(Class.class);\n        when(nonRecordClass.isRecord()).thenReturn(false);\n        Constructor<?> constructor = mock(Constructor.class);\n        when(nonRecordClass.getDeclaredConstructors()).thenReturn(new Constructor[]{constructor});\n        when(constructor.newInstance(any())).thenReturn(new Object());\n\n        Object result = transformer.apply(nonRecordClass, schema);\n        assertNotNull(result);\n    }\n}\n"}]