[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.IdNumber.IdNumberRequest;\nimport net.datafaker.providers.base.PersonIdNumber;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.time.LocalDate;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class AlbanianIdNumber_generateValidTest {\n\n    private BaseProviders faker;\n    private IdNumberRequest request;\n    private AlbanianIdNumber idNumberGenerator;\n\n    @BeforeEach\n    public void setUp() {\n        faker = Mockito.mock(BaseProviders.class);\n        request = Mockito.mock(IdNumberRequest.class);\n        idNumberGenerator = new AlbanianIdNumber();\n    }\n\n    @Test\n    public void testGenerateValid() {\n        LocalDate birthDate = LocalDate.of(1990, 5, 15);\n        Gender gender = Gender.FEMALE;\n        String basePart = \"90550515123\";\n        String expectedIdNumber = basePart + \"A\";\n\n        when(Utils.birthday(faker, request)).thenReturn(birthDate);\n        when(Utils.gender(faker, request)).thenReturn(gender);\n        when(faker.number().digits(3)).thenReturn(\"123\");\n\n        PersonIdNumber result = idNumberGenerator.generateValid(faker, request);\n\n        assertEquals(expectedIdNumber, result.getIdNumber());\n        assertEquals(birthDate, result.getBirthDate());\n        assertEquals(gender, result.getGender());\n    }\n}\n"}]