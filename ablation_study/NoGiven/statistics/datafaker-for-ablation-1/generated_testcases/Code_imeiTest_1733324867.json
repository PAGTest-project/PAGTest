[{"strategy": "retry", "code": "\npackage net.datafaker.providers.base;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.when;\n\npublic class Code_imeiTest {\n\n    private Code code;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setup() {\n        faker = Mockito.mock(BaseProviders.class);\n        code = new Code(faker);\n    }\n\n    @Test\n    public void testImei() {\n        // Given\n        String prefix = \"35\";\n        when(faker.options().option(Code.REPORTING_BODY_IDENTIFIERS)).thenReturn(prefix);\n        when(faker.number().numberBetween(0, 9)).thenReturn(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\n        // When\n        String imei = code.imei();\n\n        // Then\n        assertEquals(15, imei.length());\n        assertEquals(prefix.charAt(0), imei.charAt(0));\n        assertEquals(prefix.charAt(1), imei.charAt(1));\n        assertTrue(validateLuhnChecksum(imei));\n    }\n\n    private boolean validateLuhnChecksum(String imei) {\n        int sum = 0;\n        boolean alternate = false;\n        for (int i = imei.length() - 1; i >= 0; i--) {\n            int n = Integer.parseInt(imei.substring(i, i + 1));\n            if (alternate) {\n                n *= 2;\n                if (n > 9) {\n                    n = (n % 10) + 1;\n                }\n            }\n            sum += n;\n            alternate = !alternate;\n        }\n        return (sum % 10 == 0);\n    }\n}\n"}]