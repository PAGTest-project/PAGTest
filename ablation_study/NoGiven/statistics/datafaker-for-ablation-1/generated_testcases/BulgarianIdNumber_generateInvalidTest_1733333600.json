[{"strategy": "generate", "code": "\npackage net.datafaker.idnumbers;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport net.datafaker.providers.base.PersonIdNumber.Gender;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\n\npublic class BulgarianIdNumber_generateInvalidTest {\n    private BulgarianIdNumber generator;\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        generator = new BulgarianIdNumber();\n        faker = new BaseProviders() {\n            @Override\n            public LocalDate birthday() {\n                return LocalDate.of(1980, 3, 20); // Example fixed date for testing\n            }\n        };\n    }\n\n    @Test\n    void testGenerateInvalid() {\n        String basePart = generator.basePart(faker, faker.timeAndDate().birthday(), Gender.MALE);\n        int originalChecksum = generator.checksum(basePart);\n        String invalidId = generator.generateInvalid(faker);\n\n        assertThat(invalidId).startsWith(basePart);\n        assertThat(invalidId).endsWith(String.valueOf((originalChecksum + 1) % 10));\n    }\n\n    @Test\n    void testChecksum() {\n        assertThat(generator.checksum(\"803205603\")).isEqualTo(1);\n        assertThat(generator.checksum(\"800101000\")).isEqualTo(8);\n        assertThat(generator.checksum(\"750102001\")).isEqualTo(8);\n        assertThat(generator.checksum(\"820630876\")).isEqualTo(0);\n        assertThat(generator.checksum(\"560628204\")).isEqualTo(7);\n        assertThat(generator.checksum(\"752316926\")).isEqualTo(3);\n        assertThat(generator.checksum(\"755201000\")).isEqualTo(5);\n        assertThat(generator.checksum(\"754201103\")).isEqualTo(0);\n    }\n}\n"}]