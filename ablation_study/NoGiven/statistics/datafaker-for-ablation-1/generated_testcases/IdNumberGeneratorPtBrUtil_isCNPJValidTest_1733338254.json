[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers.pt.br;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IdNumberGeneratorPtBrUtil_isCNPJValidTest {\n\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = new BaseProviders() {\n            @Override\n            public String toString() {\n                return \"MockBaseProviders\";\n            }\n\n            @Override\n            public void addUrl(Locale locale, URL url) {\n                // Dummy implementation to satisfy the abstract method\n            }\n        };\n    }\n\n    @Test\n    public void testIsCNPJValid_ValidCNPJ() {\n        String validCNPJ = IdNumberGeneratorPtBrUtil.cnpj(faker, false, true, false);\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(validCNPJ));\n    }\n\n    @Test\n    public void testIsCNPJValid_InvalidCNPJ() {\n        String invalidCNPJ = \"12345678000195\"; // Example of an invalid CNPJ\n        assertFalse(IdNumberGeneratorPtBrUtil.isCNPJValid(invalidCNPJ));\n    }\n\n    @Test\n    public void testIsCNPJValid_UnmaskedCNPJ() {\n        String unmaskedCNPJ = \"12.345.678/0001-95\"; // Example of a masked CNPJ\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(unmaskedCNPJ));\n    }\n\n    @Test\n    public void testIsCNPJValid_PartialCNPJ() {\n        String partialCNPJ = \"123456780001\"; // Partial CNPJ without verification digits\n        assertFalse(IdNumberGeneratorPtBrUtil.isCNPJValid(partialCNPJ));\n    }\n}\n"}]