[{"strategy": "retry", "code": "\npackage net.datafaker.sequence;\n\nimport net.datafaker.service.RandomService;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\nimport java.util.List;\nimport java.util.function.Supplier;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\n\npublic class FakeCollection_getTest {\n\n    private RandomService randomService;\n    private Supplier<String> supplier;\n\n    @BeforeEach\n    public void setUp() {\n        randomService = Mockito.mock(RandomService.class);\n        supplier = () -> \"test\";\n    }\n\n    @Test\n    public void testGet() {\n        // Given\n        int minLength = 5;\n        int maxLength = 10;\n        when(randomService.nextInt(minLength, maxLength)).thenReturn(7);\n\n        FakeCollection<String> fakeCollection = new FakeCollection.Builder<String>()\n                .suppliers(supplier)\n                .minLen(minLength)\n                .maxLen(maxLength)\n                .randomService(randomService)\n                .build();\n\n        // When\n        List<String> result = fakeCollection.get();\n\n        // Then\n        assertEquals(7, result.size());\n        result.forEach(item -> assertEquals(\"test\", item));\n    }\n}\n"}]