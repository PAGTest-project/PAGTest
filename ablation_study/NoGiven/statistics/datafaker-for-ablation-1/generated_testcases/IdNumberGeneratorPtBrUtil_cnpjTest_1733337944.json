[{"strategy": "retry", "code": "\npackage net.datafaker.idnumbers.pt.br;\n\nimport net.datafaker.providers.base.BaseProviders;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\npublic class IdNumberGeneratorPtBrUtil_cnpjTest {\n\n    private BaseProviders faker;\n\n    @BeforeEach\n    public void setUp() {\n        faker = mock(BaseProviders.class);\n        when(faker.random()).thenReturn(new net.datafaker.service.RandomService());\n    }\n\n    @Test\n    public void testCnpjValidFormattedMultiBranch() {\n        when(faker.random().nextInt(9)).thenReturn(1, 2, 3, 4, 5, 6, 7, 8);\n        when(faker.random().nextInt(1, 9999)).thenReturn(1234);\n        String result = IdNumberGeneratorPtBrUtil.cnpj(faker, true, true, true);\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(result));\n        assertEquals(\"12.345.678/0001-95\", result);\n    }\n\n    @Test\n    public void testCnpjValidUnformattedMultiBranch() {\n        when(faker.random().nextInt(9)).thenReturn(1, 2, 3, 4, 5, 6, 7, 8);\n        when(faker.random().nextInt(1, 9999)).thenReturn(1234);\n        String result = IdNumberGeneratorPtBrUtil.cnpj(faker, false, true, true);\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(result));\n        assertEquals(\"12345678000195\", result);\n    }\n\n    @Test\n    public void testCnpjValidFormattedSingleBranch() {\n        when(faker.random().nextInt(9)).thenReturn(1, 2, 3, 4, 5, 6, 7, 8);\n        String result = IdNumberGeneratorPtBrUtil.cnpj(faker, true, true, false);\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(result));\n        assertEquals(\"12.345.678/0001-95\", result);\n    }\n\n    @Test\n    public void testCnpjValidUnformattedSingleBranch() {\n        when(faker.random().nextInt(9)).thenReturn(1, 2, 3, 4, 5, 6, 7, 8);\n        String result = IdNumberGeneratorPtBrUtil.cnpj(faker, false, true, false);\n        assertTrue(IdNumberGeneratorPtBrUtil.isCNPJValid(result));\n        assertEquals(\"12345678000195\", result);\n    }\n\n    @Test\n    public void testCnpjInvalidFormatted() {\n        when(faker.random().nextInt(1000000000)).thenReturn(123456789);\n        when(faker.random().nextInt(90)).thenReturn(50);\n        String result = IdNumberGeneratorPtBrUtil.cnpj(faker, true, false, false);\n        assertFalse(IdNumberGeneratorPtBrUtil.isCNPJValid(result));\n    }\n\n    @Test\n    public void testCnpjInvalidUnformatted() {\n        when(faker.random().nextInt(1000000000)).thenReturn(123456789);\n        when(faker.random().nextInt(90)).thenReturn(50);\n        String result = IdNumberGeneratorPtBrUtil.cnpj(faker, false, false, false);\n        assertFalse(IdNumberGeneratorPtBrUtil.isCNPJValid(result));\n    }\n}\n"}]