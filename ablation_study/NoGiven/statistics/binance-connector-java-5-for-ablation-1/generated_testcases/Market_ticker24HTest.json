[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThrows;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport org.junit.Before;\nimport org.junit.Test;\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.UrlBuilder;\nimport okhttp3.mockwebserver.Dispatcher;\nimport okhttp3.mockwebserver.MockWebServer;\nimport unit.MockData;\nimport unit.MockWebServerDispatcher;\n\npublic class Market_ticker24HTest {\n    private MockWebServer mockWebServer;\n    private String baseUrl;\n    private Market market;\n\n    @Before\n    public void init() {\n        this.mockWebServer = new MockWebServer();\n        this.baseUrl = mockWebServer.url(MockData.PREFIX).toString();\n        this.market = new Market(baseUrl, \"apiKey\", true, null);\n    }\n\n    @Test\n    public void testTicker24HWithSymbol() {\n        String path = \"/api/v3/ticker/24hr?symbol=BNBUSDT\";\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = market.ticker24H(parameters);\n        assertEquals(\"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", result);\n    }\n\n    @Test\n    public void testTicker24HWithSymbols() {\n        String path = String.format(\"/api/v3/ticker/24hr?symbols=%s\",\n                UrlBuilder.urlEncode(\"[\\\"BNBUSDT\\\",\\\"BTCUSDT\\\"]\"));\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        ArrayList<String> symbols = new ArrayList<>();\n        symbols.add(\"BNBUSDT\");\n        symbols.add(\"BTCUSDT\");\n        parameters.put(\"symbols\", symbols);\n\n        Dispatcher dispatcher = MockWebServerDispatcher.getDispatcher(MockData.PREFIX, path, \"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", HttpMethod.GET, MockData.HTTP_STATUS_OK);\n        mockWebServer.setDispatcher(dispatcher);\n\n        String result = market.ticker24H(parameters);\n        assertEquals(\"{\\\"key_1\\\": \\\"value_1\\\", \\\"key_2\\\": \\\"value_2\\\"}\", result);\n    }\n\n    @Test\n    public void testTicker24HWithSymbolAndSymbols() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"symbols\", new ArrayList<String>());\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.ticker24H(parameters);\n        });\n    }\n\n    @Test\n    public void testTicker24HWithInvalidSymbolsType() {\n        Map<String, Object> parameters = new LinkedHashMap<>();\n        parameters.put(\"symbols\", \"invalidType\");\n\n        assertThrows(BinanceConnectorException.class, () -> {\n            market.ticker24H(parameters);\n        });\n    }\n}\n"}]