[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Test;\nimport org.junit.Before;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\nimport java.security.Signature;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.util.Base64;\nimport org.mockito.MockedStatic;\nimport org.mockito.Mockito;\n\npublic class RsaSignatureGenerator_getSignatureTest {\n\n    private RsaSignatureGenerator generator;\n    private RSAPrivateKey mockPrivateKey;\n\n    @Before\n    public void setUp() throws Exception {\n        mockPrivateKey = mock(RSAPrivateKey.class);\n        generator = new RsaSignatureGenerator(\"dummyPrivateKey\") {\n            @Override\n            protected RSAPrivateKey parsePrivateKey(String privateKeyPem, String password) throws Exception {\n                return mockPrivateKey;\n            }\n        };\n    }\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        String data = \"testData\";\n        byte[] mockSignatureBytes = \"mockSignature\".getBytes();\n        String expectedSignature = Base64.getEncoder().encodeToString(mockSignatureBytes);\n\n        Signature mockSignature = mock(Signature.class);\n        when(mockSignature.sign()).thenReturn(mockSignatureBytes);\n\n        try (MockedStatic<Signature> mockInstance = Mockito.mockStatic(Signature.class)) {\n            mockInstance.when(() -> Signature.getInstance(RsaSignatureGenerator.RSA_SHA256)).thenReturn(mockSignature);\n\n            String result = generator.getSignature(data);\n\n            assertEquals(expectedSignature, result);\n        }\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testGetSignature_Exception() throws Exception {\n        String data = \"testData\";\n\n        Signature mockSignature = mock(Signature.class);\n        when(mockSignature.sign()).thenThrow(new Exception(\"Mock Exception\"));\n\n        try (MockedStatic<Signature> mockInstance = Mockito.mockStatic(Signature.class)) {\n            mockInstance.when(() -> Signature.getInstance(RsaSignatureGenerator.RSA_SHA256)).thenReturn(mockSignature);\n\n            generator.getSignature(data);\n        }\n    }\n}\n"}]