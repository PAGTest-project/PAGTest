[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class Trade_testSorOrderTest {\n\n    private Trade trade;\n    private Map<String, Object> parameters;\n\n    @Mock\n    private RequestHandler requestHandler;\n\n    @Before\n    public void setUp() {\n        trade = new Trade(\"https://api.binance.com\", \"apiKey\", \"secretKey\", false, null);\n        parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", 1.0);\n    }\n\n    @Test\n    public void testSorOrder() {\n        // Given\n        when(requestHandler.sendSignedRequest(anyString(), anyString(), anyMap(), eq(HttpMethod.POST), eq(false)))\n            .thenReturn(\"success\");\n\n        // When\n        String result = trade.testSorOrder(parameters);\n\n        // Then\n        assertEquals(\"success\", result);\n        verify(requestHandler).sendSignedRequest(eq(\"https://api.binance.com\"), eq(\"/sapi/v1/sub-account/virtualSubAccount\"), eq(parameters), eq(HttpMethod.POST), eq(false));\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testSorOrderMissingQuantity() {\n        // Given\n        parameters.remove(\"quantity\");\n\n        // When\n        trade.testSorOrder(parameters);\n\n        // Then (exception is expected)\n    }\n}\n"}]