[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.httpclient;\n\nimport com.binance.connector.client.utils.ProxyAuth;\nimport okhttp3.OkHttpClient;\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.junit.Assert;\nimport java.net.Proxy;\nimport java.net.InetSocketAddress;\nimport okhttp3.Authenticator;\nimport okhttp3.Route;\n\npublic class HttpClientSingleton_getHttpClientTest {\n\n    private ProxyAuth proxyAuth;\n    private ProxyAuth proxyAuthWithAuth;\n\n    @Before\n    public void setUp() {\n        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"localhost\", 8080));\n        proxyAuth = new ProxyAuth(proxy, null);\n        proxyAuthWithAuth = new ProxyAuth(proxy, new Authenticator() {\n            @Override\n            public okhttp3.Request authenticate(Route route, okhttp3.Response response) {\n                return response.request().newBuilder()\n                        .header(\"Proxy-Authorization\", \"Basic \" + \"credentials\")\n                        .build();\n            }\n        });\n    }\n\n    @Test\n    public void testGetHttpClient_InitialCall() {\n        OkHttpClient client = HttpClientSingleton.getHttpClient(proxyAuth);\n        Assert.assertNotNull(client);\n        Assert.assertEquals(proxyAuth.getProxy(), client.proxy());\n    }\n\n    @Test\n    public void testGetHttpClient_WithAuth() {\n        OkHttpClient client = HttpClientSingleton.getHttpClient(proxyAuthWithAuth);\n        Assert.assertNotNull(client);\n        Assert.assertEquals(proxyAuthWithAuth.getProxy(), client.proxy());\n    }\n\n    @Test\n    public void testGetHttpClient_VerifyProxyChange() {\n        OkHttpClient client = HttpClientSingleton.getHttpClient(proxyAuth);\n        Assert.assertNotNull(client);\n        Assert.assertEquals(proxyAuth.getProxy(), client.proxy());\n\n        Proxy newProxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"localhost\", 8081));\n        ProxyAuth newProxyAuth = new ProxyAuth(newProxy, null);\n        OkHttpClient newClient = HttpClientSingleton.getHttpClient(newProxyAuth);\n        Assert.assertNotNull(newClient);\n        Assert.assertEquals(newProxyAuth.getProxy(), newClient.proxy());\n    }\n}\n"}]