[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.bouncycastle.crypto.signers.Ed25519Signer;\nimport org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class Ed25519SignatureGenerator_getSignatureTest {\n\n    @Mock\n    private Ed25519PrivateKeyParameters mockPrivateKey;\n\n    @Mock\n    private Ed25519Signer mockSigner;\n\n    private Ed25519SignatureGenerator signatureGenerator;\n\n    @Before\n    public void setUp() throws Exception {\n        signatureGenerator = Mockito.spy(new Ed25519SignatureGenerator(\"dummyPrivateKeyPath\"));\n        Mockito.doAnswer(invocation -> {\n            byte[] dataBytes = invocation.getArgument(0).toString().getBytes(StandardCharsets.UTF_8);\n            Ed25519Signer signer = mockSigner;\n            signer.init(true, mockPrivateKey);\n            signer.update(dataBytes, 0, dataBytes.length);\n            byte[] signatureBytes = new byte[]{1, 2, 3}; // Mock signature bytes\n            when(mockSigner.generateSignature()).thenReturn(signatureBytes);\n            return Base64.getEncoder().encodeToString(signatureBytes);\n        }).when(signatureGenerator).getSignature(Mockito.anyString());\n    }\n\n    @Test\n    public void testGetSignature() {\n        String data = \"testData\";\n        String expectedSignature = Base64.getEncoder().encodeToString(new byte[]{1, 2, 3});\n        String actualSignature = signatureGenerator.getSignature(data);\n        assertEquals(expectedSignature, actualSignature);\n    }\n}\n"}]