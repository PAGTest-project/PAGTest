[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils.signaturegenerator;\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport org.apache.commons.codec.binary.Hex;\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\npublic class HmacSignatureGenerator_getSignatureTest {\n\n    @Test\n    public void testGetSignature_Success() throws Exception {\n        String apiSecret = \"secret\";\n        String data = \"testData\";\n        HmacSignatureGenerator generator = new HmacSignatureGenerator(apiSecret);\n\n        String expectedSignature = \"5e884898da28047151d0e56f8dc6292773603d0d6aabbddc41f1da0b671e4e97\";\n        assertEquals(expectedSignature, generator.getSignature(data));\n    }\n\n    @Test(expected = RuntimeException.class)\n    public void testGetSignature_Exception() throws Exception {\n        String apiSecret = \"secret\";\n        String data = \"testData\";\n        HmacSignatureGenerator generator = new HmacSignatureGenerator(apiSecret) {\n            @Override\n            public String getSignature(String data) {\n                try {\n                    SecretKeySpec secretKeySpec = new SecretKeySpec(apiSecret.getBytes(), \"InvalidAlgorithm\");\n                    Mac mac = Mac.getInstance(\"InvalidAlgorithm\");\n                    mac.init(secretKeySpec);\n                    byte[] hmacSha256 = mac.doFinal(data.getBytes());\n                    return Hex.encodeHexString(hmacSha256);\n                } catch (NoSuchAlgorithmException | InvalidKeyException e) {\n                    throw new RuntimeException(\"Failed to calculate hmac-sha256\", e);\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Unexpected error\", e);\n                }\n            }\n        };\n\n        generator.getSignature(data);\n    }\n}\n"}]