[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.RequestHandler;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class SubAccount_getIpRestrictionTest {\n\n    private SubAccount subAccount;\n    private RequestHandler requestHandler;\n    private final String baseUrl = \"https://api.binance.com\";\n    private final boolean showLimitUsage = true;\n    private final String IP_RESTRICTION = \"/sapi/v1/sub-account/subAccountApi/ipRestriction\";\n\n    @Before\n    public void setUp() {\n        requestHandler = mock(RequestHandler.class);\n        subAccount = new SubAccount(baseUrl, \"apiKey\", \"secretKey\", showLimitUsage, null) {\n            @Override\n            public String getIpRestriction(Map<String, Object> parameters) {\n                return requestHandler.sendSignedRequest(baseUrl, IP_RESTRICTION, parameters, HttpMethod.GET, showLimitUsage);\n            }\n        };\n    }\n\n    @Test\n    public void testGetIpRestriction() {\n        // Given\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"email\", \"test@example.com\");\n        parameters.put(\"subAccountApiKey\", \"subAccountApiKey\");\n\n        String expectedResponse = \"{\\\"ipRestriction\\\":\\\"192.168.1.1\\\"}\";\n\n        // When\n        when(requestHandler.sendSignedRequest(baseUrl, IP_RESTRICTION, parameters, HttpMethod.GET, showLimitUsage))\n                .thenReturn(expectedResponse);\n\n        String actualResponse = subAccount.getIpRestriction(parameters);\n\n        // Then\n        assertEquals(expectedResponse, actualResponse);\n        verify(requestHandler, times(1)).sendSignedRequest(baseUrl, IP_RESTRICTION, parameters, HttpMethod.GET, showLimitUsage);\n    }\n}\n"}]