[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.RequestHandler;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Trade_sorOrderTest {\n    private Trade trade;\n    private String baseUrl;\n    private String apiKey;\n    private String secretKey;\n    private boolean showLimitUsage;\n\n    @Before\n    public void setUp() {\n        baseUrl = \"https://testnet.binance.vision\";\n        apiKey = \"testApiKey\";\n        secretKey = \"testSecretKey\";\n        showLimitUsage = true;\n        trade = new Trade(baseUrl, apiKey, new HmacSignatureGenerator(secretKey), showLimitUsage, null);\n    }\n\n    @Test\n    public void testSorOrderSuccess() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", 1.0);\n        parameters.put(\"price\", 300.0);\n\n        String response = trade.sorOrder(parameters);\n        assertNotNull(response);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testSorOrderMissingQuantity() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"BNBUSDT\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"price\", 300.0);\n\n        trade.sorOrder(parameters);\n    }\n\n    @Test\n    public void testSorOrderInvalidSymbol() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"INVALIDSYMBOL\");\n        parameters.put(\"side\", \"BUY\");\n        parameters.put(\"type\", \"LIMIT\");\n        parameters.put(\"quantity\", 1.0);\n        parameters.put(\"price\", 300.0);\n\n        String response = trade.sorOrder(parameters);\n        assertNotNull(response);\n    }\n}\n"}]