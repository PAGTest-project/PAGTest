[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.exceptions.BinanceConnectorException;\nimport com.binance.connector.client.utils.signaturegenerator.HmacSignatureGenerator;\nimport com.binance.connector.client.utils.signaturegenerator.SignatureGenerator;\nimport org.junit.Test;\nimport org.junit.Before;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RequestHandler_sendSignedRequestTest {\n\n    private RequestHandler requestHandler;\n    private SignatureGenerator mockSignatureGenerator;\n    private ProxyAuth mockProxyAuth;\n\n    @Before\n    public void setUp() {\n        mockSignatureGenerator = mock(HmacSignatureGenerator.class);\n        mockProxyAuth = mock(ProxyAuth.class);\n        requestHandler = new RequestHandler(\"validApiKey\", mockSignatureGenerator, mockProxyAuth);\n    }\n\n    @Test\n    public void testSendSignedRequest_HmacSignatureGenerator_ValidApiKey() {\n        String baseUrl = \"https://api.binance.com\";\n        String urlPath = \"/api/v3/order\";\n        Map<String, Object> parameters = new HashMap<>();\n        HttpMethod httpMethod = HttpMethod.POST;\n        boolean showLimitUsage = true;\n\n        when(mockSignatureGenerator.getSignature(anyString())).thenReturn(\"mockSignature\");\n        when(UrlBuilder.buildTimestamp()).thenReturn(\"1234567890\");\n        when(UrlBuilder.buildFullUrl(anyString(), anyString(), anyMap())).thenReturn(\"fullUrl\");\n        when(ResponseHandler.handleResponse(any(), eq(showLimitUsage), eq(mockProxyAuth))).thenReturn(\"response\");\n\n        String result = requestHandler.sendSignedRequest(baseUrl, urlPath, parameters, httpMethod, showLimitUsage);\n\n        assertNotNull(result);\n        verify(mockSignatureGenerator).getSignature(anyString());\n        verify(UrlBuilder).buildTimestamp();\n        verify(UrlBuilder).buildFullUrl(baseUrl, urlPath, parameters);\n        verify(ResponseHandler).handleResponse(any(), eq(showLimitUsage), eq(mockProxyAuth));\n    }\n\n    @Test(expected = BinanceConnectorException.class)\n    public void testSendSignedRequest_HmacSignatureGenerator_NullApiKey() {\n        requestHandler = new RequestHandler(null, mockSignatureGenerator, mockProxyAuth);\n        requestHandler.sendSignedRequest(\"baseUrl\", \"urlPath\", null, HttpMethod.POST, true);\n    }\n\n    @Test(expected = BinanceConnectorException.class)\n    public void testSendSignedRequest_HmacSignatureGenerator_EmptyApiKey() {\n        requestHandler = new RequestHandler(\"\", mockSignatureGenerator, mockProxyAuth);\n        requestHandler.sendSignedRequest(\"baseUrl\", \"urlPath\", null, HttpMethod.POST, true);\n    }\n}\n"}]