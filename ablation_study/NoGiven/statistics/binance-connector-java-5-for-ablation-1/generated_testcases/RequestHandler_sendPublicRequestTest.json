[{"strategy": "retry", "code": "\npackage com.binance.connector.client.utils;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.RequestBuilder;\nimport com.binance.connector.client.utils.ResponseHandler;\nimport com.binance.connector.client.utils.UrlBuilder;\nimport com.binance.connector.client.utils.ProxyAuth;\nimport org.junit.Test;\nimport org.junit.Before;\nimport org.mockito.Mockito;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class RequestHandler_sendPublicRequestTest {\n\n    private RequestHandler requestHandler;\n    private ProxyAuth proxy;\n\n    @Before\n    public void setUp() {\n        proxy = mock(ProxyAuth.class);\n        requestHandler = new RequestHandler(\"apiKey\", proxy);\n    }\n\n    @Test\n    public void testSendPublicRequest() {\n        // Given\n        String baseUrl = \"https://api.binance.com\";\n        String urlPath = \"/api/v3/ticker/price\";\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"symbol\", \"BTCUSDT\");\n        HttpMethod httpMethod = HttpMethod.GET;\n        boolean showLimitUsage = true;\n\n        String expectedFullUrl = \"https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT\";\n        Object expectedRequest = mock(Object.class);\n        String expectedResponse = \"response\";\n\n        // When\n        when(UrlBuilder.buildFullUrl(baseUrl, urlPath, parameters)).thenReturn(expectedFullUrl);\n        when(RequestBuilder.buildPublicRequest(expectedFullUrl, httpMethod)).thenReturn((okhttp3.Request) expectedRequest);\n        when(ResponseHandler.handleResponse((okhttp3.Request) expectedRequest, showLimitUsage, proxy)).thenReturn(expectedResponse);\n\n        String actualResponse = requestHandler.sendPublicRequest(baseUrl, urlPath, parameters, httpMethod, showLimitUsage);\n\n        // Then\n        assertEquals(expectedResponse, actualResponse);\n        verify(UrlBuilder).buildFullUrl(baseUrl, urlPath, parameters);\n        verify(RequestBuilder).buildPublicRequest(expectedFullUrl, httpMethod);\n        verify(ResponseHandler).handleResponse((okhttp3.Request) expectedRequest, showLimitUsage, proxy);\n    }\n}\n"}]