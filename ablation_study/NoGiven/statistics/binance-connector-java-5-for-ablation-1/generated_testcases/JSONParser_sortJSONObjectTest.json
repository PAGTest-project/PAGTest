[{"strategy": "generate", "code": "\npackage com.binance.connector.client.utils;\n\nimport org.json.JSONObject;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.util.Map;\nimport static org.junit.Assert.*;\n\npublic class JSONParser_sortJSONObjectTest {\n\n    private JSONObject testJson;\n\n    @Before\n    public void setUp() {\n        testJson = new JSONObject();\n        JSONParser.addKeyValue(testJson, \"c\", \"valueC\");\n        JSONParser.addKeyValue(testJson, \"a\", \"valueA\");\n        JSONParser.addKeyValue(testJson, \"b\", \"valueB\");\n    }\n\n    @Test\n    public void testSortJSONObject() {\n        Map<String, Object> sortedParams = JSONParser.sortJSONObject(testJson);\n\n        assertEquals(\"valueA\", sortedParams.get(\"a\"));\n        assertEquals(\"valueB\", sortedParams.get(\"b\"));\n        assertEquals(\"valueC\", sortedParams.get(\"c\"));\n    }\n\n    @Test\n    public void testSortJSONObjectWithRemovedKey() {\n        JSONParser.pullValue(testJson, \"b\");\n        Map<String, Object> sortedParams = JSONParser.sortJSONObject(testJson);\n\n        assertEquals(\"valueA\", sortedParams.get(\"a\"));\n        assertNull(sortedParams.get(\"b\"));\n        assertEquals(\"valueC\", sortedParams.get(\"c\"));\n    }\n\n    @Test\n    public void testSortJSONObjectWithEmptyObject() {\n        JSONObject emptyJson = new JSONObject();\n        Map<String, Object> sortedParams = JSONParser.sortJSONObject(emptyJson);\n\n        assertTrue(sortedParams.isEmpty());\n    }\n}\n"}]