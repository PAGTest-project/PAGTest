[{"strategy": "retry", "code": "\npackage com.binance.connector.client.impl.spot;\n\nimport com.binance.connector.client.enums.HttpMethod;\nimport com.binance.connector.client.utils.ParameterChecker;\nimport com.binance.connector.client.utils.RequestHandler;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Mockito.*;\n\npublic class SubAccount_subAccountToSubAccountTest {\n\n    private SubAccount subAccount;\n    private RequestHandler requestHandler;\n    private final String baseUrl = \"https://api.binance.com\";\n    private final boolean showLimitUsage = true;\n\n    @Before\n    public void setUp() {\n        requestHandler = mock(RequestHandler.class);\n        subAccount = new SubAccount(baseUrl, \"apiKey\", \"secretKey\", showLimitUsage, null);\n        subAccount.requestHandler = requestHandler;\n    }\n\n    @Test\n    public void testSubAccountToSubAccount() {\n        Map<String, Object> parameters = new HashMap<>();\n        parameters.put(\"toEmail\", \"test@example.com\");\n        parameters.put(\"asset\", \"BTC\");\n        parameters.put(\"amount\", \"1.0\");\n\n        when(requestHandler.sendSignedRequest(baseUrl, subAccount.SUB_TO_SUB, parameters, HttpMethod.POST, showLimitUsage))\n                .thenReturn(\"success\");\n\n        String result = subAccount.subAccountToSubAccount(parameters);\n        assertEquals(\"success\", result);\n\n        verify(requestHandler).sendSignedRequest(baseUrl, subAccount.SUB_TO_SUB, parameters, HttpMethod.POST, showLimitUsage);\n    }\n}\n"}]